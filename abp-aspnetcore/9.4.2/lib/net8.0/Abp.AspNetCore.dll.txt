[ExtensionAttribute]
public static class Abp.Application.Services.Dto.ComboboxItemDtoExtensions : object {
    [ExtensionAttribute]
public static SelectListItem ToSelectListItem(ComboboxItemDto comboboxItem);
}
public class Abp.AspNetCore.AbpActionInfoInHttpContext : object {
    [CompilerGeneratedAttribute]
private bool <IsObjectResult>k__BackingField;
    public bool IsObjectResult { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsObjectResult();
    [CompilerGeneratedAttribute]
public void set_IsObjectResult(bool value);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.AbpApplicationBuilderExtensions : object {
    private static string AuthorizationExceptionHandlingMiddlewareMarker;
    [ExtensionAttribute]
public static void UseAbp(IApplicationBuilder app);
    [ExtensionAttribute]
public static void UseAbp(IApplicationBuilder app, Action`1<AbpApplicationBuilderOptions> optionsAction);
    [ExtensionAttribute]
public static void UseEmbeddedFiles(IApplicationBuilder app);
    private static void InitializeAbp(IApplicationBuilder app);
    [ExtensionAttribute]
public static void UseCastleLoggerFactory(IApplicationBuilder app);
    [ExtensionAttribute]
public static void UseAbpRequestLocalization(IApplicationBuilder app, Action`1<RequestLocalizationOptions> optionsAction);
    [ExtensionAttribute]
public static void UseAbpSecurityHeaders(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseUnitOfWork(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseAbpAuthorizationExceptionHandling(IApplicationBuilder app);
}
public class Abp.AspNetCore.AbpApplicationBuilderOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseCastleLoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAbpRequestLocalization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSecurityHeaders>k__BackingField;
    public bool UseCastleLoggerFactory { get; public set; }
    public bool UseAbpRequestLocalization { get; public set; }
    public bool UseSecurityHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseCastleLoggerFactory();
    [CompilerGeneratedAttribute]
public void set_UseCastleLoggerFactory(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAbpRequestLocalization();
    [CompilerGeneratedAttribute]
public void set_UseAbpRequestLocalization(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSecurityHeaders();
    [CompilerGeneratedAttribute]
public void set_UseSecurityHeaders(bool value);
}
public class Abp.AspNetCore.AbpAspNetCoreConventionalRegistrar : object {
    public sealed virtual void RegisterAssembly(IConventionalRegistrationContext context);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.AspNetCore.AbpAspNetCoreModule : AbpModule {
    public virtual void PreInitialize();
    public virtual void Initialize();
    public virtual void PostInitialize();
    private void AddApplicationParts();
    private void ConfigureAntiforgery();
    [CompilerGeneratedAttribute]
private void <ConfigureAntiforgery>b__4_0(IOptions`1<AntiforgeryOptions> optionsAccessor);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.AbpServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceProvider AddAbp(IServiceCollection services, Action`1<AbpBootstrapperOptions> optionsAction, bool removeConventionalInterceptors);
    [ExtensionAttribute]
public static void AddAbpWithoutCreatingServiceProvider(IServiceCollection services, Action`1<AbpBootstrapperOptions> optionsAction, bool removeConventionalInterceptors);
    private static void RemoveConventionalInterceptionSelectors();
    private static void ConfigureAspNetCore(IServiceCollection services, IIocResolver iocResolver);
    private static AbpBootstrapper AddAbpBootstrapper(IServiceCollection services, Action`1<AbpBootstrapperOptions> optionsAction);
}
[ObsoleteAttribute("Use Abp.Web.Http.UrlHelper instead")]
public static class Abp.AspNetCore.AbpUrlHelper : object {
    public static bool IsLocalUrl(HttpRequest request, string url);
    private static string GetLocalUrlRoot(HttpRequest request);
    private static bool IsRelativeLocalUrl(string url);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.ApplicationPartManagerExtensions : object {
    [ExtensionAttribute]
public static void AddApplicationPartsIfNotAddedBefore(ApplicationPartManager partManager, Assembly assembly);
    [ExtensionAttribute]
public static void AddAbpPlugInAssemblyPartIfNotAddedBefore(ApplicationPartManager partManager, AbpPlugInAssemblyPart assemblyPart);
}
public class Abp.AspNetCore.Configuration.AbpAspNetCoreConfiguration : object {
    [CompilerGeneratedAttribute]
private WrapResultAttribute <DefaultWrapResultAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseCacheAttribute <DefaultResponseCacheAttributeForControllers>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseCacheAttribute <DefaultResponseCacheAttributeForAppServices>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitOfWorkAttribute <DefaultUnitOfWorkAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <FormBodyBindingIgnoredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ControllerAssemblySettingList <ControllerAssemblySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValidationEnabledForControllers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuditingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetNoCacheForAjaxResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMvcDateTimeFormatForAppServices>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <InputDateTimeFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IEndpointRouteBuilder>> <EndpointConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private WrapResultFilterCollection <WrapResultFilters>k__BackingField;
    public WrapResultAttribute DefaultWrapResultAttribute { get; }
    public ResponseCacheAttribute DefaultResponseCacheAttributeForControllers { get; public set; }
    public ResponseCacheAttribute DefaultResponseCacheAttributeForAppServices { get; public set; }
    public UnitOfWorkAttribute DefaultUnitOfWorkAttribute { get; }
    public List`1<Type> FormBodyBindingIgnoredTypes { get; }
    public ControllerAssemblySettingList ControllerAssemblySettings { get; }
    public bool IsValidationEnabledForControllers { get; public set; }
    public bool IsAuditingEnabled { get; public set; }
    public bool SetNoCacheForAjaxResponses { get; public set; }
    public bool UseMvcDateTimeFormatForAppServices { get; public set; }
    public List`1<string> InputDateTimeFormats { get; public set; }
    public string OutputDateTimeFormat { get; public set; }
    public List`1<Action`1<IEndpointRouteBuilder>> EndpointConfiguration { get; }
    public WrapResultFilterCollection WrapResultFilters { get; }
    [CompilerGeneratedAttribute]
public sealed virtual WrapResultAttribute get_DefaultWrapResultAttribute();
    [CompilerGeneratedAttribute]
public sealed virtual ResponseCacheAttribute get_DefaultResponseCacheAttributeForControllers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultResponseCacheAttributeForControllers(ResponseCacheAttribute value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseCacheAttribute get_DefaultResponseCacheAttributeForAppServices();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultResponseCacheAttributeForAppServices(ResponseCacheAttribute value);
    [CompilerGeneratedAttribute]
public sealed virtual UnitOfWorkAttribute get_DefaultUnitOfWorkAttribute();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Type> get_FormBodyBindingIgnoredTypes();
    [CompilerGeneratedAttribute]
public ControllerAssemblySettingList get_ControllerAssemblySettings();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValidationEnabledForControllers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsValidationEnabledForControllers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAuditingEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAuditingEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SetNoCacheForAjaxResponses();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SetNoCacheForAjaxResponses(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseMvcDateTimeFormatForAppServices();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseMvcDateTimeFormatForAppServices(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_InputDateTimeFormats();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InputDateTimeFormats(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputDateTimeFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputDateTimeFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IEndpointRouteBuilder>> get_EndpointConfiguration();
    [CompilerGeneratedAttribute]
public WrapResultFilterCollection get_WrapResultFilters();
    public sealed virtual AbpControllerAssemblySettingBuilder CreateControllersForAppServices(Assembly assembly, string moduleName, bool useConventionalHttpVerbs);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Configuration.AbpAspNetCoreConfigurationExtensions : object {
    [ExtensionAttribute]
public static IAbpAspNetCoreConfiguration AbpAspNetCore(IModuleConfigurations configurations);
}
public class Abp.AspNetCore.Configuration.AbpControllerAssemblySetting : object {
    public static string DefaultServiceModuleName;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseConventionalHttpVerbs>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypePredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ControllerModel> <ControllerModelConfigurer>k__BackingField;
    public string ModuleName { get; }
    public Assembly Assembly { get; }
    public bool UseConventionalHttpVerbs { get; }
    public Func`2<Type, bool> TypePredicate { get; public set; }
    public Action`1<ControllerModel> ControllerModelConfigurer { get; public set; }
    public AbpControllerAssemblySetting(string moduleName, Assembly assembly, bool useConventionalHttpVerbs);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public bool get_UseConventionalHttpVerbs();
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_TypePredicate();
    [CompilerGeneratedAttribute]
public void set_TypePredicate(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Action`1<ControllerModel> get_ControllerModelConfigurer();
    [CompilerGeneratedAttribute]
public void set_ControllerModelConfigurer(Action`1<ControllerModel> value);
}
public class Abp.AspNetCore.Configuration.AbpControllerAssemblySettingBuilder : object {
    private AbpControllerAssemblySetting _setting;
    public AbpControllerAssemblySettingBuilder(AbpControllerAssemblySetting setting);
    public sealed virtual AbpControllerAssemblySettingBuilder Where(Func`2<Type, bool> predicate);
    public sealed virtual AbpControllerAssemblySettingBuilder ConfigureControllerModel(Action`1<ControllerModel> configurer);
}
public class Abp.AspNetCore.Configuration.ControllerAssemblySettingList : List`1<AbpControllerAssemblySetting> {
    public List`1<AbpControllerAssemblySetting> GetSettings(Type controllerType);
}
public interface Abp.AspNetCore.Configuration.IAbpAspNetCoreConfiguration {
    public WrapResultAttribute DefaultWrapResultAttribute { get; }
    public ResponseCacheAttribute DefaultResponseCacheAttributeForControllers { get; public set; }
    public ResponseCacheAttribute DefaultResponseCacheAttributeForAppServices { get; public set; }
    public UnitOfWorkAttribute DefaultUnitOfWorkAttribute { get; }
    public List`1<Type> FormBodyBindingIgnoredTypes { get; }
    public bool IsValidationEnabledForControllers { get; public set; }
    public bool IsAuditingEnabled { get; public set; }
    public bool SetNoCacheForAjaxResponses { get; public set; }
    public bool UseMvcDateTimeFormatForAppServices { get; public set; }
    public List`1<string> InputDateTimeFormats { get; public set; }
    public string OutputDateTimeFormat { get; public set; }
    public List`1<Action`1<IEndpointRouteBuilder>> EndpointConfiguration { get; }
    public abstract virtual WrapResultAttribute get_DefaultWrapResultAttribute();
    public abstract virtual ResponseCacheAttribute get_DefaultResponseCacheAttributeForControllers();
    public abstract virtual void set_DefaultResponseCacheAttributeForControllers(ResponseCacheAttribute value);
    public abstract virtual ResponseCacheAttribute get_DefaultResponseCacheAttributeForAppServices();
    public abstract virtual void set_DefaultResponseCacheAttributeForAppServices(ResponseCacheAttribute value);
    public abstract virtual UnitOfWorkAttribute get_DefaultUnitOfWorkAttribute();
    public abstract virtual List`1<Type> get_FormBodyBindingIgnoredTypes();
    public abstract virtual bool get_IsValidationEnabledForControllers();
    public abstract virtual void set_IsValidationEnabledForControllers(bool value);
    public abstract virtual bool get_IsAuditingEnabled();
    public abstract virtual void set_IsAuditingEnabled(bool value);
    public abstract virtual bool get_SetNoCacheForAjaxResponses();
    public abstract virtual void set_SetNoCacheForAjaxResponses(bool value);
    public abstract virtual bool get_UseMvcDateTimeFormatForAppServices();
    [ObsoleteAttribute("Use InputDateTimeFormats and OutputDateTimeFormat instead.")]
public abstract virtual void set_UseMvcDateTimeFormatForAppServices(bool value);
    public abstract virtual List`1<string> get_InputDateTimeFormats();
    public abstract virtual void set_InputDateTimeFormats(List`1<string> value);
    public abstract virtual string get_OutputDateTimeFormat();
    public abstract virtual void set_OutputDateTimeFormat(string value);
    public abstract virtual List`1<Action`1<IEndpointRouteBuilder>> get_EndpointConfiguration();
    public abstract virtual AbpControllerAssemblySettingBuilder CreateControllersForAppServices(Assembly assembly, string moduleName, bool useConventionalHttpVerbs);
}
public interface Abp.AspNetCore.Configuration.IAbpControllerAssemblySettingBuilder {
    public abstract virtual AbpControllerAssemblySettingBuilder Where(Func`2<Type, bool> predicate);
    public abstract virtual AbpControllerAssemblySettingBuilder ConfigureControllerModel(Action`1<ControllerModel> configurer);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Dependency.AbpCastleWindsorHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseCastleWindsor(IHostBuilder hostBuilder, IWindsorContainer windsorContainer);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Dependency.AbpMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddAbpNewtonsoftJson(IMvcBuilder mvcBuilder);
}
public class Abp.AspNetCore.EmbeddedResources.EmbeddedResourceFileProvider : object {
    private IIocResolver _iocResolver;
    private Lazy`1<IEmbeddedResourceManager> _embeddedResourceManager;
    private Lazy`1<IWebEmbeddedResourcesConfiguration> _configuration;
    private bool _isInitialized;
    public EmbeddedResourceFileProvider(IIocResolver iocResolver);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
    protected virtual bool IsIgnoredFile(EmbeddedResourceItem resource);
    private bool IsInitialized();
}
public class Abp.AspNetCore.EmbeddedResources.EmbeddedResourceItemDirectoryContents : object {
    private IEnumerable`1<IFileInfo> _entries;
    public bool Exists { get; }
    public EmbeddedResourceItemDirectoryContents(IEnumerable`1<IFileInfo> entries);
    public sealed virtual bool get_Exists();
    public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Abp.AspNetCore.EmbeddedResources.EmbeddedResourceItemFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private EmbeddedResourceItem _resourceItem;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public EmbeddedResourceItemFileInfo(EmbeddedResourceItem resourceItem, string name);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
public class Abp.AspNetCore.EmbeddedResources.EmbeddedResourceViewFileProvider : EmbeddedResourceFileProvider {
    public EmbeddedResourceViewFileProvider(IIocResolver iocResolver);
    protected virtual bool IsIgnoredFile(EmbeddedResourceItem resource);
}
public class Abp.AspNetCore.EntityHistory.HttpRequestEntityChangeSetReasonProvider : EntityChangeSetReasonProviderBase {
    [CompilerGeneratedAttribute]
private IHttpContextAccessor <HttpContextAccessor>k__BackingField;
    private static string SchemeDelimiter;
    public string Reason { get; }
    protected IHttpContextAccessor HttpContextAccessor { get; }
    public HttpRequestEntityChangeSetReasonProvider(IHttpContextAccessor httpContextAccessor, IAmbientScopeProvider`1<ReasonOverride> reasonOverrideScopeProvider);
    public virtual string get_Reason();
    [CompilerGeneratedAttribute]
protected IHttpContextAccessor get_HttpContextAccessor();
}
public class Abp.AspNetCore.ExceptionHandling.AbpAuthorizationExceptionHandlingMiddleware : object {
    private IErrorInfoBuilder _errorInfoBuilder;
    private ILocalizationManager _localizationManager;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    public ILogger Logger { get; public set; }
    public IEventBus EventBus { get; public set; }
    public AbpAuthorizationExceptionHandlingMiddleware(IErrorInfoBuilder errorInfoBuilder, ILocalizationManager localizationManager);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    [AsyncStateMachineAttribute("Abp.AspNetCore.ExceptionHandling.AbpAuthorizationExceptionHandlingMiddleware/<InvokeAsync>d__11")]
public sealed virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    protected virtual string GetAuthorizationExceptionMessage(HttpContext context);
    protected virtual bool IsAuthorizationExceptionStatusCode(HttpContext context);
}
public class Abp.AspNetCore.Localization.AbpDefaultRequestCultureProvider : RequestCultureProvider {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public ILogger Logger { get; public set; }
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Localization.AbpDefaultRequestCultureProvider/<DetermineProviderCultureResult>d__5")]
public virtual Task`1<ProviderCultureResult> DetermineProviderCultureResult(HttpContext httpContext);
}
public class Abp.AspNetCore.Localization.AbpLocalizationHeaderRequestCultureProvider : RequestCultureProvider {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private static Char[] Separator;
    private static string _culturePrefix;
    private static string _uiCulturePrefix;
    [CompilerGeneratedAttribute]
private string <HeaderName>k__BackingField;
    public ILogger Logger { get; public set; }
    public string HeaderName { get; public set; }
    private static AbpLocalizationHeaderRequestCultureProvider();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public string get_HeaderName();
    [CompilerGeneratedAttribute]
public void set_HeaderName(string value);
    public virtual Task`1<ProviderCultureResult> DetermineProviderCultureResult(HttpContext httpContext);
    public static ProviderCultureResult ParseHeaderValue(string value);
}
public class Abp.AspNetCore.Localization.AbpUserRequestCultureProvider : RequestCultureProvider {
    [CompilerGeneratedAttribute]
private CookieRequestCultureProvider <CookieProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpLocalizationHeaderRequestCultureProvider <HeaderProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public CookieRequestCultureProvider CookieProvider { get; public set; }
    public AbpLocalizationHeaderRequestCultureProvider HeaderProvider { get; public set; }
    public ILogger Logger { get; public set; }
    [CompilerGeneratedAttribute]
public CookieRequestCultureProvider get_CookieProvider();
    [CompilerGeneratedAttribute]
public void set_CookieProvider(CookieRequestCultureProvider value);
    [CompilerGeneratedAttribute]
public AbpLocalizationHeaderRequestCultureProvider get_HeaderProvider();
    [CompilerGeneratedAttribute]
public void set_HeaderProvider(AbpLocalizationHeaderRequestCultureProvider value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Localization.AbpUserRequestCultureProvider/<DetermineProviderCultureResult>d__13")]
public virtual Task`1<ProviderCultureResult> DetermineProviderCultureResult(HttpContext httpContext);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Localization.AbpUserRequestCultureProvider/<GetResultOrNull>d__14")]
protected virtual Task`1<ProviderCultureResult> GetResultOrNull(HttpContext httpContext, IRequestCultureProvider provider);
    private Task`1<string> GetDefaultCulture(IAbpSession abpSession, ISettingManager settingManager);
}
public class Abp.AspNetCore.MultiTenancy.DomainTenantResolveContributor : object {
    private IHttpContextAccessor _httpContextAccessor;
    private IWebMultiTenancyConfiguration _multiTenancyConfiguration;
    private ITenantStore _tenantStore;
    public DomainTenantResolveContributor(IHttpContextAccessor httpContextAccessor, IWebMultiTenancyConfiguration multiTenancyConfiguration, ITenantStore tenantStore);
    public sealed virtual Nullable`1<int> ResolveTenantId();
    private ExtractionResult IsDomainFormatValid(String[] domainFormats, string hostName);
}
public class Abp.AspNetCore.MultiTenancy.HttpContextTenantResolverCache : object {
    private static string CacheItemKey;
    private IHttpContextAccessor _httpContextAccessor;
    public TenantResolverCacheItem Value { get; public set; }
    public HttpContextTenantResolverCache(IHttpContextAccessor httpContextAccessor);
    public sealed virtual TenantResolverCacheItem get_Value();
    public sealed virtual void set_Value(TenantResolverCacheItem value);
}
public class Abp.AspNetCore.MultiTenancy.HttpCookieTenantResolveContributor : object {
    private IHttpContextAccessor _httpContextAccessor;
    private IMultiTenancyConfig _multiTenancyConfig;
    public HttpCookieTenantResolveContributor(IHttpContextAccessor httpContextAccessor, IMultiTenancyConfig multiTenancyConfig);
    public sealed virtual Nullable`1<int> ResolveTenantId();
}
public class Abp.AspNetCore.MultiTenancy.HttpHeaderTenantResolveContributor : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IHttpContextAccessor _httpContextAccessor;
    private IMultiTenancyConfig _multiTenancyConfig;
    public ILogger Logger { get; public set; }
    public HttpHeaderTenantResolveContributor(IHttpContextAccessor httpContextAccessor, IMultiTenancyConfig multiTenancyConfig);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual Nullable`1<int> ResolveTenantId();
}
[ExtensionAttribute]
internal static class Abp.AspNetCore.Mvc.AbpMvcOptionsExtensions : object {
    [ExtensionAttribute]
public static void AddAbp(MvcOptions options, IServiceCollection services);
    private static void AddConventions(MvcOptions options, IServiceCollection services);
    private static void AddActionFilters(MvcOptions options);
    private static void AddPageFilters(MvcOptions options);
    private static void AddModelBinders(MvcOptions options);
}
[AttributeUsageAttribute("68")]
public class Abp.AspNetCore.Mvc.Antiforgery.AbpAutoValidateAntiforgeryTokenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public bool IsReusable { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Abp.AspNetCore.Mvc.Antiforgery.AbpAutoValidateAntiforgeryTokenAuthorizationFilter : AbpValidateAntiforgeryTokenAuthorizationFilter {
    private AntiforgeryOptions _antiforgeryOptions;
    private IOptionsSnapshot`1<CookieAuthenticationOptions> _namedOptionsAccessor;
    private IAbpAntiForgeryConfiguration _antiForgeryConfiguration;
    public AbpAutoValidateAntiforgeryTokenAuthorizationFilter(IAntiforgery antiforgery, IOptions`1<AntiforgeryOptions> antiforgeryOptions, IAbpAntiForgeryConfiguration antiForgeryConfiguration, IOptionsSnapshot`1<CookieAuthenticationOptions> namedOptionsAccessor, ILogger logger);
    protected virtual bool ShouldValidate(AuthorizationFilterContext context);
    private static bool ShouldValidateInternal(AuthorizationFilterContext context);
}
[AttributeUsageAttribute("68")]
public class Abp.AspNetCore.Mvc.Antiforgery.AbpValidateAntiForgeryTokenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public bool IsReusable { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Abp.AspNetCore.Mvc.Antiforgery.AbpValidateAntiforgeryTokenAuthorizationFilter : object {
    private IAntiforgery _antiforgery;
    private AntiforgeryOptions _antiforgeryOptions;
    private IOptionsSnapshot`1<CookieAuthenticationOptions> _namedOptionsAccessor;
    private IAbpAntiForgeryConfiguration _antiForgeryConfiguration;
    private ILogger _logger;
    public AbpValidateAntiforgeryTokenAuthorizationFilter(IAntiforgery antiforgery, IOptions`1<AntiforgeryOptions> antiforgeryOptions, IAbpAntiForgeryConfiguration antiForgeryConfiguration, IOptionsSnapshot`1<CookieAuthenticationOptions> namedOptionsAccessor, ILogger logger);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Antiforgery.AbpValidateAntiforgeryTokenAuthorizationFilter/<OnAuthorizationAsync>d__6")]
public sealed virtual Task OnAuthorizationAsync(AuthorizationFilterContext context);
    protected virtual bool ShouldValidate(AuthorizationFilterContext context);
    private static bool ShouldValidateInternal(AuthorizationFilterContext context);
}
public class Abp.AspNetCore.Mvc.Auditing.AbpAuditActionFilter : object {
    private IAbpAspNetCoreConfiguration _configuration;
    private IAuditingHelper _auditingHelper;
    private IAuditingConfiguration _auditingConfiguration;
    private IAuditSerializer _auditSerializer;
    public AbpAuditActionFilter(IAbpAspNetCoreConfiguration configuration, IAuditingHelper auditingHelper, IAuditingConfiguration auditingConfiguration, IAuditSerializer auditSerializer);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Auditing.AbpAuditActionFilter/<OnActionExecutionAsync>d__5")]
public sealed virtual Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next);
    private bool ShouldSaveAudit(ActionExecutingContext actionContext);
}
public class Abp.AspNetCore.Mvc.Auditing.AbpAuditPageFilter : object {
    private IAbpAspNetCoreConfiguration _configuration;
    private IAuditingHelper _auditingHelper;
    private IAuditingConfiguration _auditingConfiguration;
    private IAuditSerializer _auditSerializer;
    public AbpAuditPageFilter(IAbpAspNetCoreConfiguration configuration, IAuditingHelper auditingHelper, IAuditingConfiguration auditingConfiguration, IAuditSerializer auditSerializer);
    public sealed virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Auditing.AbpAuditPageFilter/<OnPageHandlerExecutionAsync>d__6")]
public sealed virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
    private bool ShouldSaveAudit(PageHandlerExecutingContext actionContext);
}
public class Abp.AspNetCore.Mvc.Auditing.HttpContextClientInfoProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IHttpContextAccessor _httpContextAccessor;
    public string BrowserInfo { get; }
    public string ClientIpAddress { get; }
    public string ComputerName { get; }
    public ILogger Logger { get; public set; }
    public HttpContextClientInfoProvider(IHttpContextAccessor httpContextAccessor);
    public sealed virtual string get_BrowserInfo();
    public sealed virtual string get_ClientIpAddress();
    public sealed virtual string get_ComputerName();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    protected virtual string GetBrowserInfo();
    protected virtual string GetClientIpAddress();
    protected virtual string GetComputerName();
}
public class Abp.AspNetCore.Mvc.Authorization.AbpAuthorizationFilter : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IAuthorizationHelper _authorizationHelper;
    private IErrorInfoBuilder _errorInfoBuilder;
    private IEventBus _eventBus;
    public ILogger Logger { get; public set; }
    public AbpAuthorizationFilter(IAuthorizationHelper authorizationHelper, IErrorInfoBuilder errorInfoBuilder, IEventBus eventBus);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Authorization.AbpAuthorizationFilter/<OnAuthorizationAsync>d__8")]
public virtual Task OnAuthorizationAsync(AuthorizationFilterContext context);
}
[AttributeUsageAttribute("68")]
public class Abp.AspNetCore.Mvc.Authorization.AbpMvcAuthorizeAttribute : AuthorizeAttribute {
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAllPermissions>k__BackingField;
    public String[] Permissions { get; public set; }
    public bool RequireAllPermissions { get; public set; }
    public AbpMvcAuthorizeAttribute(String[] permissions);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireAllPermissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequireAllPermissions(bool value);
}
public class Abp.AspNetCore.Mvc.Caching.AspNetCoreGetScriptsResponsePerUserCacheInvalidator : object {
    private static string CacheName;
    private ICachedUniqueKeyPerUser _cachedUniqueKeyPerUser;
    public AspNetCoreGetScriptsResponsePerUserCacheInvalidator(ICachedUniqueKeyPerUser cachedUniqueKeyPerUser);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<LanguageInfo> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<SettingInfo> eventData);
}
public class Abp.AspNetCore.Mvc.Caching.GetScriptsResponsePerUserCache : object {
    public static string CacheName;
}
public class Abp.AspNetCore.Mvc.Caching.GetScriptsResponsePerUserCacheMiddleware : object {
    private RequestDelegate _next;
    private IGetScriptsResponsePerUserConfiguration _configuration;
    public GetScriptsResponsePerUserCacheMiddleware(RequestDelegate next, IGetScriptsResponsePerUserConfiguration configuration);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Caching.GetScriptsResponsePerUserCacheMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Mvc.Caching.GetScriptsResponsePerUserCacheMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseGetScriptsResponsePerUserCache(IApplicationBuilder builder);
}
internal class Abp.AspNetCore.Mvc.Caching.GetScriptsResponsePerUserConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    public bool IsEnabled { get; public set; }
    public TimeSpan MaxAge { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxAge(TimeSpan value);
}
public interface Abp.AspNetCore.Mvc.Caching.IGetScriptsResponsePerUserConfiguration {
    public bool IsEnabled { get; public set; }
    public TimeSpan MaxAge { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual TimeSpan get_MaxAge();
    public abstract virtual void set_MaxAge(TimeSpan value);
}
public class Abp.AspNetCore.Mvc.Controllers.AbpAppViewController : AbpController {
    [DisableAuditingAttribute]
[DisableValidationAttribute]
[UnitOfWorkAttribute]
public ActionResult Load(string viewUrl);
}
public abstract class Abp.AspNetCore.Mvc.Controllers.AbpController : Controller {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionManager <PermissionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureManager <FeatureManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureChecker <FeatureChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectMapper <ObjectMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    private ILocalizationSource _localizationSource;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAlertManager <AlertManager>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    public IAbpSession AbpSession { get; public set; }
    public IEventBus EventBus { get; public set; }
    public IPermissionManager PermissionManager { get; public set; }
    public ISettingManager SettingManager { get; public set; }
    protected IPermissionChecker PermissionChecker { get; public set; }
    protected IFeatureManager FeatureManager { get; public set; }
    protected IFeatureChecker FeatureChecker { get; public set; }
    public IObjectMapper ObjectMapper { get; public set; }
    protected ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    protected ILocalizationSource LocalizationSource { get; }
    public ILogger Logger { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    public IAlertManager AlertManager { get; public set; }
    public AlertList Alerts { get; }
    protected IActiveUnitOfWork CurrentUnitOfWork { get; }
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    [CompilerGeneratedAttribute]
public IPermissionManager get_PermissionManager();
    [CompilerGeneratedAttribute]
public void set_PermissionManager(IPermissionManager value);
    [CompilerGeneratedAttribute]
public ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    [CompilerGeneratedAttribute]
protected IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
    [CompilerGeneratedAttribute]
protected IFeatureManager get_FeatureManager();
    [CompilerGeneratedAttribute]
public void set_FeatureManager(IFeatureManager value);
    [CompilerGeneratedAttribute]
protected IFeatureChecker get_FeatureChecker();
    [CompilerGeneratedAttribute]
public void set_FeatureChecker(IFeatureChecker value);
    [CompilerGeneratedAttribute]
public IObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
public void set_ObjectMapper(IObjectMapper value);
    [CompilerGeneratedAttribute]
protected ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    protected ILocalizationSource get_LocalizationSource();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public IUnitOfWorkManager get_UnitOfWorkManager();
    public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    [CompilerGeneratedAttribute]
public IAlertManager get_AlertManager();
    [CompilerGeneratedAttribute]
public void set_AlertManager(IAlertManager value);
    public AlertList get_Alerts();
    protected IActiveUnitOfWork get_CurrentUnitOfWork();
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
    protected Task`1<bool> IsGrantedAsync(string permissionName);
    protected bool IsGranted(string permissionName);
    protected virtual Task`1<bool> IsEnabledAsync(string featureName);
    protected virtual bool IsEnabled(string featureName);
}
public class Abp.AspNetCore.Mvc.Controllers.AbpLocalizationController : AbpController {
    protected IUrlHelper UrlHelper;
    private ISettingStore _settingStore;
    private ITypedCache`2<string, Dictionary`2<string, SettingInfo>> _userSettingCache;
    public AbpLocalizationController(IUrlHelper urlHelper, ISettingStore settingStore, ICacheManager cacheManager);
    [DisableAuditingAttribute]
public virtual ActionResult ChangeCulture(string cultureName, string returnUrl);
    protected virtual void ChangeCultureForUser(string cultureName);
}
public class Abp.AspNetCore.Mvc.Controllers.AbpScriptsController : AbpController {
    private IMultiTenancyScriptManager _multiTenancyScriptManager;
    private ISettingScriptManager _settingScriptManager;
    private INavigationScriptManager _navigationScriptManager;
    private ILocalizationScriptManager _localizationScriptManager;
    private IAuthorizationScriptManager _authorizationScriptManager;
    private IFeaturesScriptManager _featuresScriptManager;
    private ISessionScriptManager _sessionScriptManager;
    private ITimingScriptManager _timingScriptManager;
    private ICustomConfigScriptManager _customConfigScriptManager;
    private IJavaScriptMinifier _javaScriptMinifier;
    public AbpScriptsController(IMultiTenancyScriptManager multiTenancyScriptManager, ISettingScriptManager settingScriptManager, INavigationScriptManager navigationScriptManager, ILocalizationScriptManager localizationScriptManager, IAuthorizationScriptManager authorizationScriptManager, IFeaturesScriptManager featuresScriptManager, ISessionScriptManager sessionScriptManager, ITimingScriptManager timingScriptManager, ICustomConfigScriptManager customConfigScriptManager, IJavaScriptMinifier javaScriptMinifier);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Controllers.AbpScriptsController/<GetScripts>d__11")]
[DisableAuditingAttribute]
public Task`1<ActionResult> GetScripts(string culture, bool minify);
    private static string GetTriggerScript();
}
public class Abp.AspNetCore.Mvc.Controllers.AbpUserConfigurationController : AbpController {
    private AbpUserConfigurationBuilder _abpUserConfigurationBuilder;
    public AbpUserConfigurationController(AbpUserConfigurationBuilder abpUserConfigurationBuilder);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Controllers.AbpUserConfigurationController/<GetAll>d__2")]
public Task`1<JsonResult> GetAll();
}
public class Abp.AspNetCore.Mvc.Conventions.AbpAppServiceConvention : object {
    private Lazy`1<AbpAspNetCoreConfiguration> _configuration;
    public AbpAppServiceConvention(IServiceCollection services);
    public sealed virtual void Apply(ApplicationModel application);
    private void ConfigureCacheControl(ControllerModel controller, ResponseCacheAttribute responseCacheAttribute);
    private void ConfigureArea(ControllerModel controller, AbpControllerAssemblySetting configuration);
    private void ConfigureRemoteService(ControllerModel controller, AbpControllerAssemblySetting configuration);
    private void ConfigureParameters(ControllerModel controller);
    private bool CanUseFormBodyBinding(ActionModel action, ParameterModel parameter);
    private void ConfigureApiExplorer(ControllerModel controller);
    private void ConfigureApiExplorer(ActionModel action);
    private void ConfigureSelector(ControllerModel controller, AbpControllerAssemblySetting configuration);
    private void ConfigureSelector(string moduleName, string controllerName, ActionModel action, AbpControllerAssemblySetting configuration);
    private void AddAbpServiceSelector(string moduleName, string controllerName, ActionModel action, AbpControllerAssemblySetting configuration);
    private string SelectHttpMethod(ActionModel action, AbpControllerAssemblySetting configuration);
    private void NormalizeSelectorRoutes(string moduleName, string controllerName, ActionModel action, AbpControllerAssemblySetting configuration);
    private string GetModuleNameOrDefault(Type controllerType);
    private AbpControllerAssemblySetting GetControllerSettingOrNull(Type controllerType);
    private static AttributeRouteModel CreateAbpServiceAttributeRouteModel(string moduleName, string controllerName, ActionModel action);
    private static void RemoveEmptySelectors(IList`1<SelectorModel> selectors);
    private static bool IsEmptySelector(SelectorModel selector);
}
public class Abp.AspNetCore.Mvc.ExceptionHandling.AbpExceptionFilter : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    private IErrorInfoBuilder _errorInfoBuilder;
    private IAbpAspNetCoreConfiguration _configuration;
    private IAbpWebCommonModuleConfiguration _abpWebCommonModuleConfiguration;
    public ILogger Logger { get; public set; }
    public IEventBus EventBus { get; public set; }
    public AbpExceptionFilter(IErrorInfoBuilder errorInfoBuilder, IAbpAspNetCoreConfiguration configuration, IAbpWebCommonModuleConfiguration abpWebCommonModuleConfiguration);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    public sealed virtual void OnException(ExceptionContext context);
    protected virtual void HandleAndWrapException(ExceptionContext context, WrapResultAttribute wrapResultAttribute);
    private void HandleError(ExceptionContext context);
    protected virtual int GetStatusCode(ExceptionContext context, bool wrapOnError);
}
public class Abp.AspNetCore.Mvc.ExceptionHandling.AbpExceptionPageFilter : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    private IErrorInfoBuilder _errorInfoBuilder;
    private IAbpAspNetCoreConfiguration _configuration;
    private IAbpWebCommonModuleConfiguration _abpWebCommonModuleConfiguration;
    public ILogger Logger { get; public set; }
    public IEventBus EventBus { get; public set; }
    public AbpExceptionPageFilter(IErrorInfoBuilder errorInfoBuilder, IAbpAspNetCoreConfiguration configuration, IAbpWebCommonModuleConfiguration abpWebCommonModuleConfiguration);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    public sealed virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.ExceptionHandling.AbpExceptionPageFilter/<OnPageHandlerExecutionAsync>d__13")]
public sealed virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
    protected virtual void HandleAndWrapException(PageHandlerExecutedContext context, WrapResultAttribute wrapResultAttribute);
    private void HandleError(PageHandlerExecutedContext context);
    protected virtual int GetStatusCode(PageHandlerExecutedContext context, bool wrapOnError);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Mvc.Extensions.ActionDescriptorExtensions : object {
    [ExtensionAttribute]
public static ControllerActionDescriptor AsControllerActionDescriptor(ActionDescriptor actionDescriptor);
    [ExtensionAttribute]
public static MethodInfo GetMethodInfo(ActionDescriptor actionDescriptor);
    [ExtensionAttribute]
public static bool IsControllerAction(ActionDescriptor actionDescriptor);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Mvc.Extensions.AjaxRequestExtensions : object {
    [ExtensionAttribute]
public static bool IsAjaxRequest(HttpRequest request);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Mvc.Extensions.PageHandlerExecutingContextExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetBoundPropertiesAsDictionary(PageHandlerExecutingContext context);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Mvc.Extensions.RouteBuilderExtensions : object {
    [ExtensionAttribute]
public static void ConfigureAll(List`1<Action`1<IRouteBuilder>> routeBuilderActions, IRouteBuilder routes);
    [ExtensionAttribute]
public static void ConfigureAllEndpoints(List`1<Action`1<IEndpointRouteBuilder>> routeBuilderActions, IEndpointRouteBuilder routes);
}
public class Abp.AspNetCore.Mvc.ModelBinding.AbpDateTimeModelBinder : object {
    private Type _type;
    private SimpleTypeModelBinder _simpleTypeModelBinder;
    public AbpDateTimeModelBinder(Type type);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.ModelBinding.AbpDateTimeModelBinder/<BindModelAsync>d__3")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Abp.AspNetCore.Mvc.ModelBinding.AbpDateTimeModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
[ExtensionAttribute]
public static class Abp.AspNetCore.Mvc.Models.ModelStateExtensions : object {
    [ExtensionAttribute]
public static AjaxResponse ToMvcAjaxResponse(ModelStateDictionary modelState, ILocalizationManager localizationManager);
}
public class Abp.AspNetCore.Mvc.Providers.AbpAppServiceControllerFeatureProvider : ControllerFeatureProvider {
    private IIocResolver _iocResolver;
    public AbpAppServiceControllerFeatureProvider(IIocResolver iocResolver);
    protected virtual bool IsController(TypeInfo typeInfo);
}
[DontWrapResultAttribute]
[DisableAuditingAttribute]
public class Abp.AspNetCore.Mvc.Proxying.AbpServiceProxiesController : AbpController {
    private IApiProxyScriptManager _proxyScriptManager;
    private IJavaScriptMinifier _javaScriptMinifier;
    public AbpServiceProxiesController(IApiProxyScriptManager proxyScriptManager, IJavaScriptMinifier javaScriptMinifier);
    [ProducesAttribute("application/x-javascript", "Mono.Cecil.CustomAttributeArgument[]")]
public ContentResult GetAll(ApiProxyGenerationModel model);
}
public class Abp.AspNetCore.Mvc.Proxying.ApiProxyGenerationModel : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Controllers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Minify>k__BackingField;
    public string Type { get; public set; }
    public bool UseCache { get; public set; }
    public string Modules { get; public set; }
    public string Controllers { get; public set; }
    public string Actions { get; public set; }
    public bool Minify { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCache();
    [CompilerGeneratedAttribute]
public void set_UseCache(bool value);
    [CompilerGeneratedAttribute]
public string get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(string value);
    [CompilerGeneratedAttribute]
public string get_Controllers();
    [CompilerGeneratedAttribute]
public void set_Controllers(string value);
    [CompilerGeneratedAttribute]
public string get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(string value);
    [CompilerGeneratedAttribute]
public bool get_Minify();
    [CompilerGeneratedAttribute]
public void set_Minify(bool value);
    public sealed virtual void Normalize();
    public ApiProxyGenerationOptions CreateOptions();
}
public class Abp.AspNetCore.Mvc.Proxying.AspNetCoreApiDescriptionModelProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IApiDescriptionGroupCollectionProvider _descriptionProvider;
    private AbpAspNetCoreConfiguration _configuration;
    private IApiProxyScriptingConfiguration _apiProxyScriptingConfiguration;
    public ILogger Logger { get; public set; }
    public AspNetCoreApiDescriptionModelProvider(IApiDescriptionGroupCollectionProvider descriptionProvider, AbpAspNetCoreConfiguration configuration, IApiProxyScriptingConfiguration apiProxyScriptingConfiguration);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual ApplicationApiDescriptionModel CreateModel();
    private void AddApiDescriptionToModel(ApiDescription apiDescription, ApplicationApiDescriptionModel model);
    private string GetNormalizedMethodName(ControllerApiDescriptionModel controllerModel, MethodInfo method);
    private static string GetControllerName(ApiDescription apiDescription);
    private void AddParameterDescriptionsToModel(ActionApiDescriptionModel actionModel, MethodInfo method, ApiDescription apiDescription);
    private static bool IsNotFromServicesParameter(ParameterInfo parameterInfo);
    public string GetMethodParamName(ParameterInfo parameterInfo);
    private string GetModuleName(ApiDescription apiDescription);
}
internal static class Abp.AspNetCore.Mvc.Proxying.Utils.ArrayMatcher : object {
    public static T[] Match(T[] sourceArray, T[] destinationArray);
}
public abstract class Abp.AspNetCore.Mvc.RazorPages.AbpPageModel : PageModel {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionManager <PermissionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureManager <FeatureManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureChecker <FeatureChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectMapper <ObjectMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    private ILocalizationSource _localizationSource;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAlertManager <AlertManager>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    public IAbpSession AbpSession { get; public set; }
    public IEventBus EventBus { get; public set; }
    public IPermissionManager PermissionManager { get; public set; }
    public ISettingManager SettingManager { get; public set; }
    protected IPermissionChecker PermissionChecker { get; public set; }
    protected IFeatureManager FeatureManager { get; public set; }
    protected IFeatureChecker FeatureChecker { get; public set; }
    public IObjectMapper ObjectMapper { get; public set; }
    protected ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    protected ILocalizationSource LocalizationSource { get; }
    public ILogger Logger { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    public IAlertManager AlertManager { get; public set; }
    public AlertList Alerts { get; }
    protected IActiveUnitOfWork CurrentUnitOfWork { get; }
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    [CompilerGeneratedAttribute]
public IPermissionManager get_PermissionManager();
    [CompilerGeneratedAttribute]
public void set_PermissionManager(IPermissionManager value);
    [CompilerGeneratedAttribute]
public ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    [CompilerGeneratedAttribute]
protected IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
    [CompilerGeneratedAttribute]
protected IFeatureManager get_FeatureManager();
    [CompilerGeneratedAttribute]
public void set_FeatureManager(IFeatureManager value);
    [CompilerGeneratedAttribute]
protected IFeatureChecker get_FeatureChecker();
    [CompilerGeneratedAttribute]
public void set_FeatureChecker(IFeatureChecker value);
    [CompilerGeneratedAttribute]
public IObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
public void set_ObjectMapper(IObjectMapper value);
    [CompilerGeneratedAttribute]
protected ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    protected ILocalizationSource get_LocalizationSource();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public IUnitOfWorkManager get_UnitOfWorkManager();
    public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    [CompilerGeneratedAttribute]
public IAlertManager get_AlertManager();
    [CompilerGeneratedAttribute]
public void set_AlertManager(IAlertManager value);
    public AlertList get_Alerts();
    protected IActiveUnitOfWork get_CurrentUnitOfWork();
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
    protected Task`1<bool> IsGrantedAsync(string permissionName);
    protected bool IsGranted(string permissionName);
    protected virtual Task`1<bool> IsEnabledAsync(string featureName);
    protected virtual bool IsEnabled(string featureName);
}
public class Abp.AspNetCore.Mvc.Results.AbpResultFilter : object {
    private IAbpAspNetCoreConfiguration _configuration;
    private IAbpActionResultWrapperFactory _actionResultWrapperFactory;
    private IAbpWebCommonModuleConfiguration _abpWebCommonModuleConfiguration;
    public AbpResultFilter(IAbpAspNetCoreConfiguration configuration, IAbpActionResultWrapperFactory actionResultWrapper, IAbpWebCommonModuleConfiguration abpWebCommonModuleConfiguration);
    public virtual void OnResultExecuting(ResultExecutingContext context);
    public virtual void OnResultExecuted(ResultExecutedContext context);
}
public class Abp.AspNetCore.Mvc.Results.AbpResultPageFilter : object {
    private IAbpAspNetCoreConfiguration _configuration;
    private IAbpActionResultWrapperFactory _actionResultWrapperFactory;
    private IAbpWebCommonModuleConfiguration _abpWebCommonModuleConfiguration;
    public AbpResultPageFilter(IAbpAspNetCoreConfiguration configuration, IAbpActionResultWrapperFactory actionResultWrapperFactory, IAbpWebCommonModuleConfiguration abpWebCommonModuleConfiguration);
    public sealed virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Results.AbpResultPageFilter/<OnPageHandlerExecutionAsync>d__5")]
public sealed virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
}
public static class Abp.AspNetCore.Mvc.Results.ActionResultHelper : object {
    public static bool IsObjectResult(Type returnType);
}
public class Abp.AspNetCore.Mvc.Results.Wrapping.AbpActionResultWrapperFactory : object {
    public sealed virtual IAbpActionResultWrapper CreateFor(FilterContext context);
}
public class Abp.AspNetCore.Mvc.Results.Wrapping.AbpEmptyActionResultWrapper : object {
    public sealed virtual void Wrap(FilterContext context);
}
public class Abp.AspNetCore.Mvc.Results.Wrapping.AbpJsonActionResultWrapper : object {
    public sealed virtual void Wrap(FilterContext context);
}
public class Abp.AspNetCore.Mvc.Results.Wrapping.AbpObjectActionResultWrapper : object {
    public sealed virtual void Wrap(FilterContext context);
}
public interface Abp.AspNetCore.Mvc.Results.Wrapping.IAbpActionResultWrapper {
    public abstract virtual void Wrap(FilterContext context);
}
public interface Abp.AspNetCore.Mvc.Results.Wrapping.IAbpActionResultWrapperFactory {
    public abstract virtual IAbpActionResultWrapper CreateFor(FilterContext context);
}
public class Abp.AspNetCore.Mvc.Results.Wrapping.NullAbpActionResultWrapper : object {
    public sealed virtual void Wrap(FilterContext context);
}
public class Abp.AspNetCore.Mvc.Uow.AbpUowActionFilter : object {
    private IUnitOfWorkManager _unitOfWorkManager;
    private IAbpAspNetCoreConfiguration _aspnetCoreConfiguration;
    private IUnitOfWorkDefaultOptions _unitOfWorkDefaultOptions;
    public AbpUowActionFilter(IUnitOfWorkManager unitOfWorkManager, IAbpAspNetCoreConfiguration aspnetCoreConfiguration, IUnitOfWorkDefaultOptions unitOfWorkDefaultOptions);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Uow.AbpUowActionFilter/<OnActionExecutionAsync>d__4")]
public sealed virtual Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next);
}
public class Abp.AspNetCore.Mvc.Uow.AbpUowPageFilter : object {
    private IUnitOfWorkManager _unitOfWorkManager;
    private IAbpAspNetCoreConfiguration _aspnetCoreConfiguration;
    private IUnitOfWorkDefaultOptions _unitOfWorkDefaultOptions;
    public AbpUowPageFilter(IUnitOfWorkManager unitOfWorkManager, IAbpAspNetCoreConfiguration aspnetCoreConfiguration, IUnitOfWorkDefaultOptions unitOfWorkDefaultOptions);
    public sealed virtual Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Uow.AbpUowPageFilter/<OnPageHandlerExecutionAsync>d__5")]
public sealed virtual Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next);
}
public class Abp.AspNetCore.Mvc.Validation.AbpValidationActionFilter : object {
    private IIocResolver _iocResolver;
    private IAbpAspNetCoreConfiguration _configuration;
    public AbpValidationActionFilter(IIocResolver iocResolver, IAbpAspNetCoreConfiguration configuration);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Mvc.Validation.AbpValidationActionFilter/<OnActionExecutionAsync>d__3")]
public sealed virtual Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next);
}
public class Abp.AspNetCore.Mvc.Validation.MvcActionInvocationValidator : ActionInvocationValidatorBase {
    [CompilerGeneratedAttribute]
private ActionExecutingContext <ActionContext>k__BackingField;
    protected ActionExecutingContext ActionContext { get; private set; }
    public MvcActionInvocationValidator(IValidationConfiguration configuration, IIocResolver iocResolver);
    [CompilerGeneratedAttribute]
protected ActionExecutingContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(ActionExecutingContext value);
    public void Initialize(ActionExecutingContext actionContext);
    protected virtual object GetParameterValue(string parameterName);
    protected virtual void SetDataAnnotationAttributeErrors();
}
public abstract class Abp.AspNetCore.Mvc.ViewComponents.AbpViewComponent : ViewComponent {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    private ILocalizationSource _localizationSource;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectMapper <ObjectMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionManager <PermissionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureManager <FeatureManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureChecker <FeatureChecker>k__BackingField;
    public IAbpSession AbpSession { get; public set; }
    public ISettingManager SettingManager { get; public set; }
    public ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    protected ILocalizationSource LocalizationSource { get; }
    public ILogger Logger { get; public set; }
    public IObjectMapper ObjectMapper { get; public set; }
    public IPermissionManager PermissionManager { get; public set; }
    public IPermissionChecker PermissionChecker { get; public set; }
    public IFeatureManager FeatureManager { get; public set; }
    public IFeatureChecker FeatureChecker { get; public set; }
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    protected ILocalizationSource get_LocalizationSource();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
public void set_ObjectMapper(IObjectMapper value);
    [CompilerGeneratedAttribute]
public IPermissionManager get_PermissionManager();
    [CompilerGeneratedAttribute]
public void set_PermissionManager(IPermissionManager value);
    [CompilerGeneratedAttribute]
public IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
    [CompilerGeneratedAttribute]
public IFeatureManager get_FeatureManager();
    [CompilerGeneratedAttribute]
public void set_FeatureManager(IFeatureManager value);
    [CompilerGeneratedAttribute]
public IFeatureChecker get_FeatureChecker();
    [CompilerGeneratedAttribute]
public void set_FeatureChecker(IFeatureChecker value);
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
}
public abstract class Abp.AspNetCore.Mvc.Views.AbpRazorPage`1 : RazorPage`1<TModel> {
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureChecker <FeatureChecker>k__BackingField;
    private ILocalizationSource _localizationSource;
    public string ApplicationPath { get; }
    [RazorInjectAttribute]
public ILocalizationManager LocalizationManager { get; public set; }
    [RazorInjectAttribute]
public ISettingManager SettingManager { get; public set; }
    [RazorInjectAttribute]
public IPermissionChecker PermissionChecker { get; public set; }
    [RazorInjectAttribute]
public IFeatureChecker FeatureChecker { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    public string get_ApplicationPath();
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
public ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    [CompilerGeneratedAttribute]
public IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
    [CompilerGeneratedAttribute]
public IFeatureChecker get_FeatureChecker();
    [CompilerGeneratedAttribute]
public void set_FeatureChecker(IFeatureChecker value);
    protected string get_LocalizationSourceName();
    protected void set_LocalizationSourceName(string value);
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
    protected virtual string Ls(string sourceName, string name);
    protected virtual string Ls(string sourceName, string name, Object[] args);
    protected virtual string Ls(string sourceName, string name, CultureInfo culture);
    protected virtual string Ls(string sourceName, string name, CultureInfo culture, Object[] args);
    protected virtual bool IsGranted(string permissionName);
    protected virtual bool IsFeatureEnabled(string featureName);
    protected virtual string GetFeatureValue(string featureName);
}
public class Abp.AspNetCore.PlugIn.AbpPlugInAssemblyPart : AssemblyPart {
    public AbpPlugInAssemblyPart(Assembly assembly);
    private sealed virtual override IEnumerable`1<string> Microsoft.AspNetCore.Mvc.ApplicationParts.ICompilationReferencesProvider.GetReferencePaths();
}
public class Abp.AspNetCore.Runtime.Session.AspNetCorePrincipalAccessor : DefaultPrincipalAccessor {
    private IHttpContextAccessor _httpContextAccessor;
    public ClaimsPrincipal Principal { get; }
    public AspNetCorePrincipalAccessor(IHttpContextAccessor httpContextAccessor);
    public virtual ClaimsPrincipal get_Principal();
}
public class Abp.AspNetCore.Security.AbpSecurityHeadersMiddleware : object {
    private RequestDelegate _next;
    public AbpSecurityHeadersMiddleware(RequestDelegate next);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Security.AbpSecurityHeadersMiddleware/<Invoke>d__2")]
public Task Invoke(HttpContext httpContext);
    private static void AddHeaderIfNotExists(HttpContext context, string key, string value);
}
public class Abp.AspNetCore.Security.AntiForgery.AbpAspNetCoreAntiForgeryManager : object {
    [CompilerGeneratedAttribute]
private IAbpAntiForgeryConfiguration <Configuration>k__BackingField;
    private IAntiforgery _antiforgery;
    private IHttpContextAccessor _httpContextAccessor;
    public IAbpAntiForgeryConfiguration Configuration { get; }
    public AbpAspNetCoreAntiForgeryManager(IAntiforgery antiforgery, IHttpContextAccessor httpContextAccessor, IAbpAntiForgeryConfiguration configuration);
    [CompilerGeneratedAttribute]
public sealed virtual IAbpAntiForgeryConfiguration get_Configuration();
    public sealed virtual string GenerateToken();
}
public class Abp.AspNetCore.Threading.HttpContextCancellationTokenProvider : CancellationTokenProviderBase {
    private IHttpContextAccessor _httpContextAccessor;
    public CancellationToken Token { get; }
    public HttpContextCancellationTokenProvider(IHttpContextAccessor httpContextAccessor, IAmbientScopeProvider`1<CancellationTokenOverride> cancellationTokenOverrideScopeProvider);
    public virtual CancellationToken get_Token();
}
public class Abp.AspNetCore.Uow.AbpUnitOfWorkMiddleware : object {
    private RequestDelegate _next;
    private IUnitOfWorkManager _unitOfWorkManager;
    private UnitOfWorkMiddlewareOptions _options;
    public AbpUnitOfWorkMiddleware(RequestDelegate next, IUnitOfWorkManager unitOfWorkManager, IOptions`1<UnitOfWorkMiddlewareOptions> options);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Uow.AbpUnitOfWorkMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
}
public class Abp.AspNetCore.Uow.UnitOfWorkMiddlewareOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<HttpContext, bool> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContext, UnitOfWorkOptions> <OptionsFactory>k__BackingField;
    public Func`2<HttpContext, bool> Filter { get; public set; }
    public Func`2<HttpContext, UnitOfWorkOptions> OptionsFactory { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<HttpContext, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, UnitOfWorkOptions> get_OptionsFactory();
    [CompilerGeneratedAttribute]
public void set_OptionsFactory(Func`2<HttpContext, UnitOfWorkOptions> value);
}
public class Abp.AspNetCore.Webhook.AspNetCoreWebhookSender : DefaultWebhookSender {
    public static string WebhookSenderHttpClientName;
    private IWebhooksConfiguration _webhooksConfiguration;
    private IWebhookManager _webhookManager;
    private IHttpClientFactory _clientFactory;
    public AspNetCoreWebhookSender(IWebhooksConfiguration webhooksConfiguration, IWebhookManager webhookManager, IHttpClientFactory clientFactory);
    [AsyncStateMachineAttribute("Abp.AspNetCore.Webhook.AspNetCoreWebhookSender/<SendHttpRequest>d__5")]
protected virtual Task`1<ValueTuple`3<bool, HttpStatusCode, string>> SendHttpRequest(HttpRequestMessage request);
}
public class Abp.Json.AbpMvcContractResolver : DefaultContractResolver {
    [CompilerGeneratedAttribute]
private List`1<string> <InputDateTimeFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDateTimeFormat>k__BackingField;
    private List`1<string> InputDateTimeFormats { get; private set; }
    private string OutputDateTimeFormat { get; private set; }
    public AbpMvcContractResolver(List`1<string> inputDateTimeFormats, string outputDateTimeFormat);
    [CompilerGeneratedAttribute]
private List`1<string> get_InputDateTimeFormats();
    [CompilerGeneratedAttribute]
private void set_InputDateTimeFormats(List`1<string> value);
    [CompilerGeneratedAttribute]
private string get_OutputDateTimeFormat();
    [CompilerGeneratedAttribute]
private void set_OutputDateTimeFormat(string value);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    protected virtual void ModifyProperty(MemberInfo member, JsonProperty property);
}
public class Abp.Json.CultureInvariantDecimalConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Abp.Json.CultureInvariantDoubleConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Abp.Json.DateOnlyJsonConverter : JsonConverter`1<DateOnly> {
    public virtual void WriteJson(JsonWriter writer, DateOnly value, JsonSerializer serializer);
    public virtual DateOnly ReadJson(JsonReader reader, Type objectType, DateOnly existingValue, bool hasExistingValue, JsonSerializer serializer);
}
public class Abp.Json.SystemTextJson.CultureInvariantDecimalJsonConverter : JsonConverter`1<decimal> {
    public virtual decimal Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, decimal value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.CultureInvariantDoubleJsonConverter : JsonConverter`1<double> {
    public virtual double Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, double value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.CultureInvariantNullableDecimalJsonConverter : JsonConverter`1<Nullable`1<decimal>> {
    public virtual Nullable`1<decimal> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<decimal> value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.CultureInvariantNullableDoubleJsonConverter : JsonConverter`1<Nullable`1<double>> {
    public virtual Nullable`1<double> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<double> value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.DateOnlyJsonConverter : JsonConverter`1<DateOnly> {
    public virtual DateOnly Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options);
}
[ExtensionAttribute]
public static class Abp.Web.Security.AntiForgery.AbpAntiForgeryManagerAspNetCoreExtensions : object {
    [ExtensionAttribute]
public static void SetCookie(IAbpAntiForgeryManager manager, HttpContext context, IIdentity identity, CookieOptions cookieOptions);
}
internal class AbpAspNetCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AbpUnitOfWorkMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseUnitOfWork(IApplicationBuilder app, Action`1<UnitOfWorkMiddlewareOptions> optionsAction);
}
