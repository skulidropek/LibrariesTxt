public class Abp.AutoMapper.AbpAutoMapperConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<Action`1<IMapperConfigurationExpression>> <Configurators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseStaticMapper>k__BackingField;
    public List`1<Action`1<IMapperConfigurationExpression>> Configurators { get; }
    [ObsoleteAttribute("Automapper will remove static API. See https://github.com/aspnetboilerplate/aspnetboilerplate/issues/4667")]
public bool UseStaticMapper { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<IMapperConfigurationExpression>> get_Configurators();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseStaticMapper();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseStaticMapper(bool value);
}
[ExtensionAttribute]
public static class Abp.AutoMapper.AbpAutoMapperConfigurationExtensions : object {
    [ExtensionAttribute]
public static IAbpAutoMapperConfiguration AbpAutoMapper(IModuleConfigurations configurations);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.AutoMapper.AbpAutoMapperModule : AbpModule {
    private ITypeFinder _typeFinder;
    public AbpAutoMapperModule(ITypeFinder typeFinder);
    public virtual void PreInitialize();
    public virtual void PostInitialize();
    private void CreateMappings();
    private void FindAndAutoMapTypes(IMapperConfigurationExpression configuration);
    private void CreateCoreMappings(IMapperConfigurationExpression configuration);
    [CompilerGeneratedAttribute]
private void <CreateMappings>b__4_0(IMapperConfigurationExpression configuration);
}
public static class Abp.AutoMapper.AbpEmulateAutoMapper : object {
    [CompilerGeneratedAttribute]
private static IMapper <Mapper>k__BackingField;
    [ObsoleteAttribute("Automapper will remove static API, Please use ObjectMapper instead. See https://github.com/aspnetboilerplate/aspnetboilerplate/issues/4667")]
public static IMapper Mapper { get; public set; }
    [CompilerGeneratedAttribute]
public static IMapper get_Mapper();
    [CompilerGeneratedAttribute]
public static void set_Mapper(IMapper value);
}
public class Abp.AutoMapper.AutoMapAttribute : AutoMapAttributeBase {
    public AutoMapAttribute(Type[] targetTypes);
    public virtual void CreateMap(IMapperConfigurationExpression configuration, Type type);
}
public abstract class Abp.AutoMapper.AutoMapAttributeBase : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <TargetTypes>k__BackingField;
    public Type[] TargetTypes { get; private set; }
    protected AutoMapAttributeBase(Type[] targetTypes);
    [CompilerGeneratedAttribute]
public Type[] get_TargetTypes();
    [CompilerGeneratedAttribute]
private void set_TargetTypes(Type[] value);
    public abstract virtual void CreateMap(IMapperConfigurationExpression configuration, Type type);
}
[ExtensionAttribute]
public static class Abp.AutoMapper.AutoMapExtensions : object {
    private static int MaxCultureFallbackDepth;
    [ExtensionAttribute]
[ObsoleteAttribute("Automapper will remove static API, Please use ObjectMapper instead. See https://github.com/aspnetboilerplate/aspnetboilerplate/issues/4667")]
public static TDestination MapTo(object source);
    [ExtensionAttribute]
[ObsoleteAttribute("Automapper will remove static API, Please use ObjectMapper instead. See https://github.com/aspnetboilerplate/aspnetboilerplate/issues/4667")]
public static TDestination MapTo(TSource source, TDestination destination);
    [ExtensionAttribute]
public static CreateMultiLingualMapResult`3<TMultiLingualEntity, TTranslation, TDestination> CreateMultiLingualMap(IMapperConfigurationExpression configuration, MultiLingualMapContext multiLingualMapContext, bool fallbackToParentCultures);
    private static TTranslation GeTranslationBasedOnCulturalRecursive(CultureInfo culture, ICollection`1<TTranslation> translations, int currentDepth);
    [ExtensionAttribute]
public static CreateMultiLingualMapResult`3<TMultiLingualEntity, TTranslation, TDestination> CreateMultiLingualMap(IMapperConfigurationExpression configuration, MultiLingualMapContext multiLingualMapContext, bool fallbackToParentCultures);
}
public class Abp.AutoMapper.AutoMapFromAttribute : AutoMapAttributeBase {
    [CompilerGeneratedAttribute]
private MemberList <MemberList>k__BackingField;
    public MemberList MemberList { get; public set; }
    public AutoMapFromAttribute(Type[] targetTypes);
    public AutoMapFromAttribute(MemberList memberList, Type[] targetTypes);
    [CompilerGeneratedAttribute]
public MemberList get_MemberList();
    [CompilerGeneratedAttribute]
public void set_MemberList(MemberList value);
    public virtual void CreateMap(IMapperConfigurationExpression configuration, Type type);
}
public class Abp.AutoMapper.AutoMapKeyAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Abp.AutoMapper.AutoMapperConfigurationExtensions : object {
    private static object SyncObj;
    private static AutoMapperConfigurationExtensions();
    [ExtensionAttribute]
public static void CreateAutoAttributeMaps(IMapperConfigurationExpression configuration, Type type);
    [ExtensionAttribute]
public static void CreateAutoAttributeMaps(IMapperConfigurationExpression configuration, Type type, Type[] targetTypes, MemberList memberList);
}
public class Abp.AutoMapper.AutoMapperObjectMapper : object {
    protected IMapper Mapper;
    public AutoMapperObjectMapper(IMapper mapper);
    public sealed virtual TDestination Map(object source);
    public sealed virtual TDestination Map(TSource source, TDestination destination);
    public sealed virtual IQueryable`1<TDestination> ProjectTo(IQueryable source);
}
public class Abp.AutoMapper.AutoMapToAttribute : AutoMapAttributeBase {
    [CompilerGeneratedAttribute]
private MemberList <MemberList>k__BackingField;
    public MemberList MemberList { get; public set; }
    public AutoMapToAttribute(Type[] targetTypes);
    public AutoMapToAttribute(MemberList memberList, Type[] targetTypes);
    [CompilerGeneratedAttribute]
public MemberList get_MemberList();
    [CompilerGeneratedAttribute]
public void set_MemberList(MemberList value);
    public virtual void CreateMap(IMapperConfigurationExpression configuration, Type type);
}
public class Abp.AutoMapper.CreateMultiLingualMapResult`3 : object {
    [CompilerGeneratedAttribute]
private IMappingExpression`2<TTranslation, TDestination> <TranslationMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IMappingExpression`2<TMultiLingualEntity, TDestination> <EntityMap>k__BackingField;
    public IMappingExpression`2<TTranslation, TDestination> TranslationMap { get; public set; }
    public IMappingExpression`2<TMultiLingualEntity, TDestination> EntityMap { get; public set; }
    [CompilerGeneratedAttribute]
public IMappingExpression`2<TTranslation, TDestination> get_TranslationMap();
    [CompilerGeneratedAttribute]
public void set_TranslationMap(IMappingExpression`2<TTranslation, TDestination> value);
    [CompilerGeneratedAttribute]
public IMappingExpression`2<TMultiLingualEntity, TDestination> get_EntityMap();
    [CompilerGeneratedAttribute]
public void set_EntityMap(IMappingExpression`2<TMultiLingualEntity, TDestination> value);
}
public interface Abp.AutoMapper.IAbpAutoMapperConfiguration {
    public List`1<Action`1<IMapperConfigurationExpression>> Configurators { get; }
    [ObsoleteAttribute("Automapper will remove static API. See https://github.com/aspnetboilerplate/aspnetboilerplate/issues/4667")]
public bool UseStaticMapper { get; public set; }
    public abstract virtual List`1<Action`1<IMapperConfigurationExpression>> get_Configurators();
    public abstract virtual bool get_UseStaticMapper();
    public abstract virtual void set_UseStaticMapper(bool value);
}
public class Abp.AutoMapper.MultiLingualMapContext : object {
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    public ISettingManager SettingManager { get; public set; }
    public MultiLingualMapContext(ISettingManager settingManager);
    [CompilerGeneratedAttribute]
public ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
}
internal class AbpAutoMapper_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
