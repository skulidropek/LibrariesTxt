[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.Castle.Logging.Log4Net.AbpCastleLog4NetModule : AbpModule {
}
public class Abp.Castle.Logging.Log4Net.Log4NetLogger : MarshalByRefObject {
    private static Type DeclaringType;
    [CompilerGeneratedAttribute]
private Log4NetLoggerFactory <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTraceEnabled>k__BackingField;
    public bool IsDebugEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    protected internal Log4NetLoggerFactory Factory { get; protected internal set; }
    protected internal ILogger Logger { get; protected internal set; }
    public bool IsTraceEnabled { get; }
    public Log4NetLogger(ILogger logger, Log4NetLoggerFactory factory);
    internal Log4NetLogger(ILog log, Log4NetLoggerFactory factory);
    private static Log4NetLogger();
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    [CompilerGeneratedAttribute]
protected internal Log4NetLoggerFactory get_Factory();
    [CompilerGeneratedAttribute]
protected internal void set_Factory(Log4NetLoggerFactory value);
    [CompilerGeneratedAttribute]
protected internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected internal void set_Logger(ILogger value);
    public virtual string ToString();
    public virtual ILogger CreateChildLogger(string name);
    public sealed virtual void Trace(string message);
    public sealed virtual void Trace(Func`1<string> messageFactory);
    public sealed virtual void Trace(string message, Exception exception);
    public sealed virtual void TraceFormat(string format, Object[] args);
    public sealed virtual void TraceFormat(Exception exception, string format, Object[] args);
    public sealed virtual void TraceFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void TraceFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(Func`1<string> messageFactory);
    public sealed virtual void Debug(string message, Exception exception);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void DebugFormat(Exception exception, string format, Object[] args);
    public sealed virtual void DebugFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void DebugFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(Func`1<string> messageFactory);
    public sealed virtual void Error(string message, Exception exception);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void ErrorFormat(Exception exception, string format, Object[] args);
    public sealed virtual void ErrorFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void ErrorFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Fatal(string message);
    public sealed virtual void Fatal(Func`1<string> messageFactory);
    public sealed virtual void Fatal(string message, Exception exception);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void FatalFormat(Exception exception, string format, Object[] args);
    public sealed virtual void FatalFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void FatalFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(Func`1<string> messageFactory);
    public sealed virtual void Info(string message, Exception exception);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void InfoFormat(Exception exception, string format, Object[] args);
    public sealed virtual void InfoFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void InfoFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Warn(string message);
    public sealed virtual void Warn(Func`1<string> messageFactory);
    public sealed virtual void Warn(string message, Exception exception);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void WarnFormat(Exception exception, string format, Object[] args);
    public sealed virtual void WarnFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void WarnFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTraceEnabled();
}
public class Abp.Castle.Logging.Log4Net.Log4NetLoggerFactory : AbstractLoggerFactory {
    internal static string DefaultConfigFileName;
    private ILoggerRepository _loggerRepository;
    public Log4NetLoggerFactory(string configFileName);
    public Log4NetLoggerFactory(string configFileName, bool reloadOnChange);
    public virtual ILogger Create(string name);
    public virtual ILogger Create(string name, LoggerLevel level);
}
[ExtensionAttribute]
public static class Abp.Castle.Logging.Log4Net.LoggingFacilityExtensions : object {
    [ExtensionAttribute]
public static LoggingFacility UseAbpLog4Net(LoggingFacility loggingFacility);
}
internal class AbpCastleLog4Net_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
