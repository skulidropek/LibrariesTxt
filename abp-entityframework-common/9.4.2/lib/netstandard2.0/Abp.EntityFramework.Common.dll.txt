public class Abp.EntityFramework.AbpEfDbContextInitializationContext : object {
    [CompilerGeneratedAttribute]
private IUnitOfWork <UnitOfWork>k__BackingField;
    public IUnitOfWork UnitOfWork { get; }
    public AbpEfDbContextInitializationContext(IUnitOfWork unitOfWork);
    [CompilerGeneratedAttribute]
public IUnitOfWork get_UnitOfWork();
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.EntityFramework.AbpEntityFrameworkCommonModule : AbpModule {
    public virtual void Initialize();
}
public abstract class Abp.EntityFramework.DbContextTypeMatcher`1 : object {
    private ICurrentUnitOfWorkProvider _currentUnitOfWorkProvider;
    private Dictionary`2<Type, List`1<Type>> _dbContextTypes;
    protected DbContextTypeMatcher`1(ICurrentUnitOfWorkProvider currentUnitOfWorkProvider);
    public sealed virtual void Populate(Type[] dbContextTypes);
    public virtual Type GetConcreteType(Type sourceDbContextType);
    private void CheckCurrentUow();
    private MultiTenancySides GetCurrentTenancySide();
    private static List`1<Type> GetMultiTenancySideContextTypes(List`1<Type> dbContextTypes, MultiTenancySides tenancySide);
    private static Type GetDefaultDbContextType(List`1<Type> dbContextTypes, Type sourceDbContextType, MultiTenancySides tenancySide);
    private static void AddWithBaseTypes(Type dbContextType, List`1<Type> types);
    private void Add(Type sourceDbContextType, Type targetDbContextType);
}
public class Abp.EntityFramework.DefaultDbContextAttribute : Attribute {
}
public interface Abp.EntityFramework.IDbContextEntityFinder {
    public abstract virtual IEnumerable`1<EntityTypeInfo> GetEntityTypeInfos(Type dbContextType);
}
public interface Abp.EntityFramework.IDbContextTypeMatcher {
    public abstract virtual void Populate(Type[] dbContextTypes);
    public abstract virtual Type GetConcreteType(Type sourceDbContextType);
}
public interface Abp.EntityFramework.IShouldInitializeDcontext {
    public abstract virtual void Initialize(AbpEfDbContextInitializationContext initializationContext);
}
public class Abp.EntityFramework.Repositories.EfGenericRepositoryRegistrar : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IDbContextEntityFinder _dbContextEntityFinder;
    public ILogger Logger { get; public set; }
    public EfGenericRepositoryRegistrar(IDbContextEntityFinder dbContextEntityFinder);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual void RegisterForDbContext(Type dbContextType, IIocManager iocManager, AutoRepositoryTypesAttribute defaultAutoRepositoryTypesAttribute);
    public sealed virtual void RegisterForEntity(Type dbContextType, Type entityType, IIocManager iocManager, AutoRepositoryTypesAttribute defaultAutoRepositoryTypesAttribute);
    private static void RegisterForEntity(Type dbContextType, Type entityType, IIocManager iocManager, Type repositoryInterface, Type repositoryInterfaceWithPrimaryKey, Type repositoryImplementation, Type repositoryImplementationWithPrimaryKey);
    private void RegisterForDbContext(Type dbContextType, IIocManager iocManager, Type repositoryInterface, Type repositoryInterfaceWithPrimaryKey, Type repositoryImplementation, Type repositoryImplementationWithPrimaryKey);
}
public interface Abp.EntityFramework.Repositories.IEfGenericRepositoryRegistrar {
    public abstract virtual void RegisterForDbContext(Type dbContextType, IIocManager iocManager, AutoRepositoryTypesAttribute defaultAutoRepositoryTypesAttribute);
    public abstract virtual void RegisterForEntity(Type dbContextType, Type entityType, IIocManager iocManager, AutoRepositoryTypesAttribute defaultAutoRepositoryTypesAttribute);
}
public abstract class Abp.EntityFramework.SecondaryOrmRegistrarBase : object {
    private IDbContextEntityFinder _dbContextEntityFinder;
    private Type _dbContextType;
    public string OrmContextKey { get; }
    protected SecondaryOrmRegistrarBase(Type dbContextType, IDbContextEntityFinder dbContextEntityFinder);
    public abstract virtual string get_OrmContextKey();
    public virtual void RegisterRepositories(IIocManager iocManager, AutoRepositoryTypesAttribute defaultRepositoryTypes);
}
internal class AbpEntityFrameworkCommon_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
