public class Abp.EntityFrameworkCore.AbpCompiledQueryCacheKeyGenerator : object {
    [CompilerGeneratedAttribute]
private ICompiledQueryCacheKeyGenerator <InnerCompiledQueryCacheKeyGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    protected ICompiledQueryCacheKeyGenerator InnerCompiledQueryCacheKeyGenerator { get; }
    protected ICurrentDbContext CurrentContext { get; }
    public AbpCompiledQueryCacheKeyGenerator(ICompiledQueryCacheKeyGenerator innerCompiledQueryCacheKeyGenerator, ICurrentDbContext currentContext);
    [CompilerGeneratedAttribute]
protected ICompiledQueryCacheKeyGenerator get_InnerCompiledQueryCacheKeyGenerator();
    [CompilerGeneratedAttribute]
protected ICurrentDbContext get_CurrentContext();
    public virtual object GenerateCacheKey(Expression query, bool async);
}
public abstract class Abp.EntityFrameworkCore.AbpDbContext : DbContext {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityChangeEventHelper <EntityChangeEventHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentUnitOfWorkProvider <CurrentUnitOfWorkProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMultiTenancyConfig <MultiTenancyConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpEfCoreConfiguration <AbpEfCoreConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressAutoSetTenantId>k__BackingField;
    private static MethodInfo ConfigureGlobalFiltersMethodInfo;
    private static MethodInfo ConfigureGlobalValueConverterMethodInfo;
    protected DbContextOptions DbContextOptions;
    protected static string DbFunctionNotSupportedExceptionMessage;
    public IAbpSession AbpSession { get; public set; }
    public IEntityChangeEventHelper EntityChangeEventHelper { get; public set; }
    public ILogger Logger { get; public set; }
    public IEventBus EventBus { get; public set; }
    public IGuidGenerator GuidGenerator { get; public set; }
    public ICurrentUnitOfWorkProvider CurrentUnitOfWorkProvider { get; public set; }
    public IMultiTenancyConfig MultiTenancyConfig { get; public set; }
    public IAbpEfCoreConfiguration AbpEfCoreConfiguration { get; public set; }
    public bool SuppressAutoSetTenantId { get; public set; }
    public Nullable`1<int> CurrentTenantId { get; }
    public bool IsSoftDeleteFilterEnabled { get; }
    public bool IsMayHaveTenantFilterEnabled { get; }
    public bool IsMustHaveTenantFilterEnabled { get; }
    protected AbpDbContext(DbContextOptions options);
    private static AbpDbContext();
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IEntityChangeEventHelper get_EntityChangeEventHelper();
    [CompilerGeneratedAttribute]
public void set_EntityChangeEventHelper(IEntityChangeEventHelper value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    [CompilerGeneratedAttribute]
public IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
public void set_GuidGenerator(IGuidGenerator value);
    [CompilerGeneratedAttribute]
public ICurrentUnitOfWorkProvider get_CurrentUnitOfWorkProvider();
    [CompilerGeneratedAttribute]
public void set_CurrentUnitOfWorkProvider(ICurrentUnitOfWorkProvider value);
    [CompilerGeneratedAttribute]
public IMultiTenancyConfig get_MultiTenancyConfig();
    [CompilerGeneratedAttribute]
public void set_MultiTenancyConfig(IMultiTenancyConfig value);
    [CompilerGeneratedAttribute]
public IAbpEfCoreConfiguration get_AbpEfCoreConfiguration();
    [CompilerGeneratedAttribute]
public void set_AbpEfCoreConfiguration(IAbpEfCoreConfiguration value);
    [CompilerGeneratedAttribute]
public virtual bool get_SuppressAutoSetTenantId();
    [CompilerGeneratedAttribute]
public virtual void set_SuppressAutoSetTenantId(bool value);
    public virtual Nullable`1<int> get_CurrentTenantId();
    public virtual bool get_IsSoftDeleteFilterEnabled();
    public virtual bool get_IsMayHaveTenantFilterEnabled();
    public virtual bool get_IsMustHaveTenantFilterEnabled();
    private void InitializeDbContext();
    private void SetNullsForInjectedProperties();
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
    protected void ConfigureGlobalFilters(ModelBuilder modelBuilder, IMutableEntityType entityType);
    protected virtual bool ShouldFilterEntity(IMutableEntityType entityType);
    protected virtual Expression`1<Func`2<TEntity, bool>> CreateFilterExpression(ModelBuilder modelBuilder);
    protected virtual bool UseAbpQueryCompiler();
    public virtual string GetCompiledQueryCacheKey();
    public static bool SoftDeleteFilter(bool isDeleted, bool boolParam);
    public static bool MustHaveTenantFilter(int tenantId, Nullable`1<int> currentTenantId, bool boolParam);
    public static bool MayHaveTenantFilter(Nullable`1<int> tenantId, Nullable`1<int> currentTenantId, bool boolParam);
    protected void ConfigureGlobalValueConverter(ModelBuilder modelBuilder, IMutableEntityType entityType);
    public virtual int SaveChanges();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.AbpDbContext/<SaveChangesAsync>d__62")]
public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    public virtual void Initialize(AbpEfDbContextInitializationContext initializationContext);
    protected virtual EntityChangeReport ApplyAbpConcepts();
    protected virtual void ApplyAbpConcepts(EntityEntry entry, Nullable`1<long> userId, EntityChangeReport changeReport);
    protected virtual void ApplyAbpConceptsForAddedEntity(EntityEntry entry, Nullable`1<long> userId, EntityChangeReport changeReport);
    protected virtual void ApplyAbpConceptsForModifiedEntity(EntityEntry entry, Nullable`1<long> userId, EntityChangeReport changeReport);
    protected virtual void ApplyAbpConceptsForDeletedEntity(EntityEntry entry, Nullable`1<long> userId, EntityChangeReport changeReport);
    protected virtual bool IsHardDeleteEntity(EntityEntry entry);
    protected virtual void AddDomainEvents(List`1<DomainEventEntry> domainEvents, object entityAsObj);
    protected virtual void CheckAndSetId(EntityEntry entry);
    protected virtual void CheckAndSetMustHaveTenantIdProperty(object entityAsObj);
    protected virtual void CheckAndSetMayHaveTenantIdProperty(object entityAsObj);
    protected virtual void SetCreationAuditProperties(object entityAsObj, Nullable`1<long> userId);
    protected virtual void SetModificationAuditProperties(object entityAsObj, Nullable`1<long> userId);
    protected virtual void CancelDeletionForSoftDelete(EntityEntry entry);
    protected virtual void SetDeletionAuditProperties(object entityAsObj, Nullable`1<long> userId);
    protected virtual Nullable`1<long> GetAuditUserId();
    protected virtual Nullable`1<int> GetCurrentTenantIdOrNull();
    protected virtual Expression`1<Func`2<T, bool>> CombineExpressions(Expression`1<Func`2<T, bool>> expression1, Expression`1<Func`2<T, bool>> expression2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(CancellationToken cancellationToken);
}
public class Abp.EntityFrameworkCore.AbpDbContextOptionsExtension : object {
    public DbContextOptionsExtensionInfo Info { get; }
    public sealed virtual void ApplyServices(IServiceCollection services);
    public sealed virtual void Validate(IDbContextOptions options);
    public sealed virtual DbContextOptionsExtensionInfo get_Info();
}
public class Abp.EntityFrameworkCore.AbpEfCoreCurrentDbContext : object {
    private AsyncLocal`1<AbpDbContext> _current;
    public AbpDbContext Context { get; }
    public AbpDbContext get_Context();
    public IDisposable Use(AbpDbContext context);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.AbpEfCoreServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static void AddAbpDbContext(IServiceCollection services, Action`1<AbpDbContextConfiguration`1<TDbContext>> action);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.EntityFrameworkCore.AbpEntityFrameworkCoreModule : AbpModule {
    private ITypeFinder _typeFinder;
    public AbpEntityFrameworkCoreModule(ITypeFinder typeFinder);
    public virtual void PreInitialize();
    public virtual void Initialize();
    private void RegisterGenericRepositoriesAndMatchDbContexes();
}
public class Abp.EntityFrameworkCore.AbpEntityQueryProvider : EntityQueryProvider {
    [CompilerGeneratedAttribute]
private AbpEfCoreCurrentDbContext <AbpEfCoreCurrentDbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentDbContext>k__BackingField;
    protected AbpEfCoreCurrentDbContext AbpEfCoreCurrentDbContext { get; }
    protected ICurrentDbContext CurrentDbContext { get; }
    public AbpEntityQueryProvider(IQueryCompiler queryCompiler, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext, ICurrentDbContext currentDbContext);
    [CompilerGeneratedAttribute]
protected AbpEfCoreCurrentDbContext get_AbpEfCoreCurrentDbContext();
    [CompilerGeneratedAttribute]
protected ICurrentDbContext get_CurrentDbContext();
    public virtual object Execute(Expression expression);
    public virtual TResult Execute(Expression expression);
    public virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Abp.EntityFrameworkCore.Configuration.AbpDbContextConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <ExistingConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContextOptionsBuilder`1<TDbContext> <DbContextOptions>k__BackingField;
    public string ConnectionString { get; internal set; }
    public DbConnection ExistingConnection { get; internal set; }
    public DbContextOptionsBuilder`1<TDbContext> DbContextOptions { get; }
    public AbpDbContextConfiguration`1(string connectionString, DbConnection existingConnection);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public DbConnection get_ExistingConnection();
    [CompilerGeneratedAttribute]
internal void set_ExistingConnection(DbConnection value);
    [CompilerGeneratedAttribute]
public DbContextOptionsBuilder`1<TDbContext> get_DbContextOptions();
}
public class Abp.EntityFrameworkCore.Configuration.AbpDbContextConfigurerAction`1 : object {
    [CompilerGeneratedAttribute]
private Action`1<AbpDbContextConfiguration`1<TDbContext>> <Action>k__BackingField;
    public Action`1<AbpDbContextConfiguration`1<TDbContext>> Action { get; public set; }
    public AbpDbContextConfigurerAction`1(Action`1<AbpDbContextConfiguration`1<TDbContext>> action);
    [CompilerGeneratedAttribute]
public Action`1<AbpDbContextConfiguration`1<TDbContext>> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Action`1<AbpDbContextConfiguration`1<TDbContext>> value);
    public sealed virtual void Configure(AbpDbContextConfiguration`1<TDbContext> configuration);
}
public class Abp.EntityFrameworkCore.Configuration.AbpEfCoreConfiguration : object {
    private IIocManager _iocManager;
    [CompilerGeneratedAttribute]
private bool <UseAbpQueryCompiler>k__BackingField;
    public bool UseAbpQueryCompiler { get; public set; }
    public AbpEfCoreConfiguration(IIocManager iocManager);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseAbpQueryCompiler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseAbpQueryCompiler(bool value);
    public sealed virtual void AddDbContext(Action`1<AbpDbContextConfiguration`1<TDbContext>> action);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Configuration.AbpEfCoreConfigurationExtensions : object {
    [ExtensionAttribute]
public static IAbpEfCoreConfiguration AbpEfCore(IModuleConfigurations configurations);
}
public interface Abp.EntityFrameworkCore.Configuration.IAbpDbContextConfigurer`1 {
    public abstract virtual void Configure(AbpDbContextConfiguration`1<TDbContext> configuration);
}
public interface Abp.EntityFrameworkCore.Configuration.IAbpEfCoreConfiguration {
    public bool UseAbpQueryCompiler { get; public set; }
    public abstract virtual bool get_UseAbpQueryCompiler();
    public abstract virtual void set_UseAbpQueryCompiler(bool value);
    public abstract virtual void AddDbContext(Action`1<AbpDbContextConfiguration`1<TDbContext>> action);
}
public class Abp.EntityFrameworkCore.Configuration.NullAbpEfCoreConfiguration : object {
    [CompilerGeneratedAttribute]
private static NullAbpEfCoreConfiguration <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAbpQueryCompiler>k__BackingField;
    public static NullAbpEfCoreConfiguration Instance { get; }
    public bool UseAbpQueryCompiler { get; public set; }
    private static NullAbpEfCoreConfiguration();
    [CompilerGeneratedAttribute]
public static NullAbpEfCoreConfiguration get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseAbpQueryCompiler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseAbpQueryCompiler(bool value);
    public sealed virtual void AddDbContext(Action`1<AbpDbContextConfiguration`1<TDbContext>> action);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.DatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static bool IsRelational(DatabaseFacade database);
}
public class Abp.EntityFrameworkCore.DbContextTypeMatcher : DbContextTypeMatcher`1<AbpDbContext> {
    public DbContextTypeMatcher(ICurrentUnitOfWorkProvider currentUnitOfWorkProvider);
}
public class Abp.EntityFrameworkCore.DefaultDbContextResolver : object {
    private static MethodInfo CreateOptionsMethod;
    private IIocResolver _iocResolver;
    private IDbContextTypeMatcher _dbContextTypeMatcher;
    public DefaultDbContextResolver(IIocResolver iocResolver, IDbContextTypeMatcher dbContextTypeMatcher);
    private static DefaultDbContextResolver();
    public sealed virtual TDbContext Resolve(string connectionString, DbConnection existingConnection);
    private object CreateOptionsForType(Type dbContextType, string connectionString, DbConnection existingConnection);
    protected virtual DbContextOptions`1<TDbContext> CreateOptions(string connectionString, DbConnection existingConnection);
    [CompilerGeneratedAttribute]
internal static bool <Resolve>g__HasOptions|4_0(Type contextType);
}
public class Abp.EntityFrameworkCore.EfCoreActiveTransactionProvider : object {
    private IIocResolver _iocResolver;
    public EfCoreActiveTransactionProvider(IIocResolver iocResolver);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.EfCoreActiveTransactionProvider/<GetActiveTransactionAsync>d__2")]
public sealed virtual Task`1<IDbTransaction> GetActiveTransactionAsync(ActiveTransactionProviderArgs args);
    public sealed virtual IDbTransaction GetActiveTransaction(ActiveTransactionProviderArgs args);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.EfCoreActiveTransactionProvider/<GetActiveConnectionAsync>d__4")]
public sealed virtual Task`1<IDbConnection> GetActiveConnectionAsync(ActiveTransactionProviderArgs args);
    public sealed virtual IDbConnection GetActiveConnection(ActiveTransactionProviderArgs args);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.EfCoreActiveTransactionProvider/<GetDbContextAsync>d__6")]
private Task`1<DbContext> GetDbContextAsync(ActiveTransactionProviderArgs args);
    private DbContext GetDbContext(ActiveTransactionProviderArgs args);
}
public class Abp.EntityFrameworkCore.EfCoreBasedSecondaryOrmRegistrar : SecondaryOrmRegistrarBase {
    [CompilerGeneratedAttribute]
private string <OrmContextKey>k__BackingField;
    public string OrmContextKey { get; }
    public EfCoreBasedSecondaryOrmRegistrar(Type dbContextType, IDbContextEntityFinder dbContextEntityFinder);
    [CompilerGeneratedAttribute]
public virtual string get_OrmContextKey();
}
internal class Abp.EntityFrameworkCore.EfCoreDbContextEntityFinder : object {
    public sealed virtual IEnumerable`1<EntityTypeInfo> GetEntityTypeInfos(Type dbContextType);
}
[ExtensionAttribute]
internal static class Abp.EntityFrameworkCore.Extensions.DbContextExtensions : object {
    [ExtensionAttribute]
public static bool HasRelationalTransactionManager(DbContext dbContext);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Extensions.DbContextOptionsBuilderExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder AddAbpDbContextOptionsExtension(DbContextOptionsBuilder optionsBuilder);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> AddAbpDbContextOptionsExtension(DbContextOptionsBuilder`1<TContext> optionsBuilder);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Extensions.EntityEntryExtensions : object {
    [ExtensionAttribute]
public static bool CheckOwnedEntityChange(EntityEntry entry);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Extensions.ModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder ConfigureSoftDeleteDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext);
    [ExtensionAttribute]
public static ModelBuilder ConfigureMayHaveTenantDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext);
    [ExtensionAttribute]
public static ModelBuilder ConfigureMustHaveTenantDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Extensions.QueryableExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeIf(IQueryable`1<T> source, bool condition, string path);
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeIf(IQueryable`1<T> source, bool condition, Expression`1<Func`2<T, TProperty>> path);
    [ExtensionAttribute]
public static IQueryable`1<T> IncludeIf(IQueryable`1<T> source, bool condition, Func`2<IQueryable`1<T>, IIncludableQueryable`2<T, object>> include);
}
public interface Abp.EntityFrameworkCore.IDbContextProvider`1 {
    public abstract virtual Task`1<TDbContext> GetDbContextAsync();
    public abstract virtual Task`1<TDbContext> GetDbContextAsync(Nullable`1<MultiTenancySides> multiTenancySide);
    public abstract virtual TDbContext GetDbContext();
    public abstract virtual TDbContext GetDbContext(Nullable`1<MultiTenancySides> multiTenancySide);
}
public interface Abp.EntityFrameworkCore.IDbContextResolver {
    public abstract virtual TDbContext Resolve(string connectionString, DbConnection existingConnection);
}
public class Abp.EntityFrameworkCore.Linq.EfCoreAsyncQueryableExecuter : object {
    private ICancellationTokenProvider _cancellationTokenProvider;
    public EfCoreAsyncQueryableExecuter(ICancellationTokenProvider cancellationTokenProvider);
    public sealed virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Linq.EfCoreAsyncQueryableExecuter/<ExecuteAsync>d__6`2")]
private Task`1<TResult> ExecuteAsync(IQueryable`1<T> queryable, Func`3<IQueryable`1<T>, CancellationToken, Task`1<TResult>> executeMethod, CancellationToken cancellationToken);
}
public static class Abp.EntityFrameworkCore.Repositories.EfCoreAutoRepositoryTypes : object {
    [CompilerGeneratedAttribute]
private static AutoRepositoryTypesAttribute <Default>k__BackingField;
    public static AutoRepositoryTypesAttribute Default { get; }
    private static EfCoreAutoRepositoryTypes();
    [CompilerGeneratedAttribute]
public static AutoRepositoryTypesAttribute get_Default();
}
public class Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`2 : EfCoreRepositoryBase`3<TDbContext, TEntity, int> {
    public EfCoreRepositoryBase`2(IDbContextProvider`1<TDbContext> dbContextProvider);
}
public class Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3 : AbpRepositoryBase`2<TEntity, TPrimaryKey> {
    private static ConcurrentDictionary`2<Type, bool> EntityIsDbQuery;
    [CompilerGeneratedAttribute]
private IActiveTransactionProvider <TransactionProvider>k__BackingField;
    private IDbContextProvider`1<TDbContext> _dbContextProvider;
    private IActiveTransactionProvider TransactionProvider { get; public set; }
    public EfCoreRepositoryBase`3(IDbContextProvider`1<TDbContext> dbContextProvider);
    private static EfCoreRepositoryBase`3();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetContextAsync>d__0")]
public virtual Task`1<TDbContext> GetContextAsync();
    public virtual TDbContext GetContext();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetTableAsync>d__2")]
public virtual Task`1<DbSet`1<TEntity>> GetTableAsync();
    public virtual DbSet`1<TEntity> GetTable();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetDbQueryTableAsync>d__4")]
public virtual Task`1<DbSet`1<TEntity>> GetDbQueryTableAsync();
    public virtual DbSet`1<TEntity> GetDbQueryTable();
    protected virtual IQueryable`1<TEntity> GetQueryable();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetQueryableAsync>d__8")]
protected virtual Task`1<IQueryable`1<TEntity>> GetQueryableAsync();
    public virtual DbTransaction GetTransaction();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetTransactionAsync>d__10")]
public virtual Task`1<DbTransaction> GetTransactionAsync();
    public virtual DbConnection GetConnection();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetConnectionAsync>d__12")]
public virtual Task`1<DbConnection> GetConnectionAsync();
    [CompilerGeneratedAttribute]
private IActiveTransactionProvider get_TransactionProvider();
    [CompilerGeneratedAttribute]
public void set_TransactionProvider(IActiveTransactionProvider value);
    public virtual IQueryable`1<TEntity> GetAll();
    public virtual IQueryable`1<TEntity> GetAllReadonly();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetAllAsync>d__21")]
public virtual Task`1<IQueryable`1<TEntity>> GetAllAsync();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetAllReadonlyAsync>d__22")]
public virtual Task`1<IQueryable`1<TEntity>> GetAllReadonlyAsync();
    public virtual IQueryable`1<TEntity> GetAllIncluding(Expression`1[] propertySelectors);
    public virtual IQueryable`1<TEntity> GetAllReadonlyIncluding(Expression`1[] propertySelectors);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetAllIncludingAsync>d__25")]
public virtual Task`1<IQueryable`1<TEntity>> GetAllIncludingAsync(Expression`1[] propertySelectors);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetAllListAsync>d__26")]
public virtual Task`1<List`1<TEntity>> GetAllListAsync();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetAllListAsync>d__27")]
public virtual Task`1<List`1<TEntity>> GetAllListAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<SingleAsync>d__28")]
public virtual Task`1<TEntity> SingleAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<FirstOrDefaultAsync>d__29")]
public virtual Task`1<TEntity> FirstOrDefaultAsync(TPrimaryKey id);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<FirstOrDefaultAsync>d__30")]
public virtual Task`1<TEntity> FirstOrDefaultAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual TEntity Insert(TEntity entity);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<InsertAsync>d__32")]
public virtual Task`1<TEntity> InsertAsync(TEntity entity);
    public virtual TPrimaryKey InsertAndGetId(TEntity entity);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<InsertAndGetIdAsync>d__34")]
public virtual Task`1<TPrimaryKey> InsertAndGetIdAsync(TEntity entity);
    public virtual TPrimaryKey InsertOrUpdateAndGetId(TEntity entity);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<InsertOrUpdateAndGetIdAsync>d__36")]
public virtual Task`1<TPrimaryKey> InsertOrUpdateAndGetIdAsync(TEntity entity);
    public virtual TEntity Update(TEntity entity);
    public virtual Task`1<TEntity> UpdateAsync(TEntity entity);
    public virtual void Delete(TEntity entity);
    public virtual void Delete(TPrimaryKey id);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<CountAsync>d__41")]
public virtual Task`1<int> CountAsync();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<CountAsync>d__42")]
public virtual Task`1<int> CountAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<LongCountAsync>d__43")]
public virtual Task`1<long> LongCountAsync();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<LongCountAsync>d__44")]
public virtual Task`1<long> LongCountAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    protected virtual void AttachIfNot(TEntity entity);
    public sealed virtual DbContext GetDbContext();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<GetDbContextAsync>d__47")]
public sealed virtual Task`1<DbContext> GetDbContextAsync();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<EnsureCollectionLoadedAsync>d__48`1")]
public sealed virtual Task EnsureCollectionLoadedAsync(TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> collectionExpression, CancellationToken cancellationToken);
    public sealed virtual void EnsureCollectionLoaded(TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> collectionExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryBase`3/<EnsurePropertyLoadedAsync>d__50`1")]
public sealed virtual Task EnsurePropertyLoadedAsync(TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
    public sealed virtual void EnsurePropertyLoaded(TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
    private TEntity GetFromChangeTrackerOrNull(TPrimaryKey id);
    private static bool MayHaveTemporaryKey(TEntity entity);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <GetQueryable>b__7_0(Type key);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <GetQueryableAsync>b__8_0(Type key);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions : object {
    [ExtensionAttribute]
public static DbContext GetDbContext(IRepository`2<TEntity, TPrimaryKey> repository);
    [ExtensionAttribute]
public static void DetachFromDbContext(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity);
    [ExtensionAttribute]
public static void InsertRange(IRepository`2<TEntity, TPrimaryKey> repository, TEntity[] entities);
    [ExtensionAttribute]
public static void InsertRange(IRepository`2<TEntity, TPrimaryKey> repository, IEnumerable`1<TEntity> entities);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions/<InsertRangeAsync>d__4`2")]
[ExtensionAttribute]
public static Task InsertRangeAsync(IRepository`2<TEntity, TPrimaryKey> repository, TEntity[] entities);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions/<InsertRangeAsync>d__5`2")]
[ExtensionAttribute]
public static Task InsertRangeAsync(IRepository`2<TEntity, TPrimaryKey> repository, IEnumerable`1<TEntity> entities);
    [ExtensionAttribute]
public static void RemoveRange(IRepository`2<TEntity, TPrimaryKey> repository, TEntity[] entities);
    [ExtensionAttribute]
public static void RemoveRange(IRepository`2<TEntity, TPrimaryKey> repository, IEnumerable`1<TEntity> entities);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions/<BatchDeleteAsync>d__8`2")]
[ExtensionAttribute]
public static Task`1<int> BatchDeleteAsync(IRepository`2<TEntity, TPrimaryKey> repository, Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions/<BatchDeleteAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<int> BatchDeleteAsync(IRepository`1<TEntity> repository, Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions/<BatchUpdateAsync>d__10`2")]
[ExtensionAttribute]
public static Task`1<int> BatchUpdateAsync(IRepository`2<TEntity, TPrimaryKey> repository, Expression`1<Func`2<SetPropertyCalls`1<TEntity>, SetPropertyCalls`1<TEntity>>> updateExpression, Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Repositories.EfCoreRepositoryExtensions/<BatchUpdateAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<int> BatchUpdateAsync(IRepository`1<TEntity> repository, Expression`1<Func`2<SetPropertyCalls`1<TEntity>, SetPropertyCalls`1<TEntity>>> updateExpression, Expression`1<Func`2<TEntity, bool>> predicate);
    private static Expression`1<Func`2<TEntity, bool>> GetFilterExpressionOrNull(IIocResolver iocResolver);
    private static Nullable`1<int> GetCurrentTenantIdOrNull(IIocResolver iocResolver);
}
public interface Abp.EntityFrameworkCore.Repositories.IRepositoryWithDbContext {
    public abstract virtual DbContext GetDbContext();
    public abstract virtual Task`1<DbContext> GetDbContextAsync();
}
public class Abp.EntityFrameworkCore.SimpleDbContextProvider`1 : object {
    [CompilerGeneratedAttribute]
private TDbContext <DbContext>k__BackingField;
    public TDbContext DbContext { get; }
    public SimpleDbContextProvider`1(TDbContext dbContext);
    [CompilerGeneratedAttribute]
public TDbContext get_DbContext();
    public sealed virtual Task`1<TDbContext> GetDbContextAsync();
    public sealed virtual Task`1<TDbContext> GetDbContextAsync(Nullable`1<MultiTenancySides> multiTenancySide);
    public sealed virtual TDbContext GetDbContext();
    public sealed virtual TDbContext GetDbContext(Nullable`1<MultiTenancySides> multiTenancySide);
}
public class Abp.EntityFrameworkCore.Uow.ActiveTransactionInfo : object {
    [CompilerGeneratedAttribute]
private IDbContextTransaction <DbContextTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <StarterDbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DbContext> <AttendedDbContexts>k__BackingField;
    public IDbContextTransaction DbContextTransaction { get; }
    public DbContext StarterDbContext { get; }
    public List`1<DbContext> AttendedDbContexts { get; }
    public ActiveTransactionInfo(IDbContextTransaction dbContextTransaction, DbContext starterDbContext);
    [CompilerGeneratedAttribute]
public IDbContextTransaction get_DbContextTransaction();
    [CompilerGeneratedAttribute]
public DbContext get_StarterDbContext();
    [CompilerGeneratedAttribute]
public List`1<DbContext> get_AttendedDbContexts();
}
public class Abp.EntityFrameworkCore.Uow.DbContextEfCoreTransactionStrategy : object {
    [CompilerGeneratedAttribute]
private UnitOfWorkOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ActiveTransactionInfo> <ActiveTransactions>k__BackingField;
    protected UnitOfWorkOptions Options { get; private set; }
    protected IDictionary`2<string, ActiveTransactionInfo> ActiveTransactions { get; }
    [CompilerGeneratedAttribute]
protected UnitOfWorkOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(UnitOfWorkOptions value);
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, ActiveTransactionInfo> get_ActiveTransactions();
    public sealed virtual void InitOptions(UnitOfWorkOptions options);
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Uow.DbContextEfCoreTransactionStrategy/<CreateDbContextAsync>d__9`1")]
public sealed virtual Task`1<DbContext> CreateDbContextAsync(string connectionString, IDbContextResolver dbContextResolver);
    public sealed virtual void Commit();
    public sealed virtual void Dispose(IIocResolver iocResolver);
    public sealed virtual DbContext CreateDbContext(string connectionString, IDbContextResolver dbContextResolver);
}
public class Abp.EntityFrameworkCore.Uow.EfCoreUnitOfWork : UnitOfWorkBase {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, DbContext> <ActiveDbContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocResolver <IocResolver>k__BackingField;
    private IDbContextResolver _dbContextResolver;
    private IDbContextTypeMatcher _dbContextTypeMatcher;
    private IEfCoreTransactionStrategy _transactionStrategy;
    protected IDictionary`2<string, DbContext> ActiveDbContexts { get; }
    protected IIocResolver IocResolver { get; }
    public EfCoreUnitOfWork(IIocResolver iocResolver, IConnectionStringResolver connectionStringResolver, IUnitOfWorkFilterExecuter filterExecuter, IDbContextResolver dbContextResolver, IUnitOfWorkDefaultOptions defaultOptions, IDbContextTypeMatcher dbContextTypeMatcher, IEfCoreTransactionStrategy transactionStrategy);
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, DbContext> get_ActiveDbContexts();
    [CompilerGeneratedAttribute]
protected IIocResolver get_IocResolver();
    protected virtual void BeginUow();
    public virtual void SaveChanges();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Uow.EfCoreUnitOfWork/<SaveChangesAsync>d__12")]
public virtual Task SaveChangesAsync();
    protected virtual void CompleteUow();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Uow.EfCoreUnitOfWork/<CompleteUowAsync>d__14")]
protected virtual Task CompleteUowAsync();
    private void CommitTransaction();
    public IReadOnlyList`1<DbContext> GetAllActiveDbContexts();
    [AsyncStateMachineAttribute("Abp.EntityFrameworkCore.Uow.EfCoreUnitOfWork/<GetOrCreateDbContextAsync>d__17`1")]
public virtual Task`1<TDbContext> GetOrCreateDbContextAsync(Nullable`1<MultiTenancySides> multiTenancySide, string name);
    public virtual TDbContext GetOrCreateDbContext(Nullable`1<MultiTenancySides> multiTenancySide, string name);
    protected virtual void DisposeUow();
    protected virtual void SaveChangesInDbContext(DbContext dbContext);
    protected virtual Task SaveChangesInDbContextAsync(DbContext dbContext);
    protected virtual void Release(DbContext dbContext);
}
public interface Abp.EntityFrameworkCore.Uow.IEfCoreTransactionStrategy {
    public abstract virtual void InitOptions(UnitOfWorkOptions options);
    public abstract virtual Task`1<DbContext> CreateDbContextAsync(string connectionString, IDbContextResolver dbContextResolver);
    public abstract virtual void Commit();
    public abstract virtual void Dispose(IIocResolver iocResolver);
    public abstract virtual DbContext CreateDbContext(string connectionString, IDbContextResolver dbContextResolver);
}
public class Abp.EntityFrameworkCore.Uow.UnitOfWorkDbContextProvider`1 : object {
    private ICurrentUnitOfWorkProvider _currentUnitOfWorkProvider;
    public UnitOfWorkDbContextProvider`1(ICurrentUnitOfWorkProvider currentUnitOfWorkProvider);
    public sealed virtual Task`1<TDbContext> GetDbContextAsync();
    public sealed virtual Task`1<TDbContext> GetDbContextAsync(Nullable`1<MultiTenancySides> multiTenancySide);
    public sealed virtual TDbContext GetDbContext();
    public sealed virtual TDbContext GetDbContext(Nullable`1<MultiTenancySides> multiTenancySide);
}
[ExtensionAttribute]
public static class Abp.EntityFrameworkCore.Uow.UnitOfWorkExtensions : object {
    [ExtensionAttribute]
public static Task`1<TDbContext> GetDbContextAsync(IActiveUnitOfWork unitOfWork, Nullable`1<MultiTenancySides> multiTenancySide, string name);
    [ExtensionAttribute]
public static TDbContext GetDbContext(IActiveUnitOfWork unitOfWork, Nullable`1<MultiTenancySides> multiTenancySide, string name);
}
internal static class Abp.EntityFrameworkCore.Utils.DateTimePropertyInfoHelper : object {
    private static ConcurrentDictionary`2<Type, EntityDateTimePropertiesInfo> DateTimeProperties;
    private static DateTimePropertyInfoHelper();
    public static EntityDateTimePropertiesInfo GetDatePropertyInfos(Type entityType);
    public static void NormalizeDatePropertyKinds(object entity, Type entityType);
    private static EntityDateTimePropertiesInfo FindDatePropertyInfosForType(Type entityType);
    private static void AddComplexTypeDateTimePropertyPaths(string pathPrefix, PropertyInfo complexProperty, List`1<string> complexTypeDateTimePropertyPaths);
}
internal class Abp.EntityFrameworkCore.Utils.EntityDateTimePropertiesInfo : object {
    [CompilerGeneratedAttribute]
private List`1<PropertyInfo> <DateTimePropertyInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ComplexTypePropertyPaths>k__BackingField;
    public List`1<PropertyInfo> DateTimePropertyInfos { get; public set; }
    public List`1<string> ComplexTypePropertyPaths { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<PropertyInfo> get_DateTimePropertyInfos();
    [CompilerGeneratedAttribute]
public void set_DateTimePropertyInfos(List`1<PropertyInfo> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ComplexTypePropertyPaths();
    [CompilerGeneratedAttribute]
public void set_ComplexTypePropertyPaths(List`1<string> value);
}
public class Abp.EntityFrameworkCore.ValueConverters.AbpDateTimeValueConverter : ValueConverter`2<Nullable`1<DateTime>, Nullable`1<DateTime>> {
    private static Expression`1<Func`2<Nullable`1<DateTime>, Nullable`1<DateTime>>> Normalize;
    public AbpDateTimeValueConverter(ConverterMappingHints mappingHints);
    private static AbpDateTimeValueConverter();
}
internal class AbpEntityFrameworkCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
