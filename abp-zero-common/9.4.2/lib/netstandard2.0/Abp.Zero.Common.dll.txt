public class Abp.Application.Editions.AbpEditionManager : object {
    private IAbpZeroFeatureValueStore _featureValueStore;
    private IUnitOfWorkManager _unitOfWorkManager;
    [CompilerGeneratedAttribute]
private ICacheManager <CacheManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureManager <FeatureManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`1<Edition> <EditionRepository>k__BackingField;
    public IQueryable`1<Edition> Editions { get; }
    public ICacheManager CacheManager { get; public set; }
    public IFeatureManager FeatureManager { get; public set; }
    protected IRepository`1<Edition> EditionRepository { get; protected set; }
    public Task`1<IQueryable`1<Edition>> GetEditionsAsync { get; }
    public AbpEditionManager(IRepository`1<Edition> editionRepository, IAbpZeroFeatureValueStore featureValueStore, IUnitOfWorkManager unitOfWorkManager);
    public IQueryable`1<Edition> get_Editions();
    [CompilerGeneratedAttribute]
public ICacheManager get_CacheManager();
    [CompilerGeneratedAttribute]
public void set_CacheManager(ICacheManager value);
    [CompilerGeneratedAttribute]
public IFeatureManager get_FeatureManager();
    [CompilerGeneratedAttribute]
public void set_FeatureManager(IFeatureManager value);
    [CompilerGeneratedAttribute]
protected IRepository`1<Edition> get_EditionRepository();
    [CompilerGeneratedAttribute]
protected void set_EditionRepository(IRepository`1<Edition> value);
    public Task`1<IQueryable`1<Edition>> get_GetEditionsAsync();
    public virtual Task`1<string> GetFeatureValueOrNullAsync(int editionId, string featureName);
    public virtual string GetFeatureValueOrNull(int editionId, string featureName);
    public virtual Task SetFeatureValueAsync(int editionId, string featureName, string value);
    public virtual void SetFeatureValue(int editionId, string featureName, string value);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<GetFeatureValuesAsync>d__23")]
public virtual Task`1<IReadOnlyList`1<NameValue>> GetFeatureValuesAsync(int editionId);
    public virtual IReadOnlyList`1<NameValue> GetFeatureValues(int editionId);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<SetFeatureValuesAsync>d__25")]
public virtual Task SetFeatureValuesAsync(int editionId, NameValue[] values);
    public virtual void SetFeatureValues(int editionId, NameValue[] values);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<CreateAsync>d__27")]
public virtual Task CreateAsync(Edition edition);
    public virtual void Create(Edition edition);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<FindByNameAsync>d__29")]
public virtual Task`1<Edition> FindByNameAsync(string name);
    public virtual Edition FindByName(string name);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<FindByIdAsync>d__31")]
public virtual Task`1<Edition> FindByIdAsync(int id);
    public virtual Edition FindById(int id);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<GetByIdAsync>d__33")]
public virtual Task`1<Edition> GetByIdAsync(int id);
    public virtual Edition GetById(int id);
    [AsyncStateMachineAttribute("Abp.Application.Editions.AbpEditionManager/<DeleteAsync>d__35")]
public virtual Task DeleteAsync(Edition edition);
    public virtual void Delete(Edition edition);
}
[TableAttribute("AbpEditions")]
[MultiTenancySideAttribute]
public class Abp.Application.Editions.Edition : FullAuditedEntity {
    public static int MaxNameLength;
    public static int MaxDisplayNameLength;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [RequiredAttribute]
[StringLengthAttribute("32")]
public string Name { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("64")]
public string DisplayName { get; public set; }
    public Edition(string displayName);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
}
public class Abp.Application.Editions.EditionfeatureCacheItem : object {
    public static string CacheStoreName;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <FeatureValues>k__BackingField;
    public IDictionary`2<string, string> FeatureValues { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_FeatureValues();
    [CompilerGeneratedAttribute]
public void set_FeatureValues(IDictionary`2<string, string> value);
}
public class Abp.Application.Features.AbpFeatureValueStore`2 : object {
    private ICacheManager _cacheManager;
    private IRepository`2<TenantFeatureSetting, long> _tenantFeatureRepository;
    private IRepository`1<TTenant> _tenantRepository;
    private IRepository`2<EditionFeatureSetting, long> _editionFeatureRepository;
    private IFeatureManager _featureManager;
    private IUnitOfWorkManager _unitOfWorkManager;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    public ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    public AbpFeatureValueStore`2(ICacheManager cacheManager, IRepository`2<TenantFeatureSetting, long> tenantFeatureRepository, IRepository`1<TTenant> tenantRepository, IRepository`2<EditionFeatureSetting, long> editionFeatureRepository, IFeatureManager featureManager, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    public virtual Task`1<string> GetValueOrNullAsync(int tenantId, Feature feature);
    public virtual string GetValueOrNull(int tenantId, Feature feature);
    [AsyncStateMachineAttribute("Abp.Application.Features.AbpFeatureValueStore`2/<GetEditionValueOrNullAsync>d__17")]
public virtual Task`1<string> GetEditionValueOrNullAsync(int editionId, string featureName);
    public virtual string GetEditionValueOrNull(int editionId, string featureName);
    [AsyncStateMachineAttribute("Abp.Application.Features.AbpFeatureValueStore`2/<GetValueOrNullAsync>d__19")]
public virtual Task`1<string> GetValueOrNullAsync(int tenantId, string featureName);
    public virtual string GetValueOrNull(int tenantId, string featureName);
    [AsyncStateMachineAttribute("Abp.Application.Features.AbpFeatureValueStore`2/<SetEditionFeatureValueAsync>d__21")]
public virtual Task SetEditionFeatureValueAsync(int editionId, string featureName, string value);
    public virtual void SetEditionFeatureValue(int editionId, string featureName, string value);
    [AsyncStateMachineAttribute("Abp.Application.Features.AbpFeatureValueStore`2/<GetTenantFeatureCacheItemAsync>d__23")]
protected virtual Task`1<TenantFeatureCacheItem> GetTenantFeatureCacheItemAsync(int tenantId);
    protected virtual TenantFeatureCacheItem GetTenantFeatureCacheItem(int tenantId);
    [AsyncStateMachineAttribute("Abp.Application.Features.AbpFeatureValueStore`2/<GetEditionFeatureCacheItemAsync>d__25")]
protected virtual Task`1<EditionfeatureCacheItem> GetEditionFeatureCacheItemAsync(int editionId);
    protected virtual EditionfeatureCacheItem GetEditionFeatureCacheItem(int editionId);
    [AsyncStateMachineAttribute("Abp.Application.Features.AbpFeatureValueStore`2/<CreateEditionFeatureCacheItemAsync>d__27")]
protected virtual Task`1<EditionfeatureCacheItem> CreateEditionFeatureCacheItemAsync(int editionId);
    protected virtual EditionfeatureCacheItem CreateEditionFeatureCacheItem(int editionId);
    public virtual void HandleEvent(EntityChangingEventData`1<EditionFeatureSetting> eventData);
    public virtual void HandleEvent(EntityChangingEventData`1<Edition> eventData);
    public virtual void HandleEvent(EntityChangingEventData`1<TenantFeatureSetting> eventData);
    protected virtual string L(string name);
    protected virtual string L(string name, CultureInfo cultureInfo);
}
public class Abp.Application.Features.EditionFeatureSetting : FeatureSetting {
    [CompilerGeneratedAttribute]
private Edition <Edition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EditionId>k__BackingField;
    [ForeignKeyAttribute("EditionId")]
public Edition Edition { get; public set; }
    public int EditionId { get; public set; }
    public EditionFeatureSetting(int editionId, string name, string value);
    [CompilerGeneratedAttribute]
public virtual Edition get_Edition();
    [CompilerGeneratedAttribute]
public virtual void set_Edition(Edition value);
    [CompilerGeneratedAttribute]
public virtual int get_EditionId();
    [CompilerGeneratedAttribute]
public virtual void set_EditionId(int value);
}
[TableAttribute("AbpFeatures")]
[MultiTenancySideAttribute]
public abstract class Abp.Application.Features.FeatureSetting : CreationAuditedEntity`1<long> {
    public static int MaxNameLength;
    public static int MaxValueLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string Name { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("2000")]
public string Value { get; public set; }
    protected FeatureSetting(string name, string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
}
public interface Abp.Application.Features.IAbpZeroFeatureValueStore {
    public abstract virtual Task`1<string> GetValueOrNullAsync(int tenantId, string featureName);
    public abstract virtual string GetValueOrNull(int tenantId, string featureName);
    public abstract virtual Task`1<string> GetEditionValueOrNullAsync(int editionId, string featureName);
    public abstract virtual string GetEditionValueOrNull(int editionId, string featureName);
    public abstract virtual Task SetEditionFeatureValueAsync(int editionId, string featureName, string value);
    public abstract virtual void SetEditionFeatureValue(int editionId, string featureName, string value);
}
public class Abp.Auditing.AuditingStore : object {
    private IRepository`2<AuditLog, long> _auditLogRepository;
    public AuditingStore(IRepository`2<AuditLog, long> auditLogRepository);
    public virtual Task SaveAsync(AuditInfo auditInfo);
    public virtual void Save(AuditInfo auditInfo);
}
[TableAttribute("AbpAuditLogs")]
public class Abp.Auditing.AuditLog : Entity`1<long> {
    public static int MaxServiceNameLength;
    public static int MaxMethodNameLength;
    public static int MaxParametersLength;
    public static int MaxReturnValueLength;
    public static int MaxClientIpAddressLength;
    public static int MaxClientNameLength;
    public static int MaxBrowserInfoLength;
    public static int MaxExceptionMessageLength;
    public static int MaxExceptionLength;
    public static int MaxCustomDataLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecutionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImpersonatorUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ImpersonatorTenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomData>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    public string ServiceName { get; public set; }
    public string MethodName { get; public set; }
    public string Parameters { get; public set; }
    public string ReturnValue { get; public set; }
    public DateTime ExecutionTime { get; public set; }
    public int ExecutionDuration { get; public set; }
    public string ClientIpAddress { get; public set; }
    public string ClientName { get; public set; }
    public string BrowserInfo { get; public set; }
    public string ExceptionMessage { get; public set; }
    public string Exception { get; public set; }
    public Nullable`1<long> ImpersonatorUserId { get; public set; }
    public Nullable`1<int> ImpersonatorTenantId { get; public set; }
    public string CustomData { get; public set; }
    private static AuditLog();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_ServiceName();
    [CompilerGeneratedAttribute]
public virtual void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public virtual void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Parameters();
    [CompilerGeneratedAttribute]
public virtual void set_Parameters(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ReturnValue();
    [CompilerGeneratedAttribute]
public virtual void set_ReturnValue(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ExecutionTime();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutionTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual int get_ExecutionDuration();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutionDuration(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientIpAddress();
    [CompilerGeneratedAttribute]
public virtual void set_ClientIpAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientName();
    [CompilerGeneratedAttribute]
public virtual void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_BrowserInfo();
    [CompilerGeneratedAttribute]
public virtual void set_BrowserInfo(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public virtual void set_ExceptionMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Exception();
    [CompilerGeneratedAttribute]
public virtual void set_Exception(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ImpersonatorUserId();
    [CompilerGeneratedAttribute]
public virtual void set_ImpersonatorUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ImpersonatorTenantId();
    [CompilerGeneratedAttribute]
public virtual void set_ImpersonatorTenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_CustomData();
    [CompilerGeneratedAttribute]
public virtual void set_CustomData(string value);
    public static AuditLog CreateFromAuditInfo(AuditInfo auditInfo);
    public virtual string ToString();
    public static string GetAbpClearException(Exception exception);
}
public enum Abp.Authorization.AbpLoginResultType : Enum {
    public byte value__;
    public static AbpLoginResultType Success;
    public static AbpLoginResultType InvalidUserNameOrEmailAddress;
    public static AbpLoginResultType InvalidPassword;
    public static AbpLoginResultType UserIsNotActive;
    public static AbpLoginResultType InvalidTenancyName;
    public static AbpLoginResultType TenantIsNotActive;
    public static AbpLoginResultType UserEmailIsNotConfirmed;
    public static AbpLoginResultType UnknownExternalLogin;
    public static AbpLoginResultType LockedOut;
    public static AbpLoginResultType UserPhoneNumberIsNotConfirmed;
    public static AbpLoginResultType FailedForOtherReason;
}
public class Abp.Authorization.PermissionGrantInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGranted>k__BackingField;
    public string Name { get; private set; }
    public bool IsGranted { get; private set; }
    public PermissionGrantInfo(string name, bool isGranted);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsGranted();
    [CompilerGeneratedAttribute]
private void set_IsGranted(bool value);
}
[TableAttribute("AbpPermissions")]
public abstract class Abp.Authorization.PermissionSetting : CreationAuditedEntity`1<long> {
    public static int MaxNameLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGranted>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string Name { get; public set; }
    public bool IsGranted { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsGranted();
    [CompilerGeneratedAttribute]
public virtual void set_IsGranted(bool value);
}
[TableAttribute("AbpRoles")]
public abstract class Abp.Authorization.Roles.AbpRoleBase : FullAuditedEntity`1<int> {
    public static int MaxDisplayNameLength;
    public static int MaxNameLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<RolePermissionSetting> <Permissions>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("32")]
public string Name { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("64")]
public string DisplayName { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsDefault { get; public set; }
    [ForeignKeyAttribute("RoleId")]
public ICollection`1<RolePermissionSetting> Permissions { get; public set; }
    protected AbpRoleBase(Nullable`1<int> tenantId, string displayName);
    protected AbpRoleBase(Nullable`1<int> tenantId, string name, string displayName);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsStatic();
    [CompilerGeneratedAttribute]
public virtual void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefault();
    [CompilerGeneratedAttribute]
public virtual void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<RolePermissionSetting> get_Permissions();
    [CompilerGeneratedAttribute]
public virtual void set_Permissions(ICollection`1<RolePermissionSetting> value);
    public virtual string ToString();
}
public class Abp.Authorization.Roles.AbpRolePermissionCacheItemInvalidator : object {
    private ICacheManager _cacheManager;
    public AbpRolePermissionCacheItemInvalidator(ICacheManager cacheManager);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<RolePermissionSetting> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<OrganizationUnitRole> eventData);
    public sealed virtual void HandleEvent(EntityDeletedEventData`1<AbpRoleBase> eventData);
}
public interface Abp.Authorization.Roles.IRolePermissionStore`1 {
    public abstract virtual Task AddPermissionAsync(TRole role, PermissionGrantInfo permissionGrant);
    public abstract virtual Task RemovePermissionAsync(TRole role, PermissionGrantInfo permissionGrant);
    public abstract virtual Task`1<IList`1<PermissionGrantInfo>> GetPermissionsAsync(TRole role);
    public abstract virtual IList`1<PermissionGrantInfo> GetPermissions(TRole role);
    public abstract virtual Task`1<IList`1<PermissionGrantInfo>> GetPermissionsAsync(int roleId);
    public abstract virtual IList`1<PermissionGrantInfo> GetPermissions(int roleId);
    public abstract virtual Task`1<bool> HasPermissionAsync(int roleId, PermissionGrantInfo permissionGrant);
    public abstract virtual Task RemoveAllPermissionSettingsAsync(TRole role);
}
internal class Abp.Authorization.Roles.PermissionEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static PermissionEqualityComparer <Instance>k__BackingField;
    public static PermissionEqualityComparer Instance { get; }
    private static PermissionEqualityComparer();
    [CompilerGeneratedAttribute]
public static PermissionEqualityComparer get_Instance();
    public sealed virtual bool Equals(Permission x, Permission y);
    public sealed virtual int GetHashCode(Permission permission);
}
[TableAttribute("AbpRoleClaims")]
public class Abp.Authorization.Roles.RoleClaim : CreationAuditedEntity`1<long> {
    public static int MaxClaimTypeLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RoleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimValue>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public int RoleId { get; public set; }
    [StringLengthAttribute("256")]
public string ClaimType { get; public set; }
    public string ClaimValue { get; public set; }
    public RoleClaim(AbpRoleBase role, Claim claim);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual int get_RoleId();
    [CompilerGeneratedAttribute]
public virtual void set_RoleId(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimType();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimValue();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimValue(string value);
}
public class Abp.Authorization.Roles.RolePermissionCacheItem : object {
    public static string CacheStoreName;
    [CompilerGeneratedAttribute]
private long <RoleId>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <GrantedPermissions>k__BackingField;
    public long RoleId { get; public set; }
    public HashSet`1<string> GrantedPermissions { get; public set; }
    public RolePermissionCacheItem(int roleId);
    [CompilerGeneratedAttribute]
public long get_RoleId();
    [CompilerGeneratedAttribute]
public void set_RoleId(long value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_GrantedPermissions();
    [CompilerGeneratedAttribute]
public void set_GrantedPermissions(HashSet`1<string> value);
}
public class Abp.Authorization.Roles.RolePermissionSetting : PermissionSetting {
    [CompilerGeneratedAttribute]
private int <RoleId>k__BackingField;
    public int RoleId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_RoleId();
    [CompilerGeneratedAttribute]
public virtual void set_RoleId(int value);
}
[TableAttribute("AbpUsers")]
public abstract class Abp.Authorization.Users.AbpUserBase : FullAuditedEntity`1<long> {
    public static int MaxUserNameLength;
    public static int MaxEmailAddressLength;
    public static int MaxNameLength;
    public static int MaxSurnameLength;
    public static int MaxAuthenticationSourceLength;
    public static string AdminUserName;
    public static int MaxPasswordLength;
    public static int MaxPlainPasswordLength;
    public static int MaxEmailConfirmationCodeLength;
    public static int MaxPasswordResetCodeLength;
    public static int MaxPhoneNumberLength;
    public static int MaxSecurityStampLength;
    [CompilerGeneratedAttribute]
private string <AuthenticationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Surname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailConfirmationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordResetCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LockoutEndDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessFailedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLockoutEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPhoneNumberConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTwoFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<UserLogin> <Logins>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<UserRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<UserClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<UserPermissionSetting> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Setting> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmailConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [StringLengthAttribute("64")]
public string AuthenticationSource { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string UserName { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string EmailAddress { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("64")]
public string Name { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("64")]
public string Surname { get; public set; }
    [NotMappedAttribute]
public string FullName { get; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string Password { get; public set; }
    [StringLengthAttribute("328")]
public string EmailConfirmationCode { get; public set; }
    [StringLengthAttribute("328")]
public string PasswordResetCode { get; public set; }
    public Nullable`1<DateTime> LockoutEndDateUtc { get; public set; }
    public int AccessFailedCount { get; public set; }
    public bool IsLockoutEnabled { get; public set; }
    [StringLengthAttribute("32")]
public string PhoneNumber { get; public set; }
    public bool IsPhoneNumberConfirmed { get; public set; }
    [StringLengthAttribute("128")]
public string SecurityStamp { get; public set; }
    public bool IsTwoFactorEnabled { get; public set; }
    [ForeignKeyAttribute("UserId")]
public ICollection`1<UserLogin> Logins { get; public set; }
    [ForeignKeyAttribute("UserId")]
public ICollection`1<UserRole> Roles { get; public set; }
    [ForeignKeyAttribute("UserId")]
public ICollection`1<UserClaim> Claims { get; public set; }
    [ForeignKeyAttribute("UserId")]
public ICollection`1<UserPermissionSetting> Permissions { get; public set; }
    [ForeignKeyAttribute("UserId")]
public ICollection`1<Setting> Settings { get; public set; }
    public bool IsEmailConfirmed { get; public set; }
    public bool IsActive { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_AuthenticationSource();
    [CompilerGeneratedAttribute]
public virtual void set_AuthenticationSource(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_EmailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_EmailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Surname();
    [CompilerGeneratedAttribute]
public virtual void set_Surname(string value);
    public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual string get_Password();
    [CompilerGeneratedAttribute]
public virtual void set_Password(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EmailConfirmationCode();
    [CompilerGeneratedAttribute]
public virtual void set_EmailConfirmationCode(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PasswordResetCode();
    [CompilerGeneratedAttribute]
public virtual void set_PasswordResetCode(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LockoutEndDateUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LockoutEndDateUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual int get_AccessFailedCount();
    [CompilerGeneratedAttribute]
public virtual void set_AccessFailedCount(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsLockoutEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_IsLockoutEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPhoneNumberConfirmed();
    [CompilerGeneratedAttribute]
public virtual void set_IsPhoneNumberConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_SecurityStamp();
    [CompilerGeneratedAttribute]
public virtual void set_SecurityStamp(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsTwoFactorEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_IsTwoFactorEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<UserLogin> get_Logins();
    [CompilerGeneratedAttribute]
public virtual void set_Logins(ICollection`1<UserLogin> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<UserRole> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(ICollection`1<UserRole> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<UserClaim> get_Claims();
    [CompilerGeneratedAttribute]
public virtual void set_Claims(ICollection`1<UserClaim> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<UserPermissionSetting> get_Permissions();
    [CompilerGeneratedAttribute]
public virtual void set_Permissions(ICollection`1<UserPermissionSetting> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<Setting> get_Settings();
    [CompilerGeneratedAttribute]
public virtual void set_Settings(ICollection`1<Setting> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsEmailConfirmed();
    [CompilerGeneratedAttribute]
public virtual void set_IsEmailConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public virtual void set_IsActive(bool value);
    public virtual void SetNewPasswordResetCode();
    public virtual void SetNewEmailConfirmationCode();
    public virtual UserIdentifier ToUserIdentifier();
    public virtual string ToString();
}
public class Abp.Authorization.Users.AbpUserPermissionCacheItemInvalidator : object {
    private ICacheManager _cacheManager;
    private IRepository`2<UserOrganizationUnit, long> _userOrganizationUnitRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public AbpUserPermissionCacheItemInvalidator(ICacheManager cacheManager, IRepository`2<UserOrganizationUnit, long> userOrganizationUnitRepository, IUnitOfWorkManager unitOfWorkManager);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<UserPermissionSetting> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<UserRole> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<UserOrganizationUnit> eventData);
    public sealed virtual void HandleEvent(EntityDeletedEventData`1<AbpUserBase> eventData);
    public virtual void HandleEvent(EntityChangedEventData`1<OrganizationUnitRole> eventData);
}
public abstract class Abp.Authorization.Users.DefaultExternalAuthenticationSource`2 : object {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task`1<bool> TryAuthenticateAsync(string userNameOrEmailAddress, string plainPassword, TTenant tenant);
    public virtual Task`1<TUser> CreateUserAsync(string userNameOrEmailAddress, TTenant tenant);
    public virtual Task UpdateUserAsync(TUser user, TTenant tenant);
}
public interface Abp.Authorization.Users.IExternalAuthenticationSource`2 {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task`1<bool> TryAuthenticateAsync(string userNameOrEmailAddress, string plainPassword, TTenant tenant);
    public abstract virtual Task`1<TUser> CreateUserAsync(string userNameOrEmailAddress, TTenant tenant);
    public abstract virtual Task UpdateUserAsync(TUser user, TTenant tenant);
}
public interface Abp.Authorization.Users.IUserPermissionStore`1 {
    public abstract virtual Task AddPermissionAsync(TUser user, PermissionGrantInfo permissionGrant);
    public abstract virtual void AddPermission(TUser user, PermissionGrantInfo permissionGrant);
    public abstract virtual Task RemovePermissionAsync(TUser user, PermissionGrantInfo permissionGrant);
    public abstract virtual void RemovePermission(TUser user, PermissionGrantInfo permissionGrant);
    public abstract virtual Task`1<IList`1<PermissionGrantInfo>> GetPermissionsAsync(long userId);
    public abstract virtual IList`1<PermissionGrantInfo> GetPermissions(long userId);
    public abstract virtual Task`1<bool> HasPermissionAsync(long userId, PermissionGrantInfo permissionGrant);
    public abstract virtual bool HasPermission(long userId, PermissionGrantInfo permissionGrant);
    public abstract virtual Task RemoveAllPermissionSettingsAsync(TUser user);
    public abstract virtual void RemoveAllPermissionSettings(TUser user);
}
[TableAttribute("AbpUserAccounts")]
[MultiTenancySideAttribute]
public class Abp.Authorization.Users.UserAccount : FullAuditedEntity`1<long> {
    public static int MaxUserNameLength;
    public static int MaxEmailAddressLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserLinkId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    public Nullable`1<long> UserLinkId { get; public set; }
    [StringLengthAttribute("256")]
public string UserName { get; public set; }
    [StringLengthAttribute("256")]
public string EmailAddress { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_UserLinkId();
    [CompilerGeneratedAttribute]
public virtual void set_UserLinkId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EmailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_EmailAddress(string value);
}
public class Abp.Authorization.Users.UserAccountSynchronizer : object {
    private IRepository`2<UserAccount, long> _userAccountRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public UserAccountSynchronizer(IRepository`2<UserAccount, long> userAccountRepository, IUnitOfWorkManager unitOfWorkManager);
    public virtual void HandleEvent(EntityCreatedEventData`1<AbpUserBase> eventData);
    public virtual void HandleEvent(EntityDeletedEventData`1<AbpUserBase> eventData);
    public virtual void HandleEvent(EntityUpdatedEventData`1<AbpUserBase> eventData);
    public virtual void HandleEvent(EntityDeletedEventData`1<AbpTenantBase> eventData);
}
[TableAttribute("AbpUserClaims")]
public class Abp.Authorization.Users.UserClaim : CreationAuditedEntity`1<long> {
    public static int MaxClaimTypeLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimValue>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    [StringLengthAttribute("256")]
public string ClaimType { get; public set; }
    public string ClaimValue { get; public set; }
    public UserClaim(AbpUserBase user, Claim claim);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimType();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimValue();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimValue(string value);
}
[TableAttribute("AbpUserLogins")]
public class Abp.Authorization.Users.UserLogin : Entity`1<long> {
    public static int MaxLoginProviderLength;
    public static int MaxProviderKeyLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string LoginProvider { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string ProviderKey { get; public set; }
    public UserLogin(Nullable`1<int> tenantId, long userId, string loginProvider, string providerKey);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
public virtual void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
public virtual void set_ProviderKey(string value);
}
[TableAttribute("AbpUserLoginAttempts")]
public class Abp.Authorization.Users.UserLoginAttempt : Entity`1<long> {
    public static int MaxTenancyNameLength;
    public static int MaxUserNameOrEmailAddressLength;
    public static int MaxClientIpAddressLength;
    public static int MaxClientNameLength;
    public static int MaxBrowserInfoLength;
    public static int MaxFailReasonLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenancyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserNameOrEmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpLoginResultType <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailReason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [StringLengthAttribute("64")]
public string TenancyName { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    [StringLengthAttribute("256")]
public string UserNameOrEmailAddress { get; public set; }
    [StringLengthAttribute("64")]
public string ClientIpAddress { get; public set; }
    [StringLengthAttribute("128")]
public string ClientName { get; public set; }
    [StringLengthAttribute("512")]
public string BrowserInfo { get; public set; }
    public AbpLoginResultType Result { get; public set; }
    [StringLengthAttribute("1024")]
public string FailReason { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_TenancyName();
    [CompilerGeneratedAttribute]
public virtual void set_TenancyName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_UserNameOrEmailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_UserNameOrEmailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientIpAddress();
    [CompilerGeneratedAttribute]
public virtual void set_ClientIpAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientName();
    [CompilerGeneratedAttribute]
public virtual void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_BrowserInfo();
    [CompilerGeneratedAttribute]
public virtual void set_BrowserInfo(string value);
    [CompilerGeneratedAttribute]
public virtual AbpLoginResultType get_Result();
    [CompilerGeneratedAttribute]
public virtual void set_Result(AbpLoginResultType value);
    [CompilerGeneratedAttribute]
public virtual string get_FailReason();
    [CompilerGeneratedAttribute]
public virtual void set_FailReason(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
}
[TableAttribute("AbpUserOrganizationUnits")]
public class Abp.Authorization.Users.UserOrganizationUnit : CreationAuditedEntity`1<long> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OrganizationUnitId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    public long OrganizationUnitId { get; public set; }
    public bool IsDeleted { get; public set; }
    public UserOrganizationUnit(Nullable`1<int> tenantId, long userId, long organizationUnitId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual long get_OrganizationUnitId();
    [CompilerGeneratedAttribute]
public virtual void set_OrganizationUnitId(long value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
}
public class Abp.Authorization.Users.UserOrganizationUnitRemover : object {
    private IRepository`2<UserOrganizationUnit, long> _userOrganizationUnitRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public UserOrganizationUnitRemover(IRepository`2<UserOrganizationUnit, long> userOrganizationUnitRepository, IUnitOfWorkManager unitOfWorkManager);
    public virtual void HandleEvent(EntityDeletedEventData`1<AbpUserBase> eventData);
}
public class Abp.Authorization.Users.UserPermissionCacheItem : object {
    public static string CacheStoreName;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <RoleIds>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <GrantedPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ProhibitedPermissions>k__BackingField;
    public long UserId { get; public set; }
    public List`1<int> RoleIds { get; public set; }
    public HashSet`1<string> GrantedPermissions { get; public set; }
    public HashSet`1<string> ProhibitedPermissions { get; public set; }
    public UserPermissionCacheItem(long userId);
    [CompilerGeneratedAttribute]
public long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public List`1<int> get_RoleIds();
    [CompilerGeneratedAttribute]
public void set_RoleIds(List`1<int> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_GrantedPermissions();
    [CompilerGeneratedAttribute]
public void set_GrantedPermissions(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ProhibitedPermissions();
    [CompilerGeneratedAttribute]
public void set_ProhibitedPermissions(HashSet`1<string> value);
}
public class Abp.Authorization.Users.UserPermissionSetting : PermissionSetting {
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    public long UserId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
}
[TableAttribute("AbpUserRoles")]
public class Abp.Authorization.Users.UserRole : CreationAuditedEntity`1<long> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RoleId>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    public int RoleId { get; public set; }
    public UserRole(Nullable`1<int> tenantId, long userId, int roleId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual int get_RoleId();
    [CompilerGeneratedAttribute]
public virtual void set_RoleId(int value);
}
public class Abp.Authorization.Users.UserRoleRemover : object {
    private IRepository`2<UserRole, long> _userRoleRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public UserRoleRemover(IUnitOfWorkManager unitOfWorkManager, IRepository`2<UserRole, long> userRoleRepository);
    public virtual void HandleEvent(EntityDeletedEventData`1<AbpUserBase> eventData);
}
public class Abp.BackgroundJobs.BackgroundJobStore : object {
    private IRepository`2<BackgroundJobInfo, long> _backgroundJobRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public BackgroundJobStore(IRepository`2<BackgroundJobInfo, long> backgroundJobRepository, IUnitOfWorkManager unitOfWorkManager);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobStore/<GetAsync>d__3")]
public sealed virtual Task`1<BackgroundJobInfo> GetAsync(long jobId);
    public sealed virtual BackgroundJobInfo Get(long jobId);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobStore/<InsertAsync>d__5")]
public sealed virtual Task InsertAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Insert(BackgroundJobInfo jobInfo);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobStore/<GetWaitingJobsAsync>d__7")]
public virtual Task`1<List`1<BackgroundJobInfo>> GetWaitingJobsAsync(int maxResultCount);
    public virtual List`1<BackgroundJobInfo> GetWaitingJobs(int maxResultCount);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobStore/<DeleteAsync>d__9")]
public sealed virtual Task DeleteAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Delete(BackgroundJobInfo jobInfo);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobStore/<UpdateAsync>d__11")]
public sealed virtual Task UpdateAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Update(BackgroundJobInfo jobInfo);
}
public class Abp.Caching.GetScriptsResponsePerUserCacheInvalidator : object {
    private static string CacheName;
    private ICachedUniqueKeyPerUser _cachedUniqueKeyPerUser;
    public GetScriptsResponsePerUserCacheInvalidator(ICachedUniqueKeyPerUser cachedUniqueKeyPerUser);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<UserPermissionSetting> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<UserRole> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<UserOrganizationUnit> eventData);
    public sealed virtual void HandleEvent(EntityDeletedEventData`1<AbpUserBase> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<OrganizationUnitRole> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<LanguageInfo> eventData);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<SettingInfo> eventData);
}
[TableAttribute("AbpSettings")]
public class Abp.Configuration.Setting : AuditedEntity`1<long> {
    public static int MaxNameLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string Name { get; public set; }
    public string Value { get; public set; }
    public Setting(Nullable`1<int> tenantId, Nullable`1<long> userId, string name, string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
}
[ExtensionAttribute]
internal static class Abp.Configuration.SettingExtensions : object {
    [ExtensionAttribute]
public static Setting ToSetting(SettingInfo settingInfo);
    [ExtensionAttribute]
public static SettingInfo ToSettingInfo(Setting setting);
}
public class Abp.Configuration.SettingStore : object {
    private IRepository`2<Setting, long> _settingRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public SettingStore(IRepository`2<Setting, long> settingRepository, IUnitOfWorkManager unitOfWorkManager);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingStore/<GetAllListAsync>d__3")]
public virtual Task`1<List`1<SettingInfo>> GetAllListAsync(Nullable`1<int> tenantId, Nullable`1<long> userId);
    public virtual List`1<SettingInfo> GetAllList(Nullable`1<int> tenantId, Nullable`1<long> userId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingStore/<GetSettingOrNullAsync>d__5")]
public virtual Task`1<SettingInfo> GetSettingOrNullAsync(Nullable`1<int> tenantId, Nullable`1<long> userId, string name);
    public virtual SettingInfo GetSettingOrNull(Nullable`1<int> tenantId, Nullable`1<long> userId, string name);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingStore/<DeleteAsync>d__7")]
public virtual Task DeleteAsync(SettingInfo settingInfo);
    public virtual void Delete(SettingInfo settingInfo);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingStore/<CreateAsync>d__9")]
public virtual Task CreateAsync(SettingInfo settingInfo);
    public virtual void Create(SettingInfo settingInfo);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingStore/<UpdateAsync>d__11")]
public virtual Task UpdateAsync(SettingInfo settingInfo);
    public virtual void Update(SettingInfo settingInfo);
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyStore : object {
    private IRepository`1<DynamicEntityProperty> _dynamicEntityPropertyRepository;
    private IAsyncQueryableExecuter _asyncQueryableExecuter;
    private IUnitOfWorkManager _unitOfWorkManager;
    public DynamicEntityPropertyStore(IRepository`1<DynamicEntityProperty> dynamicEntityPropertyRepository, IAsyncQueryableExecuter asyncQueryableExecuter, IUnitOfWorkManager unitOfWorkManager);
    public virtual DynamicEntityProperty Get(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<GetAsync>d__5")]
public virtual Task`1<DynamicEntityProperty> GetAsync(int id);
    public sealed virtual List`1<DynamicEntityProperty> GetAll();
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<GetAllAsync>d__7")]
public sealed virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync();
    public virtual List`1<DynamicEntityProperty> GetAll(string entityFullName);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<GetAllAsync>d__9")]
public virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync(string entityFullName);
    public virtual void Add(DynamicEntityProperty dynamicEntityProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<AddAsync>d__11")]
public virtual Task AddAsync(DynamicEntityProperty dynamicEntityProperty);
    public virtual void Update(DynamicEntityProperty dynamicEntityProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<UpdateAsync>d__13")]
public virtual Task UpdateAsync(DynamicEntityProperty dynamicEntityProperty);
    public virtual void Delete(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<DeleteAsync>d__15")]
public virtual Task DeleteAsync(int id);
    [CompilerGeneratedAttribute]
private List`1<DynamicEntityProperty> <GetAll>b__6_0();
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyStore/<<GetAllAsync>b__7_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<DynamicEntityProperty>> <GetAllAsync>b__7_0();
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyValueStore : object {
    private IRepository`2<DynamicEntityPropertyValue, long> _dynamicEntityPropertyValueRepository;
    private IAsyncQueryableExecuter _asyncQueryableExecuter;
    public DynamicEntityPropertyValueStore(IRepository`2<DynamicEntityPropertyValue, long> dynamicEntityPropertyValueRepository, IAsyncQueryableExecuter asyncQueryableExecuter);
    public virtual DynamicEntityPropertyValue Get(long id);
    public virtual Task`1<DynamicEntityPropertyValue> GetAsync(long id);
    public virtual void Add(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual Task AddAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual void Update(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual Task UpdateAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual void Delete(long id);
    public virtual Task DeleteAsync(long id);
    public virtual List`1<DynamicEntityPropertyValue> GetValues(int dynamicEntityPropertyId, string entityId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueStore/<GetValuesAsync>d__12")]
public virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(int dynamicEntityPropertyId, string entityId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueStore/<GetValuesAsync>d__14")]
public virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueStore/<GetValuesAsync>d__16")]
public virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, int dynamicPropertyId);
    public virtual void CleanValues(int dynamicEntityPropertyId, string entityId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueStore/<CleanValuesAsync>d__18")]
public virtual Task CleanValuesAsync(int dynamicEntityPropertyId, string entityId);
}
public class Abp.DynamicEntityProperties.DynamicPropertyStore : object {
    private IRepository`1<DynamicProperty> _dynamicPropertyRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public DynamicPropertyStore(IRepository`1<DynamicProperty> dynamicPropertyRepository, IUnitOfWorkManager unitOfWorkManager);
    public virtual DynamicProperty Get(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<GetAsync>d__4")]
public virtual Task`1<DynamicProperty> GetAsync(int id);
    public virtual DynamicProperty Get(string propertyName);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<GetAsync>d__6")]
public virtual Task`1<DynamicProperty> GetAsync(string propertyName);
    public virtual List`1<DynamicProperty> GetAll();
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<GetAllAsync>d__8")]
public virtual Task`1<List`1<DynamicProperty>> GetAllAsync();
    public virtual void Add(DynamicProperty dynamicProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<AddAsync>d__10")]
public virtual Task AddAsync(DynamicProperty dynamicProperty);
    public virtual void Update(DynamicProperty dynamicProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<UpdateAsync>d__12")]
public virtual Task UpdateAsync(DynamicProperty dynamicProperty);
    public virtual void Delete(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<DeleteAsync>d__14")]
public virtual Task DeleteAsync(int id);
    [CompilerGeneratedAttribute]
private List`1<DynamicProperty> <GetAll>b__7_0();
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyStore/<<GetAllAsync>b__8_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<DynamicProperty>> <GetAllAsync>b__8_0();
}
public class Abp.DynamicEntityProperties.DynamicPropertyValueStore : object {
    private IRepository`2<DynamicPropertyValue, long> _dynamicPropertyValuesRepository;
    private IAsyncQueryableExecuter _asyncQueryableExecuter;
    public DynamicPropertyValueStore(IRepository`2<DynamicPropertyValue, long> dynamicPropertyValuesRepository, IAsyncQueryableExecuter asyncQueryableExecuter);
    public virtual DynamicPropertyValue Get(long id);
    public virtual Task`1<DynamicPropertyValue> GetAsync(long id);
    public virtual List`1<DynamicPropertyValue> GetAllValuesOfDynamicProperty(int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueStore/<GetAllValuesOfDynamicPropertyAsync>d__6")]
public virtual Task`1<List`1<DynamicPropertyValue>> GetAllValuesOfDynamicPropertyAsync(int dynamicPropertyId);
    public virtual void Add(DynamicPropertyValue dynamicPropertyValue);
    public virtual Task AddAsync(DynamicPropertyValue dynamicPropertyValue);
    public virtual void Update(DynamicPropertyValue dynamicPropertyValue);
    public virtual Task UpdateAsync(DynamicPropertyValue dynamicPropertyValue);
    public virtual void Delete(long id);
    public virtual Task DeleteAsync(long id);
    public virtual void CleanValues(int dynamicPropertyId);
    public virtual Task CleanValuesAsync(int dynamicPropertyId);
}
public class Abp.EntityHistory.EntityHistoryStore : object {
    private IRepository`2<EntityChangeSet, long> _changeSetRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public EntityHistoryStore(IRepository`2<EntityChangeSet, long> changeSetRepository, IUnitOfWorkManager unitOfWorkManager);
    [AsyncStateMachineAttribute("Abp.EntityHistory.EntityHistoryStore/<SaveAsync>d__3")]
public virtual Task SaveAsync(EntityChangeSet changeSet);
    public virtual void Save(EntityChangeSet changeSet);
}
[TableAttribute("AbpLanguages")]
public class Abp.Localization.ApplicationLanguage : FullAuditedEntity {
    public static int MaxNameLength;
    public static int MaxDisplayNameLength;
    public static int MaxIconLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string Name { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("64")]
public string DisplayName { get; public set; }
    [StringLengthAttribute("128")]
public string Icon { get; public set; }
    public bool IsDisabled { get; public set; }
    public ApplicationLanguage(Nullable`1<int> tenantId, string name, string displayName, string icon, bool isDisabled);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Icon();
    [CompilerGeneratedAttribute]
public virtual void set_Icon(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_IsDisabled(bool value);
    public virtual LanguageInfo ToLanguageInfo();
}
public class Abp.Localization.ApplicationLanguageManager : object {
    public static string CacheName;
    private IRepository`1<ApplicationLanguage> _languageRepository;
    private ICacheManager _cacheManager;
    private IUnitOfWorkManager _unitOfWorkManager;
    private ISettingManager _settingManager;
    private ITypedCache`2<int, Dictionary`2<string, ApplicationLanguage>> LanguageListCache { get; }
    public ApplicationLanguageManager(IRepository`1<ApplicationLanguage> languageRepository, ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, ISettingManager settingManager);
    private ITypedCache`2<int, Dictionary`2<string, ApplicationLanguage>> get_LanguageListCache();
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<GetLanguagesAsync>d__8")]
public virtual Task`1<IReadOnlyList`1<ApplicationLanguage>> GetLanguagesAsync(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<GetActiveLanguagesAsync>d__9")]
public virtual Task`1<IReadOnlyList`1<ApplicationLanguage>> GetActiveLanguagesAsync(Nullable`1<int> tenantId);
    public virtual IReadOnlyList`1<ApplicationLanguage> GetLanguages(Nullable`1<int> tenantId);
    public virtual IReadOnlyList`1<ApplicationLanguage> GetActiveLanguages(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<AddAsync>d__12")]
public virtual Task AddAsync(ApplicationLanguage language);
    public virtual void Add(ApplicationLanguage language);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<RemoveAsync>d__14")]
public virtual Task RemoveAsync(Nullable`1<int> tenantId, string languageName);
    public virtual void Remove(Nullable`1<int> tenantId, string languageName);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<UpdateAsync>d__16")]
public virtual Task UpdateAsync(Nullable`1<int> tenantId, ApplicationLanguage language);
    public virtual void Update(Nullable`1<int> tenantId, ApplicationLanguage language);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<GetDefaultLanguageOrNullAsync>d__18")]
public virtual Task`1<ApplicationLanguage> GetDefaultLanguageOrNullAsync(Nullable`1<int> tenantId);
    public virtual ApplicationLanguage GetDefaultLanguageOrNull(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<SetDefaultLanguageAsync>d__20")]
public virtual Task SetDefaultLanguageAsync(Nullable`1<int> tenantId, string languageName);
    public virtual void SetDefaultLanguage(Nullable`1<int> tenantId, string languageName);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<ApplicationLanguage> eventData);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<GetLanguageDictionaryAsync>d__23")]
protected virtual Task`1<Dictionary`2<string, ApplicationLanguage>> GetLanguageDictionaryAsync(Nullable`1<int> tenantId);
    protected virtual Dictionary`2<string, ApplicationLanguage> GetLanguageDictionary(Nullable`1<int> tenantId);
    private Task`1<Dictionary`2<string, ApplicationLanguage>> GetLanguageDictionaryFromCacheAsync(Nullable`1<int> tenantId);
    private Dictionary`2<string, ApplicationLanguage> GetLanguageDictionaryFromCache(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageManager/<GetLanguagesFromDatabaseAsync>d__27")]
protected virtual Task`1<Dictionary`2<string, ApplicationLanguage>> GetLanguagesFromDatabaseAsync(Nullable`1<int> tenantId);
    protected virtual Dictionary`2<string, ApplicationLanguage> GetLanguagesFromDatabase(Nullable`1<int> tenantId);
}
public class Abp.Localization.ApplicationLanguageProvider : object {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private IApplicationLanguageManager _applicationLanguageManager;
    public IAbpSession AbpSession { get; public set; }
    public ApplicationLanguageProvider(IApplicationLanguageManager applicationLanguageManager);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageProvider/<GetLanguagesAsync>d__6")]
public Task`1<IReadOnlyList`1<LanguageInfo>> GetLanguagesAsync();
    public sealed virtual IReadOnlyList`1<LanguageInfo> GetLanguages();
    public sealed virtual IReadOnlyList`1<LanguageInfo> GetActiveLanguages();
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageProvider/<SetDefaultLanguageAsync>d__9")]
private Task SetDefaultLanguageAsync(List`1<LanguageInfo> languageInfos);
    private void SetDefaultLanguage(List`1<LanguageInfo> languageInfos);
}
[TableAttribute("AbpLanguageTexts")]
public class Abp.Localization.ApplicationLanguageText : AuditedEntity`1<long> {
    public static int MaxSourceNameLength;
    public static int MaxKeyLength;
    public static int MaxValueLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string LanguageName { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string Source { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string Key { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("67108864")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_LanguageName();
    [CompilerGeneratedAttribute]
public virtual void set_LanguageName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Source();
    [CompilerGeneratedAttribute]
public virtual void set_Source(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
}
public class Abp.Localization.ApplicationLanguageTextManager : object {
    private ILocalizationManager _localizationManager;
    private IRepository`2<ApplicationLanguageText, long> _applicationTextRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public ApplicationLanguageTextManager(ILocalizationManager localizationManager, IRepository`2<ApplicationLanguageText, long> applicationTextRepository, IUnitOfWorkManager unitOfWorkManager);
    public sealed virtual string GetStringOrNull(Nullable`1<int> tenantId, string sourceName, CultureInfo culture, string key, bool tryDefaults);
    public sealed virtual List`1<string> GetStringsOrNull(Nullable`1<int> tenantId, string sourceName, CultureInfo culture, List`1<string> keys, bool tryDefaults);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageTextManager/<UpdateStringAsync>d__6")]
public virtual Task UpdateStringAsync(Nullable`1<int> tenantId, string sourceName, CultureInfo culture, string key, string value);
    [AsyncStateMachineAttribute("Abp.Localization.ApplicationLanguageTextManager/<DeleteStringAsync>d__7")]
public virtual Task DeleteStringAsync(int tenantId, string sourceName, CultureInfo culture, string key);
}
[DefaultMemberAttribute("Item")]
internal class Abp.Localization.EmptyDictionary : object {
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    public CultureInfo CultureInfo { get; private set; }
    public string Item { get; public set; }
    public EmptyDictionary(CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
private void set_CultureInfo(CultureInfo value);
    public sealed virtual string TryGetKey(string value);
    public sealed virtual LocalizedString GetOrNull(string name);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetStringsOrNull(List`1<string> names);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings();
    public sealed virtual string get_Item(string name);
    public sealed virtual void set_Item(string name, string value);
}
public interface Abp.Localization.IApplicationLanguageManager {
    public abstract virtual Task`1<IReadOnlyList`1<ApplicationLanguage>> GetLanguagesAsync(Nullable`1<int> tenantId);
    public abstract virtual Task`1<IReadOnlyList`1<ApplicationLanguage>> GetActiveLanguagesAsync(Nullable`1<int> tenantId);
    public abstract virtual IReadOnlyList`1<ApplicationLanguage> GetLanguages(Nullable`1<int> tenantId);
    public abstract virtual IReadOnlyList`1<ApplicationLanguage> GetActiveLanguages(Nullable`1<int> tenantId);
    public abstract virtual Task AddAsync(ApplicationLanguage language);
    public abstract virtual void Add(ApplicationLanguage language);
    public abstract virtual Task RemoveAsync(Nullable`1<int> tenantId, string languageName);
    public abstract virtual void Remove(Nullable`1<int> tenantId, string languageName);
    public abstract virtual Task UpdateAsync(Nullable`1<int> tenantId, ApplicationLanguage language);
    public abstract virtual void Update(Nullable`1<int> tenantId, ApplicationLanguage language);
    public abstract virtual Task`1<ApplicationLanguage> GetDefaultLanguageOrNullAsync(Nullable`1<int> tenantId);
    public abstract virtual ApplicationLanguage GetDefaultLanguageOrNull(Nullable`1<int> tenantId);
    public abstract virtual Task SetDefaultLanguageAsync(Nullable`1<int> tenantId, string languageName);
    public abstract virtual void SetDefaultLanguage(Nullable`1<int> tenantId, string languageName);
}
public interface Abp.Localization.IApplicationLanguageTextManager {
    public abstract virtual string GetStringOrNull(Nullable`1<int> tenantId, string sourceName, CultureInfo culture, string key, bool tryDefaults);
    public abstract virtual List`1<string> GetStringsOrNull(Nullable`1<int> tenantId, string sourceName, CultureInfo culture, List`1<string> keys, bool tryDefaults);
    public abstract virtual Task UpdateStringAsync(Nullable`1<int> tenantId, string sourceName, CultureInfo culture, string key, string value);
    public abstract virtual Task DeleteStringAsync(int tenantId, string sourceName, CultureInfo culture, string key);
}
public interface Abp.Localization.IMultiTenantLocalizationDictionary {
    public abstract virtual string TryGetKey(Nullable`1<int> tenantId, string value);
    public abstract virtual LocalizedString GetOrNull(Nullable`1<int> tenantId, string name);
    public abstract virtual IReadOnlyList`1<LocalizedString> GetStringsOrNull(Nullable`1<int> tenantId, List`1<string> names);
    public abstract virtual IReadOnlyList`1<LocalizedString> GetAllStrings(Nullable`1<int> tenantId);
}
public interface Abp.Localization.IMultiTenantLocalizationSource {
    public abstract virtual string FindKeyOrNull(Nullable`1<int> tenantId, string value, CultureInfo culture, bool tryDefaults);
    public abstract virtual string GetString(Nullable`1<int> tenantId, string name, CultureInfo culture);
    public abstract virtual string GetStringOrNull(Nullable`1<int> tenantId, string name, CultureInfo culture, bool tryDefaults);
    public abstract virtual List`1<string> GetStrings(Nullable`1<int> tenantId, List`1<string> names, CultureInfo culture);
    public abstract virtual List`1<string> GetStringsOrNull(Nullable`1<int> tenantId, List`1<string> names, CultureInfo culture, bool tryDefaults);
}
[DefaultMemberAttribute("Item")]
public class Abp.Localization.MultiTenantLocalizationDictionary : object {
    private string _sourceName;
    private ILocalizationDictionary _internalDictionary;
    private IRepository`2<ApplicationLanguageText, long> _customLocalizationRepository;
    private ICacheManager _cacheManager;
    private IAbpSession _session;
    private IUnitOfWorkManager _unitOfWorkManager;
    public CultureInfo CultureInfo { get; }
    public string Item { get; public set; }
    public MultiTenantLocalizationDictionary(string sourceName, ILocalizationDictionary internalDictionary, IRepository`2<ApplicationLanguageText, long> customLocalizationRepository, ICacheManager cacheManager, IAbpSession session, IUnitOfWorkManager unitOfWorkManager);
    public sealed virtual CultureInfo get_CultureInfo();
    public sealed virtual string get_Item(string name);
    public sealed virtual void set_Item(string name, string value);
    public sealed virtual string TryGetKey(Nullable`1<int> tenantId, string value);
    public sealed virtual string TryGetKey(string value);
    public sealed virtual LocalizedString GetOrNull(string name);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetStringsOrNull(List`1<string> names);
    public sealed virtual LocalizedString GetOrNull(Nullable`1<int> tenantId, string name);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetStringsOrNull(Nullable`1<int> tenantId, List`1<string> names);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings();
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings(Nullable`1<int> tenantId);
    private string CalculateCacheKey(Nullable`1<int> tenantId);
    protected virtual Dictionary`2<string, string> GetAllValuesFromDatabase(Nullable`1<int> tenantId);
}
public class Abp.Localization.MultiTenantLocalizationDictionaryCacheCleaner : object {
    private ICacheManager _cacheManager;
    public MultiTenantLocalizationDictionaryCacheCleaner(ICacheManager cacheManager);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<ApplicationLanguageText> eventData);
}
[ExtensionAttribute]
public static class Abp.Localization.MultiTenantLocalizationDictionaryCacheHelper : object {
    public static string CacheName;
    [ExtensionAttribute]
public static ITypedCache`2<string, Dictionary`2<string, string>> GetMultiTenantLocalizationDictionaryCache(ICacheManager cacheManager);
    public static string CalculateCacheKey(Nullable`1<int> tenantId, string sourceName, string languageName);
}
public class Abp.Localization.MultiTenantLocalizationDictionaryProvider : object {
    private ConcurrentDictionary`2<string, ILocalizationDictionary> _dictionaries;
    private string _sourceName;
    private ILocalizationDictionaryProvider _internalProvider;
    private IIocManager _iocManager;
    private ILanguageManager _languageManager;
    public ILocalizationDictionary DefaultDictionary { get; }
    public IDictionary`2<string, ILocalizationDictionary> Dictionaries { get; }
    public MultiTenantLocalizationDictionaryProvider(ILocalizationDictionaryProvider internalProvider, IIocManager iocManager);
    public sealed virtual ILocalizationDictionary get_DefaultDictionary();
    public sealed virtual IDictionary`2<string, ILocalizationDictionary> get_Dictionaries();
    public sealed virtual void Initialize(string sourceName);
    protected virtual IDictionary`2<string, ILocalizationDictionary> GetDictionaries();
    protected virtual ILocalizationDictionary GetDefaultDictionary();
    protected virtual IMultiTenantLocalizationDictionary CreateLocalizationDictionary(LanguageInfo language);
    public virtual void Extend(ILocalizationDictionary dictionary);
}
public class Abp.Localization.MultiTenantLocalizationSource : DictionaryBasedLocalizationSource {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public MultiTenantLocalizationDictionaryProvider DictionaryProvider { get; }
    public ILogger Logger { get; public set; }
    public MultiTenantLocalizationSource(string name, MultiTenantLocalizationDictionaryProvider dictionaryProvider);
    public MultiTenantLocalizationDictionaryProvider get_DictionaryProvider();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public virtual void Initialize(ILocalizationConfiguration configuration, IIocResolver iocResolver);
    public sealed virtual string FindKeyOrNull(Nullable`1<int> tenantId, string value, CultureInfo culture, bool tryDefaults);
    public sealed virtual string GetString(Nullable`1<int> tenantId, string name, CultureInfo culture);
    public sealed virtual string GetStringOrNull(Nullable`1<int> tenantId, string name, CultureInfo culture, bool tryDefaults);
    public sealed virtual List`1<string> GetStrings(Nullable`1<int> tenantId, List`1<string> names, CultureInfo culture);
    public sealed virtual List`1<string> GetStringsOrNull(Nullable`1<int> tenantId, List`1<string> names, CultureInfo culture, bool tryDefaults);
    public virtual void Extend(ILocalizationDictionary dictionary);
    private static string GetBaseCultureName(string cultureName);
}
public abstract class Abp.MultiTenancy.AbpTenant`1 : AbpTenantBase {
    [CompilerGeneratedAttribute]
private Edition <Edition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EditionId>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <LastModifierUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <DeleterUser>k__BackingField;
    public Edition Edition { get; public set; }
    public Nullable`1<int> EditionId { get; public set; }
    public TUser CreatorUser { get; public set; }
    public TUser LastModifierUser { get; public set; }
    public TUser DeleterUser { get; public set; }
    protected AbpTenant`1(string tenancyName, string name);
    [CompilerGeneratedAttribute]
public virtual Edition get_Edition();
    [CompilerGeneratedAttribute]
public virtual void set_Edition(Edition value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_EditionId();
    [CompilerGeneratedAttribute]
public virtual void set_EditionId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_LastModifierUser();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_DeleterUser();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUser(TUser value);
}
[TableAttribute("AbpTenants")]
[MultiTenancySideAttribute]
public abstract class Abp.MultiTenancy.AbpTenantBase : FullAuditedEntity`1<int> {
    public static int MaxTenancyNameLength;
    public static int MaxConnectionStringLength;
    public static string DefaultTenantName;
    public static string TenancyNameRegex;
    public static int MaxNameLength;
    [CompilerGeneratedAttribute]
private string <TenancyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [RequiredAttribute]
[StringLengthAttribute("64")]
public string TenancyName { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string Name { get; public set; }
    [StringLengthAttribute("1024")]
public string ConnectionString { get; public set; }
    public bool IsActive { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_TenancyName();
    [CompilerGeneratedAttribute]
public virtual void set_TenancyName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public virtual void set_IsActive(bool value);
}
public class Abp.MultiTenancy.AbpTenantManager`2 : object {
    [CompilerGeneratedAttribute]
private AbpEditionManager <EditionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICacheManager <CacheManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureManager <FeatureManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`1<TTenant> <TenantRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`2<TenantFeatureSetting, long> <TenantFeatureRepository>k__BackingField;
    private IAbpZeroFeatureValueStore _featureValueStore;
    public AbpEditionManager EditionManager { get; public set; }
    public ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    public ICacheManager CacheManager { get; public set; }
    public IFeatureManager FeatureManager { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    protected IRepository`1<TTenant> TenantRepository { get; protected set; }
    protected IRepository`2<TenantFeatureSetting, long> TenantFeatureRepository { get; protected set; }
    public IQueryable`1<TTenant> Tenants { get; }
    public AbpTenantManager`2(IRepository`1<TTenant> tenantRepository, IRepository`2<TenantFeatureSetting, long> tenantFeatureRepository, AbpEditionManager editionManager, IAbpZeroFeatureValueStore featureValueStore);
    [CompilerGeneratedAttribute]
public AbpEditionManager get_EditionManager();
    [CompilerGeneratedAttribute]
public void set_EditionManager(AbpEditionManager value);
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    [CompilerGeneratedAttribute]
public ICacheManager get_CacheManager();
    [CompilerGeneratedAttribute]
public void set_CacheManager(ICacheManager value);
    [CompilerGeneratedAttribute]
public IFeatureManager get_FeatureManager();
    [CompilerGeneratedAttribute]
public void set_FeatureManager(IFeatureManager value);
    [CompilerGeneratedAttribute]
public IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    [CompilerGeneratedAttribute]
protected IRepository`1<TTenant> get_TenantRepository();
    [CompilerGeneratedAttribute]
protected void set_TenantRepository(IRepository`1<TTenant> value);
    [CompilerGeneratedAttribute]
protected IRepository`2<TenantFeatureSetting, long> get_TenantFeatureRepository();
    [CompilerGeneratedAttribute]
protected void set_TenantFeatureRepository(IRepository`2<TenantFeatureSetting, long> value);
    public virtual IQueryable`1<TTenant> get_Tenants();
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<CreateAsync>d__36")]
public virtual Task CreateAsync(TTenant tenant);
    public virtual void Create(TTenant tenant);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<UpdateAsync>d__38")]
public virtual Task UpdateAsync(TTenant tenant);
    public virtual void Update(TTenant tenant);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<FindByIdAsync>d__40")]
public virtual Task`1<TTenant> FindByIdAsync(int id);
    public virtual TTenant FindById(int id);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<GetByIdAsync>d__42")]
public virtual Task`1<TTenant> GetByIdAsync(int id);
    public virtual TTenant GetById(int id);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<FindByTenancyNameAsync>d__44")]
public virtual Task`1<TTenant> FindByTenancyNameAsync(string tenancyName);
    public virtual TTenant FindByTenancyName(string tenancyName);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<DeleteAsync>d__46")]
public virtual Task DeleteAsync(TTenant tenant);
    public virtual void Delete(TTenant tenant);
    public Task`1<string> GetFeatureValueOrNullAsync(int tenantId, string featureName);
    public string GetFeatureValueOrNull(int tenantId, string featureName);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<GetFeatureValuesAsync>d__50")]
public virtual Task`1<IReadOnlyList`1<NameValue>> GetFeatureValuesAsync(int tenantId);
    public virtual IReadOnlyList`1<NameValue> GetFeatureValues(int tenantId);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<SetFeatureValuesAsync>d__52")]
public virtual Task SetFeatureValuesAsync(int tenantId, NameValue[] values);
    public virtual void SetFeatureValues(int tenantId, NameValue[] values);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<SetFeatureValueAsync>d__54")]
public virtual Task SetFeatureValueAsync(int tenantId, string featureName, string value);
    public virtual void SetFeatureValue(int tenantId, string featureName, string value);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<SetFeatureValueAsync>d__56")]
public virtual Task SetFeatureValueAsync(TTenant tenant, string featureName, string value);
    public virtual void SetFeatureValue(TTenant tenant, string featureName, string value);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<ResetAllFeaturesAsync>d__58")]
public virtual Task ResetAllFeaturesAsync(int tenantId);
    public virtual void ResetAllFeatures(int tenantId);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.AbpTenantManager`2/<ValidateTenantAsync>d__60")]
protected virtual Task ValidateTenantAsync(TTenant tenant);
    protected virtual void ValidateTenant(TTenant tenant);
    protected virtual Task ValidateTenancyNameAsync(string tenancyName);
    protected virtual void ValidateTenancyName(string tenancyName);
    protected virtual string L(string name);
    protected virtual string L(string name, CultureInfo cultureInfo);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<TTenant> eventData);
    public virtual void HandleEvent(EntityDeletedEventData`1<Edition> eventData);
}
public class Abp.MultiTenancy.DbPerTenantConnectionStringResolveArgs : ConnectionStringResolveArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public DbPerTenantConnectionStringResolveArgs(Nullable`1<int> tenantId, Nullable`1<MultiTenancySides> multiTenancySide);
    public DbPerTenantConnectionStringResolveArgs(Nullable`1<int> tenantId, ConnectionStringResolveArgs baseArgs);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
}
public interface Abp.MultiTenancy.IAbpZeroDbMigrator {
    public abstract virtual void CreateOrMigrateForHost();
    public abstract virtual void CreateOrMigrateForTenant(AbpTenantBase tenant);
}
public interface Abp.MultiTenancy.IDbPerTenantConnectionStringResolver {
    public abstract virtual string GetNameOrConnectionString(DbPerTenantConnectionStringResolveArgs args);
    public abstract virtual Task`1<string> GetNameOrConnectionStringAsync(DbPerTenantConnectionStringResolveArgs args);
}
public interface Abp.MultiTenancy.ITenantCache {
    public abstract virtual TenantCacheItem Get(int tenantId);
    public abstract virtual TenantCacheItem Get(string tenancyName);
    public abstract virtual TenantCacheItem GetOrNull(string tenancyName);
    public abstract virtual TenantCacheItem GetOrNull(int tenantId);
    public abstract virtual Task`1<TenantCacheItem> GetAsync(int tenantId);
    public abstract virtual Task`1<TenantCacheItem> GetAsync(string tenancyName);
    public abstract virtual Task`1<TenantCacheItem> GetOrNullAsync(string tenancyName);
    public abstract virtual Task`1<TenantCacheItem> GetOrNullAsync(int tenantId);
}
public class Abp.MultiTenancy.TenantCache`2 : object {
    private ICacheManager _cacheManager;
    private IRepository`1<TTenant> _tenantRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public TenantCache`2(ICacheManager cacheManager, IRepository`1<TTenant> tenantRepository, IUnitOfWorkManager unitOfWorkManager);
    public virtual TenantCacheItem Get(int tenantId);
    public virtual TenantCacheItem Get(string tenancyName);
    public virtual TenantCacheItem GetOrNull(string tenancyName);
    public sealed virtual TenantCacheItem GetOrNull(int tenantId);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.TenantCache`2/<GetAsync>d__8")]
public virtual Task`1<TenantCacheItem> GetAsync(int tenantId);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.TenantCache`2/<GetAsync>d__9")]
public virtual Task`1<TenantCacheItem> GetAsync(string tenancyName);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.TenantCache`2/<GetOrNullAsync>d__10")]
public virtual Task`1<TenantCacheItem> GetOrNullAsync(string tenancyName);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.TenantCache`2/<GetOrNullAsync>d__11")]
public virtual Task`1<TenantCacheItem> GetOrNullAsync(int tenantId);
    protected virtual TenantCacheItem CreateTenantCacheItem(TTenant tenant);
    protected virtual TTenant GetTenantOrNull(int tenantId);
    protected virtual TTenant GetTenantOrNull(string tenancyName);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.TenantCache`2/<GetTenantOrNullAsync>d__15")]
protected virtual Task`1<TTenant> GetTenantOrNullAsync(int tenantId);
    [AsyncStateMachineAttribute("Abp.MultiTenancy.TenantCache`2/<GetTenantOrNullAsync>d__16")]
protected virtual Task`1<TTenant> GetTenantOrNullAsync(string tenancyName);
    public virtual void HandleEvent(EntityChangedEventData`1<TTenant> eventData);
}
public class Abp.MultiTenancy.TenantCacheItem : object {
    public static string CacheName;
    public static string ByNameCacheName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenancyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EditionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomData>k__BackingField;
    public int Id { get; public set; }
    public string Name { get; public set; }
    public string TenancyName { get; public set; }
    public string ConnectionString { get; public set; }
    public Nullable`1<int> EditionId { get; public set; }
    public bool IsActive { get; public set; }
    public object CustomData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TenancyName();
    [CompilerGeneratedAttribute]
public void set_TenancyName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EditionId();
    [CompilerGeneratedAttribute]
public void set_EditionId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public object get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(object value);
}
[ExtensionAttribute]
public static class Abp.MultiTenancy.TenantCacheManagerExtensions : object {
    [ExtensionAttribute]
public static ITypedCache`2<int, TenantCacheItem> GetTenantCache(ICacheManager cacheManager);
    [ExtensionAttribute]
public static ITypedCache`2<string, Nullable`1<int>> GetTenantByNameCache(ICacheManager cacheManager);
}
public class Abp.MultiTenancy.TenantFeatureCacheItem : object {
    public static string CacheStoreName;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EditionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <FeatureValues>k__BackingField;
    public Nullable`1<int> EditionId { get; public set; }
    public IDictionary`2<string, string> FeatureValues { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EditionId();
    [CompilerGeneratedAttribute]
public void set_EditionId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_FeatureValues();
    [CompilerGeneratedAttribute]
public void set_FeatureValues(IDictionary`2<string, string> value);
}
public class Abp.MultiTenancy.TenantFeatureCacheItemInvalidator : object {
    private ICacheManager _cacheManager;
    public TenantFeatureCacheItemInvalidator(ICacheManager cacheManager);
    public sealed virtual void HandleEvent(EntityChangedEventData`1<TenantFeatureSetting> eventData);
}
public class Abp.MultiTenancy.TenantFeatureSetting : FeatureSetting {
    public TenantFeatureSetting(int tenantId, string name, string value);
}
public class Abp.MultiTenancy.TenantStore : object {
    private ITenantCache _tenantCache;
    public TenantStore(ITenantCache tenantCache);
    public sealed virtual TenantInfo Find(int tenantId);
    public sealed virtual TenantInfo Find(string tenancyName);
}
public class Abp.Notifications.NotificationStore : object {
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    private IRepository`2<NotificationInfo, Guid> _notificationRepository;
    private IRepository`2<TenantNotificationInfo, Guid> _tenantNotificationRepository;
    private IRepository`2<UserNotificationInfo, Guid> _userNotificationRepository;
    private IRepository`2<NotificationSubscriptionInfo, Guid> _notificationSubscriptionRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IAsyncQueryableExecuter _asyncQueryableExecuter;
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    public NotificationStore(IRepository`2<NotificationInfo, Guid> notificationRepository, IRepository`2<TenantNotificationInfo, Guid> tenantNotificationRepository, IRepository`2<UserNotificationInfo, Guid> userNotificationRepository, IRepository`2<NotificationSubscriptionInfo, Guid> notificationSubscriptionRepository, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<InsertSubscriptionAsync>d__11")]
public virtual Task InsertSubscriptionAsync(NotificationSubscriptionInfo subscription);
    public virtual void InsertSubscription(NotificationSubscriptionInfo subscription);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<DeleteSubscriptionAsync>d__13")]
public virtual Task DeleteSubscriptionAsync(UserIdentifier user, string notificationName, string entityTypeName, string entityId);
    public virtual void DeleteSubscription(UserIdentifier user, string notificationName, string entityTypeName, string entityId);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<InsertNotificationAsync>d__15")]
public virtual Task InsertNotificationAsync(NotificationInfo notification);
    public virtual void InsertNotification(NotificationInfo notification);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetNotificationOrNullAsync>d__17")]
public virtual Task`1<NotificationInfo> GetNotificationOrNullAsync(Guid notificationId);
    public virtual NotificationInfo GetNotificationOrNull(Guid notificationId);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<InsertUserNotificationAsync>d__19")]
public virtual Task InsertUserNotificationAsync(UserNotificationInfo userNotification);
    public virtual void InsertUserNotification(UserNotificationInfo userNotification);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetSubscriptionsAsync>d__21")]
public virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetSubscriptionsAsync>d__23")]
public virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(Nullable`1[] tenantIds, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(Nullable`1[] tenantIds, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetSubscriptionsAsync>d__25")]
public virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(UserIdentifier user);
    public virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetSubscriptionsAsync>d__27")]
protected virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(Nullable`1<int> tenantId, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    protected virtual ExpressionStarter`1<NotificationSubscriptionInfo> GetNotificationSubscriptionPredicate(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    protected virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(Nullable`1<int> tenantId, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<IsSubscribedAsync>d__30")]
public virtual Task`1<bool> IsSubscribedAsync(UserIdentifier user, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public virtual bool IsSubscribed(UserIdentifier user, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<UpdateUserNotificationStateAsync>d__32")]
public virtual Task UpdateUserNotificationStateAsync(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public virtual void UpdateUserNotificationState(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<UpdateAllUserNotificationStatesAsync>d__34")]
public virtual Task UpdateAllUserNotificationStatesAsync(UserIdentifier user, UserNotificationState state);
    public virtual void UpdateAllUserNotificationStates(UserIdentifier user, UserNotificationState state);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<DeleteUserNotificationAsync>d__36")]
public virtual Task DeleteUserNotificationAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public virtual void DeleteUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<DeleteAllUserNotificationsAsync>d__38")]
public virtual Task DeleteAllUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public virtual void DeleteAllUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    private Expression`1<Func`2<UserNotificationInfo, bool>> CreateNotificationFilterPredicate(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetUserNotificationsWithNotificationsAsync>d__41")]
public virtual Task`1<List`1<UserNotificationInfoWithNotificationInfo>> GetUserNotificationsWithNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public virtual List`1<UserNotificationInfoWithNotificationInfo> GetUserNotificationsWithNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetUserNotificationCountAsync>d__43")]
public virtual Task`1<int> GetUserNotificationCountAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public virtual int GetUserNotificationCount(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetUserNotificationWithNotificationOrNullAsync>d__45")]
public virtual Task`1<UserNotificationInfoWithNotificationInfo> GetUserNotificationWithNotificationOrNullAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public virtual UserNotificationInfoWithNotificationInfo GetUserNotificationWithNotificationOrNull(Nullable`1<int> tenantId, Guid userNotificationId);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<InsertTenantNotificationAsync>d__47")]
public virtual Task InsertTenantNotificationAsync(TenantNotificationInfo tenantNotificationInfo);
    public virtual void InsertTenantNotification(TenantNotificationInfo tenantNotificationInfo);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<DeleteNotificationAsync>d__49")]
public virtual Task DeleteNotificationAsync(NotificationInfo notification);
    public virtual void DeleteNotification(NotificationInfo notification);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationStore/<GetNotificationsPublishedByUserAsync>d__51")]
public sealed virtual Task`1<List`1<GetNotificationsCreatedByUserOutput>> GetNotificationsPublishedByUserAsync(UserIdentifier user, string notificationName, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
}
public class Abp.Notifications.NotificationSubscriptionSynchronizer : object {
    private IRepository`2<NotificationSubscriptionInfo, Guid> _notificationSubscriptionRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public NotificationSubscriptionSynchronizer(IRepository`2<NotificationSubscriptionInfo, Guid> notificationSubscriptionRepository, IUnitOfWorkManager unitOfWorkManager);
    public virtual void HandleEvent(EntityDeletedEventData`1<AbpUserBase> eventData);
}
public interface Abp.Organizations.IMayHaveOrganizationUnit {
    public Nullable`1<long> OrganizationUnitId { get; public set; }
    public abstract virtual Nullable`1<long> get_OrganizationUnitId();
    public abstract virtual void set_OrganizationUnitId(Nullable`1<long> value);
}
public interface Abp.Organizations.IMustHaveOrganizationUnit {
    public long OrganizationUnitId { get; public set; }
    public abstract virtual long get_OrganizationUnitId();
    public abstract virtual void set_OrganizationUnitId(long value);
}
public interface Abp.Organizations.IOrganizationUnitSettings {
    public int MaxUserMembershipCount { get; }
    public abstract virtual int get_MaxUserMembershipCount();
    public abstract virtual Task`1<int> GetMaxUserMembershipCountAsync(Nullable`1<int> tenantId);
    public abstract virtual int GetMaxUserMembershipCount(Nullable`1<int> tenantId);
    public abstract virtual Task SetMaxUserMembershipCountAsync(Nullable`1<int> tenantId, int value);
    public abstract virtual void SetMaxUserMembershipCount(Nullable`1<int> tenantId, int value);
}
[TableAttribute("AbpOrganizationUnits")]
public class Abp.Organizations.OrganizationUnit : FullAuditedEntity`1<long> {
    public static int MaxDisplayNameLength;
    public static int MaxDepth;
    public static int CodeUnitLength;
    public static int MaxCodeLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private OrganizationUnit <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<OrganizationUnit> <Children>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [ForeignKeyAttribute("ParentId")]
public OrganizationUnit Parent { get; public set; }
    public Nullable`1<long> ParentId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("95")]
public string Code { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("128")]
public string DisplayName { get; public set; }
    public ICollection`1<OrganizationUnit> Children { get; public set; }
    public OrganizationUnit(Nullable`1<int> tenantId, string displayName, Nullable`1<long> parentId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual OrganizationUnit get_Parent();
    [CompilerGeneratedAttribute]
public virtual void set_Parent(OrganizationUnit value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ParentId();
    [CompilerGeneratedAttribute]
public virtual void set_ParentId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_Code();
    [CompilerGeneratedAttribute]
public virtual void set_Code(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<OrganizationUnit> get_Children();
    [CompilerGeneratedAttribute]
public virtual void set_Children(ICollection`1<OrganizationUnit> value);
    public static string CreateCode(Int32[] numbers);
    public static string AppendCode(string parentCode, string childCode);
    public static string GetRelativeCode(string code, string parentCode);
    public static string CalculateNextCode(string code);
    public static string GetLastUnitCode(string code);
    public static string GetParentCode(string code);
}
public class Abp.Organizations.OrganizationUnitManager : DomainService {
    [CompilerGeneratedAttribute]
private IRepository`2<OrganizationUnit, long> <OrganizationUnitRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    protected IRepository`2<OrganizationUnit, long> OrganizationUnitRepository { get; private set; }
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    public OrganizationUnitManager(IRepository`2<OrganizationUnit, long> organizationUnitRepository);
    [CompilerGeneratedAttribute]
protected IRepository`2<OrganizationUnit, long> get_OrganizationUnitRepository();
    [CompilerGeneratedAttribute]
private void set_OrganizationUnitRepository(IRepository`2<OrganizationUnit, long> value);
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<CreateAsync>d__9")]
public virtual Task CreateAsync(OrganizationUnit organizationUnit);
    public virtual void Create(OrganizationUnit organizationUnit);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<UpdateAsync>d__11")]
public virtual Task UpdateAsync(OrganizationUnit organizationUnit);
    public virtual void Update(OrganizationUnit organizationUnit);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<GetNextChildCodeAsync>d__13")]
public virtual Task`1<string> GetNextChildCodeAsync(Nullable`1<long> parentId);
    public virtual string GetNextChildCode(Nullable`1<long> parentId);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<GetLastChildOrNullAsync>d__15")]
public virtual Task`1<OrganizationUnit> GetLastChildOrNullAsync(Nullable`1<long> parentId);
    public virtual OrganizationUnit GetLastChildOrNull(Nullable`1<long> parentId);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<GetCodeAsync>d__17")]
public virtual Task`1<string> GetCodeAsync(long id);
    public virtual string GetCode(long id);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<DeleteAsync>d__19")]
public virtual Task DeleteAsync(long id);
    public virtual void Delete(long id);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<MoveAsync>d__21")]
public virtual Task MoveAsync(long id, Nullable`1<long> parentId);
    public virtual void Move(long id, Nullable`1<long> parentId);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<FindChildrenAsync>d__23")]
public Task`1<List`1<OrganizationUnit>> FindChildrenAsync(Nullable`1<long> parentId, bool recursive);
    public List`1<OrganizationUnit> FindChildren(Nullable`1<long> parentId, bool recursive);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitManager/<ValidateOrganizationUnitAsync>d__25")]
protected virtual Task ValidateOrganizationUnitAsync(OrganizationUnit organizationUnit);
    protected virtual void ValidateOrganizationUnit(OrganizationUnit organizationUnit);
}
[TableAttribute("AbpOrganizationUnitRoles")]
public class Abp.Organizations.OrganizationUnitRole : CreationAuditedEntity`1<long> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RoleId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OrganizationUnitId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public int RoleId { get; public set; }
    public long OrganizationUnitId { get; public set; }
    public bool IsDeleted { get; public set; }
    public OrganizationUnitRole(Nullable`1<int> tenantId, int roleId, long organizationUnitId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual int get_RoleId();
    [CompilerGeneratedAttribute]
public virtual void set_RoleId(int value);
    [CompilerGeneratedAttribute]
public virtual long get_OrganizationUnitId();
    [CompilerGeneratedAttribute]
public virtual void set_OrganizationUnitId(long value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
}
public class Abp.Organizations.OrganizationUnitRoleRemover : object {
    private IRepository`2<OrganizationUnitRole, long> _organizationUnitRoleRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public OrganizationUnitRoleRemover(IRepository`2<OrganizationUnitRole, long> organizationUnitRoleRepository, IUnitOfWorkManager unitOfWorkManager);
    public virtual void HandleEvent(EntityDeletedEventData`1<AbpRoleBase> eventData);
}
public class Abp.Organizations.OrganizationUnitSettings : object {
    private ISettingManager _settingManager;
    public int MaxUserMembershipCount { get; }
    public OrganizationUnitSettings(ISettingManager settingManager);
    public sealed virtual int get_MaxUserMembershipCount();
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitSettings/<GetMaxUserMembershipCountAsync>d__4")]
public sealed virtual Task`1<int> GetMaxUserMembershipCountAsync(Nullable`1<int> tenantId);
    public sealed virtual int GetMaxUserMembershipCount(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Organizations.OrganizationUnitSettings/<SetMaxUserMembershipCountAsync>d__6")]
public sealed virtual Task SetMaxUserMembershipCountAsync(Nullable`1<int> tenantId, int value);
    public sealed virtual void SetMaxUserMembershipCount(Nullable`1<int> tenantId, int value);
}
[ExtensionAttribute]
public static class Abp.Runtime.Caching.AbpZeroCacheManagerExtensions : object {
    [ExtensionAttribute]
public static ITypedCache`2<string, UserPermissionCacheItem> GetUserPermissionCache(ICacheManager cacheManager);
    [ExtensionAttribute]
public static ITypedCache`2<string, RolePermissionCacheItem> GetRolePermissionCache(ICacheManager cacheManager);
    [ExtensionAttribute]
public static ITypedCache`2<int, TenantFeatureCacheItem> GetTenantFeatureCache(ICacheManager cacheManager);
    [ExtensionAttribute]
public static ITypedCache`2<int, EditionfeatureCacheItem> GetEditionFeatureCache(ICacheManager cacheManager);
}
[ExtensionAttribute]
public static class Abp.Runtime.Session.AbpSessionExtensions : object {
    [ExtensionAttribute]
public static bool IsUser(IAbpSession session, AbpUserBase user);
}
public class Abp.Webhooks.WebhookEventStore : object {
    private IRepository`2<WebhookEvent, Guid> _webhookRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public WebhookEventStore(IRepository`2<WebhookEvent, Guid> webhookRepository, IUnitOfWorkManager unitOfWorkManager);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookEventStore/<InsertAndGetIdAsync>d__3")]
public virtual Task`1<Guid> InsertAndGetIdAsync(WebhookEvent webhookEvent);
    public virtual Guid InsertAndGetId(WebhookEvent webhookEvent);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookEventStore/<GetAsync>d__5")]
public virtual Task`1<WebhookEvent> GetAsync(Nullable`1<int> tenantId, Guid id);
    public virtual WebhookEvent Get(Nullable`1<int> tenantId, Guid id);
}
public class Abp.Webhooks.WebhookSendAttemptStore : object {
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    private IRepository`2<WebhookSendAttempt, Guid> _webhookSendAttemptRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    public WebhookSendAttemptStore(IRepository`2<WebhookSendAttempt, Guid> webhookSendAttemptRepository, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<InsertAsync>d__7")]
public virtual Task InsertAsync(WebhookSendAttempt webhookSendAttempt);
    public virtual void Insert(WebhookSendAttempt webhookSendAttempt);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<UpdateAsync>d__9")]
public virtual Task UpdateAsync(WebhookSendAttempt webhookSendAttempt);
    public virtual void Update(WebhookSendAttempt webhookSendAttempt);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<DeleteAsync>d__11")]
public virtual Task DeleteAsync(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual void Delete(WebhookSendAttempt webhookSendAttempt);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<GetAsync>d__13")]
public virtual Task`1<WebhookSendAttempt> GetAsync(Nullable`1<int> tenantId, Guid id);
    public virtual WebhookSendAttempt Get(Nullable`1<int> tenantId, Guid id);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<GetSendAttemptCountAsync>d__15")]
public virtual Task`1<int> GetSendAttemptCountAsync(Nullable`1<int> tenantId, Guid webhookEventId, Guid webhookSubscriptionId);
    public virtual int GetSendAttemptCount(Nullable`1<int> tenantId, Guid webhookId, Guid webhookSubscriptionId);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<HasXConsecutiveFailAsync>d__17")]
public virtual Task`1<bool> HasXConsecutiveFailAsync(Nullable`1<int> tenantId, Guid subscriptionId, int failCount);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<GetAllSendAttemptsBySubscriptionAsPagedListAsync>d__18")]
public virtual Task`1<IPagedResult`1<WebhookSendAttempt>> GetAllSendAttemptsBySubscriptionAsPagedListAsync(Nullable`1<int> tenantId, Guid subscriptionId, int maxResultCount, int skipCount);
    public virtual IPagedResult`1<WebhookSendAttempt> GetAllSendAttemptsBySubscriptionAsPagedList(Nullable`1<int> tenantId, Guid subscriptionId, int maxResultCount, int skipCount);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSendAttemptStore/<GetAllSendAttemptsByWebhookEventIdAsync>d__20")]
public virtual Task`1<List`1<WebhookSendAttempt>> GetAllSendAttemptsByWebhookEventIdAsync(Nullable`1<int> tenantId, Guid webhookEventId);
    public virtual List`1<WebhookSendAttempt> GetAllSendAttemptsByWebhookEventId(Nullable`1<int> tenantId, Guid webhookEventId);
}
public class Abp.Webhooks.WebhookSubscriptionsStore : object {
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    private IRepository`2<WebhookSubscriptionInfo, Guid> _webhookSubscriptionRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    public WebhookSubscriptionsStore(IRepository`2<WebhookSubscriptionInfo, Guid> webhookSubscriptionRepository, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<GetAsync>d__7")]
public virtual Task`1<WebhookSubscriptionInfo> GetAsync(Guid id);
    public virtual WebhookSubscriptionInfo Get(Guid id);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<InsertAsync>d__9")]
public virtual Task InsertAsync(WebhookSubscriptionInfo webhookInfo);
    public virtual void Insert(WebhookSubscriptionInfo webhookInfo);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<UpdateAsync>d__11")]
public virtual Task UpdateAsync(WebhookSubscriptionInfo webhookSubscription);
    public virtual void Update(WebhookSubscriptionInfo webhookSubscription);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<DeleteAsync>d__13")]
public virtual Task DeleteAsync(Guid id);
    public virtual void Delete(Guid id);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<GetAllSubscriptionsAsync>d__15")]
public virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId);
    public virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptions(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<GetAllSubscriptionsAsync>d__17")]
public virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId, string webhookName);
    public virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptions(Nullable`1<int> tenantId, string webhookName);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<GetAllSubscriptionsOfTenantsAsync>d__19")]
public virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds);
    public virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<GetAllSubscriptionsOfTenantsAsync>d__21")]
public virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds, string webhookName);
    public virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds, string webhookName);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionsStore/<IsSubscribedAsync>d__23")]
public virtual Task`1<bool> IsSubscribedAsync(Nullable`1<int> tenantId, string webhookName);
    public virtual bool IsSubscribed(Nullable`1<int> tenantId, string webhookName);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.Zero.AbpZeroCommonModule : AbpModule {
    public virtual void PreInitialize();
    public virtual void Initialize();
    private void Kernel_ComponentRegistered(string key, IHandler handler);
    private void AddIgnoredTypes();
    private void FillMissingEntityTypes();
    private void RegisterTenantCache();
}
public class Abp.Zero.AbpZeroConsts : object {
    public static string LocalizationSourceName;
}
internal class Abp.Zero.Configuration.AbpZeroConfig : object {
    private IRoleManagementConfig _roleManagementConfig;
    private IUserManagementConfig _userManagementConfig;
    private ILanguageManagementConfig _languageManagement;
    private IAbpZeroEntityTypes _entityTypes;
    public IRoleManagementConfig RoleManagement { get; }
    public IUserManagementConfig UserManagement { get; }
    public ILanguageManagementConfig LanguageManagement { get; }
    public IAbpZeroEntityTypes EntityTypes { get; }
    public AbpZeroConfig(IRoleManagementConfig roleManagementConfig, IUserManagementConfig userManagementConfig, ILanguageManagementConfig languageManagement, IAbpZeroEntityTypes entityTypes);
    public sealed virtual IRoleManagementConfig get_RoleManagement();
    public sealed virtual IUserManagementConfig get_UserManagement();
    public sealed virtual ILanguageManagementConfig get_LanguageManagement();
    public sealed virtual IAbpZeroEntityTypes get_EntityTypes();
}
public class Abp.Zero.Configuration.AbpZeroEntityTypes : object {
    private Type _user;
    private Type _role;
    private Type _tenant;
    public Type User { get; public set; }
    public Type Role { get; public set; }
    public Type Tenant { get; public set; }
    public sealed virtual Type get_User();
    public sealed virtual void set_User(Type value);
    public sealed virtual Type get_Role();
    public sealed virtual void set_Role(Type value);
    public sealed virtual Type get_Tenant();
    public sealed virtual void set_Tenant(Type value);
}
public static class Abp.Zero.Configuration.AbpZeroSettingNames : object {
}
public class Abp.Zero.Configuration.AbpZeroSettingProvider : SettingProvider {
    public virtual IEnumerable`1<SettingDefinition> GetSettingDefinitions(SettingDefinitionProviderContext context);
}
public interface Abp.Zero.Configuration.IAbpZeroConfig {
    public IRoleManagementConfig RoleManagement { get; }
    public IUserManagementConfig UserManagement { get; }
    public ILanguageManagementConfig LanguageManagement { get; }
    public IAbpZeroEntityTypes EntityTypes { get; }
    public abstract virtual IRoleManagementConfig get_RoleManagement();
    public abstract virtual IUserManagementConfig get_UserManagement();
    public abstract virtual ILanguageManagementConfig get_LanguageManagement();
    public abstract virtual IAbpZeroEntityTypes get_EntityTypes();
}
public interface Abp.Zero.Configuration.IAbpZeroEntityTypes {
    public Type User { get; public set; }
    public Type Role { get; public set; }
    public Type Tenant { get; public set; }
    public abstract virtual Type get_User();
    public abstract virtual void set_User(Type value);
    public abstract virtual Type get_Role();
    public abstract virtual void set_Role(Type value);
    public abstract virtual Type get_Tenant();
    public abstract virtual void set_Tenant(Type value);
}
public interface Abp.Zero.Configuration.ILanguageManagementConfig {
    public abstract virtual void EnableDbLocalization();
}
public interface Abp.Zero.Configuration.IRoleManagementConfig {
    public List`1<StaticRoleDefinition> StaticRoles { get; }
    public abstract virtual List`1<StaticRoleDefinition> get_StaticRoles();
}
public interface Abp.Zero.Configuration.IUserManagementConfig {
    public ITypeList`1<object> ExternalAuthenticationSources { get; public set; }
    public abstract virtual ITypeList`1<object> get_ExternalAuthenticationSources();
    public abstract virtual void set_ExternalAuthenticationSources(ITypeList`1<object> value);
}
internal class Abp.Zero.Configuration.LanguageManagementConfig : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IIocManager _iocManager;
    private IAbpStartupConfiguration _configuration;
    public ILogger Logger { get; public set; }
    public LanguageManagementConfig(IIocManager iocManager, IAbpStartupConfiguration configuration);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual void EnableDbLocalization();
}
[ExtensionAttribute]
public static class Abp.Zero.Configuration.ModuleZeroConfigurationExtensions : object {
    [ExtensionAttribute]
public static IAbpZeroConfig Zero(IModuleConfigurations moduleConfigurations);
}
internal class Abp.Zero.Configuration.RoleManagementConfig : object {
    [CompilerGeneratedAttribute]
private List`1<StaticRoleDefinition> <StaticRoles>k__BackingField;
    public List`1<StaticRoleDefinition> StaticRoles { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<StaticRoleDefinition> get_StaticRoles();
}
public class Abp.Zero.Configuration.StaticRoleDefinition : object {
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GrantAllPermissionsByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GrantedPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiTenancySides <Side>k__BackingField;
    public string RoleName { get; }
    public string RoleDisplayName { get; }
    public bool GrantAllPermissionsByDefault { get; public set; }
    public List`1<string> GrantedPermissions { get; }
    public MultiTenancySides Side { get; }
    public StaticRoleDefinition(string roleName, MultiTenancySides side, bool grantAllPermissionsByDefault);
    public StaticRoleDefinition(string roleName, string roleDisplayName, MultiTenancySides side, bool grantAllPermissionsByDefault);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_RoleDisplayName();
    [CompilerGeneratedAttribute]
public bool get_GrantAllPermissionsByDefault();
    [CompilerGeneratedAttribute]
public void set_GrantAllPermissionsByDefault(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_GrantedPermissions();
    [CompilerGeneratedAttribute]
public MultiTenancySides get_Side();
    public virtual bool IsGrantedByDefault(Permission permission);
}
public class Abp.Zero.Configuration.UserManagementConfig : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<object> <ExternalAuthenticationSources>k__BackingField;
    public ITypeList`1<object> ExternalAuthenticationSources { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<object> get_ExternalAuthenticationSources();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExternalAuthenticationSources(ITypeList`1<object> value);
}
internal class AbpZeroCommon_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
