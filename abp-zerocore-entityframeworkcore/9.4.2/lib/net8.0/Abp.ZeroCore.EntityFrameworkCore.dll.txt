public static class Abp.Data.ConnectionStringHelper : object {
    public static string GetConnectionString(string nameOrConnectionString);
}
public class Abp.EntityHistory.EntityHistoryHelper : EntityHistoryHelperBase {
    public EntityHistoryHelper(IEntityHistoryConfiguration configuration, IUnitOfWorkManager unitOfWorkManager);
    public virtual EntityChangeSet CreateEntityChangeSet(ICollection`1<EntityEntry> entityEntries);
    [AsyncStateMachineAttribute("Abp.EntityHistory.EntityHistoryHelper/<SaveAsync>d__2")]
public virtual Task SaveAsync(EntityChangeSet changeSet);
    public virtual void Save(EntityChangeSet changeSet);
    protected virtual string GetEntityId(EntityEntry entry);
    protected virtual Nullable`1<bool> ShouldSaveEntityHistory(EntityEntry entityEntry);
    protected virtual bool ShouldSavePropertyHistory(PropertyEntry propertyEntry, bool defaultValue);
    private EntityChange CreateEntityChange(EntityEntry entityEntry);
    private ICollection`1<EntityPropertyChange> GetPropertyChanges(EntityEntry entityEntry, bool auditedPropertiesOnly);
    private void UpdateChangeSet(EntityChangeSet changeSet);
    private EntityPropertyChange CreateEntityPropertyChange(object oldValue, object newValue, IProperty property);
}
public class Abp.EntityHistory.EntitySnapshotManager : EntitySnapshotManagerBase {
    public EntitySnapshotManager(IRepository`2<EntityChange, long> entityChangeRepository);
    protected virtual Task`1<TEntity> GetEntityById(TPrimaryKey id);
    protected virtual IQueryable`1<EntityChange> GetEntityChanges(TPrimaryKey id, DateTime snapshotTime);
}
[ExtensionAttribute]
internal static class Abp.EntityHistory.Extensions.EntityEntryExtensions : object {
    [ExtensionAttribute]
internal static bool IsCreated(EntityEntry entityEntry);
    [ExtensionAttribute]
internal static bool IsDeleted(EntityEntry entityEntry);
}
[ExtensionAttribute]
internal static class Abp.EntityHistory.Extensions.PropertyEntryExtensions : object {
    [ExtensionAttribute]
internal static object GetNewValue(PropertyEntry propertyEntry);
    [ExtensionAttribute]
internal static object GetOriginalValue(PropertyEntry propertyEntry);
}
public interface Abp.EntityHistory.IEntityHistoryHelper {
    public abstract virtual EntityChangeSet CreateEntityChangeSet(ICollection`1<EntityEntry> entityEntries);
    public abstract virtual Task SaveAsync(EntityChangeSet changeSet);
    public abstract virtual void Save(EntityChangeSet changeSet);
}
public abstract class Abp.Zero.EntityFrameworkCore.AbpZeroCommonDbContext`3 : AbpDbContext {
    [CompilerGeneratedAttribute]
private DbSet`1<TRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TUser> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserLogin> <UserLogins>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserLoginAttempt> <UserLoginAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserRole> <UserRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserClaim> <UserClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserToken> <UserTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<RoleClaim> <RoleClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<PermissionSetting> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<RolePermissionSetting> <RolePermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserPermissionSetting> <UserPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<Setting> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<AuditLog> <AuditLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<ApplicationLanguage> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<ApplicationLanguageText> <LanguageTexts>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<OrganizationUnit> <OrganizationUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserOrganizationUnit> <UserOrganizationUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<OrganizationUnitRole> <OrganizationUnitRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TenantNotificationInfo> <TenantNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserNotificationInfo> <UserNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<NotificationSubscriptionInfo> <NotificationSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EntityChange> <EntityChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EntityChangeSet> <EntityChangeSets>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EntityPropertyChange> <EntityPropertyChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<WebhookEvent> <WebhookEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<WebhookSubscriptionInfo> <WebhookSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<WebhookSendAttempt> <WebhookSendAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<DynamicProperty> <DynamicProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<DynamicPropertyValue> <DynamicPropertyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<DynamicEntityProperty> <DynamicEntityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<DynamicEntityPropertyValue> <DynamicEntityPropertyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityHistoryHelper <EntityHistoryHelper>k__BackingField;
    public DbSet`1<TRole> Roles { get; public set; }
    public DbSet`1<TUser> Users { get; public set; }
    public DbSet`1<UserLogin> UserLogins { get; public set; }
    public DbSet`1<UserLoginAttempt> UserLoginAttempts { get; public set; }
    public DbSet`1<UserRole> UserRoles { get; public set; }
    public DbSet`1<UserClaim> UserClaims { get; public set; }
    public DbSet`1<UserToken> UserTokens { get; public set; }
    public DbSet`1<RoleClaim> RoleClaims { get; public set; }
    public DbSet`1<PermissionSetting> Permissions { get; public set; }
    public DbSet`1<RolePermissionSetting> RolePermissions { get; public set; }
    public DbSet`1<UserPermissionSetting> UserPermissions { get; public set; }
    public DbSet`1<Setting> Settings { get; public set; }
    public DbSet`1<AuditLog> AuditLogs { get; public set; }
    public DbSet`1<ApplicationLanguage> Languages { get; public set; }
    public DbSet`1<ApplicationLanguageText> LanguageTexts { get; public set; }
    public DbSet`1<OrganizationUnit> OrganizationUnits { get; public set; }
    public DbSet`1<UserOrganizationUnit> UserOrganizationUnits { get; public set; }
    public DbSet`1<OrganizationUnitRole> OrganizationUnitRoles { get; public set; }
    public DbSet`1<TenantNotificationInfo> TenantNotifications { get; public set; }
    public DbSet`1<UserNotificationInfo> UserNotifications { get; public set; }
    public DbSet`1<NotificationSubscriptionInfo> NotificationSubscriptions { get; public set; }
    public DbSet`1<EntityChange> EntityChanges { get; public set; }
    public DbSet`1<EntityChangeSet> EntityChangeSets { get; public set; }
    public DbSet`1<EntityPropertyChange> EntityPropertyChanges { get; public set; }
    public DbSet`1<WebhookEvent> WebhookEvents { get; public set; }
    public DbSet`1<WebhookSubscriptionInfo> WebhookSubscriptions { get; public set; }
    public DbSet`1<WebhookSendAttempt> WebhookSendAttempts { get; public set; }
    public DbSet`1<DynamicProperty> DynamicProperties { get; public set; }
    public DbSet`1<DynamicPropertyValue> DynamicPropertyValues { get; public set; }
    public DbSet`1<DynamicEntityProperty> DynamicEntityProperties { get; public set; }
    public DbSet`1<DynamicEntityPropertyValue> DynamicEntityPropertyValues { get; public set; }
    public IEntityHistoryHelper EntityHistoryHelper { get; public set; }
    protected AbpZeroCommonDbContext`3(DbContextOptions`1<TSelf> options);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TRole> get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(DbSet`1<TRole> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TUser> get_Users();
    [CompilerGeneratedAttribute]
public virtual void set_Users(DbSet`1<TUser> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserLogin> get_UserLogins();
    [CompilerGeneratedAttribute]
public virtual void set_UserLogins(DbSet`1<UserLogin> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserLoginAttempt> get_UserLoginAttempts();
    [CompilerGeneratedAttribute]
public virtual void set_UserLoginAttempts(DbSet`1<UserLoginAttempt> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserRole> get_UserRoles();
    [CompilerGeneratedAttribute]
public virtual void set_UserRoles(DbSet`1<UserRole> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserClaim> get_UserClaims();
    [CompilerGeneratedAttribute]
public virtual void set_UserClaims(DbSet`1<UserClaim> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserToken> get_UserTokens();
    [CompilerGeneratedAttribute]
public virtual void set_UserTokens(DbSet`1<UserToken> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<RoleClaim> get_RoleClaims();
    [CompilerGeneratedAttribute]
public virtual void set_RoleClaims(DbSet`1<RoleClaim> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<PermissionSetting> get_Permissions();
    [CompilerGeneratedAttribute]
public virtual void set_Permissions(DbSet`1<PermissionSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<RolePermissionSetting> get_RolePermissions();
    [CompilerGeneratedAttribute]
public virtual void set_RolePermissions(DbSet`1<RolePermissionSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserPermissionSetting> get_UserPermissions();
    [CompilerGeneratedAttribute]
public virtual void set_UserPermissions(DbSet`1<UserPermissionSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<Setting> get_Settings();
    [CompilerGeneratedAttribute]
public virtual void set_Settings(DbSet`1<Setting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<AuditLog> get_AuditLogs();
    [CompilerGeneratedAttribute]
public virtual void set_AuditLogs(DbSet`1<AuditLog> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<ApplicationLanguage> get_Languages();
    [CompilerGeneratedAttribute]
public virtual void set_Languages(DbSet`1<ApplicationLanguage> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<ApplicationLanguageText> get_LanguageTexts();
    [CompilerGeneratedAttribute]
public virtual void set_LanguageTexts(DbSet`1<ApplicationLanguageText> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<OrganizationUnit> get_OrganizationUnits();
    [CompilerGeneratedAttribute]
public virtual void set_OrganizationUnits(DbSet`1<OrganizationUnit> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserOrganizationUnit> get_UserOrganizationUnits();
    [CompilerGeneratedAttribute]
public virtual void set_UserOrganizationUnits(DbSet`1<UserOrganizationUnit> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<OrganizationUnitRole> get_OrganizationUnitRoles();
    [CompilerGeneratedAttribute]
public virtual void set_OrganizationUnitRoles(DbSet`1<OrganizationUnitRole> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TenantNotificationInfo> get_TenantNotifications();
    [CompilerGeneratedAttribute]
public virtual void set_TenantNotifications(DbSet`1<TenantNotificationInfo> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserNotificationInfo> get_UserNotifications();
    [CompilerGeneratedAttribute]
public virtual void set_UserNotifications(DbSet`1<UserNotificationInfo> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<NotificationSubscriptionInfo> get_NotificationSubscriptions();
    [CompilerGeneratedAttribute]
public virtual void set_NotificationSubscriptions(DbSet`1<NotificationSubscriptionInfo> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<EntityChange> get_EntityChanges();
    [CompilerGeneratedAttribute]
public virtual void set_EntityChanges(DbSet`1<EntityChange> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<EntityChangeSet> get_EntityChangeSets();
    [CompilerGeneratedAttribute]
public virtual void set_EntityChangeSets(DbSet`1<EntityChangeSet> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<EntityPropertyChange> get_EntityPropertyChanges();
    [CompilerGeneratedAttribute]
public virtual void set_EntityPropertyChanges(DbSet`1<EntityPropertyChange> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<WebhookEvent> get_WebhookEvents();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookEvents(DbSet`1<WebhookEvent> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<WebhookSubscriptionInfo> get_WebhookSubscriptions();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookSubscriptions(DbSet`1<WebhookSubscriptionInfo> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<WebhookSendAttempt> get_WebhookSendAttempts();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookSendAttempts(DbSet`1<WebhookSendAttempt> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<DynamicProperty> get_DynamicProperties();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicProperties(DbSet`1<DynamicProperty> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<DynamicPropertyValue> get_DynamicPropertyValues();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicPropertyValues(DbSet`1<DynamicPropertyValue> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<DynamicEntityProperty> get_DynamicEntityProperties();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicEntityProperties(DbSet`1<DynamicEntityProperty> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<DynamicEntityPropertyValue> get_DynamicEntityPropertyValues();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicEntityPropertyValues(DbSet`1<DynamicEntityPropertyValue> value);
    [CompilerGeneratedAttribute]
public IEntityHistoryHelper get_EntityHistoryHelper();
    [CompilerGeneratedAttribute]
public void set_EntityHistoryHelper(IEntityHistoryHelper value);
    public virtual int SaveChanges();
    [AsyncStateMachineAttribute("Abp.Zero.EntityFrameworkCore.AbpZeroCommonDbContext`3/<SaveChangesAsync>d__130")]
public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(CancellationToken cancellationToken);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.Zero.EntityFrameworkCore.AbpZeroCoreEntityFrameworkCoreModule : AbpModule {
    public virtual void PreInitialize();
    public virtual void Initialize();
    [CompilerGeneratedAttribute]
private void <PreInitialize>b__0_0();
}
public abstract class Abp.Zero.EntityFrameworkCore.AbpZeroDbContext`4 : AbpZeroCommonDbContext`3<TRole, TUser, TSelf> {
    [CompilerGeneratedAttribute]
private DbSet`1<TTenant> <Tenants>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<Edition> <Editions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<FeatureSetting> <FeatureSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TenantFeatureSetting> <TenantFeatureSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EditionFeatureSetting> <EditionFeatureSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<BackgroundJobInfo> <BackgroundJobs>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserAccount> <UserAccounts>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<NotificationInfo> <Notifications>k__BackingField;
    public DbSet`1<TTenant> Tenants { get; public set; }
    public DbSet`1<Edition> Editions { get; public set; }
    public DbSet`1<FeatureSetting> FeatureSettings { get; public set; }
    public DbSet`1<TenantFeatureSetting> TenantFeatureSettings { get; public set; }
    public DbSet`1<EditionFeatureSetting> EditionFeatureSettings { get; public set; }
    public DbSet`1<BackgroundJobInfo> BackgroundJobs { get; public set; }
    public DbSet`1<UserAccount> UserAccounts { get; public set; }
    public DbSet`1<NotificationInfo> Notifications { get; public set; }
    protected AbpZeroDbContext`4(DbContextOptions`1<TSelf> options);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TTenant> get_Tenants();
    [CompilerGeneratedAttribute]
public virtual void set_Tenants(DbSet`1<TTenant> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<Edition> get_Editions();
    [CompilerGeneratedAttribute]
public virtual void set_Editions(DbSet`1<Edition> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<FeatureSetting> get_FeatureSettings();
    [CompilerGeneratedAttribute]
public virtual void set_FeatureSettings(DbSet`1<FeatureSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TenantFeatureSetting> get_TenantFeatureSettings();
    [CompilerGeneratedAttribute]
public virtual void set_TenantFeatureSettings(DbSet`1<TenantFeatureSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<EditionFeatureSetting> get_EditionFeatureSettings();
    [CompilerGeneratedAttribute]
public virtual void set_EditionFeatureSettings(DbSet`1<EditionFeatureSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<BackgroundJobInfo> get_BackgroundJobs();
    [CompilerGeneratedAttribute]
public virtual void set_BackgroundJobs(DbSet`1<BackgroundJobInfo> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserAccount> get_UserAccounts();
    [CompilerGeneratedAttribute]
public virtual void set_UserAccounts(DbSet`1<UserAccount> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<NotificationInfo> get_Notifications();
    [CompilerGeneratedAttribute]
public virtual void set_Notifications(DbSet`1<NotificationInfo> value);
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
public abstract class Abp.Zero.EntityFrameworkCore.AbpZeroDbMigrator`1 : object {
    private IUnitOfWorkManager _unitOfWorkManager;
    private IDbPerTenantConnectionStringResolver _connectionStringResolver;
    private IDbContextResolver _dbContextResolver;
    protected AbpZeroDbMigrator`1(IUnitOfWorkManager unitOfWorkManager, IDbPerTenantConnectionStringResolver connectionStringResolver, IDbContextResolver dbContextResolver);
    public virtual void CreateOrMigrateForHost();
    public virtual void CreateOrMigrateForHost(Action`1<TDbContext> seedAction);
    public virtual void CreateOrMigrateForTenant(AbpTenantBase tenant);
    public virtual void CreateOrMigrateForTenant(AbpTenantBase tenant, Action`1<TDbContext> seedAction);
    protected virtual void CreateOrMigrate(AbpTenantBase tenant, Action`1<TDbContext> seedAction);
}
[ExtensionAttribute]
public static class Abp.Zero.EntityFrameworkCore.AbpZeroDbModelBuilderExtensions : object {
    [ExtensionAttribute]
public static void ChangeAbpTablePrefix(ModelBuilder modelBuilder, string prefix, string schemaName);
    [ExtensionAttribute]
internal static void SetTableName(ModelBuilder modelBuilder, string tableName, string schemaName);
}
[MultiTenancySideAttribute]
public abstract class Abp.Zero.EntityFrameworkCore.AbpZeroHostDbContext`4 : AbpZeroCommonDbContext`3<TRole, TUser, TSelf> {
    [CompilerGeneratedAttribute]
private DbSet`1<TTenant> <Tenants>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<Edition> <Editions>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<FeatureSetting> <FeatureSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<TenantFeatureSetting> <TenantFeatureSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<EditionFeatureSetting> <EditionFeatureSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<BackgroundJobInfo> <BackgroundJobs>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<UserAccount> <UserAccounts>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSet`1<NotificationInfo> <Notifications>k__BackingField;
    public DbSet`1<TTenant> Tenants { get; public set; }
    public DbSet`1<Edition> Editions { get; public set; }
    public DbSet`1<FeatureSetting> FeatureSettings { get; public set; }
    public DbSet`1<TenantFeatureSetting> TenantFeatureSettings { get; public set; }
    public DbSet`1<EditionFeatureSetting> EditionFeatureSettings { get; public set; }
    public DbSet`1<BackgroundJobInfo> BackgroundJobs { get; public set; }
    public DbSet`1<UserAccount> UserAccounts { get; public set; }
    public DbSet`1<NotificationInfo> Notifications { get; public set; }
    protected AbpZeroHostDbContext`4(DbContextOptions`1<TSelf> options);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TTenant> get_Tenants();
    [CompilerGeneratedAttribute]
public virtual void set_Tenants(DbSet`1<TTenant> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<Edition> get_Editions();
    [CompilerGeneratedAttribute]
public virtual void set_Editions(DbSet`1<Edition> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<FeatureSetting> get_FeatureSettings();
    [CompilerGeneratedAttribute]
public virtual void set_FeatureSettings(DbSet`1<FeatureSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<TenantFeatureSetting> get_TenantFeatureSettings();
    [CompilerGeneratedAttribute]
public virtual void set_TenantFeatureSettings(DbSet`1<TenantFeatureSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<EditionFeatureSetting> get_EditionFeatureSettings();
    [CompilerGeneratedAttribute]
public virtual void set_EditionFeatureSettings(DbSet`1<EditionFeatureSetting> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<BackgroundJobInfo> get_BackgroundJobs();
    [CompilerGeneratedAttribute]
public virtual void set_BackgroundJobs(DbSet`1<BackgroundJobInfo> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<UserAccount> get_UserAccounts();
    [CompilerGeneratedAttribute]
public virtual void set_UserAccounts(DbSet`1<UserAccount> value);
    [CompilerGeneratedAttribute]
public virtual DbSet`1<NotificationInfo> get_Notifications();
    [CompilerGeneratedAttribute]
public virtual void set_Notifications(DbSet`1<NotificationInfo> value);
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
}
[MultiTenancySideAttribute]
public abstract class Abp.Zero.EntityFrameworkCore.AbpZeroTenantDbContext`3 : AbpZeroCommonDbContext`3<TRole, TUser, TSelf> {
    protected AbpZeroTenantDbContext`3(DbContextOptions`1<TSelf> options);
}
public class Abp.Zero.EntityFrameworkCore.DbPerTenantConnectionStringResolver : DefaultConnectionStringResolver {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private ICurrentUnitOfWorkProvider _currentUnitOfWorkProvider;
    private ITenantCache _tenantCache;
    public IAbpSession AbpSession { get; public set; }
    public DbPerTenantConnectionStringResolver(IAbpStartupConfiguration configuration, ICurrentUnitOfWorkProvider currentUnitOfWorkProvider, ITenantCache tenantCache);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    public virtual string GetNameOrConnectionString(ConnectionStringResolveArgs args);
    public virtual string GetNameOrConnectionString(DbPerTenantConnectionStringResolveArgs args);
    [AsyncStateMachineAttribute("Abp.Zero.EntityFrameworkCore.DbPerTenantConnectionStringResolver/<GetNameOrConnectionStringAsync>d__9")]
public virtual Task`1<string> GetNameOrConnectionStringAsync(ConnectionStringResolveArgs args);
    [AsyncStateMachineAttribute("Abp.Zero.EntityFrameworkCore.DbPerTenantConnectionStringResolver/<GetNameOrConnectionStringAsync>d__10")]
public virtual Task`1<string> GetNameOrConnectionStringAsync(DbPerTenantConnectionStringResolveArgs args);
    protected virtual Nullable`1<int> GetCurrentTenantId();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<string> <>n__0(ConnectionStringResolveArgs args);
}
public interface Abp.Zero.EntityFrameworkCore.IMultiTenantSeed {
    public AbpTenantBase Tenant { get; public set; }
    public abstract virtual AbpTenantBase get_Tenant();
    public abstract virtual void set_Tenant(AbpTenantBase value);
}
internal class AbpZeroCoreEntityFrameworkCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
