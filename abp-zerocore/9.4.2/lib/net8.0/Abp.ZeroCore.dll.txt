public class Abp.Authorization.AbpLogInManager`3 : object {
    [CompilerGeneratedAttribute]
private IClientInfoProvider <ClientInfoProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMultiTenancyConfig <MultiTenancyConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`1<TTenant> <TenantRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpUserManager`2<TRole, TUser> <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`2<UserLoginAttempt, long> <UserLoginAttemptRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserManagementConfig <UserManagementConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocResolver <IocResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpRoleManager`2<TRole, TUser> <RoleManager>k__BackingField;
    private IPasswordHasher`1<TUser> _passwordHasher;
    private AbpUserClaimsPrincipalFactory`2<TUser, TRole> _claimsPrincipalFactory;
    public IClientInfoProvider ClientInfoProvider { get; public set; }
    protected IMultiTenancyConfig MultiTenancyConfig { get; }
    protected IRepository`1<TTenant> TenantRepository { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    protected AbpUserManager`2<TRole, TUser> UserManager { get; }
    protected ISettingManager SettingManager { get; }
    protected IRepository`2<UserLoginAttempt, long> UserLoginAttemptRepository { get; }
    protected IUserManagementConfig UserManagementConfig { get; }
    protected IIocResolver IocResolver { get; }
    protected AbpRoleManager`2<TRole, TUser> RoleManager { get; }
    public AbpLogInManager`3(AbpUserManager`2<TRole, TUser> userManager, IMultiTenancyConfig multiTenancyConfig, IRepository`1<TTenant> tenantRepository, IUnitOfWorkManager unitOfWorkManager, ISettingManager settingManager, IRepository`2<UserLoginAttempt, long> userLoginAttemptRepository, IUserManagementConfig userManagementConfig, IIocResolver iocResolver, IPasswordHasher`1<TUser> passwordHasher, AbpRoleManager`2<TRole, TUser> roleManager, AbpUserClaimsPrincipalFactory`2<TUser, TRole> claimsPrincipalFactory);
    [CompilerGeneratedAttribute]
public IClientInfoProvider get_ClientInfoProvider();
    [CompilerGeneratedAttribute]
public void set_ClientInfoProvider(IClientInfoProvider value);
    [CompilerGeneratedAttribute]
protected IMultiTenancyConfig get_MultiTenancyConfig();
    [CompilerGeneratedAttribute]
protected IRepository`1<TTenant> get_TenantRepository();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
protected AbpUserManager`2<TRole, TUser> get_UserManager();
    [CompilerGeneratedAttribute]
protected ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
protected IRepository`2<UserLoginAttempt, long> get_UserLoginAttemptRepository();
    [CompilerGeneratedAttribute]
protected IUserManagementConfig get_UserManagementConfig();
    [CompilerGeneratedAttribute]
protected IIocResolver get_IocResolver();
    [CompilerGeneratedAttribute]
protected AbpRoleManager`2<TRole, TUser> get_RoleManager();
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<LoginAsync>d__34")]
public virtual Task`1<AbpLoginResult`2<TTenant, TUser>> LoginAsync(UserLoginInfo login, string tenancyName, bool shouldLockout);
    protected virtual bool ShouldPreventSavingLoginAttempt(AbpLoginResult`2<TTenant, TUser> loginResult);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<LoginAsyncInternal>d__36")]
protected virtual Task`1<AbpLoginResult`2<TTenant, TUser>> LoginAsyncInternal(UserLoginInfo login, string tenancyName, bool shouldLockout);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<LoginAsync>d__37")]
public virtual Task`1<AbpLoginResult`2<TTenant, TUser>> LoginAsync(string userNameOrEmailAddress, string plainPassword, string tenancyName, bool shouldLockout);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<LoginAsyncInternal>d__38")]
protected virtual Task`1<AbpLoginResult`2<TTenant, TUser>> LoginAsyncInternal(string userNameOrEmailAddress, string plainPassword, string tenancyName, bool shouldLockout);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<GetFailedPasswordValidationAsLoginResultAsync>d__39")]
protected virtual Task`1<AbpLoginResult`2<TTenant, TUser>> GetFailedPasswordValidationAsLoginResultAsync(TUser user, TTenant tenant, bool shouldLockout);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<CreateLoginResultAsync>d__40")]
protected virtual Task`1<AbpLoginResult`2<TTenant, TUser>> CreateLoginResultAsync(TUser user, TTenant tenant);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<SaveLoginAttemptAsync>d__41")]
public virtual Task SaveLoginAttemptAsync(AbpLoginResult`2<TTenant, TUser> loginResult, string tenancyName, string userNameOrEmailAddress);
    public virtual void SaveLoginAttempt(AbpLoginResult`2<TTenant, TUser> loginResult, string tenancyName, string userNameOrEmailAddress);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<TryLockOutAsync>d__43")]
protected virtual Task`1<bool> TryLockOutAsync(Nullable`1<int> tenantId, long userId);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<TryLoginFromExternalAuthenticationSourcesAsync>d__44")]
protected virtual Task`1<bool> TryLoginFromExternalAuthenticationSourcesAsync(string userNameOrEmailAddress, string plainPassword, TTenant tenant);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<GetDefaultTenantAsync>d__45")]
protected virtual Task`1<TTenant> GetDefaultTenantAsync();
    [AsyncStateMachineAttribute("Abp.Authorization.AbpLogInManager`3/<IsEmailConfirmationRequiredForLoginAsync>d__46")]
protected virtual Task`1<bool> IsEmailConfirmationRequiredForLoginAsync(Nullable`1<int> tenantId);
    protected virtual Task`1<bool> IsPhoneConfirmationRequiredForLoginAsync(Nullable`1<int> tenantId);
}
public class Abp.Authorization.AbpSecurityStampValidator`3 : SecurityStampValidator`1<TUser> {
    private IUnitOfWorkManager _unitOfWorkManager;
    public AbpSecurityStampValidator`3(IOptions`1<SecurityStampValidatorOptions> options, AbpSignInManager`3<TTenant, TRole, TUser> signInManager, ILoggerFactory loggerFactory, IUnitOfWorkManager unitOfWorkManager);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSecurityStampValidator`3/<ValidateAsync>d__2")]
public virtual Task ValidateAsync(CookieValidatePrincipalContext context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CookieValidatePrincipalContext context);
}
public class Abp.Authorization.AbpSignInManager`3 : SignInManager`1<TUser> {
    private IUnitOfWorkManager _unitOfWorkManager;
    private ISettingManager _settingManager;
    public AbpSignInManager`3(AbpUserManager`2<TRole, TUser> userManager, IHttpContextAccessor contextAccessor, AbpUserClaimsPrincipalFactory`2<TUser, TRole> claimsFactory, IOptions`1<IdentityOptions> optionsAccessor, ILogger`1<SignInManager`1<TUser>> logger, IUnitOfWorkManager unitOfWorkManager, ISettingManager settingManager, IAuthenticationSchemeProvider schemes, IUserConfirmation`1<TUser> userConfirmation);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<SignInOrTwoFactorAsync>d__3")]
public virtual Task`1<SignInResult> SignInOrTwoFactorAsync(AbpLoginResult`2<TTenant, TUser> loginResult, bool isPersistent, Nullable`1<bool> rememberBrowser, string loginProvider, bool bypassTwoFactor);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<SignOutAndSignInAsync>d__4")]
public virtual Task SignOutAndSignInAsync(ClaimsIdentity identity, bool isPersistent);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<SignInAsync>d__5")]
public virtual Task SignInAsync(ClaimsIdentity identity, bool isPersistent);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<SignInAsync>d__6")]
public virtual Task SignInAsync(TUser user, bool isPersistent, string authenticationMethod);
    protected virtual ClaimsPrincipal StoreTwoFactorInfo(TUser user, string loginProvider);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<StoreRememberClient>d__8")]
protected virtual Task`1<ClaimsPrincipal> StoreRememberClient(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<GetVerifiedTenantIdAsync>d__9")]
public Task`1<Nullable`1<int>> GetVerifiedTenantIdAsync();
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<IsTwoFactorClientRememberedAsync>d__10")]
public virtual Task`1<bool> IsTwoFactorClientRememberedAsync(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpSignInManager`3/<RememberTwoFactorClientAsync>d__11")]
public virtual Task RememberTwoFactorClientAsync(TUser user);
    private bool IsTrue(string settingName, Nullable`1<int> tenantId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(TUser user, bool isPersistent, string authenticationMethod);
}
public class Abp.Authorization.AbpUserClaimsPrincipalFactory`2 : UserClaimsPrincipalFactory`2<TUser, TRole> {
    private IUnitOfWorkManager _unitOfWorkManager;
    public AbpUserClaimsPrincipalFactory`2(AbpUserManager`2<TRole, TUser> userManager, AbpRoleManager`2<TRole, TUser> roleManager, IOptions`1<IdentityOptions> optionsAccessor, IUnitOfWorkManager unitOfWorkManager);
    [AsyncStateMachineAttribute("Abp.Authorization.AbpUserClaimsPrincipalFactory`2/<CreateAsync>d__2")]
public virtual Task`1<ClaimsPrincipal> CreateAsync(TUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ClaimsPrincipal> <>n__0(TUser user);
}
internal static class Abp.Authorization.AbpZeroClaimsIdentityHelper : object {
    public static Nullable`1<int> GetTenantId(ClaimsPrincipal principal);
}
public class Abp.Authorization.PermissionChecker`2 : object {
    private AbpUserManager`2<TRole, TUser> _userManager;
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentUnitOfWorkProvider <CurrentUnitOfWorkProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    public IIocManager IocManager { get; public set; }
    public ILogger Logger { get; public set; }
    public IAbpSession AbpSession { get; public set; }
    public ICurrentUnitOfWorkProvider CurrentUnitOfWorkProvider { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    public PermissionChecker`2(AbpUserManager`2<TRole, TUser> userManager);
    [CompilerGeneratedAttribute]
public sealed virtual IIocManager get_IocManager();
    [CompilerGeneratedAttribute]
public void set_IocManager(IIocManager value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public ICurrentUnitOfWorkProvider get_CurrentUnitOfWorkProvider();
    [CompilerGeneratedAttribute]
public void set_CurrentUnitOfWorkProvider(ICurrentUnitOfWorkProvider value);
    [CompilerGeneratedAttribute]
public IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionChecker`2/<IsGrantedAsync>d__22")]
public virtual Task`1<bool> IsGrantedAsync(string permissionName);
    public virtual bool IsGranted(string permissionName);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionChecker`2/<IsGrantedAsync>d__24")]
public virtual Task`1<bool> IsGrantedAsync(long userId, string permissionName);
    public virtual bool IsGranted(long userId, string permissionName);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionChecker`2/<IsGrantedAsync>d__26")]
public virtual Task`1<bool> IsGrantedAsync(UserIdentifier user, string permissionName);
    public virtual bool IsGranted(UserIdentifier user, string permissionName);
}
public abstract class Abp.Authorization.Roles.AbpRole`1 : AbpRoleBase {
    public static int MaxConcurrencyStampLength;
    [CompilerGeneratedAttribute]
private string <NormalizedName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<RoleClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConcurrencyStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <DeleterUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <LastModifierUser>k__BackingField;
    [RequiredAttribute]
[StringLengthAttribute("32")]
public string NormalizedName { get; public set; }
    [ForeignKeyAttribute("RoleId")]
public ICollection`1<RoleClaim> Claims { get; public set; }
    [StringLengthAttribute("128")]
public string ConcurrencyStamp { get; public set; }
    public TUser DeleterUser { get; public set; }
    public TUser CreatorUser { get; public set; }
    public TUser LastModifierUser { get; public set; }
    protected AbpRole`1(Nullable`1<int> tenantId, string displayName);
    protected AbpRole`1(Nullable`1<int> tenantId, string name, string displayName);
    [CompilerGeneratedAttribute]
public virtual string get_NormalizedName();
    [CompilerGeneratedAttribute]
public virtual void set_NormalizedName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<RoleClaim> get_Claims();
    [CompilerGeneratedAttribute]
public virtual void set_Claims(ICollection`1<RoleClaim> value);
    [CompilerGeneratedAttribute]
public virtual string get_ConcurrencyStamp();
    [CompilerGeneratedAttribute]
public virtual void set_ConcurrencyStamp(string value);
    [CompilerGeneratedAttribute]
public virtual TUser get_DeleterUser();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_LastModifierUser();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUser(TUser value);
    public virtual void SetNormalizedName();
}
public class Abp.Authorization.Roles.AbpRoleManager`2 : RoleManager`1<TRole> {
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IRoleManagementConfig <RoleManagementConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureDependencyContext <FeatureDependencyContext>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpRoleStore`2<TRole, TUser> <AbpStore>k__BackingField;
    private IPermissionManager _permissionManager;
    private ICacheManager _cacheManager;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IRepository`2<OrganizationUnit, long> _organizationUnitRepository;
    private IRepository`2<OrganizationUnitRole, long> _organizationUnitRoleRepository;
    private IAsyncQueryableExecuter _asyncQueryableExecuter;
    public ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    public IAbpSession AbpSession { get; public set; }
    public IRoleManagementConfig RoleManagementConfig { get; }
    public FeatureDependencyContext FeatureDependencyContext { get; public set; }
    private IRolePermissionStore`1<TRole> RolePermissionStore { get; }
    protected AbpRoleStore`2<TRole, TUser> AbpStore { get; }
    public AbpRoleManager`2(AbpRoleStore`2<TRole, TUser> store, IEnumerable`1<IRoleValidator`1<TRole>> roleValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, ILogger`1<AbpRoleManager`2<TRole, TUser>> logger, IPermissionManager permissionManager, ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IRoleManagementConfig roleManagementConfig, IRepository`2<OrganizationUnit, long> organizationUnitRepository, IRepository`2<OrganizationUnitRole, long> organizationUnitRoleRepository);
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IRoleManagementConfig get_RoleManagementConfig();
    [CompilerGeneratedAttribute]
public FeatureDependencyContext get_FeatureDependencyContext();
    [CompilerGeneratedAttribute]
public void set_FeatureDependencyContext(FeatureDependencyContext value);
    private IRolePermissionStore`1<TRole> get_RolePermissionStore();
    [CompilerGeneratedAttribute]
protected AbpRoleStore`2<TRole, TUser> get_AbpStore();
    public virtual Task`1<IQueryable`1<TRole>> GetRolesAsync();
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<IsGrantedAsync>d__32")]
public virtual Task`1<bool> IsGrantedAsync(string roleName, string permissionName);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<IsGrantedAsync>d__33")]
public virtual Task`1<bool> IsGrantedAsync(int roleId, string permissionName);
    public Task`1<bool> IsGrantedAsync(TRole role, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<IsGrantedAsync>d__35")]
public virtual Task`1<bool> IsGrantedAsync(int roleId, Permission permission);
    public virtual bool IsGranted(int roleId, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetGrantedPermissionsAsync>d__37")]
public virtual Task`1<IReadOnlyList`1<Permission>> GetGrantedPermissionsAsync(int roleId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetGrantedPermissionsAsync>d__38")]
public virtual Task`1<IReadOnlyList`1<Permission>> GetGrantedPermissionsAsync(string roleName);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetGrantedPermissionsAsync>d__39")]
public virtual Task`1<IReadOnlyList`1<Permission>> GetGrantedPermissionsAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<SetGrantedPermissionsAsync>d__40")]
public virtual Task SetGrantedPermissionsAsync(int roleId, IEnumerable`1<Permission> permissions);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<SetGrantedPermissionsAsync>d__41")]
public virtual Task SetGrantedPermissionsAsync(TRole role, IEnumerable`1<Permission> permissions);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GrantPermissionAsync>d__42")]
public Task GrantPermissionAsync(TRole role, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<ProhibitPermissionAsync>d__43")]
public Task ProhibitPermissionAsync(TRole role, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<ProhibitAllPermissionsAsync>d__44")]
public Task ProhibitAllPermissionsAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<ResetAllPermissionsAsync>d__45")]
public Task ResetAllPermissionsAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<CreateAsync>d__46")]
public virtual Task`1<IdentityResult> CreateAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<UpdateAsync>d__47")]
public virtual Task`1<IdentityResult> UpdateAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<DeleteAsync>d__48")]
public virtual Task`1<IdentityResult> DeleteAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetRoleByIdAsync>d__49")]
public virtual Task`1<TRole> GetRoleByIdAsync(int roleId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetRoleByNameAsync>d__50")]
public virtual Task`1<TRole> GetRoleByNameAsync(string roleName);
    public virtual TRole GetRoleByName(string roleName);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GrantAllPermissionsAsync>d__52")]
public Task GrantAllPermissionsAsync(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<CreateStaticRoles>d__53")]
public virtual Task`1<IdentityResult> CreateStaticRoles(int tenantId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<CheckDuplicateRoleNameAsync>d__54")]
public virtual Task`1<IdentityResult> CheckDuplicateRoleNameAsync(Nullable`1<int> expectedRoleId, string name, string displayName);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetRolesInOrganizationUnitAsync>d__55")]
public virtual Task`1<List`1<TRole>> GetRolesInOrganizationUnitAsync(OrganizationUnit organizationUnit, bool includeChildren);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<SetOrganizationUnitsAsync>d__56")]
public virtual Task SetOrganizationUnitsAsync(int roleId, Int64[] organizationUnitIds);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<SetOrganizationUnitsAsync>d__57")]
public virtual Task SetOrganizationUnitsAsync(TRole role, Int64[] organizationUnitIds);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<IsInOrganizationUnitAsync>d__58")]
public virtual Task`1<bool> IsInOrganizationUnitAsync(int roleId, long ouId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<IsInOrganizationUnitAsync>d__59")]
public virtual Task`1<bool> IsInOrganizationUnitAsync(TRole role, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<AddToOrganizationUnitAsync>d__60")]
public virtual Task AddToOrganizationUnitAsync(int roleId, long ouId, Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<AddToOrganizationUnitAsync>d__61")]
public virtual Task AddToOrganizationUnitAsync(TRole role, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<RemoveFromOrganizationUnitAsync>d__62")]
public Task RemoveFromOrganizationUnitAsync(int roleId, long organizationUnitId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<RemoveFromOrganizationUnitAsync>d__63")]
public virtual Task RemoveFromOrganizationUnitAsync(TRole role, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetOrganizationUnitsAsync>d__64")]
public virtual Task`1<List`1<OrganizationUnit>> GetOrganizationUnitsAsync(TRole role);
    private Task`1<TRole> FindByDisplayNameAsync(string displayName);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleManager`2/<GetRolePermissionCacheItemAsync>d__66")]
private Task`1<RolePermissionCacheItem> GetRolePermissionCacheItemAsync(int roleId);
    private RolePermissionCacheItem GetRolePermissionCacheItem(int roleId);
    protected virtual string L(string name);
    protected virtual string L(string name, CultureInfo cultureInfo);
    protected virtual TRole MapStaticRoleDefinitionToRole(int tenantId, StaticRoleDefinition staticRoleDefinition);
    private Nullable`1<int> GetCurrentTenantId();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__0(TRole role);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__1(TRole role);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__2(TRole role);
    [CompilerGeneratedAttribute]
private bool <GrantAllPermissionsAsync>b__52_0(Permission permission);
}
public class Abp.Authorization.Roles.AbpRoleStore`2 : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    private IRepository`1<TRole> _roleRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IRepository`2<RolePermissionSetting, long> _rolePermissionSettingRepository;
    public ILogger Logger { get; public set; }
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public bool AutoSaveChanges { get; public set; }
    public IQueryable`1<TRole> Roles { get; }
    public AbpRoleStore`2(IUnitOfWorkManager unitOfWorkManager, IRepository`1<TRole> roleRepository, IRepository`2<RolePermissionSetting, long> rolePermissionSettingRepository);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    public sealed virtual IQueryable`1<TRole> get_Roles();
    public virtual Task`1<IQueryable`1<TRole>> GetRolesAsync();
    protected Task SaveChanges(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<CreateAsync>d__20")]
public virtual Task`1<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<UpdateAsync>d__21")]
public virtual Task`1<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<DeleteAsync>d__22")]
public virtual Task`1<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken);
    public sealed virtual Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<FindByIdAsync>d__26")]
public virtual Task`1<TRole> FindByIdAsync(string id, CancellationToken cancellationToken);
    public virtual TRole FindById(string id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<FindByNameAsync>d__28")]
public virtual Task`1<TRole> FindByNameAsync(string normalizedName, CancellationToken cancellationToken);
    public virtual TRole FindByName(string normalizedName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken);
    public virtual Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<GetClaimsAsync>d__33")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<AddClaimAsync>d__34")]
public sealed virtual Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<RemoveClaimAsync>d__35")]
public sealed virtual Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<FindByDisplayNameAsync>d__36")]
public virtual Task`1<TRole> FindByDisplayNameAsync(string displayName);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<AddPermissionAsync>d__37")]
public virtual Task AddPermissionAsync(TRole role, PermissionGrantInfo permissionGrant);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<RemovePermissionAsync>d__38")]
public virtual Task RemovePermissionAsync(TRole role, PermissionGrantInfo permissionGrant);
    public virtual Task`1<IList`1<PermissionGrantInfo>> GetPermissionsAsync(TRole role);
    public virtual IList`1<PermissionGrantInfo> GetPermissions(TRole role);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<GetPermissionsAsync>d__41")]
public sealed virtual Task`1<IList`1<PermissionGrantInfo>> GetPermissionsAsync(int roleId);
    public sealed virtual IList`1<PermissionGrantInfo> GetPermissions(int roleId);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<HasPermissionAsync>d__43")]
public virtual Task`1<bool> HasPermissionAsync(int roleId, PermissionGrantInfo permissionGrant);
    [AsyncStateMachineAttribute("Abp.Authorization.Roles.AbpRoleStore`2/<RemoveAllPermissionSettingsAsync>d__44")]
public virtual Task RemoveAllPermissionSettingsAsync(TRole role);
}
public class Abp.Authorization.Users.AbpLoginResult`2 : object {
    [CompilerGeneratedAttribute]
private AbpLoginResultType <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <FailReason>k__BackingField;
    [CompilerGeneratedAttribute]
private TTenant <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <User>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    public AbpLoginResultType Result { get; private set; }
    public ILocalizableString FailReason { get; private set; }
    public TTenant Tenant { get; private set; }
    public TUser User { get; private set; }
    public ClaimsIdentity Identity { get; private set; }
    public AbpLoginResult`2(AbpLoginResultType result, TTenant tenant, TUser user);
    public AbpLoginResult`2(TTenant tenant, TUser user, ClaimsIdentity identity);
    [CompilerGeneratedAttribute]
public AbpLoginResultType get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(AbpLoginResultType value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_FailReason();
    [CompilerGeneratedAttribute]
private void set_FailReason(ILocalizableString value);
    [CompilerGeneratedAttribute]
public TTenant get_Tenant();
    [CompilerGeneratedAttribute]
private void set_Tenant(TTenant value);
    [CompilerGeneratedAttribute]
public TUser get_User();
    [CompilerGeneratedAttribute]
private void set_User(TUser value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    public void SetFailReason(ILocalizableString failReason);
    public string GetFailReason(ILocalizationContext localizationContext);
}
public abstract class Abp.Authorization.Users.AbpUser`1 : AbpUserBase {
    public static int MaxConcurrencyStampLength;
    [CompilerGeneratedAttribute]
private string <NormalizedUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalizedEmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConcurrencyStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<UserToken> <Tokens>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <DeleterUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <LastModifierUser>k__BackingField;
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string NormalizedUserName { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("256")]
public string NormalizedEmailAddress { get; public set; }
    [StringLengthAttribute("128")]
public string ConcurrencyStamp { get; public set; }
    public ICollection`1<UserToken> Tokens { get; public set; }
    public TUser DeleterUser { get; public set; }
    public TUser CreatorUser { get; public set; }
    public TUser LastModifierUser { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_NormalizedUserName();
    [CompilerGeneratedAttribute]
public virtual void set_NormalizedUserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NormalizedEmailAddress();
    [CompilerGeneratedAttribute]
public virtual void set_NormalizedEmailAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConcurrencyStamp();
    [CompilerGeneratedAttribute]
public virtual void set_ConcurrencyStamp(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<UserToken> get_Tokens();
    [CompilerGeneratedAttribute]
public virtual void set_Tokens(ICollection`1<UserToken> value);
    [CompilerGeneratedAttribute]
public virtual TUser get_DeleterUser();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_LastModifierUser();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUser(TUser value);
    public virtual void SetNormalizedNames();
}
public class Abp.Authorization.Users.AbpUserManager`2 : UserManager`1<TUser> {
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureDependencyContext <FeatureDependencyContext>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpRoleManager`2<TRole, TUser> <RoleManager>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpUserStore`2<TRole, TUser> <AbpUserStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IMultiTenancyConfig <MultiTenancy>k__BackingField;
    private IPermissionManager _permissionManager;
    private IUnitOfWorkManager _unitOfWorkManager;
    private ICacheManager _cacheManager;
    private IRepository`2<OrganizationUnit, long> _organizationUnitRepository;
    private IRepository`2<UserOrganizationUnit, long> _userOrganizationUnitRepository;
    private IOrganizationUnitSettings _organizationUnitSettings;
    private ISettingManager _settingManager;
    private IOptions`1<IdentityOptions> _optionsAccessor;
    private IRepository`2<UserLogin, long> _userLoginRepository;
    private IAsyncQueryableExecuter _asyncQueryableExecuter;
    protected IUserPermissionStore`1<TUser> UserPermissionStore { get; }
    public ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    public IAbpSession AbpSession { get; public set; }
    public FeatureDependencyContext FeatureDependencyContext { get; public set; }
    protected AbpRoleManager`2<TRole, TUser> RoleManager { get; }
    protected AbpUserStore`2<TRole, TUser> AbpUserStore { get; }
    public IMultiTenancyConfig MultiTenancy { get; public set; }
    public AbpUserManager`2(AbpRoleManager`2<TRole, TUser> roleManager, AbpUserStore`2<TRole, TUser> userStore, IOptions`1<IdentityOptions> optionsAccessor, IPasswordHasher`1<TUser> passwordHasher, IEnumerable`1<IUserValidator`1<TUser>> userValidators, IEnumerable`1<IPasswordValidator`1<TUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger`1<UserManager`1<TUser>> logger, IPermissionManager permissionManager, IUnitOfWorkManager unitOfWorkManager, ICacheManager cacheManager, IRepository`2<OrganizationUnit, long> organizationUnitRepository, IRepository`2<UserOrganizationUnit, long> userOrganizationUnitRepository, IOrganizationUnitSettings organizationUnitSettings, ISettingManager settingManager, IRepository`2<UserLogin, long> userLoginRepository);
    protected IUserPermissionStore`1<TUser> get_UserPermissionStore();
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public FeatureDependencyContext get_FeatureDependencyContext();
    [CompilerGeneratedAttribute]
public void set_FeatureDependencyContext(FeatureDependencyContext value);
    [CompilerGeneratedAttribute]
protected AbpRoleManager`2<TRole, TUser> get_RoleManager();
    [CompilerGeneratedAttribute]
protected AbpUserStore`2<TRole, TUser> get_AbpUserStore();
    [CompilerGeneratedAttribute]
public IMultiTenancyConfig get_MultiTenancy();
    [CompilerGeneratedAttribute]
public void set_MultiTenancy(IMultiTenancyConfig value);
    public virtual Task`1<IQueryable`1<TUser>> GetUsersAsync();
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<CreateAsync>d__40")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<IsGrantedAsync>d__41")]
public virtual Task`1<bool> IsGrantedAsync(long userId, string permissionName);
    public virtual bool IsGranted(long userId, string permissionName);
    public virtual Task`1<bool> IsGrantedAsync(TUser user, Permission permission);
    public virtual bool IsGranted(TUser user, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<IsGrantedAsync>d__45")]
public virtual Task`1<bool> IsGrantedAsync(long userId, Permission permission);
    public virtual bool IsGranted(long userId, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GetGrantedPermissionsAsync>d__47")]
public virtual Task`1<IReadOnlyList`1<Permission>> GetGrantedPermissionsAsync(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<SetGrantedPermissionsAsync>d__48")]
public virtual Task SetGrantedPermissionsAsync(TUser user, IEnumerable`1<Permission> permissions);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<ProhibitAllPermissionsAsync>d__49")]
public Task ProhibitAllPermissionsAsync(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<ResetAllPermissionsAsync>d__50")]
public Task ResetAllPermissionsAsync(TUser user);
    public void ResetAllPermissions(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GrantPermissionAsync>d__52")]
public virtual Task GrantPermissionAsync(TUser user, Permission permission);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<ProhibitPermissionAsync>d__53")]
public virtual Task ProhibitPermissionAsync(TUser user, Permission permission);
    public virtual Task`1<TUser> FindByNameOrEmailAsync(string userNameOrEmailAddress);
    public virtual TUser FindByNameOrEmail(string userNameOrEmailAddress);
    public virtual Task`1<List`1<TUser>> FindAllAsync(UserLoginInfo login);
    public virtual List`1<TUser> FindAll(UserLoginInfo login);
    public virtual Task`1<TUser> FindAsync(Nullable`1<int> tenantId, UserLoginInfo login);
    public virtual TUser Find(Nullable`1<int> tenantId, UserLoginInfo login);
    public virtual Task`1<TUser> FindByNameOrEmailAsync(Nullable`1<int> tenantId, string userNameOrEmailAddress);
    public virtual TUser FindByNameOrEmail(Nullable`1<int> tenantId, string userNameOrEmailAddress);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GetUserByIdAsync>d__62")]
public virtual Task`1<TUser> GetUserByIdAsync(long userId);
    public virtual TUser GetUserById(long userId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<UpdateAsync>d__64")]
public virtual Task`1<IdentityResult> UpdateAsync(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<DeleteAsync>d__65")]
public virtual Task`1<IdentityResult> DeleteAsync(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<ChangePasswordAsync>d__66")]
public virtual Task`1<IdentityResult> ChangePasswordAsync(TUser user, string newPassword);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<CheckDuplicateUsernameOrEmailAddressAsync>d__67")]
public virtual Task`1<IdentityResult> CheckDuplicateUsernameOrEmailAddressAsync(Nullable`1<long> expectedUserId, string userName, string emailAddress);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<SetRolesAsync>d__68")]
public virtual Task`1<IdentityResult> SetRolesAsync(TUser user, String[] roleNames);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<IsInOrganizationUnitAsync>d__69")]
public virtual Task`1<bool> IsInOrganizationUnitAsync(long userId, long ouId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<IsInOrganizationUnitAsync>d__70")]
public virtual Task`1<bool> IsInOrganizationUnitAsync(TUser user, OrganizationUnit ou);
    public virtual bool IsInOrganizationUnit(TUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<AddToOrganizationUnitAsync>d__72")]
public virtual Task AddToOrganizationUnitAsync(long userId, long ouId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<AddToOrganizationUnitAsync>d__73")]
public virtual Task AddToOrganizationUnitAsync(TUser user, OrganizationUnit ou);
    public virtual void AddToOrganizationUnit(TUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<RemoveFromOrganizationUnitAsync>d__75")]
public virtual Task RemoveFromOrganizationUnitAsync(long userId, long ouId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<RemoveFromOrganizationUnitAsync>d__76")]
public virtual Task RemoveFromOrganizationUnitAsync(TUser user, OrganizationUnit ou);
    public virtual void RemoveFromOrganizationUnit(TUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<SetOrganizationUnitsAsync>d__78")]
public virtual Task SetOrganizationUnitsAsync(long userId, Int64[] organizationUnitIds);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<CheckMaxUserOrganizationUnitMembershipCountAsync>d__79")]
private Task CheckMaxUserOrganizationUnitMembershipCountAsync(Nullable`1<int> tenantId, int requestedCount);
    private void CheckMaxUserOrganizationUnitMembershipCount(Nullable`1<int> tenantId, int requestedCount);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<SetOrganizationUnitsAsync>d__81")]
public virtual Task SetOrganizationUnitsAsync(TUser user, Int64[] organizationUnitIds);
    public virtual void SetOrganizationUnits(TUser user, Int64[] organizationUnitIds);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GetOrganizationUnitsAsync>d__83")]
public virtual Task`1<List`1<OrganizationUnit>> GetOrganizationUnitsAsync(TUser user);
    public virtual List`1<OrganizationUnit> GetOrganizationUnits(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GetUsersInOrganizationUnitAsync>d__85")]
public virtual Task`1<List`1<TUser>> GetUsersInOrganizationUnitAsync(OrganizationUnit organizationUnit, bool includeChildren);
    public virtual List`1<TUser> GetUsersInOrganizationUnit(OrganizationUnit organizationUnit, bool includeChildren);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<InitializeOptionsAsync>d__87")]
public virtual Task InitializeOptionsAsync(Nullable`1<int> tenantId);
    public virtual void InitializeOptions(Nullable`1<int> tenantId);
    protected virtual Task`1<string> GetOldUserNameAsync(long userId);
    protected virtual string GetOldUserName(long userId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GetUserPermissionCacheItemAsync>d__91")]
private Task`1<UserPermissionCacheItem> GetUserPermissionCacheItemAsync(long userId);
    private UserPermissionCacheItem GetUserPermissionCacheItem(long userId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<GetValidTwoFactorProvidersAsync>d__93")]
public virtual Task`1<IList`1<string>> GetValidTwoFactorProvidersAsync(TUser user);
    private bool IsTrue(string settingName, Nullable`1<int> tenantId);
    private Task`1<bool> IsTrueAsync(string settingName, Nullable`1<int> tenantId);
    private T GetSettingValue(string settingName, Nullable`1<int> tenantId);
    private Task`1<T> GetSettingValueAsync(string settingName, Nullable`1<int> tenantId);
    protected virtual string L(string name);
    protected virtual string L(string name, CultureInfo cultureInfo);
    private Nullable`1<int> GetCurrentTenantId();
    private MultiTenancySides GetCurrentMultiTenancySide();
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<AddTokenValidityKeyAsync>d__102")]
public virtual Task AddTokenValidityKeyAsync(TUser user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    public virtual void AddTokenValidityKey(TUser user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<AddTokenValidityKeyAsync>d__104")]
public virtual Task AddTokenValidityKeyAsync(UserIdentifier user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    public virtual void AddTokenValidityKey(UserIdentifier user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<IsTokenValidityKeyValidAsync>d__106")]
public virtual Task`1<bool> IsTokenValidityKeyValidAsync(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    public virtual bool IsTokenValidityKeyValid(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserManager`2/<RemoveTokenValidityKeyAsync>d__108")]
public virtual Task RemoveTokenValidityKeyAsync(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    public virtual void RemoveTokenValidityKey(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    public bool IsLockedOut(string userId);
    public bool IsLockedOut(TUser user);
    public void ResetAccessFailedCount(TUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__0(TUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__1(TUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__2(TUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IList`1<string>> <>n__3(TUser user);
}
public class Abp.Authorization.Users.AbpUserStore`2 : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`2<TUser, long> <UserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    private IRepository`1<TRole> _roleRepository;
    private IRepository`2<UserRole, long> _userRoleRepository;
    private IRepository`2<UserLogin, long> _userLoginRepository;
    private IRepository`2<UserClaim, long> _userClaimRepository;
    private IRepository`2<UserPermissionSetting, long> _userPermissionSettingRepository;
    private IRepository`2<UserOrganizationUnit, long> _userOrganizationUnitRepository;
    private IRepository`2<OrganizationUnitRole, long> _organizationUnitRoleRepository;
    private IRepository`2<UserToken, long> _userTokenRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    private static string InternalLoginProvider;
    private static string AuthenticatorKeyTokenName;
    private static string TokenValidityKeyProvider;
    public ILogger Logger { get; public set; }
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public bool AutoSaveChanges { get; public set; }
    public IAbpSession AbpSession { get; public set; }
    public IQueryable`1<TUser> Users { get; }
    public IRepository`2<TUser, long> UserRepository { get; }
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    public AbpUserStore`2(IUnitOfWorkManager unitOfWorkManager, IRepository`2<TUser, long> userRepository, IRepository`1<TRole> roleRepository, IRepository`2<UserRole, long> userRoleRepository, IRepository`2<UserLogin, long> userLoginRepository, IRepository`2<UserClaim, long> userClaimRepository, IRepository`2<UserPermissionSetting, long> userPermissionSettingRepository, IRepository`2<UserOrganizationUnit, long> userOrganizationUnitRepository, IRepository`2<OrganizationUnitRole, long> organizationUnitRoleRepository, IRepository`2<UserToken, long> userTokenRepository);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    public sealed virtual IQueryable`1<TUser> get_Users();
    [CompilerGeneratedAttribute]
public IRepository`2<TUser, long> get_UserRepository();
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    public virtual Task`1<IQueryable`1<TUser>> GetUsersAsync();
    protected Task SaveChangesAsync(CancellationToken cancellationToken);
    protected void SaveChanges(CancellationToken cancellationToken);
    public virtual Task`1<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetUserId(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetUserName(TUser user, CancellationToken cancellationToken);
    public virtual Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken);
    public virtual void SetUserName(TUser user, string userName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetNormalizedUserName(TUser user, CancellationToken cancellationToken);
    public virtual Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken);
    public virtual void SetNormalizedUserName(TUser user, string normalizedName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<CreateAsync>d__48")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken);
    public virtual IdentityResult Create(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<UpdateAsync>d__50")]
public virtual Task`1<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken);
    public virtual IdentityResult Update(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<DeleteAsync>d__52")]
public virtual Task`1<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken);
    public virtual IdentityResult Delete(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindByIdAsync>d__54")]
public virtual Task`1<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken);
    public virtual TUser FindById(string userId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindByNameAsync>d__56")]
public virtual Task`1<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken);
    public virtual TUser FindByName(string normalizedUserName, CancellationToken cancellationToken);
    public virtual Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken);
    public virtual void SetPasswordHash(TUser user, string passwordHash, CancellationToken cancellationToken);
    public virtual Task`1<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetPasswordHash(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken);
    public virtual bool HasPassword(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<AddToRoleAsync>d__64")]
public virtual Task AddToRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    public virtual void AddToRole(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemoveFromRoleAsync>d__66")]
public virtual Task RemoveFromRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    public virtual void RemoveFromRole(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetRolesAsync>d__68")]
public virtual Task`1<IList`1<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken);
    public virtual IList`1<string> GetRoles(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<IsInRoleAsync>d__70")]
public virtual Task`1<bool> IsInRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    public virtual bool IsInRole(TUser user, string normalizedRoleName, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetClaimsAsync>d__73")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken);
    public virtual IList`1<Claim> GetClaims(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<AddClaimsAsync>d__75")]
public virtual Task AddClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    public virtual void AddClaims(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<ReplaceClaimAsync>d__77")]
public virtual Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken);
    public virtual void ReplaceClaim(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemoveClaimsAsync>d__79")]
public virtual Task RemoveClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    public virtual void RemoveClaims(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<AddLoginAsync>d__81")]
public virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken);
    public virtual void AddLogin(TUser user, UserLoginInfo login, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemoveLoginAsync>d__83")]
public virtual Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken);
    public virtual void RemoveLogin(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetLoginsAsync>d__85")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken);
    public virtual IList`1<UserLoginInfo> GetLogins(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindByLoginAsync>d__87")]
public virtual Task`1<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
    public virtual TUser FindByLogin(string loginProvider, string providerKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken);
    public virtual bool GetEmailConfirmed(TUser user, CancellationToken cancellationToken);
    public virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken);
    public virtual void SetEmailConfirmed(TUser user, bool confirmed, CancellationToken cancellationToken);
    public virtual Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken);
    public virtual void SetEmail(TUser user, string email, CancellationToken cancellationToken);
    public virtual Task`1<string> GetEmailAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetEmail(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetNormalizedEmail(TUser user, CancellationToken cancellationToken);
    public virtual Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken);
    public virtual void SetNormalizedEmail(TUser user, string normalizedEmail, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindByEmailAsync>d__101")]
public virtual Task`1<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken);
    public virtual TUser FindByEmail(string normalizedEmail, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken);
    public virtual Nullable`1<DateTimeOffset> GetLockoutEndDate(TUser user, CancellationToken cancellationToken);
    public virtual Task SetLockoutEndDateAsync(TUser user, Nullable`1<DateTimeOffset> lockoutEnd, CancellationToken cancellationToken);
    public virtual void SetLockoutEndDate(TUser user, Nullable`1<DateTimeOffset> lockoutEnd, CancellationToken cancellationToken);
    public virtual Task`1<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken);
    public virtual int IncrementAccessFailedCount(TUser user, CancellationToken cancellationToken);
    public virtual Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken);
    public virtual void ResetAccessFailedCount(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken);
    public virtual int GetAccessFailedCount(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken);
    public virtual bool GetLockoutEnabled(TUser user, CancellationToken cancellationToken);
    public virtual Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken);
    public virtual void SetLockoutEnabled(TUser user, bool enabled, CancellationToken cancellationToken);
    public virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken);
    public virtual void SetPhoneNumber(TUser user, string phoneNumber, CancellationToken cancellationToken);
    public virtual Task`1<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetPhoneNumber(TUser user, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken);
    public virtual bool GetPhoneNumberConfirmed(TUser user, CancellationToken cancellationToken);
    public virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken);
    public virtual void SetPhoneNumberConfirmed(TUser user, bool confirmed, CancellationToken cancellationToken);
    public virtual Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken);
    public virtual void SetSecurityStamp(TUser user, string stamp, CancellationToken cancellationToken);
    public virtual Task`1<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetSecurityStamp(TUser user, CancellationToken cancellationToken);
    public virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken);
    public virtual void SetTwoFactorEnabled(TUser user, bool enabled, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken);
    public virtual bool GetTwoFactorEnabled(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetUsersForClaimAsync>d__133")]
public virtual Task`1<IList`1<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken);
    public virtual IList`1<TUser> GetUsersForClaim(Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetUsersInRoleAsync>d__135")]
public virtual Task`1<IList`1<TUser>> GetUsersInRoleAsync(string normalizedRoleName, CancellationToken cancellationToken);
    public virtual IList`1<TUser> GetUsersInRole(string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<SetTokenAsync>d__137")]
public virtual Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken);
    public virtual void SetToken(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemoveTokenAsync>d__139")]
public virtual Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    public virtual void RemoveToken(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetTokenAsync>d__141")]
public virtual Task`1<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    public virtual string GetToken(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindByNameOrEmailAsync>d__143")]
public virtual Task`1<TUser> FindByNameOrEmailAsync(string userNameOrEmailAddress);
    public virtual TUser FindByNameOrEmail(string userNameOrEmailAddress);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindByNameOrEmailAsync>d__145")]
public virtual Task`1<TUser> FindByNameOrEmailAsync(Nullable`1<int> tenantId, string userNameOrEmailAddress);
    public virtual TUser FindByNameOrEmail(Nullable`1<int> tenantId, string userNameOrEmailAddress);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindAsync>d__147")]
public virtual Task`1<TUser> FindAsync(UserLoginInfo login);
    public virtual TUser Find(UserLoginInfo login);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindAllAsync>d__149")]
public virtual Task`1<List`1<TUser>> FindAllAsync(UserLoginInfo login);
    public virtual List`1<TUser> FindAll(UserLoginInfo login);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<FindAsync>d__151")]
public virtual Task`1<TUser> FindAsync(Nullable`1<int> tenantId, UserLoginInfo login);
    public virtual TUser Find(Nullable`1<int> tenantId, UserLoginInfo login);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetUserNameFromDatabaseAsync>d__153")]
public virtual Task`1<string> GetUserNameFromDatabaseAsync(long userId);
    public virtual string GetUserNameFromDatabase(long userId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<AddPermissionAsync>d__155")]
public virtual Task AddPermissionAsync(TUser user, PermissionGrantInfo permissionGrant);
    public virtual void AddPermission(TUser user, PermissionGrantInfo permissionGrant);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemovePermissionAsync>d__157")]
public virtual Task RemovePermissionAsync(TUser user, PermissionGrantInfo permissionGrant);
    public virtual void RemovePermission(TUser user, PermissionGrantInfo permissionGrant);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetPermissionsAsync>d__159")]
public virtual Task`1<IList`1<PermissionGrantInfo>> GetPermissionsAsync(long userId);
    public virtual IList`1<PermissionGrantInfo> GetPermissions(long userId);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<HasPermissionAsync>d__161")]
public virtual Task`1<bool> HasPermissionAsync(long userId, PermissionGrantInfo permissionGrant);
    public virtual bool HasPermission(long userId, PermissionGrantInfo permissionGrant);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemoveAllPermissionSettingsAsync>d__163")]
public virtual Task RemoveAllPermissionSettingsAsync(TUser user);
    public virtual void RemoveAllPermissionSettings(TUser user);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<SetAuthenticatorKeyAsync>d__168")]
public virtual Task SetAuthenticatorKeyAsync(TUser user, string key, CancellationToken cancellationToken);
    public virtual void SetAuthenticatorKey(TUser user, string key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<GetAuthenticatorKeyAsync>d__170")]
public virtual Task`1<string> GetAuthenticatorKeyAsync(TUser user, CancellationToken cancellationToken);
    public virtual string GetAuthenticatorKey(TUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<AddTokenValidityKeyAsync>d__172")]
public virtual Task AddTokenValidityKeyAsync(TUser user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    public virtual void AddTokenValidityKey(TUser user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<AddTokenValidityKeyAsync>d__174")]
public virtual Task AddTokenValidityKeyAsync(UserIdentifier user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    public virtual void AddTokenValidityKey(UserIdentifier user, string tokenValidityKey, DateTime expireDate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<IsTokenValidityKeyValidAsync>d__176")]
public virtual Task`1<bool> IsTokenValidityKeyValidAsync(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    public virtual bool IsTokenValidityKeyValid(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Authorization.Users.AbpUserStore`2/<RemoveTokenValidityKeyAsync>d__178")]
public virtual Task RemoveTokenValidityKeyAsync(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    public virtual void RemoveTokenValidityKey(TUser user, string tokenValidityKey, CancellationToken cancellationToken);
    protected virtual string NormalizeKey(string key);
}
[TableAttribute("AbpUserTokens")]
public class Abp.Authorization.Users.UserToken : Entity`1<long> {
    public static int MaxLoginProviderLength;
    public static int MaxNameLength;
    public static int MaxValueLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireDate>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    [StringLengthAttribute("128")]
public string LoginProvider { get; public set; }
    [StringLengthAttribute("128")]
public string Name { get; public set; }
    [StringLengthAttribute("512")]
public string Value { get; public set; }
    public Nullable`1<DateTime> ExpireDate { get; public set; }
    protected internal UserToken(AbpUserBase user, string loginProvider, string name, string value, Nullable`1<DateTime> expireDate);
    protected internal UserToken(UserIdentifier user, string loginProvider, string name, string value, Nullable`1<DateTime> expireDate);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
public virtual void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_ExpireDate();
    [CompilerGeneratedAttribute]
public virtual void set_ExpireDate(Nullable`1<DateTime> value);
}
public class Abp.Authorization.Users.UserTokenExpirationWorker`2 : PeriodicBackgroundWorkerBase {
    private IRepository`2<UserToken, long> _userTokenRepository;
    private IRepository`1<TTenant> _tenantRepository;
    private IUnitOfWorkManager _unitOfWorkManager;
    public UserTokenExpirationWorker`2(AbpTimer timer, IRepository`2<UserToken, long> userTokenRepository, IBackgroundJobConfiguration backgroundJobConfiguration, IUnitOfWorkManager unitOfWorkManager, IRepository`1<TTenant> tenantRepository);
    protected virtual void DoWork();
}
[ExtensionAttribute]
public static class Abp.IdentityFramework.IdentityResultExtensions : object {
    private static Dictionary`2<string, string> IdentityLocalizations;
    private static IdentityResultExtensions();
    [ExtensionAttribute]
public static void CheckErrors(IdentityResult identityResult);
    [ExtensionAttribute]
public static void CheckErrors(IdentityResult identityResult, ILocalizationManager localizationManager);
    [ExtensionAttribute]
public static string LocalizeErrors(IdentityResult identityResult, ILocalizationManager localizationManager);
    [ExtensionAttribute]
public static string LocalizeErrors(IdentityResult identityResult, ILocalizationManager localizationManager, string localizationSourceName);
    private static string LocalizeErrorMessage(string identityErrorMessage, ILocalizationSource localizationSource);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Abp.Zero.AbpZeroCoreModule : AbpModule {
    public virtual void PreInitialize();
    public virtual void Initialize();
    public virtual void PostInitialize();
    private void RegisterUserTokenExpirationWorker();
}
[ExtensionAttribute]
internal static class Abp.Zero.CollectionExtensions : object {
    [ExtensionAttribute]
public static IList`1<T> RemoveAll(ICollection`1<T> source, Func`2<T, bool> predicate);
}
internal class AbpZeroCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
public class Microsoft.Extensions.DependencyInjection.AbpIdentityBuilder : IdentityBuilder {
    [CompilerGeneratedAttribute]
private Type <TenantType>k__BackingField;
    public Type TenantType { get; }
    public AbpIdentityBuilder(IdentityBuilder identityBuilder, Type tenantType);
    [CompilerGeneratedAttribute]
public Type get_TenantType();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpZeroIdentityBuilderExtensions : object {
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpTenantManager(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpEditionManager(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpRoleManager(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpUserManager(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpSignInManager(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpLogInManager(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpUserClaimsPrincipalFactory(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpSecurityStampValidator(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddPermissionChecker(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpUserStore(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpRoleStore(AbpIdentityBuilder builder);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddFeatureValueStore(AbpIdentityBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpZeroServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpIdentity(IServiceCollection services);
    [ExtensionAttribute]
public static AbpIdentityBuilder AddAbpIdentity(IServiceCollection services, Action`1<IdentityOptions> setupAction);
}
