internal class Abp_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
public class Abp.AbpBootstrapper : object {
    [CompilerGeneratedAttribute]
private Type <StartupModule>k__BackingField;
    [CompilerGeneratedAttribute]
private PlugInSourceList <PlugInSources>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    protected bool IsDisposed;
    private AbpModuleManager _moduleManager;
    private ILogger _logger;
    public Type StartupModule { get; }
    public PlugInSourceList PlugInSources { get; }
    public IIocManager IocManager { get; }
    private AbpBootstrapper(Type startupModule, Action`1<AbpBootstrapperOptions> optionsAction);
    [CompilerGeneratedAttribute]
public Type get_StartupModule();
    [CompilerGeneratedAttribute]
public PlugInSourceList get_PlugInSources();
    [CompilerGeneratedAttribute]
public IIocManager get_IocManager();
    public static AbpBootstrapper Create(Action`1<AbpBootstrapperOptions> optionsAction);
    public static AbpBootstrapper Create(Type startupModule, Action`1<AbpBootstrapperOptions> optionsAction);
    private void AddInterceptorRegistrars(AbpBootstrapperInterceptorOptions options);
    public virtual void Initialize();
    private void ResolveLogger();
    private void RegisterBootstrapper();
    public virtual void Dispose();
}
public class Abp.AbpBootstrapperInterceptorOptions : object {
    [CompilerGeneratedAttribute]
private bool <DisableValidationInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAuditingInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableEntityHistoryInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableUnitOfWorkInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAuthorizationInterceptor>k__BackingField;
    public bool DisableValidationInterceptor { get; public set; }
    public bool DisableAuditingInterceptor { get; public set; }
    public bool DisableEntityHistoryInterceptor { get; public set; }
    public bool DisableUnitOfWorkInterceptor { get; public set; }
    public bool DisableAuthorizationInterceptor { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableValidationInterceptor();
    [CompilerGeneratedAttribute]
public void set_DisableValidationInterceptor(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAuditingInterceptor();
    [CompilerGeneratedAttribute]
public void set_DisableAuditingInterceptor(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableEntityHistoryInterceptor();
    [CompilerGeneratedAttribute]
public void set_DisableEntityHistoryInterceptor(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableUnitOfWorkInterceptor();
    [CompilerGeneratedAttribute]
public void set_DisableUnitOfWorkInterceptor(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAuthorizationInterceptor();
    [CompilerGeneratedAttribute]
public void set_DisableAuthorizationInterceptor(bool value);
}
public class Abp.AbpBootstrapperOptions : object {
    [CompilerGeneratedAttribute]
private AbpBootstrapperInterceptorOptions <InterceptorOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    [CompilerGeneratedAttribute]
private PlugInSourceList <PlugInSources>k__BackingField;
    public AbpBootstrapperInterceptorOptions InterceptorOptions { get; public set; }
    public IIocManager IocManager { get; public set; }
    public PlugInSourceList PlugInSources { get; }
    [CompilerGeneratedAttribute]
public AbpBootstrapperInterceptorOptions get_InterceptorOptions();
    [CompilerGeneratedAttribute]
public void set_InterceptorOptions(AbpBootstrapperInterceptorOptions value);
    [CompilerGeneratedAttribute]
public IIocManager get_IocManager();
    [CompilerGeneratedAttribute]
public void set_IocManager(IIocManager value);
    [CompilerGeneratedAttribute]
public PlugInSourceList get_PlugInSources();
}
public static class Abp.AbpConsts : object {
    public static string LocalizationSourceName;
}
public class Abp.AbpException : Exception {
    public AbpException(SerializationInfo serializationInfo, StreamingContext context);
    public AbpException(string message);
    public AbpException(string message, Exception innerException);
}
public class Abp.AbpInitializationException : AbpException {
    public AbpInitializationException(SerializationInfo serializationInfo, StreamingContext context);
    public AbpInitializationException(string message);
    public AbpInitializationException(string message, Exception innerException);
}
public class Abp.AbpKernelModule : AbpModule {
    public virtual void PreInitialize();
    public virtual void Initialize();
    private void RegisterInterceptors();
    public virtual void PostInitialize();
    public virtual void Shutdown();
    private void AddUnitOfWorkFilters();
    private void AddUnitOfWorkAuditFieldConfiguration();
    private void AddSettingProviders();
    private void AddAuditingSelectors();
    private void AddLocalizationSources();
    private void ConfigureCaches();
    private void AddIgnoredTypes();
    private void AddMethodParameterValidators();
    private void RegisterMissingComponents();
}
public abstract class Abp.AbpServiceBase : object {
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    private ILocalizationSource _localizationSource;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectMapper <ObjectMapper>k__BackingField;
    public ISettingManager SettingManager { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    protected IActiveUnitOfWork CurrentUnitOfWork { get; }
    public ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    protected ILocalizationSource LocalizationSource { get; }
    protected ILogger Logger { get; public set; }
    public IObjectMapper ObjectMapper { get; public set; }
    [CompilerGeneratedAttribute]
public ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    public IUnitOfWorkManager get_UnitOfWorkManager();
    public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    protected IActiveUnitOfWork get_CurrentUnitOfWork();
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    protected ILocalizationSource get_LocalizationSource();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
public void set_ObjectMapper(IObjectMapper value);
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
}
[DefaultMemberAttribute("Item")]
public class Abp.Application.Features.Feature : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Feature <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IInputType <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureScopes <Scope>k__BackingField;
    private List`1<Feature> _children;
    public object Item { get; public set; }
    public IDictionary`2<string, object> Attributes { get; private set; }
    public Feature Parent { get; private set; }
    public string Name { get; private set; }
    public ILocalizableString DisplayName { get; public set; }
    public ILocalizableString Description { get; public set; }
    public IInputType InputType { get; public set; }
    public string DefaultValue { get; public set; }
    public FeatureScopes Scope { get; public set; }
    public IReadOnlyList`1<Feature> Children { get; }
    public Feature(string name, string defaultValue, ILocalizableString displayName, ILocalizableString description, FeatureScopes scope, IInputType inputType);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Feature get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Feature value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(ILocalizableString value);
    [CompilerGeneratedAttribute]
public IInputType get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(IInputType value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public FeatureScopes get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(FeatureScopes value);
    public IReadOnlyList`1<Feature> get_Children();
    public Feature CreateChildFeature(string name, string defaultValue, ILocalizableString displayName, ILocalizableString description, FeatureScopes scope, IInputType inputType);
    public void RemoveChildFeature(string name);
    public virtual string ToString();
}
public class Abp.Application.Features.FeatureChecker : object {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureValueStore <FeatureValueStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    private IFeatureManager _featureManager;
    private IMultiTenancyConfig _multiTenancyConfig;
    public IAbpSession AbpSession { get; public set; }
    public IFeatureValueStore FeatureValueStore { get; public set; }
    public IIocManager IocManager { get; public set; }
    public FeatureChecker(IFeatureManager featureManager, IMultiTenancyConfig multiTenancyConfig);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IFeatureValueStore get_FeatureValueStore();
    [CompilerGeneratedAttribute]
public void set_FeatureValueStore(IFeatureValueStore value);
    [CompilerGeneratedAttribute]
public sealed virtual IIocManager get_IocManager();
    [CompilerGeneratedAttribute]
public void set_IocManager(IIocManager value);
    public sealed virtual Task`1<string> GetValueAsync(string name);
    public sealed virtual string GetValue(string name);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureChecker/<GetValueAsync>d__17")]
public sealed virtual Task`1<string> GetValueAsync(int tenantId, string name);
    public sealed virtual string GetValue(int tenantId, string name);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureChecker/<IsEnabledAsync>d__19")]
public sealed virtual Task`1<bool> IsEnabledAsync(string featureName);
    public sealed virtual bool IsEnabled(string featureName);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureChecker/<IsEnabledAsync>d__21")]
public sealed virtual Task`1<bool> IsEnabledAsync(int tenantId, string featureName);
    public sealed virtual bool IsEnabled(int tenantId, string featureName);
}
[ExtensionAttribute]
public static class Abp.Application.Features.FeatureCheckerExtensions : object {
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureCheckerExtensions/<IsEnabledAsync>d__0")]
[ExtensionAttribute]
public static Task`1<bool> IsEnabledAsync(IFeatureChecker featureChecker, bool requiresAll, String[] featureNames);
    [ExtensionAttribute]
public static bool IsEnabled(IFeatureChecker featureChecker, bool requiresAll, String[] featureNames);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureCheckerExtensions/<IsEnabledAsync>d__2")]
[ExtensionAttribute]
public static Task`1<bool> IsEnabledAsync(IFeatureChecker featureChecker, int tenantId, bool requiresAll, String[] featureNames);
    [ExtensionAttribute]
public static bool IsEnabled(IFeatureChecker featureChecker, int tenantId, bool requiresAll, String[] featureNames);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureCheckerExtensions/<CheckEnabledAsync>d__4")]
[ExtensionAttribute]
public static Task CheckEnabledAsync(IFeatureChecker featureChecker, string featureName);
    [ExtensionAttribute]
public static void CheckEnabled(IFeatureChecker featureChecker, string featureName);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureCheckerExtensions/<CheckEnabledAsync>d__6")]
[ExtensionAttribute]
public static Task CheckEnabledAsync(IFeatureChecker featureChecker, bool requiresAll, String[] featureNames);
    [ExtensionAttribute]
public static void CheckEnabled(IFeatureChecker featureChecker, bool requiresAll, String[] featureNames);
    [AsyncStateMachineAttribute("Abp.Application.Features.FeatureCheckerExtensions/<CheckEnabledAsync>d__8")]
[ExtensionAttribute]
public static Task CheckEnabledAsync(IFeatureChecker featureChecker, int tenantId, bool requiresAll, String[] featureNames);
    [ExtensionAttribute]
public static void CheckEnabled(IFeatureChecker featureChecker, int tenantId, bool requiresAll, String[] featureNames);
    public static string L(IFeatureChecker featureChecker, string name, string defaultValue);
    public static String[] LocalizeFeatureNames(IFeatureChecker featureChecker, String[] featureNames);
}
internal class Abp.Application.Features.FeatureConfiguration : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<FeatureProvider> <Providers>k__BackingField;
    public ITypeList`1<FeatureProvider> Providers { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<FeatureProvider> get_Providers();
}
public abstract class Abp.Application.Features.FeatureDefinitionContextBase : object {
    protected FeatureDictionary Features;
    public sealed virtual Feature Create(string name, string defaultValue, ILocalizableString displayName, ILocalizableString description, FeatureScopes scope, IInputType inputType);
    public sealed virtual Feature GetOrNull(string name);
    public sealed virtual void Remove(string name);
}
public class Abp.Application.Features.FeatureDependencyContext : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocResolver <IocResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureChecker <FeatureChecker>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public IIocResolver IocResolver { get; private set; }
    public IFeatureChecker FeatureChecker { get; private set; }
    public FeatureDependencyContext(IIocResolver iocResolver, IFeatureChecker featureChecker);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IIocResolver get_IocResolver();
    [CompilerGeneratedAttribute]
private void set_IocResolver(IIocResolver value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureChecker get_FeatureChecker();
    [CompilerGeneratedAttribute]
private void set_FeatureChecker(IFeatureChecker value);
}
public class Abp.Application.Features.FeatureDictionary : Dictionary`2<string, Feature> {
    public void AddAllFeatures();
    private void AddFeatureRecursively(Feature feature);
}
internal class Abp.Application.Features.FeatureManager : FeatureDefinitionContextBase {
    private IIocManager _iocManager;
    private IFeatureConfiguration _featureConfiguration;
    public FeatureManager(IIocManager iocManager, IFeatureConfiguration featureConfiguration);
    public void Initialize();
    public sealed virtual Feature Get(string name);
    public sealed virtual IReadOnlyList`1<Feature> GetAll();
    private IDisposableDependencyObjectWrapper`1<FeatureProvider> CreateProvider(Type providerType);
}
public abstract class Abp.Application.Features.FeatureProvider : object {
    public abstract virtual void SetFeatures(IFeatureDefinitionContext context);
}
[FlagsAttribute]
public enum Abp.Application.Features.FeatureScopes : Enum {
    public int value__;
    public static FeatureScopes Edition;
    public static FeatureScopes Tenant;
    public static FeatureScopes All;
}
public interface Abp.Application.Features.IFeatureChecker {
    public abstract virtual Task`1<string> GetValueAsync(string name);
    public abstract virtual string GetValue(string name);
    public abstract virtual Task`1<string> GetValueAsync(int tenantId, string name);
    public abstract virtual string GetValue(int tenantId, string name);
    public abstract virtual Task`1<bool> IsEnabledAsync(string featureName);
    public abstract virtual bool IsEnabled(string featureName);
    public abstract virtual Task`1<bool> IsEnabledAsync(int tenantId, string featureName);
    public abstract virtual bool IsEnabled(int tenantId, string featureName);
}
public interface Abp.Application.Features.IFeatureConfiguration {
    public ITypeList`1<FeatureProvider> Providers { get; }
    public abstract virtual ITypeList`1<FeatureProvider> get_Providers();
}
public interface Abp.Application.Features.IFeatureDefinitionContext {
    public abstract virtual Feature Create(string name, string defaultValue, ILocalizableString displayName, ILocalizableString description, FeatureScopes scope, IInputType inputType);
    public abstract virtual Feature GetOrNull(string name);
    public abstract virtual void Remove(string name);
}
public interface Abp.Application.Features.IFeatureDependency {
    public abstract virtual Task`1<bool> IsSatisfiedAsync(IFeatureDependencyContext context);
    public abstract virtual bool IsSatisfied(IFeatureDependencyContext context);
}
public interface Abp.Application.Features.IFeatureDependencyContext {
    public Nullable`1<int> TenantId { get; }
    public IIocResolver IocResolver { get; }
    public IFeatureChecker FeatureChecker { get; }
    public abstract virtual Nullable`1<int> get_TenantId();
    public abstract virtual IIocResolver get_IocResolver();
    public abstract virtual IFeatureChecker get_FeatureChecker();
}
public interface Abp.Application.Features.IFeatureManager {
    public abstract virtual Feature Get(string name);
    public abstract virtual Feature GetOrNull(string name);
    public abstract virtual IReadOnlyList`1<Feature> GetAll();
}
public interface Abp.Application.Features.IFeatureValueStore {
    public abstract virtual Task`1<string> GetValueOrNullAsync(int tenantId, Feature feature);
    public abstract virtual string GetValueOrNull(int tenantId, Feature feature);
}
public class Abp.Application.Features.NullFeatureValueStore : object {
    [CompilerGeneratedAttribute]
private static NullFeatureValueStore <Instance>k__BackingField;
    public static NullFeatureValueStore Instance { get; }
    private static NullFeatureValueStore();
    [CompilerGeneratedAttribute]
public static NullFeatureValueStore get_Instance();
    public sealed virtual Task`1<string> GetValueOrNullAsync(int tenantId, Feature feature);
    public sealed virtual string GetValueOrNull(int tenantId, Feature feature);
}
[AttributeUsageAttribute("68")]
public class Abp.Application.Features.RequiresFeatureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAll>k__BackingField;
    public String[] Features { get; private set; }
    public bool RequiresAll { get; public set; }
    public RequiresFeatureAttribute(String[] features);
    [CompilerGeneratedAttribute]
public String[] get_Features();
    [CompilerGeneratedAttribute]
private void set_Features(String[] value);
    [CompilerGeneratedAttribute]
public bool get_RequiresAll();
    [CompilerGeneratedAttribute]
public void set_RequiresAll(bool value);
}
public class Abp.Application.Features.SimpleFeatureDependency : object {
    [CompilerGeneratedAttribute]
private String[] <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAll>k__BackingField;
    public String[] Features { get; public set; }
    public bool RequiresAll { get; public set; }
    public SimpleFeatureDependency(String[] features);
    public SimpleFeatureDependency(bool requiresAll, String[] features);
    [CompilerGeneratedAttribute]
public String[] get_Features();
    [CompilerGeneratedAttribute]
public void set_Features(String[] value);
    [CompilerGeneratedAttribute]
public bool get_RequiresAll();
    [CompilerGeneratedAttribute]
public void set_RequiresAll(bool value);
    public sealed virtual Task`1<bool> IsSatisfiedAsync(IFeatureDependencyContext context);
    public sealed virtual bool IsSatisfied(IFeatureDependencyContext context);
}
[ExtensionAttribute]
public static class Abp.Application.Navigation.HasMenuItemDefinitionsExtensions : object {
    [ExtensionAttribute]
public static MenuItemDefinition GetItemByName(IHasMenuItemDefinitions source, string name);
    [ExtensionAttribute]
public static MenuItemDefinition GetItemByNameOrNull(IHasMenuItemDefinitions source, string name);
}
public interface Abp.Application.Navigation.IHasMenuItemDefinitions {
    public List`1<MenuItemDefinition> Items { get; }
    public abstract virtual List`1<MenuItemDefinition> get_Items();
}
public interface Abp.Application.Navigation.INavigationManager {
    public IDictionary`2<string, MenuDefinition> Menus { get; }
    public MenuDefinition MainMenu { get; }
    public abstract virtual IDictionary`2<string, MenuDefinition> get_Menus();
    public abstract virtual MenuDefinition get_MainMenu();
}
public interface Abp.Application.Navigation.INavigationProviderContext {
    public INavigationManager Manager { get; }
    public abstract virtual INavigationManager get_Manager();
}
public interface Abp.Application.Navigation.IUserNavigationManager {
    public abstract virtual Task`1<UserMenu> GetMenuAsync(string menuName, UserIdentifier user);
    public abstract virtual Task`1<IReadOnlyList`1<UserMenu>> GetMenusAsync(UserIdentifier user);
}
public class Abp.Application.Navigation.MenuDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MenuItemDefinition> <Items>k__BackingField;
    public string Name { get; private set; }
    public ILocalizableString DisplayName { get; public set; }
    public object CustomData { get; public set; }
    public List`1<MenuItemDefinition> Items { get; public set; }
    public MenuDefinition(string name, ILocalizableString displayName, object customData);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public object get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(object value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<MenuItemDefinition> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<MenuItemDefinition> value);
    public MenuDefinition AddItem(MenuItemDefinition menuItem);
    public void RemoveItem(string name);
}
public class Abp.Application.Navigation.MenuItemDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDependency <PermissionDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureDependency <FeatureDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MenuItemDefinition> <Items>k__BackingField;
    public string Name { get; }
    public ILocalizableString DisplayName { get; public set; }
    public int Order { get; public set; }
    public string Icon { get; public set; }
    public string Url { get; public set; }
    public IPermissionDependency PermissionDependency { get; public set; }
    public IFeatureDependency FeatureDependency { get; public set; }
    public bool RequiresAuthentication { get; public set; }
    public bool IsLeaf { get; }
    public string Target { get; public set; }
    public object CustomData { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsVisible { get; public set; }
    public List`1<MenuItemDefinition> Items { get; }
    public MenuItemDefinition(string name, ILocalizableString displayName, string icon, string url, bool requiresAuthentication, int order, object customData, IFeatureDependency featureDependency, string target, bool isEnabled, bool isVisible, IPermissionDependency permissionDependency);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public IPermissionDependency get_PermissionDependency();
    [CompilerGeneratedAttribute]
public void set_PermissionDependency(IPermissionDependency value);
    [CompilerGeneratedAttribute]
public IFeatureDependency get_FeatureDependency();
    [CompilerGeneratedAttribute]
public void set_FeatureDependency(IFeatureDependency value);
    [CompilerGeneratedAttribute]
public bool get_RequiresAuthentication();
    [CompilerGeneratedAttribute]
public void set_RequiresAuthentication(bool value);
    public bool get_IsLeaf();
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public object get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(object value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual List`1<MenuItemDefinition> get_Items();
    public MenuItemDefinition AddItem(MenuItemDefinition menuItem);
    public void RemoveItem(string name);
}
[ExtensionAttribute]
public static class Abp.Application.Navigation.MenuItemDefinitionExtensions : object {
    [ExtensionAttribute]
public static void MoveMenuItemToTop(IList`1<MenuItemDefinition> menuItems, string menuItemName);
    [ExtensionAttribute]
public static void MoveMenuItemToBottom(IList`1<MenuItemDefinition> menuItems, string menuItemName);
    [ExtensionAttribute]
public static void MoveMenuItemBefore(IList`1<MenuItemDefinition> menuItems, string menuItemName, string targetMenuItemName);
    [ExtensionAttribute]
public static void MoveMenuItemAfter(IList`1<MenuItemDefinition> menuItems, string menuItemName, string targetMenuItemName);
    private static MenuItemDefinition GetMenuItem(IEnumerable`1<MenuItemDefinition> menuItems, string menuItemName);
}
internal class Abp.Application.Navigation.NavigationManager : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MenuDefinition> <Menus>k__BackingField;
    private IIocResolver _iocResolver;
    private INavigationConfiguration _configuration;
    public IDictionary`2<string, MenuDefinition> Menus { get; private set; }
    public MenuDefinition MainMenu { get; }
    public NavigationManager(IIocResolver iocResolver, INavigationConfiguration configuration);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, MenuDefinition> get_Menus();
    [CompilerGeneratedAttribute]
private void set_Menus(IDictionary`2<string, MenuDefinition> value);
    public sealed virtual MenuDefinition get_MainMenu();
    public void Initialize();
}
public abstract class Abp.Application.Navigation.NavigationProvider : object {
    public abstract virtual void SetNavigation(INavigationProviderContext context);
}
internal class Abp.Application.Navigation.NavigationProviderContext : object {
    [CompilerGeneratedAttribute]
private INavigationManager <Manager>k__BackingField;
    public INavigationManager Manager { get; private set; }
    public NavigationProviderContext(INavigationManager manager);
    [CompilerGeneratedAttribute]
public sealed virtual INavigationManager get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(INavigationManager value);
}
public class Abp.Application.Navigation.UserMenu : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UserMenuItem> <Items>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public object CustomData { get; public set; }
    public IList`1<UserMenuItem> Items { get; public set; }
    internal UserMenu(MenuDefinition menuDefinition, ILocalizationContext localizationContext);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public object get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(object value);
    [CompilerGeneratedAttribute]
public IList`1<UserMenuItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<UserMenuItem> value);
}
public class Abp.Application.Navigation.UserMenuItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UserMenuItem> <Items>k__BackingField;
    public string Name { get; public set; }
    public string Icon { get; public set; }
    public string DisplayName { get; public set; }
    public int Order { get; public set; }
    public string Url { get; public set; }
    public object CustomData { get; public set; }
    public string Target { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsVisible { get; public set; }
    public IList`1<UserMenuItem> Items { get; public set; }
    public UserMenuItem(MenuItemDefinition menuItemDefinition, ILocalizationContext localizationContext);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public object get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(object value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public IList`1<UserMenuItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<UserMenuItem> value);
}
internal class Abp.Application.Navigation.UserNavigationManager : object {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private INavigationManager _navigationManager;
    private ILocalizationContext _localizationContext;
    private IIocResolver _iocResolver;
    public IAbpSession AbpSession { get; public set; }
    public UserNavigationManager(INavigationManager navigationManager, ILocalizationContext localizationContext, IIocResolver iocResolver);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [AsyncStateMachineAttribute("Abp.Application.Navigation.UserNavigationManager/<GetMenuAsync>d__8")]
public sealed virtual Task`1<UserMenu> GetMenuAsync(string menuName, UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Application.Navigation.UserNavigationManager/<GetMenusAsync>d__9")]
public sealed virtual Task`1<IReadOnlyList`1<UserMenu>> GetMenusAsync(UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Application.Navigation.UserNavigationManager/<FillUserMenuItems>d__10")]
private Task`1<int> FillUserMenuItems(UserIdentifier user, IList`1<MenuItemDefinition> menuItemDefinitions, IList`1<UserMenuItem> userMenuItems);
}
public abstract class Abp.Application.Services.ApplicationService : AbpServiceBase {
    public static String[] CommonPostfixes;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionManager <PermissionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureManager <FeatureManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureChecker <FeatureChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AppliedCrossCuttingConcerns>k__BackingField;
    public IAbpSession AbpSession { get; public set; }
    protected IPermissionManager PermissionManager { get; public set; }
    protected IPermissionChecker PermissionChecker { get; public set; }
    protected IFeatureManager FeatureManager { get; public set; }
    protected IFeatureChecker FeatureChecker { get; public set; }
    public List`1<string> AppliedCrossCuttingConcerns { get; }
    private static ApplicationService();
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
protected IPermissionManager get_PermissionManager();
    [CompilerGeneratedAttribute]
public void set_PermissionManager(IPermissionManager value);
    [CompilerGeneratedAttribute]
protected IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
    [CompilerGeneratedAttribute]
protected IFeatureManager get_FeatureManager();
    [CompilerGeneratedAttribute]
public void set_FeatureManager(IFeatureManager value);
    [CompilerGeneratedAttribute]
protected IFeatureChecker get_FeatureChecker();
    [CompilerGeneratedAttribute]
public void set_FeatureChecker(IFeatureChecker value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_AppliedCrossCuttingConcerns();
    protected virtual Task`1<bool> IsGrantedAsync(string permissionName);
    protected virtual bool IsGranted(string permissionName);
    protected virtual Task`1<bool> IsEnabledAsync(string featureName);
    protected virtual bool IsEnabled(string featureName);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`2 : AsyncCrudAppService`3<TEntity, TEntityDto, int> {
    protected AsyncCrudAppService`2(IRepository`2<TEntity, int> repository);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`3 : AsyncCrudAppService`4<TEntity, TEntityDto, TPrimaryKey, PagedAndSortedResultRequestDto> {
    protected AsyncCrudAppService`3(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`4 : AsyncCrudAppService`6<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TEntityDto, TEntityDto> {
    protected AsyncCrudAppService`4(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`5 : AsyncCrudAppService`6<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TCreateInput> {
    protected AsyncCrudAppService`5(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`6 : AsyncCrudAppService`7<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TUpdateInput, EntityDto`1<TPrimaryKey>> {
    protected AsyncCrudAppService`6(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`7 : AsyncCrudAppService`8<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TUpdateInput, TGetInput, EntityDto`1<TPrimaryKey>> {
    protected AsyncCrudAppService`7(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.AsyncCrudAppService`8 : CrudAppServiceBase`6<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TUpdateInput> {
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    protected AsyncCrudAppService`8(IRepository`2<TEntity, TPrimaryKey> repository);
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    [AsyncStateMachineAttribute("Abp.Application.Services.AsyncCrudAppService`8/<GetAsync>d__5")]
public virtual Task`1<TEntityDto> GetAsync(TGetInput input);
    [AsyncStateMachineAttribute("Abp.Application.Services.AsyncCrudAppService`8/<GetAllAsync>d__6")]
public virtual Task`1<PagedResultDto`1<TEntityDto>> GetAllAsync(TGetAllInput input);
    [AsyncStateMachineAttribute("Abp.Application.Services.AsyncCrudAppService`8/<CreateAsync>d__7")]
public virtual Task`1<TEntityDto> CreateAsync(TCreateInput input);
    [AsyncStateMachineAttribute("Abp.Application.Services.AsyncCrudAppService`8/<UpdateAsync>d__8")]
public virtual Task`1<TEntityDto> UpdateAsync(TUpdateInput input);
    public virtual Task DeleteAsync(TDeleteInput input);
    protected virtual Task`1<TEntity> GetEntityByIdAsync(TPrimaryKey id);
}
public abstract class Abp.Application.Services.CrudAppService`2 : CrudAppService`3<TEntity, TEntityDto, int> {
    protected CrudAppService`2(IRepository`2<TEntity, int> repository);
}
public abstract class Abp.Application.Services.CrudAppService`3 : CrudAppService`4<TEntity, TEntityDto, TPrimaryKey, PagedAndSortedResultRequestDto> {
    protected CrudAppService`3(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.CrudAppService`4 : CrudAppService`6<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TEntityDto, TEntityDto> {
    protected CrudAppService`4(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.CrudAppService`5 : CrudAppService`6<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TCreateInput> {
    protected CrudAppService`5(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.CrudAppService`6 : CrudAppService`7<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TUpdateInput, EntityDto`1<TPrimaryKey>> {
    protected CrudAppService`6(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.CrudAppService`7 : CrudAppService`8<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TUpdateInput, TGetInput, EntityDto`1<TPrimaryKey>> {
    protected CrudAppService`7(IRepository`2<TEntity, TPrimaryKey> repository);
}
public abstract class Abp.Application.Services.CrudAppService`8 : CrudAppServiceBase`6<TEntity, TEntityDto, TPrimaryKey, TGetAllInput, TCreateInput, TUpdateInput> {
    protected CrudAppService`8(IRepository`2<TEntity, TPrimaryKey> repository);
    public virtual TEntityDto Get(TGetInput input);
    public virtual PagedResultDto`1<TEntityDto> GetAll(TGetAllInput input);
    public virtual TEntityDto Create(TCreateInput input);
    public virtual TEntityDto Update(TUpdateInput input);
    public virtual void Delete(TDeleteInput input);
    protected virtual TEntity GetEntityById(TPrimaryKey id);
}
public abstract class Abp.Application.Services.CrudAppServiceBase`6 : ApplicationService {
    protected IRepository`2<TEntity, TPrimaryKey> Repository;
    [CompilerGeneratedAttribute]
private string <GetPermissionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetAllPermissionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatePermissionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatePermissionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletePermissionName>k__BackingField;
    protected string GetPermissionName { get; protected set; }
    protected string GetAllPermissionName { get; protected set; }
    protected string CreatePermissionName { get; protected set; }
    protected string UpdatePermissionName { get; protected set; }
    protected string DeletePermissionName { get; protected set; }
    protected CrudAppServiceBase`6(IRepository`2<TEntity, TPrimaryKey> repository);
    [CompilerGeneratedAttribute]
protected virtual string get_GetPermissionName();
    [CompilerGeneratedAttribute]
protected virtual void set_GetPermissionName(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_GetAllPermissionName();
    [CompilerGeneratedAttribute]
protected virtual void set_GetAllPermissionName(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_CreatePermissionName();
    [CompilerGeneratedAttribute]
protected virtual void set_CreatePermissionName(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_UpdatePermissionName();
    [CompilerGeneratedAttribute]
protected virtual void set_UpdatePermissionName(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_DeletePermissionName();
    [CompilerGeneratedAttribute]
protected virtual void set_DeletePermissionName(string value);
    protected virtual IQueryable`1<TEntity> ApplySorting(IQueryable`1<TEntity> query, TGetAllInput input);
    protected virtual IQueryable`1<TEntity> ApplyPaging(IQueryable`1<TEntity> query, TGetAllInput input);
    protected virtual IQueryable`1<TEntity> CreateFilteredQuery(TGetAllInput input);
    protected virtual TEntityDto MapToEntityDto(TEntity entity);
    protected virtual TEntity MapToEntity(TCreateInput createInput);
    protected virtual void MapToEntity(TUpdateInput updateInput, TEntity entity);
    protected virtual void CheckPermission(string permissionName);
    protected virtual void CheckGetPermission();
    protected virtual void CheckGetAllPermission();
    protected virtual void CheckCreatePermission();
    protected virtual void CheckUpdatePermission();
    protected virtual void CheckDeletePermission();
}
public abstract class Abp.Application.Services.Dto.AuditedEntityDto : AuditedEntityDto`1<int> {
}
public abstract class Abp.Application.Services.Dto.AuditedEntityDto`1 : CreationAuditedEntityDto`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastModifierUserId>k__BackingField;
    public Nullable`1<DateTime> LastModificationTime { get; public set; }
    public Nullable`1<long> LastModifierUserId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_LastModificationTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastModificationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_LastModifierUserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastModifierUserId(Nullable`1<long> value);
}
public class Abp.Application.Services.Dto.ComboboxItemDto : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    public string Value { get; public set; }
    public string DisplayText { get; public set; }
    public bool IsSelected { get; public set; }
    public ComboboxItemDto(string value, string displayText);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayText();
    [CompilerGeneratedAttribute]
public void set_DisplayText(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(bool value);
}
public abstract class Abp.Application.Services.Dto.CreationAuditedEntityDto : CreationAuditedEntityDto`1<int> {
}
public abstract class Abp.Application.Services.Dto.CreationAuditedEntityDto`1 : EntityDto`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CreatorUserId>k__BackingField;
    public DateTime CreationTime { get; public set; }
    public Nullable`1<long> CreatorUserId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_CreatorUserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreatorUserId(Nullable`1<long> value);
}
public class Abp.Application.Services.Dto.EntityDto : EntityDto`1<int> {
    public EntityDto(int id);
}
public class Abp.Application.Services.Dto.EntityDto`1 : object {
    [CompilerGeneratedAttribute]
private TPrimaryKey <Id>k__BackingField;
    public TPrimaryKey Id { get; public set; }
    public EntityDto`1(TPrimaryKey id);
    [CompilerGeneratedAttribute]
public sealed virtual TPrimaryKey get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(TPrimaryKey value);
}
public abstract class Abp.Application.Services.Dto.FullAuditedEntityDto : FullAuditedEntityDto`1<int> {
}
public abstract class Abp.Application.Services.Dto.FullAuditedEntityDto`1 : AuditedEntityDto`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DeleterUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletionTime>k__BackingField;
    public bool IsDeleted { get; public set; }
    public Nullable`1<long> DeleterUserId { get; public set; }
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_DeleterUserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeleterUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_DeletionTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public interface Abp.Application.Services.Dto.IEntityDto {
}
public interface Abp.Application.Services.Dto.IEntityDto`1 {
    public TPrimaryKey Id { get; public set; }
    public abstract virtual TPrimaryKey get_Id();
    public abstract virtual void set_Id(TPrimaryKey value);
}
public interface Abp.Application.Services.Dto.IHasLongTotalCount {
    public long TotalCount { get; public set; }
    public abstract virtual long get_TotalCount();
    public abstract virtual void set_TotalCount(long value);
}
public interface Abp.Application.Services.Dto.IHasTotalCount {
    public int TotalCount { get; public set; }
    public abstract virtual int get_TotalCount();
    public abstract virtual void set_TotalCount(int value);
}
public interface Abp.Application.Services.Dto.ILimitedResultRequest {
    public int MaxResultCount { get; public set; }
    public abstract virtual int get_MaxResultCount();
    public abstract virtual void set_MaxResultCount(int value);
}
public interface Abp.Application.Services.Dto.IListResult`1 {
    public IReadOnlyList`1<T> Items { get; public set; }
    public abstract virtual IReadOnlyList`1<T> get_Items();
    public abstract virtual void set_Items(IReadOnlyList`1<T> value);
}
public interface Abp.Application.Services.Dto.IPagedAndSortedResultRequest {
}
public interface Abp.Application.Services.Dto.IPagedResult`1 {
}
public interface Abp.Application.Services.Dto.IPagedResultRequest {
    public int SkipCount { get; public set; }
    public abstract virtual int get_SkipCount();
    public abstract virtual void set_SkipCount(int value);
}
public interface Abp.Application.Services.Dto.ISortedResultRequest {
    public string Sorting { get; public set; }
    public abstract virtual string get_Sorting();
    public abstract virtual void set_Sorting(string value);
}
public class Abp.Application.Services.Dto.LimitedResultRequestDto : object {
    [CompilerGeneratedAttribute]
private static int <DefaultMaxResultCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxResultCount>k__BackingField;
    public static int DefaultMaxResultCount { get; public set; }
    [RangeAttribute("1", "2147483647")]
public int MaxResultCount { get; public set; }
    private static LimitedResultRequestDto();
    [CompilerGeneratedAttribute]
public static int get_DefaultMaxResultCount();
    [CompilerGeneratedAttribute]
public static void set_DefaultMaxResultCount(int value);
    [CompilerGeneratedAttribute]
public virtual int get_MaxResultCount();
    [CompilerGeneratedAttribute]
public virtual void set_MaxResultCount(int value);
}
public class Abp.Application.Services.Dto.ListResultDto`1 : object {
    private IReadOnlyList`1<T> _items;
    public IReadOnlyList`1<T> Items { get; public set; }
    public ListResultDto`1(IReadOnlyList`1<T> items);
    public sealed virtual IReadOnlyList`1<T> get_Items();
    public sealed virtual void set_Items(IReadOnlyList`1<T> value);
}
public class Abp.Application.Services.Dto.NameValueDto : NameValueDto`1<string> {
    public NameValueDto(string name, string value);
    public NameValueDto(NameValue nameValue);
}
public class Abp.Application.Services.Dto.NameValueDto`1 : NameValue`1<T> {
    public NameValueDto`1(string name, T value);
    public NameValueDto`1(NameValue`1<T> nameValue);
}
public class Abp.Application.Services.Dto.NullableIdDto : NullableIdDto`1<int> {
    public NullableIdDto(Nullable`1<int> id);
}
public class Abp.Application.Services.Dto.NullableIdDto`1 : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TId> <Id>k__BackingField;
    public Nullable`1<TId> Id { get; public set; }
    public NullableIdDto`1(Nullable`1<TId> id);
    [CompilerGeneratedAttribute]
public Nullable`1<TId> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<TId> value);
}
public class Abp.Application.Services.Dto.PagedAndSortedResultRequestDto : PagedResultRequestDto {
    [CompilerGeneratedAttribute]
private string <Sorting>k__BackingField;
    public string Sorting { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Sorting();
    [CompilerGeneratedAttribute]
public virtual void set_Sorting(string value);
}
public class Abp.Application.Services.Dto.PagedResultDto`1 : ListResultDto`1<T> {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    public int TotalCount { get; public set; }
    public PagedResultDto`1(int totalCount, IReadOnlyList`1<T> items);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalCount(int value);
}
public class Abp.Application.Services.Dto.PagedResultRequestDto : LimitedResultRequestDto {
    [CompilerGeneratedAttribute]
private int <SkipCount>k__BackingField;
    [RangeAttribute("0", "2147483647")]
public int SkipCount { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_SkipCount();
    [CompilerGeneratedAttribute]
public virtual void set_SkipCount(int value);
}
public interface Abp.Application.Services.IApplicationService {
}
public interface Abp.Application.Services.IAsyncCrudAppService`1 {
}
public interface Abp.Application.Services.IAsyncCrudAppService`2 {
}
public interface Abp.Application.Services.IAsyncCrudAppService`3 {
}
public interface Abp.Application.Services.IAsyncCrudAppService`4 {
}
public interface Abp.Application.Services.IAsyncCrudAppService`5 {
}
public interface Abp.Application.Services.IAsyncCrudAppService`6 {
}
public interface Abp.Application.Services.IAsyncCrudAppService`7 {
    public abstract virtual Task`1<TEntityDto> GetAsync(TGetInput input);
    public abstract virtual Task`1<PagedResultDto`1<TEntityDto>> GetAllAsync(TGetAllInput input);
    public abstract virtual Task`1<TEntityDto> CreateAsync(TCreateInput input);
    public abstract virtual Task`1<TEntityDto> UpdateAsync(TUpdateInput input);
    public abstract virtual Task DeleteAsync(TDeleteInput input);
}
public interface Abp.Application.Services.IAvoidDuplicateCrossCuttingConcerns {
    public List`1<string> AppliedCrossCuttingConcerns { get; }
    public abstract virtual List`1<string> get_AppliedCrossCuttingConcerns();
}
public interface Abp.Application.Services.ICrudAppService`1 {
}
public interface Abp.Application.Services.ICrudAppService`2 {
}
public interface Abp.Application.Services.ICrudAppService`3 {
}
public interface Abp.Application.Services.ICrudAppService`4 {
}
public interface Abp.Application.Services.ICrudAppService`5 {
}
public interface Abp.Application.Services.ICrudAppService`6 {
}
public interface Abp.Application.Services.ICrudAppService`7 {
    public abstract virtual TEntityDto Get(TGetInput input);
    public abstract virtual PagedResultDto`1<TEntityDto> GetAll(TGetAllInput input);
    public abstract virtual TEntityDto Create(TCreateInput input);
    public abstract virtual TEntityDto Update(TUpdateInput input);
    public abstract virtual void Delete(TDeleteInput input);
}
[AttributeUsageAttribute("1092")]
public class Abp.Application.Services.RemoteServiceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMetadataEnabled>k__BackingField;
    public bool IsEnabled { get; public set; }
    public bool IsMetadataEnabled { get; public set; }
    public RemoteServiceAttribute(bool isEnabled);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMetadataEnabled();
    [CompilerGeneratedAttribute]
public void set_IsMetadataEnabled(bool value);
    public virtual bool IsEnabledFor(Type type);
    public virtual bool IsEnabledFor(MethodInfo method);
    public virtual bool IsMetadataEnabledFor(Type type);
    public virtual bool IsMetadataEnabledFor(MethodInfo method);
    public static bool IsExplicitlyEnabledFor(Type type);
    public static bool IsExplicitlyDisabledFor(Type type);
    public static bool IsMetadataExplicitlyEnabledFor(Type type);
    public static bool IsMetadataExplicitlyDisabledFor(Type type);
    public static bool IsMetadataExplicitlyDisabledFor(MethodInfo method);
    public static bool IsMetadataExplicitlyEnabledFor(MethodInfo method);
}
internal static class Abp.Aspects.AbpCrossCuttingConcerns : object {
    public static string Auditing;
    public static string Validation;
    public static string UnitOfWork;
    public static string Authorization;
    public static void AddApplied(object obj, String[] concerns);
    public static void RemoveApplied(object obj, String[] concerns);
    public static bool IsApplied(object obj, string concern);
    public static IDisposable Applying(object obj, String[] concerns);
    public static String[] GetApplieds(object obj);
}
internal abstract class Abp.Aspects.AbpInterceptorBase`1 : object {
    [CompilerGeneratedAttribute]
private TAspect <Aspect>k__BackingField;
    public TAspect Aspect { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TAspect get_Aspect();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Aspect(TAspect value);
    public virtual void BeforeExecution(IAbpBeforeExecutionInterceptionContext context);
    public virtual void AfterExecution(IAbpAfterExecutionInterceptionContext context);
}
internal abstract class Abp.Aspects.AspectAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <InterceptorType>k__BackingField;
    public Type InterceptorType { get; public set; }
    protected AspectAttribute(Type interceptorType);
    [CompilerGeneratedAttribute]
public Type get_InterceptorType();
    [CompilerGeneratedAttribute]
public void set_InterceptorType(Type value);
}
internal interface Abp.Aspects.IAbpAfterExecutionInterceptionContext {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
internal interface Abp.Aspects.IAbpBeforeExecutionInterceptionContext {
}
internal interface Abp.Aspects.IAbpInterceptionContext {
    public object Target { get; }
    public MethodInfo Method { get; }
    public Object[] Arguments { get; }
    public object ReturnValue { get; }
    public bool Handled { get; public set; }
    public abstract virtual object get_Target();
    public abstract virtual MethodInfo get_Method();
    public abstract virtual Object[] get_Arguments();
    public abstract virtual object get_ReturnValue();
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
}
internal interface Abp.Aspects.IAbpInterceptor`1 {
    public TAspect Aspect { get; public set; }
    public abstract virtual TAspect get_Aspect();
    public abstract virtual void set_Aspect(TAspect value);
    public abstract virtual void BeforeExecution(IAbpBeforeExecutionInterceptionContext context);
    public abstract virtual void AfterExecution(IAbpAfterExecutionInterceptionContext context);
}
internal class Abp.Aspects.Test_Aspects : object {
}
public class Abp.Auditing.AbpAuditingDefaultOptions : object {
    public static List`1<Func`2<Type, bool>> ConventionalAuditingSelectorList;
    [CompilerGeneratedAttribute]
private List`1<Func`2<Type, bool>> <ConventionalAuditingSelectors>k__BackingField;
    public List`1<Func`2<Type, bool>> ConventionalAuditingSelectors { get; }
    private static AbpAuditingDefaultOptions();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`2<Type, bool>> get_ConventionalAuditingSelectors();
}
[AttributeUsageAttribute("196")]
public class Abp.Auditing.AuditedAttribute : Attribute {
}
public class Abp.Auditing.AuditInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImpersonatorUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ImpersonatorTenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecutionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    public Nullable`1<long> ImpersonatorUserId { get; public set; }
    public Nullable`1<int> ImpersonatorTenantId { get; public set; }
    public string ServiceName { get; public set; }
    public string MethodName { get; public set; }
    public string Parameters { get; public set; }
    public string ReturnValue { get; public set; }
    public DateTime ExecutionTime { get; public set; }
    public int ExecutionDuration { get; public set; }
    public string ClientIpAddress { get; public set; }
    public string ClientName { get; public set; }
    public string BrowserInfo { get; public set; }
    public string CustomData { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ImpersonatorUserId();
    [CompilerGeneratedAttribute]
public void set_ImpersonatorUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ImpersonatorTenantId();
    [CompilerGeneratedAttribute]
public void set_ImpersonatorTenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnValue();
    [CompilerGeneratedAttribute]
public void set_ReturnValue(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_ExecutionDuration();
    [CompilerGeneratedAttribute]
public void set_ExecutionDuration(int value);
    [CompilerGeneratedAttribute]
public string get_ClientIpAddress();
    [CompilerGeneratedAttribute]
public void set_ClientIpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_BrowserInfo();
    [CompilerGeneratedAttribute]
public void set_BrowserInfo(string value);
    [CompilerGeneratedAttribute]
public string get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public virtual string ToString();
}
internal class Abp.Auditing.AuditingConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabledForAnonymousUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditingSelectorList <Selectors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <IgnoredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveReturnValues>k__BackingField;
    public bool IsEnabled { get; public set; }
    public bool IsEnabledForAnonymousUsers { get; public set; }
    public IAuditingSelectorList Selectors { get; }
    public List`1<Type> IgnoredTypes { get; }
    public bool SaveReturnValues { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabledForAnonymousUsers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabledForAnonymousUsers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuditingSelectorList get_Selectors();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Type> get_IgnoredTypes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SaveReturnValues();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SaveReturnValues(bool value);
}
public class Abp.Auditing.AuditingContractResolver : CamelCasePropertyNamesContractResolver {
    private List`1<Type> _ignoredTypes;
    public AuditingContractResolver(List`1<Type> ignoredTypes);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
}
public class Abp.Auditing.AuditingHelper : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditingStore <AuditingStore>k__BackingField;
    private IAuditInfoProvider _auditInfoProvider;
    private IAuditingConfiguration _configuration;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IAuditSerializer _auditSerializer;
    public ILogger Logger { get; public set; }
    public IAbpSession AbpSession { get; public set; }
    public IAuditingStore AuditingStore { get; public set; }
    public AuditingHelper(IAuditInfoProvider auditInfoProvider, IAuditingConfiguration configuration, IUnitOfWorkManager unitOfWorkManager, IAuditSerializer auditSerializer);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IAuditingStore get_AuditingStore();
    [CompilerGeneratedAttribute]
public void set_AuditingStore(IAuditingStore value);
    public sealed virtual bool ShouldSaveAudit(MethodInfo methodInfo, bool defaultValue);
    public sealed virtual AuditInfo CreateAuditInfo(Type type, MethodInfo method, Object[] arguments);
    public sealed virtual AuditInfo CreateAuditInfo(Type type, MethodInfo method, IDictionary`2<string, object> arguments);
    public sealed virtual void Save(AuditInfo auditInfo);
    [AsyncStateMachineAttribute("Abp.Auditing.AuditingHelper/<SaveAsync>d__21")]
public sealed virtual Task SaveAsync(AuditInfo auditInfo);
    private string ConvertArgumentsToJson(IDictionary`2<string, object> arguments);
    private static Dictionary`2<string, object> CreateArgumentsDictionary(MethodInfo method, Object[] arguments);
}
internal class Abp.Auditing.AuditingInterceptor : AbpInterceptorBase {
    private IAuditingHelper _auditingHelper;
    private IAuditingConfiguration _auditingConfiguration;
    private IAuditSerializer _auditSerializer;
    public AuditingInterceptor(IAuditingHelper auditingHelper, IAuditingConfiguration auditingConfiguration, IAuditSerializer auditSerializer);
    public virtual void InterceptSynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Auditing.AuditingInterceptor/<InternalInterceptAsynchronous>d__5")]
protected virtual Task InternalInterceptAsynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Auditing.AuditingInterceptor/<InternalInterceptAsynchronous>d__6`1")]
protected virtual Task`1<TResult> InternalInterceptAsynchronous(IInvocation invocation);
}
internal static class Abp.Auditing.AuditingInterceptorRegistrar : object {
    public static void Initialize(IIocManager iocManager);
    private static bool ShouldIntercept(IIocManager iocManager, Type type);
}
internal class Abp.Auditing.AuditingSelectorList : List`1<NamedTypeSelector> {
    public sealed virtual bool RemoveByName(string name);
}
public class Abp.Auditing.DefaultAuditInfoProvider : object {
    [CompilerGeneratedAttribute]
private IClientInfoProvider <ClientInfoProvider>k__BackingField;
    public IClientInfoProvider ClientInfoProvider { get; public set; }
    [CompilerGeneratedAttribute]
public IClientInfoProvider get_ClientInfoProvider();
    [CompilerGeneratedAttribute]
public void set_ClientInfoProvider(IClientInfoProvider value);
    public virtual void Fill(AuditInfo auditInfo);
}
[AttributeUsageAttribute("196")]
public class Abp.Auditing.DisableAuditingAttribute : Attribute {
}
public interface Abp.Auditing.IAbpAuditingDefaultOptions {
    public List`1<Func`2<Type, bool>> ConventionalAuditingSelectors { get; }
    public abstract virtual List`1<Func`2<Type, bool>> get_ConventionalAuditingSelectors();
}
public interface Abp.Auditing.IAuditInfoProvider {
    public abstract virtual void Fill(AuditInfo auditInfo);
}
public interface Abp.Auditing.IAuditingConfiguration {
    public bool IsEnabled { get; public set; }
    public bool IsEnabledForAnonymousUsers { get; public set; }
    public IAuditingSelectorList Selectors { get; }
    public List`1<Type> IgnoredTypes { get; }
    public bool SaveReturnValues { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsEnabledForAnonymousUsers();
    public abstract virtual void set_IsEnabledForAnonymousUsers(bool value);
    public abstract virtual IAuditingSelectorList get_Selectors();
    public abstract virtual List`1<Type> get_IgnoredTypes();
    public abstract virtual bool get_SaveReturnValues();
    public abstract virtual void set_SaveReturnValues(bool value);
}
public interface Abp.Auditing.IAuditingHelper {
    public abstract virtual bool ShouldSaveAudit(MethodInfo methodInfo, bool defaultValue);
    public abstract virtual AuditInfo CreateAuditInfo(Type type, MethodInfo method, Object[] arguments);
    public abstract virtual AuditInfo CreateAuditInfo(Type type, MethodInfo method, IDictionary`2<string, object> arguments);
    public abstract virtual void Save(AuditInfo auditInfo);
    public abstract virtual Task SaveAsync(AuditInfo auditInfo);
}
public interface Abp.Auditing.IAuditingSelectorList {
    public abstract virtual bool RemoveByName(string name);
}
public interface Abp.Auditing.IAuditingStore {
    public abstract virtual Task SaveAsync(AuditInfo auditInfo);
    public abstract virtual void Save(AuditInfo auditInfo);
}
public interface Abp.Auditing.IAuditSerializer {
    public abstract virtual string Serialize(object obj);
}
public interface Abp.Auditing.IClientInfoProvider {
    public string BrowserInfo { get; }
    public string ClientIpAddress { get; }
    public string ComputerName { get; }
    public abstract virtual string get_BrowserInfo();
    public abstract virtual string get_ClientIpAddress();
    public abstract virtual string get_ComputerName();
}
public class Abp.Auditing.JsonNetAuditSerializer : object {
    private IAuditingConfiguration _configuration;
    public JsonNetAuditSerializer(IAuditingConfiguration configuration);
    public sealed virtual string Serialize(object obj);
}
public class Abp.Auditing.NullClientInfoProvider : object {
    [CompilerGeneratedAttribute]
private static NullClientInfoProvider <Instance>k__BackingField;
    public static NullClientInfoProvider Instance { get; }
    public string BrowserInfo { get; }
    public string ClientIpAddress { get; }
    public string ComputerName { get; }
    private static NullClientInfoProvider();
    [CompilerGeneratedAttribute]
public static NullClientInfoProvider get_Instance();
    public sealed virtual string get_BrowserInfo();
    public sealed virtual string get_ClientIpAddress();
    public sealed virtual string get_ComputerName();
}
public class Abp.Auditing.SimpleLogAuditingStore : object {
    [CompilerGeneratedAttribute]
private static SimpleLogAuditingStore <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public static SimpleLogAuditingStore Instance { get; }
    public ILogger Logger { get; public set; }
    private static SimpleLogAuditingStore();
    [CompilerGeneratedAttribute]
public static SimpleLogAuditingStore get_Instance();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual Task SaveAsync(AuditInfo auditInfo);
    public sealed virtual void Save(AuditInfo auditInfo);
}
public class Abp.Authorization.AbpAllowAnonymousAttribute : Attribute {
}
public class Abp.Authorization.AbpAuthorizationException : AbpException {
    public static LogSeverity DefaultLogSeverity;
    [CompilerGeneratedAttribute]
private LogSeverity <Severity>k__BackingField;
    public LogSeverity Severity { get; public set; }
    public AbpAuthorizationException(SerializationInfo serializationInfo, StreamingContext context);
    public AbpAuthorizationException(string message);
    public AbpAuthorizationException(string message, Exception innerException);
    private static AbpAuthorizationException();
    [CompilerGeneratedAttribute]
public sealed virtual LogSeverity get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Severity(LogSeverity value);
}
[AttributeUsageAttribute("68")]
public class Abp.Authorization.AbpAuthorizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAllPermissions>k__BackingField;
    public String[] Permissions { get; }
    public bool RequireAllPermissions { get; public set; }
    public AbpAuthorizeAttribute(String[] permissions);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Permissions();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequireAllPermissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequireAllPermissions(bool value);
}
public class Abp.Authorization.AuthorizationHelper : object {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    private IFeatureChecker _featureChecker;
    private IAuthorizationConfiguration _authConfiguration;
    public IAbpSession AbpSession { get; public set; }
    public IPermissionChecker PermissionChecker { get; public set; }
    public ILocalizationManager LocalizationManager { get; public set; }
    public AuthorizationHelper(IFeatureChecker featureChecker, IAuthorizationConfiguration authConfiguration);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
    [CompilerGeneratedAttribute]
public ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationHelper/<AuthorizeAsync>d__15")]
public virtual Task AuthorizeAsync(IEnumerable`1<IAbpAuthorizeAttribute> authorizeAttributes);
    public virtual void Authorize(IEnumerable`1<IAbpAuthorizeAttribute> authorizeAttributes);
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationHelper/<AuthorizeAsync>d__17")]
public virtual Task AuthorizeAsync(MethodInfo methodInfo, Type type);
    public virtual void Authorize(MethodInfo methodInfo, Type type);
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationHelper/<CheckFeaturesAsync>d__19")]
protected virtual Task CheckFeaturesAsync(MethodInfo methodInfo, Type type);
    protected virtual void CheckFeatures(MethodInfo methodInfo, Type type);
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationHelper/<CheckPermissionsAsync>d__21")]
protected virtual Task CheckPermissionsAsync(MethodInfo methodInfo, Type type);
    protected virtual void CheckPermissions(MethodInfo methodInfo, Type type);
    private static bool AllowAnonymous(MemberInfo memberInfo, Type type);
}
[ExtensionAttribute]
public static class Abp.Authorization.AuthorizationHelperExtensions : object {
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationHelperExtensions/<AuthorizeAsync>d__0")]
[ExtensionAttribute]
public static Task AuthorizeAsync(IAuthorizationHelper authorizationHelper, IAbpAuthorizeAttribute authorizeAttribute);
    [ExtensionAttribute]
public static void Authorize(IAuthorizationHelper authorizationHelper, IAbpAuthorizeAttribute authorizeAttribute);
}
public class Abp.Authorization.AuthorizationInterceptor : AbpInterceptorBase {
    private IAuthorizationHelper _authorizationHelper;
    public AuthorizationInterceptor(IAuthorizationHelper authorizationHelper);
    public virtual void InterceptSynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationInterceptor/<InternalInterceptAsynchronous>d__3")]
protected virtual Task InternalInterceptAsynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Authorization.AuthorizationInterceptor/<InternalInterceptAsynchronous>d__4`1")]
protected virtual Task`1<TResult> InternalInterceptAsynchronous(IInvocation invocation);
}
internal static class Abp.Authorization.AuthorizationInterceptorRegistrar : object {
    public static void Initialize(IIocManager iocManager);
    private static void Kernel_ComponentRegistered(string key, IHandler handler);
    private static bool ShouldIntercept(Type type);
    private static bool SelfOrMethodsDefinesAttribute(Type type);
}
public abstract class Abp.Authorization.AuthorizationProvider : object {
    public abstract virtual void SetPermissions(IPermissionDefinitionContext context);
}
public interface Abp.Authorization.IAbpAllowAnonymousAttribute {
}
public interface Abp.Authorization.IAbpAuthorizeAttribute {
    public String[] Permissions { get; }
    public bool RequireAllPermissions { get; public set; }
    public abstract virtual String[] get_Permissions();
    public abstract virtual bool get_RequireAllPermissions();
    public abstract virtual void set_RequireAllPermissions(bool value);
}
public interface Abp.Authorization.IAuthorizationHelper {
    public abstract virtual Task AuthorizeAsync(IEnumerable`1<IAbpAuthorizeAttribute> authorizeAttributes);
    public abstract virtual void Authorize(IEnumerable`1<IAbpAuthorizeAttribute> authorizeAttributes);
    public abstract virtual Task AuthorizeAsync(MethodInfo methodInfo, Type type);
    public abstract virtual void Authorize(MethodInfo methodInfo, Type type);
}
public interface Abp.Authorization.IPermissionChecker {
    public abstract virtual Task`1<bool> IsGrantedAsync(string permissionName);
    public abstract virtual bool IsGranted(string permissionName);
    public abstract virtual Task`1<bool> IsGrantedAsync(UserIdentifier user, string permissionName);
    public abstract virtual bool IsGranted(UserIdentifier user, string permissionName);
}
public interface Abp.Authorization.IPermissionDefinitionContext {
    public abstract virtual Permission CreatePermission(string name, ILocalizableString displayName, ILocalizableString description, MultiTenancySides multiTenancySides, IFeatureDependency featureDependency, Dictionary`2<string, object> properties);
    public abstract virtual Permission GetPermissionOrNull(string name);
    public abstract virtual void RemovePermission(string name);
}
public interface Abp.Authorization.IPermissionDependency {
    public abstract virtual Task`1<bool> IsSatisfiedAsync(IPermissionDependencyContext context);
    public abstract virtual bool IsSatisfied(IPermissionDependencyContext context);
}
public interface Abp.Authorization.IPermissionDependencyContext {
    public UserIdentifier User { get; }
    public IIocResolver IocResolver { get; }
    public IPermissionChecker PermissionChecker { get; }
    public abstract virtual UserIdentifier get_User();
    public abstract virtual IIocResolver get_IocResolver();
    public abstract virtual IPermissionChecker get_PermissionChecker();
}
public interface Abp.Authorization.IPermissionManager {
    public abstract virtual Permission GetPermission(string name);
    public abstract virtual Permission GetPermissionOrNull(string name);
    public abstract virtual IReadOnlyList`1<Permission> GetAllPermissions(bool tenancyFilter);
    public abstract virtual Task`1<IReadOnlyList`1<Permission>> GetAllPermissionsAsync(bool tenancyFilter);
    public abstract virtual IReadOnlyList`1<Permission> GetAllPermissions(MultiTenancySides multiTenancySides);
    public abstract virtual Task`1<IReadOnlyList`1<Permission>> GetAllPermissionsAsync(MultiTenancySides multiTenancySides);
}
public class Abp.Authorization.NullPermissionChecker : object {
    [CompilerGeneratedAttribute]
private static NullPermissionChecker <Instance>k__BackingField;
    public static NullPermissionChecker Instance { get; }
    private static NullPermissionChecker();
    [CompilerGeneratedAttribute]
public static NullPermissionChecker get_Instance();
    public sealed virtual Task`1<bool> IsGrantedAsync(string permissionName);
    public sealed virtual Task`1<bool> IsGrantedAsync(UserIdentifier user, string permissionName);
    public sealed virtual bool IsGranted(string permissionName);
    public sealed virtual bool IsGranted(UserIdentifier user, string permissionName);
}
[DefaultMemberAttribute("Item")]
public class Abp.Authorization.Permission : object {
    [CompilerGeneratedAttribute]
private Permission <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiTenancySides <MultiTenancySides>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureDependency <FeatureDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    private List`1<Permission> _children;
    public Permission Parent { get; private set; }
    public string Name { get; }
    public ILocalizableString DisplayName { get; public set; }
    public ILocalizableString Description { get; public set; }
    public MultiTenancySides MultiTenancySides { get; public set; }
    public IFeatureDependency FeatureDependency { get; public set; }
    public Dictionary`2<string, object> Properties { get; }
    public object Item { get; public set; }
    public IReadOnlyList`1<Permission> Children { get; }
    public Permission(string name, ILocalizableString displayName, ILocalizableString description, MultiTenancySides multiTenancySides, IFeatureDependency featureDependency, Dictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public Permission get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Permission value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(ILocalizableString value);
    [CompilerGeneratedAttribute]
public MultiTenancySides get_MultiTenancySides();
    [CompilerGeneratedAttribute]
public void set_MultiTenancySides(MultiTenancySides value);
    [CompilerGeneratedAttribute]
public IFeatureDependency get_FeatureDependency();
    [CompilerGeneratedAttribute]
public void set_FeatureDependency(IFeatureDependency value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public IReadOnlyList`1<Permission> get_Children();
    public Permission CreateChildPermission(string name, ILocalizableString displayName, ILocalizableString description, MultiTenancySides multiTenancySides, IFeatureDependency featureDependency, Dictionary`2<string, object> properties);
    public void RemoveChildPermission(string name);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Abp.Authorization.PermissionCheckerExtensions : object {
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionCheckerExtensions/<IsGrantedAsync>d__0")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IPermissionChecker permissionChecker, UserIdentifier user, bool requiresAll, String[] permissionNames);
    [ExtensionAttribute]
public static bool IsGranted(IPermissionChecker permissionChecker, UserIdentifier user, bool requiresAll, String[] permissionNames);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionCheckerExtensions/<IsGrantedAsync>d__2")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IPermissionChecker permissionChecker, bool requiresAll, String[] permissionNames);
    [ExtensionAttribute]
public static bool IsGranted(IPermissionChecker permissionChecker, bool requiresAll, String[] permissionNames);
    [ExtensionAttribute]
public static Task AuthorizeAsync(IPermissionChecker permissionChecker, String[] permissionNames);
    [ExtensionAttribute]
public static void Authorize(IPermissionChecker permissionChecker, String[] permissionNames);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionCheckerExtensions/<AuthorizeAsync>d__6")]
[ExtensionAttribute]
public static Task AuthorizeAsync(IPermissionChecker permissionChecker, bool requireAll, String[] permissionNames);
    [ExtensionAttribute]
public static void Authorize(IPermissionChecker permissionChecker, bool requireAll, String[] permissionNames);
    public static string L(IPermissionChecker permissionChecker, string name, string defaultValue);
    public static String[] LocalizePermissionNames(IPermissionChecker permissionChecker, String[] permissionNames);
}
public abstract class Abp.Authorization.PermissionDefinitionContextBase : object {
    protected PermissionDictionary Permissions;
    public sealed virtual Permission CreatePermission(string name, ILocalizableString displayName, ILocalizableString description, MultiTenancySides multiTenancySides, IFeatureDependency featureDependency, Dictionary`2<string, object> properties);
    public virtual Permission GetPermissionOrNull(string name);
    public virtual void RemovePermission(string name);
}
public class Abp.Authorization.PermissionDependencyContext : object {
    [CompilerGeneratedAttribute]
private UserIdentifier <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocResolver <IocResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionChecker <PermissionChecker>k__BackingField;
    public UserIdentifier User { get; public set; }
    public IIocResolver IocResolver { get; }
    public IPermissionChecker PermissionChecker { get; public set; }
    public PermissionDependencyContext(IIocResolver iocResolver);
    [CompilerGeneratedAttribute]
public sealed virtual UserIdentifier get_User();
    [CompilerGeneratedAttribute]
public void set_User(UserIdentifier value);
    [CompilerGeneratedAttribute]
public sealed virtual IIocResolver get_IocResolver();
    [CompilerGeneratedAttribute]
public sealed virtual IPermissionChecker get_PermissionChecker();
    [CompilerGeneratedAttribute]
public void set_PermissionChecker(IPermissionChecker value);
}
public class Abp.Authorization.PermissionDictionary : Dictionary`2<string, Permission> {
    public virtual void AddAllPermissions();
    private void AddPermissionRecursively(Permission permission);
}
public static class Abp.Authorization.PermissionFinder : object {
    public static IReadOnlyList`1<Permission> GetAllPermissions(AuthorizationProvider[] authorizationProviders);
}
public class Abp.Authorization.PermissionManager : PermissionDefinitionContextBase {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private IIocManager _iocManager;
    private IAuthorizationConfiguration _authorizationConfiguration;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IMultiTenancyConfig _multiTenancy;
    public IAbpSession AbpSession { get; public set; }
    public PermissionManager(IIocManager iocManager, IAuthorizationConfiguration authorizationConfiguration, IUnitOfWorkManager unitOfWorkManager, IMultiTenancyConfig multiTenancy);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    public virtual void Initialize();
    public virtual Permission GetPermission(string name);
    public virtual IReadOnlyList`1<Permission> GetAllPermissions(bool tenancyFilter);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionManager/<GetAllPermissionsAsync>d__12")]
public virtual Task`1<IReadOnlyList`1<Permission>> GetAllPermissionsAsync(bool tenancyFilter);
    public virtual IReadOnlyList`1<Permission> GetAllPermissions(MultiTenancySides multiTenancySides);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionManager/<GetAllPermissionsAsync>d__14")]
public virtual Task`1<IReadOnlyList`1<Permission>> GetAllPermissionsAsync(MultiTenancySides multiTenancySides);
    [AsyncStateMachineAttribute("Abp.Authorization.PermissionManager/<FilterSatisfiedPermissionsAsync>d__15")]
private Task`1<IList`1<Permission>> FilterSatisfiedPermissionsAsync(FeatureDependencyContext featureDependencyContextObject, IList`1<Permission> unfilteredPermissions, Func`2<Permission, bool> filter);
    private MultiTenancySides GetCurrentMultiTenancySide();
    private Nullable`1<int> GetCurrentTenantId();
    [CompilerGeneratedAttribute]
private bool <GetAllPermissions>b__11_0(Permission p);
    [CompilerGeneratedAttribute]
private bool <GetAllPermissionsAsync>b__12_0(Permission p);
    [CompilerGeneratedAttribute]
private bool <GetAllPermissionsAsync>b__12_1(Permission p);
}
public class Abp.Authorization.SimplePermissionDependency : object {
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAll>k__BackingField;
    public String[] Permissions { get; public set; }
    public bool RequiresAll { get; public set; }
    public SimplePermissionDependency(String[] permissions);
    public SimplePermissionDependency(bool requiresAll, String[] permissions);
    [CompilerGeneratedAttribute]
public String[] get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_RequiresAll();
    [CompilerGeneratedAttribute]
public void set_RequiresAll(bool value);
    public sealed virtual Task`1<bool> IsSatisfiedAsync(IPermissionDependencyContext context);
    public sealed virtual bool IsSatisfied(IPermissionDependencyContext context);
}
public abstract class Abp.BackgroundJobs.AsyncBackgroundJob`1 : BackgroundJobBase`1<TArgs> {
    public abstract virtual Task ExecuteAsync(TArgs args);
}
public abstract class Abp.BackgroundJobs.BackgroundJob`1 : BackgroundJobBase`1<TArgs> {
    public abstract virtual void Execute(TArgs args);
}
public abstract class Abp.BackgroundJobs.BackgroundJobBase`1 : object {
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    private ILocalizationSource _localizationSource;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ISettingManager SettingManager { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    protected IActiveUnitOfWork CurrentUnitOfWork { get; }
    protected ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    protected ILocalizationSource LocalizationSource { get; }
    protected ILogger Logger { get; public set; }
    [CompilerGeneratedAttribute]
protected ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    public IUnitOfWorkManager get_UnitOfWorkManager();
    public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    protected IActiveUnitOfWork get_CurrentUnitOfWork();
    [CompilerGeneratedAttribute]
protected ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    protected ILocalizationSource get_LocalizationSource();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
}
internal class Abp.BackgroundJobs.BackgroundJobConfiguration : object {
    public static int DefaultMaxWaitingJobToProcessPerPeriod;
    [CompilerGeneratedAttribute]
private bool <IsJobExecutionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CleanUserTokenPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <UserTokenExpirationPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWaitingJobToProcessPerPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpStartupConfiguration <AbpConfiguration>k__BackingField;
    public bool IsJobExecutionEnabled { get; public set; }
    [ObsoleteAttribute("Use UserTokenExpirationPeriod instead.")]
public Nullable`1<int> CleanUserTokenPeriod { get; public set; }
    public Nullable`1<TimeSpan> UserTokenExpirationPeriod { get; public set; }
    public int MaxWaitingJobToProcessPerPeriod { get; public set; }
    public IAbpStartupConfiguration AbpConfiguration { get; private set; }
    public BackgroundJobConfiguration(IAbpStartupConfiguration abpConfiguration);
    private static BackgroundJobConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsJobExecutionEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsJobExecutionEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CleanUserTokenPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CleanUserTokenPeriod(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_UserTokenExpirationPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserTokenExpirationPeriod(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxWaitingJobToProcessPerPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxWaitingJobToProcessPerPeriod(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IAbpStartupConfiguration get_AbpConfiguration();
    [CompilerGeneratedAttribute]
private void set_AbpConfiguration(IAbpStartupConfiguration value);
}
public class Abp.BackgroundJobs.BackgroundJobException : AbpException {
    [CompilerGeneratedAttribute]
private BackgroundJobInfo <BackgroundJob>k__BackingField;
    [CompilerGeneratedAttribute]
private object <JobObject>k__BackingField;
    public BackgroundJobInfo BackgroundJob { get; public set; }
    public object JobObject { get; public set; }
    public BackgroundJobException(SerializationInfo serializationInfo, StreamingContext context);
    public BackgroundJobException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public BackgroundJobInfo get_BackgroundJob();
    [CompilerGeneratedAttribute]
public void set_BackgroundJob(BackgroundJobInfo value);
    [CompilerGeneratedAttribute]
public object get_JobObject();
    [CompilerGeneratedAttribute]
public void set_JobObject(object value);
}
[TableAttribute("AbpBackgroundJobs")]
[MultiTenancySideAttribute("2")]
public class Abp.BackgroundJobs.BackgroundJobInfo : CreationAuditedEntity`1<long> {
    public static int MaxJobTypeLength;
    public static int MaxJobArgsLength;
    [CompilerGeneratedAttribute]
private static int <DefaultFirstWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <DefaultWaitFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextTryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastTryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAbandoned>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundJobPriority <Priority>k__BackingField;
    public static int DefaultFirstWaitDuration { get; public set; }
    public static int DefaultTimeout { get; public set; }
    public static double DefaultWaitFactor { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("512")]
public string JobType { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("1048576")]
public string JobArgs { get; public set; }
    public short TryCount { get; public set; }
    public DateTime NextTryTime { get; public set; }
    public Nullable`1<DateTime> LastTryTime { get; public set; }
    public bool IsAbandoned { get; public set; }
    public BackgroundJobPriority Priority { get; public set; }
    private static BackgroundJobInfo();
    [CompilerGeneratedAttribute]
public static int get_DefaultFirstWaitDuration();
    [CompilerGeneratedAttribute]
public static void set_DefaultFirstWaitDuration(int value);
    [CompilerGeneratedAttribute]
public static int get_DefaultTimeout();
    [CompilerGeneratedAttribute]
public static void set_DefaultTimeout(int value);
    [CompilerGeneratedAttribute]
public static double get_DefaultWaitFactor();
    [CompilerGeneratedAttribute]
public static void set_DefaultWaitFactor(double value);
    [CompilerGeneratedAttribute]
public virtual string get_JobType();
    [CompilerGeneratedAttribute]
public virtual void set_JobType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_JobArgs();
    [CompilerGeneratedAttribute]
public virtual void set_JobArgs(string value);
    [CompilerGeneratedAttribute]
public virtual short get_TryCount();
    [CompilerGeneratedAttribute]
public virtual void set_TryCount(short value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_NextTryTime();
    [CompilerGeneratedAttribute]
public virtual void set_NextTryTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastTryTime();
    [CompilerGeneratedAttribute]
public virtual void set_LastTryTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAbandoned();
    [CompilerGeneratedAttribute]
public virtual void set_IsAbandoned(bool value);
    [CompilerGeneratedAttribute]
public virtual BackgroundJobPriority get_Priority();
    [CompilerGeneratedAttribute]
public virtual void set_Priority(BackgroundJobPriority value);
    public virtual Nullable`1<DateTime> CalculateNextTryTime();
}
public class Abp.BackgroundJobs.BackgroundJobManager : AsyncPeriodicBackgroundWorkerBase {
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <JobPollPeriod>k__BackingField;
    private IIocResolver _iocResolver;
    private IBackgroundJobStore _store;
    private IBackgroundJobConfiguration _backgroundJobConfiguration;
    public IEventBus EventBus { get; public set; }
    public static int JobPollPeriod { get; public set; }
    private static BackgroundJobManager();
    public BackgroundJobManager(IIocResolver iocResolver, IBackgroundJobStore store, IBackgroundJobConfiguration backgroundJobConfiguration, AbpAsyncTimer timer);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    [CompilerGeneratedAttribute]
public static int get_JobPollPeriod();
    [CompilerGeneratedAttribute]
public static void set_JobPollPeriod(int value);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobManager/<EnqueueAsync>d__13`2")]
public virtual Task`1<string> EnqueueAsync(TArgs args, BackgroundJobPriority priority, Nullable`1<TimeSpan> delay);
    public virtual string Enqueue(TArgs args, BackgroundJobPriority priority, Nullable`1<TimeSpan> delay);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobManager/<DeleteAsync>d__15")]
public sealed virtual Task`1<bool> DeleteAsync(string jobId);
    public sealed virtual bool Delete(string jobId);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobManager/<DoWorkAsync>d__17")]
protected virtual Task DoWorkAsync();
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobManager/<TryProcessJobAsync>d__18")]
private Task TryProcessJobAsync(BackgroundJobInfo jobInfo);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.BackgroundJobManager/<TryUpdateAsync>d__19")]
private Task TryUpdateAsync(BackgroundJobInfo jobInfo);
}
[ExtensionAttribute]
public static class Abp.BackgroundJobs.BackgroundJobManagerEventTriggerExtensions : object {
    [ExtensionAttribute]
public static Task EnqueueEventAsync(IBackgroundJobManager backgroundJobManager, TEventData eventData, BackgroundJobPriority priority, Nullable`1<TimeSpan> delay);
}
public enum Abp.BackgroundJobs.BackgroundJobPriority : Enum {
    public byte value__;
    public static BackgroundJobPriority Low;
    public static BackgroundJobPriority BelowNormal;
    public static BackgroundJobPriority Normal;
    public static BackgroundJobPriority AboveNormal;
    public static BackgroundJobPriority High;
}
public class Abp.BackgroundJobs.EventTriggerAsyncBackgroundJob`1 : object {
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    public IEventBus EventBus { get; public set; }
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    [AsyncStateMachineAttribute("Abp.BackgroundJobs.EventTriggerAsyncBackgroundJob`1/<ExecuteAsync>d__5")]
public sealed virtual Task ExecuteAsync(TEventData eventData);
}
public interface Abp.BackgroundJobs.IAsyncBackgroundJob`1 {
    public abstract virtual Task ExecuteAsync(TArgs args);
}
public interface Abp.BackgroundJobs.IBackgroundJob`1 {
    public abstract virtual void Execute(TArgs args);
}
public interface Abp.BackgroundJobs.IBackgroundJobBase`1 {
}
public interface Abp.BackgroundJobs.IBackgroundJobConfiguration {
    public bool IsJobExecutionEnabled { get; public set; }
    [ObsoleteAttribute("Use UserTokenExpirationPeriod instead.")]
public Nullable`1<int> CleanUserTokenPeriod { get; public set; }
    public Nullable`1<TimeSpan> UserTokenExpirationPeriod { get; public set; }
    public int MaxWaitingJobToProcessPerPeriod { get; public set; }
    public IAbpStartupConfiguration AbpConfiguration { get; }
    public abstract virtual bool get_IsJobExecutionEnabled();
    public abstract virtual void set_IsJobExecutionEnabled(bool value);
    public abstract virtual Nullable`1<int> get_CleanUserTokenPeriod();
    public abstract virtual void set_CleanUserTokenPeriod(Nullable`1<int> value);
    public abstract virtual Nullable`1<TimeSpan> get_UserTokenExpirationPeriod();
    public abstract virtual void set_UserTokenExpirationPeriod(Nullable`1<TimeSpan> value);
    public abstract virtual int get_MaxWaitingJobToProcessPerPeriod();
    public abstract virtual void set_MaxWaitingJobToProcessPerPeriod(int value);
    public abstract virtual IAbpStartupConfiguration get_AbpConfiguration();
}
public interface Abp.BackgroundJobs.IBackgroundJobManager {
    public abstract virtual Task`1<string> EnqueueAsync(TArgs args, BackgroundJobPriority priority, Nullable`1<TimeSpan> delay);
    public abstract virtual string Enqueue(TArgs args, BackgroundJobPriority priority, Nullable`1<TimeSpan> delay);
    public abstract virtual Task`1<bool> DeleteAsync(string jobId);
    public abstract virtual bool Delete(string jobId);
}
public interface Abp.BackgroundJobs.IBackgroundJobStore {
    public abstract virtual Task`1<BackgroundJobInfo> GetAsync(long jobId);
    public abstract virtual BackgroundJobInfo Get(long jobId);
    public abstract virtual Task InsertAsync(BackgroundJobInfo jobInfo);
    public abstract virtual void Insert(BackgroundJobInfo jobInfo);
    public abstract virtual Task`1<List`1<BackgroundJobInfo>> GetWaitingJobsAsync(int maxResultCount);
    public abstract virtual List`1<BackgroundJobInfo> GetWaitingJobs(int maxResultCount);
    public abstract virtual Task DeleteAsync(BackgroundJobInfo jobInfo);
    public abstract virtual void Delete(BackgroundJobInfo jobInfo);
    public abstract virtual Task UpdateAsync(BackgroundJobInfo jobInfo);
    public abstract virtual void Update(BackgroundJobInfo jobInfo);
}
public class Abp.BackgroundJobs.InMemoryBackgroundJobStore : object {
    private ConcurrentDictionary`2<long, BackgroundJobInfo> _jobs;
    private long _lastId;
    public sealed virtual Task`1<BackgroundJobInfo> GetAsync(long jobId);
    public sealed virtual BackgroundJobInfo Get(long jobId);
    public sealed virtual Task InsertAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Insert(BackgroundJobInfo jobInfo);
    public sealed virtual Task`1<List`1<BackgroundJobInfo>> GetWaitingJobsAsync(int maxResultCount);
    public sealed virtual List`1<BackgroundJobInfo> GetWaitingJobs(int maxResultCount);
    public sealed virtual Task DeleteAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Delete(BackgroundJobInfo jobInfo);
    public sealed virtual Task UpdateAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Update(BackgroundJobInfo jobInfo);
}
public class Abp.BackgroundJobs.NullBackgroundJobStore : object {
    public sealed virtual Task`1<BackgroundJobInfo> GetAsync(long jobId);
    public sealed virtual BackgroundJobInfo Get(long jobId);
    public sealed virtual Task InsertAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Insert(BackgroundJobInfo jobInfo);
    public sealed virtual Task`1<List`1<BackgroundJobInfo>> GetWaitingJobsAsync(int maxResultCount);
    public sealed virtual List`1<BackgroundJobInfo> GetWaitingJobs(int maxResultCount);
    public sealed virtual Task DeleteAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Delete(BackgroundJobInfo jobInfo);
    public sealed virtual Task UpdateAsync(BackgroundJobInfo jobInfo);
    public sealed virtual void Update(BackgroundJobInfo jobInfo);
}
public class Abp.CachedUniqueKeys.CachedUniqueKeyPerUser : object {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private ICacheManager _cacheManager;
    public IAbpSession AbpSession { get; public set; }
    public CachedUniqueKeyPerUser(ICacheManager cacheManager);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    public virtual Task`1<string> GetKeyAsync(string cacheName);
    public virtual Task RemoveKeyAsync(string cacheName);
    public virtual Task`1<string> GetKeyAsync(string cacheName, UserIdentifier user);
    public virtual Task RemoveKeyAsync(string cacheName, UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.CachedUniqueKeys.CachedUniqueKeyPerUser/<GetKeyAsync>d__10")]
public virtual Task`1<string> GetKeyAsync(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    [AsyncStateMachineAttribute("Abp.CachedUniqueKeys.CachedUniqueKeyPerUser/<RemoveKeyAsync>d__11")]
public virtual Task RemoveKeyAsync(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    [AsyncStateMachineAttribute("Abp.CachedUniqueKeys.CachedUniqueKeyPerUser/<ClearCacheAsync>d__12")]
public virtual Task ClearCacheAsync(string cacheName);
    public virtual string GetKey(string cacheName);
    public virtual void RemoveKey(string cacheName);
    public virtual string GetKey(string cacheName, UserIdentifier user);
    public virtual void RemoveKey(string cacheName, UserIdentifier user);
    public virtual string GetKey(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    public virtual void RemoveKey(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    public virtual void ClearCache(string cacheName);
    protected virtual ITypedCache`2<string, string> GetCache(string cacheName);
    protected virtual string GetCacheKeyForUser(Nullable`1<int> tenantId, Nullable`1<long> userId);
}
public interface Abp.CachedUniqueKeys.ICachedUniqueKeyPerUser {
    public abstract virtual Task`1<string> GetKeyAsync(string cacheName);
    public abstract virtual Task RemoveKeyAsync(string cacheName);
    public abstract virtual Task`1<string> GetKeyAsync(string cacheName, UserIdentifier user);
    public abstract virtual Task RemoveKeyAsync(string cacheName, UserIdentifier user);
    public abstract virtual Task`1<string> GetKeyAsync(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    public abstract virtual Task RemoveKeyAsync(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    public abstract virtual Task ClearCacheAsync(string cacheName);
    public abstract virtual string GetKey(string cacheName);
    public abstract virtual void RemoveKey(string cacheName);
    public abstract virtual string GetKey(string cacheName, UserIdentifier user);
    public abstract virtual void RemoveKey(string cacheName, UserIdentifier user);
    public abstract virtual string GetKey(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    public abstract virtual void RemoveKey(string cacheName, Nullable`1<int> tenantId, Nullable`1<long> userId);
    public abstract virtual void ClearCache(string cacheName);
}
[DebuggerStepThroughAttribute]
public static class Abp.Check : object {
    public static T NotNull(T value, string parameterName);
    public static string NotNullOrEmpty(string value, string parameterName);
    public static string NotNullOrWhiteSpace(string value, string parameterName);
    public static ICollection`1<T> NotNullOrEmpty(ICollection`1<T> value, string parameterName);
}
[ExtensionAttribute]
public static class Abp.Collections.Extensions.CollectionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(ICollection`1<T> source);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable this);
    [ExtensionAttribute]
public static bool AddIfNotContains(ICollection`1<T> source, T item);
}
[ExtensionAttribute]
public static class Abp.Collections.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetValue(IDictionary`2<string, object> dictionary, string key, T& value);
    [ExtensionAttribute]
public static TValue GetOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> factory);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> factory);
}
[ExtensionAttribute]
public static class Abp.Collections.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string JoinAsString(IEnumerable`1<string> source, string separator);
    [ExtensionAttribute]
public static string JoinAsString(IEnumerable`1<T> source, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereIf(IEnumerable`1<T> source, bool condition, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereIf(IEnumerable`1<T> source, bool condition, Func`3<T, int, bool> predicate);
}
[ExtensionAttribute]
public static class Abp.Collections.Extensions.ListExtensions : object {
    [ExtensionAttribute]
public static List`1<T> SortByDependencies(IEnumerable`1<T> source, Func`2<T, IEnumerable`1<T>> getDependencies);
    private static void SortByDependenciesVisit(T item, Func`2<T, IEnumerable`1<T>> getDependencies, List`1<T> sorted, Dictionary`2<T, bool> visited);
}
public interface Abp.Collections.ITypeList {
}
public interface Abp.Collections.ITypeList`1 {
    public abstract virtual void Add();
    public abstract virtual bool TryAdd();
    public abstract virtual bool Contains();
    public abstract virtual void Remove();
}
public class Abp.Collections.TypeList : TypeList`1<object> {
}
[DefaultMemberAttribute("Item")]
public class Abp.Collections.TypeList`1 : object {
    private List`1<Type> _typeList;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Type Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual Type get_Item(int index);
    public sealed virtual void set_Item(int index, Type value);
    public sealed virtual void Add();
    public sealed virtual bool TryAdd();
    public sealed virtual void Add(Type item);
    public sealed virtual void Insert(int index, Type item);
    public sealed virtual int IndexOf(Type item);
    public sealed virtual bool Contains();
    public sealed virtual bool Contains(Type item);
    public sealed virtual void Remove();
    public sealed virtual bool Remove(Type item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual void CopyTo(Type[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<Type> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static void CheckType(Type item);
}
[ExtensionAttribute]
public static class Abp.Configuration.CacheManagerSettingExtensions : object {
    [ExtensionAttribute]
public static ITypedCache`2<string, Dictionary`2<string, SettingInfo>> GetApplicationSettingsCache(ICacheManager cacheManager);
    [ExtensionAttribute]
public static ITypedCache`2<int, Dictionary`2<string, SettingInfo>> GetTenantSettingsCache(ICacheManager cacheManager);
    [ExtensionAttribute]
public static ITypedCache`2<string, Dictionary`2<string, SettingInfo>> GetUserSettingsCache(ICacheManager cacheManager);
}
public class Abp.Configuration.CustomConfigProviderContext : object {
    [CompilerGeneratedAttribute]
private IScopedIocResolver <IocResolver>k__BackingField;
    public IScopedIocResolver IocResolver { get; }
    public CustomConfigProviderContext(IScopedIocResolver iocResolver);
    [CompilerGeneratedAttribute]
public IScopedIocResolver get_IocResolver();
}
public class Abp.Configuration.DefaultConfigSettingStore : object {
    [CompilerGeneratedAttribute]
private static DefaultConfigSettingStore <Instance>k__BackingField;
    public static DefaultConfigSettingStore Instance { get; }
    private static DefaultConfigSettingStore();
    [CompilerGeneratedAttribute]
public static DefaultConfigSettingStore get_Instance();
    public sealed virtual Task`1<SettingInfo> GetSettingOrNullAsync(Nullable`1<int> tenantId, Nullable`1<long> userId, string name);
    public sealed virtual SettingInfo GetSettingOrNull(Nullable`1<int> tenantId, Nullable`1<long> userId, string name);
    public sealed virtual Task DeleteAsync(SettingInfo setting);
    public sealed virtual void Delete(SettingInfo setting);
    public sealed virtual Task CreateAsync(SettingInfo setting);
    public sealed virtual void Create(SettingInfo setting);
    public sealed virtual Task UpdateAsync(SettingInfo setting);
    public sealed virtual void Update(SettingInfo setting);
    public sealed virtual Task`1<List`1<SettingInfo>> GetAllListAsync(Nullable`1<int> tenantId, Nullable`1<long> userId);
    public sealed virtual List`1<SettingInfo> GetAllList(Nullable`1<int> tenantId, Nullable`1<long> userId);
}
[DefaultMemberAttribute("Item")]
public class Abp.Configuration.DictionaryBasedConfig : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomSettings>k__BackingField;
    protected Dictionary`2<string, object> CustomSettings { get; private set; }
    public object Item { get; public set; }
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, object> get_CustomSettings();
    [CompilerGeneratedAttribute]
private void set_CustomSettings(Dictionary`2<string, object> value);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public sealed virtual T Get(string name);
    public sealed virtual void Set(string name, T value);
    public sealed virtual object Get(string name);
    public sealed virtual object Get(string name, object defaultValue);
    public sealed virtual T Get(string name, T defaultValue);
    public sealed virtual T GetOrCreate(string name, Func`1<T> creator);
}
public class Abp.Configuration.HiddenSettingClientVisibilityProvider : object {
    [AsyncStateMachineAttribute("Abp.Configuration.HiddenSettingClientVisibilityProvider/<CheckVisible>d__0")]
public sealed virtual Task`1<bool> CheckVisible(IScopedIocResolver scope);
}
public interface Abp.Configuration.IDictionaryBasedConfig {
    public abstract virtual void Set(string name, T value);
    public abstract virtual object Get(string name);
    public abstract virtual T Get(string name);
    public abstract virtual object Get(string name, object defaultValue);
    public abstract virtual T Get(string name, T defaultValue);
    public abstract virtual T GetOrCreate(string name, Func`1<T> creator);
}
public interface Abp.Configuration.ISettingClientVisibilityProvider {
    public abstract virtual Task`1<bool> CheckVisible(IScopedIocResolver scope);
}
public interface Abp.Configuration.ISettingDefinitionManager {
    public abstract virtual SettingDefinition GetSettingDefinition(string name);
    public abstract virtual IReadOnlyList`1<SettingDefinition> GetAllSettingDefinitions();
}
public interface Abp.Configuration.ISettingEncryptionService {
    public abstract virtual string Encrypt(SettingDefinition settingDefinition, string plainValue);
    public abstract virtual string Decrypt(SettingDefinition settingDefinition, string encryptedValue);
}
public interface Abp.Configuration.ISettingManager {
    public abstract virtual Task`1<string> GetSettingValueAsync(string name);
    public abstract virtual string GetSettingValue(string name);
    public abstract virtual Task`1<string> GetSettingValueForApplicationAsync(string name);
    public abstract virtual string GetSettingValueForApplication(string name);
    public abstract virtual Task`1<string> GetSettingValueForApplicationAsync(string name, bool fallbackToDefault);
    public abstract virtual string GetSettingValueForApplication(string name, bool fallbackToDefault);
    public abstract virtual Task`1<string> GetSettingValueForTenantAsync(string name, int tenantId);
    public abstract virtual string GetSettingValueForTenant(string name, int tenantId);
    public abstract virtual Task`1<string> GetSettingValueForTenantAsync(string name, int tenantId, bool fallbackToDefault);
    public abstract virtual string GetSettingValueForTenant(string name, int tenantId, bool fallbackToDefault);
    public abstract virtual Task`1<string> GetSettingValueForUserAsync(string name, Nullable`1<int> tenantId, long userId);
    public abstract virtual string GetSettingValueForUser(string name, Nullable`1<int> tenantId, long userId);
    public abstract virtual Task`1<string> GetSettingValueForUserAsync(string name, Nullable`1<int> tenantId, long userId, bool fallbackToDefault);
    public abstract virtual string GetSettingValueForUser(string name, Nullable`1<int> tenantId, long userId, bool fallbackToDefault);
    public abstract virtual Task`1<string> GetSettingValueForUserAsync(string name, UserIdentifier user);
    public abstract virtual string GetSettingValueForUser(string name, UserIdentifier user);
    public abstract virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesAsync();
    public abstract virtual IReadOnlyList`1<ISettingValue> GetAllSettingValues();
    public abstract virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesAsync(SettingScopes scopes);
    public abstract virtual IReadOnlyList`1<ISettingValue> GetAllSettingValues(SettingScopes scopes);
    public abstract virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForApplicationAsync();
    public abstract virtual IReadOnlyList`1<ISettingValue> GetAllSettingValuesForApplication();
    public abstract virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForTenantAsync(int tenantId);
    public abstract virtual IReadOnlyList`1<ISettingValue> GetAllSettingValuesForTenant(int tenantId);
    public abstract virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForUserAsync(UserIdentifier user);
    public abstract virtual IReadOnlyList`1<ISettingValue> GetAllSettingValuesForUser(UserIdentifier user);
    public abstract virtual Task ChangeSettingForApplicationAsync(string name, string value);
    public abstract virtual void ChangeSettingForApplication(string name, string value);
    public abstract virtual Task ChangeSettingForTenantAsync(int tenantId, string name, string value);
    public abstract virtual void ChangeSettingForTenant(int tenantId, string name, string value);
    public abstract virtual Task ChangeSettingForUserAsync(UserIdentifier user, string name, string value);
    public abstract virtual void ChangeSettingForUser(UserIdentifier user, string name, string value);
}
public interface Abp.Configuration.ISettingStore {
    public abstract virtual Task`1<SettingInfo> GetSettingOrNullAsync(Nullable`1<int> tenantId, Nullable`1<long> userId, string name);
    public abstract virtual SettingInfo GetSettingOrNull(Nullable`1<int> tenantId, Nullable`1<long> userId, string name);
    public abstract virtual Task DeleteAsync(SettingInfo setting);
    public abstract virtual void Delete(SettingInfo setting);
    public abstract virtual Task CreateAsync(SettingInfo setting);
    public abstract virtual void Create(SettingInfo setting);
    public abstract virtual Task UpdateAsync(SettingInfo setting);
    public abstract virtual void Update(SettingInfo setting);
    public abstract virtual Task`1<List`1<SettingInfo>> GetAllListAsync(Nullable`1<int> tenantId, Nullable`1<long> userId);
    public abstract virtual List`1<SettingInfo> GetAllList(Nullable`1<int> tenantId, Nullable`1<long> userId);
}
public interface Abp.Configuration.ISettingValue {
    public string Name { get; }
    public string Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
}
public class Abp.Configuration.RequiresAuthenticationSettingClientVisibilityProvider : object {
    [AsyncStateMachineAttribute("Abp.Configuration.RequiresAuthenticationSettingClientVisibilityProvider/<CheckVisible>d__0")]
public sealed virtual Task`1<bool> CheckVisible(IScopedIocResolver scope);
}
public class Abp.Configuration.RequiresPermissionSettingClientVisibilityProvider : object {
    private IPermissionDependency _permissionDependency;
    public RequiresPermissionSettingClientVisibilityProvider(IPermissionDependency permissionDependency);
    [AsyncStateMachineAttribute("Abp.Configuration.RequiresPermissionSettingClientVisibilityProvider/<CheckVisible>d__2")]
public sealed virtual Task`1<bool> CheckVisible(IScopedIocResolver scope);
}
public class Abp.Configuration.SettingDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingScopes <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInherited>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingDefinitionGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingClientVisibilityProvider <ClientVisibilityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncrypted>k__BackingField;
    public string Name { get; private set; }
    public ILocalizableString DisplayName { get; public set; }
    public ILocalizableString Description { get; public set; }
    public SettingScopes Scopes { get; public set; }
    public bool IsInherited { get; public set; }
    public SettingDefinitionGroup Group { get; public set; }
    public string DefaultValue { get; public set; }
    public ISettingClientVisibilityProvider ClientVisibilityProvider { get; public set; }
    public object CustomData { get; public set; }
    public bool IsEncrypted { get; public set; }
    public SettingDefinition(string name, string defaultValue, ILocalizableString displayName, SettingDefinitionGroup group, ILocalizableString description, SettingScopes scopes, bool isVisibleToClients, bool isInherited, object customData, ISettingClientVisibilityProvider clientVisibilityProvider, bool isEncrypted);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(ILocalizableString value);
    [CompilerGeneratedAttribute]
public SettingScopes get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(SettingScopes value);
    [CompilerGeneratedAttribute]
public bool get_IsInherited();
    [CompilerGeneratedAttribute]
public void set_IsInherited(bool value);
    [CompilerGeneratedAttribute]
public SettingDefinitionGroup get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(SettingDefinitionGroup value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public ISettingClientVisibilityProvider get_ClientVisibilityProvider();
    [CompilerGeneratedAttribute]
public void set_ClientVisibilityProvider(ISettingClientVisibilityProvider value);
    [CompilerGeneratedAttribute]
public object get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(object value);
    [CompilerGeneratedAttribute]
public bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
public void set_IsEncrypted(bool value);
}
public class Abp.Configuration.SettingDefinitionGroup : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingDefinitionGroup <Parent>k__BackingField;
    private List`1<SettingDefinitionGroup> _children;
    public string Name { get; private set; }
    public ILocalizableString DisplayName { get; private set; }
    public SettingDefinitionGroup Parent { get; private set; }
    public IReadOnlyList`1<SettingDefinitionGroup> Children { get; }
    public SettingDefinitionGroup(string name, ILocalizableString displayName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public SettingDefinitionGroup get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(SettingDefinitionGroup value);
    public IReadOnlyList`1<SettingDefinitionGroup> get_Children();
    public SettingDefinitionGroup AddChild(SettingDefinitionGroup child);
}
internal class Abp.Configuration.SettingDefinitionManager : object {
    private IIocManager _iocManager;
    private ISettingsConfiguration _settingsConfiguration;
    private IDictionary`2<string, SettingDefinition> _settings;
    public SettingDefinitionManager(IIocManager iocManager, ISettingsConfiguration settingsConfiguration);
    public void Initialize();
    public sealed virtual SettingDefinition GetSettingDefinition(string name);
    public sealed virtual IReadOnlyList`1<SettingDefinition> GetAllSettingDefinitions();
    private IDisposableDependencyObjectWrapper`1<SettingProvider> CreateProvider(Type providerType);
}
public class Abp.Configuration.SettingDefinitionProviderContext : object {
    [CompilerGeneratedAttribute]
private ISettingDefinitionManager <Manager>k__BackingField;
    public ISettingDefinitionManager Manager { get; }
    public SettingDefinitionProviderContext(ISettingDefinitionManager manager);
    [CompilerGeneratedAttribute]
public ISettingDefinitionManager get_Manager();
}
public class Abp.Configuration.SettingEncryptionService : object {
    private ISettingsConfiguration _settingsConfiguration;
    public SettingEncryptionService(ISettingsConfiguration settingsConfiguration);
    public sealed virtual string Encrypt(SettingDefinition settingDefinition, string plainValue);
    public sealed virtual string Decrypt(SettingDefinition settingDefinition, string encryptedValue);
}
public class Abp.Configuration.SettingInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public SettingInfo(Nullable`1<int> tenantId, Nullable`1<long> userId, string name, string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Abp.Configuration.SettingManager : object {
    public static string ApplicationSettingsCacheKey;
    [CompilerGeneratedAttribute]
private ISettingEncryptionService <SettingEncryptionService>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingStore <SettingStore>k__BackingField;
    private ISettingDefinitionManager _settingDefinitionManager;
    private IMultiTenancyConfig _multiTenancyConfig;
    private ITypedCache`2<string, Dictionary`2<string, SettingInfo>> _applicationSettingCache;
    private ITypedCache`2<int, Dictionary`2<string, SettingInfo>> _tenantSettingCache;
    private ITypedCache`2<string, Dictionary`2<string, SettingInfo>> _userSettingCache;
    private ITenantStore _tenantStore;
    private IUnitOfWorkManager _unitOfWorkManager;
    protected ISettingEncryptionService SettingEncryptionService { get; }
    public IAbpSession AbpSession { get; public set; }
    public ISettingStore SettingStore { get; public set; }
    public SettingManager(ISettingDefinitionManager settingDefinitionManager, ICacheManager cacheManager, IMultiTenancyConfig multiTenancyConfig, ITenantStore tenantStore, ISettingEncryptionService settingEncryptionService, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
protected ISettingEncryptionService get_SettingEncryptionService();
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public ISettingStore get_SettingStore();
    [CompilerGeneratedAttribute]
public void set_SettingStore(ISettingStore value);
    public sealed virtual Task`1<string> GetSettingValueAsync(string name);
    public sealed virtual string GetSettingValue(string name);
    public sealed virtual Task`1<string> GetSettingValueForApplicationAsync(string name);
    public sealed virtual string GetSettingValueForApplication(string name);
    public sealed virtual Task`1<string> GetSettingValueForApplicationAsync(string name, bool fallbackToDefault);
    public sealed virtual string GetSettingValueForApplication(string name, bool fallbackToDefault);
    public sealed virtual Task`1<string> GetSettingValueForTenantAsync(string name, int tenantId);
    public sealed virtual string GetSettingValueForTenant(string name, int tenantId);
    public sealed virtual Task`1<string> GetSettingValueForTenantAsync(string name, int tenantId, bool fallbackToDefault);
    public sealed virtual string GetSettingValueForTenant(string name, int tenantId, bool fallbackToDefault);
    public sealed virtual Task`1<string> GetSettingValueForUserAsync(string name, Nullable`1<int> tenantId, long userId);
    public sealed virtual string GetSettingValueForUser(string name, Nullable`1<int> tenantId, long userId);
    public sealed virtual Task`1<string> GetSettingValueForUserAsync(string name, Nullable`1<int> tenantId, long userId, bool fallbackToDefault);
    public sealed virtual string GetSettingValueForUser(string name, Nullable`1<int> tenantId, long userId, bool fallbackToDefault);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetAllSettingValuesAsync>d__34")]
public sealed virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesAsync();
    public sealed virtual IReadOnlyList`1<ISettingValue> GetAllSettingValues();
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetAllSettingValuesAsync>d__36")]
public sealed virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesAsync(SettingScopes scopes);
    public sealed virtual IReadOnlyList`1<ISettingValue> GetAllSettingValues(SettingScopes scopes);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetAllSettingValuesForApplicationAsync>d__38")]
public sealed virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForApplicationAsync();
    public sealed virtual IReadOnlyList`1<ISettingValue> GetAllSettingValuesForApplication();
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetAllSettingValuesForTenantAsync>d__40")]
public sealed virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForTenantAsync(int tenantId);
    public sealed virtual IReadOnlyList`1<ISettingValue> GetAllSettingValuesForTenant(int tenantId);
    public Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForUserAsync(long userId);
    public IReadOnlyList`1<ISettingValue> GetAllSettingValuesForUser(long userId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetAllSettingValuesForUserAsync>d__44")]
public sealed virtual Task`1<IReadOnlyList`1<ISettingValue>> GetAllSettingValuesForUserAsync(UserIdentifier user);
    public sealed virtual IReadOnlyList`1<ISettingValue> GetAllSettingValuesForUser(UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<ChangeSettingForApplicationAsync>d__46")]
public virtual Task ChangeSettingForApplicationAsync(string name, string value);
    public virtual void ChangeSettingForApplication(string name, string value);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<ChangeSettingForTenantAsync>d__48")]
public virtual Task ChangeSettingForTenantAsync(int tenantId, string name, string value);
    public virtual void ChangeSettingForTenant(int tenantId, string name, string value);
    public Task ChangeSettingForUserAsync(long userId, string name, string value);
    public void ChangeSettingForUser(long userId, string name, string value);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<ChangeSettingForUserAsync>d__52")]
public virtual Task ChangeSettingForUserAsync(UserIdentifier user, string name, string value);
    public virtual void ChangeSettingForUser(UserIdentifier user, string name, string value);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetSettingValueInternalAsync>d__54")]
private Task`1<string> GetSettingValueInternalAsync(string name, Nullable`1<int> tenantId, Nullable`1<long> userId, bool fallbackToDefault);
    private string GetSettingValueInternal(string name, Nullable`1<int> tenantId, Nullable`1<long> userId, bool fallbackToDefault);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<InsertOrUpdateOrDeleteSettingValueAsync>d__56")]
private Task`1<SettingInfo> InsertOrUpdateOrDeleteSettingValueAsync(string name, string value, Nullable`1<int> tenantId, Nullable`1<long> userId);
    private SettingInfo InsertOrUpdateOrDeleteSettingValue(string name, string value, Nullable`1<int> tenantId, Nullable`1<long> userId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetSettingValueForApplicationOrNullAsync>d__58")]
private Task`1<SettingInfo> GetSettingValueForApplicationOrNullAsync(string name);
    private SettingInfo GetSettingValueForApplicationOrNull(string name);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetSettingValueForTenantOrNullAsync>d__60")]
private Task`1<SettingInfo> GetSettingValueForTenantOrNullAsync(int tenantId, string name);
    private SettingInfo GetSettingValueForTenantOrNull(int tenantId, string name);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetSettingValueForUserOrNullAsync>d__62")]
private Task`1<SettingInfo> GetSettingValueForUserOrNullAsync(UserIdentifier user, string name);
    private SettingInfo GetSettingValueForUserOrNull(UserIdentifier user, string name);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetApplicationSettingsAsync>d__64")]
private Task`1<Dictionary`2<string, SettingInfo>> GetApplicationSettingsAsync();
    private Dictionary`2<string, SettingInfo> GetApplicationSettings();
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetReadOnlyTenantSettingsAsync>d__66")]
private Task`1<ImmutableDictionary`2<string, SettingInfo>> GetReadOnlyTenantSettingsAsync(int tenantId);
    private ImmutableDictionary`2<string, SettingInfo> GetReadOnlyTenantSettings(int tenantId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetReadOnlyUserSettingsAsync>d__68")]
private Task`1<ImmutableDictionary`2<string, SettingInfo>> GetReadOnlyUserSettingsAsync(UserIdentifier user);
    private ImmutableDictionary`2<string, SettingInfo> GetReadOnlyUserSettings(UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetTenantSettingsFromCacheAsync>d__70")]
private Task`1<Dictionary`2<string, SettingInfo>> GetTenantSettingsFromCacheAsync(int tenantId);
    private Dictionary`2<string, SettingInfo> GetTenantSettingsFromCache(int tenantId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<GetUserSettingsFromCacheAsync>d__72")]
private Task`1<Dictionary`2<string, SettingInfo>> GetUserSettingsFromCacheAsync(UserIdentifier user);
    private Dictionary`2<string, SettingInfo> ConvertSettingInfosToDictionary(List`1<SettingInfo> settingValues);
    private Dictionary`2<string, SettingInfo> GetUserSettingsFromCache(UserIdentifier user);
    public sealed virtual Task`1<string> GetSettingValueForUserAsync(string name, UserIdentifier user);
    public sealed virtual string GetSettingValueForUser(string name, UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManager/<<GetApplicationSettingsAsync>b__64_0>d")]
[CompilerGeneratedAttribute]
private Task`1<Dictionary`2<string, SettingInfo>> <GetApplicationSettingsAsync>b__64_0();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SettingInfo> <GetApplicationSettings>b__65_0();
}
[ExtensionAttribute]
public static class Abp.Configuration.SettingManagerExtensions : object {
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManagerExtensions/<GetSettingValueAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> GetSettingValueAsync(ISettingManager settingManager, string name);
    [ExtensionAttribute]
public static T GetSettingValue(ISettingManager settingManager, string name);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManagerExtensions/<GetSettingValueForApplicationAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<T> GetSettingValueForApplicationAsync(ISettingManager settingManager, string name);
    [ExtensionAttribute]
public static T GetSettingValueForApplication(ISettingManager settingManager, string name);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManagerExtensions/<GetSettingValueForTenantAsync>d__4`1")]
[ExtensionAttribute]
public static Task`1<T> GetSettingValueForTenantAsync(ISettingManager settingManager, string name, int tenantId);
    [ExtensionAttribute]
public static T GetSettingValueForTenant(ISettingManager settingManager, string name, int tenantId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManagerExtensions/<GetSettingValueForUserAsync>d__6`1")]
[ExtensionAttribute]
public static Task`1<T> GetSettingValueForUserAsync(ISettingManager settingManager, string name, Nullable`1<int> tenantId, long userId);
    [ExtensionAttribute]
public static T GetSettingValueForUser(ISettingManager settingManager, string name, Nullable`1<int> tenantId, long userId);
    [AsyncStateMachineAttribute("Abp.Configuration.SettingManagerExtensions/<GetSettingValueForUserAsync>d__8`1")]
[ExtensionAttribute]
public static Task`1<T> GetSettingValueForUserAsync(ISettingManager settingManager, string name, UserIdentifier user);
    [ExtensionAttribute]
public static T GetSettingValueForUser(ISettingManager settingManager, string name, UserIdentifier user);
}
public abstract class Abp.Configuration.SettingProvider : object {
    public abstract virtual IEnumerable`1<SettingDefinition> GetSettingDefinitions(SettingDefinitionProviderContext context);
}
[FlagsAttribute]
public enum Abp.Configuration.SettingScopes : Enum {
    public int value__;
    public static SettingScopes Application;
    public static SettingScopes Tenant;
    public static SettingScopes User;
    public static SettingScopes All;
}
internal class Abp.Configuration.Startup.AbpStartupConfiguration : DictionaryBasedConfig {
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationConfiguration <Localization>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthorizationConfiguration <Authorization>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidationConfiguration <Validation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsConfiguration <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNameOrConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private IModuleConfigurations <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkDefaultOptions <UnitOfWork>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureConfiguration <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackgroundJobConfiguration <BackgroundJobs>k__BackingField;
    [CompilerGeneratedAttribute]
private INotificationConfiguration <Notifications>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationConfiguration <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventBusConfiguration <EventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditingConfiguration <Auditing>k__BackingField;
    [CompilerGeneratedAttribute]
private ICachingConfiguration <Caching>k__BackingField;
    [CompilerGeneratedAttribute]
private IMultiTenancyConfig <MultiTenancy>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Action> <ServiceReplaceActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEmbeddedResourcesConfiguration <EmbeddedResources>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityHistoryConfiguration <EntityHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebhooksConfiguration <Webhooks>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicEntityPropertyConfiguration <DynamicEntityProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ICustomConfigProvider> <CustomConfigProviders>k__BackingField;
    public IIocManager IocManager { get; }
    public ILocalizationConfiguration Localization { get; private set; }
    public IAuthorizationConfiguration Authorization { get; private set; }
    public IValidationConfiguration Validation { get; private set; }
    public ISettingsConfiguration Settings { get; private set; }
    public string DefaultNameOrConnectionString { get; public set; }
    public IModuleConfigurations Modules { get; private set; }
    public IUnitOfWorkDefaultOptions UnitOfWork { get; private set; }
    public IFeatureConfiguration Features { get; private set; }
    public IBackgroundJobConfiguration BackgroundJobs { get; private set; }
    public INotificationConfiguration Notifications { get; private set; }
    public INavigationConfiguration Navigation { get; private set; }
    public IEventBusConfiguration EventBus { get; private set; }
    public IAuditingConfiguration Auditing { get; private set; }
    public ICachingConfiguration Caching { get; private set; }
    public IMultiTenancyConfig MultiTenancy { get; private set; }
    public Dictionary`2<Type, Action> ServiceReplaceActions { get; private set; }
    public IEmbeddedResourcesConfiguration EmbeddedResources { get; private set; }
    public IEntityHistoryConfiguration EntityHistory { get; private set; }
    public IWebhooksConfiguration Webhooks { get; private set; }
    public IDynamicEntityPropertyConfiguration DynamicEntityProperties { get; private set; }
    public IList`1<ICustomConfigProvider> CustomConfigProviders { get; private set; }
    public AbpStartupConfiguration(IIocManager iocManager);
    [CompilerGeneratedAttribute]
public sealed virtual IIocManager get_IocManager();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalizationConfiguration get_Localization();
    [CompilerGeneratedAttribute]
private void set_Localization(ILocalizationConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuthorizationConfiguration get_Authorization();
    [CompilerGeneratedAttribute]
private void set_Authorization(IAuthorizationConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IValidationConfiguration get_Validation();
    [CompilerGeneratedAttribute]
private void set_Validation(IValidationConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ISettingsConfiguration get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(ISettingsConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultNameOrConnectionString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultNameOrConnectionString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IModuleConfigurations get_Modules();
    [CompilerGeneratedAttribute]
private void set_Modules(IModuleConfigurations value);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitOfWorkDefaultOptions get_UnitOfWork();
    [CompilerGeneratedAttribute]
private void set_UnitOfWork(IUnitOfWorkDefaultOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureConfiguration get_Features();
    [CompilerGeneratedAttribute]
private void set_Features(IFeatureConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IBackgroundJobConfiguration get_BackgroundJobs();
    [CompilerGeneratedAttribute]
private void set_BackgroundJobs(IBackgroundJobConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual INotificationConfiguration get_Notifications();
    [CompilerGeneratedAttribute]
private void set_Notifications(INotificationConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual INavigationConfiguration get_Navigation();
    [CompilerGeneratedAttribute]
private void set_Navigation(INavigationConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IEventBusConfiguration get_EventBus();
    [CompilerGeneratedAttribute]
private void set_EventBus(IEventBusConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuditingConfiguration get_Auditing();
    [CompilerGeneratedAttribute]
private void set_Auditing(IAuditingConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICachingConfiguration get_Caching();
    [CompilerGeneratedAttribute]
private void set_Caching(ICachingConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IMultiTenancyConfig get_MultiTenancy();
    [CompilerGeneratedAttribute]
private void set_MultiTenancy(IMultiTenancyConfig value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Action> get_ServiceReplaceActions();
    [CompilerGeneratedAttribute]
private void set_ServiceReplaceActions(Dictionary`2<Type, Action> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEmbeddedResourcesConfiguration get_EmbeddedResources();
    [CompilerGeneratedAttribute]
private void set_EmbeddedResources(IEmbeddedResourcesConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IEntityHistoryConfiguration get_EntityHistory();
    [CompilerGeneratedAttribute]
private void set_EntityHistory(IEntityHistoryConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebhooksConfiguration get_Webhooks();
    [CompilerGeneratedAttribute]
private void set_Webhooks(IWebhooksConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IDynamicEntityPropertyConfiguration get_DynamicEntityProperties();
    [CompilerGeneratedAttribute]
private void set_DynamicEntityProperties(IDynamicEntityPropertyConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ICustomConfigProvider> get_CustomConfigProviders();
    [CompilerGeneratedAttribute]
private void set_CustomConfigProviders(IList`1<ICustomConfigProvider> value);
    public sealed virtual Dictionary`2<string, object> GetCustomConfig();
    public void Initialize();
    public sealed virtual void ReplaceService(Type type, Action replaceAction);
    public sealed virtual T Get();
    [CompilerGeneratedAttribute]
private T <Get>b__91_0();
}
[ExtensionAttribute]
public static class Abp.Configuration.Startup.AbpStartupConfigurationExtensions : object {
    [ExtensionAttribute]
public static void ReplaceService(IAbpStartupConfiguration configuration, Type type, Type impl, DependencyLifeStyle lifeStyle);
    [ExtensionAttribute]
public static void ReplaceService(IAbpStartupConfiguration configuration, DependencyLifeStyle lifeStyle);
    [ExtensionAttribute]
public static void ReplaceService(IAbpStartupConfiguration configuration, Action replaceAction);
}
internal class Abp.Configuration.Startup.AuthorizationConfiguration : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<AuthorizationProvider> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public ITypeList`1<AuthorizationProvider> Providers { get; }
    public bool IsEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<AuthorizationProvider> get_Providers();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
}
internal class Abp.Configuration.Startup.EventBusConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <UseDefaultEventBus>k__BackingField;
    public bool UseDefaultEventBus { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDefaultEventBus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseDefaultEventBus(bool value);
}
public interface Abp.Configuration.Startup.IAbpStartupConfiguration {
    public IIocManager IocManager { get; }
    public ILocalizationConfiguration Localization { get; }
    public INavigationConfiguration Navigation { get; }
    public IEventBusConfiguration EventBus { get; }
    public IAuditingConfiguration Auditing { get; }
    public ICachingConfiguration Caching { get; }
    public IMultiTenancyConfig MultiTenancy { get; }
    public IAuthorizationConfiguration Authorization { get; }
    public IValidationConfiguration Validation { get; }
    public ISettingsConfiguration Settings { get; }
    public string DefaultNameOrConnectionString { get; public set; }
    public IModuleConfigurations Modules { get; }
    public IUnitOfWorkDefaultOptions UnitOfWork { get; }
    public IFeatureConfiguration Features { get; }
    public IBackgroundJobConfiguration BackgroundJobs { get; }
    public INotificationConfiguration Notifications { get; }
    public IEmbeddedResourcesConfiguration EmbeddedResources { get; }
    public IEntityHistoryConfiguration EntityHistory { get; }
    public IWebhooksConfiguration Webhooks { get; }
    public IDynamicEntityPropertyConfiguration DynamicEntityProperties { get; }
    public IList`1<ICustomConfigProvider> CustomConfigProviders { get; }
    public abstract virtual IIocManager get_IocManager();
    public abstract virtual ILocalizationConfiguration get_Localization();
    public abstract virtual INavigationConfiguration get_Navigation();
    public abstract virtual IEventBusConfiguration get_EventBus();
    public abstract virtual IAuditingConfiguration get_Auditing();
    public abstract virtual ICachingConfiguration get_Caching();
    public abstract virtual IMultiTenancyConfig get_MultiTenancy();
    public abstract virtual IAuthorizationConfiguration get_Authorization();
    public abstract virtual IValidationConfiguration get_Validation();
    public abstract virtual ISettingsConfiguration get_Settings();
    public abstract virtual string get_DefaultNameOrConnectionString();
    public abstract virtual void set_DefaultNameOrConnectionString(string value);
    public abstract virtual IModuleConfigurations get_Modules();
    public abstract virtual IUnitOfWorkDefaultOptions get_UnitOfWork();
    public abstract virtual IFeatureConfiguration get_Features();
    public abstract virtual IBackgroundJobConfiguration get_BackgroundJobs();
    public abstract virtual INotificationConfiguration get_Notifications();
    public abstract virtual IEmbeddedResourcesConfiguration get_EmbeddedResources();
    public abstract virtual IEntityHistoryConfiguration get_EntityHistory();
    public abstract virtual IWebhooksConfiguration get_Webhooks();
    public abstract virtual IDynamicEntityPropertyConfiguration get_DynamicEntityProperties();
    public abstract virtual void ReplaceService(Type type, Action replaceAction);
    public abstract virtual T Get();
    public abstract virtual IList`1<ICustomConfigProvider> get_CustomConfigProviders();
    public abstract virtual Dictionary`2<string, object> GetCustomConfig();
}
public interface Abp.Configuration.Startup.IAuthorizationConfiguration {
    public ITypeList`1<AuthorizationProvider> Providers { get; }
    public bool IsEnabled { get; public set; }
    public abstract virtual ITypeList`1<AuthorizationProvider> get_Providers();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
}
public interface Abp.Configuration.Startup.ICustomConfigProvider {
    public abstract virtual Dictionary`2<string, object> GetConfig(CustomConfigProviderContext customConfigProviderContext);
}
public interface Abp.Configuration.Startup.IEventBusConfiguration {
    public bool UseDefaultEventBus { get; public set; }
    public abstract virtual bool get_UseDefaultEventBus();
    public abstract virtual void set_UseDefaultEventBus(bool value);
}
public interface Abp.Configuration.Startup.ILocalizationConfiguration {
    public IList`1<LanguageInfo> Languages { get; }
    public ILocalizationSourceList Sources { get; }
    public bool IsEnabled { get; public set; }
    public bool ReturnGivenTextIfNotFound { get; public set; }
    public bool WrapGivenTextIfNotFound { get; public set; }
    public bool HumanizeTextIfNotFound { get; public set; }
    public bool LogWarnMessageIfNotFound { get; public set; }
    public abstract virtual IList`1<LanguageInfo> get_Languages();
    public abstract virtual ILocalizationSourceList get_Sources();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_ReturnGivenTextIfNotFound();
    public abstract virtual void set_ReturnGivenTextIfNotFound(bool value);
    public abstract virtual bool get_WrapGivenTextIfNotFound();
    public abstract virtual void set_WrapGivenTextIfNotFound(bool value);
    public abstract virtual bool get_HumanizeTextIfNotFound();
    public abstract virtual void set_HumanizeTextIfNotFound(bool value);
    public abstract virtual bool get_LogWarnMessageIfNotFound();
    public abstract virtual void set_LogWarnMessageIfNotFound(bool value);
}
public interface Abp.Configuration.Startup.ILocalizationSourceList {
    public IList`1<LocalizationSourceExtensionInfo> Extensions { get; }
    public abstract virtual IList`1<LocalizationSourceExtensionInfo> get_Extensions();
}
public interface Abp.Configuration.Startup.IModuleConfigurations {
    public IAbpStartupConfiguration AbpConfiguration { get; }
    public abstract virtual IAbpStartupConfiguration get_AbpConfiguration();
}
public interface Abp.Configuration.Startup.IMultiTenancyConfig {
    public bool IsEnabled { get; public set; }
    public bool IgnoreFeatureCheckForHostUsers { get; public set; }
    public ITypeList`1<ITenantResolveContributor> Resolvers { get; }
    public string TenantIdResolveKey { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IgnoreFeatureCheckForHostUsers();
    public abstract virtual void set_IgnoreFeatureCheckForHostUsers(bool value);
    public abstract virtual ITypeList`1<ITenantResolveContributor> get_Resolvers();
    public abstract virtual string get_TenantIdResolveKey();
    public abstract virtual void set_TenantIdResolveKey(string value);
}
public interface Abp.Configuration.Startup.INavigationConfiguration {
    public ITypeList`1<NavigationProvider> Providers { get; }
    public abstract virtual ITypeList`1<NavigationProvider> get_Providers();
}
public interface Abp.Configuration.Startup.ISettingsConfiguration {
    public ITypeList`1<SettingProvider> Providers { get; }
    public SettingEncryptionConfiguration SettingEncryptionConfiguration { get; }
    public abstract virtual ITypeList`1<SettingProvider> get_Providers();
    public abstract virtual SettingEncryptionConfiguration get_SettingEncryptionConfiguration();
}
public interface Abp.Configuration.Startup.IValidationConfiguration {
    public List`1<Type> IgnoredTypes { get; }
    public ITypeList`1<IMethodParameterValidator> Validators { get; }
    public abstract virtual List`1<Type> get_IgnoredTypes();
    public abstract virtual ITypeList`1<IMethodParameterValidator> get_Validators();
}
internal class Abp.Configuration.Startup.LocalizationConfiguration : object {
    [CompilerGeneratedAttribute]
private IList`1<LanguageInfo> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationSourceList <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnGivenTextIfNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapGivenTextIfNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HumanizeTextIfNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogWarnMessageIfNotFound>k__BackingField;
    public IList`1<LanguageInfo> Languages { get; }
    public ILocalizationSourceList Sources { get; }
    public bool IsEnabled { get; public set; }
    public bool ReturnGivenTextIfNotFound { get; public set; }
    public bool WrapGivenTextIfNotFound { get; public set; }
    public bool HumanizeTextIfNotFound { get; public set; }
    public bool LogWarnMessageIfNotFound { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<LanguageInfo> get_Languages();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalizationSourceList get_Sources();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReturnGivenTextIfNotFound();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReturnGivenTextIfNotFound(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WrapGivenTextIfNotFound();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WrapGivenTextIfNotFound(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HumanizeTextIfNotFound();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HumanizeTextIfNotFound(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LogWarnMessageIfNotFound();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogWarnMessageIfNotFound(bool value);
}
internal class Abp.Configuration.Startup.LocalizationSourceList : List`1<ILocalizationSource> {
    [CompilerGeneratedAttribute]
private IList`1<LocalizationSourceExtensionInfo> <Extensions>k__BackingField;
    public IList`1<LocalizationSourceExtensionInfo> Extensions { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<LocalizationSourceExtensionInfo> get_Extensions();
    [CompilerGeneratedAttribute]
private void set_Extensions(IList`1<LocalizationSourceExtensionInfo> value);
}
internal class Abp.Configuration.Startup.ModuleConfigurations : object {
    [CompilerGeneratedAttribute]
private IAbpStartupConfiguration <AbpConfiguration>k__BackingField;
    public IAbpStartupConfiguration AbpConfiguration { get; private set; }
    public ModuleConfigurations(IAbpStartupConfiguration abpConfiguration);
    [CompilerGeneratedAttribute]
public sealed virtual IAbpStartupConfiguration get_AbpConfiguration();
    [CompilerGeneratedAttribute]
private void set_AbpConfiguration(IAbpStartupConfiguration value);
}
internal class Abp.Configuration.Startup.MultiTenancyConfig : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFeatureCheckForHostUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<ITenantResolveContributor> <Resolvers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantIdResolveKey>k__BackingField;
    public bool IsEnabled { get; public set; }
    public bool IgnoreFeatureCheckForHostUsers { get; public set; }
    public ITypeList`1<ITenantResolveContributor> Resolvers { get; }
    public string TenantIdResolveKey { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreFeatureCheckForHostUsers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreFeatureCheckForHostUsers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<ITenantResolveContributor> get_Resolvers();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TenantIdResolveKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantIdResolveKey(string value);
}
internal class Abp.Configuration.Startup.NavigationConfiguration : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<NavigationProvider> <Providers>k__BackingField;
    public ITypeList`1<NavigationProvider> Providers { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<NavigationProvider> get_Providers();
    [CompilerGeneratedAttribute]
private void set_Providers(ITypeList`1<NavigationProvider> value);
}
public class Abp.Configuration.Startup.SettingEncryptionConfiguration : object {
    [CompilerGeneratedAttribute]
private int <Keysize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultPassPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitVectorBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DefaultSalt>k__BackingField;
    public int Keysize { get; public set; }
    public string DefaultPassPhrase { get; public set; }
    public Byte[] InitVectorBytes { get; public set; }
    public Byte[] DefaultSalt { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Keysize();
    [CompilerGeneratedAttribute]
public void set_Keysize(int value);
    [CompilerGeneratedAttribute]
public string get_DefaultPassPhrase();
    [CompilerGeneratedAttribute]
public void set_DefaultPassPhrase(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitVectorBytes();
    [CompilerGeneratedAttribute]
public void set_InitVectorBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_DefaultSalt();
    [CompilerGeneratedAttribute]
public void set_DefaultSalt(Byte[] value);
}
internal class Abp.Configuration.Startup.SettingsConfiguration : object {
    [CompilerGeneratedAttribute]
private SettingEncryptionConfiguration <SettingEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<SettingProvider> <Providers>k__BackingField;
    public SettingEncryptionConfiguration SettingEncryptionConfiguration { get; private set; }
    public ITypeList`1<SettingProvider> Providers { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual SettingEncryptionConfiguration get_SettingEncryptionConfiguration();
    [CompilerGeneratedAttribute]
private void set_SettingEncryptionConfiguration(SettingEncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<SettingProvider> get_Providers();
    [CompilerGeneratedAttribute]
private void set_Providers(ITypeList`1<SettingProvider> value);
}
public class Abp.Configuration.Startup.ValidationConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<Type> <IgnoredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<IMethodParameterValidator> <Validators>k__BackingField;
    public List`1<Type> IgnoredTypes { get; }
    public ITypeList`1<IMethodParameterValidator> Validators { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Type> get_IgnoredTypes();
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<IMethodParameterValidator> get_Validators();
}
public class Abp.Configuration.VisibleSettingClientVisibilityProvider : object {
    [AsyncStateMachineAttribute("Abp.Configuration.VisibleSettingClientVisibilityProvider/<CheckVisible>d__0")]
public sealed virtual Task`1<bool> CheckVisible(IScopedIocResolver scope);
}
public class Abp.Data.ActiveTransactionProviderArgs : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private static ActiveTransactionProviderArgs <Empty>k__BackingField;
    public static ActiveTransactionProviderArgs Empty { get; }
    private static ActiveTransactionProviderArgs();
    [CompilerGeneratedAttribute]
public static ActiveTransactionProviderArgs get_Empty();
}
public class Abp.Data.ConditionalValue`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public bool HasValue { get; }
    public TValue Value { get; }
    public ConditionalValue`1(bool hasValue, TValue value);
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
public TValue get_Value();
}
public interface Abp.Data.IActiveTransactionProvider {
    public abstract virtual Task`1<IDbTransaction> GetActiveTransactionAsync(ActiveTransactionProviderArgs args);
    public abstract virtual IDbTransaction GetActiveTransaction(ActiveTransactionProviderArgs args);
    public abstract virtual Task`1<IDbConnection> GetActiveConnectionAsync(ActiveTransactionProviderArgs args);
    public abstract virtual IDbConnection GetActiveConnection(ActiveTransactionProviderArgs args);
}
public class Abp.Dependency.AbpAsyncDeterminationInterceptor`1 : AsyncDeterminationInterceptor {
    public AbpAsyncDeterminationInterceptor`1(TInterceptor asyncInterceptor);
}
public abstract class Abp.Dependency.AbpInterceptorBase : object {
    public virtual void InterceptAsynchronous(IInvocation invocation);
    public virtual void InterceptAsynchronous(IInvocation invocation);
    public abstract virtual void InterceptSynchronous(IInvocation invocation);
    protected abstract virtual Task InternalInterceptAsynchronous(IInvocation invocation);
    protected abstract virtual Task`1<TResult> InternalInterceptAsynchronous(IInvocation invocation);
}
public class Abp.Dependency.AbpPropertiesDependenciesModelInspector : PropertiesDependenciesModelInspector {
    public AbpPropertiesDependenciesModelInspector(IConversionManager converter);
    protected virtual void InspectProperties(ComponentModel model);
}
public class Abp.Dependency.BasicConventionalRegistrar : object {
    public sealed virtual void RegisterAssembly(IConventionalRegistrationContext context);
}
public class Abp.Dependency.ConventionalRegistrationConfig : DictionaryBasedConfig {
    [CompilerGeneratedAttribute]
private bool <InstallInstallers>k__BackingField;
    public bool InstallInstallers { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_InstallInstallers();
    [CompilerGeneratedAttribute]
public void set_InstallInstallers(bool value);
}
internal class Abp.Dependency.ConventionalRegistrationContext : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ConventionalRegistrationConfig <Config>k__BackingField;
    public Assembly Assembly { get; private set; }
    public IIocManager IocManager { get; private set; }
    public ConventionalRegistrationConfig Config { get; private set; }
    internal ConventionalRegistrationContext(Assembly assembly, IIocManager iocManager, ConventionalRegistrationConfig config);
    [CompilerGeneratedAttribute]
public sealed virtual Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public sealed virtual IIocManager get_IocManager();
    [CompilerGeneratedAttribute]
private void set_IocManager(IIocManager value);
    [CompilerGeneratedAttribute]
public sealed virtual ConventionalRegistrationConfig get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(ConventionalRegistrationConfig value);
}
public enum Abp.Dependency.DependencyLifeStyle : Enum {
    public int value__;
    public static DependencyLifeStyle Singleton;
    public static DependencyLifeStyle Transient;
}
internal class Abp.Dependency.DisposableDependencyObjectWrapper : DisposableDependencyObjectWrapper`1<object> {
    public DisposableDependencyObjectWrapper(IIocResolver iocResolver, object obj);
}
internal class Abp.Dependency.DisposableDependencyObjectWrapper`1 : object {
    private IIocResolver _iocResolver;
    [CompilerGeneratedAttribute]
private T <Object>k__BackingField;
    public T Object { get; private set; }
    public DisposableDependencyObjectWrapper`1(IIocResolver iocResolver, T obj);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(T value);
    public sealed virtual void Dispose();
}
public interface Abp.Dependency.IConventionalDependencyRegistrar {
    public abstract virtual void RegisterAssembly(IConventionalRegistrationContext context);
}
public interface Abp.Dependency.IConventionalRegistrationContext {
    public Assembly Assembly { get; }
    public IIocManager IocManager { get; }
    public ConventionalRegistrationConfig Config { get; }
    public abstract virtual Assembly get_Assembly();
    public abstract virtual IIocManager get_IocManager();
    public abstract virtual ConventionalRegistrationConfig get_Config();
}
public interface Abp.Dependency.IDisposableDependencyObjectWrapper {
}
public interface Abp.Dependency.IDisposableDependencyObjectWrapper`1 {
    public T Object { get; }
    public abstract virtual T get_Object();
}
public interface Abp.Dependency.IIocManager {
    public IWindsorContainer IocContainer { get; }
    public abstract virtual IWindsorContainer get_IocContainer();
    public abstract virtual bool IsRegistered(Type type);
    public abstract virtual bool IsRegistered();
}
public interface Abp.Dependency.IIocManagerAccessor {
    public IIocManager IocManager { get; }
    public abstract virtual IIocManager get_IocManager();
}
public interface Abp.Dependency.IIocRegistrar {
    public abstract virtual void AddConventionalRegistrar(IConventionalDependencyRegistrar registrar);
    public abstract virtual void RegisterAssemblyByConvention(Assembly assembly);
    public abstract virtual void RegisterAssemblyByConvention(Assembly assembly, ConventionalRegistrationConfig config);
    public abstract virtual void Register(DependencyLifeStyle lifeStyle);
    public abstract virtual void Register(Type type, DependencyLifeStyle lifeStyle);
    public abstract virtual void Register(DependencyLifeStyle lifeStyle);
    public abstract virtual void Register(Type type, Type impl, DependencyLifeStyle lifeStyle);
    public abstract virtual bool IsRegistered(Type type);
    public abstract virtual bool IsRegistered();
}
public interface Abp.Dependency.IIocResolver {
    public abstract virtual T Resolve();
    public abstract virtual T Resolve(Type type);
    public abstract virtual T Resolve(object argumentsAsAnonymousType);
    public abstract virtual object Resolve(Type type);
    public abstract virtual object Resolve(Type type, object argumentsAsAnonymousType);
    public abstract virtual T[] ResolveAll();
    public abstract virtual T[] ResolveAll(object argumentsAsAnonymousType);
    public abstract virtual Object[] ResolveAll(Type type);
    public abstract virtual Object[] ResolveAll(Type type, object argumentsAsAnonymousType);
    public abstract virtual void Release(object obj);
    public abstract virtual bool IsRegistered(Type type);
    public abstract virtual bool IsRegistered();
}
internal class Abp.Dependency.Installers.AbpCoreInstaller : object {
    public sealed virtual void Install(IWindsorContainer container, IConfigurationStore store);
}
public class Abp.Dependency.IocManager : object {
    [CompilerGeneratedAttribute]
private static IocManager <Instance>k__BackingField;
    private static ProxyGenerator ProxyGeneratorInstance;
    [CompilerGeneratedAttribute]
private IWindsorContainer <IocContainer>k__BackingField;
    private List`1<IConventionalDependencyRegistrar> _conventionalRegistrars;
    public static IocManager Instance { get; private set; }
    public IWindsorContainer IocContainer { get; private set; }
    private static IocManager();
    [CompilerGeneratedAttribute]
public static IocManager get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(IocManager value);
    [CompilerGeneratedAttribute]
public sealed virtual IWindsorContainer get_IocContainer();
    [CompilerGeneratedAttribute]
private void set_IocContainer(IWindsorContainer value);
    protected virtual IWindsorContainer CreateContainer();
    public sealed virtual void AddConventionalRegistrar(IConventionalDependencyRegistrar registrar);
    public sealed virtual void RegisterAssemblyByConvention(Assembly assembly);
    public sealed virtual void RegisterAssemblyByConvention(Assembly assembly, ConventionalRegistrationConfig config);
    public sealed virtual void Register(DependencyLifeStyle lifeStyle);
    public sealed virtual void Register(Type type, DependencyLifeStyle lifeStyle);
    public sealed virtual void Register(DependencyLifeStyle lifeStyle);
    public sealed virtual void Register(Type type, Type impl, DependencyLifeStyle lifeStyle);
    public sealed virtual bool IsRegistered(Type type);
    public sealed virtual bool IsRegistered();
    public sealed virtual T Resolve();
    public sealed virtual T Resolve(Type type);
    public sealed virtual T Resolve(object argumentsAsAnonymousType);
    public sealed virtual object Resolve(Type type);
    public sealed virtual object Resolve(Type type, object argumentsAsAnonymousType);
    public sealed virtual T[] ResolveAll();
    public sealed virtual T[] ResolveAll(object argumentsAsAnonymousType);
    public sealed virtual Object[] ResolveAll(Type type);
    public sealed virtual Object[] ResolveAll(Type type, object argumentsAsAnonymousType);
    public sealed virtual void Release(object obj);
    public sealed virtual void Dispose();
    private static ComponentRegistration`1<T> ApplyLifestyle(ComponentRegistration`1<T> registration, DependencyLifeStyle lifeStyle);
}
[ExtensionAttribute]
public static class Abp.Dependency.IocRegistrarExtensions : object {
    [ExtensionAttribute]
public static bool RegisterIfNot(IIocRegistrar iocRegistrar, DependencyLifeStyle lifeStyle);
    [ExtensionAttribute]
public static bool RegisterIfNot(IIocRegistrar iocRegistrar, Type type, DependencyLifeStyle lifeStyle);
    [ExtensionAttribute]
public static bool RegisterIfNot(IIocRegistrar iocRegistrar, DependencyLifeStyle lifeStyle);
    [ExtensionAttribute]
public static bool RegisterIfNot(IIocRegistrar iocRegistrar, Type type, Type impl, DependencyLifeStyle lifeStyle);
}
[ExtensionAttribute]
public static class Abp.Dependency.IocResolverExtensions : object {
    [ExtensionAttribute]
public static IDisposableDependencyObjectWrapper`1<T> ResolveAsDisposable(IIocResolver iocResolver);
    [ExtensionAttribute]
public static IDisposableDependencyObjectWrapper`1<T> ResolveAsDisposable(IIocResolver iocResolver, Type type);
    [ExtensionAttribute]
public static IDisposableDependencyObjectWrapper ResolveAsDisposable(IIocResolver iocResolver, Type type);
    [ExtensionAttribute]
public static IDisposableDependencyObjectWrapper`1<T> ResolveAsDisposable(IIocResolver iocResolver, object argumentsAsAnonymousType);
    [ExtensionAttribute]
public static IDisposableDependencyObjectWrapper`1<T> ResolveAsDisposable(IIocResolver iocResolver, Type type, object argumentsAsAnonymousType);
    [ExtensionAttribute]
public static IDisposableDependencyObjectWrapper ResolveAsDisposable(IIocResolver iocResolver, Type type, object argumentsAsAnonymousType);
    [ExtensionAttribute]
public static IScopedIocResolver CreateScope(IIocResolver iocResolver);
    [ExtensionAttribute]
public static void Using(IIocResolver iocResolver, Action`1<T> action);
    [ExtensionAttribute]
public static TReturn Using(IIocResolver iocResolver, Func`2<TService, TReturn> func);
    [ExtensionAttribute]
public static void UsingScope(IIocResolver iocResolver, Action`1<IScopedIocResolver> action);
}
public interface Abp.Dependency.IScopedIocResolver {
}
public interface Abp.Dependency.ISingletonDependency {
}
public interface Abp.Dependency.ITransientDependency {
}
public class Abp.Dependency.ScopedIocResolver : object {
    private IIocResolver _iocResolver;
    private List`1<object> _resolvedObjects;
    public ScopedIocResolver(IIocResolver iocResolver);
    public sealed virtual T Resolve();
    public sealed virtual T Resolve(Type type);
    public sealed virtual T Resolve(object argumentsAsAnonymousType);
    public sealed virtual object Resolve(Type type);
    public sealed virtual object Resolve(Type type, object argumentsAsAnonymousType);
    public sealed virtual T[] ResolveAll();
    public sealed virtual T[] ResolveAll(object argumentsAsAnonymousType);
    public sealed virtual Object[] ResolveAll(Type type);
    public sealed virtual Object[] ResolveAll(Type type, object argumentsAsAnonymousType);
    public sealed virtual void Release(object obj);
    public sealed virtual bool IsRegistered(Type type);
    public sealed virtual bool IsRegistered();
    public sealed virtual void Dispose();
}
public static class Abp.Dependency.SingletonDependency`1 : object {
    private static Lazy`1<T> LazyInstance;
    public static T Instance { get; }
    private static SingletonDependency`1();
    public static T get_Instance();
}
public class Abp.DisposeAction : object {
    public static DisposeAction Empty;
    private Action _action;
    public DisposeAction(Action action);
    private static DisposeAction();
    public sealed virtual void Dispose();
}
public class Abp.Domain.Entities.AggregateRoot : AggregateRoot`1<int> {
}
public class Abp.Domain.Entities.AggregateRoot`1 : Entity`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private ICollection`1<IEventData> <DomainEvents>k__BackingField;
    [NotMappedAttribute]
public ICollection`1<IEventData> DomainEvents { get; }
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IEventData> get_DomainEvents();
}
public abstract class Abp.Domain.Entities.Auditing.AuditedAggregateRoot : AuditedAggregateRoot`1<int> {
}
public abstract class Abp.Domain.Entities.Auditing.AuditedAggregateRoot`1 : CreationAuditedAggregateRoot`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastModifierUserId>k__BackingField;
    public Nullable`1<DateTime> LastModificationTime { get; public set; }
    public Nullable`1<long> LastModifierUserId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModificationTime();
    [CompilerGeneratedAttribute]
public virtual void set_LastModificationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_LastModifierUserId();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUserId(Nullable`1<long> value);
}
public abstract class Abp.Domain.Entities.Auditing.AuditedAggregateRoot`2 : AuditedAggregateRoot`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <LastModifierUser>k__BackingField;
    [ForeignKeyAttribute("CreatorUserId")]
public TUser CreatorUser { get; public set; }
    [ForeignKeyAttribute("LastModifierUserId")]
public TUser LastModifierUser { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_LastModifierUser();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUser(TUser value);
}
public abstract class Abp.Domain.Entities.Auditing.AuditedEntity : AuditedEntity`1<int> {
}
public abstract class Abp.Domain.Entities.Auditing.AuditedEntity`1 : CreationAuditedEntity`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastModifierUserId>k__BackingField;
    public Nullable`1<DateTime> LastModificationTime { get; public set; }
    public Nullable`1<long> LastModifierUserId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModificationTime();
    [CompilerGeneratedAttribute]
public virtual void set_LastModificationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_LastModifierUserId();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUserId(Nullable`1<long> value);
}
public abstract class Abp.Domain.Entities.Auditing.AuditedEntity`2 : AuditedEntity`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <LastModifierUser>k__BackingField;
    [ForeignKeyAttribute("CreatorUserId")]
public TUser CreatorUser { get; public set; }
    [ForeignKeyAttribute("LastModifierUserId")]
public TUser LastModifierUser { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual TUser get_LastModifierUser();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifierUser(TUser value);
}
public abstract class Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot : CreationAuditedAggregateRoot`1<int> {
}
public abstract class Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1 : AggregateRoot`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CreatorUserId>k__BackingField;
    public DateTime CreationTime { get; public set; }
    public Nullable`1<long> CreatorUserId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_CreatorUserId();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUserId(Nullable`1<long> value);
}
public abstract class Abp.Domain.Entities.Auditing.CreationAuditedAggregateRoot`2 : CreationAuditedAggregateRoot`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [ForeignKeyAttribute("CreatorUserId")]
public TUser CreatorUser { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
}
public abstract class Abp.Domain.Entities.Auditing.CreationAuditedEntity : CreationAuditedEntity`1<int> {
}
public abstract class Abp.Domain.Entities.Auditing.CreationAuditedEntity`1 : Entity`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CreatorUserId>k__BackingField;
    public DateTime CreationTime { get; public set; }
    public Nullable`1<long> CreatorUserId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_CreatorUserId();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUserId(Nullable`1<long> value);
}
public abstract class Abp.Domain.Entities.Auditing.CreationAuditedEntity`2 : CreationAuditedEntity`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private TUser <CreatorUser>k__BackingField;
    [ForeignKeyAttribute("CreatorUserId")]
public TUser CreatorUser { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TUser get_CreatorUser();
    [CompilerGeneratedAttribute]
public virtual void set_CreatorUser(TUser value);
}
public static class Abp.Domain.Entities.Auditing.EntityAuditingHelper : object {
    public static void SetCreationAuditProperties(IMultiTenancyConfig multiTenancyConfig, object entityAsObj, Nullable`1<int> tenantId, Nullable`1<long> userId, IReadOnlyList`1<AuditFieldConfiguration> auditFields);
    public static void SetModificationAuditProperties(IMultiTenancyConfig multiTenancyConfig, object entityAsObj, Nullable`1<int> tenantId, Nullable`1<long> userId, IReadOnlyList`1<AuditFieldConfiguration> auditFields);
    public static void SetDeletionAuditProperties(IMultiTenancyConfig multiTenancyConfig, object entityAsObj, Nullable`1<int> tenantId, Nullable`1<long> userId, IReadOnlyList`1<AuditFieldConfiguration> auditFields);
}
public abstract class Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot : FullAuditedAggregateRoot`1<int> {
}
public abstract class Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot`1 : AuditedAggregateRoot`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DeleterUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletionTime>k__BackingField;
    public bool IsDeleted { get; public set; }
    public Nullable`1<long> DeleterUserId { get; public set; }
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_DeleterUserId();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletionTime();
    [CompilerGeneratedAttribute]
public virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public abstract class Abp.Domain.Entities.Auditing.FullAuditedAggregateRoot`2 : AuditedAggregateRoot`2<TPrimaryKey, TUser> {
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <DeleterUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DeleterUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletionTime>k__BackingField;
    public bool IsDeleted { get; public set; }
    [ForeignKeyAttribute("DeleterUserId")]
public TUser DeleterUser { get; public set; }
    public Nullable`1<long> DeleterUserId { get; public set; }
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public virtual TUser get_DeleterUser();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_DeleterUserId();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletionTime();
    [CompilerGeneratedAttribute]
public virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public abstract class Abp.Domain.Entities.Auditing.FullAuditedEntity : FullAuditedEntity`1<int> {
}
public abstract class Abp.Domain.Entities.Auditing.FullAuditedEntity`1 : AuditedEntity`1<TPrimaryKey> {
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DeleterUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletionTime>k__BackingField;
    public bool IsDeleted { get; public set; }
    public Nullable`1<long> DeleterUserId { get; public set; }
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_DeleterUserId();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletionTime();
    [CompilerGeneratedAttribute]
public virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public abstract class Abp.Domain.Entities.Auditing.FullAuditedEntity`2 : AuditedEntity`2<TPrimaryKey, TUser> {
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private TUser <DeleterUser>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DeleterUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletionTime>k__BackingField;
    public bool IsDeleted { get; public set; }
    [ForeignKeyAttribute("DeleterUserId")]
public TUser DeleterUser { get; public set; }
    public Nullable`1<long> DeleterUserId { get; public set; }
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public virtual TUser get_DeleterUser();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUser(TUser value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_DeleterUserId();
    [CompilerGeneratedAttribute]
public virtual void set_DeleterUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletionTime();
    [CompilerGeneratedAttribute]
public virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public interface Abp.Domain.Entities.Auditing.IAudited {
}
public interface Abp.Domain.Entities.Auditing.IAudited`1 {
}
public interface Abp.Domain.Entities.Auditing.ICreationAudited {
    public Nullable`1<long> CreatorUserId { get; public set; }
    public abstract virtual Nullable`1<long> get_CreatorUserId();
    public abstract virtual void set_CreatorUserId(Nullable`1<long> value);
}
public interface Abp.Domain.Entities.Auditing.ICreationAudited`1 {
    public TUser CreatorUser { get; public set; }
    public abstract virtual TUser get_CreatorUser();
    public abstract virtual void set_CreatorUser(TUser value);
}
public interface Abp.Domain.Entities.Auditing.IDeletionAudited {
    public Nullable`1<long> DeleterUserId { get; public set; }
    public abstract virtual Nullable`1<long> get_DeleterUserId();
    public abstract virtual void set_DeleterUserId(Nullable`1<long> value);
}
public interface Abp.Domain.Entities.Auditing.IDeletionAudited`1 {
    public TUser DeleterUser { get; public set; }
    public abstract virtual TUser get_DeleterUser();
    public abstract virtual void set_DeleterUser(TUser value);
}
public interface Abp.Domain.Entities.Auditing.IFullAudited {
}
public interface Abp.Domain.Entities.Auditing.IFullAudited`1 {
}
public interface Abp.Domain.Entities.Auditing.IHasCreationTime {
    public DateTime CreationTime { get; public set; }
    public abstract virtual DateTime get_CreationTime();
    public abstract virtual void set_CreationTime(DateTime value);
}
public interface Abp.Domain.Entities.Auditing.IHasDeletionTime {
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_DeletionTime();
    public abstract virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public interface Abp.Domain.Entities.Auditing.IHasModificationTime {
    public Nullable`1<DateTime> LastModificationTime { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_LastModificationTime();
    public abstract virtual void set_LastModificationTime(Nullable`1<DateTime> value);
}
public interface Abp.Domain.Entities.Auditing.IModificationAudited {
    public Nullable`1<long> LastModifierUserId { get; public set; }
    public abstract virtual Nullable`1<long> get_LastModifierUserId();
    public abstract virtual void set_LastModifierUserId(Nullable`1<long> value);
}
public interface Abp.Domain.Entities.Auditing.IModificationAudited`1 {
    public TUser LastModifierUser { get; public set; }
    public abstract virtual TUser get_LastModifierUser();
    public abstract virtual void set_LastModifierUser(TUser value);
}
public class Abp.Domain.Entities.Caching.EntityCache`2 : EntityCache`3<TEntity, TCacheItem, int> {
    public EntityCache`2(ICacheManager cacheManager, IRepository`2<TEntity, int> repository, IUnitOfWorkManager unitOfWorkManager, string cacheName);
}
public class Abp.Domain.Entities.Caching.EntityCache`3 : EntityCacheBase`3<TEntity, TCacheItem, TPrimaryKey> {
    public ITypedCache`2<TPrimaryKey, TCacheItem> InternalCache { get; }
    public EntityCache`3(ICacheManager cacheManager, IRepository`2<TEntity, TPrimaryKey> repository, IUnitOfWorkManager unitOfWorkManager, string cacheName);
    public sealed virtual ITypedCache`2<TPrimaryKey, TCacheItem> get_InternalCache();
    public virtual TCacheItem Get(TPrimaryKey id);
    public virtual Task`1<TCacheItem> GetAsync(TPrimaryKey id);
    public virtual void HandleEvent(EntityChangedEventData`1<TEntity> eventData);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public abstract class Abp.Domain.Entities.Caching.EntityCacheBase`3 : object {
    [CompilerGeneratedAttribute]
private string <CacheName>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectMapper <ObjectMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ICacheManager <CacheManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepository`2<TEntity, TPrimaryKey> <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    public TCacheItem Item { get; }
    public string CacheName { get; private set; }
    public IObjectMapper ObjectMapper { get; public set; }
    protected ICacheManager CacheManager { get; private set; }
    protected IRepository`2<TEntity, TPrimaryKey> Repository { get; private set; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; private set; }
    public EntityCacheBase`3(ICacheManager cacheManager, IRepository`2<TEntity, TPrimaryKey> repository, IUnitOfWorkManager unitOfWorkManager, string cacheName);
    public sealed virtual TCacheItem get_Item(TPrimaryKey id);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheName();
    [CompilerGeneratedAttribute]
private void set_CacheName(string value);
    [CompilerGeneratedAttribute]
public IObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
public void set_ObjectMapper(IObjectMapper value);
    [CompilerGeneratedAttribute]
protected ICacheManager get_CacheManager();
    [CompilerGeneratedAttribute]
private void set_CacheManager(ICacheManager value);
    [CompilerGeneratedAttribute]
protected IRepository`2<TEntity, TPrimaryKey> get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(IRepository`2<TEntity, TPrimaryKey> value);
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
private void set_UnitOfWorkManager(IUnitOfWorkManager value);
    public abstract virtual TCacheItem Get(TPrimaryKey id);
    public abstract virtual Task`1<TCacheItem> GetAsync(TPrimaryKey id);
    protected virtual TCacheItem GetCacheItemFromDataSource(TPrimaryKey id);
    [AsyncStateMachineAttribute("Abp.Domain.Entities.Caching.EntityCacheBase`3/<GetCacheItemFromDataSourceAsync>d__26")]
protected virtual Task`1<TCacheItem> GetCacheItemFromDataSourceAsync(TPrimaryKey id);
    protected virtual TEntity GetEntityFromDataSource(TPrimaryKey id);
    [AsyncStateMachineAttribute("Abp.Domain.Entities.Caching.EntityCacheBase`3/<GetEntityFromDataSourceAsync>d__28")]
protected virtual Task`1<TEntity> GetEntityFromDataSourceAsync(TPrimaryKey id);
    protected virtual TCacheItem MapToCacheItem(TEntity entity);
    protected virtual string GenerateDefaultCacheName();
}
public interface Abp.Domain.Entities.Caching.IEntityCache`1 {
}
public interface Abp.Domain.Entities.Caching.IEntityCache`2 {
    public ITypedCache`2<TPrimaryKey, TCacheItem> InternalCache { get; }
    public abstract virtual ITypedCache`2<TPrimaryKey, TCacheItem> get_InternalCache();
}
[DefaultMemberAttribute("Item")]
public interface Abp.Domain.Entities.Caching.IEntityCacheBase`2 {
    public TCacheItem Item { get; }
    public string CacheName { get; }
    public abstract virtual TCacheItem get_Item(TPrimaryKey id);
    public abstract virtual string get_CacheName();
    public abstract virtual TCacheItem Get(TPrimaryKey id);
    public abstract virtual Task`1<TCacheItem> GetAsync(TPrimaryKey id);
}
public interface Abp.Domain.Entities.Caching.IMultiTenancyEntityCache`1 {
}
public interface Abp.Domain.Entities.Caching.IMultiTenancyEntityCache`2 {
    public ITypedCache`2<string, TCacheItem> InternalCache { get; }
    public abstract virtual ITypedCache`2<string, TCacheItem> get_InternalCache();
    public abstract virtual string GetCacheKey(TPrimaryKey id);
    public abstract virtual string GetCacheKey(TPrimaryKey id, Nullable`1<int> tenantId);
}
public class Abp.Domain.Entities.Caching.MayHaveTenantEntityCache`2 : MayHaveTenantEntityCache`3<TEntity, TCacheItem, int> {
    public MayHaveTenantEntityCache`2(ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IRepository`2<TEntity, int> repository, string cacheName);
}
public class Abp.Domain.Entities.Caching.MayHaveTenantEntityCache`3 : MultiTenancyEntityCache`3<TEntity, TCacheItem, TPrimaryKey> {
    public MayHaveTenantEntityCache`3(ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IRepository`2<TEntity, TPrimaryKey> repository, string cacheName);
    protected virtual string GetCacheKey(TEntity entity);
    public virtual string ToString();
}
public abstract class Abp.Domain.Entities.Caching.MultiTenancyEntityCache`3 : EntityCacheBase`3<TEntity, TCacheItem, TPrimaryKey> {
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    public ITypedCache`2<string, TCacheItem> InternalCache { get; }
    public IAbpSession AbpSession { get; public set; }
    public MultiTenancyEntityCache`3(ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IRepository`2<TEntity, TPrimaryKey> repository, string cacheName);
    public sealed virtual ITypedCache`2<string, TCacheItem> get_InternalCache();
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    public virtual TCacheItem Get(TPrimaryKey id);
    public virtual Task`1<TCacheItem> GetAsync(TPrimaryKey id);
    public virtual void HandleEvent(EntityChangedEventData`1<TEntity> eventData);
    protected virtual Nullable`1<int> GetCurrentTenantId();
    public virtual string GetCacheKey(TPrimaryKey id);
    public virtual string GetCacheKey(TPrimaryKey id, Nullable`1<int> tenantId);
    protected abstract virtual string GetCacheKey(TEntity entity);
    public virtual string ToString();
}
public class Abp.Domain.Entities.Caching.MustHaveTenantEntityCache`2 : MustHaveTenantEntityCache`3<TEntity, TCacheItem, int> {
    public MustHaveTenantEntityCache`2(ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IRepository`2<TEntity, int> repository, string cacheName);
}
public class Abp.Domain.Entities.Caching.MustHaveTenantEntityCache`3 : MultiTenancyEntityCache`3<TEntity, TCacheItem, TPrimaryKey> {
    public MustHaveTenantEntityCache`3(ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IRepository`2<TEntity, TPrimaryKey> repository, string cacheName);
    protected virtual string GetCacheKey(TEntity entity);
    public virtual string ToString();
}
public abstract class Abp.Domain.Entities.Entity : Entity`1<int> {
}
public abstract class Abp.Domain.Entities.Entity`1 : object {
    [CompilerGeneratedAttribute]
private TPrimaryKey <Id>k__BackingField;
    public TPrimaryKey Id { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TPrimaryKey get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(TPrimaryKey value);
    public virtual bool IsTransient();
    public virtual bool EntityEquals(object obj);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Abp.Domain.Entities.EntityExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrDeleted(ISoftDelete entity);
    [ExtensionAttribute]
public static void UnDelete(ISoftDelete entity);
}
public static class Abp.Domain.Entities.EntityHelper : object {
    public static bool IsEntity(Type type);
    public static Type GetPrimaryKeyType();
    public static Type GetPrimaryKeyType(Type entityType);
    public static object GetEntityId(object entity);
    public static string GetHardDeleteKey(object entity, Nullable`1<int> tenantId);
}
public class Abp.Domain.Entities.EntityIdentifier : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    public Type Type { get; private set; }
    public object Id { get; private set; }
    public EntityIdentifier(Type type, object id);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public object get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(object value);
}
public class Abp.Domain.Entities.EntityNotFoundException : AbpException {
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    public Type EntityType { get; public set; }
    public object Id { get; public set; }
    public EntityNotFoundException(SerializationInfo serializationInfo, StreamingContext context);
    public EntityNotFoundException(Type entityType, object id);
    public EntityNotFoundException(Type entityType, object id, Exception innerException);
    public EntityNotFoundException(string message);
    public EntityNotFoundException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public object get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(object value);
}
public class Abp.Domain.Entities.EntityTypeInfo : object {
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    public Type EntityType { get; private set; }
    public Type DeclaringType { get; private set; }
    public EntityTypeInfo(Type entityType, Type declaringType);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
private void set_DeclaringType(Type value);
}
[ExtensionAttribute]
public static class Abp.Domain.Entities.ExtendableObjectExtensions : object {
    [ExtensionAttribute]
public static T GetData(IExtendableObject extendableObject, string name, bool handleType);
    [ExtensionAttribute]
public static T GetData(IExtendableObject extendableObject, string name, JsonSerializer jsonSerializer);
    [ExtensionAttribute]
public static void SetData(IExtendableObject extendableObject, string name, T value, bool handleType);
    [ExtensionAttribute]
public static void SetData(IExtendableObject extendableObject, string name, T value, JsonSerializer jsonSerializer);
    [ExtensionAttribute]
public static bool RemoveData(IExtendableObject extendableObject, string name);
}
public interface Abp.Domain.Entities.IAggregateRoot {
}
public interface Abp.Domain.Entities.IAggregateRoot`1 {
}
public interface Abp.Domain.Entities.IEntity {
}
public interface Abp.Domain.Entities.IEntity`1 {
    public TPrimaryKey Id { get; public set; }
    public abstract virtual TPrimaryKey get_Id();
    public abstract virtual void set_Id(TPrimaryKey value);
    public abstract virtual bool IsTransient();
}
public interface Abp.Domain.Entities.IEntityTranslation {
    public string Language { get; public set; }
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
}
public interface Abp.Domain.Entities.IEntityTranslation`1 {
}
public interface Abp.Domain.Entities.IEntityTranslation`2 {
    public TEntity Core { get; public set; }
    public TPrimaryKeyOfMultiLingualEntity CoreId { get; public set; }
    public abstract virtual TEntity get_Core();
    public abstract virtual void set_Core(TEntity value);
    public abstract virtual TPrimaryKeyOfMultiLingualEntity get_CoreId();
    public abstract virtual void set_CoreId(TPrimaryKeyOfMultiLingualEntity value);
}
public interface Abp.Domain.Entities.IExtendableObject {
    public string ExtensionData { get; public set; }
    public abstract virtual string get_ExtensionData();
    public abstract virtual void set_ExtensionData(string value);
}
public interface Abp.Domain.Entities.IGeneratesDomainEvents {
    public ICollection`1<IEventData> DomainEvents { get; }
    public abstract virtual ICollection`1<IEventData> get_DomainEvents();
}
public interface Abp.Domain.Entities.IMayHaveTenant {
    public Nullable`1<int> TenantId { get; public set; }
    public abstract virtual Nullable`1<int> get_TenantId();
    public abstract virtual void set_TenantId(Nullable`1<int> value);
}
public interface Abp.Domain.Entities.IMultiLingualEntity`1 {
    public ICollection`1<TTranslation> Translations { get; public set; }
    public abstract virtual ICollection`1<TTranslation> get_Translations();
    public abstract virtual void set_Translations(ICollection`1<TTranslation> value);
}
public interface Abp.Domain.Entities.IMustHaveTenant {
    public int TenantId { get; public set; }
    public abstract virtual int get_TenantId();
    public abstract virtual void set_TenantId(int value);
}
public interface Abp.Domain.Entities.IPassivable {
    public bool IsActive { get; public set; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
}
public interface Abp.Domain.Entities.ISoftDelete {
    public bool IsDeleted { get; public set; }
    public abstract virtual bool get_IsDeleted();
    public abstract virtual void set_IsDeleted(bool value);
}
public interface Abp.Domain.Policies.IPolicy {
}
public abstract class Abp.Domain.Repositories.AbpRepositoryBase`2 : object {
    [CompilerGeneratedAttribute]
private static Nullable`1<MultiTenancySides> <MultiTenancySide>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocResolver <IocResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    public static Nullable`1<MultiTenancySides> MultiTenancySide { get; private set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    public IIocResolver IocResolver { get; public set; }
    public ICancellationTokenProvider CancellationTokenProvider { get; public set; }
    private static AbpRepositoryBase`2();
    [CompilerGeneratedAttribute]
public static Nullable`1<MultiTenancySides> get_MultiTenancySide();
    [CompilerGeneratedAttribute]
private static void set_MultiTenancySide(Nullable`1<MultiTenancySides> value);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    [CompilerGeneratedAttribute]
public IIocResolver get_IocResolver();
    [CompilerGeneratedAttribute]
public void set_IocResolver(IIocResolver value);
    [CompilerGeneratedAttribute]
public ICancellationTokenProvider get_CancellationTokenProvider();
    [CompilerGeneratedAttribute]
public void set_CancellationTokenProvider(ICancellationTokenProvider value);
    public abstract virtual IQueryable`1<TEntity> GetAll();
    public virtual IQueryable`1<TEntity> GetAllReadonly();
    public abstract virtual Task`1<IQueryable`1<TEntity>> GetAllAsync();
    public virtual Task`1<IQueryable`1<TEntity>> GetAllReadonlyAsync();
    public virtual IQueryable`1<TEntity> GetAllIncluding(Expression`1[] propertySelectors);
    public virtual IQueryable`1<TEntity> GetAllReadonlyIncluding(Expression`1[] propertySelectors);
    public virtual Task`1<IQueryable`1<TEntity>> GetAllIncludingAsync(Expression`1[] propertySelectors);
    public virtual Task`1<IQueryable`1<TEntity>> GetAllReadonlyIncludingAsync(Expression`1[] propertySelectors);
    public virtual List`1<TEntity> GetAllList();
    public virtual Task`1<List`1<TEntity>> GetAllListAsync();
    public virtual List`1<TEntity> GetAllList(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual Task`1<List`1<TEntity>> GetAllListAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual T Query(Func`2<IQueryable`1<TEntity>, T> queryMethod);
    public virtual TEntity Get(TPrimaryKey id);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.AbpRepositoryBase`2/<GetAsync>d__32")]
public virtual Task`1<TEntity> GetAsync(TPrimaryKey id);
    public virtual TEntity Single(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual Task`1<TEntity> SingleAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual TEntity FirstOrDefault(TPrimaryKey id);
    public virtual Task`1<TEntity> FirstOrDefaultAsync(TPrimaryKey id);
    public virtual TEntity FirstOrDefault(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual Task`1<TEntity> FirstOrDefaultAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual TEntity Load(TPrimaryKey id);
    public abstract virtual TEntity Insert(TEntity entity);
    public virtual Task`1<TEntity> InsertAsync(TEntity entity);
    public virtual TPrimaryKey InsertAndGetId(TEntity entity);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.AbpRepositoryBase`2/<InsertAndGetIdAsync>d__43")]
public virtual Task`1<TPrimaryKey> InsertAndGetIdAsync(TEntity entity);
    public virtual TEntity InsertOrUpdate(TEntity entity);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.AbpRepositoryBase`2/<InsertOrUpdateAsync>d__45")]
public virtual Task`1<TEntity> InsertOrUpdateAsync(TEntity entity);
    public virtual TPrimaryKey InsertOrUpdateAndGetId(TEntity entity);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.AbpRepositoryBase`2/<InsertOrUpdateAndGetIdAsync>d__47")]
public virtual Task`1<TPrimaryKey> InsertOrUpdateAndGetIdAsync(TEntity entity);
    public abstract virtual TEntity Update(TEntity entity);
    public virtual Task`1<TEntity> UpdateAsync(TEntity entity);
    public virtual TEntity Update(TPrimaryKey id, Action`1<TEntity> updateAction);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.AbpRepositoryBase`2/<UpdateAsync>d__51")]
public virtual Task`1<TEntity> UpdateAsync(TPrimaryKey id, Func`2<TEntity, Task> updateAction);
    public abstract virtual void Delete(TEntity entity);
    public virtual Task DeleteAsync(TEntity entity);
    public abstract virtual void Delete(TPrimaryKey id);
    public virtual Task DeleteAsync(TPrimaryKey id);
    public virtual void Delete(Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.AbpRepositoryBase`2/<DeleteAsync>d__57")]
public virtual Task DeleteAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual int Count();
    public virtual Task`1<int> CountAsync();
    public virtual int Count(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual Task`1<int> CountAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual long LongCount();
    public virtual Task`1<long> LongCountAsync();
    public virtual long LongCount(Expression`1<Func`2<TEntity, bool>> predicate);
    public virtual Task`1<long> LongCountAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    protected virtual Expression`1<Func`2<TEntity, bool>> CreateEqualityExpressionForId(TPrimaryKey id);
}
[AttributeUsageAttribute("4")]
public class Abp.Domain.Repositories.AutoRepositoryTypesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <RepositoryInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RepositoryInterfaceWithPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RepositoryImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RepositoryImplementationWithPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithDefaultRepositoryInterfaces>k__BackingField;
    public Type RepositoryInterface { get; }
    public Type RepositoryInterfaceWithPrimaryKey { get; }
    public Type RepositoryImplementation { get; }
    public Type RepositoryImplementationWithPrimaryKey { get; }
    public bool WithDefaultRepositoryInterfaces { get; public set; }
    public AutoRepositoryTypesAttribute(Type repositoryInterface, Type repositoryInterfaceWithPrimaryKey, Type repositoryImplementation, Type repositoryImplementationWithPrimaryKey);
    [CompilerGeneratedAttribute]
public Type get_RepositoryInterface();
    [CompilerGeneratedAttribute]
public Type get_RepositoryInterfaceWithPrimaryKey();
    [CompilerGeneratedAttribute]
public Type get_RepositoryImplementation();
    [CompilerGeneratedAttribute]
public Type get_RepositoryImplementationWithPrimaryKey();
    [CompilerGeneratedAttribute]
public bool get_WithDefaultRepositoryInterfaces();
    [CompilerGeneratedAttribute]
public void set_WithDefaultRepositoryInterfaces(bool value);
}
public interface Abp.Domain.Repositories.IRepository {
}
public interface Abp.Domain.Repositories.IRepository`1 {
}
public interface Abp.Domain.Repositories.IRepository`2 {
    public abstract virtual IQueryable`1<TEntity> GetAll();
    public abstract virtual IQueryable`1<TEntity> GetAllReadonly();
    public abstract virtual Task`1<IQueryable`1<TEntity>> GetAllReadonlyAsync();
    public abstract virtual Task`1<IQueryable`1<TEntity>> GetAllAsync();
    public abstract virtual IQueryable`1<TEntity> GetAllIncluding(Expression`1[] propertySelectors);
    public abstract virtual Task`1<IQueryable`1<TEntity>> GetAllIncludingAsync(Expression`1[] propertySelectors);
    public abstract virtual IQueryable`1<TEntity> GetAllReadonlyIncluding(Expression`1[] propertySelectors);
    public abstract virtual Task`1<IQueryable`1<TEntity>> GetAllReadonlyIncludingAsync(Expression`1[] propertySelectors);
    public abstract virtual List`1<TEntity> GetAllList();
    public abstract virtual Task`1<List`1<TEntity>> GetAllListAsync();
    public abstract virtual List`1<TEntity> GetAllList(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual Task`1<List`1<TEntity>> GetAllListAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual T Query(Func`2<IQueryable`1<TEntity>, T> queryMethod);
    public abstract virtual TEntity Get(TPrimaryKey id);
    public abstract virtual Task`1<TEntity> GetAsync(TPrimaryKey id);
    public abstract virtual TEntity Single(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual Task`1<TEntity> SingleAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual TEntity FirstOrDefault(TPrimaryKey id);
    public abstract virtual Task`1<TEntity> FirstOrDefaultAsync(TPrimaryKey id);
    public abstract virtual TEntity FirstOrDefault(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual Task`1<TEntity> FirstOrDefaultAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual TEntity Load(TPrimaryKey id);
    public abstract virtual TEntity Insert(TEntity entity);
    public abstract virtual Task`1<TEntity> InsertAsync(TEntity entity);
    public abstract virtual TPrimaryKey InsertAndGetId(TEntity entity);
    public abstract virtual Task`1<TPrimaryKey> InsertAndGetIdAsync(TEntity entity);
    public abstract virtual TEntity InsertOrUpdate(TEntity entity);
    public abstract virtual Task`1<TEntity> InsertOrUpdateAsync(TEntity entity);
    public abstract virtual TPrimaryKey InsertOrUpdateAndGetId(TEntity entity);
    public abstract virtual Task`1<TPrimaryKey> InsertOrUpdateAndGetIdAsync(TEntity entity);
    public abstract virtual TEntity Update(TEntity entity);
    public abstract virtual Task`1<TEntity> UpdateAsync(TEntity entity);
    public abstract virtual TEntity Update(TPrimaryKey id, Action`1<TEntity> updateAction);
    public abstract virtual Task`1<TEntity> UpdateAsync(TPrimaryKey id, Func`2<TEntity, Task> updateAction);
    public abstract virtual void Delete(TEntity entity);
    public abstract virtual Task DeleteAsync(TEntity entity);
    public abstract virtual void Delete(TPrimaryKey id);
    public abstract virtual Task DeleteAsync(TPrimaryKey id);
    public abstract virtual void Delete(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual Task DeleteAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual int Count();
    public abstract virtual Task`1<int> CountAsync();
    public abstract virtual int Count(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual Task`1<int> CountAsync(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual long LongCount();
    public abstract virtual Task`1<long> LongCountAsync();
    public abstract virtual long LongCount(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual Task`1<long> LongCountAsync(Expression`1<Func`2<TEntity, bool>> predicate);
}
public interface Abp.Domain.Repositories.ISupportsExplicitLoading`2 {
    public abstract virtual Task EnsureCollectionLoadedAsync(TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> collectionExpression, CancellationToken cancellationToken);
    public abstract virtual void EnsureCollectionLoaded(TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> collectionExpression, CancellationToken cancellationToken);
    public abstract virtual Task EnsurePropertyLoadedAsync(TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
    public abstract virtual void EnsurePropertyLoaded(TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Abp.Domain.Repositories.RepositoryExtensions : object {
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.RepositoryExtensions/<EnsureCollectionLoadedAsync>d__0`3")]
[ExtensionAttribute]
public static Task EnsureCollectionLoadedAsync(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> collectionExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void EnsureCollectionLoaded(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> collectionExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.RepositoryExtensions/<EnsurePropertyLoadedAsync>d__2`3")]
[ExtensionAttribute]
public static Task EnsurePropertyLoadedAsync(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void EnsurePropertyLoaded(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IIocResolver GetIocResolver(IRepository`2<TEntity, TPrimaryKey> repository);
    [ExtensionAttribute]
public static void HardDelete(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity);
    [ExtensionAttribute]
public static void HardDelete(IRepository`2<TEntity, TPrimaryKey> repository, Expression`1<Func`2<TEntity, bool>> predicate);
    [ExtensionAttribute]
private static void HardDelete(IRepository`2<TEntity, TPrimaryKey> repository, Expression`1<Func`2<TEntity, bool>> predicate, TEntity entity);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.RepositoryExtensions/<HardDeleteAsync>d__8`2")]
[ExtensionAttribute]
public static Task HardDeleteAsync(IRepository`2<TEntity, TPrimaryKey> repository, TEntity entity);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.RepositoryExtensions/<HardDeleteAsync>d__9`2")]
[ExtensionAttribute]
public static Task HardDeleteAsync(IRepository`2<TEntity, TPrimaryKey> repository, Expression`1<Func`2<TEntity, bool>> predicate);
    [AsyncStateMachineAttribute("Abp.Domain.Repositories.RepositoryExtensions/<HardDeleteAsync>d__10`2")]
[ExtensionAttribute]
private static Task HardDeleteAsync(IRepository`2<TEntity, TPrimaryKey> repository, Expression`1<Func`2<TEntity, bool>> predicate, TEntity entity);
    private static IActiveUnitOfWork GetCurrentUnitOfWorkOrThrowException(IRepository`2<TEntity, TPrimaryKey> repository);
}
internal class Abp.Domain.Repositories.UnitOfWorkExtensionDataTypes : object {
    [CompilerGeneratedAttribute]
private static string <HardDelete>k__BackingField;
    public static string HardDelete { get; }
    private static UnitOfWorkExtensionDataTypes();
    [CompilerGeneratedAttribute]
public static string get_HardDelete();
}
public abstract class Abp.Domain.Services.DomainService : AbpServiceBase {
}
public interface Abp.Domain.Services.IDomainService {
}
public static class Abp.Domain.Uow.AbpAuditFields : object {
    public static string CreatorUserId;
    public static string LastModifierUserId;
    public static string DeleterUserId;
    public static string LastModificationTime;
    public static string DeletionTime;
}
public static class Abp.Domain.Uow.AbpDataFilters : object {
    public static string SoftDelete;
    public static string MustHaveTenant;
    public static string MayHaveTenant;
}
public class Abp.Domain.Uow.AbpDbConcurrencyException : AbpException {
    public AbpDbConcurrencyException(SerializationInfo serializationInfo, StreamingContext context);
    public AbpDbConcurrencyException(string message);
    public AbpDbConcurrencyException(string message, Exception innerException);
}
public class Abp.Domain.Uow.AsyncLocalCurrentUnitOfWorkProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private static AsyncLocal`1<LocalUowWrapper> AsyncLocalUow;
    [DoNotWireAttribute]
public IUnitOfWork Current { get; public set; }
    public ILogger Logger { get; public set; }
    private static AsyncLocalCurrentUnitOfWorkProvider();
    public sealed virtual IUnitOfWork get_Current();
    public sealed virtual void set_Current(IUnitOfWork value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    private static IUnitOfWork GetCurrentUow();
    private static void SetCurrentUow(IUnitOfWork value);
}
public class Abp.Domain.Uow.AuditFieldConfiguration : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSavingEnabled>k__BackingField;
    public string FieldName { get; public set; }
    public bool IsSavingEnabled { get; }
    public AuditFieldConfiguration(string fieldName, bool isSavingEnabled);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSavingEnabled();
}
public class Abp.Domain.Uow.ConnectionStringResolveArgs : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private Nullable`1<MultiTenancySides> <MultiTenancySide>k__BackingField;
    public Nullable`1<MultiTenancySides> MultiTenancySide { get; public set; }
    public ConnectionStringResolveArgs(Nullable`1<MultiTenancySides> multiTenancySide);
    [CompilerGeneratedAttribute]
public Nullable`1<MultiTenancySides> get_MultiTenancySide();
    [CompilerGeneratedAttribute]
public void set_MultiTenancySide(Nullable`1<MultiTenancySides> value);
}
public class Abp.Domain.Uow.DataFilterConfiguration : object {
    [CompilerGeneratedAttribute]
private string <FilterName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <FilterParameters>k__BackingField;
    public string FilterName { get; }
    public bool IsEnabled { get; }
    public IDictionary`2<string, object> FilterParameters { get; }
    public DataFilterConfiguration(string filterName, bool isEnabled);
    internal DataFilterConfiguration(DataFilterConfiguration filterToClone, Nullable`1<bool> isEnabled);
    [CompilerGeneratedAttribute]
public string get_FilterName();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_FilterParameters();
}
public class Abp.Domain.Uow.DefaultConnectionStringResolver : object {
    private IAbpStartupConfiguration _configuration;
    public DefaultConnectionStringResolver(IAbpStartupConfiguration configuration);
    public virtual string GetNameOrConnectionString(ConnectionStringResolveArgs args);
    public virtual Task`1<string> GetNameOrConnectionStringAsync(ConnectionStringResolveArgs args);
}
public interface Abp.Domain.Uow.IActiveUnitOfWork {
    public UnitOfWorkOptions Options { get; }
    public IReadOnlyList`1<DataFilterConfiguration> Filters { get; }
    public IReadOnlyList`1<AuditFieldConfiguration> AuditFieldConfiguration { get; }
    public Dictionary`2<string, object> Items { get; public set; }
    public bool IsDisposed { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disposed(EventHandler value);
    public abstract virtual UnitOfWorkOptions get_Options();
    public abstract virtual IReadOnlyList`1<DataFilterConfiguration> get_Filters();
    public abstract virtual IReadOnlyList`1<AuditFieldConfiguration> get_AuditFieldConfiguration();
    public abstract virtual Dictionary`2<string, object> get_Items();
    public abstract virtual void set_Items(Dictionary`2<string, object> value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void SaveChanges();
    public abstract virtual Task SaveChangesAsync();
    public abstract virtual IDisposable DisableFilter(String[] filterNames);
    public abstract virtual IDisposable EnableFilter(String[] filterNames);
    public abstract virtual bool IsFilterEnabled(string filterName);
    public abstract virtual IDisposable SetFilterParameter(string filterName, string parameterName, object value);
    public abstract virtual IDisposable DisableAuditing(String[] fieldNames);
    public abstract virtual IDisposable EnableAuditing(String[] fieldNames);
    public abstract virtual IDisposable SetTenantId(Nullable`1<int> tenantId);
    public abstract virtual IDisposable SetTenantId(Nullable`1<int> tenantId, bool switchMustHaveTenantEnableDisable);
    public abstract virtual Nullable`1<int> GetTenantId();
}
public interface Abp.Domain.Uow.IConnectionStringResolver {
    public abstract virtual string GetNameOrConnectionString(ConnectionStringResolveArgs args);
    public abstract virtual Task`1<string> GetNameOrConnectionStringAsync(ConnectionStringResolveArgs args);
}
public interface Abp.Domain.Uow.ICurrentUnitOfWorkProvider {
    public IUnitOfWork Current { get; public set; }
    public abstract virtual IUnitOfWork get_Current();
    public abstract virtual void set_Current(IUnitOfWork value);
}
internal class Abp.Domain.Uow.InnerSuppressUnitOfWorkCompleteHandle : InnerUnitOfWorkCompleteHandle {
    private IUnitOfWork _parentUnitOfWork;
    public InnerSuppressUnitOfWorkCompleteHandle(IUnitOfWork parentUnitOfWork);
    public virtual void Complete();
    [AsyncStateMachineAttribute("Abp.Domain.Uow.InnerSuppressUnitOfWorkCompleteHandle/<CompleteAsync>d__3")]
public virtual Task CompleteAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
internal class Abp.Domain.Uow.InnerUnitOfWorkCompleteHandle : object {
    public static string DidNotCallCompleteMethodExceptionMessage;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isCompleteCalled;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    public virtual void Complete();
    public virtual Task CompleteAsync();
    public sealed virtual void Dispose();
    private static bool HasException();
}
public interface Abp.Domain.Uow.IUnitOfWork {
    public string Id { get; }
    public IUnitOfWork Outer { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual IUnitOfWork get_Outer();
    public abstract virtual void set_Outer(IUnitOfWork value);
    public abstract virtual void Begin(UnitOfWorkOptions options);
}
public interface Abp.Domain.Uow.IUnitOfWorkCompleteHandle {
    public abstract virtual void Complete();
    public abstract virtual Task CompleteAsync();
}
public interface Abp.Domain.Uow.IUnitOfWorkDefaultOptions {
    public TransactionScopeOption Scope { get; public set; }
    public bool IsTransactional { get; public set; }
    public bool IsTransactionScopeAvailable { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public IReadOnlyList`1<DataFilterConfiguration> Filters { get; }
    public IReadOnlyList`1<AuditFieldConfiguration> AuditFieldConfiguration { get; }
    public List`1<Func`2<Type, bool>> ConventionalUowSelectors { get; }
    public abstract virtual TransactionScopeOption get_Scope();
    public abstract virtual void set_Scope(TransactionScopeOption value);
    public abstract virtual bool get_IsTransactional();
    public abstract virtual void set_IsTransactional(bool value);
    public abstract virtual bool get_IsTransactionScopeAvailable();
    public abstract virtual void set_IsTransactionScopeAvailable(bool value);
    public abstract virtual Nullable`1<TimeSpan> get_Timeout();
    public abstract virtual void set_Timeout(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<IsolationLevel> get_IsolationLevel();
    public abstract virtual void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    public abstract virtual IReadOnlyList`1<DataFilterConfiguration> get_Filters();
    public abstract virtual IReadOnlyList`1<AuditFieldConfiguration> get_AuditFieldConfiguration();
    public abstract virtual List`1<Func`2<Type, bool>> get_ConventionalUowSelectors();
    public abstract virtual void RegisterFilter(string filterName, bool isEnabledByDefault);
    public abstract virtual void RegisterAuditFieldConfiguration(string fieldName, bool isSavingEnabledByDefault);
    public abstract virtual void OverrideFilter(string filterName, bool isEnabledByDefault);
}
public interface Abp.Domain.Uow.IUnitOfWorkFilterExecuter {
    public abstract virtual void ApplyDisableFilter(IUnitOfWork unitOfWork, string filterName);
    public abstract virtual void ApplyEnableFilter(IUnitOfWork unitOfWork, string filterName);
    public abstract virtual void ApplyFilterParameterValue(IUnitOfWork unitOfWork, string filterName, string parameterName, object value);
}
public interface Abp.Domain.Uow.IUnitOfWorkManager {
    public IActiveUnitOfWork Current { get; }
    public abstract virtual IActiveUnitOfWork get_Current();
    public abstract virtual IUnitOfWorkCompleteHandle Begin();
    public abstract virtual IUnitOfWorkCompleteHandle Begin(TransactionScopeOption scope);
    public abstract virtual IUnitOfWorkCompleteHandle Begin(UnitOfWorkOptions options);
}
public interface Abp.Domain.Uow.IUnitOfWorkManagerAccessor {
    public IUnitOfWorkManager UnitOfWorkManager { get; }
    public abstract virtual IUnitOfWorkManager get_UnitOfWorkManager();
}
public class Abp.Domain.Uow.NullUnitOfWork : UnitOfWorkBase {
    public NullUnitOfWork(IConnectionStringResolver connectionStringResolver, IUnitOfWorkDefaultOptions defaultOptions, IUnitOfWorkFilterExecuter filterExecuter);
    public virtual void SaveChanges();
    public virtual Task SaveChangesAsync();
    protected virtual void BeginUow();
    protected virtual void CompleteUow();
    protected virtual Task CompleteUowAsync();
    protected virtual void DisposeUow();
}
public class Abp.Domain.Uow.NullUnitOfWorkFilterExecuter : object {
    public sealed virtual void ApplyDisableFilter(IUnitOfWork unitOfWork, string filterName);
    public sealed virtual void ApplyEnableFilter(IUnitOfWork unitOfWork, string filterName);
    public sealed virtual void ApplyFilterParameterValue(IUnitOfWork unitOfWork, string filterName, string parameterName, object value);
}
[AttributeUsageAttribute("1092")]
public class Abp.Domain.Uow.UnitOfWorkAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Nullable`1<TransactionScopeOption> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsTransactional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IsolationLevel> <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public Nullable`1<TransactionScopeOption> Scope { get; public set; }
    public Nullable`1<bool> IsTransactional { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public bool IsDisabled { get; public set; }
    public UnitOfWorkAttribute(bool isTransactional);
    public UnitOfWorkAttribute(int timeout);
    public UnitOfWorkAttribute(bool isTransactional, int timeout);
    public UnitOfWorkAttribute(IsolationLevel isolationLevel);
    public UnitOfWorkAttribute(IsolationLevel isolationLevel, int timeout);
    public UnitOfWorkAttribute(TransactionScopeOption scope);
    public UnitOfWorkAttribute(TransactionScopeOption scope, bool isTransactional);
    public UnitOfWorkAttribute(TransactionScopeOption scope, int timeout);
    public UnitOfWorkAttribute(TransactionScopeOption scope, IsolationLevel isolationLevel);
    public UnitOfWorkAttribute(TransactionScopeOption scope, IsolationLevel isolationLevel, int timeout);
    public UnitOfWorkAttribute(TransactionScopeOption scope, bool isTransactional, int timeout);
    [CompilerGeneratedAttribute]
public Nullable`1<TransactionScopeOption> get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(Nullable`1<TransactionScopeOption> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsTransactional();
    [CompilerGeneratedAttribute]
public void set_IsTransactional(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<IsolationLevel> get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    internal UnitOfWorkOptions CreateOptions();
}
public abstract class Abp.Domain.Uow.UnitOfWorkBase : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWork <Outer>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnitOfWorkFailedEventArgs> Failed;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    [CompilerGeneratedAttribute]
private UnitOfWorkOptions <Options>k__BackingField;
    private List`1<DataFilterConfiguration> _filters;
    private List`1<AuditFieldConfiguration> _auditFieldConfiguration;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkDefaultOptions <DefaultOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionStringResolver <ConnectionStringResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkFilterExecuter <FilterExecuter>k__BackingField;
    private bool _isBeginCalledBefore;
    private bool _isCompleteCalledBefore;
    private bool _succeed;
    private Exception _exception;
    private Nullable`1<int> _tenantId;
    public string Id { get; }
    [DoNotWireAttribute]
public IUnitOfWork Outer { get; public set; }
    public UnitOfWorkOptions Options { get; private set; }
    public IReadOnlyList`1<DataFilterConfiguration> Filters { get; }
    public IReadOnlyList`1<AuditFieldConfiguration> AuditFieldConfiguration { get; }
    public Dictionary`2<string, object> Items { get; public set; }
    protected IUnitOfWorkDefaultOptions DefaultOptions { get; }
    protected IConnectionStringResolver ConnectionStringResolver { get; }
    public bool IsDisposed { get; private set; }
    protected IAbpSession AbpSession { get; public set; }
    protected IUnitOfWorkFilterExecuter FilterExecuter { get; }
    protected UnitOfWorkBase(IConnectionStringResolver connectionStringResolver, IUnitOfWorkDefaultOptions defaultOptions, IUnitOfWorkFilterExecuter filterExecuter);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitOfWork get_Outer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Outer(IUnitOfWork value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual UnitOfWorkOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(UnitOfWorkOptions value);
    public sealed virtual IReadOnlyList`1<DataFilterConfiguration> get_Filters();
    public sealed virtual IReadOnlyList`1<AuditFieldConfiguration> get_AuditFieldConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Items(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
protected IUnitOfWorkDefaultOptions get_DefaultOptions();
    [CompilerGeneratedAttribute]
protected IConnectionStringResolver get_ConnectionStringResolver();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
protected IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
protected IUnitOfWorkFilterExecuter get_FilterExecuter();
    public sealed virtual void Begin(UnitOfWorkOptions options);
    public abstract virtual void SaveChanges();
    public abstract virtual Task SaveChangesAsync();
    public sealed virtual IDisposable DisableFilter(String[] filterNames);
    public sealed virtual IDisposable EnableFilter(String[] filterNames);
    public sealed virtual IDisposable DisableAuditing(String[] fieldNames);
    public sealed virtual IDisposable EnableAuditing(String[] fieldNames);
    public sealed virtual bool IsFilterEnabled(string filterName);
    public sealed virtual IDisposable SetFilterParameter(string filterName, string parameterName, object value);
    public virtual IDisposable SetTenantId(Nullable`1<int> tenantId);
    public virtual IDisposable SetTenantId(Nullable`1<int> tenantId, bool switchMustHaveTenantEnableDisable);
    public sealed virtual Nullable`1<int> GetTenantId();
    public sealed virtual void Complete();
    [AsyncStateMachineAttribute("Abp.Domain.Uow.UnitOfWorkBase/<CompleteAsync>d__66")]
public sealed virtual Task CompleteAsync();
    public sealed virtual void Dispose();
    protected virtual void BeginUow();
    protected abstract virtual void CompleteUow();
    protected abstract virtual Task CompleteUowAsync();
    protected abstract virtual void DisposeUow();
    protected virtual void ApplyDisableFilter(string filterName);
    protected virtual void ApplyEnableFilter(string filterName);
    protected virtual void ApplyFilterParameterValue(string filterName, string parameterName, object value);
    protected virtual string ResolveConnectionString(ConnectionStringResolveArgs args);
    [AsyncStateMachineAttribute("Abp.Domain.Uow.UnitOfWorkBase/<ResolveConnectionStringAsync>d__76")]
protected virtual Task`1<string> ResolveConnectionStringAsync(ConnectionStringResolveArgs args);
    protected virtual void OnCompleted();
    protected virtual void OnFailed(Exception exception);
    protected virtual void OnDisposed();
    private void PreventMultipleBegin();
    private void PreventMultipleComplete();
    private void SetFilters(List`1<DataFilterConfiguration> filterOverrides);
    private void ChangeFilterIsEnabledIfNotOverrided(List`1<DataFilterConfiguration> filterOverrides, string filterName, bool isEnabled);
    private DataFilterConfiguration GetFilter(string filterName);
    private int GetFilterIndex(string filterName);
    private int GetAuditFieldIndex(string filterName);
    public virtual string ToString();
}
public class Abp.Domain.Uow.UnitOfWorkDefaultOptions : object {
    public static List`1<Func`2<Type, bool>> ConventionalUowSelectorList;
    [CompilerGeneratedAttribute]
private TransactionScopeOption <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTransactional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTransactionScopeAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IsolationLevel> <IsolationLevel>k__BackingField;
    private List`1<DataFilterConfiguration> _filters;
    private List`1<AuditFieldConfiguration> _auditFieldConfiguration;
    [CompilerGeneratedAttribute]
private List`1<Func`2<Type, bool>> <ConventionalUowSelectors>k__BackingField;
    public TransactionScopeOption Scope { get; public set; }
    public bool IsTransactional { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public bool IsTransactionScopeAvailable { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public IReadOnlyList`1<DataFilterConfiguration> Filters { get; }
    public IReadOnlyList`1<AuditFieldConfiguration> AuditFieldConfiguration { get; }
    public List`1<Func`2<Type, bool>> ConventionalUowSelectors { get; }
    private static UnitOfWorkDefaultOptions();
    [CompilerGeneratedAttribute]
public sealed virtual TransactionScopeOption get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(TransactionScopeOption value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTransactional();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsTransactional(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTransactionScopeAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsTransactionScopeAvailable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IsolationLevel> get_IsolationLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    public sealed virtual IReadOnlyList`1<DataFilterConfiguration> get_Filters();
    public sealed virtual IReadOnlyList`1<AuditFieldConfiguration> get_AuditFieldConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`2<Type, bool>> get_ConventionalUowSelectors();
    public sealed virtual void RegisterFilter(string filterName, bool isEnabledByDefault);
    public sealed virtual void RegisterAuditFieldConfiguration(string fieldName, bool isSavingEnabledByDefault);
    public sealed virtual void OverrideFilter(string filterName, bool isEnabledByDefault);
}
[ExtensionAttribute]
internal static class Abp.Domain.Uow.UnitOfWorkDefaultOptionsExtensions : object {
    [ExtensionAttribute]
public static UnitOfWorkAttribute GetUnitOfWorkAttributeOrNull(IUnitOfWorkDefaultOptions unitOfWorkDefaultOptions, MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsConventionalUowClass(IUnitOfWorkDefaultOptions unitOfWorkDefaultOptions, Type type);
}
public class Abp.Domain.Uow.UnitOfWorkFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public UnitOfWorkFailedEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
internal static class Abp.Domain.Uow.UnitOfWorkHelper : object {
    public static bool HasUnitOfWorkAttribute(MemberInfo memberInfo);
}
internal class Abp.Domain.Uow.UnitOfWorkInterceptor : AbpInterceptorBase {
    private IUnitOfWorkManager _unitOfWorkManager;
    private IUnitOfWorkDefaultOptions _unitOfWorkOptions;
    public UnitOfWorkInterceptor(IUnitOfWorkManager unitOfWorkManager, IUnitOfWorkDefaultOptions unitOfWorkOptions);
    public virtual void InterceptSynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Domain.Uow.UnitOfWorkInterceptor/<InternalInterceptAsynchronous>d__4")]
protected virtual Task InternalInterceptAsynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Domain.Uow.UnitOfWorkInterceptor/<InternalInterceptAsynchronous>d__5`1")]
protected virtual Task`1<TResult> InternalInterceptAsynchronous(IInvocation invocation);
    private static MethodInfo GetMethodInfo(IInvocation invocation);
}
internal class Abp.Domain.Uow.UnitOfWorkManager : object {
    private IIocResolver _iocResolver;
    private ICurrentUnitOfWorkProvider _currentUnitOfWorkProvider;
    private IUnitOfWorkDefaultOptions _defaultOptions;
    public IActiveUnitOfWork Current { get; }
    public UnitOfWorkManager(IIocResolver iocResolver, ICurrentUnitOfWorkProvider currentUnitOfWorkProvider, IUnitOfWorkDefaultOptions defaultOptions);
    public sealed virtual IActiveUnitOfWork get_Current();
    public sealed virtual IUnitOfWorkCompleteHandle Begin();
    public sealed virtual IUnitOfWorkCompleteHandle Begin(TransactionScopeOption scope);
    public sealed virtual IUnitOfWorkCompleteHandle Begin(UnitOfWorkOptions options);
}
[ExtensionAttribute]
public static class Abp.Domain.Uow.UnitOfWorkManagerExtensions : object {
    [ExtensionAttribute]
public static void WithUnitOfWork(IUnitOfWorkManager manager, Action action, UnitOfWorkOptions options);
    [AsyncStateMachineAttribute("Abp.Domain.Uow.UnitOfWorkManagerExtensions/<WithUnitOfWorkAsync>d__1")]
[ExtensionAttribute]
public static Task WithUnitOfWorkAsync(IUnitOfWorkManager manager, Func`1<Task> action, UnitOfWorkOptions options);
    [ExtensionAttribute]
public static TResult WithUnitOfWork(IUnitOfWorkManager manager, Func`1<TResult> action, UnitOfWorkOptions options);
    [AsyncStateMachineAttribute("Abp.Domain.Uow.UnitOfWorkManagerExtensions/<WithUnitOfWorkAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<TResult> WithUnitOfWorkAsync(IUnitOfWorkManager manager, Func`1<Task`1<TResult>> action, UnitOfWorkOptions options);
}
public class Abp.Domain.Uow.UnitOfWorkOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TransactionScopeOption> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsTransactional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IsolationLevel> <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TransactionScopeAsyncFlowOption> <AsyncFlowOption>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DataFilterConfiguration> <FilterOverrides>k__BackingField;
    public Nullable`1<TransactionScopeOption> Scope { get; public set; }
    public Nullable`1<bool> IsTransactional { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public Nullable`1<TransactionScopeAsyncFlowOption> AsyncFlowOption { get; public set; }
    public List`1<DataFilterConfiguration> FilterOverrides { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<TransactionScopeOption> get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(Nullable`1<TransactionScopeOption> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsTransactional();
    [CompilerGeneratedAttribute]
public void set_IsTransactional(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<IsolationLevel> get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TransactionScopeAsyncFlowOption> get_AsyncFlowOption();
    [CompilerGeneratedAttribute]
public void set_AsyncFlowOption(Nullable`1<TransactionScopeAsyncFlowOption> value);
    [CompilerGeneratedAttribute]
public List`1<DataFilterConfiguration> get_FilterOverrides();
    internal void FillDefaultsForNonProvidedOptions(IUnitOfWorkDefaultOptions defaultOptions);
    internal void FillOuterUowFiltersForNonProvidedOptions(List`1<DataFilterConfiguration> filterOverrides);
}
internal static class Abp.Domain.Uow.UnitOfWorkRegistrar : object {
    public static void Initialize(IIocManager iocManager);
    private static bool ShouldIntercept(IIocManager iocManager, TypeInfo implementationType);
    private static bool IsUnitOfWorkType(TypeInfo implementationType);
    private static bool AnyMethodHasUnitOfWork(TypeInfo implementationType);
}
public class Abp.Domain.Values.IgnoreOnCompareAttribute : Attribute {
}
public abstract class Abp.Domain.Values.ValueObject : object {
    protected abstract virtual IEnumerable`1<object> GetAtomicValues();
    public bool ValueEquals(object obj);
}
[TableAttribute("AbpDynamicEntityProperties")]
public class Abp.DynamicEntityProperties.DynamicEntityProperty : Entity {
    public static int MaxEntityFullName;
    [CompilerGeneratedAttribute]
private string <EntityFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DynamicPropertyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicProperty <DynamicProperty>k__BackingField;
    [StringLengthAttribute("256")]
public string EntityFullName { get; public set; }
    [RequiredAttribute]
public int DynamicPropertyId { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    [ForeignKeyAttribute("DynamicPropertyId")]
public DynamicProperty DynamicProperty { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityFullName();
    [CompilerGeneratedAttribute]
public void set_EntityFullName(string value);
    [CompilerGeneratedAttribute]
public int get_DynamicPropertyId();
    [CompilerGeneratedAttribute]
public void set_DynamicPropertyId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual DynamicProperty get_DynamicProperty();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicProperty(DynamicProperty value);
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyConfiguration : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<DynamicEntityPropertyDefinitionProvider> <Providers>k__BackingField;
    public ITypeList`1<DynamicEntityPropertyDefinitionProvider> Providers { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<DynamicEntityPropertyDefinitionProvider> get_Providers();
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyDefinitionContext : object {
    [CompilerGeneratedAttribute]
private IDynamicEntityPropertyDefinitionManager <Manager>k__BackingField;
    public IDynamicEntityPropertyDefinitionManager Manager { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IDynamicEntityPropertyDefinitionManager get_Manager();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Manager(IDynamicEntityPropertyDefinitionManager value);
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyDefinitionManager : object {
    private IDynamicEntityPropertyConfiguration _dynamicEntityPropertiesConfiguration;
    private IocManager _iocManager;
    private Dictionary`2<string, Type> _allowedInputTypes;
    private HashSet`1<string> _entities;
    public DynamicEntityPropertyDefinitionManager(IDynamicEntityPropertyConfiguration dynamicEntityPropertiesConfiguration, IocManager iocManager);
    public void Initialize();
    public sealed virtual void AddAllowedInputType();
    public sealed virtual IInputType GetOrNullAllowedInputType(string name);
    public sealed virtual List`1<string> GetAllAllowedInputTypeNames();
    public sealed virtual List`1<IInputType> GetAllAllowedInputTypes();
    public sealed virtual bool ContainsInputType(string name);
    public sealed virtual void AddEntity();
    public sealed virtual void AddEntity();
    public sealed virtual List`1<string> GetAllEntities();
    public sealed virtual bool ContainsEntity(string entityFullName);
    public sealed virtual bool ContainsEntity();
    public sealed virtual bool ContainsEntity();
}
public abstract class Abp.DynamicEntityProperties.DynamicEntityPropertyDefinitionProvider : object {
    public abstract virtual void SetDynamicEntityProperties(IDynamicEntityPropertyDefinitionContext context);
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyManager : object {
    private IDynamicPropertyPermissionChecker _dynamicPropertyPermissionChecker;
    private ICacheManager _cacheManager;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IDynamicEntityPropertyDefinitionManager _dynamicEntityPropertyDefinitionManager;
    [CompilerGeneratedAttribute]
private IDynamicEntityPropertyStore <DynamicEntityPropertyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    public static string CacheName;
    public IDynamicEntityPropertyStore DynamicEntityPropertyStore { get; public set; }
    public IAbpSession AbpSession { get; public set; }
    private ITypedCache`2<string, DynamicEntityProperty> DynamicEntityPropertyCache { get; }
    public DynamicEntityPropertyManager(IDynamicPropertyPermissionChecker dynamicPropertyPermissionChecker, ICacheManager cacheManager, IUnitOfWorkManager unitOfWorkManager, IDynamicEntityPropertyDefinitionManager dynamicEntityPropertyDefinitionManager);
    [CompilerGeneratedAttribute]
public IDynamicEntityPropertyStore get_DynamicEntityPropertyStore();
    [CompilerGeneratedAttribute]
public void set_DynamicEntityPropertyStore(IDynamicEntityPropertyStore value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    private ITypedCache`2<string, DynamicEntityProperty> get_DynamicEntityPropertyCache();
    private void CheckEntityName(string entityFullName);
    public virtual DynamicEntityProperty Get(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyManager/<GetAsync>d__18")]
public virtual Task`1<DynamicEntityProperty> GetAsync(int id);
    public sealed virtual List`1<DynamicEntityProperty> GetAll(string entityFullName);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyManager/<GetAllAsync>d__20")]
public sealed virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync(string entityFullName);
    public sealed virtual List`1<DynamicEntityProperty> GetAll();
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyManager/<GetAllAsync>d__22")]
public sealed virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync();
    public virtual void Add(DynamicEntityProperty dynamicEntityProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyManager/<AddAsync>d__24")]
public virtual Task AddAsync(DynamicEntityProperty dynamicEntityProperty);
    public virtual void Update(DynamicEntityProperty dynamicEntityProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyManager/<UpdateAsync>d__26")]
public virtual Task UpdateAsync(DynamicEntityProperty dynamicEntityProperty);
    public virtual void Delete(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyManager/<DeleteAsync>d__28")]
public virtual Task DeleteAsync(int id);
    protected virtual Nullable`1<int> GetCurrentTenantId();
    protected virtual string GetCacheKey(int id, Nullable`1<int> tenantId);
    [CompilerGeneratedAttribute]
private bool <GetAll>b__19_0(DynamicEntityProperty dynamicEntityProperty);
    [CompilerGeneratedAttribute]
private bool <GetAll>b__21_0(DynamicEntityProperty dynamicEntityProperty);
}
[TableAttribute("AbpDynamicEntityPropertyValues")]
public class Abp.DynamicEntityProperties.DynamicEntityPropertyValue : Entity`1<long> {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DynamicEntityPropertyId>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicEntityProperty <DynamicEntityProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [RequiredAttribute]
public string Value { get; public set; }
    public string EntityId { get; public set; }
    public int DynamicEntityPropertyId { get; public set; }
    public DynamicEntityProperty DynamicEntityProperty { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public DynamicEntityPropertyValue(DynamicEntityProperty dynamicEntityProperty, string entityId, string value, Nullable`1<int> tenantId);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public int get_DynamicEntityPropertyId();
    [CompilerGeneratedAttribute]
public void set_DynamicEntityPropertyId(int value);
    [CompilerGeneratedAttribute]
public virtual DynamicEntityProperty get_DynamicEntityProperty();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicEntityProperty(DynamicEntityProperty value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantId(Nullable`1<int> value);
}
public class Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager : object {
    private IDynamicPropertyPermissionChecker _dynamicPropertyPermissionChecker;
    private IDynamicPropertyManager _dynamicPropertyManager;
    private IDynamicEntityPropertyManager _dynamicEntityPropertyManager;
    [CompilerGeneratedAttribute]
private IDynamicEntityPropertyValueStore <DynamicEntityPropertyValueStore>k__BackingField;
    public IDynamicEntityPropertyValueStore DynamicEntityPropertyValueStore { get; public set; }
    public DynamicEntityPropertyValueManager(IDynamicPropertyPermissionChecker dynamicPropertyPermissionChecker, IDynamicPropertyManager dynamicPropertyManager, IDynamicEntityPropertyManager dynamicEntityPropertyManager);
    [CompilerGeneratedAttribute]
public IDynamicEntityPropertyValueStore get_DynamicEntityPropertyValueStore();
    [CompilerGeneratedAttribute]
public void set_DynamicEntityPropertyValueStore(IDynamicEntityPropertyValueStore value);
    private int GetDynamicPropertyId(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<GetDynamicPropertyIdAsync>d__9")]
private Task`1<int> GetDynamicPropertyIdAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual DynamicEntityPropertyValue Get(long id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<GetAsync>d__11")]
public virtual Task`1<DynamicEntityPropertyValue> GetAsync(long id);
    public virtual void Add(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<AddAsync>d__13")]
public virtual Task AddAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual void Update(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<UpdateAsync>d__15")]
public virtual Task UpdateAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public virtual void Delete(long id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<DeleteAsync>d__17")]
public virtual Task DeleteAsync(long id);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(int dynamicEntityPropertyId, string entityId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<GetValuesAsync>d__19")]
public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(int dynamicEntityPropertyId, string entityId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<GetValuesAsync>d__21")]
public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<GetValuesAsync>d__23")]
public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, int dynamicPropertyId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, string propertyName);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<GetValuesAsync>d__25")]
public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, string propertyName);
    public sealed virtual void CleanValues(int dynamicEntityPropertyId, string entityId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicEntityPropertyValueManager/<CleanValuesAsync>d__27")]
public sealed virtual Task CleanValuesAsync(int dynamicEntityPropertyId, string entityId);
    [CompilerGeneratedAttribute]
private bool <GetValues>b__20_0(DynamicEntityPropertyValue value);
    [CompilerGeneratedAttribute]
private bool <GetValues>b__22_0(DynamicEntityPropertyValue value);
}
[TableAttribute("AbpDynamicProperties")]
public class Abp.DynamicEntityProperties.DynamicProperty : Entity {
    public static int MaxPropertyName;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<DynamicPropertyValue> <DynamicPropertyValues>k__BackingField;
    [StringLengthAttribute("256")]
public string PropertyName { get; public set; }
    public string DisplayName { get; public set; }
    public string InputType { get; public set; }
    public string Permission { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public ICollection`1<DynamicPropertyValue> DynamicPropertyValues { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(string value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<DynamicPropertyValue> get_DynamicPropertyValues();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicPropertyValues(ICollection`1<DynamicPropertyValue> value);
}
public class Abp.DynamicEntityProperties.DynamicPropertyManager : object {
    private ICacheManager _cacheManager;
    private IDynamicPropertyStore _dynamicPropertyStore;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IDynamicEntityPropertyDefinitionManager _dynamicEntityPropertyDefinitionManager;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    public static string CacheName;
    public IAbpSession AbpSession { get; public set; }
    private ITypedCache`2<string, DynamicProperty> DynamicPropertyCache { get; }
    public DynamicPropertyManager(ICacheManager cacheManager, IDynamicPropertyStore dynamicPropertyStore, IUnitOfWorkManager unitOfWorkManager, IDynamicEntityPropertyDefinitionManager dynamicEntityPropertyDefinitionManager);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    private ITypedCache`2<string, DynamicProperty> get_DynamicPropertyCache();
    public virtual DynamicProperty Get(int id);
    public virtual Task`1<DynamicProperty> GetAsync(int id);
    public virtual DynamicProperty Get(string propertyName);
    public virtual Task`1<DynamicProperty> GetAsync(string propertyName);
    protected virtual void CheckDynamicProperty(DynamicProperty dynamicProperty, bool updating);
    public virtual DynamicProperty Add(DynamicProperty dynamicProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyManager/<AddAsync>d__18")]
public virtual Task`1<DynamicProperty> AddAsync(DynamicProperty dynamicProperty);
    public virtual DynamicProperty Update(DynamicProperty dynamicProperty);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyManager/<UpdateAsync>d__20")]
public virtual Task`1<DynamicProperty> UpdateAsync(DynamicProperty dynamicProperty);
    public virtual void Delete(int id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyManager/<DeleteAsync>d__22")]
public virtual Task DeleteAsync(int id);
    protected virtual Nullable`1<int> GetCurrentTenantId();
    protected virtual string GetCacheKey(int id, Nullable`1<int> tenantId);
}
public class Abp.DynamicEntityProperties.DynamicPropertyPermissionChecker : object {
    private IPermissionChecker _permissionChecker;
    private IDynamicPropertyManager _dynamicPropertyManager;
    public DynamicPropertyPermissionChecker(IPermissionChecker permissionChecker, IDynamicPropertyManager dynamicPropertyManager);
    public sealed virtual void CheckPermission(int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyPermissionChecker/<CheckPermissionAsync>d__4")]
public sealed virtual Task CheckPermissionAsync(int dynamicPropertyId);
    public sealed virtual bool IsGranted(int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyPermissionChecker/<IsGrantedAsync>d__6")]
public sealed virtual Task`1<bool> IsGrantedAsync(int dynamicPropertyId);
}
[TableAttribute("AbpDynamicPropertyValues")]
public class Abp.DynamicEntityProperties.DynamicPropertyValue : Entity`1<long> {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DynamicPropertyId>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicProperty <DynamicProperty>k__BackingField;
    [RequiredAttribute]
public string Value { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public int DynamicPropertyId { get; public set; }
    [ForeignKeyAttribute("DynamicPropertyId")]
public DynamicProperty DynamicProperty { get; public set; }
    public DynamicPropertyValue(DynamicProperty dynamicProperty, string value, Nullable`1<int> tenantId);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_DynamicPropertyId();
    [CompilerGeneratedAttribute]
public void set_DynamicPropertyId(int value);
    [CompilerGeneratedAttribute]
public virtual DynamicProperty get_DynamicProperty();
    [CompilerGeneratedAttribute]
public virtual void set_DynamicProperty(DynamicProperty value);
}
public class Abp.DynamicEntityProperties.DynamicPropertyValueManager : object {
    private IDynamicPropertyPermissionChecker _dynamicPropertyPermissionChecker;
    [CompilerGeneratedAttribute]
private IDynamicPropertyValueStore <DynamicPropertyValueStore>k__BackingField;
    public IDynamicPropertyValueStore DynamicPropertyValueStore { get; public set; }
    public DynamicPropertyValueManager(IDynamicPropertyPermissionChecker dynamicPropertyPermissionChecker);
    [CompilerGeneratedAttribute]
public IDynamicPropertyValueStore get_DynamicPropertyValueStore();
    [CompilerGeneratedAttribute]
public void set_DynamicPropertyValueStore(IDynamicPropertyValueStore value);
    public virtual DynamicPropertyValue Get(long id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueManager/<GetAsync>d__7")]
public virtual Task`1<DynamicPropertyValue> GetAsync(long id);
    public virtual List`1<DynamicPropertyValue> GetAllValuesOfDynamicProperty(int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueManager/<GetAllValuesOfDynamicPropertyAsync>d__9")]
public virtual Task`1<List`1<DynamicPropertyValue>> GetAllValuesOfDynamicPropertyAsync(int dynamicPropertyId);
    public virtual void Add(DynamicPropertyValue dynamicPropertyValue);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueManager/<AddAsync>d__11")]
public virtual Task AddAsync(DynamicPropertyValue dynamicPropertyValue);
    public virtual void Update(DynamicPropertyValue dynamicPropertyValue);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueManager/<UpdateAsync>d__13")]
public virtual Task UpdateAsync(DynamicPropertyValue dynamicPropertyValue);
    public virtual void Delete(long id);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueManager/<DeleteAsync>d__15")]
public virtual Task DeleteAsync(long id);
    public virtual void CleanValues(int dynamicPropertyId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.DynamicPropertyValueManager/<CleanValuesAsync>d__17")]
public virtual Task CleanValuesAsync(int dynamicPropertyId);
}
[ExtensionAttribute]
public static class Abp.DynamicEntityProperties.Extensions.DynamicEntityPropertyManagerExtensions : object {
    [ExtensionAttribute]
public static List`1<DynamicEntityProperty> GetAll(IDynamicEntityPropertyManager manager);
    [ExtensionAttribute]
public static List`1<DynamicEntityProperty> GetAll(IDynamicEntityPropertyManager manager);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityProperty>> GetAllAsync(IDynamicEntityPropertyManager manager);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityProperty>> GetAllAsync(IDynamicEntityPropertyManager manager);
    [ExtensionAttribute]
public static DynamicEntityProperty Add(IDynamicEntityPropertyManager manager, int dynamicPropertyId, Nullable`1<int> tenantId);
    [ExtensionAttribute]
public static DynamicEntityProperty Add(IDynamicEntityPropertyManager manager, int dynamicPropertyId, Nullable`1<int> tenantId);
    [ExtensionAttribute]
public static Task`1<DynamicEntityProperty> AddAsync(IDynamicEntityPropertyManager manager, int dynamicPropertyId, Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.DynamicEntityProperties.Extensions.DynamicEntityPropertyManagerExtensions/<AddAsync>d__7`2")]
[ExtensionAttribute]
public static Task`1<DynamicEntityProperty> AddAsync(IDynamicEntityPropertyManager manager, int dynamicPropertyId, Nullable`1<int> tenantId);
    [ExtensionAttribute]
public static DynamicEntityProperty Add(IDynamicEntityPropertyManager manager, DynamicProperty dynamicProperty, Nullable`1<int> tenantId);
    [ExtensionAttribute]
public static DynamicEntityProperty Add(IDynamicEntityPropertyManager manager, DynamicProperty dynamicProperty, Nullable`1<int> tenantId);
    [ExtensionAttribute]
public static Task`1<DynamicEntityProperty> AddAsync(IDynamicEntityPropertyManager manager, DynamicProperty dynamicProperty, Nullable`1<int> tenantId);
    [ExtensionAttribute]
public static Task`1<DynamicEntityProperty> AddAsync(IDynamicEntityPropertyManager manager, DynamicProperty dynamicProperty, Nullable`1<int> tenantId);
}
[ExtensionAttribute]
public static class Abp.DynamicEntityProperties.Extensions.DynamicEntityPropertyValueManagerExtensions : object {
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId, int dynamicPropertyId);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId, int dynamicPropertyId);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId, int dynamicPropertyId);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId, int dynamicPropertyId);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId, DynamicProperty dynamicProperty);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId, DynamicProperty dynamicProperty);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId, DynamicProperty dynamicProperty);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId, DynamicProperty dynamicProperty);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId, string propertyName);
    [ExtensionAttribute]
public static List`1<DynamicEntityPropertyValue> GetValues(IDynamicEntityPropertyValueManager manager, string entityId, string propertyName);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId, string propertyName);
    [ExtensionAttribute]
public static Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(IDynamicEntityPropertyValueManager manager, string entityId, string propertyName);
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyConfiguration {
    public ITypeList`1<DynamicEntityPropertyDefinitionProvider> Providers { get; }
    public abstract virtual ITypeList`1<DynamicEntityPropertyDefinitionProvider> get_Providers();
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyDefinitionContext {
    public IDynamicEntityPropertyDefinitionManager Manager { get; public set; }
    public abstract virtual IDynamicEntityPropertyDefinitionManager get_Manager();
    public abstract virtual void set_Manager(IDynamicEntityPropertyDefinitionManager value);
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyDefinitionManager {
    public abstract virtual void AddAllowedInputType();
    public abstract virtual IInputType GetOrNullAllowedInputType(string name);
    public abstract virtual List`1<string> GetAllAllowedInputTypeNames();
    public abstract virtual List`1<IInputType> GetAllAllowedInputTypes();
    public abstract virtual bool ContainsInputType(string name);
    public abstract virtual void AddEntity();
    public abstract virtual void AddEntity();
    public abstract virtual List`1<string> GetAllEntities();
    public abstract virtual bool ContainsEntity(string entityFullName);
    public abstract virtual bool ContainsEntity();
    public abstract virtual bool ContainsEntity();
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyManager {
    public abstract virtual DynamicEntityProperty Get(int id);
    public abstract virtual Task`1<DynamicEntityProperty> GetAsync(int id);
    public abstract virtual List`1<DynamicEntityProperty> GetAll(string entityFullName);
    public abstract virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync(string entityFullName);
    public abstract virtual List`1<DynamicEntityProperty> GetAll();
    public abstract virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync();
    public abstract virtual void Add(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual Task AddAsync(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual void Update(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual Task UpdateAsync(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual void Delete(int id);
    public abstract virtual Task DeleteAsync(int id);
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyStore {
    public abstract virtual DynamicEntityProperty Get(int id);
    public abstract virtual Task`1<DynamicEntityProperty> GetAsync(int id);
    public abstract virtual List`1<DynamicEntityProperty> GetAll();
    public abstract virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync();
    public abstract virtual List`1<DynamicEntityProperty> GetAll(string entityFullName);
    public abstract virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync(string entityFullName);
    public abstract virtual void Add(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual Task AddAsync(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual void Update(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual Task UpdateAsync(DynamicEntityProperty dynamicEntityProperty);
    public abstract virtual void Delete(int id);
    public abstract virtual Task DeleteAsync(int id);
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyValueManager {
    public abstract virtual DynamicEntityPropertyValue Get(long id);
    public abstract virtual Task`1<DynamicEntityPropertyValue> GetAsync(long id);
    public abstract virtual void Add(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual Task AddAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual void Update(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual Task UpdateAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual void Delete(long id);
    public abstract virtual Task DeleteAsync(long id);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(int dynamicEntityPropertyId, string entityId);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(int dynamicEntityPropertyId, string entityId);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, int dynamicPropertyId);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, int dynamicPropertyId);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, string propertyName);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, string propertyName);
    public abstract virtual void CleanValues(int dynamicEntityPropertyId, string entityId);
    public abstract virtual Task CleanValuesAsync(int dynamicEntityPropertyId, string entityId);
}
public interface Abp.DynamicEntityProperties.IDynamicEntityPropertyValueStore {
    public abstract virtual DynamicEntityPropertyValue Get(long id);
    public abstract virtual Task`1<DynamicEntityPropertyValue> GetAsync(long id);
    public abstract virtual void Add(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual Task AddAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual void Update(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual Task UpdateAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public abstract virtual void Delete(long id);
    public abstract virtual Task DeleteAsync(long id);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(int dynamicEntityPropertyId, string entityId);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(int dynamicEntityPropertyId, string entityId);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId);
    public abstract virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, int dynamicPropertyId);
    public abstract virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, int dynamicPropertyId);
    public abstract virtual void CleanValues(int dynamicEntityPropertyId, string entityId);
    public abstract virtual Task CleanValuesAsync(int dynamicEntityPropertyId, string entityId);
}
public interface Abp.DynamicEntityProperties.IDynamicPropertyManager {
    public abstract virtual DynamicProperty Get(int id);
    public abstract virtual Task`1<DynamicProperty> GetAsync(int id);
    public abstract virtual DynamicProperty Get(string propertyName);
    public abstract virtual Task`1<DynamicProperty> GetAsync(string propertyName);
    public abstract virtual DynamicProperty Add(DynamicProperty dynamicProperty);
    public abstract virtual Task`1<DynamicProperty> AddAsync(DynamicProperty dynamicProperty);
    public abstract virtual DynamicProperty Update(DynamicProperty dynamicProperty);
    public abstract virtual Task`1<DynamicProperty> UpdateAsync(DynamicProperty dynamicProperty);
    public abstract virtual void Delete(int id);
    public abstract virtual Task DeleteAsync(int id);
}
public interface Abp.DynamicEntityProperties.IDynamicPropertyPermissionChecker {
    public abstract virtual void CheckPermission(int dynamicPropertyId);
    public abstract virtual Task CheckPermissionAsync(int dynamicPropertyId);
    public abstract virtual bool IsGranted(int dynamicPropertyId);
    public abstract virtual Task`1<bool> IsGrantedAsync(int dynamicPropertyId);
}
public interface Abp.DynamicEntityProperties.IDynamicPropertyStore {
    public abstract virtual DynamicProperty Get(int id);
    public abstract virtual Task`1<DynamicProperty> GetAsync(int id);
    public abstract virtual DynamicProperty Get(string propertyName);
    public abstract virtual Task`1<DynamicProperty> GetAsync(string propertyName);
    public abstract virtual List`1<DynamicProperty> GetAll();
    public abstract virtual Task`1<List`1<DynamicProperty>> GetAllAsync();
    public abstract virtual void Add(DynamicProperty dynamicProperty);
    public abstract virtual Task AddAsync(DynamicProperty dynamicProperty);
    public abstract virtual void Update(DynamicProperty dynamicProperty);
    public abstract virtual Task UpdateAsync(DynamicProperty dynamicProperty);
    public abstract virtual void Delete(int id);
    public abstract virtual Task DeleteAsync(int id);
}
public interface Abp.DynamicEntityProperties.IDynamicPropertyValueManager {
    public abstract virtual DynamicPropertyValue Get(long id);
    public abstract virtual Task`1<DynamicPropertyValue> GetAsync(long id);
    public abstract virtual List`1<DynamicPropertyValue> GetAllValuesOfDynamicProperty(int dynamicPropertyId);
    public abstract virtual Task`1<List`1<DynamicPropertyValue>> GetAllValuesOfDynamicPropertyAsync(int dynamicPropertyId);
    public abstract virtual void Add(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual Task AddAsync(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual void Update(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual Task UpdateAsync(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual void Delete(long id);
    public abstract virtual Task DeleteAsync(long id);
    public abstract virtual void CleanValues(int dynamicPropertyId);
    public abstract virtual Task CleanValuesAsync(int dynamicPropertyId);
}
public interface Abp.DynamicEntityProperties.IDynamicPropertyValueStore {
    public abstract virtual DynamicPropertyValue Get(long id);
    public abstract virtual Task`1<DynamicPropertyValue> GetAsync(long id);
    public abstract virtual List`1<DynamicPropertyValue> GetAllValuesOfDynamicProperty(int dynamicPropertyId);
    public abstract virtual Task`1<List`1<DynamicPropertyValue>> GetAllValuesOfDynamicPropertyAsync(int dynamicPropertyId);
    public abstract virtual void Add(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual Task AddAsync(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual void Update(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual Task UpdateAsync(DynamicPropertyValue dynamicPropertyValue);
    public abstract virtual void Delete(long id);
    public abstract virtual Task DeleteAsync(long id);
    public abstract virtual void CleanValues(int dynamicPropertyId);
    public abstract virtual Task CleanValuesAsync(int dynamicPropertyId);
}
public class Abp.DynamicEntityProperties.NullDynamicEntityPropertyDefinitionManager : object {
    public static NullDynamicEntityPropertyDefinitionManager Instance;
    private static NullDynamicEntityPropertyDefinitionManager();
    public sealed virtual void AddAllowedInputType();
    public sealed virtual IInputType GetOrNullAllowedInputType(string name);
    public sealed virtual List`1<string> GetAllAllowedInputTypeNames();
    public sealed virtual List`1<IInputType> GetAllAllowedInputTypes();
    public sealed virtual bool ContainsInputType(string name);
    public sealed virtual void AddEntity();
    public sealed virtual void AddEntity();
    public sealed virtual List`1<string> GetAllEntities();
    public sealed virtual bool ContainsEntity(string entityFullName);
    public sealed virtual bool ContainsEntity();
    public sealed virtual bool ContainsEntity();
}
public class Abp.DynamicEntityProperties.NullDynamicEntityPropertyStore : object {
    public static NullDynamicEntityPropertyStore Instance;
    private static NullDynamicEntityPropertyStore();
    public sealed virtual DynamicEntityProperty Get(int id);
    public sealed virtual Task`1<DynamicEntityProperty> GetAsync(int id);
    public sealed virtual List`1<DynamicEntityProperty> GetAll(string entityFullName);
    public sealed virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync(string entityFullName);
    public sealed virtual List`1<DynamicEntityProperty> GetAll();
    public sealed virtual Task`1<List`1<DynamicEntityProperty>> GetAllAsync();
    public sealed virtual void Add(DynamicEntityProperty dynamicEntityProperty);
    public sealed virtual Task AddAsync(DynamicEntityProperty dynamicEntityProperty);
    public sealed virtual void Update(DynamicEntityProperty dynamicEntityProperty);
    public sealed virtual Task UpdateAsync(DynamicEntityProperty dynamicEntityProperty);
    public sealed virtual void Delete(int id);
    public sealed virtual Task DeleteAsync(int id);
}
public class Abp.DynamicEntityProperties.NullDynamicEntityPropertyValueStore : object {
    public static NullDynamicEntityPropertyValueStore Instance;
    private static NullDynamicEntityPropertyValueStore();
    public sealed virtual DynamicEntityPropertyValue Get(long id);
    public sealed virtual Task`1<DynamicEntityPropertyValue> GetAsync(long id);
    public sealed virtual void Add(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public sealed virtual Task AddAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public sealed virtual void Update(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public sealed virtual Task UpdateAsync(DynamicEntityPropertyValue dynamicEntityPropertyValue);
    public sealed virtual void Delete(long id);
    public sealed virtual Task DeleteAsync(long id);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(int dynamicEntityPropertyId, string entityId);
    public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(int dynamicEntityPropertyId, string entityId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId);
    public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId);
    public sealed virtual List`1<DynamicEntityPropertyValue> GetValues(string entityFullName, string entityId, int dynamicPropertyId);
    public sealed virtual Task`1<List`1<DynamicEntityPropertyValue>> GetValuesAsync(string entityFullName, string entityId, int dynamicPropertyId);
    public sealed virtual void CleanValues(int dynamicEntityPropertyId, string entityId);
    public sealed virtual Task CleanValuesAsync(int dynamicEntityPropertyId, string entityId);
}
public class Abp.DynamicEntityProperties.NullDynamicPropertyStore : object {
    public static NullDynamicPropertyStore Instance;
    private static NullDynamicPropertyStore();
    public sealed virtual DynamicProperty Get(int id);
    public sealed virtual Task`1<DynamicProperty> GetAsync(int id);
    public sealed virtual DynamicProperty Get(string propertyName);
    public sealed virtual Task`1<DynamicProperty> GetAsync(string propertyName);
    public sealed virtual List`1<DynamicProperty> GetAll();
    public sealed virtual Task`1<List`1<DynamicProperty>> GetAllAsync();
    public sealed virtual void Add(DynamicProperty dynamicProperty);
    public sealed virtual Task AddAsync(DynamicProperty dynamicProperty);
    public sealed virtual void Update(DynamicProperty dynamicProperty);
    public sealed virtual Task UpdateAsync(DynamicProperty dynamicProperty);
    public sealed virtual void Delete(int id);
    public sealed virtual Task DeleteAsync(int id);
}
public class Abp.DynamicEntityProperties.NullDynamicPropertyValueStore : object {
    public static NullDynamicPropertyValueStore Instance;
    private static NullDynamicPropertyValueStore();
    public sealed virtual DynamicPropertyValue Get(long id);
    public sealed virtual Task`1<DynamicPropertyValue> GetAsync(long id);
    public sealed virtual List`1<DynamicPropertyValue> GetAllValuesOfDynamicProperty(int dynamicPropertyId);
    public sealed virtual Task`1<List`1<DynamicPropertyValue>> GetAllValuesOfDynamicPropertyAsync(int dynamicPropertyId);
    public sealed virtual void Add(DynamicPropertyValue dynamicPropertyValue);
    public sealed virtual Task AddAsync(DynamicPropertyValue dynamicPropertyValue);
    public sealed virtual void Update(DynamicPropertyValue dynamicPropertyValue);
    public sealed virtual Task UpdateAsync(DynamicPropertyValue dynamicPropertyValue);
    public sealed virtual void Delete(long id);
    public sealed virtual Task DeleteAsync(long id);
    public sealed virtual void CleanValues(int dynamicPropertyId);
    public sealed virtual Task CleanValuesAsync(int dynamicPropertyId);
}
[TableAttribute("AbpEntityChanges")]
public class Abp.EntityHistory.EntityChange : Entity`1<long> {
    public static int MaxEntityIdLength;
    public static int MaxEntityTypeFullNameLength;
    [CompilerGeneratedAttribute]
private DateTime <ChangeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityChangeType <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EntityChangeSetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<EntityPropertyChange> <PropertyChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EntityEntry>k__BackingField;
    public DateTime ChangeTime { get; public set; }
    public EntityChangeType ChangeType { get; public set; }
    public long EntityChangeSetId { get; public set; }
    [StringLengthAttribute("48")]
public string EntityId { get; public set; }
    [StringLengthAttribute("192")]
public string EntityTypeFullName { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public ICollection`1<EntityPropertyChange> PropertyChanges { get; public set; }
    [NotMappedAttribute]
public object EntityEntry { get; public set; }
    [CompilerGeneratedAttribute]
public virtual DateTime get_ChangeTime();
    [CompilerGeneratedAttribute]
public virtual void set_ChangeTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual EntityChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public virtual void set_ChangeType(EntityChangeType value);
    [CompilerGeneratedAttribute]
public virtual long get_EntityChangeSetId();
    [CompilerGeneratedAttribute]
public virtual void set_EntityChangeSetId(long value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityId();
    [CompilerGeneratedAttribute]
public virtual void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeFullName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeFullName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<EntityPropertyChange> get_PropertyChanges();
    [CompilerGeneratedAttribute]
public virtual void set_PropertyChanges(ICollection`1<EntityPropertyChange> value);
    [CompilerGeneratedAttribute]
public virtual object get_EntityEntry();
    [CompilerGeneratedAttribute]
public virtual void set_EntityEntry(object value);
}
[TableAttribute("AbpEntityChangeSets")]
public class Abp.EntityHistory.EntityChangeSet : Entity`1<long> {
    public static int MaxBrowserInfoLength;
    public static int MaxClientIpAddressLength;
    public static int MaxClientNameLength;
    public static int MaxReasonLength;
    [CompilerGeneratedAttribute]
private string <BrowserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ImpersonatorTenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ImpersonatorUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EntityChange> <EntityChanges>k__BackingField;
    [StringLengthAttribute("512")]
public string BrowserInfo { get; public set; }
    [StringLengthAttribute("64")]
public string ClientIpAddress { get; public set; }
    [StringLengthAttribute("128")]
public string ClientName { get; public set; }
    public DateTime CreationTime { get; public set; }
    public string ExtensionData { get; public set; }
    public Nullable`1<int> ImpersonatorTenantId { get; public set; }
    public Nullable`1<long> ImpersonatorUserId { get; public set; }
    [StringLengthAttribute("256")]
public string Reason { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    public IList`1<EntityChange> EntityChanges { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_BrowserInfo();
    [CompilerGeneratedAttribute]
public virtual void set_BrowserInfo(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientIpAddress();
    [CompilerGeneratedAttribute]
public virtual void set_ClientIpAddress(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientName();
    [CompilerGeneratedAttribute]
public virtual void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual string get_ExtensionData();
    [CompilerGeneratedAttribute]
public virtual void set_ExtensionData(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_ImpersonatorTenantId();
    [CompilerGeneratedAttribute]
public virtual void set_ImpersonatorTenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ImpersonatorUserId();
    [CompilerGeneratedAttribute]
public virtual void set_ImpersonatorUserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual string get_Reason();
    [CompilerGeneratedAttribute]
public virtual void set_Reason(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<EntityChange> get_EntityChanges();
    [CompilerGeneratedAttribute]
public virtual void set_EntityChanges(IList`1<EntityChange> value);
}
public abstract class Abp.EntityHistory.EntityChangeSetReasonProviderBase : object {
    public static string ReasonOverrideContextKey;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmbientScopeProvider`1<ReasonOverride> <ReasonOverrideScopeProvider>k__BackingField;
    public string Reason { get; }
    public ILogger Logger { get; public set; }
    protected ReasonOverride OverridedValue { get; }
    protected IAmbientScopeProvider`1<ReasonOverride> ReasonOverrideScopeProvider { get; }
    protected EntityChangeSetReasonProviderBase(IAmbientScopeProvider`1<ReasonOverride> reasonOverrideScopeProvider);
    public abstract virtual string get_Reason();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    protected ReasonOverride get_OverridedValue();
    [CompilerGeneratedAttribute]
protected IAmbientScopeProvider`1<ReasonOverride> get_ReasonOverrideScopeProvider();
    public sealed virtual IDisposable Use(string reason);
}
internal class Abp.EntityHistory.EntityHistoryConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabledForAnonymousUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityHistorySelectorList <Selectors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <IgnoredTypes>k__BackingField;
    public bool IsEnabled { get; public set; }
    public bool IsEnabledForAnonymousUsers { get; public set; }
    public IEntityHistorySelectorList Selectors { get; }
    public List`1<Type> IgnoredTypes { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabledForAnonymousUsers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabledForAnonymousUsers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEntityHistorySelectorList get_Selectors();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Type> get_IgnoredTypes();
}
public abstract class Abp.EntityHistory.EntityHistoryHelperBase : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IClientInfoProvider <ClientInfoProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityChangeSetReasonProvider <EntityChangeSetReasonProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityHistoryStore <EntityHistoryStore>k__BackingField;
    protected IEntityHistoryConfiguration EntityHistoryConfiguration;
    protected IUnitOfWorkManager UnitOfWorkManager;
    public ILogger Logger { get; public set; }
    public IAbpSession AbpSession { get; public set; }
    public IClientInfoProvider ClientInfoProvider { get; public set; }
    public IEntityChangeSetReasonProvider EntityChangeSetReasonProvider { get; public set; }
    public IEntityHistoryStore EntityHistoryStore { get; public set; }
    protected bool IsEntityHistoryEnabled { get; }
    protected EntityHistoryHelperBase(IEntityHistoryConfiguration entityHistoryConfiguration, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [CompilerGeneratedAttribute]
public IClientInfoProvider get_ClientInfoProvider();
    [CompilerGeneratedAttribute]
public void set_ClientInfoProvider(IClientInfoProvider value);
    [CompilerGeneratedAttribute]
public IEntityChangeSetReasonProvider get_EntityChangeSetReasonProvider();
    [CompilerGeneratedAttribute]
public void set_EntityChangeSetReasonProvider(IEntityChangeSetReasonProvider value);
    [CompilerGeneratedAttribute]
public IEntityHistoryStore get_EntityHistoryStore();
    [CompilerGeneratedAttribute]
public void set_EntityHistoryStore(IEntityHistoryStore value);
    protected bool get_IsEntityHistoryEnabled();
    protected virtual DateTime GetChangeTime(EntityChangeType entityChangeType, object entity);
    protected virtual bool IsTypeOfEntity(Type entityType);
    protected virtual Nullable`1<bool> IsTypeOfAuditedEntity(Type entityType);
    protected virtual Nullable`1<bool> IsTypeOfTrackedEntity(Type entityType);
    protected virtual Nullable`1<bool> IsAuditedPropertyInfo(Type entityType, PropertyInfo propertyInfo);
    protected virtual Nullable`1<bool> IsAuditedPropertyInfo(PropertyInfo propertyInfo);
}
internal class Abp.EntityHistory.EntityHistoryInterceptor : AbpInterceptorBase {
    [CompilerGeneratedAttribute]
private IEntityChangeSetReasonProvider <ReasonProvider>k__BackingField;
    public IEntityChangeSetReasonProvider ReasonProvider { get; public set; }
    [CompilerGeneratedAttribute]
public IEntityChangeSetReasonProvider get_ReasonProvider();
    [CompilerGeneratedAttribute]
public void set_ReasonProvider(IEntityChangeSetReasonProvider value);
    public virtual void InterceptSynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.EntityHistory.EntityHistoryInterceptor/<InternalInterceptAsynchronous>d__6")]
protected virtual Task InternalInterceptAsynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.EntityHistory.EntityHistoryInterceptor/<InternalInterceptAsynchronous>d__7`1")]
protected virtual Task`1<TResult> InternalInterceptAsynchronous(IInvocation invocation);
}
internal static class Abp.EntityHistory.EntityHistoryInterceptorRegistrar : object {
    public static void Initialize(IIocManager iocManager);
    private static bool ShouldIntercept(IEntityHistoryConfiguration entityHistoryConfiguration, Type type);
}
internal class Abp.EntityHistory.EntityHistorySelectorList : List`1<NamedTypeSelector> {
    public sealed virtual bool RemoveByName(string name);
}
[DefaultMemberAttribute("Item")]
public class Abp.EntityHistory.EntityHistorySnapshot : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ChangedPropertiesSnapshots>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PropertyChangesStackTree>k__BackingField;
    public Dictionary`2<string, string> ChangedPropertiesSnapshots { get; }
    public Dictionary`2<string, string> PropertyChangesStackTree { get; }
    public string Item { get; }
    public EntityHistorySnapshot(Dictionary`2<string, string> snapshotProperties, Dictionary`2<string, string> propertyChangesStackTree);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ChangedPropertiesSnapshots();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_PropertyChangesStackTree();
    public string get_Item(string propertyName);
    public bool IsPropertyChanged(string propertyName);
}
[TableAttribute("AbpEntityPropertyChanges")]
public class Abp.EntityHistory.EntityPropertyChange : Entity`1<long> {
    public static int MaxPropertyNameLength;
    public static int MaxValueLength;
    public static int MaxPropertyTypeFullNameLength;
    [CompilerGeneratedAttribute]
private long <EntityChangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewValueHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalValueHash>k__BackingField;
    public long EntityChangeId { get; public set; }
    [StringLengthAttribute("512")]
public string NewValue { get; public set; }
    [StringLengthAttribute("512")]
public string OriginalValue { get; public set; }
    [StringLengthAttribute("96")]
public string PropertyName { get; public set; }
    [StringLengthAttribute("192")]
public string PropertyTypeFullName { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public string NewValueHash { get; public set; }
    public string OriginalValueHash { get; public set; }
    [CompilerGeneratedAttribute]
public virtual long get_EntityChangeId();
    [CompilerGeneratedAttribute]
public virtual void set_EntityChangeId(long value);
    [CompilerGeneratedAttribute]
public virtual string get_NewValue();
    [CompilerGeneratedAttribute]
public virtual void set_NewValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OriginalValue();
    [CompilerGeneratedAttribute]
public virtual void set_OriginalValue(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public virtual void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyTypeFullName();
    [CompilerGeneratedAttribute]
public virtual void set_PropertyTypeFullName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_NewValueHash();
    [CompilerGeneratedAttribute]
public virtual void set_NewValueHash(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OriginalValueHash();
    [CompilerGeneratedAttribute]
public virtual void set_OriginalValueHash(string value);
    public virtual void SetNewValue(string newValue);
    public virtual void SetOriginalValue(string originalValue);
    public virtual bool IsValuesEquals();
}
public abstract class Abp.EntityHistory.EntitySnapshotManagerBase : object {
    protected IRepository`2<EntityChange, long> EntityChangeRepository;
    [CompilerGeneratedAttribute]
private IAsyncQueryableExecuter <AsyncQueryableExecuter>k__BackingField;
    public IAsyncQueryableExecuter AsyncQueryableExecuter { get; public set; }
    protected EntitySnapshotManagerBase(IRepository`2<EntityChange, long> entityChangeRepository);
    [CompilerGeneratedAttribute]
public IAsyncQueryableExecuter get_AsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public void set_AsyncQueryableExecuter(IAsyncQueryableExecuter value);
    protected abstract virtual Task`1<TEntity> GetEntityById(TPrimaryKey id);
    protected abstract virtual IQueryable`1<EntityChange> GetEntityChanges(TPrimaryKey id, DateTime snapshotTime);
    protected virtual Expression`1<Func`2<TEntity, bool>> CreateEqualityExpressionForId(TPrimaryKey id);
    [AsyncStateMachineAttribute("Abp.EntityHistory.EntitySnapshotManagerBase/<GetSnapshotAsync>d__9`2")]
public virtual Task`1<EntityHistorySnapshot> GetSnapshotAsync(TPrimaryKey id, DateTime snapshotTime);
    private static void RevokeChange(Dictionary`2<string, string> snapshotPropertiesDictionary, EntityPropertyChange entityPropertyChange, TEntity entity);
    private static void AddChangeToPropertyChangesStackTree(EntityPropertyChange entityPropertyChange, Dictionary`2<string, string> propertyChangesStackTreeDictionary, TEntity entity);
}
[ExtensionAttribute]
public static class Abp.EntityHistory.EntitySnapshotManagerExtensions : object {
    [AsyncStateMachineAttribute("Abp.EntityHistory.EntitySnapshotManagerExtensions/<GetSnapshotAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<EntityHistorySnapshot> GetSnapshotAsync(IEntitySnapshotManager entitySnapshotManager, int id, DateTime snapshotTime);
}
public interface Abp.EntityHistory.IEntityChangeSetReasonProvider {
    public string Reason { get; }
    public abstract virtual string get_Reason();
    public abstract virtual IDisposable Use(string reason);
}
public interface Abp.EntityHistory.IEntityHistoryConfiguration {
    public bool IsEnabled { get; public set; }
    public bool IsEnabledForAnonymousUsers { get; public set; }
    public IEntityHistorySelectorList Selectors { get; }
    public List`1<Type> IgnoredTypes { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsEnabledForAnonymousUsers();
    public abstract virtual void set_IsEnabledForAnonymousUsers(bool value);
    public abstract virtual IEntityHistorySelectorList get_Selectors();
    public abstract virtual List`1<Type> get_IgnoredTypes();
}
public interface Abp.EntityHistory.IEntityHistorySelectorList {
    public abstract virtual bool RemoveByName(string name);
}
public interface Abp.EntityHistory.IEntityHistoryStore {
    public abstract virtual Task SaveAsync(EntityChangeSet entityChangeSet);
    public abstract virtual void Save(EntityChangeSet entityChangeSet);
}
public interface Abp.EntityHistory.IEntitySnapshotManager {
    public abstract virtual Task`1<EntityHistorySnapshot> GetSnapshotAsync(TPrimaryKey id, DateTime snapshotTime);
}
public class Abp.EntityHistory.NullEntityChangeSetReasonProvider : EntityChangeSetReasonProviderBase {
    [CompilerGeneratedAttribute]
private static NullEntityChangeSetReasonProvider <Instance>k__BackingField;
    public static NullEntityChangeSetReasonProvider Instance { get; }
    public string Reason { get; }
    private static NullEntityChangeSetReasonProvider();
    [CompilerGeneratedAttribute]
public static NullEntityChangeSetReasonProvider get_Instance();
    public virtual string get_Reason();
}
public class Abp.EntityHistory.NullEntityHistoryStore : object {
    [CompilerGeneratedAttribute]
private static NullEntityHistoryStore <Instance>k__BackingField;
    public static NullEntityHistoryStore Instance { get; }
    private static NullEntityHistoryStore();
    [CompilerGeneratedAttribute]
public static NullEntityHistoryStore get_Instance();
    public sealed virtual Task SaveAsync(EntityChangeSet entityChangeSet);
    public sealed virtual void Save(EntityChangeSet entityChangeSet);
}
public class Abp.EntityHistory.ReasonOverride : object {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; }
    public ReasonOverride(string reason);
    [CompilerGeneratedAttribute]
public string get_Reason();
}
[AttributeUsageAttribute("68")]
public class Abp.EntityHistory.UseCaseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class Abp.Events.Bus.Entities.DomainEventEntry : object {
    [CompilerGeneratedAttribute]
private object <SourceEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventData <EventData>k__BackingField;
    public object SourceEntity { get; }
    public IEventData EventData { get; }
    public DomainEventEntry(object sourceEntity, IEventData eventData);
    [CompilerGeneratedAttribute]
public object get_SourceEntity();
    [CompilerGeneratedAttribute]
public IEventData get_EventData();
}
public class Abp.Events.Bus.Entities.EntityChangedEventData`1 : EntityEventData`1<TEntity> {
    public EntityChangedEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityChangeEntry : object {
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityChangeType <ChangeType>k__BackingField;
    public object Entity { get; public set; }
    public EntityChangeType ChangeType { get; public set; }
    public EntityChangeEntry(object entity, EntityChangeType changeType);
    [CompilerGeneratedAttribute]
public object get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(object value);
    [CompilerGeneratedAttribute]
public EntityChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(EntityChangeType value);
}
public class Abp.Events.Bus.Entities.EntityChangeEventHelper : object {
    [CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    public IEventBus EventBus { get; public set; }
    public EntityChangeEventHelper(IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public IEventBus get_EventBus();
    [CompilerGeneratedAttribute]
public void set_EventBus(IEventBus value);
    public virtual void TriggerEvents(EntityChangeReport changeReport);
    public sealed virtual Task TriggerEventsAsync(EntityChangeReport changeReport);
    public virtual void TriggerEntityCreatingEvent(object entity);
    public virtual void TriggerEntityCreatedEventOnUowCompleted(object entity);
    public virtual void TriggerEntityUpdatingEvent(object entity);
    public virtual void TriggerEntityUpdatedEventOnUowCompleted(object entity);
    public virtual void TriggerEntityDeletingEvent(object entity);
    public virtual void TriggerEntityDeletedEventOnUowCompleted(object entity);
    public virtual void TriggerEventsInternal(EntityChangeReport changeReport);
    protected virtual void TriggerEntityChangeEvents(List`1<EntityChangeEntry> changedEntities);
    protected virtual void TriggerDomainEvents(List`1<DomainEventEntry> domainEvents);
    protected virtual void TriggerEventWithEntity(Type genericEventType, object entity, bool triggerInCurrentUnitOfWork);
}
public class Abp.Events.Bus.Entities.EntityChangeReport : object {
    [CompilerGeneratedAttribute]
private List`1<EntityChangeEntry> <ChangedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DomainEventEntry> <DomainEvents>k__BackingField;
    public List`1<EntityChangeEntry> ChangedEntities { get; }
    public List`1<DomainEventEntry> DomainEvents { get; }
    [CompilerGeneratedAttribute]
public List`1<EntityChangeEntry> get_ChangedEntities();
    [CompilerGeneratedAttribute]
public List`1<DomainEventEntry> get_DomainEvents();
    public bool IsEmpty();
    public virtual string ToString();
}
public enum Abp.Events.Bus.Entities.EntityChangeType : Enum {
    public byte value__;
    public static EntityChangeType Created;
    public static EntityChangeType Updated;
    public static EntityChangeType Deleted;
}
public class Abp.Events.Bus.Entities.EntityChangingEventData`1 : EntityEventData`1<TEntity> {
    public EntityChangingEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityCreatedEventData`1 : EntityChangedEventData`1<TEntity> {
    public EntityCreatedEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityCreatingEventData`1 : EntityChangingEventData`1<TEntity> {
    public EntityCreatingEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityDeletedEventData`1 : EntityChangedEventData`1<TEntity> {
    public EntityDeletedEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityDeletingEventData`1 : EntityChangingEventData`1<TEntity> {
    public EntityDeletingEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityEventData`1 : EventData {
    [CompilerGeneratedAttribute]
private TEntity <Entity>k__BackingField;
    public TEntity Entity { get; private set; }
    public EntityEventData`1(TEntity entity);
    [CompilerGeneratedAttribute]
public TEntity get_Entity();
    [CompilerGeneratedAttribute]
private void set_Entity(TEntity value);
    public virtual Object[] GetConstructorArgs();
}
public class Abp.Events.Bus.Entities.EntityUpdatedEventData`1 : EntityChangedEventData`1<TEntity> {
    public EntityUpdatedEventData`1(TEntity entity);
}
public class Abp.Events.Bus.Entities.EntityUpdatingEventData`1 : EntityChangingEventData`1<TEntity> {
    public EntityUpdatingEventData`1(TEntity entity);
}
public interface Abp.Events.Bus.Entities.IEntityChangeEventHelper {
    public abstract virtual void TriggerEvents(EntityChangeReport changeReport);
    public abstract virtual Task TriggerEventsAsync(EntityChangeReport changeReport);
    public abstract virtual void TriggerEntityCreatingEvent(object entity);
    public abstract virtual void TriggerEntityCreatedEventOnUowCompleted(object entity);
    public abstract virtual void TriggerEntityUpdatingEvent(object entity);
    public abstract virtual void TriggerEntityUpdatedEventOnUowCompleted(object entity);
    public abstract virtual void TriggerEntityDeletingEvent(object entity);
    public abstract virtual void TriggerEntityDeletedEventOnUowCompleted(object entity);
}
public class Abp.Events.Bus.Entities.NullEntityChangeEventHelper : object {
    [CompilerGeneratedAttribute]
private static NullEntityChangeEventHelper <Instance>k__BackingField;
    public static NullEntityChangeEventHelper Instance { get; }
    private static NullEntityChangeEventHelper();
    [CompilerGeneratedAttribute]
public static NullEntityChangeEventHelper get_Instance();
    public sealed virtual void TriggerEntityCreatingEvent(object entity);
    public sealed virtual void TriggerEntityCreatedEventOnUowCompleted(object entity);
    public sealed virtual void TriggerEntityUpdatingEvent(object entity);
    public sealed virtual void TriggerEntityUpdatedEventOnUowCompleted(object entity);
    public sealed virtual void TriggerEntityDeletingEvent(object entity);
    public sealed virtual void TriggerEntityDeletedEventOnUowCompleted(object entity);
    public sealed virtual void TriggerEvents(EntityChangeReport changeReport);
    public sealed virtual Task TriggerEventsAsync(EntityChangeReport changeReport);
}
public class Abp.Events.Bus.EventBus : object {
    [CompilerGeneratedAttribute]
private static EventBus <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private ConcurrentDictionary`2<Type, List`1<IEventHandlerFactory>> _handlerFactories;
    public static EventBus Default { get; }
    public ILogger Logger { get; public set; }
    private static EventBus();
    [CompilerGeneratedAttribute]
public static EventBus get_Default();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual IDisposable Register(Action`1<TEventData> action);
    public sealed virtual IDisposable AsyncRegister(Func`2<TEventData, Task> action);
    public sealed virtual IDisposable Register(IEventHandler`1<TEventData> handler);
    public sealed virtual IDisposable AsyncRegister(IAsyncEventHandler`1<TEventData> handler);
    public sealed virtual IDisposable Register();
    public sealed virtual IDisposable Register(Type eventType, IEventHandler handler);
    public sealed virtual IDisposable Register(IEventHandlerFactory factory);
    public sealed virtual IDisposable Register(Type eventType, IEventHandlerFactory factory);
    public sealed virtual void Unregister(Action`1<TEventData> action);
    public sealed virtual void AsyncUnregister(Func`2<TEventData, Task> action);
    public sealed virtual void Unregister(IEventHandler`1<TEventData> handler);
    public sealed virtual void AsyncUnregister(IAsyncEventHandler`1<TEventData> handler);
    public sealed virtual void Unregister(Type eventType, IEventHandler handler);
    public sealed virtual void Unregister(IEventHandlerFactory factory);
    public sealed virtual void Unregister(Type eventType, IEventHandlerFactory factory);
    public sealed virtual void UnregisterAll();
    public sealed virtual void UnregisterAll(Type eventType);
    public sealed virtual void Trigger(TEventData eventData);
    public sealed virtual void Trigger(object eventSource, TEventData eventData);
    public sealed virtual void Trigger(Type eventType, IEventData eventData);
    public sealed virtual void Trigger(Type eventType, object eventSource, IEventData eventData);
    public sealed virtual Task TriggerAsync(TEventData eventData);
    public sealed virtual Task TriggerAsync(object eventSource, TEventData eventData);
    public sealed virtual Task TriggerAsync(Type eventType, IEventData eventData);
    [AsyncStateMachineAttribute("Abp.Events.Bus.EventBus/<TriggerAsync>d__33")]
public sealed virtual Task TriggerAsync(Type eventType, object eventSource, IEventData eventData);
    private void TriggerHandlingException(IEventHandlerFactory handlerFactory, Type eventType, IEventData eventData, List`1<Exception> exceptions);
    [AsyncStateMachineAttribute("Abp.Events.Bus.EventBus/<TriggerAsyncHandlingException>d__35")]
private Task TriggerAsyncHandlingException(IEventHandlerFactory asyncHandlerFactory, Type eventType, IEventData eventData, List`1<Exception> exceptions);
    private bool IsEventHandler(Type handlerType);
    private bool IsAsyncEventHandler(Type handlerType);
    private IEnumerable`1<EventTypeWithEventHandlerFactories> GetHandlerFactories(Type eventType);
    private static bool ShouldTriggerEventForHandler(Type eventType, Type handlerType);
    private List`1<IEventHandlerFactory> GetOrCreateHandlerFactories(Type eventType);
}
internal class Abp.Events.Bus.EventBusInstaller : object {
    private IIocResolver _iocResolver;
    private IEventBusConfiguration _eventBusConfiguration;
    private IEventBus _eventBus;
    public EventBusInstaller(IIocResolver iocResolver);
    public sealed virtual void Install(IWindsorContainer container, IConfigurationStore store);
    private void Kernel_ComponentRegistered(string key, IHandler handler);
}
public abstract class Abp.Events.Bus.EventData : object {
    [CompilerGeneratedAttribute]
private DateTime <EventTime>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EventSource>k__BackingField;
    public DateTime EventTime { get; public set; }
    public object EventSource { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_EventTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EventTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_EventSource();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EventSource(object value);
}
public class Abp.Events.Bus.Exceptions.AbpHandledExceptionData : ExceptionData {
    public AbpHandledExceptionData(Exception exception);
}
public class Abp.Events.Bus.Exceptions.ExceptionData : EventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public ExceptionData(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
public interface Abp.Events.Bus.Factories.IEventHandlerFactory {
    public abstract virtual IEventHandler GetHandler();
    public abstract virtual Type GetHandlerType();
    public abstract virtual void ReleaseHandler(IEventHandler handler);
}
internal class Abp.Events.Bus.Factories.Internals.FactoryUnregistrar : object {
    private IEventBus _eventBus;
    private Type _eventType;
    private IEventHandlerFactory _factory;
    public FactoryUnregistrar(IEventBus eventBus, Type eventType, IEventHandlerFactory factory);
    public sealed virtual void Dispose();
}
internal class Abp.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory : object {
    [CompilerGeneratedAttribute]
private IEventHandler <HandlerInstance>k__BackingField;
    public IEventHandler HandlerInstance { get; private set; }
    public SingleInstanceHandlerFactory(IEventHandler handler);
    [CompilerGeneratedAttribute]
public IEventHandler get_HandlerInstance();
    [CompilerGeneratedAttribute]
private void set_HandlerInstance(IEventHandler value);
    public sealed virtual IEventHandler GetHandler();
    public sealed virtual Type GetHandlerType();
    public sealed virtual void ReleaseHandler(IEventHandler handler);
}
internal class Abp.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1 : object {
    public sealed virtual IEventHandler GetHandler();
    public sealed virtual Type GetHandlerType();
    public sealed virtual void ReleaseHandler(IEventHandler handler);
}
public class Abp.Events.Bus.Factories.IocHandlerFactory : object {
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    private IIocResolver _iocResolver;
    public Type HandlerType { get; }
    public IocHandlerFactory(IIocResolver iocResolver, Type handlerType);
    [CompilerGeneratedAttribute]
public Type get_HandlerType();
    public sealed virtual IEventHandler GetHandler();
    public sealed virtual Type GetHandlerType();
    public sealed virtual void ReleaseHandler(IEventHandler handler);
}
public interface Abp.Events.Bus.Handlers.IAsyncEventHandler`1 {
    public abstract virtual Task HandleEventAsync(TEventData eventData);
}
public interface Abp.Events.Bus.Handlers.IEventHandler {
}
public interface Abp.Events.Bus.Handlers.IEventHandler`1 {
    public abstract virtual void HandleEvent(TEventData eventData);
}
internal class Abp.Events.Bus.Handlers.Internals.ActionEventHandler`1 : object {
    [CompilerGeneratedAttribute]
private Action`1<TEventData> <Action>k__BackingField;
    public Action`1<TEventData> Action { get; private set; }
    public ActionEventHandler`1(Action`1<TEventData> handler);
    [CompilerGeneratedAttribute]
public Action`1<TEventData> get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(Action`1<TEventData> value);
    public sealed virtual void HandleEvent(TEventData eventData);
}
internal class Abp.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1 : object {
    [CompilerGeneratedAttribute]
private Func`2<TEventData, Task> <Action>k__BackingField;
    public Func`2<TEventData, Task> Action { get; private set; }
    public AsyncActionEventHandler`1(Func`2<TEventData, Task> handler);
    [CompilerGeneratedAttribute]
public Func`2<TEventData, Task> get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(Func`2<TEventData, Task> value);
    [AsyncStateMachineAttribute("Abp.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1/<HandleEventAsync>d__5")]
public sealed virtual Task HandleEventAsync(TEventData eventData);
}
public interface Abp.Events.Bus.IEventBus {
    public abstract virtual IDisposable Register(Action`1<TEventData> action);
    public abstract virtual IDisposable AsyncRegister(Func`2<TEventData, Task> action);
    public abstract virtual IDisposable Register(IEventHandler`1<TEventData> handler);
    public abstract virtual IDisposable AsyncRegister(IAsyncEventHandler`1<TEventData> handler);
    public abstract virtual IDisposable Register();
    public abstract virtual IDisposable Register(Type eventType, IEventHandler handler);
    public abstract virtual IDisposable Register(IEventHandlerFactory factory);
    public abstract virtual IDisposable Register(Type eventType, IEventHandlerFactory factory);
    public abstract virtual void Unregister(Action`1<TEventData> action);
    public abstract virtual void AsyncUnregister(Func`2<TEventData, Task> action);
    public abstract virtual void Unregister(IEventHandler`1<TEventData> handler);
    public abstract virtual void AsyncUnregister(IAsyncEventHandler`1<TEventData> handler);
    public abstract virtual void Unregister(Type eventType, IEventHandler handler);
    public abstract virtual void Unregister(IEventHandlerFactory factory);
    public abstract virtual void Unregister(Type eventType, IEventHandlerFactory factory);
    public abstract virtual void UnregisterAll();
    public abstract virtual void UnregisterAll(Type eventType);
    public abstract virtual void Trigger(TEventData eventData);
    public abstract virtual void Trigger(object eventSource, TEventData eventData);
    public abstract virtual void Trigger(Type eventType, IEventData eventData);
    public abstract virtual void Trigger(Type eventType, object eventSource, IEventData eventData);
    public abstract virtual Task TriggerAsync(TEventData eventData);
    public abstract virtual Task TriggerAsync(object eventSource, TEventData eventData);
    public abstract virtual Task TriggerAsync(Type eventType, IEventData eventData);
    public abstract virtual Task TriggerAsync(Type eventType, object eventSource, IEventData eventData);
}
public interface Abp.Events.Bus.IEventData {
    public DateTime EventTime { get; public set; }
    public object EventSource { get; public set; }
    public abstract virtual DateTime get_EventTime();
    public abstract virtual void set_EventTime(DateTime value);
    public abstract virtual object get_EventSource();
    public abstract virtual void set_EventSource(object value);
}
public interface Abp.Events.Bus.IEventDataWithInheritableGenericArgument {
    public abstract virtual Object[] GetConstructorArgs();
}
public class Abp.Events.Bus.NullEventBus : object {
    [CompilerGeneratedAttribute]
private static NullEventBus <Instance>k__BackingField;
    public static NullEventBus Instance { get; }
    private static NullEventBus();
    [CompilerGeneratedAttribute]
public static NullEventBus get_Instance();
    public sealed virtual IDisposable Register(Action`1<TEventData> action);
    public sealed virtual IDisposable AsyncRegister(Func`2<TEventData, Task> action);
    public sealed virtual IDisposable Register(IEventHandler`1<TEventData> handler);
    public sealed virtual IDisposable AsyncRegister(IAsyncEventHandler`1<TEventData> handler);
    public sealed virtual IDisposable Register();
    public sealed virtual IDisposable Register(Type eventType, IEventHandler handler);
    public sealed virtual IDisposable Register(IEventHandlerFactory handlerFactory);
    public sealed virtual IDisposable Register(Type eventType, IEventHandlerFactory handlerFactory);
    public sealed virtual void Unregister(Action`1<TEventData> action);
    public sealed virtual void AsyncUnregister(Func`2<TEventData, Task> action);
    public sealed virtual void Unregister(IEventHandler`1<TEventData> handler);
    public sealed virtual void AsyncUnregister(IAsyncEventHandler`1<TEventData> handler);
    public sealed virtual void Unregister(Type eventType, IEventHandler handler);
    public sealed virtual void Unregister(IEventHandlerFactory factory);
    public sealed virtual void Unregister(Type eventType, IEventHandlerFactory factory);
    public sealed virtual void UnregisterAll();
    public sealed virtual void UnregisterAll(Type eventType);
    public sealed virtual void Trigger(TEventData eventData);
    public sealed virtual void Trigger(object eventSource, TEventData eventData);
    public sealed virtual void Trigger(Type eventType, IEventData eventData);
    public sealed virtual void Trigger(Type eventType, object eventSource, IEventData eventData);
    public sealed virtual Task TriggerAsync(TEventData eventData);
    public sealed virtual Task TriggerAsync(object eventSource, TEventData eventData);
    public sealed virtual Task TriggerAsync(Type eventType, IEventData eventData);
    public sealed virtual Task TriggerAsync(Type eventType, object eventSource, IEventData eventData);
}
[ExtensionAttribute]
public static class Abp.Extensions.ComparableExtensions : object {
    [ExtensionAttribute]
public static bool IsBetween(T value, T minInclusiveValue, T maxInclusiveValue);
}
[ExtensionAttribute]
public static class Abp.Extensions.DateTimeExtensions : object {
    [ExtensionAttribute]
public static double ToUnixTimestamp(DateTime target);
    [ExtensionAttribute]
public static DateTime FromUnixTimestamp(double unixTime);
    [ExtensionAttribute]
public static DateTime ToDayEnd(DateTime target);
    [ExtensionAttribute]
public static DateTime StartOfWeek(DateTime dt, DayOfWeek startOfWeek);
    public static IEnumerable`1<DateTime> DaysOfMonth(int year, int month);
    [ExtensionAttribute]
public static int WeekDayInstanceOfMonth(DateTime dateTime);
    [ExtensionAttribute]
public static int TotalDaysInMonth(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime ToDateTimeUnspecified(DateTime date);
    [ExtensionAttribute]
public static DateTime TrimMilliseconds(DateTime date);
}
[ExtensionAttribute]
public static class Abp.Extensions.DateTimeRangeExtensions : object {
    [ExtensionAttribute]
public static void SetTo(IDateTimeRange source, IDateTimeRange target);
    [ExtensionAttribute]
public static void SetFrom(IDateTimeRange target, IDateTimeRange source);
    [ExtensionAttribute]
public static IEnumerable`1<DateTime> DaysInRange(IDateTimeRange dateRange);
    public static IEnumerable`1<DateTime> DaysInRange(DateTime start, DateTime end);
}
[ExtensionAttribute]
public static class Abp.Extensions.DayOfWeekExtensions : object {
    [ExtensionAttribute]
public static bool IsWeekend(DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static bool IsWeekday(DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static DateTime FindNthWeekDayOfMonth(DayOfWeek dayOfWeek, int year, int month, int n);
    [ExtensionAttribute]
public static int TotalInstancesInMonth(DayOfWeek dayOfWeek, int year, int month);
    [ExtensionAttribute]
public static int TotalInstancesInMonth(DayOfWeek dayOfWeek, DateTime dateTime);
}
[ExtensionAttribute]
public static class Abp.Extensions.EventHandlerExtensions : object {
    [ExtensionAttribute]
public static void InvokeSafely(EventHandler eventHandler, object sender);
    [ExtensionAttribute]
public static void InvokeSafely(EventHandler eventHandler, object sender, EventArgs e);
    [ExtensionAttribute]
public static void InvokeSafely(EventHandler`1<TEventArgs> eventHandler, object sender, TEventArgs e);
}
[ExtensionAttribute]
public static class Abp.Extensions.ExceptionExtensions : object {
    [ExtensionAttribute]
public static void ReThrow(Exception exception);
}
[ExtensionAttribute]
public static class Abp.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
public static T As(object obj);
    [ExtensionAttribute]
public static T To(object obj);
    [ExtensionAttribute]
public static bool IsIn(T item, T[] list);
}
[ExtensionAttribute]
public static class Abp.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string EnsureEndsWith(string str, char c);
    [ExtensionAttribute]
public static string EnsureEndsWith(string str, char c, StringComparison comparisonType);
    [ExtensionAttribute]
public static string EnsureEndsWith(string str, char c, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static string EnsureStartsWith(string str, char c);
    [ExtensionAttribute]
public static string EnsureStartsWith(string str, char c, StringComparison comparisonType);
    [ExtensionAttribute]
public static string EnsureStartsWith(string str, char c, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string str);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string str);
    [ExtensionAttribute]
public static string Left(string str, int len);
    [ExtensionAttribute]
public static string NormalizeLineEndings(string str);
    [ExtensionAttribute]
public static int NthIndexOf(string str, char c, int n);
    [ExtensionAttribute]
public static string RemovePostFix(string str, String[] postFixes);
    [ExtensionAttribute]
public static string RemovePreFix(string str, String[] preFixes);
    [ExtensionAttribute]
public static string Right(string str, int len);
    [ExtensionAttribute]
public static String[] Split(string str, string separator);
    [ExtensionAttribute]
public static String[] Split(string str, string separator, StringSplitOptions options);
    [ExtensionAttribute]
public static String[] SplitToLines(string str);
    [ExtensionAttribute]
public static String[] SplitToLines(string str, StringSplitOptions options);
    [ExtensionAttribute]
public static string ToCamelCase(string str, bool invariantCulture);
    [ExtensionAttribute]
public static string ToCamelCase(string str, CultureInfo culture);
    [ExtensionAttribute]
public static string ToSentenceCase(string str, bool invariantCulture);
    [ExtensionAttribute]
public static string ToSentenceCase(string str, CultureInfo culture);
    [ExtensionAttribute]
public static T ToEnum(string value);
    [ExtensionAttribute]
public static T ToEnum(string value, bool ignoreCase);
    [ExtensionAttribute]
public static string ToMd5(string str);
    [ExtensionAttribute]
public static string ToPascalCase(string str, bool invariantCulture);
    [ExtensionAttribute]
public static string ToPascalCase(string str, CultureInfo culture);
    [ExtensionAttribute]
public static string Truncate(string str, int maxLength);
    [ExtensionAttribute]
public static string TruncateWithPostfix(string str, int maxLength);
    [ExtensionAttribute]
public static string TruncateWithPostfix(string str, int maxLength, string postfix);
    [ExtensionAttribute]
public static Byte[] GetBytes(string str);
    [ExtensionAttribute]
public static Byte[] GetBytes(string str, Encoding encoding);
}
public interface Abp.IGuidGenerator {
    public abstract virtual Guid Create();
}
public interface Abp.IHasErrorCode {
    public int Code { get; public set; }
    public abstract virtual int get_Code();
    public abstract virtual void set_Code(int value);
}
public static class Abp.IO.DirectoryHelper : object {
    public static void CreateIfNotExists(string directory);
    public static void DeleteIfExists(string directory, bool recursive);
}
[ExtensionAttribute]
public static class Abp.IO.Extensions.StreamExtensions : object {
    [ExtensionAttribute]
public static Byte[] GetAllBytes(Stream stream);
    [AsyncStateMachineAttribute("Abp.IO.Extensions.StreamExtensions/<GetAllBytesAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Byte[]> GetAllBytesAsync(Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task CopyToAsync(Stream stream, Stream destination, CancellationToken cancellationToken);
}
public static class Abp.IO.FileHelper : object {
    public static void DeleteIfExists(string filePath);
    public static bool TryToDeleteIfExists(string filePath);
}
public interface Abp.IShouldInitialize {
}
public interface Abp.IUserIdentifier {
    public Nullable`1<int> TenantId { get; }
    public long UserId { get; }
    public abstract virtual Nullable`1<int> get_TenantId();
    public abstract virtual long get_UserId();
}
public class Abp.Json.AbpCamelCasePropertyNamesContractResolver : CamelCasePropertyNamesContractResolver {
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    protected virtual void ModifyProperty(MemberInfo member, JsonProperty property);
}
public class Abp.Json.AbpContractResolver : DefaultContractResolver {
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    protected virtual void ModifyProperty(MemberInfo member, JsonProperty property);
}
public class Abp.Json.AbpDateTimeConverter : DateTimeConverterBase {
    private static string DefaultDateTimeFormat;
    private DateTimeStyles _dateTimeStyles;
    private CultureInfo _culture;
    [CompilerGeneratedAttribute]
private List`1<string> <InputDateTimeFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDateTimeFormat>k__BackingField;
    protected List`1<string> InputDateTimeFormats { get; protected set; }
    protected string OutputDateTimeFormat { get; protected set; }
    public AbpDateTimeConverter(List`1<string> inputDateTimeFormats, string outputDateTimeFormat);
    [CompilerGeneratedAttribute]
protected List`1<string> get_InputDateTimeFormats();
    [CompilerGeneratedAttribute]
protected void set_InputDateTimeFormats(List`1<string> value);
    [CompilerGeneratedAttribute]
protected string get_OutputDateTimeFormat();
    [CompilerGeneratedAttribute]
protected void set_OutputDateTimeFormat(string value);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    internal static bool ShouldNormalize(MemberInfo member, JsonProperty property);
}
[ExtensionAttribute]
public static class Abp.Json.JsonExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <UseNewtonsoft>k__BackingField;
    private static AbpCamelCasePropertyNamesContractResolver SharedAbpCamelCasePropertyNamesContractResolver;
    private static AbpContractResolver SharedAbpContractResolver;
    private static ConcurrentDictionary`2<object, JsonSerializerOptions> JsonSerializerOptionsCache;
    public static bool UseNewtonsoft { get; public set; }
    private static JsonExtensions();
    [CompilerGeneratedAttribute]
public static bool get_UseNewtonsoft();
    [CompilerGeneratedAttribute]
public static void set_UseNewtonsoft(bool value);
    [ExtensionAttribute]
public static string ToJsonString(object obj, bool camelCase, bool indented);
    [ExtensionAttribute]
private static string ToJsonStringWithNewtonsoft(object obj, bool camelCase, bool indented);
    [ExtensionAttribute]
private static string ToJsonStringWithSystemTextJson(object obj, bool camelCase, bool indented);
    public static JsonSerializerOptions CreateJsonSerializerOptions(bool camelCase, bool indented);
    [ExtensionAttribute]
public static string ToJsonString(object obj, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static string ToJsonString(object obj, JsonSerializerOptions options);
    [ExtensionAttribute]
public static T FromJsonString(string value);
    [ExtensionAttribute]
public static T FromJsonString(string value, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static T FromJsonString(string value, JsonSerializerOptions options);
    [ExtensionAttribute]
public static object FromJsonString(string value, Type type, JsonSerializerSettings settings);
    [ExtensionAttribute]
public static object FromJsonString(string value, Type type, JsonSerializerOptions options);
}
public static class Abp.Json.JsonSerializationHelper : object {
    private static char TypeSeperator;
    public static string SerializeWithType(object obj);
    public static string SerializeWithType(object obj, Type type);
    public static T DeserializeWithType(string serializedObj);
    public static object DeserializeWithType(string serializedObj);
}
public class Abp.Json.SystemTextJson.AbpDateTimeConverter : JsonConverter`1<DateTime> {
    [CompilerGeneratedAttribute]
private List`1<string> <InputDateTimeFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDateTimeFormat>k__BackingField;
    protected List`1<string> InputDateTimeFormats { get; protected set; }
    protected string OutputDateTimeFormat { get; protected set; }
    public AbpDateTimeConverter(List`1<string> inputDateTimeFormats, string outputDateTimeFormat);
    [CompilerGeneratedAttribute]
protected List`1<string> get_InputDateTimeFormats();
    [CompilerGeneratedAttribute]
protected void set_InputDateTimeFormats(List`1<string> value);
    [CompilerGeneratedAttribute]
protected string get_OutputDateTimeFormat();
    [CompilerGeneratedAttribute]
protected void set_OutputDateTimeFormat(string value);
    public virtual DateTime Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpDateTimeConverterModifier : object {
    private List`1<string> _inputDateTimeFormats;
    private string _outputDateTimeFormat;
    public AbpDateTimeConverterModifier(List`1<string> inputDateTimeFormats, string outputDateTimeFormat);
    public Action`1<JsonTypeInfo> CreateModifyAction();
    private void Modify(JsonTypeInfo jsonTypeInfo);
}
public class Abp.Json.SystemTextJson.AbpDateTimeJsonTypeInfoResolver : DefaultJsonTypeInfoResolver {
    public AbpDateTimeJsonTypeInfoResolver(List`1<string> inputDateTimeFormats, string outputDateTimeFormat);
}
public class Abp.Json.SystemTextJson.AbpJsonConverterForType : JsonConverter`1<Type> {
    public virtual Type Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Type value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpNullableDateTimeConverter : JsonConverter`1<Nullable`1<DateTime>> {
    [CompilerGeneratedAttribute]
private List`1<string> <InputDateTimeFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDateTimeFormat>k__BackingField;
    protected List`1<string> InputDateTimeFormats { get; protected set; }
    protected string OutputDateTimeFormat { get; protected set; }
    public AbpNullableDateTimeConverter(List`1<string> inputDateTimeFormats, string outputDateTimeFormat);
    [CompilerGeneratedAttribute]
protected List`1<string> get_InputDateTimeFormats();
    [CompilerGeneratedAttribute]
protected void set_InputDateTimeFormats(List`1<string> value);
    [CompilerGeneratedAttribute]
protected string get_OutputDateTimeFormat();
    [CompilerGeneratedAttribute]
protected void set_OutputDateTimeFormat(string value);
    public virtual Nullable`1<DateTime> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<DateTime> value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpNullableFromEmptyStringConverter`1 : JsonConverter`1<TNullableType> {
    private JsonSerializerOptions _readJsonSerializerOptions;
    private JsonSerializerOptions _writeJsonSerializerOptions;
    public virtual TNullableType Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, TNullableType value, JsonSerializerOptions options);
    [CompilerGeneratedAttribute]
private bool <Read>b__2_0(JsonConverter x);
    [CompilerGeneratedAttribute]
private bool <Write>b__3_0(JsonConverter x);
}
public class Abp.Json.SystemTextJson.AbpNullableFromEmptyStringConverterFactory : JsonConverterFactory {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpNullableStringToGuidConverter : JsonConverter`1<Nullable`1<Guid>> {
    public virtual Nullable`1<Guid> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<Guid> value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpStringToBooleanConverter : JsonConverter`1<bool> {
    public virtual bool Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, bool value, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpStringToEnumConverter`1 : JsonConverter`1<T> {
    private JsonStringEnumConverter _innerJsonStringEnumConverter;
    private JsonSerializerOptions _readJsonSerializerOptions;
    private JsonSerializerOptions _writeJsonSerializerOptions;
    public AbpStringToEnumConverter`1(JsonNamingPolicy namingPolicy, bool allowIntegerValues);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    public virtual T ReadAsPropertyName(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void WriteAsPropertyName(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    [CompilerGeneratedAttribute]
private bool <Read>b__6_0(JsonConverter x);
    [CompilerGeneratedAttribute]
private bool <Write>b__7_0(JsonConverter x);
}
public class Abp.Json.SystemTextJson.AbpStringToEnumFactory : JsonConverterFactory {
    private JsonNamingPolicy _namingPolicy;
    private bool _allowIntegerValues;
    public AbpStringToEnumFactory(JsonNamingPolicy namingPolicy, bool allowIntegerValues);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
public class Abp.Json.SystemTextJson.AbpStringToGuidConverter : JsonConverter`1<Guid> {
    public virtual Guid Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Guid value, JsonSerializerOptions options);
}
public static class Abp.Json.SystemTextJson.JsonSerializerOptionsHelper : object {
    public static JsonSerializerOptions Create(JsonSerializerOptions baseOptions, JsonConverter removeConverter, JsonConverter[] addConverters);
    public static JsonSerializerOptions Create(JsonSerializerOptions baseOptions, Func`2<JsonConverter, bool> removeConverterPredicate, JsonConverter[] addConverters);
}
public class Abp.Json.SystemTextJson.ObjectToInferredTypesConverter : JsonConverter`1<object> {
    public virtual object Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, object objectToWrite, JsonSerializerOptions options);
}
internal static class Abp.Linq.Expressions.ExpressionCombiner : object {
    public static Expression`1<Func`2<T, bool>> Combine(Expression`1<Func`2<T, bool>> expression1, Expression`1<Func`2<T, bool>> expression2);
}
public class Abp.Linq.Expressions.ExpressionStarter`1 : object {
    private Expression`1<Func`2<T, bool>> _predicate;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, bool>> <DefaultExpression>k__BackingField;
    private Expression`1<Func`2<T, bool>> Predicate { get; }
    public bool IsStarted { get; }
    public bool UseDefaultExpression { get; }
    public Expression`1<Func`2<T, bool>> DefaultExpression { get; public set; }
    public Expression Body { get; }
    public ExpressionType NodeType { get; }
    public ReadOnlyCollection`1<ParameterExpression> Parameters { get; }
    public Type Type { get; }
    public string Name { get; }
    public Type ReturnType { get; }
    public bool TailCall { get; }
    public bool CanReduce { get; }
    public ExpressionStarter`1(bool defaultExpression);
    public ExpressionStarter`1(Expression`1<Func`2<T, bool>> exp);
    private Expression`1<Func`2<T, bool>> get_Predicate();
    public bool get_IsStarted();
    public bool get_UseDefaultExpression();
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, bool>> get_DefaultExpression();
    [CompilerGeneratedAttribute]
public void set_DefaultExpression(Expression`1<Func`2<T, bool>> value);
    public Expression`1<Func`2<T, bool>> Start(Expression`1<Func`2<T, bool>> exp);
    public Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr2);
    public Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr2);
    public virtual string ToString();
    public static Expression`1<Func`2<T, bool>> op_Implicit(ExpressionStarter`1<T> right);
    public static Func`2<T, bool> op_Implicit(ExpressionStarter`1<T> right);
    public static ExpressionStarter`1<T> op_Implicit(Expression`1<Func`2<T, bool>> right);
    public Func`2<T, bool> Compile();
    public Expression get_Body();
    public ExpressionType get_NodeType();
    public ReadOnlyCollection`1<ParameterExpression> get_Parameters();
    public Type get_Type();
    public string get_Name();
    public Type get_ReturnType();
    public bool get_TailCall();
    public virtual bool get_CanReduce();
}
[ExtensionAttribute]
public static class Abp.Linq.Expressions.PredicateBuilder : object {
    public static ExpressionStarter`1<T> New(Expression`1<Func`2<T, bool>> expr);
    public static ExpressionStarter`1<T> New(bool defaultExpression);
    [ObsoleteAttribute("Use PredicateBuilder.New() instead.")]
public static Expression`1<Func`2<T, bool>> True();
    [ObsoleteAttribute("Use PredicateBuilder.New() instead.")]
public static Expression`1<Func`2<T, bool>> False();
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Extend(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second, PredicateOperator operator);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Extend(ExpressionStarter`1<T> first, Expression`1<Func`2<T, bool>> second, PredicateOperator operator);
}
public enum Abp.Linq.Expressions.PredicateOperator : Enum {
    public int value__;
    public static PredicateOperator Or;
    public static PredicateOperator And;
}
[ExtensionAttribute]
public static class Abp.Linq.Extensions.QueryableExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> PageBy(IQueryable`1<T> query, int skipCount, int maxResultCount);
    [ExtensionAttribute]
public static IQueryable`1<T> PageBy(IQueryable`1<T> query, IPagedResultRequest pagedResultRequest);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereIf(IQueryable`1<T> query, bool condition, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereIf(IQueryable`1<T> query, bool condition, Expression`1<Func`3<T, int, bool>> predicate);
}
public interface Abp.Linq.IAsyncQueryableExecuter {
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
}
public class Abp.Linq.NullAsyncQueryableExecuter : object {
    [CompilerGeneratedAttribute]
private static NullAsyncQueryableExecuter <Instance>k__BackingField;
    public static NullAsyncQueryableExecuter Instance { get; }
    private static NullAsyncQueryableExecuter();
    [CompilerGeneratedAttribute]
public static NullAsyncQueryableExecuter get_Instance();
    public sealed virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
}
public class Abp.Localization.AbpDisplayNameAttribute : DisplayNameAttribute {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string DisplayName { get; }
    public string SourceName { get; public set; }
    public string Key { get; public set; }
    public AbpDisplayNameAttribute(string sourceName, string key);
    public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
}
public static class Abp.Localization.CultureInfoHelper : object {
    public static IDisposable Use(string culture, string uiCulture);
    public static IDisposable Use(CultureInfo culture, CultureInfo uiCulture);
}
public class Abp.Localization.DefaultLanguageProvider : object {
    private ILocalizationConfiguration _configuration;
    public DefaultLanguageProvider(ILocalizationConfiguration configuration);
    public sealed virtual IReadOnlyList`1<LanguageInfo> GetLanguages();
    public sealed virtual IReadOnlyList`1<LanguageInfo> GetActiveLanguages();
}
public class Abp.Localization.Dictionaries.DictionaryBasedLocalizationSource : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationDictionaryProvider <DictionaryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationConfiguration <LocalizationConfiguration>k__BackingField;
    private ILogger _logger;
    public string Name { get; }
    public ILocalizationDictionaryProvider DictionaryProvider { get; }
    protected ILocalizationConfiguration LocalizationConfiguration { get; private set; }
    public DictionaryBasedLocalizationSource(string name, ILocalizationDictionaryProvider dictionaryProvider);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalizationDictionaryProvider get_DictionaryProvider();
    [CompilerGeneratedAttribute]
protected ILocalizationConfiguration get_LocalizationConfiguration();
    [CompilerGeneratedAttribute]
private void set_LocalizationConfiguration(ILocalizationConfiguration value);
    public virtual void Initialize(ILocalizationConfiguration configuration, IIocResolver iocResolver);
    public sealed virtual string FindKeyOrNull(string value, CultureInfo culture, bool tryDefaults);
    public sealed virtual string GetString(string name);
    public sealed virtual string GetString(string name, CultureInfo culture);
    public sealed virtual string GetStringOrNull(string name, bool tryDefaults);
    public sealed virtual string GetStringOrNull(string name, CultureInfo culture, bool tryDefaults);
    public sealed virtual List`1<string> GetStrings(List`1<string> names);
    public sealed virtual List`1<string> GetStrings(List`1<string> names, CultureInfo culture);
    public sealed virtual List`1<string> GetStringsOrNull(List`1<string> names, bool tryDefaults);
    public sealed virtual List`1<string> GetStringsOrNull(List`1<string> names, CultureInfo culture, bool tryDefaults);
    private List`1<NameValue> GetStringsInternal(List`1<string> names, CultureInfo culture, bool includeDefaults);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings(bool includeDefaults);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings(CultureInfo culture, bool includeDefaults);
    public virtual void Extend(ILocalizationDictionary dictionary);
    protected virtual string ReturnGivenNameOrThrowException(string name, CultureInfo culture);
    protected virtual List`1<string> ReturnGivenNamesOrThrowException(List`1<string> names, CultureInfo culture);
    private static string GetBaseCultureName(string cultureName);
}
public interface Abp.Localization.Dictionaries.IDictionaryBasedLocalizationSource {
    public ILocalizationDictionaryProvider DictionaryProvider { get; }
    public abstract virtual ILocalizationDictionaryProvider get_DictionaryProvider();
    public abstract virtual void Extend(ILocalizationDictionary dictionary);
}
[DefaultMemberAttribute("Item")]
public interface Abp.Localization.Dictionaries.ILocalizationDictionary {
    public CultureInfo CultureInfo { get; }
    public string Item { get; public set; }
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual string get_Item(string name);
    public abstract virtual void set_Item(string name, string value);
    public abstract virtual string TryGetKey(string value);
    public abstract virtual LocalizedString GetOrNull(string name);
    public abstract virtual IReadOnlyList`1<LocalizedString> GetStringsOrNull(List`1<string> names);
    public abstract virtual IReadOnlyList`1<LocalizedString> GetAllStrings();
}
public interface Abp.Localization.Dictionaries.ILocalizationDictionaryProvider {
    public ILocalizationDictionary DefaultDictionary { get; }
    public IDictionary`2<string, ILocalizationDictionary> Dictionaries { get; }
    public abstract virtual ILocalizationDictionary get_DefaultDictionary();
    public abstract virtual IDictionary`2<string, ILocalizationDictionary> get_Dictionaries();
    public abstract virtual void Initialize(string sourceName);
    public abstract virtual void Extend(ILocalizationDictionary dictionary);
}
public class Abp.Localization.Dictionaries.Json.JsonEmbeddedFileLocalizationDictionaryProvider : LocalizationDictionaryProviderBase {
    private Assembly _assembly;
    private string _rootNamespace;
    public JsonEmbeddedFileLocalizationDictionaryProvider(Assembly assembly, string rootNamespace);
    protected virtual void InitializeDictionaries();
    protected virtual JsonLocalizationDictionary CreateJsonLocalizationDictionary(string jsonString);
}
public class Abp.Localization.Dictionaries.Json.JsonFileLocalizationDictionaryProvider : LocalizationDictionaryProviderBase {
    private string _directoryPath;
    public JsonFileLocalizationDictionaryProvider(string directoryPath);
    protected virtual void InitializeDictionaries();
    protected virtual JsonLocalizationDictionary CreateJsonLocalizationDictionary(string fileName);
}
public class Abp.Localization.Dictionaries.Json.JsonLocalizationDictionary : LocalizationDictionary {
    private JsonLocalizationDictionary(CultureInfo cultureInfo);
    public static JsonLocalizationDictionary BuildFromFile(string filePath);
    public static JsonLocalizationDictionary BuildFromJsonString(string jsonString);
}
public class Abp.Localization.Dictionaries.Json.JsonLocalizationFile : object {
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Texts>k__BackingField;
    public string Culture { get; public set; }
    public Dictionary`2<string, string> Texts { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Texts();
    [CompilerGeneratedAttribute]
private void set_Texts(Dictionary`2<string, string> value);
}
[DefaultMemberAttribute("Item")]
public class Abp.Localization.Dictionaries.LocalizationDictionary : object {
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    private Dictionary`2<string, LocalizedString> _dictionary;
    public CultureInfo CultureInfo { get; private set; }
    public string Item { get; public set; }
    public LocalizationDictionary(CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
private void set_CultureInfo(CultureInfo value);
    public virtual string get_Item(string name);
    public virtual void set_Item(string name, string value);
    public virtual string TryGetKey(string value);
    public virtual LocalizedString GetOrNull(string name);
    public virtual IReadOnlyList`1<LocalizedString> GetStringsOrNull(List`1<string> names);
    public virtual IReadOnlyList`1<LocalizedString> GetAllStrings();
    public virtual IEnumerator`1<LocalizedString> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected bool Contains(string name);
    [CompilerGeneratedAttribute]
private LocalizedString <GetStringsOrNull>b__11_0(string name);
}
public abstract class Abp.Localization.Dictionaries.LocalizationDictionaryProviderBase : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationDictionary <DefaultDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ILocalizationDictionary> <Dictionaries>k__BackingField;
    public string SourceName { get; private set; }
    public ILocalizationDictionary DefaultDictionary { get; protected set; }
    public IDictionary`2<string, ILocalizationDictionary> Dictionaries { get; private set; }
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
private void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalizationDictionary get_DefaultDictionary();
    [CompilerGeneratedAttribute]
protected void set_DefaultDictionary(ILocalizationDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, ILocalizationDictionary> get_Dictionaries();
    [CompilerGeneratedAttribute]
private void set_Dictionaries(IDictionary`2<string, ILocalizationDictionary> value);
    public sealed virtual void Initialize(string sourceName);
    public sealed virtual void Extend(ILocalizationDictionary dictionary);
    protected virtual void InitializeDictionaries();
    protected virtual void InitializeDictionary(TDictionary dictionary, bool isDefault);
}
internal static class Abp.Localization.Dictionaries.Utf8Helper : object {
    public static string ReadStringFromStream(Stream stream);
    private static bool HasBom(Byte[] bytes);
}
public class Abp.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider : LocalizationDictionaryProviderBase {
    private Assembly _assembly;
    private string _rootNamespace;
    public XmlEmbeddedFileLocalizationDictionaryProvider(Assembly assembly, string rootNamespace);
    protected virtual void InitializeDictionaries();
    protected virtual XmlLocalizationDictionary CreateXmlLocalizationDictionary(string xmlString);
}
public class Abp.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider : LocalizationDictionaryProviderBase {
    private string _directoryPath;
    public XmlFileLocalizationDictionaryProvider(string directoryPath);
    protected virtual void InitializeDictionaries();
    protected virtual XmlLocalizationDictionary CreateXmlLocalizationDictionary(string fileName);
}
public class Abp.Localization.Dictionaries.Xml.XmlLocalizationDictionary : LocalizationDictionary {
    private XmlLocalizationDictionary(CultureInfo cultureInfo);
    public static XmlLocalizationDictionary BuildFomFile(string filePath);
    public static XmlLocalizationDictionary BuildFomXmlString(string xmlString);
}
public class Abp.Localization.FixedLocalizableString : object {
    [CompilerGeneratedAttribute]
private string <FixedString>k__BackingField;
    public string FixedString { get; private set; }
    public FixedLocalizableString(string fixedString);
    [CompilerGeneratedAttribute]
public virtual string get_FixedString();
    [CompilerGeneratedAttribute]
private void set_FixedString(string value);
    public sealed virtual string Localize(ILocalizationContext context);
    public sealed virtual string Localize(ILocalizationContext context, CultureInfo culture);
    public virtual string ToString();
}
internal static class Abp.Localization.GlobalizationHelper : object {
    public static bool IsValidCultureCode(string cultureCode);
}
public interface Abp.Localization.ILanguageManager {
    public LanguageInfo CurrentLanguage { get; }
    public abstract virtual LanguageInfo get_CurrentLanguage();
    public abstract virtual IReadOnlyList`1<LanguageInfo> GetLanguages();
    public abstract virtual IReadOnlyList`1<LanguageInfo> GetActiveLanguages();
}
public interface Abp.Localization.ILanguageProvider {
    public abstract virtual IReadOnlyList`1<LanguageInfo> GetLanguages();
    public abstract virtual IReadOnlyList`1<LanguageInfo> GetActiveLanguages();
}
public interface Abp.Localization.ILocalizableString {
    public abstract virtual string Localize(ILocalizationContext context);
    public abstract virtual string Localize(ILocalizationContext context, CultureInfo culture);
}
public interface Abp.Localization.ILocalizationContext {
    public ILocalizationManager LocalizationManager { get; }
    public abstract virtual ILocalizationManager get_LocalizationManager();
}
public interface Abp.Localization.ILocalizationManager {
    public abstract virtual ILocalizationSource GetSource(string name);
    public abstract virtual IReadOnlyList`1<ILocalizationSource> GetAllSources();
}
public class Abp.Localization.LanguageInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Icon { get; public set; }
    public bool IsDefault { get; public set; }
    public bool IsDisabled { get; public set; }
    public bool IsRightToLeft { get; }
    public LanguageInfo(string name, string displayName, string icon, bool isDefault, bool isDisabled);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    public bool get_IsRightToLeft();
}
public class Abp.Localization.LanguageManager : object {
    private ILanguageProvider _languageProvider;
    public LanguageInfo CurrentLanguage { get; }
    public LanguageManager(ILanguageProvider languageProvider);
    public sealed virtual LanguageInfo get_CurrentLanguage();
    public sealed virtual IReadOnlyList`1<LanguageInfo> GetLanguages();
    public sealed virtual IReadOnlyList`1<LanguageInfo> GetActiveLanguages();
    private LanguageInfo GetCurrentLanguage();
}
public class Abp.Localization.LocalizableString : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string SourceName { get; private set; }
    public string Name { get; private set; }
    public LocalizableString(string name, string sourceName);
    [CompilerGeneratedAttribute]
public virtual string get_SourceName();
    [CompilerGeneratedAttribute]
private void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual string Localize(ILocalizationContext context);
    public sealed virtual string Localize(ILocalizationContext context, CultureInfo culture);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Abp.Localization.LocalizableStringExtensions : object {
    [ExtensionAttribute]
public static string Localize(ILocalizableString localizableString, ILocalizationManager localizationManager);
    [ExtensionAttribute]
public static string Localize(ILocalizableString localizableString, ILocalizationManager localizationManager, CultureInfo culture);
}
public class Abp.Localization.LocalizableStringToStringJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Abp.Localization.LocalizationContext : object {
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    public ILocalizationManager LocalizationManager { get; }
    public LocalizationContext(ILocalizationManager localizationManager);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalizationManager get_LocalizationManager();
}
public static class Abp.Localization.LocalizationHelper : object {
    private static Lazy`1<ILocalizationManager> LocalizationManager;
    public static ILocalizationManager Manager { get; }
    private static LocalizationHelper();
    public static ILocalizationManager get_Manager();
    public static ILocalizationSource GetSource(string name);
    public static string GetString(string sourceName, string name);
    public static string GetString(string sourceName, string name, CultureInfo culture);
}
internal class Abp.Localization.LocalizationManager : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private ILanguageManager _languageManager;
    private ILocalizationConfiguration _configuration;
    private IIocResolver _iocResolver;
    private IDictionary`2<string, ILocalizationSource> _sources;
    public ILogger Logger { get; public set; }
    public LocalizationManager(ILanguageManager languageManager, ILocalizationConfiguration configuration, IIocResolver iocResolver);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public void Initialize();
    private void InitializeSources();
    public sealed virtual ILocalizationSource GetSource(string name);
    public sealed virtual IReadOnlyList`1<ILocalizationSource> GetAllSources();
}
[ExtensionAttribute]
public static class Abp.Localization.LocalizationManagerExtensions : object {
    [ExtensionAttribute]
public static string GetString(ILocalizationManager localizationManager, LocalizableString localizableString);
    [ExtensionAttribute]
public static string GetString(ILocalizationManager localizationManager, LocalizableString localizableString, CultureInfo culture);
    [ExtensionAttribute]
public static string GetString(ILocalizationManager localizationManager, string sourceName, string name);
    [ExtensionAttribute]
public static string GetString(ILocalizationManager localizationManager, string sourceName, string name, CultureInfo culture);
}
public static class Abp.Localization.LocalizationSettingNames : object {
    public static string DefaultLanguage;
}
public class Abp.Localization.LocalizationSettingProvider : SettingProvider {
    public virtual IEnumerable`1<SettingDefinition> GetSettingDefinitions(SettingDefinitionProviderContext context);
    private static LocalizableString L(string name);
}
public static class Abp.Localization.LocalizationSourceHelper : object {
    public static string ReturnGivenNameOrThrowException(ILocalizationConfiguration configuration, string sourceName, string name, CultureInfo culture, ILogger logger);
    public static List`1<string> ReturnGivenNamesOrThrowException(ILocalizationConfiguration configuration, string sourceName, List`1<string> names, CultureInfo culture, ILogger logger);
}
public class Abp.Localization.LocalizedString : object {
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public CultureInfo CultureInfo { get; internal set; }
    public string Name { get; private set; }
    public string Value { get; private set; }
    public LocalizedString(string name, string value, CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
internal void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class Abp.Localization.NullLocalizationManager : object {
    [CompilerGeneratedAttribute]
private static NullLocalizationManager <Instance>k__BackingField;
    private IReadOnlyList`1<LanguageInfo> _emptyLanguageArray;
    private IReadOnlyList`1<ILocalizationSource> _emptyLocalizationSourceArray;
    public static NullLocalizationManager Instance { get; }
    public LanguageInfo CurrentLanguage { get; }
    private static NullLocalizationManager();
    [CompilerGeneratedAttribute]
public static NullLocalizationManager get_Instance();
    public LanguageInfo get_CurrentLanguage();
    public IReadOnlyList`1<LanguageInfo> GetAllLanguages();
    public sealed virtual ILocalizationSource GetSource(string name);
    public sealed virtual IReadOnlyList`1<ILocalizationSource> GetAllSources();
}
public interface Abp.Localization.Sources.ILocalizationSource {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Initialize(ILocalizationConfiguration configuration, IIocResolver iocResolver);
    public abstract virtual string FindKeyOrNull(string value, CultureInfo culture, bool tryDefaults);
    public abstract virtual string GetString(string name);
    public abstract virtual string GetString(string name, CultureInfo culture);
    public abstract virtual string GetStringOrNull(string name, bool tryDefaults);
    public abstract virtual string GetStringOrNull(string name, CultureInfo culture, bool tryDefaults);
    public abstract virtual List`1<string> GetStrings(List`1<string> names);
    public abstract virtual List`1<string> GetStrings(List`1<string> names, CultureInfo culture);
    public abstract virtual List`1<string> GetStringsOrNull(List`1<string> names, bool tryDefaults);
    public abstract virtual List`1<string> GetStringsOrNull(List`1<string> names, CultureInfo culture, bool tryDefaults);
    public abstract virtual IReadOnlyList`1<LocalizedString> GetAllStrings(bool includeDefaults);
    public abstract virtual IReadOnlyList`1<LocalizedString> GetAllStrings(CultureInfo culture, bool includeDefaults);
}
public class Abp.Localization.Sources.LocalizationSourceExtensionInfo : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationDictionaryProvider <DictionaryProvider>k__BackingField;
    public string SourceName { get; private set; }
    public ILocalizationDictionaryProvider DictionaryProvider { get; private set; }
    public LocalizationSourceExtensionInfo(string sourceName, ILocalizationDictionaryProvider dictionaryProvider);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
private void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public ILocalizationDictionaryProvider get_DictionaryProvider();
    [CompilerGeneratedAttribute]
private void set_DictionaryProvider(ILocalizationDictionaryProvider value);
}
[ExtensionAttribute]
public static class Abp.Localization.Sources.LocalizationSourceExtensions : object {
    [ExtensionAttribute]
public static string GetString(ILocalizationSource source, string name, Object[] args);
    [ExtensionAttribute]
public static string GetString(ILocalizationSource source, string name, CultureInfo culture, Object[] args);
}
internal class Abp.Localization.Sources.NullLocalizationSource : object {
    [CompilerGeneratedAttribute]
private static NullLocalizationSource <Instance>k__BackingField;
    private IReadOnlyList`1<LocalizedString> _emptyStringArray;
    public static NullLocalizationSource Instance { get; }
    public string Name { get; }
    private static NullLocalizationSource();
    [CompilerGeneratedAttribute]
public static NullLocalizationSource get_Instance();
    public sealed virtual string get_Name();
    public sealed virtual void Initialize(ILocalizationConfiguration configuration, IIocResolver iocResolver);
    public sealed virtual string FindKeyOrNull(string value, CultureInfo culture, bool tryDefaults);
    public sealed virtual string GetString(string name);
    public sealed virtual string GetString(string name, CultureInfo culture);
    public sealed virtual string GetStringOrNull(string name, bool tryDefaults);
    public sealed virtual string GetStringOrNull(string name, CultureInfo culture, bool tryDefaults);
    public sealed virtual List`1<string> GetStrings(List`1<string> names);
    public sealed virtual List`1<string> GetStrings(List`1<string> names, CultureInfo culture);
    public sealed virtual List`1<string> GetStringsOrNull(List`1<string> names, bool tryDefaults);
    public sealed virtual List`1<string> GetStringsOrNull(List`1<string> names, CultureInfo culture, bool tryDefaults);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings(bool includeDefaults);
    public sealed virtual IReadOnlyList`1<LocalizedString> GetAllStrings(CultureInfo culture, bool includeDefaults);
}
public class Abp.Localization.Sources.Resource.ResourceFileLocalizationSource : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceManager <ResourceManager>k__BackingField;
    private ILogger _logger;
    private ILocalizationConfiguration _configuration;
    public string Name { get; }
    public ResourceManager ResourceManager { get; }
    public ResourceFileLocalizationSource(string name, ResourceManager resourceManager);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public ResourceManager get_ResourceManager();
    public virtual void Initialize(ILocalizationConfiguration configuration, IIocResolver iocResolver);
    public sealed virtual string FindKeyOrNull(string value, CultureInfo culture, bool tryDefaults);
    public virtual string GetString(string name);
    public virtual string GetString(string name, CultureInfo culture);
    public sealed virtual string GetStringOrNull(string name, bool tryDefaults);
    public sealed virtual string GetStringOrNull(string name, CultureInfo culture, bool tryDefaults);
    public sealed virtual List`1<string> GetStrings(List`1<string> names);
    public sealed virtual List`1<string> GetStrings(List`1<string> names, CultureInfo culture);
    public sealed virtual List`1<string> GetStringsOrNull(List`1<string> names, bool tryDefaults);
    public sealed virtual List`1<string> GetStringsOrNull(List`1<string> names, CultureInfo culture, bool tryDefaults);
    private List`1<NameValue> GetStringsInternal(List`1<string> names, CultureInfo culture, bool tryDefaults);
    public virtual IReadOnlyList`1<LocalizedString> GetAllStrings(bool includeDefaults);
    public virtual IReadOnlyList`1<LocalizedString> GetAllStrings(CultureInfo culture, bool includeDefaults);
    protected virtual string ReturnGivenNameOrThrowException(string name, CultureInfo culture);
    protected virtual List`1<string> ReturnGivenNamesOrThrowException(List`1<string> names, CultureInfo culture);
}
public interface Abp.Logging.IHasLogSeverity {
    public LogSeverity Severity { get; public set; }
    public abstract virtual LogSeverity get_Severity();
    public abstract virtual void set_Severity(LogSeverity value);
}
[ExtensionAttribute]
public static class Abp.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static void Log(ILogger logger, LogSeverity severity, string message);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogSeverity severity, string message, Exception exception);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogSeverity severity, Func`1<string> messageFactory);
}
public static class Abp.Logging.LogHelper : object {
    [CompilerGeneratedAttribute]
private static ILogger <Logger>k__BackingField;
    public static ILogger Logger { get; private set; }
    private static LogHelper();
    [CompilerGeneratedAttribute]
public static ILogger get_Logger();
    [CompilerGeneratedAttribute]
private static void set_Logger(ILogger value);
    public static void LogException(Exception ex);
    public static void LogException(ILogger logger, Exception ex);
    private static void LogValidationErrors(ILogger logger, Exception exception);
}
public enum Abp.Logging.LogSeverity : Enum {
    public int value__;
    public static LogSeverity Debug;
    public static LogSeverity Info;
    public static LogSeverity Warn;
    public static LogSeverity Error;
    public static LogSeverity Fatal;
}
public interface Abp.MimeTypes.IMimeTypeMap {
    public abstract virtual bool TryGetMimeType(string str, String& mimeType);
    public abstract virtual string GetMimeType(string str, bool throwErrorIfNotFound);
    public abstract virtual bool TryGetExtension(string mimeType, String& extension);
    public abstract virtual string GetExtension(string mimeType, bool throwErrorIfNotFound);
    public abstract virtual void AddMimeType(string mimeType, string extension);
    public abstract virtual void RemoveMimeType(string mimeType);
    public abstract virtual void AddExtension(string extension, string mimeType);
    public abstract virtual void RemoveExtension(string extension);
}
public class Abp.MimeTypes.MimeTypeMap : object {
    protected static string Dot;
    protected static string QuestionMark;
    protected Lazy`1<IDictionary`2<string, string>> MappingDictionary;
    protected virtual Dictionary`2<string, string> BuildMappings();
    public virtual bool TryGetMimeType(string str, String& mimeType);
    public virtual string GetMimeType(string str, bool throwErrorIfNotFound);
    public virtual bool TryGetExtension(string mimeType, String& extension);
    public virtual string GetExtension(string mimeType, bool throwErrorIfNotFound);
    public sealed virtual void AddMimeType(string mimeType, string extension);
    public sealed virtual void RemoveMimeType(string mimeType);
    public sealed virtual void AddExtension(string extension, string mimeType);
    public sealed virtual void RemoveExtension(string extension);
}
public abstract class Abp.Modules.AbpModule : object {
    [CompilerGeneratedAttribute]
private IIocManager <IocManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpStartupConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected internal IIocManager IocManager { get; internal set; }
    protected internal IAbpStartupConfiguration Configuration { get; internal set; }
    public ILogger Logger { get; public set; }
    [CompilerGeneratedAttribute]
protected internal IIocManager get_IocManager();
    [CompilerGeneratedAttribute]
internal void set_IocManager(IIocManager value);
    [CompilerGeneratedAttribute]
protected internal IAbpStartupConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
internal void set_Configuration(IAbpStartupConfiguration value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public virtual void PreInitialize();
    public virtual void Initialize();
    public virtual void PostInitialize();
    public virtual void Shutdown();
    public virtual Assembly[] GetAdditionalAssemblies();
    public static bool IsAbpModule(Type type);
    public static List`1<Type> FindDependedModuleTypes(Type moduleType);
    public static List`1<Type> FindDependedModuleTypesRecursivelyIncludingGivenModule(Type moduleType);
    private static void AddModuleAndDependenciesRecursively(List`1<Type> modules, Type module);
}
internal class Abp.Modules.AbpModuleCollection : List`1<AbpModuleInfo> {
    [CompilerGeneratedAttribute]
private Type <StartupModuleType>k__BackingField;
    public Type StartupModuleType { get; }
    public AbpModuleCollection(Type startupModuleType);
    [CompilerGeneratedAttribute]
public Type get_StartupModuleType();
    public TModule GetModule();
    public List`1<AbpModuleInfo> GetSortedModuleListByDependency();
    public static void EnsureKernelModuleToBeFirst(List`1<AbpModuleInfo> modules);
    public static void EnsureStartupModuleToBeLast(List`1<AbpModuleInfo> modules, Type startupModuleType);
    public void EnsureKernelModuleToBeFirst();
    public void EnsureStartupModuleToBeLast();
}
public class Abp.Modules.AbpModuleInfo : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpModule <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoadedAsPlugIn>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AbpModuleInfo> <Dependencies>k__BackingField;
    public Assembly Assembly { get; }
    public Type Type { get; }
    public AbpModule Instance { get; }
    public bool IsLoadedAsPlugIn { get; }
    public List`1<AbpModuleInfo> Dependencies { get; }
    public AbpModuleInfo(Type type, AbpModule instance, bool isLoadedAsPlugIn);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public AbpModule get_Instance();
    [CompilerGeneratedAttribute]
public bool get_IsLoadedAsPlugIn();
    [CompilerGeneratedAttribute]
public List`1<AbpModuleInfo> get_Dependencies();
    public virtual string ToString();
}
public class Abp.Modules.AbpModuleManager : object {
    [CompilerGeneratedAttribute]
private AbpModuleInfo <StartupModule>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private AbpModuleCollection _modules;
    private IIocManager _iocManager;
    private IAbpPlugInManager _abpPlugInManager;
    public AbpModuleInfo StartupModule { get; private set; }
    public IReadOnlyList`1<AbpModuleInfo> Modules { get; }
    public ILogger Logger { get; public set; }
    public AbpModuleManager(IIocManager iocManager, IAbpPlugInManager abpPlugInManager);
    [CompilerGeneratedAttribute]
public sealed virtual AbpModuleInfo get_StartupModule();
    [CompilerGeneratedAttribute]
private void set_StartupModule(AbpModuleInfo value);
    public sealed virtual IReadOnlyList`1<AbpModuleInfo> get_Modules();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public virtual void Initialize(Type startupModule);
    public virtual void StartModules();
    public virtual void ShutdownModules();
    private void LoadAllModules();
    private List`1<Type> FindAllModuleTypes(List`1& plugInModuleTypes);
    private void CreateModules(ICollection`1<Type> moduleTypes, List`1<Type> plugInModuleTypes);
    private void RegisterModules(ICollection`1<Type> moduleTypes);
    private void SetDependencies();
}
[AttributeUsageAttribute("4")]
public class Abp.Modules.DependsOnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <DependedModuleTypes>k__BackingField;
    public Type[] DependedModuleTypes { get; private set; }
    public DependsOnAttribute(Type[] dependedModuleTypes);
    [CompilerGeneratedAttribute]
public Type[] get_DependedModuleTypes();
    [CompilerGeneratedAttribute]
private void set_DependedModuleTypes(Type[] value);
}
public interface Abp.Modules.IAbpModuleManager {
    public AbpModuleInfo StartupModule { get; }
    public IReadOnlyList`1<AbpModuleInfo> Modules { get; }
    public abstract virtual AbpModuleInfo get_StartupModule();
    public abstract virtual IReadOnlyList`1<AbpModuleInfo> get_Modules();
    public abstract virtual void Initialize(Type startupModule);
    public abstract virtual void StartModules();
    public abstract virtual void ShutdownModules();
}
public interface Abp.MultiTenancy.ITenantResolveContributor {
    public abstract virtual Nullable`1<int> ResolveTenantId();
}
public interface Abp.MultiTenancy.ITenantResolver {
    public abstract virtual Nullable`1<int> ResolveTenantId();
    public abstract virtual Task`1<Nullable`1<int>> ResolveTenantIdAsync();
}
public interface Abp.MultiTenancy.ITenantResolverCache {
    public TenantResolverCacheItem Value { get; public set; }
    public abstract virtual TenantResolverCacheItem get_Value();
    public abstract virtual void set_Value(TenantResolverCacheItem value);
}
public interface Abp.MultiTenancy.ITenantStore {
    public abstract virtual TenantInfo Find(int tenantId);
    public abstract virtual TenantInfo Find(string tenancyName);
}
public static class Abp.MultiTenancy.MultiTenancyConsts : object {
    public static int DefaultTenantId;
}
[ExtensionAttribute]
public static class Abp.MultiTenancy.MultiTenancyExtensions : object {
    [ExtensionAttribute]
public static MultiTenancySides GetMultiTenancySide(IMayHaveTenant obj);
}
internal class Abp.MultiTenancy.MultiTenancyHelper : object {
    public static bool IsMultiTenantEntity(object entity);
    public static bool IsTenantEntity(object entity, Nullable`1<int> expectedTenantId);
    public static bool IsHostEntity(object entity);
}
[AttributeUsageAttribute("1220")]
public class Abp.MultiTenancy.MultiTenancySideAttribute : Attribute {
    [CompilerGeneratedAttribute]
private MultiTenancySides <Side>k__BackingField;
    public MultiTenancySides Side { get; public set; }
    public MultiTenancySideAttribute(MultiTenancySides side);
    [CompilerGeneratedAttribute]
public MultiTenancySides get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(MultiTenancySides value);
}
[FlagsAttribute]
public enum Abp.MultiTenancy.MultiTenancySides : Enum {
    public int value__;
    public static MultiTenancySides Tenant;
    public static MultiTenancySides Host;
}
public class Abp.MultiTenancy.NullTenantResolverCache : object {
    public TenantResolverCacheItem Value { get; public set; }
    public sealed virtual TenantResolverCacheItem get_Value();
    public sealed virtual void set_Value(TenantResolverCacheItem value);
}
public class Abp.MultiTenancy.NullTenantStore : object {
    public sealed virtual TenantInfo Find(int tenantId);
    public sealed virtual TenantInfo Find(string tenancyName);
}
public class Abp.MultiTenancy.TenantInfo : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenancyName>k__BackingField;
    public int Id { get; public set; }
    public string TenancyName { get; public set; }
    public TenantInfo(int id, string tenancyName);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_TenancyName();
    [CompilerGeneratedAttribute]
public void set_TenancyName(string value);
}
public class Abp.MultiTenancy.TenantResolver : object {
    private static string AmbientScopeContextKey;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IMultiTenancyConfig _multiTenancy;
    private IIocResolver _iocResolver;
    private ITenantStore _tenantStore;
    private ITenantResolverCache _cache;
    private IAmbientScopeProvider`1<bool> _ambientScopeProvider;
    public ILogger Logger { get; public set; }
    public TenantResolver(IMultiTenancyConfig multiTenancy, IIocResolver iocResolver, ITenantStore tenantStore, ITenantResolverCache cache, IAmbientScopeProvider`1<bool> ambientScopeProvider);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual Nullable`1<int> ResolveTenantId();
    public sealed virtual Task`1<Nullable`1<int>> ResolveTenantIdAsync();
    private Nullable`1<int> GetTenantIdFromContributors();
}
public class Abp.MultiTenancy.TenantResolverCacheItem : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    public Nullable`1<int> TenantId { get; }
    public TenantResolverCacheItem(Nullable`1<int> tenantId);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
}
public class Abp.NamedTypeSelector : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <Predicate>k__BackingField;
    public string Name { get; public set; }
    public Func`2<Type, bool> Predicate { get; public set; }
    public NamedTypeSelector(string name, Func`2<Type, bool> predicate);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<Type, bool> value);
}
[ExtensionAttribute]
public static class Abp.NamedTypeSelectorListExtensions : object {
    [ExtensionAttribute]
public static void Add(IList`1<NamedTypeSelector> list, string name, Type[] types);
}
public class Abp.NameValue : NameValue`1<string> {
    public NameValue(string name, string value);
}
public class Abp.NameValue`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public string Name { get; public set; }
    public T Value { get; public set; }
    public NameValue`1(string name, T value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
public abstract class Abp.Net.Mail.EmailSenderBase : object {
    [CompilerGeneratedAttribute]
private IEmailSenderConfiguration <Configuration>k__BackingField;
    public IEmailSenderConfiguration Configuration { get; }
    protected EmailSenderBase(IEmailSenderConfiguration configuration);
    [CompilerGeneratedAttribute]
public IEmailSenderConfiguration get_Configuration();
    [AsyncStateMachineAttribute("Abp.Net.Mail.EmailSenderBase/<SendAsync>d__4")]
public virtual Task SendAsync(string to, string subject, string body, bool isBodyHtml);
    public virtual void Send(string to, string subject, string body, bool isBodyHtml);
    [AsyncStateMachineAttribute("Abp.Net.Mail.EmailSenderBase/<SendAsync>d__6")]
public virtual Task SendAsync(string from, string to, string subject, string body, bool isBodyHtml);
    public virtual void Send(string from, string to, string subject, string body, bool isBodyHtml);
    [AsyncStateMachineAttribute("Abp.Net.Mail.EmailSenderBase/<SendAsync>d__8")]
public virtual Task SendAsync(MailMessage mail, bool normalize);
    public virtual void Send(MailMessage mail, bool normalize);
    protected abstract virtual Task SendEmailAsync(MailMessage mail);
    protected abstract virtual void SendEmail(MailMessage mail);
    protected virtual void NormalizeMail(MailMessage mail);
}
public abstract class Abp.Net.Mail.EmailSenderConfiguration : object {
    protected ISettingManager SettingManager;
    public string DefaultFromAddress { get; }
    public string DefaultFromDisplayName { get; }
    protected EmailSenderConfiguration(ISettingManager settingManager);
    public virtual string get_DefaultFromAddress();
    public virtual string get_DefaultFromDisplayName();
    protected string GetNotEmptySettingValue(string name);
}
public static class Abp.Net.Mail.EmailSettingNames : object {
    public static string DefaultFromAddress;
    public static string DefaultFromDisplayName;
}
internal class Abp.Net.Mail.EmailSettingProvider : SettingProvider {
    public virtual IEnumerable`1<SettingDefinition> GetSettingDefinitions(SettingDefinitionProviderContext context);
    private static LocalizableString L(string name);
}
public interface Abp.Net.Mail.IEmailSender {
    public abstract virtual Task SendAsync(string to, string subject, string body, bool isBodyHtml);
    public abstract virtual void Send(string to, string subject, string body, bool isBodyHtml);
    public abstract virtual Task SendAsync(string from, string to, string subject, string body, bool isBodyHtml);
    public abstract virtual void Send(string from, string to, string subject, string body, bool isBodyHtml);
    public abstract virtual void Send(MailMessage mail, bool normalize);
    public abstract virtual Task SendAsync(MailMessage mail, bool normalize);
}
public interface Abp.Net.Mail.IEmailSenderConfiguration {
    public string DefaultFromAddress { get; }
    public string DefaultFromDisplayName { get; }
    public abstract virtual string get_DefaultFromAddress();
    public abstract virtual string get_DefaultFromDisplayName();
}
public class Abp.Net.Mail.NullEmailSender : EmailSenderBase {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public ILogger Logger { get; public set; }
    public NullEmailSender(IEmailSenderConfiguration configuration);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    protected virtual Task SendEmailAsync(MailMessage mail);
    protected virtual void SendEmail(MailMessage mail);
    private void LogEmail(MailMessage mail);
}
public interface Abp.Net.Mail.Smtp.ISmtpEmailSender {
    public abstract virtual SmtpClient BuildClient();
}
public interface Abp.Net.Mail.Smtp.ISmtpEmailSenderConfiguration {
    public string Host { get; }
    public int Port { get; }
    public string UserName { get; }
    public string Password { get; }
    public string Domain { get; }
    public bool EnableSsl { get; }
    public bool UseDefaultCredentials { get; }
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual string get_UserName();
    public abstract virtual string get_Password();
    public abstract virtual string get_Domain();
    public abstract virtual bool get_EnableSsl();
    public abstract virtual bool get_UseDefaultCredentials();
}
public class Abp.Net.Mail.Smtp.SmtpEmailSender : EmailSenderBase {
    private ISmtpEmailSenderConfiguration _configuration;
    public SmtpEmailSender(ISmtpEmailSenderConfiguration configuration);
    public sealed virtual SmtpClient BuildClient();
    [AsyncStateMachineAttribute("Abp.Net.Mail.Smtp.SmtpEmailSender/<SendEmailAsync>d__3")]
protected virtual Task SendEmailAsync(MailMessage mail);
    protected virtual void SendEmail(MailMessage mail);
}
public class Abp.Net.Mail.Smtp.SmtpEmailSenderConfiguration : EmailSenderConfiguration {
    public string Host { get; }
    public int Port { get; }
    public string UserName { get; }
    public string Password { get; }
    public string Domain { get; }
    public bool EnableSsl { get; }
    public bool UseDefaultCredentials { get; }
    public SmtpEmailSenderConfiguration(ISettingManager settingManager);
    public virtual string get_Host();
    public virtual int get_Port();
    public virtual string get_UserName();
    public virtual string get_Password();
    public virtual string get_Domain();
    public virtual bool get_EnableSsl();
    public virtual bool get_UseDefaultCredentials();
}
public class Abp.Notifications.DefaultNotificationDistributer : DomainService {
    private INotificationConfiguration _notificationConfiguration;
    private INotificationDefinitionManager _notificationDefinitionManager;
    private INotificationStore _notificationStore;
    private IUnitOfWorkManager _unitOfWorkManager;
    private IGuidGenerator _guidGenerator;
    private IIocResolver _iocResolver;
    public DefaultNotificationDistributer(INotificationConfiguration notificationConfiguration, INotificationDefinitionManager notificationDefinitionManager, INotificationStore notificationStore, IUnitOfWorkManager unitOfWorkManager, IGuidGenerator guidGenerator, IIocResolver iocResolver);
    [AsyncStateMachineAttribute("Abp.Notifications.DefaultNotificationDistributer/<DistributeAsync>d__7")]
public virtual Task DistributeAsync(Guid notificationId);
    [AsyncStateMachineAttribute("Abp.Notifications.DefaultNotificationDistributer/<GetUsersAsync>d__8")]
protected virtual Task`1<UserIdentifier[]> GetUsersAsync(NotificationInfo notificationInfo);
    protected virtual UserIdentifier[] GetUsers(NotificationInfo notificationInfo);
    private static Nullable`1[] GetTenantIds(NotificationInfo notificationInfo);
    [AsyncStateMachineAttribute("Abp.Notifications.DefaultNotificationDistributer/<SaveUserNotificationsAsync>d__11")]
protected virtual Task`1<List`1<UserNotification>> SaveUserNotificationsAsync(UserIdentifier[] users, NotificationInfo notificationInfo);
    protected virtual string GetTargetNotifiersForUser(UserIdentifier user, NotificationInfo notificationInfo, List`1<NotificationSubscriptionInfo> userNotificationSubscriptions);
    protected virtual List`1<UserNotification> SaveUserNotifications(UserIdentifier[] users, NotificationInfo notificationInfo);
    [AsyncStateMachineAttribute("Abp.Notifications.DefaultNotificationDistributer/<NotifyAsync>d__14")]
protected virtual Task NotifyAsync(UserNotification[] userNotifications);
    [CompilerGeneratedAttribute]
private bool <GetUsersAsync>b__8_0(UserIdentifier uid);
}
public class Abp.Notifications.GetNotificationsCreatedByUserOutput : object {
    [CompilerGeneratedAttribute]
private string <NotificationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublished>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public string NotificationName { get; public set; }
    public string Data { get; public set; }
    public string DataTypeName { get; public set; }
    public NotificationSeverity Severity { get; public set; }
    public bool IsPublished { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NotificationName();
    [CompilerGeneratedAttribute]
public void set_NotificationName(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(NotificationSeverity value);
    [CompilerGeneratedAttribute]
public bool get_IsPublished();
    [CompilerGeneratedAttribute]
public void set_IsPublished(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTime value);
}
public interface Abp.Notifications.INotificationConfiguration {
    public ITypeList`1<NotificationProvider> Providers { get; }
    public ITypeList`1<IRealTimeNotifier> Notifiers { get; }
    public abstract virtual ITypeList`1<NotificationProvider> get_Providers();
    public abstract virtual ITypeList`1<IRealTimeNotifier> get_Notifiers();
}
public interface Abp.Notifications.INotificationDefinitionContext {
    public INotificationDefinitionManager Manager { get; }
    public abstract virtual INotificationDefinitionManager get_Manager();
}
public interface Abp.Notifications.INotificationDefinitionManager {
    public abstract virtual void Add(NotificationDefinition notificationDefinition);
    public abstract virtual NotificationDefinition Get(string name);
    public abstract virtual NotificationDefinition GetOrNull(string name);
    public abstract virtual IReadOnlyList`1<NotificationDefinition> GetAll();
    public abstract virtual Task`1<bool> IsAvailableAsync(string name, UserIdentifier user);
    public abstract virtual bool IsAvailable(string name, UserIdentifier user);
    public abstract virtual Task`1<IReadOnlyList`1<NotificationDefinition>> GetAllAvailableAsync(UserIdentifier user);
    public abstract virtual IReadOnlyList`1<NotificationDefinition> GetAllAvailable(UserIdentifier user);
    public abstract virtual void Remove(string name);
}
public interface Abp.Notifications.INotificationDistributer {
    public abstract virtual Task DistributeAsync(Guid notificationId);
}
public interface Abp.Notifications.INotificationPublisher {
    public abstract virtual Task PublishAsync(string notificationName, NotificationData data, EntityIdentifier entityIdentifier, NotificationSeverity severity, UserIdentifier[] userIds, UserIdentifier[] excludedUserIds, Nullable`1[] tenantIds, Type[] targetNotifiers);
}
public interface Abp.Notifications.INotificationStore {
    public abstract virtual Task InsertSubscriptionAsync(NotificationSubscriptionInfo subscription);
    public abstract virtual void InsertSubscription(NotificationSubscriptionInfo subscription);
    public abstract virtual Task DeleteSubscriptionAsync(UserIdentifier user, string notificationName, string entityTypeName, string entityId);
    public abstract virtual void DeleteSubscription(UserIdentifier user, string notificationName, string entityTypeName, string entityId);
    public abstract virtual Task InsertNotificationAsync(NotificationInfo notification);
    public abstract virtual void InsertNotification(NotificationInfo notification);
    public abstract virtual Task`1<NotificationInfo> GetNotificationOrNullAsync(Guid notificationId);
    public abstract virtual NotificationInfo GetNotificationOrNull(Guid notificationId);
    public abstract virtual Task InsertUserNotificationAsync(UserNotificationInfo userNotification);
    public abstract virtual void InsertUserNotification(UserNotificationInfo userNotification);
    public abstract virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public abstract virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public abstract virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(Nullable`1[] tenantIds, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public abstract virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(Nullable`1[] tenantIds, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public abstract virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(UserIdentifier user);
    public abstract virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(UserIdentifier user);
    public abstract virtual Task`1<bool> IsSubscribedAsync(UserIdentifier user, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public abstract virtual bool IsSubscribed(UserIdentifier user, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public abstract virtual Task UpdateUserNotificationStateAsync(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public abstract virtual void UpdateUserNotificationState(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public abstract virtual Task UpdateAllUserNotificationStatesAsync(UserIdentifier user, UserNotificationState state);
    public abstract virtual void UpdateAllUserNotificationStates(UserIdentifier user, UserNotificationState state);
    public abstract virtual Task DeleteUserNotificationAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual void DeleteUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual Task DeleteAllUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual void DeleteAllUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual Task`1<List`1<UserNotificationInfoWithNotificationInfo>> GetUserNotificationsWithNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual List`1<UserNotificationInfoWithNotificationInfo> GetUserNotificationsWithNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual Task`1<int> GetUserNotificationCountAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual int GetUserNotificationCount(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual Task`1<UserNotificationInfoWithNotificationInfo> GetUserNotificationWithNotificationOrNullAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual UserNotificationInfoWithNotificationInfo GetUserNotificationWithNotificationOrNull(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual Task InsertTenantNotificationAsync(TenantNotificationInfo tenantNotificationInfo);
    public abstract virtual void InsertTenantNotification(TenantNotificationInfo tenantNotificationInfo);
    public abstract virtual Task DeleteNotificationAsync(NotificationInfo notification);
    public abstract virtual void DeleteNotification(NotificationInfo notification);
    public abstract virtual Task`1<List`1<GetNotificationsCreatedByUserOutput>> GetNotificationsPublishedByUserAsync(UserIdentifier user, string notificationName, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
}
public interface Abp.Notifications.INotificationSubscriptionManager {
    public abstract virtual Task SubscribeAsync(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual void Subscribe(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual Task SubscribeToAllAvailableNotificationsAsync(UserIdentifier user);
    public abstract virtual void SubscribeToAllAvailableNotifications(UserIdentifier user);
    public abstract virtual Task UnsubscribeAsync(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier);
    public abstract virtual void Unsubscribe(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier);
    public abstract virtual Task`1<List`1<NotificationSubscription>> GetSubscriptionsAsync(string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual List`1<NotificationSubscription> GetSubscriptions(string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual Task`1<List`1<NotificationSubscription>> GetSubscriptionsAsync(Nullable`1<int> tenantId, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual List`1<NotificationSubscription> GetSubscriptions(Nullable`1<int> tenantId, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual Task`1<List`1<NotificationSubscription>> GetSubscribedNotificationsAsync(UserIdentifier user);
    public abstract virtual List`1<NotificationSubscription> GetSubscribedNotifications(UserIdentifier user);
    public abstract virtual Task`1<bool> IsSubscribedAsync(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public abstract virtual bool IsSubscribed(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
}
public interface Abp.Notifications.IRealTimeNotifier {
    public bool UseOnlyIfRequestedAsTarget { get; }
    public abstract virtual Task SendNotificationsAsync(UserNotification[] userNotifications);
    public abstract virtual bool get_UseOnlyIfRequestedAsTarget();
}
public interface Abp.Notifications.IUserNotificationManager {
    public abstract virtual Task`1<List`1<UserNotification>> GetUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual List`1<UserNotification> GetUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual Task`1<int> GetUserNotificationCountAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual int GetUserNotificationCount(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual Task`1<UserNotification> GetUserNotificationAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual UserNotification GetUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual Task UpdateUserNotificationStateAsync(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public abstract virtual void UpdateUserNotificationState(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public abstract virtual Task UpdateAllUserNotificationStatesAsync(UserIdentifier user, UserNotificationState state);
    public abstract virtual void UpdateAllUserNotificationStates(UserIdentifier user, UserNotificationState state);
    public abstract virtual Task DeleteUserNotificationAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual void DeleteUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    public abstract virtual Task DeleteAllUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public abstract virtual void DeleteAllUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
}
public class Abp.Notifications.LocalizableMessageNotificationData : NotificationData {
    private LocalizableString _message;
    public LocalizableString Message { get; public set; }
    public LocalizableMessageNotificationData(LocalizableString message);
    public LocalizableString get_Message();
    public void set_Message(LocalizableString value);
}
public class Abp.Notifications.MessageNotificationData : NotificationData {
    private string _message;
    public string Message { get; public set; }
    public MessageNotificationData(string message);
    public string get_Message();
    public void set_Message(string value);
}
internal class Abp.Notifications.NotificationConfiguration : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<NotificationProvider> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<INotificationDistributer> <Distributers>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<IRealTimeNotifier> <Notifiers>k__BackingField;
    public ITypeList`1<NotificationProvider> Providers { get; private set; }
    public ITypeList`1<INotificationDistributer> Distributers { get; private set; }
    public ITypeList`1<IRealTimeNotifier> Notifiers { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<NotificationProvider> get_Providers();
    [CompilerGeneratedAttribute]
private void set_Providers(ITypeList`1<NotificationProvider> value);
    [CompilerGeneratedAttribute]
public ITypeList`1<INotificationDistributer> get_Distributers();
    [CompilerGeneratedAttribute]
private void set_Distributers(ITypeList`1<INotificationDistributer> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<IRealTimeNotifier> get_Notifiers();
    [CompilerGeneratedAttribute]
private void set_Notifiers(ITypeList`1<IRealTimeNotifier> value);
}
[DefaultMemberAttribute("Item")]
public class Abp.Notifications.NotificationData : object {
    private Dictionary`2<string, object> _properties;
    public string Type { get; }
    public object Item { get; public set; }
    public Dictionary`2<string, object> Properties { get; public set; }
    public virtual string get_Type();
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public Dictionary`2<string, object> get_Properties();
    public void set_Properties(Dictionary`2<string, object> value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Abp.Notifications.NotificationDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDependency <PermissionDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureDependency <FeatureDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    public string Name { get; private set; }
    public Type EntityType { get; private set; }
    public ILocalizableString DisplayName { get; public set; }
    public ILocalizableString Description { get; public set; }
    public IPermissionDependency PermissionDependency { get; public set; }
    public IFeatureDependency FeatureDependency { get; public set; }
    public object Item { get; public set; }
    public IDictionary`2<string, object> Attributes { get; private set; }
    public NotificationDefinition(string name, Type entityType, ILocalizableString displayName, ILocalizableString description, IPermissionDependency permissionDependency, IFeatureDependency featureDependency);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(ILocalizableString value);
    [CompilerGeneratedAttribute]
public IPermissionDependency get_PermissionDependency();
    [CompilerGeneratedAttribute]
public void set_PermissionDependency(IPermissionDependency value);
    [CompilerGeneratedAttribute]
public IFeatureDependency get_FeatureDependency();
    [CompilerGeneratedAttribute]
public void set_FeatureDependency(IFeatureDependency value);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
}
internal class Abp.Notifications.NotificationDefinitionContext : object {
    [CompilerGeneratedAttribute]
private INotificationDefinitionManager <Manager>k__BackingField;
    public INotificationDefinitionManager Manager { get; private set; }
    public NotificationDefinitionContext(INotificationDefinitionManager manager);
    [CompilerGeneratedAttribute]
public sealed virtual INotificationDefinitionManager get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(INotificationDefinitionManager value);
}
internal class Abp.Notifications.NotificationDefinitionManager : object {
    private INotificationConfiguration _configuration;
    private IocManager _iocManager;
    private IDictionary`2<string, NotificationDefinition> _notificationDefinitions;
    public NotificationDefinitionManager(IocManager iocManager, INotificationConfiguration configuration);
    public void Initialize();
    public sealed virtual void Add(NotificationDefinition notificationDefinition);
    public sealed virtual NotificationDefinition Get(string name);
    public sealed virtual NotificationDefinition GetOrNull(string name);
    public sealed virtual void Remove(string name);
    public sealed virtual IReadOnlyList`1<NotificationDefinition> GetAll();
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationDefinitionManager/<IsAvailableAsync>d__10")]
public sealed virtual Task`1<bool> IsAvailableAsync(string name, UserIdentifier user);
    public sealed virtual bool IsAvailable(string name, UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationDefinitionManager/<GetAllAvailableAsync>d__12")]
public sealed virtual Task`1<IReadOnlyList`1<NotificationDefinition>> GetAllAvailableAsync(UserIdentifier user);
    public sealed virtual IReadOnlyList`1<NotificationDefinition> GetAllAvailable(UserIdentifier user);
}
public class Abp.Notifications.NotificationDistributionJob : object {
    private INotificationConfiguration _notificationConfiguration;
    private INotificationDistributer _notificationDistributer;
    private IIocResolver _iocResolver;
    public NotificationDistributionJob(INotificationConfiguration notificationConfiguration, IIocResolver iocResolver, INotificationDistributer notificationDistributer);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationDistributionJob/<ExecuteAsync>d__4")]
public sealed virtual Task ExecuteAsync(NotificationDistributionJobArgs args);
}
public class Abp.Notifications.NotificationDistributionJobArgs : object {
    [CompilerGeneratedAttribute]
private Guid <NotificationId>k__BackingField;
    public Guid NotificationId { get; public set; }
    public NotificationDistributionJobArgs(Guid notificationId);
    [CompilerGeneratedAttribute]
public Guid get_NotificationId();
    [CompilerGeneratedAttribute]
public void set_NotificationId(Guid value);
}
[TableAttribute("AbpNotifications")]
[MultiTenancySideAttribute("2")]
public class Abp.Notifications.NotificationInfo : CreationAuditedEntity`1<Guid> {
    public static string AllTenantIds;
    public static int MaxNotificationNameLength;
    public static int MaxDataLength;
    public static int MaxDataTypeNameLength;
    public static int MaxEntityTypeNameLength;
    public static int MaxEntityTypeAssemblyQualifiedNameLength;
    public static int MaxEntityIdLength;
    public static int MaxUserIdsLength;
    public static int MaxTenantIdsLength;
    public static int MaxTargetNotifiersLength;
    public static char NotificationTargetSeparator;
    [CompilerGeneratedAttribute]
private string <NotificationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludedUserIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNotifiers>k__BackingField;
    [RequiredAttribute]
[StringLengthAttribute("96")]
public string NotificationName { get; public set; }
    [StringLengthAttribute("1048576")]
public string Data { get; public set; }
    [StringLengthAttribute("512")]
public string DataTypeName { get; public set; }
    [StringLengthAttribute("250")]
public string EntityTypeName { get; public set; }
    [StringLengthAttribute("512")]
public string EntityTypeAssemblyQualifiedName { get; public set; }
    [StringLengthAttribute("96")]
public string EntityId { get; public set; }
    public NotificationSeverity Severity { get; public set; }
    [StringLengthAttribute("131072")]
public string UserIds { get; public set; }
    [StringLengthAttribute("131072")]
public string ExcludedUserIds { get; public set; }
    [StringLengthAttribute("131072")]
public string TenantIds { get; public set; }
    [StringLengthAttribute("1024")]
public string TargetNotifiers { get; public set; }
    [NotMappedAttribute]
public List`1<string> TargetNotifiersList { get; }
    public NotificationInfo(Guid id);
    [CompilerGeneratedAttribute]
public virtual string get_NotificationName();
    [CompilerGeneratedAttribute]
public virtual void set_NotificationName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Data();
    [CompilerGeneratedAttribute]
public virtual void set_Data(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityId();
    [CompilerGeneratedAttribute]
public virtual void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public virtual NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public virtual void set_Severity(NotificationSeverity value);
    [CompilerGeneratedAttribute]
public virtual string get_UserIds();
    [CompilerGeneratedAttribute]
public virtual void set_UserIds(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ExcludedUserIds();
    [CompilerGeneratedAttribute]
public virtual void set_ExcludedUserIds(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TenantIds();
    [CompilerGeneratedAttribute]
public virtual void set_TenantIds(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TargetNotifiers();
    [CompilerGeneratedAttribute]
public virtual void set_TargetNotifiers(string value);
    public virtual List`1<string> get_TargetNotifiersList();
    public virtual void SetTargetNotifiers(List`1<string> list);
}
public abstract class Abp.Notifications.NotificationProvider : object {
    public abstract virtual void SetNotifications(INotificationDefinitionContext context);
}
public class Abp.Notifications.NotificationPublisher : AbpServiceBase {
    public static int MaxUserCountToDirectlyDistributeANotification;
    [CompilerGeneratedAttribute]
private IAbpSession <AbpSession>k__BackingField;
    private INotificationStore _store;
    private IBackgroundJobManager _backgroundJobManager;
    private INotificationDistributer _notificationDistributer;
    private IGuidGenerator _guidGenerator;
    private INotificationConfiguration _notificationConfiguration;
    public static Int32[] AllTenants { get; }
    public IAbpSession AbpSession { get; public set; }
    public NotificationPublisher(INotificationStore store, IBackgroundJobManager backgroundJobManager, INotificationDistributer notificationDistributer, IGuidGenerator guidGenerator, INotificationConfiguration notificationConfiguration);
    public static Int32[] get_AllTenants();
    [CompilerGeneratedAttribute]
public IAbpSession get_AbpSession();
    [CompilerGeneratedAttribute]
public void set_AbpSession(IAbpSession value);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationPublisher/<PublishAsync>d__13")]
public virtual Task PublishAsync(string notificationName, NotificationData data, EntityIdentifier entityIdentifier, NotificationSeverity severity, UserIdentifier[] userIds, UserIdentifier[] excludedUserIds, Nullable`1[] tenantIds, Type[] targetNotifiers);
    protected virtual void SetTargetNotifiers(NotificationInfo notificationInfo, Type[] targetNotifiers);
    private static string GetTenantIdsAsStr(Nullable`1[] tenantIds);
}
public static class Abp.Notifications.NotificationSettingNames : object {
    public static string ReceiveNotifications;
}
public class Abp.Notifications.NotificationSettingProvider : SettingProvider {
    public virtual IEnumerable`1<SettingDefinition> GetSettingDefinitions(SettingDefinitionProviderContext context);
    private static LocalizableString L(string name);
}
public enum Abp.Notifications.NotificationSeverity : Enum {
    public byte value__;
    public static NotificationSeverity Info;
    public static NotificationSeverity Success;
    public static NotificationSeverity Warn;
    public static NotificationSeverity Error;
    public static NotificationSeverity Fatal;
}
public class Abp.Notifications.NotificationSubscription : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    public string NotificationName { get; public set; }
    public Type EntityType { get; public set; }
    public string EntityTypeName { get; public set; }
    public object EntityId { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public string get_NotificationName();
    [CompilerGeneratedAttribute]
public void set_NotificationName(string value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public object get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(object value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreationTime(DateTime value);
}
[TableAttribute("AbpNotificationSubscriptions")]
public class Abp.Notifications.NotificationSubscriptionInfo : CreationAuditedEntity`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNotifiers>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    [StringLengthAttribute("96")]
public string NotificationName { get; public set; }
    [StringLengthAttribute("250")]
public string EntityTypeName { get; public set; }
    [StringLengthAttribute("512")]
public string EntityTypeAssemblyQualifiedName { get; public set; }
    [StringLengthAttribute("96")]
public string EntityId { get; public set; }
    [StringLengthAttribute("1024")]
public string TargetNotifiers { get; public set; }
    public NotificationSubscriptionInfo(Guid id, Nullable`1<int> tenantId, long userId, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual string get_NotificationName();
    [CompilerGeneratedAttribute]
public virtual void set_NotificationName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityId();
    [CompilerGeneratedAttribute]
public virtual void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TargetNotifiers();
    [CompilerGeneratedAttribute]
public virtual void set_TargetNotifiers(string value);
}
[ExtensionAttribute]
public static class Abp.Notifications.NotificationSubscriptionInfoExtensions : object {
    [ExtensionAttribute]
public static NotificationSubscription ToNotificationSubscription(NotificationSubscriptionInfo subscriptionInfo);
}
public class Abp.Notifications.NotificationSubscriptionManager : object {
    private INotificationStore _store;
    private INotificationDefinitionManager _notificationDefinitionManager;
    private IGuidGenerator _guidGenerator;
    public NotificationSubscriptionManager(INotificationStore store, INotificationDefinitionManager notificationDefinitionManager, IGuidGenerator guidGenerator);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationSubscriptionManager/<SubscribeAsync>d__4")]
public sealed virtual Task SubscribeAsync(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public sealed virtual void Subscribe(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationSubscriptionManager/<SubscribeToAllAvailableNotificationsAsync>d__6")]
public sealed virtual Task SubscribeToAllAvailableNotificationsAsync(UserIdentifier user);
    public sealed virtual void SubscribeToAllAvailableNotifications(UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationSubscriptionManager/<UnsubscribeAsync>d__8")]
public sealed virtual Task UnsubscribeAsync(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier);
    public sealed virtual void Unsubscribe(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationSubscriptionManager/<GetSubscriptionsAsync>d__10")]
public sealed virtual Task`1<List`1<NotificationSubscription>> GetSubscriptionsAsync(string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public sealed virtual List`1<NotificationSubscription> GetSubscriptions(string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationSubscriptionManager/<GetSubscriptionsAsync>d__12")]
public sealed virtual Task`1<List`1<NotificationSubscription>> GetSubscriptionsAsync(Nullable`1<int> tenantId, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public sealed virtual List`1<NotificationSubscription> GetSubscriptions(Nullable`1<int> tenantId, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    [AsyncStateMachineAttribute("Abp.Notifications.NotificationSubscriptionManager/<GetSubscribedNotificationsAsync>d__14")]
public sealed virtual Task`1<List`1<NotificationSubscription>> GetSubscribedNotificationsAsync(UserIdentifier user);
    public sealed virtual List`1<NotificationSubscription> GetSubscribedNotifications(UserIdentifier user);
    public sealed virtual Task`1<bool> IsSubscribedAsync(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
    public sealed virtual bool IsSubscribed(UserIdentifier user, string notificationName, EntityIdentifier entityIdentifier, string targetNotifiers);
}
public class Abp.Notifications.NullNotificationStore : object {
    public sealed virtual Task InsertSubscriptionAsync(NotificationSubscriptionInfo subscription);
    public sealed virtual Task DeleteSubscriptionAsync(UserIdentifier user, string notificationName, string entityTypeName, string entityId);
    public sealed virtual Task InsertNotificationAsync(NotificationInfo notification);
    public sealed virtual Task`1<NotificationInfo> GetNotificationOrNullAsync(Guid notificationId);
    public sealed virtual Task InsertUserNotificationAsync(UserNotificationInfo userNotification);
    public sealed virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public sealed virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(Nullable`1[] tenantIds, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public sealed virtual Task`1<List`1<NotificationSubscriptionInfo>> GetSubscriptionsAsync(UserIdentifier user);
    public sealed virtual Task`1<bool> IsSubscribedAsync(UserIdentifier user, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public sealed virtual Task UpdateUserNotificationStateAsync(Nullable`1<int> notificationId, Guid userNotificationId, UserNotificationState state);
    public sealed virtual Task UpdateAllUserNotificationStatesAsync(UserIdentifier user, UserNotificationState state);
    public sealed virtual Task DeleteUserNotificationAsync(Nullable`1<int> notificationId, Guid userNotificationId);
    public sealed virtual Task DeleteAllUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual Task`1<List`1<UserNotificationInfoWithNotificationInfo>> GetUserNotificationsWithNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual Task`1<int> GetUserNotificationCountAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual Task`1<UserNotificationInfoWithNotificationInfo> GetUserNotificationWithNotificationOrNullAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual Task InsertTenantNotificationAsync(TenantNotificationInfo tenantNotificationInfo);
    public sealed virtual Task DeleteNotificationAsync(NotificationInfo notification);
    public sealed virtual void InsertSubscription(NotificationSubscriptionInfo subscription);
    public sealed virtual void DeleteSubscription(UserIdentifier user, string notificationName, string entityTypeName, string entityId);
    public sealed virtual void InsertNotification(NotificationInfo notification);
    public sealed virtual NotificationInfo GetNotificationOrNull(Guid notificationId);
    public sealed virtual void InsertUserNotification(UserNotificationInfo userNotification);
    public sealed virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public sealed virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(Nullable`1[] tenantIds, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public sealed virtual List`1<NotificationSubscriptionInfo> GetSubscriptions(UserIdentifier user);
    public sealed virtual bool IsSubscribed(UserIdentifier user, string notificationName, string entityTypeName, string entityId, string targetNotifiers);
    public sealed virtual void UpdateUserNotificationState(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public sealed virtual void UpdateAllUserNotificationStates(UserIdentifier user, UserNotificationState state);
    public sealed virtual void DeleteUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual void DeleteAllUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual List`1<UserNotificationInfoWithNotificationInfo> GetUserNotificationsWithNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual int GetUserNotificationCount(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual UserNotificationInfoWithNotificationInfo GetUserNotificationWithNotificationOrNull(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual void InsertTenantNotification(TenantNotificationInfo tenantNotificationInfo);
    public sealed virtual void DeleteNotification(NotificationInfo notification);
    public sealed virtual Task`1<List`1<GetNotificationsCreatedByUserOutput>> GetNotificationsPublishedByUserAsync(UserIdentifier user, string notificationName, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
}
public class Abp.Notifications.TenantNotification : EntityDto`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationName>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public string NotificationName { get; public set; }
    public NotificationData Data { get; public set; }
    [ObsoleteAttribute("(De)serialization of System.Type is bad and not supported. See https://github.com/dotnet/corefx/issues/42712")]
public Type EntityType { get; public set; }
    public string EntityTypeName { get; public set; }
    public object EntityId { get; public set; }
    public NotificationSeverity Severity { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_NotificationName();
    [CompilerGeneratedAttribute]
public void set_NotificationName(string value);
    [CompilerGeneratedAttribute]
public NotificationData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(NotificationData value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public object get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(object value);
    [CompilerGeneratedAttribute]
public NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(NotificationSeverity value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreationTime(DateTime value);
}
[TableAttribute("AbpTenantNotifications")]
public class Abp.Notifications.TenantNotificationInfo : CreationAuditedEntity`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
[StringLengthAttribute("96")]
public string NotificationName { get; public set; }
    [StringLengthAttribute("1048576")]
public string Data { get; public set; }
    [StringLengthAttribute("512")]
public string DataTypeName { get; public set; }
    [StringLengthAttribute("250")]
public string EntityTypeName { get; public set; }
    [StringLengthAttribute("512")]
public string EntityTypeAssemblyQualifiedName { get; public set; }
    [StringLengthAttribute("96")]
public string EntityId { get; public set; }
    public NotificationSeverity Severity { get; public set; }
    public TenantNotificationInfo(Guid id, Nullable`1<int> tenantId, NotificationInfo notification);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_NotificationName();
    [CompilerGeneratedAttribute]
public virtual void set_NotificationName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Data();
    [CompilerGeneratedAttribute]
public virtual void set_Data(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DataTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityTypeAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_EntityTypeAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EntityId();
    [CompilerGeneratedAttribute]
public virtual void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public virtual NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public virtual void set_Severity(NotificationSeverity value);
}
[ExtensionAttribute]
public static class Abp.Notifications.TenantNotificationInfoExtensions : object {
    [ExtensionAttribute]
public static TenantNotification ToTenantNotification(TenantNotificationInfo tenantNotificationInfo);
}
public class Abp.Notifications.UserNotification : EntityDto`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private UserNotificationState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private TenantNotification <Notification>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNotifiers>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    public UserNotificationState State { get; public set; }
    public TenantNotification Notification { get; public set; }
    public string TargetNotifiers { get; public set; }
    public List`1<string> TargetNotifiersList { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public UserNotificationState get_State();
    [CompilerGeneratedAttribute]
public void set_State(UserNotificationState value);
    [CompilerGeneratedAttribute]
public TenantNotification get_Notification();
    [CompilerGeneratedAttribute]
public void set_Notification(TenantNotification value);
    [CompilerGeneratedAttribute]
public string get_TargetNotifiers();
    [CompilerGeneratedAttribute]
public void set_TargetNotifiers(string value);
    public List`1<string> get_TargetNotifiersList();
}
[TableAttribute("AbpUserNotifications")]
public class Abp.Notifications.UserNotificationInfo : Entity`1<Guid> {
    public static int MaxTargetNotifiersLength;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TenantNotificationId>k__BackingField;
    [CompilerGeneratedAttribute]
private UserNotificationState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNotifiers>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public long UserId { get; public set; }
    [RequiredAttribute]
public Guid TenantNotificationId { get; public set; }
    public UserNotificationState State { get; public set; }
    public DateTime CreationTime { get; public set; }
    [StringLengthAttribute("1024")]
public string TargetNotifiers { get; public set; }
    [NotMappedAttribute]
public List`1<string> TargetNotifiersList { get; }
    public UserNotificationInfo(Guid id);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual long get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(long value);
    [CompilerGeneratedAttribute]
public virtual Guid get_TenantNotificationId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantNotificationId(Guid value);
    [CompilerGeneratedAttribute]
public virtual UserNotificationState get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(UserNotificationState value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual string get_TargetNotifiers();
    [CompilerGeneratedAttribute]
public virtual void set_TargetNotifiers(string value);
    public virtual List`1<string> get_TargetNotifiersList();
    public virtual void SetTargetNotifiers(List`1<string> list);
}
[ExtensionAttribute]
public static class Abp.Notifications.UserNotificationInfoExtensions : object {
    [ExtensionAttribute]
public static UserNotification ToUserNotification(UserNotificationInfo userNotificationInfo, TenantNotification tenantNotification);
}
public class Abp.Notifications.UserNotificationInfoWithNotificationInfo : object {
    [CompilerGeneratedAttribute]
private UserNotificationInfo <UserNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private TenantNotificationInfo <Notification>k__BackingField;
    public UserNotificationInfo UserNotification { get; public set; }
    public TenantNotificationInfo Notification { get; public set; }
    public UserNotificationInfoWithNotificationInfo(UserNotificationInfo userNotification, TenantNotificationInfo notification);
    [CompilerGeneratedAttribute]
public UserNotificationInfo get_UserNotification();
    [CompilerGeneratedAttribute]
public void set_UserNotification(UserNotificationInfo value);
    [CompilerGeneratedAttribute]
public TenantNotificationInfo get_Notification();
    [CompilerGeneratedAttribute]
public void set_Notification(TenantNotificationInfo value);
}
[ExtensionAttribute]
public static class Abp.Notifications.UserNotificationInfoWithNotificationInfoExtensions : object {
    [ExtensionAttribute]
public static UserNotification ToUserNotification(UserNotificationInfoWithNotificationInfo userNotificationInfoWithNotificationInfo);
}
public class Abp.Notifications.UserNotificationManager : object {
    private INotificationStore _store;
    public UserNotificationManager(INotificationStore store);
    [AsyncStateMachineAttribute("Abp.Notifications.UserNotificationManager/<GetUserNotificationsAsync>d__2")]
public sealed virtual Task`1<List`1<UserNotification>> GetUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual List`1<UserNotification> GetUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, int skipCount, int maxResultCount, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual Task`1<int> GetUserNotificationCountAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual int GetUserNotificationCount(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [AsyncStateMachineAttribute("Abp.Notifications.UserNotificationManager/<GetUserNotificationAsync>d__6")]
public sealed virtual Task`1<UserNotification> GetUserNotificationAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual UserNotification GetUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual Task UpdateUserNotificationStateAsync(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public sealed virtual void UpdateUserNotificationState(Nullable`1<int> tenantId, Guid userNotificationId, UserNotificationState state);
    public sealed virtual Task UpdateAllUserNotificationStatesAsync(UserIdentifier user, UserNotificationState state);
    public sealed virtual void UpdateAllUserNotificationStates(UserIdentifier user, UserNotificationState state);
    public sealed virtual Task DeleteUserNotificationAsync(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual void DeleteUserNotification(Nullable`1<int> tenantId, Guid userNotificationId);
    public sealed virtual Task DeleteAllUserNotificationsAsync(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual void DeleteAllUserNotifications(UserIdentifier user, Nullable`1<UserNotificationState> state, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
}
public enum Abp.Notifications.UserNotificationState : Enum {
    public int value__;
    public static UserNotificationState Unread;
    public static UserNotificationState Read;
}
public enum Abp.ObjectComparators.BooleanComparators.BooleanCompareTypes : Enum {
    public int value__;
    public static BooleanCompareTypes Equals;
}
public class Abp.ObjectComparators.BooleanComparators.BooleanObjectComparator : ObjectComparatorBase`2<bool, BooleanCompareTypes> {
    protected virtual bool Compare(bool baseObject, bool compareObject, BooleanCompareTypes compareType);
}
public enum Abp.ObjectComparators.BooleanComparators.NullableBooleanCompareTypes : Enum {
    public int value__;
    public static NullableBooleanCompareTypes Null;
    public static NullableBooleanCompareTypes NotNull;
    public static NullableBooleanCompareTypes Equals;
}
public class Abp.ObjectComparators.BooleanComparators.NullableBooleanObjectComparator : ObjectComparatorBase`2<Nullable`1<bool>, NullableBooleanCompareTypes> {
    protected virtual bool Compare(Nullable`1<bool> baseObject, Nullable`1<bool> compareObject, NullableBooleanCompareTypes compareType);
}
public enum Abp.ObjectComparators.DateTimeComparators.DateTimeCompareTypes : Enum {
    public int value__;
    public static DateTimeCompareTypes Equals;
    public static DateTimeCompareTypes LessThan;
    public static DateTimeCompareTypes LessOrEqualThan;
    public static DateTimeCompareTypes BiggerThan;
    public static DateTimeCompareTypes BiggerOrEqualThan;
}
public class Abp.ObjectComparators.DateTimeComparators.DateTimeObjectComparator : ObjectComparatorBase`2<DateTime, DateTimeCompareTypes> {
    protected virtual bool Compare(DateTime baseObject, DateTime compareObject, DateTimeCompareTypes compareType);
}
public enum Abp.ObjectComparators.DateTimeComparators.NullableDateTimeCompareTypes : Enum {
    public int value__;
    public static NullableDateTimeCompareTypes Null;
    public static NullableDateTimeCompareTypes NotNull;
    public static NullableDateTimeCompareTypes Equals;
    public static NullableDateTimeCompareTypes LessThan;
    public static NullableDateTimeCompareTypes LessOrEqualThan;
    public static NullableDateTimeCompareTypes BiggerThan;
    public static NullableDateTimeCompareTypes BiggerOrEqualThan;
}
public class Abp.ObjectComparators.DateTimeComparators.NullableDateTimeObjectComparator : ObjectComparatorBase`2<Nullable`1<DateTime>, NullableDateTimeCompareTypes> {
    protected virtual bool Compare(Nullable`1<DateTime> baseObject, Nullable`1<DateTime> compareObject, NullableDateTimeCompareTypes compareType);
}
public enum Abp.ObjectComparators.IntComparators.IntCompareTypes : Enum {
    public int value__;
    public static IntCompareTypes Equals;
    public static IntCompareTypes LessThan;
    public static IntCompareTypes LessOrEqualThan;
    public static IntCompareTypes BiggerThan;
    public static IntCompareTypes BiggerOrEqualThan;
}
public class Abp.ObjectComparators.IntComparators.IntObjectComparator : ObjectComparatorBase`2<int, IntCompareTypes> {
    protected virtual bool Compare(int baseObject, int compareObject, IntCompareTypes compareType);
}
public enum Abp.ObjectComparators.IntComparators.NullableIntCompareTypes : Enum {
    public int value__;
    public static NullableIntCompareTypes Null;
    public static NullableIntCompareTypes NotNull;
    public static NullableIntCompareTypes Equals;
    public static NullableIntCompareTypes LessThan;
    public static NullableIntCompareTypes LessOrEqualThan;
    public static NullableIntCompareTypes BiggerThan;
    public static NullableIntCompareTypes BiggerOrEqualThan;
}
public class Abp.ObjectComparators.IntComparators.NullableIntObjectComparator : ObjectComparatorBase`2<Nullable`1<int>, NullableIntCompareTypes> {
    protected virtual bool Compare(Nullable`1<int> baseObject, Nullable`1<int> compareObject, NullableIntCompareTypes compareType);
}
public interface Abp.ObjectComparators.IObjectComparator {
    public Type ObjectType { get; }
    public ImmutableList`1<string> CompareTypes { get; }
    public abstract virtual Type get_ObjectType();
    public abstract virtual ImmutableList`1<string> get_CompareTypes();
    public abstract virtual bool Compare(object baseObject, object compareObject, string compareType);
    public abstract virtual bool CanCompare(Type baseObjectType, string compareType);
}
public interface Abp.ObjectComparators.IObjectComparatorManager {
    public abstract virtual bool HasComparator();
    public abstract virtual ImmutableList`1<string> GetAllCompareTypes();
    public abstract virtual Dictionary`2<Type, List`1<string>> GetAllCompareTypes();
    public abstract virtual bool CanCompare(string compareType);
    public abstract virtual bool CanCompare(TEnumCompareType compareType);
    public abstract virtual bool Compare(TBaseType baseObject, TBaseType compareObject, string compareType);
    public abstract virtual bool Compare(TBaseType baseObject, TBaseType compareObject, TEnumCompareType compareType);
    public abstract virtual bool Compare(TBaseType baseObject, ObjectComparatorCondition`1<TBaseType> condition);
    public abstract virtual bool Compare(TBaseType baseObject, ObjectComparatorCondition`2<TBaseType, TEnumCompareType> condition);
}
public enum Abp.ObjectComparators.LongComparators.LongCompareTypes : Enum {
    public int value__;
    public static LongCompareTypes Equals;
    public static LongCompareTypes LessThan;
    public static LongCompareTypes LessOrEqualThan;
    public static LongCompareTypes BiggerThan;
    public static LongCompareTypes BiggerOrEqualThan;
}
public class Abp.ObjectComparators.LongComparators.LongObjectComparator : ObjectComparatorBase`2<long, LongCompareTypes> {
    protected virtual bool Compare(long baseObject, long compareObject, LongCompareTypes compareType);
}
public enum Abp.ObjectComparators.LongComparators.NullableLongCompareTypes : Enum {
    public int value__;
    public static NullableLongCompareTypes Null;
    public static NullableLongCompareTypes NotNull;
    public static NullableLongCompareTypes Equals;
    public static NullableLongCompareTypes LessThan;
    public static NullableLongCompareTypes LessOrEqualThan;
    public static NullableLongCompareTypes BiggerThan;
    public static NullableLongCompareTypes BiggerOrEqualThan;
}
public class Abp.ObjectComparators.LongComparators.NullableLongObjectComparator : ObjectComparatorBase`2<Nullable`1<long>, NullableLongCompareTypes> {
    protected virtual bool Compare(Nullable`1<long> baseObject, Nullable`1<long> compareObject, NullableLongCompareTypes compareType);
}
public abstract class Abp.ObjectComparators.ObjectComparatorBase : object {
    public Type ObjectType { get; }
    public ImmutableList`1<string> CompareTypes { get; }
    public abstract virtual Type get_ObjectType();
    public abstract virtual ImmutableList`1<string> get_CompareTypes();
    public abstract virtual bool Compare(object baseObject, object compareObject, string compareType);
    public abstract virtual bool CanCompare(Type baseObjectType, string compareType);
}
public abstract class Abp.ObjectComparators.ObjectComparatorBase`1 : ObjectComparatorBase {
    private bool _isNullable;
    public Type ObjectType { get; }
    public sealed virtual Type get_ObjectType();
    protected abstract virtual bool Compare(TBaseType baseObject, TBaseType compareObject, string compareType);
    public sealed virtual bool Compare(object baseObject, object compareObject, string compareType);
    protected virtual bool CanCompare(string compareType);
    public sealed virtual bool CanCompare(Type baseObjectType, string compareType);
    protected static bool IsNullableType(Type type);
}
public abstract class Abp.ObjectComparators.ObjectComparatorBase`2 : ObjectComparatorBase`1<TBaseType> {
    [CompilerGeneratedAttribute]
private ImmutableList`1<string> <CompareTypes>k__BackingField;
    public ImmutableList`1<string> CompareTypes { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableList`1<string> get_CompareTypes();
    protected abstract virtual bool Compare(TBaseType baseObject, TBaseType compareObject, TEnumCompareTypes compareType);
    protected sealed virtual bool Compare(TBaseType baseObject, TBaseType compareObject, string compareType);
}
public class Abp.ObjectComparators.ObjectComparatorCondition`1 : object {
    [CompilerGeneratedAttribute]
private string <CompareType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonValue>k__BackingField;
    public string CompareType { get; public set; }
    public string JsonValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CompareType();
    [CompilerGeneratedAttribute]
public void set_CompareType(string value);
    [CompilerGeneratedAttribute]
public string get_JsonValue();
    [CompilerGeneratedAttribute]
public void set_JsonValue(string value);
    public TValueType GetValue();
    public void SetValue(TValueType value);
}
public class Abp.ObjectComparators.ObjectComparatorCondition`2 : object {
    [CompilerGeneratedAttribute]
private TEnumCompareType <CompareType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonValue>k__BackingField;
    public TEnumCompareType CompareType { get; public set; }
    public string JsonValue { get; public set; }
    [CompilerGeneratedAttribute]
public TEnumCompareType get_CompareType();
    [CompilerGeneratedAttribute]
public void set_CompareType(TEnumCompareType value);
    [CompilerGeneratedAttribute]
public string get_JsonValue();
    [CompilerGeneratedAttribute]
public void set_JsonValue(string value);
    public TValueType GetValue();
    public void SetValue(TValueType value);
}
[ExtensionAttribute]
public static class Abp.ObjectComparators.ObjectComparatorExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(ObjectComparatorCondition`2<T1, T2> objectComparator);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(ObjectComparatorCondition`1<T> objectComparator);
}
public class Abp.ObjectComparators.ObjectComparatorManager : object {
    private IEnumerable`1<IObjectComparator> _objectComparators;
    public ObjectComparatorManager(IocManager iocManager);
    public sealed virtual bool HasComparator();
    public sealed virtual ImmutableList`1<string> GetAllCompareTypes();
    public sealed virtual Dictionary`2<Type, List`1<string>> GetAllCompareTypes();
    public sealed virtual bool CanCompare(string compareType);
    public sealed virtual bool CanCompare(TEnumCompareType compareType);
    public sealed virtual bool Compare(TBaseType baseObject, TBaseType compareObject, string compareType);
    public sealed virtual bool Compare(TBaseType baseObject, TBaseType compareObject, TEnumCompareType compareType);
    public sealed virtual bool Compare(TBaseType baseObject, ObjectComparatorCondition`1<TBaseType> condition);
    public sealed virtual bool Compare(TBaseType baseObject, ObjectComparatorCondition`2<TBaseType, TEnumCompareType> condition);
}
public enum Abp.ObjectComparators.StringComparators.StringCompareTypes : Enum {
    public int value__;
    public static StringCompareTypes Null;
    public static StringCompareTypes NotNull;
    public static StringCompareTypes Equals;
    public static StringCompareTypes Contains;
    public static StringCompareTypes StartsWith;
    public static StringCompareTypes EndsWith;
}
public class Abp.ObjectComparators.StringComparators.StringObjectComparator : ObjectComparatorBase`2<string, StringCompareTypes> {
    protected virtual bool Compare(string baseObject, string compareObject, StringCompareTypes compareTypes);
}
public interface Abp.ObjectMapping.IObjectMapper {
    public abstract virtual TDestination Map(object source);
    public abstract virtual TDestination Map(TSource source, TDestination destination);
    public abstract virtual IQueryable`1<TDestination> ProjectTo(IQueryable source);
}
public class Abp.ObjectMapping.NullObjectMapper : object {
    [CompilerGeneratedAttribute]
private static NullObjectMapper <Instance>k__BackingField;
    public static NullObjectMapper Instance { get; }
    private static NullObjectMapper();
    [CompilerGeneratedAttribute]
public static NullObjectMapper get_Instance();
    public sealed virtual TDestination Map(object source);
    public sealed virtual TDestination Map(TSource source, TDestination destination);
    public sealed virtual IQueryable`1<TDestination> ProjectTo(IQueryable source);
}
public interface Abp.Orm.ISecondaryOrmRegistrar {
    public string OrmContextKey { get; }
    public abstract virtual string get_OrmContextKey();
    public abstract virtual void RegisterRepositories(IIocManager iocManager, AutoRepositoryTypesAttribute defaultRepositoryTypes);
}
public class Abp.PlugIns.AbpPlugInManager : object {
    [CompilerGeneratedAttribute]
private PlugInSourceList <PlugInSources>k__BackingField;
    private static object SyncObj;
    private static bool _isRegisteredToAssemblyResolve;
    public PlugInSourceList PlugInSources { get; }
    private static AbpPlugInManager();
    [CompilerGeneratedAttribute]
public sealed virtual PlugInSourceList get_PlugInSources();
    private static void RegisterToAssemblyResolve(PlugInSourceList plugInSources);
}
public class Abp.PlugIns.AssemblyFileListPlugInSource : object {
    [CompilerGeneratedAttribute]
private String[] <FilePaths>k__BackingField;
    private Lazy`1<List`1<Assembly>> _assemblies;
    public String[] FilePaths { get; }
    public AssemblyFileListPlugInSource(String[] filePaths);
    [CompilerGeneratedAttribute]
public String[] get_FilePaths();
    public sealed virtual List`1<Assembly> GetAssemblies();
    public sealed virtual List`1<Type> GetModules();
    private List`1<Assembly> LoadAssemblies();
}
public class Abp.PlugIns.FolderPlugInSource : object {
    [CompilerGeneratedAttribute]
private string <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchOption <SearchOption>k__BackingField;
    private Lazy`1<List`1<Assembly>> _assemblies;
    public string Folder { get; }
    public SearchOption SearchOption { get; public set; }
    public FolderPlugInSource(string folder, SearchOption searchOption);
    [CompilerGeneratedAttribute]
public string get_Folder();
    [CompilerGeneratedAttribute]
public SearchOption get_SearchOption();
    [CompilerGeneratedAttribute]
public void set_SearchOption(SearchOption value);
    public sealed virtual List`1<Assembly> GetAssemblies();
    public sealed virtual List`1<Type> GetModules();
    private List`1<Assembly> LoadAssemblies();
}
public interface Abp.PlugIns.IAbpPlugInManager {
    public PlugInSourceList PlugInSources { get; }
    public abstract virtual PlugInSourceList get_PlugInSources();
}
public interface Abp.PlugIns.IPlugInSource {
    public abstract virtual List`1<Assembly> GetAssemblies();
    public abstract virtual List`1<Type> GetModules();
}
[ExtensionAttribute]
public static class Abp.PlugIns.PlugInSourceExtensions : object {
    [ExtensionAttribute]
public static List`1<Type> GetModulesWithAllDependencies(IPlugInSource plugInSource);
}
public class Abp.PlugIns.PlugInSourceList : List`1<IPlugInSource> {
    public List`1<Assembly> GetAllAssemblies();
    public List`1<Type> GetAllModules();
}
[ExtensionAttribute]
public static class Abp.PlugIns.PlugInSourceListExtensions : object {
    [ExtensionAttribute]
public static void AddFolder(PlugInSourceList list, string folder, SearchOption searchOption);
    [ExtensionAttribute]
public static void AddTypeList(PlugInSourceList list, Type[] moduleTypes);
}
public class Abp.PlugIns.PlugInTypeListSource : object {
    private Type[] _moduleTypes;
    private Lazy`1<List`1<Assembly>> _assemblies;
    public PlugInTypeListSource(Type[] moduleTypes);
    public sealed virtual List`1<Assembly> GetAssemblies();
    public sealed virtual List`1<Type> GetModules();
    private List`1<Assembly> LoadAssemblies();
}
public static class Abp.RandomHelper : object {
    private static Random Rnd;
    private static RandomHelper();
    public static int GetRandom(int minValue, int maxValue);
    public static int GetRandom(int maxValue);
    public static int GetRandom();
    public static T GetRandomOf(T[] objs);
    public static List`1<T> GenerateRandomizedList(IEnumerable`1<T> items);
}
public class Abp.RealTime.InMemoryOnlineClientStore : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IOnlineClient> <Clients>k__BackingField;
    protected ConcurrentDictionary`2<string, IOnlineClient> Clients { get; }
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<string, IOnlineClient> get_Clients();
    public sealed virtual Task AddAsync(IOnlineClient client);
    public sealed virtual Task`1<bool> RemoveAsync(string connectionId);
    public sealed virtual Task`1<bool> TryRemoveAsync(string connectionId, Action`1<IOnlineClient> clientAction);
    public sealed virtual Task`1<bool> TryGetAsync(string connectionId, Action`1<IOnlineClient> clientAction);
    public Task`1<bool> ContainsAsync(string connectionId);
    public sealed virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllAsync();
    [AsyncStateMachineAttribute("Abp.RealTime.InMemoryOnlineClientStore/<GetAllByUserIdAsync>d__10")]
public sealed virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllByUserIdAsync(UserIdentifier userIdentifier);
}
[DefaultMemberAttribute("Item")]
public interface Abp.RealTime.IOnlineClient {
    public string ConnectionId { get; }
    public string IpAddress { get; }
    public Nullable`1<int> TenantId { get; }
    public Nullable`1<long> UserId { get; }
    public DateTime ConnectTime { get; }
    public object Item { get; public set; }
    public Dictionary`2<string, object> Properties { get; }
    public abstract virtual string get_ConnectionId();
    public abstract virtual string get_IpAddress();
    public abstract virtual Nullable`1<int> get_TenantId();
    public abstract virtual Nullable`1<long> get_UserId();
    public abstract virtual DateTime get_ConnectTime();
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual Dictionary`2<string, object> get_Properties();
}
public interface Abp.RealTime.IOnlineClientManager {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ClientConnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ClientConnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ClientDisconnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ClientDisconnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UserConnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UserConnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UserDisconnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UserDisconnected(EventHandler`1<OnlineUserEventArgs> value);
    public abstract virtual Task AddAsync(IOnlineClient client);
    public abstract virtual Task`1<bool> RemoveAsync(string connectionId);
    public abstract virtual Task`1<IOnlineClient> GetByConnectionIdOrNullAsync(string connectionId);
    public abstract virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllClientsAsync();
    public abstract virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllByUserIdAsync(IUserIdentifier user);
}
public interface Abp.RealTime.IOnlineClientManager`1 {
}
public interface Abp.RealTime.IOnlineClientStore {
    public abstract virtual Task AddAsync(IOnlineClient client);
    public abstract virtual Task`1<bool> RemoveAsync(string connectionId);
    public abstract virtual Task`1<bool> TryRemoveAsync(string connectionId, Action`1<IOnlineClient> clientAction);
    public abstract virtual Task`1<bool> TryGetAsync(string connectionId, Action`1<IOnlineClient> clientAction);
    public abstract virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllAsync();
    public abstract virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllByUserIdAsync(UserIdentifier userIdentifier);
}
[DefaultMemberAttribute("Item")]
public class Abp.RealTime.OnlineClient : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ConnectTime>k__BackingField;
    private Dictionary`2<string, object> _properties;
    public string ConnectionId { get; public set; }
    public string IpAddress { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public Nullable`1<long> UserId { get; public set; }
    public DateTime ConnectTime { get; public set; }
    public object Item { get; public set; }
    public Dictionary`2<string, object> Properties { get; public set; }
    public OnlineClient(string connectionId, string ipAddress, Nullable`1<int> tenantId, Nullable`1<long> userId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ConnectTime();
    [CompilerGeneratedAttribute]
public void set_ConnectTime(DateTime value);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual Dictionary`2<string, object> get_Properties();
    public void set_Properties(Dictionary`2<string, object> value);
    public virtual string ToString();
}
public class Abp.RealTime.OnlineClientEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IOnlineClient <Client>k__BackingField;
    public IOnlineClient Client { get; }
    public OnlineClientEventArgs(IOnlineClient client);
    [CompilerGeneratedAttribute]
public IOnlineClient get_Client();
}
[ExtensionAttribute]
public static class Abp.RealTime.OnlineClientExtensions : object {
    [ExtensionAttribute]
public static UserIdentifier ToUserIdentifierOrNull(IOnlineClient onlineClient);
}
public class Abp.RealTime.OnlineClientManager : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<OnlineClientEventArgs> ClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<OnlineClientEventArgs> ClientDisconnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<OnlineUserEventArgs> UserConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<OnlineUserEventArgs> UserDisconnected;
    [CompilerGeneratedAttribute]
private IOnlineClientStore <Store>k__BackingField;
    protected IOnlineClientStore Store { get; }
    public OnlineClientManager(IOnlineClientStore store);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ClientConnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ClientConnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ClientDisconnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ClientDisconnected(EventHandler`1<OnlineClientEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UserConnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UserConnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UserDisconnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UserDisconnected(EventHandler`1<OnlineUserEventArgs> value);
    [CompilerGeneratedAttribute]
protected IOnlineClientStore get_Store();
    [AsyncStateMachineAttribute("Abp.RealTime.OnlineClientManager/<AddAsync>d__16")]
public virtual Task AddAsync(IOnlineClient client);
    [AsyncStateMachineAttribute("Abp.RealTime.OnlineClientManager/<RemoveAsync>d__17")]
public virtual Task`1<bool> RemoveAsync(string connectionId);
    [AsyncStateMachineAttribute("Abp.RealTime.OnlineClientManager/<GetByConnectionIdOrNullAsync>d__18")]
public virtual Task`1<IOnlineClient> GetByConnectionIdOrNullAsync(string connectionId);
    public sealed virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllClientsAsync();
    [AsyncStateMachineAttribute("Abp.RealTime.OnlineClientManager/<GetAllByUserIdAsync>d__20")]
public virtual Task`1<IReadOnlyList`1<IOnlineClient>> GetAllByUserIdAsync(IUserIdentifier user);
}
[ExtensionAttribute]
public static class Abp.RealTime.OnlineClientManagerExtensions : object {
    [AsyncStateMachineAttribute("Abp.RealTime.OnlineClientManagerExtensions/<IsOnlineAsync>d__0")]
[ExtensionAttribute]
public static Task`1<bool> IsOnlineAsync(IOnlineClientManager onlineClientManager, UserIdentifier user);
    [AsyncStateMachineAttribute("Abp.RealTime.OnlineClientManagerExtensions/<RemoveAsync>d__1")]
[ExtensionAttribute]
public static Task`1<bool> RemoveAsync(IOnlineClientManager onlineClientManager, IOnlineClient client);
}
public class Abp.RealTime.OnlineUserEventArgs : OnlineClientEventArgs {
    [CompilerGeneratedAttribute]
private UserIdentifier <User>k__BackingField;
    public UserIdentifier User { get; }
    public OnlineUserEventArgs(UserIdentifier user, IOnlineClient client);
    [CompilerGeneratedAttribute]
public UserIdentifier get_User();
}
public class Abp.Reflection.AbpAssemblyFinder : object {
    private IAbpModuleManager _moduleManager;
    public AbpAssemblyFinder(IAbpModuleManager moduleManager);
    public sealed virtual List`1<Assembly> GetAllAssemblies();
}
internal static class Abp.Reflection.AssemblyHelper : object {
    public static List`1<Assembly> GetAllAssembliesInFolder(string folderPath, SearchOption searchOption);
}
[ExtensionAttribute]
public static class Abp.Reflection.Extensions.AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetDirectoryPathOrNull(Assembly assembly);
}
[ExtensionAttribute]
public static class Abp.Reflection.Extensions.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static TAttribute GetSingleAttributeOrNull(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static TAttribute GetSingleAttributeOfTypeOrBaseTypesOrNull(Type type, bool inherit);
}
[ExtensionAttribute]
public static class Abp.Reflection.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string methodName, int pParametersCount, int pGenericArgumentsCount);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type type, Type targetType);
}
public interface Abp.Reflection.IAssemblyFinder {
    public abstract virtual List`1<Assembly> GetAllAssemblies();
}
public interface Abp.Reflection.ITypeFinder {
    public abstract virtual Type[] Find(Func`2<Type, bool> predicate);
    public abstract virtual Type[] FindAll();
}
public static class Abp.Reflection.ProxyHelper : object {
    public static object UnProxy(object obj);
    public static Type GetUnproxiedType(object obj);
}
internal static class Abp.Reflection.ReflectionHelper : object {
    public static bool IsAssignableToGenericType(Type givenType, Type genericType);
    public static List`1<object> GetAttributesOfMemberAndDeclaringType(MemberInfo memberInfo, bool inherit);
    public static List`1<object> GetAttributesOfMemberAndType(MemberInfo memberInfo, Type type, bool inherit);
    public static List`1<TAttribute> GetAttributesOfMemberAndDeclaringType(MemberInfo memberInfo, bool inherit);
    public static List`1<TAttribute> GetAttributesOfMemberAndType(MemberInfo memberInfo, Type type, bool inherit);
    public static TAttribute GetSingleAttributeOfMemberOrDeclaringTypeOrDefault(MemberInfo memberInfo, TAttribute defaultValue, bool inherit);
    public static TAttribute GetSingleAttributeOrDefault(MemberInfo memberInfo, TAttribute defaultValue, bool inherit);
    internal static object GetPropertyByPath(object obj, Type objectType, string propertyPath);
    internal static object GetValueByPath(object obj, Type objectType, string propertyPath);
    internal static void SetValueByPath(object obj, Type objectType, string propertyPath, object value);
    internal static bool IsPropertyGetterSetterMethod(MethodInfo method, Type type);
    [AsyncStateMachineAttribute("Abp.Reflection.ReflectionHelper/<InvokeAsync>d__11")]
internal static Task`1<object> InvokeAsync(MethodInfo method, object obj, Object[] parameters);
}
public class Abp.Reflection.TypeFinder : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IAssemblyFinder _assemblyFinder;
    private object _syncObj;
    private Type[] _types;
    public ILogger Logger { get; public set; }
    public TypeFinder(IAssemblyFinder assemblyFinder);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual Type[] Find(Func`2<Type, bool> predicate);
    public sealed virtual Type[] FindAll();
    private Type[] GetAllTypes();
    private List`1<Type> CreateTypeList();
}
internal static class Abp.Reflection.TypeHelper : object {
    private static IReadOnlyList`1<string> SystemAssemblyNames;
    private static TypeHelper();
    public static bool IsFunc(object obj);
    public static bool IsFunc(object obj);
    public static bool IsPrimitiveExtendedIncludingNullable(Type type, bool includeEnums);
    private static bool IsPrimitiveExtended(Type type, bool includeEnums);
    public static StringBuilder SerializeType(Type type, bool withAssemblyName, StringBuilder typeNameBuilder);
    private static StringBuilder SerializeTypes(Type[] types, char beginTypeDelimiter, char endTypeDelimiter, StringBuilder typeNamesBuilder);
}
public class Abp.RegularGuidGenerator : object {
    public virtual Guid Create();
}
public class Abp.Resources.Embedded.EmbeddedResourceItem : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedUtc>k__BackingField;
    public string FileName { get; }
    public string FileExtension { get; }
    public Byte[] Content { get; public set; }
    public Assembly Assembly { get; public set; }
    public DateTime LastModifiedUtc { get; }
    internal EmbeddedResourceItem(string fileName, Byte[] content, Assembly assembly);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(Byte[] value);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModifiedUtc();
    private static string CalculateFileExtension(string fileName);
}
public class Abp.Resources.Embedded.EmbeddedResourceManager : object {
    private IEmbeddedResourcesConfiguration _configuration;
    private Lazy`1<Dictionary`2<string, EmbeddedResourceItem>> _resources;
    public EmbeddedResourceManager(IEmbeddedResourcesConfiguration configuration);
    public sealed virtual EmbeddedResourceItem GetResource(string fullPath);
    public sealed virtual IEnumerable`1<EmbeddedResourceItem> GetResources(string fullPath);
    private Dictionary`2<string, EmbeddedResourceItem> CreateResourcesDictionary();
}
public static class Abp.Resources.Embedded.EmbeddedResourcePathHelper : object {
    public static string NormalizePath(string fullPath);
    public static string EncodeAsResourcesPath(string subPath);
}
public class Abp.Resources.Embedded.EmbeddedResourcesConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<EmbeddedResourceSet> <Sources>k__BackingField;
    public List`1<EmbeddedResourceSet> Sources { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<EmbeddedResourceSet> get_Sources();
}
public class Abp.Resources.Embedded.EmbeddedResourceSet : object {
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceNamespace>k__BackingField;
    public string RootPath { get; }
    public Assembly Assembly { get; }
    public string ResourceNamespace { get; }
    public EmbeddedResourceSet(string rootPath, Assembly assembly, string resourceNamespace);
    [CompilerGeneratedAttribute]
public string get_RootPath();
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public string get_ResourceNamespace();
    internal void AddResources(Dictionary`2<string, EmbeddedResourceItem> resources);
    private string ConvertToRelativePath(string resourceName);
}
public interface Abp.Resources.Embedded.IEmbeddedResourceManager {
    public abstract virtual EmbeddedResourceItem GetResource(string fullResourcePath);
    public abstract virtual IEnumerable`1<EmbeddedResourceItem> GetResources(string fullResourcePath);
}
public interface Abp.Resources.Embedded.IEmbeddedResourcesConfiguration {
    public List`1<EmbeddedResourceSet> Sources { get; }
    public abstract virtual List`1<EmbeddedResourceSet> get_Sources();
}
public abstract class Abp.Runtime.Caching.AbpCacheBase : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ILogger Logger { get; public set; }
    public string Name { get; }
    protected AbpCacheBase(string name);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public abstract virtual void Clear();
    public virtual Task ClearAsync();
    public virtual void Dispose();
}
public abstract class Abp.Runtime.Caching.AbpCacheBase`2 : AbpCacheBase {
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultSlidingExpireTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, DateTimeOffset> <DefaultAbsoluteExpireTimeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DefaultAbsoluteExpireTime>k__BackingField;
    protected SemaphoreSlim SemaphoreSlim;
    public TimeSpan DefaultSlidingExpireTime { get; public set; }
    public Func`2<string, DateTimeOffset> DefaultAbsoluteExpireTimeFactory { get; public set; }
    public Nullable`1<DateTimeOffset> DefaultAbsoluteExpireTime { get; public set; }
    protected AbpCacheBase`2(string name);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_DefaultSlidingExpireTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultSlidingExpireTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<string, DateTimeOffset> get_DefaultAbsoluteExpireTimeFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultAbsoluteExpireTimeFactory(Func`2<string, DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_DefaultAbsoluteExpireTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultAbsoluteExpireTime(Nullable`1<DateTimeOffset> value);
    public virtual TValue Get(TKey key, Func`2<TKey, TValue> factory);
    public virtual TValue[] Get(TKey[] keys, Func`2<TKey, TValue> factory);
    protected virtual bool IsDefaultValue(TValue value);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.AbpCacheBase`2/<GetAsync>d__17")]
public virtual Task`1<TValue> GetAsync(TKey key, Func`2<TKey, Task`1<TValue>> factory);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.AbpCacheBase`2/<GetAsync>d__18")]
public virtual Task`1<TValue[]> GetAsync(TKey[] keys, Func`2<TKey, Task`1<TValue>> factory);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
    public virtual ConditionalValue`1[] TryGetValues(TKey[] keys);
    public virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(TKey key);
    public virtual Task`1<ConditionalValue`1[]> TryGetValuesAsync(TKey[] keys);
    public virtual TValue GetOrDefault(TKey key);
    public virtual TValue[] GetOrDefault(TKey[] keys);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.AbpCacheBase`2/<GetOrDefaultAsync>d__25")]
public virtual Task`1<TValue> GetOrDefaultAsync(TKey key);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.AbpCacheBase`2/<GetOrDefaultAsync>d__26")]
public virtual Task`1<TValue[]> GetOrDefaultAsync(TKey[] keys);
    public abstract virtual void Set(TKey key, TValue value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public virtual void Set(KeyValuePair`2[] pairs, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public virtual Task SetAsync(TKey key, TValue value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public virtual Task SetAsync(KeyValuePair`2[] pairs, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public abstract virtual void Remove(TKey key);
    public virtual void Remove(TKey[] keys);
    public virtual Task RemoveAsync(TKey key);
    public virtual Task RemoveAsync(TKey[] keys);
}
public class Abp.Runtime.Caching.AbpCacheData : object {
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Payload { get; public set; }
    public string Type { get; public set; }
    public AbpCacheData(string type, string payload);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    public static AbpCacheData Deserialize(string serializedCacheData);
    public static AbpCacheData Serialize(object obj, bool withAssemblyName);
}
public static class Abp.Runtime.Caching.AbpCacheNames : object {
    public static string ApplicationSettings;
    public static string TenantSettings;
    public static string UserSettings;
    public static string LocalizationScripts;
}
public abstract class Abp.Runtime.Caching.CacheBase : AbpCacheBase`2<string, object> {
    protected CacheBase(string name);
}
[ExtensionAttribute]
public static class Abp.Runtime.Caching.CacheExtensions : object {
    [ExtensionAttribute]
public static ITypedCache`2<TKey, TValue> AsTyped(ICache cache);
}
[ObsoleteAttribute("Use CacheManagerBase<TCache> instead.")]
public abstract class Abp.Runtime.Caching.CacheManagerBase : CacheManagerBase`1<ICache> {
    protected CacheManagerBase(ICachingConfiguration configuration);
}
public abstract class Abp.Runtime.Caching.CacheManagerBase`1 : object {
    protected ICachingConfiguration Configuration;
    protected ConcurrentDictionary`2<string, TCache> Caches;
    protected CacheManagerBase`1(ICachingConfiguration configuration);
    public sealed virtual IReadOnlyList`1<TCache> GetAllCaches();
    public virtual TCache GetCache(string name);
    protected abstract virtual void DisposeCaches();
    public virtual void Dispose();
    protected abstract virtual TCache CreateCacheImplementation(string name);
    [CompilerGeneratedAttribute]
private TCache <GetCache>b__4_0(string cacheName);
}
[ExtensionAttribute]
public static class Abp.Runtime.Caching.CacheManagerExtensions : object {
    [ExtensionAttribute]
public static ITypedCache`2<TKey, TValue> GetCache(ICacheManager cacheManager, string name);
}
internal class Abp.Runtime.Caching.Configuration.CacheConfigurator : object {
    [CompilerGeneratedAttribute]
private string <CacheName>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ICacheOptions> <InitAction>k__BackingField;
    public string CacheName { get; private set; }
    public Action`1<ICacheOptions> InitAction { get; private set; }
    public CacheConfigurator(Action`1<ICacheOptions> initAction);
    public CacheConfigurator(string cacheName, Action`1<ICacheOptions> initAction);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheName();
    [CompilerGeneratedAttribute]
private void set_CacheName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<ICacheOptions> get_InitAction();
    [CompilerGeneratedAttribute]
private void set_InitAction(Action`1<ICacheOptions> value);
}
internal class Abp.Runtime.Caching.Configuration.CachingConfiguration : object {
    [CompilerGeneratedAttribute]
private IAbpStartupConfiguration <AbpConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryCacheOptions <MemoryCacheOptions>k__BackingField;
    private List`1<ICacheConfigurator> _configurators;
    public IAbpStartupConfiguration AbpConfiguration { get; private set; }
    public IReadOnlyList`1<ICacheConfigurator> Configurators { get; }
    public MemoryCacheOptions MemoryCacheOptions { get; public set; }
    public CachingConfiguration(IAbpStartupConfiguration abpConfiguration);
    [CompilerGeneratedAttribute]
public sealed virtual IAbpStartupConfiguration get_AbpConfiguration();
    [CompilerGeneratedAttribute]
private void set_AbpConfiguration(IAbpStartupConfiguration value);
    public sealed virtual IReadOnlyList`1<ICacheConfigurator> get_Configurators();
    [CompilerGeneratedAttribute]
public sealed virtual MemoryCacheOptions get_MemoryCacheOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MemoryCacheOptions(MemoryCacheOptions value);
    public sealed virtual void ConfigureAll(Action`1<ICacheOptions> initAction);
    public sealed virtual void Configure(string cacheName, Action`1<ICacheOptions> initAction);
}
public interface Abp.Runtime.Caching.Configuration.ICacheConfigurator {
    public string CacheName { get; }
    public Action`1<ICacheOptions> InitAction { get; }
    public abstract virtual string get_CacheName();
    public abstract virtual Action`1<ICacheOptions> get_InitAction();
}
public interface Abp.Runtime.Caching.Configuration.ICachingConfiguration {
    public IAbpStartupConfiguration AbpConfiguration { get; }
    public IReadOnlyList`1<ICacheConfigurator> Configurators { get; }
    public MemoryCacheOptions MemoryCacheOptions { get; public set; }
    public abstract virtual IAbpStartupConfiguration get_AbpConfiguration();
    public abstract virtual IReadOnlyList`1<ICacheConfigurator> get_Configurators();
    public abstract virtual MemoryCacheOptions get_MemoryCacheOptions();
    public abstract virtual void set_MemoryCacheOptions(MemoryCacheOptions value);
    public abstract virtual void ConfigureAll(Action`1<ICacheOptions> initAction);
    public abstract virtual void Configure(string cacheName, Action`1<ICacheOptions> initAction);
}
public interface Abp.Runtime.Caching.IAbpCache {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Clear();
    public abstract virtual Task ClearAsync();
}
public interface Abp.Runtime.Caching.IAbpCache`2 {
    public abstract virtual TValue Get(TKey key, Func`2<TKey, TValue> factory);
    public abstract virtual TValue[] Get(TKey[] keys, Func`2<TKey, TValue> factory);
    public abstract virtual Task`1<TValue> GetAsync(TKey key, Func`2<TKey, Task`1<TValue>> factory);
    public abstract virtual Task`1<TValue[]> GetAsync(TKey[] keys, Func`2<TKey, Task`1<TValue>> factory);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(TKey key);
    public abstract virtual ConditionalValue`1[] TryGetValues(TKey[] keys);
    public abstract virtual Task`1<ConditionalValue`1[]> TryGetValuesAsync(TKey[] keys);
    public abstract virtual TValue GetOrDefault(TKey key);
    public abstract virtual TValue[] GetOrDefault(TKey[] keys);
    public abstract virtual Task`1<TValue> GetOrDefaultAsync(TKey key);
    public abstract virtual Task`1<TValue[]> GetOrDefaultAsync(TKey[] keys);
    public abstract virtual void Set(TKey key, TValue value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public abstract virtual void Set(KeyValuePair`2[] pairs, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public abstract virtual Task SetAsync(TKey key, TValue value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public abstract virtual Task SetAsync(KeyValuePair`2[] pairs, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public abstract virtual void Remove(TKey key);
    public abstract virtual void Remove(TKey[] keys);
    public abstract virtual Task RemoveAsync(TKey key);
    public abstract virtual Task RemoveAsync(TKey[] keys);
}
public interface Abp.Runtime.Caching.ICache {
}
public interface Abp.Runtime.Caching.ICacheManager {
}
public interface Abp.Runtime.Caching.ICacheManager`1 {
    public abstract virtual IReadOnlyList`1<TCache> GetAllCaches();
    public abstract virtual TCache GetCache(string name);
}
public interface Abp.Runtime.Caching.ICacheOptions {
    public TimeSpan DefaultSlidingExpireTime { get; public set; }
    public Func`2<string, DateTimeOffset> DefaultAbsoluteExpireTimeFactory { get; public set; }
    public Nullable`1<DateTimeOffset> DefaultAbsoluteExpireTime { get; public set; }
    public abstract virtual TimeSpan get_DefaultSlidingExpireTime();
    public abstract virtual void set_DefaultSlidingExpireTime(TimeSpan value);
    public abstract virtual Func`2<string, DateTimeOffset> get_DefaultAbsoluteExpireTimeFactory();
    public abstract virtual void set_DefaultAbsoluteExpireTimeFactory(Func`2<string, DateTimeOffset> value);
    public abstract virtual Nullable`1<DateTimeOffset> get_DefaultAbsoluteExpireTime();
    public abstract virtual void set_DefaultAbsoluteExpireTime(Nullable`1<DateTimeOffset> value);
}
public interface Abp.Runtime.Caching.ITypedCache`2 {
    public ICache InternalCache { get; }
    public abstract virtual ICache get_InternalCache();
}
public class Abp.Runtime.Caching.Memory.AbpMemoryCache : CacheBase {
    private MemoryCache _memoryCache;
    private MemoryCacheOptions _memoryCacheOptions;
    public AbpMemoryCache(string name, MemoryCacheOptions memoryCacheOptions);
    public virtual bool TryGetValue(string key, Object& value);
    public virtual void Set(string key, object value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public virtual void Remove(string key);
    public virtual void Clear();
    public virtual void Dispose();
}
public class Abp.Runtime.Caching.Memory.AbpMemoryCacheManager : CacheManagerBase`1<ICache> {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public ILogger Logger { get; public set; }
    public AbpMemoryCacheManager(ICachingConfiguration configuration);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    protected virtual ICache CreateCacheImplementation(string name);
    protected virtual void DisposeCaches();
}
[ExtensionAttribute]
public static class Abp.Runtime.Caching.TypedCacheExtensions : object {
    [ExtensionAttribute]
public static TValue Get(ITypedCache`2<TKey, TValue> cache, TKey key, Func`1<TValue> factory);
    [ExtensionAttribute]
public static Task`1<TValue> GetAsync(ITypedCache`2<TKey, TValue> cache, TKey key, Func`1<Task`1<TValue>> factory);
}
public class Abp.Runtime.Caching.TypedCacheWrapper`2 : object {
    [CompilerGeneratedAttribute]
private ICache <InternalCache>k__BackingField;
    public string Name { get; }
    public TimeSpan DefaultSlidingExpireTime { get; public set; }
    public Nullable`1<DateTimeOffset> DefaultAbsoluteExpireTime { get; public set; }
    public Func`2<string, DateTimeOffset> DefaultAbsoluteExpireTimeFactory { get; public set; }
    public ICache InternalCache { get; private set; }
    public TypedCacheWrapper`2(ICache internalCache);
    public sealed virtual string get_Name();
    public sealed virtual TimeSpan get_DefaultSlidingExpireTime();
    public sealed virtual void set_DefaultSlidingExpireTime(TimeSpan value);
    public sealed virtual Nullable`1<DateTimeOffset> get_DefaultAbsoluteExpireTime();
    public sealed virtual void set_DefaultAbsoluteExpireTime(Nullable`1<DateTimeOffset> value);
    public sealed virtual Func`2<string, DateTimeOffset> get_DefaultAbsoluteExpireTimeFactory();
    public sealed virtual void set_DefaultAbsoluteExpireTimeFactory(Func`2<string, DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual ICache get_InternalCache();
    [CompilerGeneratedAttribute]
private void set_InternalCache(ICache value);
    public sealed virtual void Dispose();
    public sealed virtual void Clear();
    public sealed virtual Task ClearAsync();
    public sealed virtual TValue Get(TKey key, Func`2<TKey, TValue> factory);
    public sealed virtual TValue[] Get(TKey[] keys, Func`2<TKey, TValue> factory);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.TypedCacheWrapper`2/<GetAsync>d__21")]
public sealed virtual Task`1<TValue> GetAsync(TKey key, Func`2<TKey, Task`1<TValue>> factory);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.TypedCacheWrapper`2/<GetAsync>d__22")]
public sealed virtual Task`1<TValue[]> GetAsync(TKey[] keys, Func`2<TKey, Task`1<TValue>> factory);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.TypedCacheWrapper`2/<TryGetValueAsync>d__24")]
public sealed virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(TKey key);
    public sealed virtual ConditionalValue`1[] TryGetValues(TKey[] keys);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.TypedCacheWrapper`2/<TryGetValuesAsync>d__26")]
public sealed virtual Task`1<ConditionalValue`1[]> TryGetValuesAsync(TKey[] keys);
    protected ConditionalValue`1<TValue> CreateConditionalValue(ConditionalValue`1<object> conditionalValue);
    public sealed virtual TValue GetOrDefault(TKey key);
    public sealed virtual TValue[] GetOrDefault(TKey[] keys);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.TypedCacheWrapper`2/<GetOrDefaultAsync>d__30")]
public sealed virtual Task`1<TValue> GetOrDefaultAsync(TKey key);
    [AsyncStateMachineAttribute("Abp.Runtime.Caching.TypedCacheWrapper`2/<GetOrDefaultAsync>d__31")]
public sealed virtual Task`1<TValue[]> GetOrDefaultAsync(TKey[] keys);
    private TValue CastOrDefault(object value);
    public sealed virtual void Set(TKey key, TValue value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public sealed virtual void Set(KeyValuePair`2[] pairs, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public sealed virtual Task SetAsync(TKey key, TValue value, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public sealed virtual Task SetAsync(KeyValuePair`2[] pairs, Nullable`1<TimeSpan> slidingExpireTime, Nullable`1<DateTimeOffset> absoluteExpireTime);
    public sealed virtual void Remove(TKey key);
    public sealed virtual void Remove(TKey[] keys);
    public sealed virtual Task RemoveAsync(TKey key);
    public sealed virtual Task RemoveAsync(TKey[] keys);
}
public interface Abp.Runtime.IAmbientDataContext {
    public abstract virtual void SetData(string key, object value);
    public abstract virtual object GetData(string key);
}
public interface Abp.Runtime.IAmbientScopeProvider`1 {
    public abstract virtual T GetValue(string contextKey);
    public abstract virtual IDisposable BeginScope(string contextKey, T value);
}
public class Abp.Runtime.Remoting.AsyncLocalAmbientDataContext : object {
    private static ConcurrentDictionary`2<string, AsyncLocal`1<object>> AsyncLocalDictionary;
    private static AsyncLocalAmbientDataContext();
    public sealed virtual void SetData(string key, object value);
    public sealed virtual object GetData(string key);
}
public class Abp.Runtime.Remoting.DataContextAmbientScopeProvider`1 : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private static ConcurrentDictionary`2<string, ScopeItem<T>> ScopeDictionary;
    private IAmbientDataContext _dataContext;
    public ILogger Logger { get; public set; }
    public DataContextAmbientScopeProvider`1(IAmbientDataContext dataContext);
    private static DataContextAmbientScopeProvider`1();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual T GetValue(string contextKey);
    public sealed virtual IDisposable BeginScope(string contextKey, T value);
    private ScopeItem<T> GetCurrentItem(string contextKey);
}
public static class Abp.Runtime.Security.AbpClaimTypes : object {
    [CompilerGeneratedAttribute]
private static string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ImpersonatorUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ImpersonatorTenantId>k__BackingField;
    public static string UserName { get; public set; }
    public static string UserId { get; public set; }
    public static string Role { get; public set; }
    public static string TenantId { get; public set; }
    public static string ImpersonatorUserId { get; public set; }
    public static string ImpersonatorTenantId { get; public set; }
    private static AbpClaimTypes();
    [CompilerGeneratedAttribute]
public static string get_UserName();
    [CompilerGeneratedAttribute]
public static void set_UserName(string value);
    [CompilerGeneratedAttribute]
public static string get_UserId();
    [CompilerGeneratedAttribute]
public static void set_UserId(string value);
    [CompilerGeneratedAttribute]
public static string get_Role();
    [CompilerGeneratedAttribute]
public static void set_Role(string value);
    [CompilerGeneratedAttribute]
public static string get_TenantId();
    [CompilerGeneratedAttribute]
public static void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public static string get_ImpersonatorUserId();
    [CompilerGeneratedAttribute]
public static void set_ImpersonatorUserId(string value);
    [CompilerGeneratedAttribute]
public static string get_ImpersonatorTenantId();
    [CompilerGeneratedAttribute]
public static void set_ImpersonatorTenantId(string value);
}
[ExtensionAttribute]
public static class Abp.Runtime.Security.ClaimsIdentityExtensions : object {
    [ExtensionAttribute]
public static UserIdentifier GetUserIdentifierOrNull(IIdentity identity);
    [ExtensionAttribute]
public static Nullable`1<long> GetUserId(IIdentity identity);
    [ExtensionAttribute]
public static Nullable`1<int> GetTenantId(IIdentity identity);
    [ExtensionAttribute]
public static Nullable`1<long> GetImpersonatorUserId(IIdentity identity);
    [ExtensionAttribute]
public static Nullable`1<int> GetImpersonatorTenantId(IIdentity identity);
}
public class Abp.Runtime.Security.SimpleStringCipher : object {
    [CompilerGeneratedAttribute]
private static SimpleStringCipher <Instance>k__BackingField;
    public Byte[] InitVectorBytes;
    [CompilerGeneratedAttribute]
private static string <DefaultPassPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <DefaultInitVectorBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <DefaultSalt>k__BackingField;
    public static int DefaultKeysize;
    public static SimpleStringCipher Instance { get; }
    public static string DefaultPassPhrase { get; public set; }
    public static Byte[] DefaultInitVectorBytes { get; public set; }
    public static Byte[] DefaultSalt { get; public set; }
    private static SimpleStringCipher();
    [CompilerGeneratedAttribute]
public static SimpleStringCipher get_Instance();
    [CompilerGeneratedAttribute]
public static string get_DefaultPassPhrase();
    [CompilerGeneratedAttribute]
public static void set_DefaultPassPhrase(string value);
    [CompilerGeneratedAttribute]
public static Byte[] get_DefaultInitVectorBytes();
    [CompilerGeneratedAttribute]
public static void set_DefaultInitVectorBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public static Byte[] get_DefaultSalt();
    [CompilerGeneratedAttribute]
public static void set_DefaultSalt(Byte[] value);
    public string Encrypt(string plainText, string passPhrase, Byte[] salt, Nullable`1<int> keySize, Byte[] initVectorBytes);
    public string Decrypt(string cipherText, string passPhrase, Byte[] salt, Nullable`1<int> keySize, Byte[] initVectorBytes);
}
public static class Abp.Runtime.Serialization.BinarySerializationHelper : object {
    public static Byte[] Serialize(object obj);
    public static void Serialize(object obj, Stream stream);
    public static object Deserialize(Byte[] bytes);
    public static object Deserialize(Stream stream);
    public static object DeserializeExtended(Byte[] bytes);
    public static object DeserializeExtended(Stream stream);
    private static BinaryFormatter CreateBinaryFormatter(bool extended);
}
public abstract class Abp.Runtime.Session.AbpSessionBase : object {
    public static string SessionOverrideContextKey;
    [CompilerGeneratedAttribute]
private IMultiTenancyConfig <MultiTenancy>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmbientScopeProvider`1<SessionOverride> <SessionOverrideScopeProvider>k__BackingField;
    public IMultiTenancyConfig MultiTenancy { get; }
    public Nullable`1<long> UserId { get; }
    public Nullable`1<int> TenantId { get; }
    public Nullable`1<long> ImpersonatorUserId { get; }
    public Nullable`1<int> ImpersonatorTenantId { get; }
    public MultiTenancySides MultiTenancySide { get; }
    protected SessionOverride OverridedValue { get; }
    protected IAmbientScopeProvider`1<SessionOverride> SessionOverrideScopeProvider { get; }
    protected AbpSessionBase(IMultiTenancyConfig multiTenancy, IAmbientScopeProvider`1<SessionOverride> sessionOverrideScopeProvider);
    [CompilerGeneratedAttribute]
public IMultiTenancyConfig get_MultiTenancy();
    public abstract virtual Nullable`1<long> get_UserId();
    public abstract virtual Nullable`1<int> get_TenantId();
    public abstract virtual Nullable`1<long> get_ImpersonatorUserId();
    public abstract virtual Nullable`1<int> get_ImpersonatorTenantId();
    public virtual MultiTenancySides get_MultiTenancySide();
    protected SessionOverride get_OverridedValue();
    [CompilerGeneratedAttribute]
protected IAmbientScopeProvider`1<SessionOverride> get_SessionOverrideScopeProvider();
    public sealed virtual IDisposable Use(Nullable`1<int> tenantId, Nullable`1<long> userId);
}
[ExtensionAttribute]
public static class Abp.Runtime.Session.AbpSessionExtensions : object {
    [ExtensionAttribute]
public static long GetUserId(IAbpSession session);
    [ExtensionAttribute]
public static int GetTenantId(IAbpSession session);
    [ExtensionAttribute]
public static UserIdentifier ToUserIdentifier(IAbpSession session);
}
public class Abp.Runtime.Session.ClaimsAbpSession : AbpSessionBase {
    [CompilerGeneratedAttribute]
private IPrincipalAccessor <PrincipalAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantResolver <TenantResolver>k__BackingField;
    public Nullable`1<long> UserId { get; }
    public Nullable`1<int> TenantId { get; }
    public Nullable`1<long> ImpersonatorUserId { get; }
    public Nullable`1<int> ImpersonatorTenantId { get; }
    protected IPrincipalAccessor PrincipalAccessor { get; }
    protected ITenantResolver TenantResolver { get; }
    public ClaimsAbpSession(IPrincipalAccessor principalAccessor, IMultiTenancyConfig multiTenancy, ITenantResolver tenantResolver, IAmbientScopeProvider`1<SessionOverride> sessionOverrideScopeProvider);
    public virtual Nullable`1<long> get_UserId();
    public virtual Nullable`1<int> get_TenantId();
    public virtual Nullable`1<long> get_ImpersonatorUserId();
    public virtual Nullable`1<int> get_ImpersonatorTenantId();
    [CompilerGeneratedAttribute]
protected IPrincipalAccessor get_PrincipalAccessor();
    [CompilerGeneratedAttribute]
protected ITenantResolver get_TenantResolver();
}
public class Abp.Runtime.Session.DefaultPrincipalAccessor : object {
    public ClaimsPrincipal Principal { get; }
    public static DefaultPrincipalAccessor Instance { get; }
    public virtual ClaimsPrincipal get_Principal();
    public static DefaultPrincipalAccessor get_Instance();
}
public interface Abp.Runtime.Session.IAbpSession {
    public Nullable`1<long> UserId { get; }
    public Nullable`1<int> TenantId { get; }
    public MultiTenancySides MultiTenancySide { get; }
    public Nullable`1<long> ImpersonatorUserId { get; }
    public Nullable`1<int> ImpersonatorTenantId { get; }
    public abstract virtual Nullable`1<long> get_UserId();
    public abstract virtual Nullable`1<int> get_TenantId();
    public abstract virtual MultiTenancySides get_MultiTenancySide();
    public abstract virtual Nullable`1<long> get_ImpersonatorUserId();
    public abstract virtual Nullable`1<int> get_ImpersonatorTenantId();
    public abstract virtual IDisposable Use(Nullable`1<int> tenantId, Nullable`1<long> userId);
}
public interface Abp.Runtime.Session.IPrincipalAccessor {
    public ClaimsPrincipal Principal { get; }
    public abstract virtual ClaimsPrincipal get_Principal();
}
public class Abp.Runtime.Session.NullAbpSession : AbpSessionBase {
    [CompilerGeneratedAttribute]
private static NullAbpSession <Instance>k__BackingField;
    public static NullAbpSession Instance { get; }
    public Nullable`1<long> UserId { get; }
    public Nullable`1<int> TenantId { get; }
    public MultiTenancySides MultiTenancySide { get; }
    public Nullable`1<long> ImpersonatorUserId { get; }
    public Nullable`1<int> ImpersonatorTenantId { get; }
    private static NullAbpSession();
    [CompilerGeneratedAttribute]
public static NullAbpSession get_Instance();
    public virtual Nullable`1<long> get_UserId();
    public virtual Nullable`1<int> get_TenantId();
    public virtual MultiTenancySides get_MultiTenancySide();
    public virtual Nullable`1<long> get_ImpersonatorUserId();
    public virtual Nullable`1<int> get_ImpersonatorTenantId();
}
public class Abp.Runtime.Session.SessionOverride : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    public Nullable`1<long> UserId { get; }
    public Nullable`1<int> TenantId { get; }
    public SessionOverride(Nullable`1<int> tenantId, Nullable`1<long> userId);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
}
public interface Abp.Runtime.System.IOSPlatformProvider {
    public abstract virtual OSPlatform GetCurrentOSPlatform();
}
public class Abp.Runtime.System.OSPlatformProvider : object {
    public virtual OSPlatform GetCurrentOSPlatform();
}
public class Abp.Runtime.Validation.AbpValidationDefaultOptions : object {
    public static List`1<Func`2<Type, bool>> ConventionalValidationSelectorList;
    [CompilerGeneratedAttribute]
private List`1<Func`2<Type, bool>> <ConventionalValidationSelectors>k__BackingField;
    public List`1<Func`2<Type, bool>> ConventionalValidationSelectors { get; }
    private static AbpValidationDefaultOptions();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Func`2<Type, bool>> get_ConventionalValidationSelectors();
}
public class Abp.Runtime.Validation.AbpValidationException : AbpException {
    public static LogSeverity DefaultLogSeverity;
    [CompilerGeneratedAttribute]
private IList`1<ValidationResult> <ValidationErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private LogSeverity <Severity>k__BackingField;
    public IList`1<ValidationResult> ValidationErrors { get; public set; }
    public LogSeverity Severity { get; public set; }
    public AbpValidationException(SerializationInfo serializationInfo, StreamingContext context);
    public AbpValidationException(string message);
    public AbpValidationException(string message, IList`1<ValidationResult> validationErrors);
    public AbpValidationException(string message, Exception innerException);
    private static AbpValidationException();
    [CompilerGeneratedAttribute]
public IList`1<ValidationResult> get_ValidationErrors();
    [CompilerGeneratedAttribute]
public void set_ValidationErrors(IList`1<ValidationResult> value);
    [CompilerGeneratedAttribute]
public sealed virtual LogSeverity get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Severity(LogSeverity value);
}
[ExtensionAttribute]
internal static class Abp.Runtime.Validation.AbpValidationOptionsExtensions : object {
    [ExtensionAttribute]
public static bool IsConventionalValidationClass(IAbpValidationDefaultOptions options, Type type);
}
[ValidatorAttribute("NULL")]
public class Abp.Runtime.Validation.AlwaysValidValueValidator : ValueValidatorBase {
    public virtual bool IsValid(object value);
}
[ValidatorAttribute("BOOLEAN")]
public class Abp.Runtime.Validation.BooleanValueValidator : ValueValidatorBase {
    public virtual bool IsValid(object value);
}
public class Abp.Runtime.Validation.CustomValidationContext : object {
    [CompilerGeneratedAttribute]
private List`1<ValidationResult> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IIocResolver <IocResolver>k__BackingField;
    public List`1<ValidationResult> Results { get; }
    public IIocResolver IocResolver { get; }
    public CustomValidationContext(List`1<ValidationResult> results, IIocResolver iocResolver);
    [CompilerGeneratedAttribute]
public List`1<ValidationResult> get_Results();
    [CompilerGeneratedAttribute]
public IIocResolver get_IocResolver();
}
[ExtensionAttribute]
public static class Abp.Runtime.Validation.CustomValidationContextExtensions : object {
    [ExtensionAttribute]
public static string Localize(CustomValidationContext validationContext, string sourceName, string key);
}
[AttributeUsageAttribute("196")]
public class Abp.Runtime.Validation.DisableValidationAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Abp.Runtime.Validation.EnableValidationAttribute : Attribute {
}
public interface Abp.Runtime.Validation.IAbpValidationDefaultOptions {
    public List`1<Func`2<Type, bool>> ConventionalValidationSelectors { get; }
    public abstract virtual List`1<Func`2<Type, bool>> get_ConventionalValidationSelectors();
}
public interface Abp.Runtime.Validation.ICustomValidate {
    public abstract virtual void AddValidationErrors(CustomValidationContext context);
}
public class Abp.Runtime.Validation.Interception.CustomValidator : object {
    private IIocResolver _iocResolver;
    public CustomValidator(IIocResolver iocResolver);
    public sealed virtual IReadOnlyList`1<ValidationResult> Validate(object validatingObject);
}
public class Abp.Runtime.Validation.Interception.DataAnnotationsValidator : object {
    public virtual IReadOnlyList`1<ValidationResult> Validate(object validatingObject);
    protected virtual List`1<ValidationResult> GetDataAnnotationAttributeErrors(object validatingObject);
}
public interface Abp.Runtime.Validation.Interception.IMethodParameterValidator {
    public abstract virtual IReadOnlyList`1<ValidationResult> Validate(object validatingObject);
}
public class Abp.Runtime.Validation.Interception.MethodInvocationValidator : object {
    private static int MaxRecursiveParameterValidationDepth;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValidationResult> <ValidationErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IShouldNormalize> <ObjectsToBeNormalized>k__BackingField;
    private IValidationConfiguration _configuration;
    private IIocResolver _iocResolver;
    protected MethodInfo Method { get; private set; }
    protected Object[] ParameterValues { get; private set; }
    protected ParameterInfo[] Parameters { get; private set; }
    protected List`1<ValidationResult> ValidationErrors { get; }
    protected List`1<IShouldNormalize> ObjectsToBeNormalized { get; }
    public MethodInvocationValidator(IValidationConfiguration configuration, IIocResolver iocResolver);
    [CompilerGeneratedAttribute]
protected MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfo value);
    [CompilerGeneratedAttribute]
protected Object[] get_ParameterValues();
    [CompilerGeneratedAttribute]
private void set_ParameterValues(Object[] value);
    [CompilerGeneratedAttribute]
protected ParameterInfo[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(ParameterInfo[] value);
    [CompilerGeneratedAttribute]
protected List`1<ValidationResult> get_ValidationErrors();
    [CompilerGeneratedAttribute]
protected List`1<IShouldNormalize> get_ObjectsToBeNormalized();
    public virtual void Initialize(MethodInfo method, Object[] parameterValues);
    public void Validate();
    protected virtual void CheckInitialized();
    protected virtual bool IsValidationDisabled();
    protected virtual void ThrowValidationError();
    protected virtual void ValidateMethodParameter(ParameterInfo parameterInfo, object parameterValue);
    protected virtual void ValidateObjectRecursively(object validatingObject, int currentDepth);
    protected virtual void SetValidationErrors(object validatingObject);
    protected virtual bool ShouldValidateUsingValidator(object validatingObject, Type validatorType);
    protected virtual bool ShouldMakeDeepValidation(object validatingObject);
    private bool IsEnumerable(object validatingObject);
}
public class Abp.Runtime.Validation.Interception.ValidatableObjectValidator : object {
    public virtual IReadOnlyList`1<ValidationResult> Validate(object validatingObject);
}
public class Abp.Runtime.Validation.Interception.ValidationInterceptor : AbpInterceptorBase {
    private IIocResolver _iocResolver;
    public ValidationInterceptor(IIocResolver iocResolver);
    public virtual void InterceptSynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Runtime.Validation.Interception.ValidationInterceptor/<InternalInterceptAsynchronous>d__3")]
protected virtual Task InternalInterceptAsynchronous(IInvocation invocation);
    [AsyncStateMachineAttribute("Abp.Runtime.Validation.Interception.ValidationInterceptor/<InternalInterceptAsynchronous>d__4`1")]
protected virtual Task`1<TResult> InternalInterceptAsynchronous(IInvocation invocation);
}
internal static class Abp.Runtime.Validation.Interception.ValidationInterceptorRegistrar : object {
    public static void Initialize(IIocManager iocManager);
}
public interface Abp.Runtime.Validation.IShouldNormalize {
    public abstract virtual void Normalize();
}
[DefaultMemberAttribute("Item")]
public interface Abp.Runtime.Validation.IValueValidator {
    public string Name { get; }
    public object Item { get; public set; }
    public IDictionary`2<string, object> Attributes { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual IDictionary`2<string, object> get_Attributes();
    public abstract virtual bool IsValid(object value);
}
[ValidatorAttribute("NUMERIC")]
public class Abp.Runtime.Validation.NumericValueValidator : ValueValidatorBase {
    public int MinValue { get; public set; }
    public int MaxValue { get; public set; }
    public NumericValueValidator(int minValue, int maxValue);
    public int get_MinValue();
    public void set_MinValue(int value);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    public virtual bool IsValid(object value);
    protected virtual bool IsValidInternal(int value);
}
[ValidatorAttribute("STRING")]
public class Abp.Runtime.Validation.StringValueValidator : ValueValidatorBase {
    public bool AllowNull { get; public set; }
    public int MinLength { get; public set; }
    public int MaxLength { get; public set; }
    public string RegularExpression { get; public set; }
    public StringValueValidator(int minLength, int maxLength, string regularExpression, bool allowNull);
    public bool get_AllowNull();
    public void set_AllowNull(bool value);
    public int get_MinLength();
    public void set_MinLength(int value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_RegularExpression();
    public void set_RegularExpression(string value);
    public virtual bool IsValid(object value);
}
[AttributeUsageAttribute("4")]
public class Abp.Runtime.Validation.ValidatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public ValidatorAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public abstract class Abp.Runtime.Validation.ValueValidatorBase : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    public string Name { get; }
    public object Item { get; public set; }
    public IDictionary`2<string, object> Attributes { get; private set; }
    public virtual string get_Name();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    public abstract virtual bool IsValid(object value);
}
public class Abp.SequentialGuidGenerator : object {
    [CompilerGeneratedAttribute]
private static SequentialGuidGenerator <Instance>k__BackingField;
    private static RandomNumberGenerator Rng;
    [CompilerGeneratedAttribute]
private SequentialGuidDatabaseType <DatabaseType>k__BackingField;
    public static SequentialGuidGenerator Instance { get; }
    public SequentialGuidDatabaseType DatabaseType { get; public set; }
    private static SequentialGuidGenerator();
    [CompilerGeneratedAttribute]
public static SequentialGuidGenerator get_Instance();
    [CompilerGeneratedAttribute]
public SequentialGuidDatabaseType get_DatabaseType();
    [CompilerGeneratedAttribute]
public void set_DatabaseType(SequentialGuidDatabaseType value);
    public sealed virtual Guid Create();
    public Guid Create(SequentialGuidDatabaseType databaseType);
    public Guid Create(SequentialGuidType guidType);
}
public class Abp.Specifications.AndNotSpecification`1 : CompositeSpecification`1<T> {
    public AndNotSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public class Abp.Specifications.AndSpecification`1 : CompositeSpecification`1<T> {
    public AndSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public class Abp.Specifications.AnySpecification`1 : Specification`1<T> {
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public abstract class Abp.Specifications.CompositeSpecification`1 : Specification`1<T> {
    [CompilerGeneratedAttribute]
private ISpecification`1<T> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private ISpecification`1<T> <Right>k__BackingField;
    public ISpecification`1<T> Left { get; }
    public ISpecification`1<T> Right { get; }
    protected CompositeSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    [CompilerGeneratedAttribute]
public sealed virtual ISpecification`1<T> get_Left();
    [CompilerGeneratedAttribute]
public sealed virtual ISpecification`1<T> get_Right();
}
[ExtensionAttribute]
public static class Abp.Specifications.ExpressionFuncExtender : object {
    [ExtensionAttribute]
private static Expression`1<T> Compose(Expression`1<T> first, Expression`1<T> second, Func`3<Expression, Expression, Expression> merge);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
}
public class Abp.Specifications.ExpressionSpecification`1 : Specification`1<T> {
    private Expression`1<Func`2<T, bool>> _expression;
    public ExpressionSpecification`1(Expression`1<Func`2<T, bool>> expression);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public interface Abp.Specifications.ICompositeSpecification`1 {
    public ISpecification`1<T> Left { get; }
    public ISpecification`1<T> Right { get; }
    public abstract virtual ISpecification`1<T> get_Left();
    public abstract virtual ISpecification`1<T> get_Right();
}
public interface Abp.Specifications.ISpecification`1 {
    public abstract virtual bool IsSatisfiedBy(T obj);
    public abstract virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public interface Abp.Specifications.ISpecificationParser`1 {
    public abstract virtual TCriteria Parse(ISpecification`1<T> specification);
}
public class Abp.Specifications.NoneSpecification`1 : Specification`1<T> {
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public class Abp.Specifications.NotSpecification`1 : Specification`1<T> {
    private ISpecification`1<T> _specification;
    public NotSpecification`1(ISpecification`1<T> specification);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
public class Abp.Specifications.OrSpecification`1 : CompositeSpecification`1<T> {
    public OrSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
internal class Abp.Specifications.ParameterRebinder : ExpressionVisitor {
    private Dictionary`2<ParameterExpression, ParameterExpression> _map;
    internal ParameterRebinder(Dictionary`2<ParameterExpression, ParameterExpression> map);
    internal static Expression ReplaceParameters(Dictionary`2<ParameterExpression, ParameterExpression> map, Expression exp);
    protected virtual Expression VisitParameter(ParameterExpression p);
}
public abstract class Abp.Specifications.Specification`1 : object {
    public virtual bool IsSatisfiedBy(T obj);
    public abstract virtual Expression`1<Func`2<T, bool>> ToExpression();
    public static Expression`1<Func`2<T, bool>> op_Implicit(Specification`1<T> specification);
}
[ExtensionAttribute]
public static class Abp.Specifications.SpecificationExtensions : object {
    [ExtensionAttribute]
public static ISpecification`1<T> And(ISpecification`1<T> specification, ISpecification`1<T> other);
    [ExtensionAttribute]
public static ISpecification`1<T> Or(ISpecification`1<T> specification, ISpecification`1<T> other);
    [ExtensionAttribute]
public static ISpecification`1<T> AndNot(ISpecification`1<T> specification, ISpecification`1<T> other);
    [ExtensionAttribute]
public static ISpecification`1<T> Not(ISpecification`1<T> specification);
}
public class Abp.Text.FormattedStringValueExtracter : object {
    public ExtractionResult Extract(string str, string format, bool ignoreCase, Nullable`1<char> splitformatCharacter);
    private List`1<FormatStringToken> TokenizeFormat(string originalFormat, Nullable`1<char> splitformatCharacter);
    public static bool IsMatch(string str, string format, String[]& values, bool ignoreCase);
}
internal class Abp.Text.Formatting.FormatStringToken : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatStringTokenType <Type>k__BackingField;
    public string Text { get; private set; }
    public FormatStringTokenType Type { get; private set; }
    public FormatStringToken(string text, FormatStringTokenType type);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public FormatStringTokenType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(FormatStringTokenType value);
}
internal class Abp.Text.Formatting.FormatStringTokenizer : object {
    public List`1<FormatStringToken> Tokenize(string format, bool includeBracketsForDynamicValues);
}
internal enum Abp.Text.Formatting.FormatStringTokenType : Enum {
    public int value__;
    public static FormatStringTokenType ConstantText;
    public static FormatStringTokenType DynamicValue;
}
public static class Abp.Threading.AbpTaskCache : object {
    [CompilerGeneratedAttribute]
private static Task <CompletedTask>k__BackingField;
    public static Task CompletedTask { get; }
    private static AbpTaskCache();
    [CompilerGeneratedAttribute]
public static Task get_CompletedTask();
}
[ExtensionAttribute]
public static class Abp.Threading.AsyncHelper : object {
    [ExtensionAttribute]
public static bool IsAsync(MethodInfo method);
    public static TResult RunSync(Func`1<Task`1<TResult>> func);
    public static void RunSync(Func`1<Task> action);
}
public abstract class Abp.Threading.BackgroundWorkers.AsyncPeriodicBackgroundWorkerBase : BackgroundWorkerBase {
    protected AbpAsyncTimer Timer;
    protected AsyncPeriodicBackgroundWorkerBase(AbpAsyncTimer timer);
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
    [AsyncStateMachineAttribute("Abp.Threading.BackgroundWorkers.AsyncPeriodicBackgroundWorkerBase/<Timer_Elapsed>d__5")]
private Task Timer_Elapsed(AbpAsyncTimer timer);
    protected abstract virtual Task DoWorkAsync();
}
public abstract class Abp.Threading.BackgroundWorkers.BackgroundWorkerBase : RunnableBase {
    [CompilerGeneratedAttribute]
private ISettingManager <SettingManager>k__BackingField;
    private IUnitOfWorkManager _unitOfWorkManager;
    [CompilerGeneratedAttribute]
private ILocalizationManager <LocalizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizationSourceName>k__BackingField;
    private ILocalizationSource _localizationSource;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ISettingManager SettingManager { get; public set; }
    public IUnitOfWorkManager UnitOfWorkManager { get; public set; }
    protected IActiveUnitOfWork CurrentUnitOfWork { get; }
    protected ILocalizationManager LocalizationManager { get; public set; }
    protected string LocalizationSourceName { get; protected set; }
    protected ILocalizationSource LocalizationSource { get; }
    protected ILogger Logger { get; public set; }
    [CompilerGeneratedAttribute]
protected ISettingManager get_SettingManager();
    [CompilerGeneratedAttribute]
public void set_SettingManager(ISettingManager value);
    public IUnitOfWorkManager get_UnitOfWorkManager();
    public void set_UnitOfWorkManager(IUnitOfWorkManager value);
    protected IActiveUnitOfWork get_CurrentUnitOfWork();
    [CompilerGeneratedAttribute]
protected ILocalizationManager get_LocalizationManager();
    [CompilerGeneratedAttribute]
public void set_LocalizationManager(ILocalizationManager value);
    [CompilerGeneratedAttribute]
protected string get_LocalizationSourceName();
    [CompilerGeneratedAttribute]
protected void set_LocalizationSourceName(string value);
    protected ILocalizationSource get_LocalizationSource();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
    protected virtual string L(string name);
    protected virtual string L(string name, Object[] args);
    protected virtual string L(string name, CultureInfo culture);
    protected virtual string L(string name, CultureInfo culture, Object[] args);
    public virtual string ToString();
}
public class Abp.Threading.BackgroundWorkers.BackgroundWorkerManager : RunnableBase {
    private IIocResolver _iocResolver;
    private List`1<IBackgroundWorker> _backgroundJobs;
    private bool _isDisposed;
    public BackgroundWorkerManager(IIocResolver iocResolver);
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
    public sealed virtual void Add(IBackgroundWorker worker);
    public sealed virtual void Dispose();
}
public interface Abp.Threading.BackgroundWorkers.IBackgroundWorker {
}
public interface Abp.Threading.BackgroundWorkers.IBackgroundWorkerManager {
    public abstract virtual void Add(IBackgroundWorker worker);
}
public abstract class Abp.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase : BackgroundWorkerBase {
    protected AbpTimer Timer;
    protected PeriodicBackgroundWorkerBase(AbpTimer timer);
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
    private void Timer_Elapsed(object sender, EventArgs e);
    protected abstract virtual void DoWork();
}
public class Abp.Threading.CancellationTokenOverride : object {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public CancellationTokenOverride(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
public abstract class Abp.Threading.CancellationTokenProviderBase : object {
    public static string CancellationTokenOverrideContextKey;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmbientScopeProvider`1<CancellationTokenOverride> <CancellationTokenOverrideScopeProvider>k__BackingField;
    public CancellationToken Token { get; }
    public ILogger Logger { get; public set; }
    protected IAmbientScopeProvider`1<CancellationTokenOverride> CancellationTokenOverrideScopeProvider { get; }
    protected CancellationTokenOverride OverridedValue { get; }
    protected CancellationTokenProviderBase(IAmbientScopeProvider`1<CancellationTokenOverride> cancellationTokenOverrideScopeProvider);
    public abstract virtual CancellationToken get_Token();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
protected IAmbientScopeProvider`1<CancellationTokenOverride> get_CancellationTokenOverrideScopeProvider();
    protected CancellationTokenOverride get_OverridedValue();
    public sealed virtual IDisposable Use(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Abp.Threading.CancellationTokenProviderExtensions : object {
    [ExtensionAttribute]
public static CancellationToken FallbackToProvider(ICancellationTokenProvider provider, CancellationToken prefferedValue);
}
[ExtensionAttribute]
public static class Abp.Threading.Extensions.LockExtensions : object {
    [ExtensionAttribute]
public static void Locking(object source, Action action);
    [ExtensionAttribute]
public static void Locking(T source, Action`1<T> action);
    [ExtensionAttribute]
public static TResult Locking(object source, Func`1<TResult> func);
    [ExtensionAttribute]
public static TResult Locking(T source, Func`2<T, TResult> func);
}
[ExtensionAttribute]
public static class Abp.Threading.Extensions.SemaphoreSlimExtensions : object {
    [AsyncStateMachineAttribute("Abp.Threading.Extensions.SemaphoreSlimExtensions/<LockAsync>d__0")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim);
    [AsyncStateMachineAttribute("Abp.Threading.Extensions.SemaphoreSlimExtensions/<LockAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Threading.Extensions.SemaphoreSlimExtensions/<LockAsync>d__2")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, int millisecondsTimeout);
    [AsyncStateMachineAttribute("Abp.Threading.Extensions.SemaphoreSlimExtensions/<LockAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, int millisecondsTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Abp.Threading.Extensions.SemaphoreSlimExtensions/<LockAsync>d__4")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, TimeSpan timeout);
    [AsyncStateMachineAttribute("Abp.Threading.Extensions.SemaphoreSlimExtensions/<LockAsync>d__5")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, int millisecondsTimeout);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, int millisecondsTimeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, TimeSpan timeout);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static IDisposable GetDispose(SemaphoreSlim semaphoreSlim);
}
public interface Abp.Threading.ICancellationTokenProvider {
    public CancellationToken Token { get; }
    public abstract virtual CancellationToken get_Token();
    public abstract virtual IDisposable Use(CancellationToken cancellationToken);
}
public interface Abp.Threading.IRunnable {
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual void WaitToStop();
}
public class Abp.Threading.NullCancellationTokenProvider : CancellationTokenProviderBase {
    [CompilerGeneratedAttribute]
private static NullCancellationTokenProvider <Instance>k__BackingField;
    public static NullCancellationTokenProvider Instance { get; }
    public CancellationToken Token { get; }
    private static NullCancellationTokenProvider();
    [CompilerGeneratedAttribute]
public static NullCancellationTokenProvider get_Instance();
    public virtual CancellationToken get_Token();
}
public class Abp.Threading.OneTimeRunner : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _runBefore;
    public void Run(Action action);
}
public abstract class Abp.Threading.RunnableBase : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isRunning;
    public bool IsRunning { get; }
    public bool get_IsRunning();
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
}
[ExtensionAttribute]
public static class Abp.Threading.RunnableExtensions : object {
    [ExtensionAttribute]
public static void StopAndWaitToStop(IRunnable runnable);
}
public static class Abp.Threading.ThreadCultureSanitizer : object {
    public static void Sanitize();
}
public class Abp.Threading.Timers.AbpAsyncTimer : RunnableBase {
    public Func`2<AbpAsyncTimer, Task> Elapsed;
    [CompilerGeneratedAttribute]
private int <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunOnStart>k__BackingField;
    private Timer _taskTimer;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _running;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _performingTasks;
    public int Period { get; public set; }
    public bool RunOnStart { get; public set; }
    public AbpAsyncTimer(int period, bool runOnStart);
    [CompilerGeneratedAttribute]
public int get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(int value);
    [CompilerGeneratedAttribute]
public bool get_RunOnStart();
    [CompilerGeneratedAttribute]
public void set_RunOnStart(bool value);
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
    private void TimerCallBack(object state);
    [AsyncStateMachineAttribute("Abp.Threading.Timers.AbpAsyncTimer/<Timer_Elapsed>d__18")]
private Task Timer_Elapsed();
}
public class Abp.Threading.Timers.AbpTimer : RunnableBase {
    [CompilerGeneratedAttribute]
private EventHandler Elapsed;
    [CompilerGeneratedAttribute]
private int <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunOnStart>k__BackingField;
    private Timer _taskTimer;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _running;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _performingTasks;
    public int Period { get; public set; }
    public bool RunOnStart { get; public set; }
    public AbpTimer(int period, bool runOnStart);
    [CompilerGeneratedAttribute]
public void add_Elapsed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Elapsed(EventHandler value);
    [CompilerGeneratedAttribute]
public int get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(int value);
    [CompilerGeneratedAttribute]
public bool get_RunOnStart();
    [CompilerGeneratedAttribute]
public void set_RunOnStart(bool value);
    public virtual void Start();
    public virtual void Stop();
    public virtual void WaitToStop();
    private void TimerCallBack(object state);
}
public static class Abp.Timing.Clock : object {
    private static IClockProvider _provider;
    public static IClockProvider Provider { get; public set; }
    public static DateTime Now { get; }
    public static DateTimeKind Kind { get; }
    public static bool SupportsMultipleTimezone { get; }
    private static Clock();
    public static IClockProvider get_Provider();
    public static void set_Provider(IClockProvider value);
    public static DateTime get_Now();
    public static DateTimeKind get_Kind();
    public static bool get_SupportsMultipleTimezone();
    public static DateTime Normalize(DateTime dateTime);
}
public static class Abp.Timing.ClockProviders : object {
    [CompilerGeneratedAttribute]
private static UnspecifiedClockProvider <Unspecified>k__BackingField;
    [CompilerGeneratedAttribute]
private static LocalClockProvider <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private static UtcClockProvider <Utc>k__BackingField;
    public static UnspecifiedClockProvider Unspecified { get; }
    public static LocalClockProvider Local { get; }
    public static UtcClockProvider Utc { get; }
    private static ClockProviders();
    [CompilerGeneratedAttribute]
public static UnspecifiedClockProvider get_Unspecified();
    [CompilerGeneratedAttribute]
public static LocalClockProvider get_Local();
    [CompilerGeneratedAttribute]
public static UtcClockProvider get_Utc();
}
public class Abp.Timing.DateTimeRange : object {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    private static DateTime Now { get; }
    public static DateTimeRange Yesterday { get; }
    public static DateTimeRange Today { get; }
    public static DateTimeRange Tomorrow { get; }
    public static DateTimeRange LastMonth { get; }
    public static DateTimeRange ThisMonth { get; }
    public static DateTimeRange NextMonth { get; }
    public static DateTimeRange LastYear { get; }
    public static DateTimeRange ThisYear { get; }
    public static DateTimeRange NextYear { get; }
    public static DateTimeRange Last30Days { get; }
    public static DateTimeRange Last30DaysExceptToday { get; }
    public static DateTimeRange Last7Days { get; }
    public static DateTimeRange Last7DaysExceptToday { get; }
    public DateTimeRange(DateTime startTime, DateTime endTime);
    public DateTimeRange(DateTime startTime, TimeSpan timeSpan);
    public DateTimeRange(IDateTimeRange dateTimeRange);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndTime(DateTime value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    private static DateTime get_Now();
    public static DateTimeRange get_Yesterday();
    public static DateTimeRange get_Today();
    public static DateTimeRange get_Tomorrow();
    public static DateTimeRange get_LastMonth();
    public static DateTimeRange get_ThisMonth();
    public static DateTimeRange get_NextMonth();
    public static DateTimeRange get_LastYear();
    public static DateTimeRange get_ThisYear();
    public static DateTimeRange get_NextYear();
    public static DateTimeRange get_Last30Days();
    public static DateTimeRange get_Last30DaysExceptToday();
    public static DateTimeRange get_Last7Days();
    public static DateTimeRange get_Last7DaysExceptToday();
    public virtual string ToString();
}
[AttributeUsageAttribute("2180")]
public class Abp.Timing.DisableDateTimeNormalizationAttribute : Attribute {
}
public interface Abp.Timing.IClockProvider {
    public DateTime Now { get; }
    public DateTimeKind Kind { get; }
    public bool SupportsMultipleTimezone { get; }
    public abstract virtual DateTime get_Now();
    public abstract virtual DateTimeKind get_Kind();
    public abstract virtual bool get_SupportsMultipleTimezone();
    public abstract virtual DateTime Normalize(DateTime dateTime);
}
public interface Abp.Timing.IDateTimeRange {
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public abstract virtual DateTime get_StartTime();
    public abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_EndTime();
    public abstract virtual void set_EndTime(DateTime value);
    public abstract virtual TimeSpan get_TimeSpan();
    public abstract virtual void set_TimeSpan(TimeSpan value);
}
public interface Abp.Timing.IZonedDateTimeRange {
    public string Timezone { get; public set; }
    public DateTimeOffset StartTimeOffset { get; public set; }
    public DateTimeOffset EndTimeOffset { get; public set; }
    public DateTime StartTimeUtc { get; public set; }
    public DateTime EndTimeUtc { get; public set; }
    public abstract virtual string get_Timezone();
    public abstract virtual void set_Timezone(string value);
    public abstract virtual DateTimeOffset get_StartTimeOffset();
    public abstract virtual void set_StartTimeOffset(DateTimeOffset value);
    public abstract virtual DateTimeOffset get_EndTimeOffset();
    public abstract virtual void set_EndTimeOffset(DateTimeOffset value);
    public abstract virtual DateTime get_StartTimeUtc();
    public abstract virtual void set_StartTimeUtc(DateTime value);
    public abstract virtual DateTime get_EndTimeUtc();
    public abstract virtual void set_EndTimeUtc(DateTime value);
}
public class Abp.Timing.LocalClockProvider : object {
    public DateTime Now { get; }
    public DateTimeKind Kind { get; }
    public bool SupportsMultipleTimezone { get; }
    public sealed virtual DateTime get_Now();
    public sealed virtual DateTimeKind get_Kind();
    public sealed virtual bool get_SupportsMultipleTimezone();
    public sealed virtual DateTime Normalize(DateTime dateTime);
}
public interface Abp.Timing.Timezone.ITimeZoneConverter {
    public abstract virtual Nullable`1<DateTime> Convert(Nullable`1<DateTime> date, Nullable`1<int> tenantId, long userId);
    public abstract virtual Nullable`1<DateTime> Convert(Nullable`1<DateTime> date, int tenantId);
    public abstract virtual Nullable`1<DateTime> Convert(Nullable`1<DateTime> date);
}
public class Abp.Timing.Timezone.TimeZoneConverter : object {
    private ISettingManager _settingManager;
    public TimeZoneConverter(ISettingManager settingManager);
    public sealed virtual Nullable`1<DateTime> Convert(Nullable`1<DateTime> date, Nullable`1<int> tenantId, long userId);
    public sealed virtual Nullable`1<DateTime> Convert(Nullable`1<DateTime> date, int tenantId);
    public sealed virtual Nullable`1<DateTime> Convert(Nullable`1<DateTime> date);
}
[ExtensionAttribute]
public static class Abp.Timing.Timezone.TimezoneHelper : object {
    private static Dictionary`2<string, string> WindowsTimeZoneMappings;
    private static Dictionary`2<string, string> IanaTimeZoneMappings;
    private static object SyncObj;
    private static TimezoneHelper();
    public static string WindowsToIana(string windowsTimezoneId);
    public static string IanaToWindows(string ianaTimezoneId);
    public static Nullable`1<DateTime> Convert(Nullable`1<DateTime> date, string fromTimeZoneId, string toTimeZoneId);
    public static Nullable`1<DateTime> ConvertFromUtc(Nullable`1<DateTime> date, string toTimeZoneId);
    public static Nullable`1<DateTimeOffset> ConvertFromUtcToDateTimeOffset(Nullable`1<DateTime> date, string timeZoneId);
    public static Nullable`1<DateTimeOffset> ConvertToDateTimeOffset(Nullable`1<DateTime> date, string timeZoneId);
    public static DateTimeOffset ConvertToDateTimeOffset(DateTime date, string timeZoneId);
    private static DateTime GetDaylightTransition(DateTime date, TransitionTime transitionTime);
    [ExtensionAttribute]
private static DateTime NthOf(DateTime currentDate, int occurrence, DayOfWeek day);
    public static Nullable`1<DateTime> ConvertTimeByIanaTimeZoneId(Nullable`1<DateTime> date, string fromIanaTimeZoneId, string toIanaTimeZoneId);
    public static Nullable`1<DateTime> ConvertTimeFromUtcByIanaTimeZoneId(Nullable`1<DateTime> date, string toIanaTimeZoneId);
    public static Nullable`1<DateTime> ConvertTimeToUtcByIanaTimeZoneId(Nullable`1<DateTime> date, string fromIanaTimeZoneId);
    public static TimeZoneInfo FindTimeZoneInfo(string windowsOrIanaTimeZoneId);
    public static List`1<string> GetWindowsTimeZoneIds(bool ignoreTimeZoneNotFoundException);
    private static void GetTimezoneMappings();
    private static void AddWindowsMappingsToDictionary(Dictionary`2<string, string> timeZoneMappings, XmlNodeList defaultMappingNodes);
    private static void AddIanaMappingsToDictionary(Dictionary`2<string, string> timeZoneMappings, XmlNodeList defaultMappingNodes);
}
public static class Abp.Timing.TimingSettingNames : object {
    public static string TimeZone;
}
public class Abp.Timing.TimingSettingProvider : SettingProvider {
    public virtual IEnumerable`1<SettingDefinition> GetSettingDefinitions(SettingDefinitionProviderContext context);
    private static LocalizableString L(string name);
}
public class Abp.Timing.UnspecifiedClockProvider : object {
    public DateTime Now { get; }
    public DateTimeKind Kind { get; }
    public bool SupportsMultipleTimezone { get; }
    public sealed virtual DateTime get_Now();
    public sealed virtual DateTimeKind get_Kind();
    public sealed virtual bool get_SupportsMultipleTimezone();
    public sealed virtual DateTime Normalize(DateTime dateTime);
}
public class Abp.Timing.UtcClockProvider : object {
    public DateTime Now { get; }
    public DateTimeKind Kind { get; }
    public bool SupportsMultipleTimezone { get; }
    public sealed virtual DateTime get_Now();
    public sealed virtual DateTimeKind get_Kind();
    public sealed virtual bool get_SupportsMultipleTimezone();
    public sealed virtual DateTime Normalize(DateTime dateTime);
}
public class Abp.Timing.ZonedDateTimeRange : DateTimeRange {
    [CompilerGeneratedAttribute]
private string <Timezone>k__BackingField;
    public string Timezone { get; public set; }
    public DateTimeOffset StartTimeOffset { get; public set; }
    public DateTimeOffset EndTimeOffset { get; public set; }
    public DateTime StartTimeUtc { get; public set; }
    public DateTime EndTimeUtc { get; public set; }
    public DateTime Now { get; }
    public ZonedDateTimeRange Yesterday { get; }
    public ZonedDateTimeRange Today { get; }
    public ZonedDateTimeRange Tomorrow { get; }
    public ZonedDateTimeRange LastMonth { get; }
    public ZonedDateTimeRange ThisMonth { get; }
    public ZonedDateTimeRange NextMonth { get; }
    public ZonedDateTimeRange LastYear { get; }
    public ZonedDateTimeRange ThisYear { get; }
    public ZonedDateTimeRange NextYear { get; }
    public ZonedDateTimeRange Last30Days { get; }
    public ZonedDateTimeRange Last30DaysExceptToday { get; }
    public ZonedDateTimeRange Last7Days { get; }
    public ZonedDateTimeRange Last7DaysExceptToday { get; }
    public ZonedDateTimeRange(string timezone);
    public ZonedDateTimeRange(IDateTimeRange dateTimeRange, string timeZoneId);
    public ZonedDateTimeRange(IZonedDateTimeRange zonedDateTimeRange);
    public ZonedDateTimeRange(DateTime startTime, DateTime endTime, string timeZoneId);
    public ZonedDateTimeRange(DateTime startTime, TimeSpan timeSpan, string timeZoneId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Timezone();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timezone(string value);
    public sealed virtual DateTimeOffset get_StartTimeOffset();
    public sealed virtual void set_StartTimeOffset(DateTimeOffset value);
    public sealed virtual DateTimeOffset get_EndTimeOffset();
    public sealed virtual void set_EndTimeOffset(DateTimeOffset value);
    public sealed virtual DateTime get_StartTimeUtc();
    public sealed virtual void set_StartTimeUtc(DateTime value);
    public sealed virtual DateTime get_EndTimeUtc();
    public sealed virtual void set_EndTimeUtc(DateTime value);
    public DateTime get_Now();
    public ZonedDateTimeRange get_Yesterday();
    public ZonedDateTimeRange get_Today();
    public ZonedDateTimeRange get_Tomorrow();
    public ZonedDateTimeRange get_LastMonth();
    public ZonedDateTimeRange get_ThisMonth();
    public ZonedDateTimeRange get_NextMonth();
    public ZonedDateTimeRange get_LastYear();
    public ZonedDateTimeRange get_ThisYear();
    public ZonedDateTimeRange get_NextYear();
    public ZonedDateTimeRange get_Last30Days();
    public ZonedDateTimeRange get_Last30DaysExceptToday();
    public ZonedDateTimeRange get_Last7Days();
    public ZonedDateTimeRange get_Last7DaysExceptToday();
}
[ExtensionAttribute]
public static class Abp.Transactions.Extensions.IsolationLevelExtensions : object {
    [ExtensionAttribute]
public static IsolationLevel ToSystemDataIsolationLevel(IsolationLevel isolationLevel);
}
[InputTypeAttribute("CHECKBOX")]
public class Abp.UI.Inputs.CheckboxInputType : InputTypeBase {
    public CheckboxInputType(IValueValidator validator);
}
[InputTypeAttribute("COMBOBOX")]
public class Abp.UI.Inputs.ComboboxInputType : InputTypeBase {
    [CompilerGeneratedAttribute]
private ILocalizableComboboxItemSource <ItemSource>k__BackingField;
    public ILocalizableComboboxItemSource ItemSource { get; public set; }
    public ComboboxInputType(ILocalizableComboboxItemSource itemSource);
    public ComboboxInputType(ILocalizableComboboxItemSource itemSource, IValueValidator validator);
    [CompilerGeneratedAttribute]
public ILocalizableComboboxItemSource get_ItemSource();
    [CompilerGeneratedAttribute]
public void set_ItemSource(ILocalizableComboboxItemSource value);
}
[DefaultMemberAttribute("Item")]
public interface Abp.UI.Inputs.IInputType {
    public string Name { get; }
    public object Item { get; public set; }
    public IDictionary`2<string, object> Attributes { get; }
    public IValueValidator Validator { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual IDictionary`2<string, object> get_Attributes();
    public abstract virtual IValueValidator get_Validator();
    public abstract virtual void set_Validator(IValueValidator value);
}
public interface Abp.UI.Inputs.ILocalizableComboboxItem {
    public string Value { get; public set; }
    [JsonConverterAttribute("Abp.Localization.LocalizableStringToStringJsonConverter")]
public ILocalizableString DisplayText { get; public set; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual ILocalizableString get_DisplayText();
    public abstract virtual void set_DisplayText(ILocalizableString value);
}
public interface Abp.UI.Inputs.ILocalizableComboboxItemSource {
    public ICollection`1<ILocalizableComboboxItem> Items { get; }
    public abstract virtual ICollection`1<ILocalizableComboboxItem> get_Items();
}
[AttributeUsageAttribute("4")]
public class Abp.UI.Inputs.InputTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public InputTypeAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public abstract class Abp.UI.Inputs.InputTypeBase : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueValidator <Validator>k__BackingField;
    public string Name { get; }
    public object Item { get; public set; }
    public IDictionary`2<string, object> Attributes { get; private set; }
    public IValueValidator Validator { get; public set; }
    protected InputTypeBase(IValueValidator validator);
    public virtual string get_Name();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IValueValidator get_Validator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Validator(IValueValidator value);
    public static string GetName();
}
public class Abp.UI.Inputs.LocalizableComboboxItem : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayText>k__BackingField;
    public string Value { get; public set; }
    public ILocalizableString DisplayText { get; public set; }
    public LocalizableComboboxItem(string value, ILocalizableString displayText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalizableString get_DisplayText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayText(ILocalizableString value);
}
[InputTypeAttribute("SINGLE_LINE_STRING")]
public class Abp.UI.Inputs.SingleLineStringInputType : InputTypeBase {
    public SingleLineStringInputType(IValueValidator validator);
}
public class Abp.UI.Inputs.StaticLocalizableComboboxItemSource : object {
    [CompilerGeneratedAttribute]
private ICollection`1<ILocalizableComboboxItem> <Items>k__BackingField;
    public ICollection`1<ILocalizableComboboxItem> Items { get; private set; }
    public StaticLocalizableComboboxItemSource(ILocalizableComboboxItem[] items);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILocalizableComboboxItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(ICollection`1<ILocalizableComboboxItem> value);
}
public class Abp.UI.UserFriendlyException : AbpException {
    public static LogSeverity DefaultLogSeverity;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private LogSeverity <Severity>k__BackingField;
    public string Details { get; private set; }
    public int Code { get; public set; }
    public LogSeverity Severity { get; public set; }
    public UserFriendlyException(SerializationInfo serializationInfo, StreamingContext context);
    public UserFriendlyException(string message);
    public UserFriendlyException(string message, LogSeverity severity);
    public UserFriendlyException(int code, string message);
    public UserFriendlyException(string message, string details);
    public UserFriendlyException(int code, string message, string details);
    public UserFriendlyException(string message, Exception innerException);
    public UserFriendlyException(string message, string details, Exception innerException);
    private static UserFriendlyException();
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Code();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Code(int value);
    [CompilerGeneratedAttribute]
public sealed virtual LogSeverity get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Severity(LogSeverity value);
}
public class Abp.UserIdentifier : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    public Nullable`1<int> TenantId { get; protected set; }
    public long UserId { get; protected set; }
    public UserIdentifier(Nullable`1<int> tenantId, long userId);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
protected void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_UserId();
    [CompilerGeneratedAttribute]
protected void set_UserId(long value);
    public static UserIdentifier Parse(string userIdentifierString);
    public string ToUserIdentifierString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UserIdentifier left, UserIdentifier right);
    public static bool op_Inequality(UserIdentifier left, UserIdentifier right);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Abp.UserIdentifierExtensions : object {
    [ExtensionAttribute]
public static UserIdentifier ToUserIdentifier(IUserIdentifier userIdentifier);
}
internal class Abp.Utils.Etc.NullDisposable : object {
    [CompilerGeneratedAttribute]
private static NullDisposable <Instance>k__BackingField;
    public static NullDisposable Instance { get; }
    private static NullDisposable();
    [CompilerGeneratedAttribute]
public static NullDisposable get_Instance();
    public sealed virtual void Dispose();
}
public class Abp.Web.Http.AbpUrlHelper : object {
    public virtual string LocalPathAndQuery(string url, string localHostName, Nullable`1<int> localPort);
    protected virtual Uri ParseWithUriBuilder(string url);
    protected virtual Uri ParseWithUri(string url);
}
public interface Abp.Web.Http.IUrlHelper {
    public abstract virtual string LocalPathAndQuery(string url, string localHostName, Nullable`1<int> localPort);
}
[AttributeUsageAttribute("1092")]
public class Abp.Web.Models.DontWrapResultAttribute : WrapResultAttribute {
}
[AttributeUsageAttribute("1092")]
public class Abp.Web.Models.WrapResultAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <WrapOnSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogError>k__BackingField;
    public bool WrapOnSuccess { get; public set; }
    public bool WrapOnError { get; public set; }
    public bool LogError { get; public set; }
    public WrapResultAttribute(bool wrapOnSuccess, bool wrapOnError);
    [CompilerGeneratedAttribute]
public bool get_WrapOnSuccess();
    [CompilerGeneratedAttribute]
public void set_WrapOnSuccess(bool value);
    [CompilerGeneratedAttribute]
public bool get_WrapOnError();
    [CompilerGeneratedAttribute]
public void set_WrapOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogError();
    [CompilerGeneratedAttribute]
public void set_LogError(bool value);
}
public class Abp.Webhooks.BackgroundWorker.WebhookSenderJob : AsyncBackgroundJob`1<WebhookSenderArgs> {
    private IWebhooksConfiguration _webhooksConfiguration;
    private IWebhookSubscriptionManager _webhookSubscriptionManager;
    private IWebhookSendAttemptStore _webhookSendAttemptStore;
    private IWebhookSender _webhookSender;
    public WebhookSenderJob(IWebhooksConfiguration webhooksConfiguration, IWebhookSubscriptionManager webhookSubscriptionManager, IWebhookSendAttemptStore webhookSendAttemptStore, IWebhookSender webhookSender);
    [AsyncStateMachineAttribute("Abp.Webhooks.BackgroundWorker.WebhookSenderJob/<ExecuteAsync>d__5")]
public virtual Task ExecuteAsync(WebhookSenderArgs args);
    [AsyncStateMachineAttribute("Abp.Webhooks.BackgroundWorker.WebhookSenderJob/<SendWebhook>d__6")]
private Task SendWebhook(WebhookSenderArgs args);
    [AsyncStateMachineAttribute("Abp.Webhooks.BackgroundWorker.WebhookSenderJob/<TryDeactivateSubscriptionIfReachedMaxConsecutiveFailCount>d__7")]
private Task`1<bool> TryDeactivateSubscriptionIfReachedMaxConsecutiveFailCount(Nullable`1<int> tenantId, Guid subscriptionId);
}
public class Abp.Webhooks.DefaultWebhookPublisher : ApplicationService {
    [CompilerGeneratedAttribute]
private IWebhookEventStore <WebhookEventStore>k__BackingField;
    private IGuidGenerator _guidGenerator;
    private IBackgroundJobManager _backgroundJobManager;
    private IWebhookSubscriptionManager _webhookSubscriptionManager;
    private IWebhooksConfiguration _webhooksConfiguration;
    public IWebhookEventStore WebhookEventStore { get; public set; }
    public DefaultWebhookPublisher(IWebhookSubscriptionManager webhookSubscriptionManager, IWebhooksConfiguration webhooksConfiguration, IGuidGenerator guidGenerator, IBackgroundJobManager backgroundJobManager);
    [CompilerGeneratedAttribute]
public IWebhookEventStore get_WebhookEventStore();
    [CompilerGeneratedAttribute]
public void set_WebhookEventStore(IWebhookEventStore value);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookPublisher/<PublishAsync>d__9")]
public virtual Task PublishAsync(string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookPublisher/<PublishAsync>d__10")]
public virtual Task PublishAsync(string webhookName, object data, Nullable`1<int> tenantId, bool sendExactSameData, WebhookHeader headers);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookPublisher/<PublishAsync>d__11")]
public virtual Task PublishAsync(Nullable`1[] tenantIds, string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookPublisher/<PublishAsync>d__12")]
private Task PublishAsync(string webhookName, object data, List`1<WebhookSubscription> webhookSubscriptions, bool sendExactSameData, WebhookHeader headers);
    public virtual void Publish(string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    public virtual void Publish(string webhookName, object data, Nullable`1<int> tenantId, bool sendExactSameData, WebhookHeader headers);
    public virtual void Publish(Nullable`1[] tenantIds, string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    private void Publish(string webhookName, object data, List`1<WebhookSubscription> webhookSubscriptions, bool sendExactSameData, WebhookHeader headers);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookPublisher/<SaveAndGetWebhookAsync>d__17")]
protected virtual Task`1<WebhookEvent> SaveAndGetWebhookAsync(Nullable`1<int> tenantId, string webhookName, object data);
    protected virtual WebhookEvent SaveAndGetWebhook(Nullable`1<int> tenantId, string webhookName, object data);
}
public class Abp.Webhooks.DefaultWebhookSender : DomainService {
    private IWebhooksConfiguration _webhooksConfiguration;
    private IWebhookManager _webhookManager;
    private static string FailedRequestDefaultContent;
    public DefaultWebhookSender(IWebhooksConfiguration webhooksConfiguration, IWebhookManager webhookManager);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookSender/<SendWebhookAsync>d__4")]
public sealed virtual Task`1<Guid> SendWebhookAsync(WebhookSenderArgs webhookSenderArgs);
    protected virtual HttpRequestMessage CreateWebhookRequestMessage(WebhookSenderArgs webhookSenderArgs);
    protected virtual void AddAdditionalHeaders(HttpRequestMessage request, WebhookSenderArgs webhookSenderArgs);
    [AsyncStateMachineAttribute("Abp.Webhooks.DefaultWebhookSender/<SendHttpRequest>d__7")]
protected virtual Task`1<ValueTuple`3<bool, HttpStatusCode, string>> SendHttpRequest(HttpRequestMessage request);
}
[ExtensionAttribute]
public static class Abp.Webhooks.Extensions.WebhookSubscriptionExtensions : object {
    [ExtensionAttribute]
public static bool IsSubscribed(WebhookSubscription webhookSubscription, string webhookName);
    [ExtensionAttribute]
public static WebhookSubscription ToWebhookSubscription(WebhookSubscriptionInfo webhookSubscriptionInfo);
}
public interface Abp.Webhooks.IWebhookDefinitionContext {
    public IWebhookDefinitionManager Manager { get; }
    public abstract virtual IWebhookDefinitionManager get_Manager();
}
public interface Abp.Webhooks.IWebhookDefinitionManager {
    public abstract virtual void Add(WebhookDefinition webhookDefinition);
    public abstract virtual WebhookDefinition GetOrNull(string name);
    public abstract virtual WebhookDefinition Get(string name);
    public abstract virtual IReadOnlyList`1<WebhookDefinition> GetAll();
    public abstract virtual bool Remove(string name);
    public abstract virtual bool Contains(string name);
    public abstract virtual Task`1<bool> IsAvailableAsync(Nullable`1<int> tenantId, string name);
    public abstract virtual bool IsAvailable(Nullable`1<int> tenantId, string name);
}
public interface Abp.Webhooks.IWebhookEventStore {
    public abstract virtual Task`1<Guid> InsertAndGetIdAsync(WebhookEvent webhookEvent);
    public abstract virtual Guid InsertAndGetId(WebhookEvent webhookEvent);
    public abstract virtual Task`1<WebhookEvent> GetAsync(Nullable`1<int> tenantId, Guid id);
    public abstract virtual WebhookEvent Get(Nullable`1<int> tenantId, Guid id);
}
public interface Abp.Webhooks.IWebhookManager {
    public abstract virtual Task`1<WebhookPayload> GetWebhookPayloadAsync(WebhookSenderArgs webhookSenderArgs);
    public abstract virtual WebhookPayload GetWebhookPayload(WebhookSenderArgs webhookSenderArgs);
    public abstract virtual void SignWebhookRequest(HttpRequestMessage request, string serializedBody, string secret);
    public abstract virtual string GetSerializedBody(WebhookSenderArgs webhookSenderArgs);
    public abstract virtual Task`1<string> GetSerializedBodyAsync(WebhookSenderArgs webhookSenderArgs);
    public abstract virtual Task`1<Guid> InsertAndGetIdWebhookSendAttemptAsync(WebhookSenderArgs webhookSenderArgs);
    public abstract virtual Task StoreResponseOnWebhookSendAttemptAsync(Guid webhookSendAttemptId, Nullable`1<int> tenantId, Nullable`1<HttpStatusCode> statusCode, string content);
}
public interface Abp.Webhooks.IWebhookPublisher {
    public abstract virtual Task PublishAsync(string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    public abstract virtual void Publish(string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    public abstract virtual Task PublishAsync(string webhookName, object data, Nullable`1<int> tenantId, bool sendExactSameData, WebhookHeader headers);
    public abstract virtual void Publish(string webhookName, object data, Nullable`1<int> tenantId, bool sendExactSameData, WebhookHeader headers);
    public abstract virtual Task PublishAsync(Nullable`1[] tenantIds, string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
    public abstract virtual void Publish(Nullable`1[] tenantIds, string webhookName, object data, bool sendExactSameData, WebhookHeader headers);
}
public interface Abp.Webhooks.IWebhooksConfiguration {
    public TimeSpan TimeoutDuration { get; public set; }
    public int MaxSendAttemptCount { get; public set; }
    public JsonSerializerOptions JsonSerializerOptions { get; public set; }
    public ITypeList`1<WebhookDefinitionProvider> Providers { get; }
    public bool IsAutomaticSubscriptionDeactivationEnabled { get; public set; }
    public int MaxConsecutiveFailCountBeforeDeactivateSubscription { get; public set; }
    public abstract virtual TimeSpan get_TimeoutDuration();
    public abstract virtual void set_TimeoutDuration(TimeSpan value);
    public abstract virtual int get_MaxSendAttemptCount();
    public abstract virtual void set_MaxSendAttemptCount(int value);
    public abstract virtual JsonSerializerOptions get_JsonSerializerOptions();
    public abstract virtual void set_JsonSerializerOptions(JsonSerializerOptions value);
    public abstract virtual ITypeList`1<WebhookDefinitionProvider> get_Providers();
    public abstract virtual bool get_IsAutomaticSubscriptionDeactivationEnabled();
    public abstract virtual void set_IsAutomaticSubscriptionDeactivationEnabled(bool value);
    public abstract virtual int get_MaxConsecutiveFailCountBeforeDeactivateSubscription();
    public abstract virtual void set_MaxConsecutiveFailCountBeforeDeactivateSubscription(int value);
}
public interface Abp.Webhooks.IWebhookSendAttemptStore {
    public abstract virtual Task InsertAsync(WebhookSendAttempt webhookSendAttempt);
    public abstract virtual void Insert(WebhookSendAttempt webhookSendAttempt);
    public abstract virtual Task UpdateAsync(WebhookSendAttempt webhookSendAttempt);
    public abstract virtual void Update(WebhookSendAttempt webhookSendAttempt);
    public abstract virtual Task DeleteAsync(WebhookSendAttempt webhookSendAttempt);
    public abstract virtual void Delete(WebhookSendAttempt webhookSendAttempt);
    public abstract virtual Task`1<WebhookSendAttempt> GetAsync(Nullable`1<int> tenantId, Guid id);
    public abstract virtual WebhookSendAttempt Get(Nullable`1<int> tenantId, Guid id);
    public abstract virtual Task`1<int> GetSendAttemptCountAsync(Nullable`1<int> tenantId, Guid webhookId, Guid webhookSubscriptionId);
    public abstract virtual int GetSendAttemptCount(Nullable`1<int> tenantId, Guid webhookId, Guid webhookSubscriptionId);
    public abstract virtual Task`1<bool> HasXConsecutiveFailAsync(Nullable`1<int> tenantId, Guid subscriptionId, int searchCount);
    public abstract virtual Task`1<IPagedResult`1<WebhookSendAttempt>> GetAllSendAttemptsBySubscriptionAsPagedListAsync(Nullable`1<int> tenantId, Guid subscriptionId, int maxResultCount, int skipCount);
    public abstract virtual IPagedResult`1<WebhookSendAttempt> GetAllSendAttemptsBySubscriptionAsPagedList(Nullable`1<int> tenantId, Guid subscriptionId, int maxResultCount, int skipCount);
    public abstract virtual Task`1<List`1<WebhookSendAttempt>> GetAllSendAttemptsByWebhookEventIdAsync(Nullable`1<int> tenantId, Guid webhookEventId);
    public abstract virtual List`1<WebhookSendAttempt> GetAllSendAttemptsByWebhookEventId(Nullable`1<int> tenantId, Guid webhookEventId);
}
public interface Abp.Webhooks.IWebhookSender {
    public abstract virtual Task`1<Guid> SendWebhookAsync(WebhookSenderArgs webhookSenderArgs);
}
public interface Abp.Webhooks.IWebhookSubscriptionManager {
    public abstract virtual Task`1<WebhookSubscription> GetAsync(Guid id);
    public abstract virtual WebhookSubscription Get(Guid id);
    public abstract virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId);
    public abstract virtual List`1<WebhookSubscription> GetAllSubscriptions(Nullable`1<int> tenantId);
    public abstract virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsIfFeaturesGrantedAsync(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual List`1<WebhookSubscription> GetAllSubscriptionsIfFeaturesGranted(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds);
    public abstract virtual List`1<WebhookSubscription> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds);
    public abstract virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsOfTenantsIfFeaturesGrantedAsync(Nullable`1[] tenantIds, string webhookName);
    public abstract virtual List`1<WebhookSubscription> GetAllSubscriptionsOfTenantsIfFeaturesGranted(Nullable`1[] tenantIds, string webhookName);
    public abstract virtual Task`1<bool> IsSubscribedAsync(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual bool IsSubscribed(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual Task AddOrUpdateSubscriptionAsync(WebhookSubscription webhookSubscription);
    public abstract virtual void AddOrUpdateSubscription(WebhookSubscription webhookSubscription);
    public abstract virtual Task ActivateWebhookSubscriptionAsync(Guid id, bool active);
    public abstract virtual Task DeleteSubscriptionAsync(Guid id);
    public abstract virtual void DeleteSubscription(Guid id);
}
public interface Abp.Webhooks.IWebhookSubscriptionsStore {
    public abstract virtual Task`1<WebhookSubscriptionInfo> GetAsync(Guid id);
    public abstract virtual WebhookSubscriptionInfo Get(Guid id);
    public abstract virtual Task InsertAsync(WebhookSubscriptionInfo webhookSubscription);
    public abstract virtual void Insert(WebhookSubscriptionInfo webhookSubscription);
    public abstract virtual Task UpdateAsync(WebhookSubscriptionInfo webhookSubscription);
    public abstract virtual void Update(WebhookSubscriptionInfo webhookSubscription);
    public abstract virtual Task DeleteAsync(Guid id);
    public abstract virtual void Delete(Guid id);
    public abstract virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId);
    public abstract virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptions(Nullable`1<int> tenantId);
    public abstract virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptions(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds);
    public abstract virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds);
    public abstract virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds, string webhookName);
    public abstract virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds, string webhookName);
    public abstract virtual Task`1<bool> IsSubscribedAsync(Nullable`1<int> tenantId, string webhookName);
    public abstract virtual bool IsSubscribed(Nullable`1<int> tenantId, string webhookName);
}
public class Abp.Webhooks.NullWebhookEventStore : object {
    [CompilerGeneratedAttribute]
private static NullWebhookEventStore <Instance>k__BackingField;
    public static NullWebhookEventStore Instance { get; }
    private static NullWebhookEventStore();
    [CompilerGeneratedAttribute]
public static NullWebhookEventStore get_Instance();
    public sealed virtual Task`1<Guid> InsertAndGetIdAsync(WebhookEvent webhookEvent);
    public sealed virtual Guid InsertAndGetId(WebhookEvent webhookEvent);
    public sealed virtual Task`1<WebhookEvent> GetAsync(Nullable`1<int> tenantId, Guid id);
    public sealed virtual WebhookEvent Get(Nullable`1<int> tenantId, Guid id);
}
public class Abp.Webhooks.NullWebhookSendAttemptStore : object {
    public static NullWebhookSendAttemptStore Instance;
    private static NullWebhookSendAttemptStore();
    public sealed virtual Task InsertAsync(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual void Insert(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual Task UpdateAsync(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual void Update(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual Task DeleteAsync(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual void Delete(WebhookSendAttempt webhookSendAttempt);
    public sealed virtual Task`1<WebhookSendAttempt> GetAsync(Nullable`1<int> tenantId, Guid id);
    public sealed virtual WebhookSendAttempt Get(Nullable`1<int> tenantId, Guid id);
    public sealed virtual Task`1<int> GetSendAttemptCountAsync(Nullable`1<int> tenantId, Guid webhookId, Guid webhookSubscriptionId);
    public sealed virtual int GetSendAttemptCount(Nullable`1<int> tenantId, Guid webhookId, Guid webhookSubscriptionId);
    public sealed virtual Task`1<bool> HasXConsecutiveFailAsync(Nullable`1<int> tenantId, Guid subscriptionId, int searchCount);
    public sealed virtual Task`1<IPagedResult`1<WebhookSendAttempt>> GetAllSendAttemptsBySubscriptionAsPagedListAsync(Nullable`1<int> tenantId, Guid subscriptionId, int maxResultCount, int skipCount);
    public sealed virtual IPagedResult`1<WebhookSendAttempt> GetAllSendAttemptsBySubscriptionAsPagedList(Nullable`1<int> tenantId, Guid subscriptionId, int maxResultCount, int skipCount);
    public sealed virtual Task`1<List`1<WebhookSendAttempt>> GetAllSendAttemptsByWebhookEventIdAsync(Nullable`1<int> tenantId, Guid webhookEventId);
    public sealed virtual List`1<WebhookSendAttempt> GetAllSendAttemptsByWebhookEventId(Nullable`1<int> tenantId, Guid webhookEventId);
}
public class Abp.Webhooks.NullWebhookSubscriptionsStore : object {
    [CompilerGeneratedAttribute]
private static NullWebhookSubscriptionsStore <Instance>k__BackingField;
    public static NullWebhookSubscriptionsStore Instance { get; }
    private static NullWebhookSubscriptionsStore();
    [CompilerGeneratedAttribute]
public static NullWebhookSubscriptionsStore get_Instance();
    public sealed virtual Task`1<WebhookSubscriptionInfo> GetAsync(Guid id);
    public sealed virtual WebhookSubscriptionInfo Get(Guid id);
    public sealed virtual Task InsertAsync(WebhookSubscriptionInfo webhookSubscription);
    public sealed virtual void Insert(WebhookSubscriptionInfo webhookSubscription);
    public sealed virtual Task UpdateAsync(WebhookSubscriptionInfo webhookSubscription);
    public sealed virtual void Update(WebhookSubscriptionInfo webhookSubscription);
    public sealed virtual Task DeleteAsync(Guid id);
    public sealed virtual void Delete(Guid id);
    public sealed virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId);
    public sealed virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptions(Nullable`1<int> tenantId);
    public sealed virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId, string webhookName);
    public sealed virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptions(Nullable`1<int> tenantId, string webhookName);
    public sealed virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds);
    public sealed virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds);
    public sealed virtual Task`1<List`1<WebhookSubscriptionInfo>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds, string webhookName);
    public sealed virtual List`1<WebhookSubscriptionInfo> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds, string webhookName);
    public sealed virtual Task`1<bool> IsSubscribedAsync(Nullable`1<int> tenantId, string webhookName);
    public sealed virtual bool IsSubscribed(Nullable`1<int> tenantId, string webhookName);
}
public class Abp.Webhooks.WebhookDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableString <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureDependency <FeatureDependency>k__BackingField;
    public string Name { get; }
    public ILocalizableString DisplayName { get; public set; }
    public ILocalizableString Description { get; public set; }
    public IFeatureDependency FeatureDependency { get; public set; }
    public WebhookDefinition(string name, ILocalizableString displayName, ILocalizableString description, IFeatureDependency featureDependency);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ILocalizableString get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(ILocalizableString value);
    [CompilerGeneratedAttribute]
public ILocalizableString get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(ILocalizableString value);
    [CompilerGeneratedAttribute]
public IFeatureDependency get_FeatureDependency();
    [CompilerGeneratedAttribute]
public void set_FeatureDependency(IFeatureDependency value);
}
public class Abp.Webhooks.WebhookDefinitionContext : object {
    [CompilerGeneratedAttribute]
private IWebhookDefinitionManager <Manager>k__BackingField;
    public IWebhookDefinitionManager Manager { get; private set; }
    public WebhookDefinitionContext(IWebhookDefinitionManager manager);
    [CompilerGeneratedAttribute]
public sealed virtual IWebhookDefinitionManager get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(IWebhookDefinitionManager value);
}
internal class Abp.Webhooks.WebhookDefinitionManager : object {
    private IWebhooksConfiguration _webhooksConfiguration;
    private IocManager _iocManager;
    private Dictionary`2<string, WebhookDefinition> _webhookDefinitions;
    public WebhookDefinitionManager(IWebhooksConfiguration webhooksConfiguration, IocManager iocManager);
    public void Initialize();
    public sealed virtual void Add(WebhookDefinition webhookDefinition);
    public sealed virtual WebhookDefinition GetOrNull(string name);
    public sealed virtual WebhookDefinition Get(string name);
    public sealed virtual IReadOnlyList`1<WebhookDefinition> GetAll();
    public sealed virtual bool Remove(string name);
    public sealed virtual bool Contains(string name);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookDefinitionManager/<IsAvailableAsync>d__11")]
public sealed virtual Task`1<bool> IsAvailableAsync(Nullable`1<int> tenantId, string name);
    public sealed virtual bool IsAvailable(Nullable`1<int> tenantId, string name);
}
public abstract class Abp.Webhooks.WebhookDefinitionProvider : object {
    public abstract virtual void SetWebhooks(IWebhookDefinitionContext context);
}
[TableAttribute("AbpWebhookEvents")]
public class Abp.Webhooks.WebhookEvent : Entity`1<Guid> {
    [CompilerGeneratedAttribute]
private string <WebhookName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletionTime>k__BackingField;
    [RequiredAttribute]
public string WebhookName { get; public set; }
    public string Data { get; public set; }
    public DateTime CreationTime { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    public bool IsDeleted { get; public set; }
    public Nullable`1<DateTime> DeletionTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_WebhookName();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Data();
    [CompilerGeneratedAttribute]
public virtual void set_Data(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public virtual void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_DeletionTime();
    [CompilerGeneratedAttribute]
public virtual void set_DeletionTime(Nullable`1<DateTime> value);
}
public class Abp.Webhooks.WebhookHeader : object {
    [CompilerGeneratedAttribute]
private bool <UseOnlyGivenHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    public bool UseOnlyGivenHeaders { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseOnlyGivenHeaders();
    [CompilerGeneratedAttribute]
public void set_UseOnlyGivenHeaders(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
}
public class Abp.Webhooks.WebhookManager : DomainService {
    private static string SignatureHeaderKey;
    private static string SignatureHeaderValueTemplate;
    private static string SignatureHeaderName;
    private IWebhooksConfiguration _webhooksConfiguration;
    private IWebhookSendAttemptStore _webhookSendAttemptStore;
    public WebhookManager(IWebhooksConfiguration webhooksConfiguration, IWebhookSendAttemptStore webhookSendAttemptStore);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookManager/<GetWebhookPayloadAsync>d__6")]
public virtual Task`1<WebhookPayload> GetWebhookPayloadAsync(WebhookSenderArgs webhookSenderArgs);
    public virtual WebhookPayload GetWebhookPayload(WebhookSenderArgs webhookSenderArgs);
    public virtual void SignWebhookRequest(HttpRequestMessage request, string serializedBody, string secret);
    public virtual string GetSerializedBody(WebhookSenderArgs webhookSenderArgs);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookManager/<GetSerializedBodyAsync>d__10")]
public virtual Task`1<string> GetSerializedBodyAsync(WebhookSenderArgs webhookSenderArgs);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookManager/<InsertAndGetIdWebhookSendAttemptAsync>d__11")]
public virtual Task`1<Guid> InsertAndGetIdWebhookSendAttemptAsync(WebhookSenderArgs webhookSenderArgs);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookManager/<StoreResponseOnWebhookSendAttemptAsync>d__12")]
public virtual Task StoreResponseOnWebhookSendAttemptAsync(Guid webhookSendAttemptId, Nullable`1<int> tenantId, Nullable`1<HttpStatusCode> statusCode, string content);
}
public class Abp.Webhooks.WebhookPayload : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebhookEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Attempt>k__BackingField;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTimeUtc>k__BackingField;
    public string Id { get; public set; }
    public string WebhookEvent { get; public set; }
    public int Attempt { get; public set; }
    [DynamicAttribute]
public object Data { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public WebhookPayload(string id, string webhookEvent, int attempt);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_WebhookEvent();
    [CompilerGeneratedAttribute]
public void set_WebhookEvent(string value);
    [CompilerGeneratedAttribute]
public int get_Attempt();
    [CompilerGeneratedAttribute]
public void set_Attempt(int value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTimeUtc();
    [CompilerGeneratedAttribute]
public void set_CreationTimeUtc(DateTime value);
}
internal class Abp.Webhooks.WebhooksConfiguration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <TimeoutDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSendAttemptCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<WebhookDefinitionProvider> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <JsonSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutomaticSubscriptionDeactivationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConsecutiveFailCountBeforeDeactivateSubscription>k__BackingField;
    public TimeSpan TimeoutDuration { get; public set; }
    public int MaxSendAttemptCount { get; public set; }
    public ITypeList`1<WebhookDefinitionProvider> Providers { get; }
    public JsonSerializerOptions JsonSerializerOptions { get; public set; }
    public bool IsAutomaticSubscriptionDeactivationEnabled { get; public set; }
    public int MaxConsecutiveFailCountBeforeDeactivateSubscription { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TimeoutDuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeoutDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxSendAttemptCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxSendAttemptCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeList`1<WebhookDefinitionProvider> get_Providers();
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerOptions get_JsonSerializerOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonSerializerOptions(JsonSerializerOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAutomaticSubscriptionDeactivationEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAutomaticSubscriptionDeactivationEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxConsecutiveFailCountBeforeDeactivateSubscription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxConsecutiveFailCountBeforeDeactivateSubscription(int value);
}
[TableAttribute("AbpWebhookSendAttempts")]
public class Abp.Webhooks.WebhookSendAttempt : Entity`1<Guid> {
    [CompilerGeneratedAttribute]
private Guid <WebhookEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <WebhookSubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpStatusCode> <ResponseStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private WebhookEvent <WebhookEvent>k__BackingField;
    [RequiredAttribute]
public Guid WebhookEventId { get; public set; }
    [RequiredAttribute]
public Guid WebhookSubscriptionId { get; public set; }
    public string Response { get; public set; }
    public Nullable`1<HttpStatusCode> ResponseStatusCode { get; public set; }
    public DateTime CreationTime { get; public set; }
    public Nullable`1<DateTime> LastModificationTime { get; public set; }
    public Nullable`1<int> TenantId { get; public set; }
    [ForeignKeyAttribute("WebhookEventId")]
public WebhookEvent WebhookEvent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_WebhookEventId();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookEventId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Guid get_WebhookSubscriptionId();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookSubscriptionId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_Response();
    [CompilerGeneratedAttribute]
public virtual void set_Response(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<HttpStatusCode> get_ResponseStatusCode();
    [CompilerGeneratedAttribute]
public virtual void set_ResponseStatusCode(Nullable`1<HttpStatusCode> value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastModificationTime();
    [CompilerGeneratedAttribute]
public virtual void set_LastModificationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual WebhookEvent get_WebhookEvent();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookEvent(WebhookEvent value);
}
public class Abp.Webhooks.WebhookSenderArgs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <WebhookEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebhookName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <WebhookSubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebhookUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryOnce>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendExactSameData>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public Guid WebhookEventId { get; public set; }
    public string WebhookName { get; public set; }
    public string Data { get; public set; }
    public Guid WebhookSubscriptionId { get; public set; }
    public string WebhookUri { get; public set; }
    public string Secret { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    public bool TryOnce { get; public set; }
    public bool SendExactSameData { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Guid get_WebhookEventId();
    [CompilerGeneratedAttribute]
public void set_WebhookEventId(Guid value);
    [CompilerGeneratedAttribute]
public string get_WebhookName();
    [CompilerGeneratedAttribute]
public void set_WebhookName(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public Guid get_WebhookSubscriptionId();
    [CompilerGeneratedAttribute]
public void set_WebhookSubscriptionId(Guid value);
    [CompilerGeneratedAttribute]
public string get_WebhookUri();
    [CompilerGeneratedAttribute]
public void set_WebhookUri(string value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_TryOnce();
    [CompilerGeneratedAttribute]
public void set_TryOnce(bool value);
    [CompilerGeneratedAttribute]
public bool get_SendExactSameData();
    [CompilerGeneratedAttribute]
public void set_SendExactSameData(bool value);
}
public class Abp.Webhooks.WebhookSubscription : EntityDto`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebhookUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Webhooks>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    public string WebhookUri { get; public set; }
    public string Secret { get; public set; }
    public bool IsActive { get; public set; }
    public List`1<string> Webhooks { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_WebhookUri();
    [CompilerGeneratedAttribute]
public void set_WebhookUri(string value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Webhooks();
    [CompilerGeneratedAttribute]
public void set_Webhooks(List`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
}
[TableAttribute("AbpWebhookSubscriptions")]
[MultiTenancySideAttribute("2")]
public class Abp.Webhooks.WebhookSubscriptionInfo : CreationAuditedEntity`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebhookUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Webhooks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Headers>k__BackingField;
    public Nullable`1<int> TenantId { get; public set; }
    [RequiredAttribute]
public string WebhookUri { get; public set; }
    [RequiredAttribute]
public string Secret { get; public set; }
    public bool IsActive { get; public set; }
    public string Webhooks { get; public set; }
    public string Headers { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_WebhookUri();
    [CompilerGeneratedAttribute]
public virtual void set_WebhookUri(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Secret();
    [CompilerGeneratedAttribute]
public virtual void set_Secret(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public virtual void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Webhooks();
    [CompilerGeneratedAttribute]
public virtual void set_Webhooks(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Headers();
    [CompilerGeneratedAttribute]
public virtual void set_Headers(string value);
}
[ExtensionAttribute]
public static class Abp.Webhooks.WebhookSubscriptionInfoExtensions : object {
    [ExtensionAttribute]
public static List`1<string> GetSubscribedWebhooks(WebhookSubscriptionInfo webhookSubscription);
    [ExtensionAttribute]
public static void SubscribeWebhook(WebhookSubscriptionInfo webhookSubscription, string name);
    [ExtensionAttribute]
public static void UnsubscribeWebhook(WebhookSubscriptionInfo webhookSubscription, string name);
    [ExtensionAttribute]
public static void RemoveAllSubscribedWebhooks(WebhookSubscriptionInfo webhookSubscription);
    [ExtensionAttribute]
public static bool IsSubscribed(WebhookSubscriptionInfo webhookSubscription, string webhookName);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetWebhookHeaders(WebhookSubscriptionInfo webhookSubscription);
    [ExtensionAttribute]
public static void AddWebhookHeader(WebhookSubscriptionInfo webhookSubscription, string key, string value);
    [ExtensionAttribute]
public static void RemoveWebhookHeader(WebhookSubscriptionInfo webhookSubscription, string header);
    [ExtensionAttribute]
public static void RemoveAllWebhookHeaders(WebhookSubscriptionInfo webhookSubscription);
    [ExtensionAttribute]
public static WebhookSubscriptionInfo ToWebhookSubscriptionInfo(WebhookSubscription webhookSubscription);
}
public class Abp.Webhooks.WebhookSubscriptionManager : DomainService {
    [CompilerGeneratedAttribute]
private IWebhookSubscriptionsStore <WebhookSubscriptionsStore>k__BackingField;
    private IGuidGenerator _guidGenerator;
    private IWebhookDefinitionManager _webhookDefinitionManager;
    private static string WebhookSubscriptionSecretPrefix;
    public IWebhookSubscriptionsStore WebhookSubscriptionsStore { get; public set; }
    public WebhookSubscriptionManager(IGuidGenerator guidGenerator, IWebhookDefinitionManager webhookDefinitionManager);
    [CompilerGeneratedAttribute]
public IWebhookSubscriptionsStore get_WebhookSubscriptionsStore();
    [CompilerGeneratedAttribute]
public void set_WebhookSubscriptionsStore(IWebhookSubscriptionsStore value);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<GetAsync>d__8")]
public virtual Task`1<WebhookSubscription> GetAsync(Guid id);
    public virtual WebhookSubscription Get(Guid id);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<GetAllSubscriptionsAsync>d__10")]
public virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsAsync(Nullable`1<int> tenantId);
    public virtual List`1<WebhookSubscription> GetAllSubscriptions(Nullable`1<int> tenantId);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<GetAllSubscriptionsIfFeaturesGrantedAsync>d__12")]
public virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsIfFeaturesGrantedAsync(Nullable`1<int> tenantId, string webhookName);
    public virtual List`1<WebhookSubscription> GetAllSubscriptionsIfFeaturesGranted(Nullable`1<int> tenantId, string webhookName);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<GetAllSubscriptionsOfTenantsAsync>d__14")]
public virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsOfTenantsAsync(Nullable`1[] tenantIds);
    public virtual List`1<WebhookSubscription> GetAllSubscriptionsOfTenants(Nullable`1[] tenantIds);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<GetAllSubscriptionsOfTenantsIfFeaturesGrantedAsync>d__16")]
public virtual Task`1<List`1<WebhookSubscription>> GetAllSubscriptionsOfTenantsIfFeaturesGrantedAsync(Nullable`1[] tenantIds, string webhookName);
    public virtual List`1<WebhookSubscription> GetAllSubscriptionsOfTenantsIfFeaturesGranted(Nullable`1[] tenantIds, string webhookName);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<IsSubscribedAsync>d__18")]
public virtual Task`1<bool> IsSubscribedAsync(Nullable`1<int> tenantId, string webhookName);
    public virtual bool IsSubscribed(Nullable`1<int> tenantId, string webhookName);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<AddOrUpdateSubscriptionAsync>d__20")]
public virtual Task AddOrUpdateSubscriptionAsync(WebhookSubscription webhookSubscription);
    public virtual void AddOrUpdateSubscription(WebhookSubscription webhookSubscription);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<ActivateWebhookSubscriptionAsync>d__22")]
public virtual Task ActivateWebhookSubscriptionAsync(Guid id, bool active);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<DeleteSubscriptionAsync>d__23")]
public virtual Task DeleteSubscriptionAsync(Guid id);
    public virtual void DeleteSubscription(Guid id);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<AddWebhookAsync>d__25")]
public virtual Task AddWebhookAsync(WebhookSubscriptionInfo subscription, string webhookName);
    public virtual void AddWebhook(WebhookSubscriptionInfo subscription, string webhookName);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<CheckIfPermissionsGrantedAsync>d__27")]
protected virtual Task CheckIfPermissionsGrantedAsync(WebhookSubscription webhookSubscription);
    [AsyncStateMachineAttribute("Abp.Webhooks.WebhookSubscriptionManager/<CheckPermissionsAsync>d__28")]
protected virtual Task CheckPermissionsAsync(Nullable`1<int> tenantId, string webhookName);
    protected virtual void CheckIfPermissionsGranted(WebhookSubscription webhookSubscription);
    protected virtual void CheckPermissions(Nullable`1<int> tenantId, string webhookName);
}
[ExtensionAttribute]
public static class Abp.Xml.Extensions.XmlNodeExtensions : object {
    [ExtensionAttribute]
public static string GetAttributeValueOrNull(XmlNode node, string attributeName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
