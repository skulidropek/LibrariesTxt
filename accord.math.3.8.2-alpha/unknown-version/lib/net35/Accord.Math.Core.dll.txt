[ExtensionAttribute]
[GeneratedCodeAttribute("Accord.NET T4 Templates", "3.7")]
public static class Accord.Math.Elementwise : object {
    private static int rows(U[] b);
    private static int cols(U[][] b);
    private static int rows(U[0...,0...] b);
    private static int cols(U[0...,0...] b);
    [ConditionalAttribute("DEBUG")]
private static void check(T[] a, U[] b);
    [ConditionalAttribute("DEBUG")]
private static void check(T[] a, U[] b, V[] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[] a, U b, V[] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T a, U[] b, V[] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[0...,0...] a, U[0...,0...] b);
    [ConditionalAttribute("DEBUG")]
private static void check(T[][] a, U[][] b);
    [ConditionalAttribute("DEBUG")]
private static void check(T[0...,0...] a, U[0...,0...] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[][] a, U[][] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(int d, T[0...,0...] a, U[] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(int d, T[][] a, U[] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(int d, T[] a, U[0...,0...] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(int d, T[] a, U[][] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(VectorType d, T[0...,0...] a, U[] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(VectorType d, T[][] a, U[] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(VectorType d, T[] a, U[0...,0...] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(VectorType d, T[] a, U[][] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[0...,0...] a, U[] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[][] a, U[] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[] a, U[0...,0...] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[] a, U[][] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(int d, T a, U[0...,0...] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(int d, T a, U[][] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T a, U[0...,0...] b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T a, U[][] b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[][] a, U b, V[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[0...,0...] a, U b, V[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[][] a, U b, V[0...,0...] c, W[0...,0...] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[][] a, U b, V[][] c, W[][] result);
    [ConditionalAttribute("DEBUG")]
private static void check(T[0...,0...] a, U b, V[0...,0...] c, W[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, int b);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Add(int a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Add(Int32[][] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Int32[] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Int32[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Add(Int32[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Add(int a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Int32[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Int32[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Int32[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Int32[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Int32[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Int32[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Int32[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Int32[] a, Single[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, float b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Add(int a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Int32[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[] a, Double[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, double b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Double[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, byte b);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[] Add(int a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(int a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Int32[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Int32[] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[] Add(int a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Int32[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Int32[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, int b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(float a, Int32[][] b);
    [ExtensionAttribute]
public static Single[] Add(float a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(float a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Single[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Single[] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Add(float a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Add(float a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Single[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[] a, Double[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, double b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Double[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, byte b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(float a, Byte[][] b);
    [ExtensionAttribute]
public static Single[] Add(float a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(float a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Single[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Single[] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, decimal b);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[] Add(float a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Single[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Single[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, int b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(double a, Int32[][] b);
    [ExtensionAttribute]
public static Double[] Add(double a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(double a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Double[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Double[] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, float b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(double a, Single[][] b);
    [ExtensionAttribute]
public static Double[] Add(double a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(double a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Double[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Double[] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Add(double a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, byte b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(double a, Byte[][] b);
    [ExtensionAttribute]
public static Double[] Add(double a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(double a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Double[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Double[] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, decimal b);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[] Add(double a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Double[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Double[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Add(Byte[] a, int b);
    [ExtensionAttribute]
public static Int32[] Add(Byte[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Add(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Add(byte a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Byte[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Byte[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Byte[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Byte[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Byte[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Byte[] a, Int32[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, int b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Add(Byte[][] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Byte[] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Byte[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Add(Byte[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Add(byte a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Byte[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Byte[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Byte[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Byte[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Byte[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Byte[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Byte[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Byte[] a, Single[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, float b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Add(byte a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Byte[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[] a, Double[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, double b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Double[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, byte b);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] Add(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[] Add(byte a, Byte[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Add(Decimal[] a, int b);
    [ExtensionAttribute]
public static Int32[] Add(Decimal[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Add(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Add(decimal a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Decimal[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Decimal[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Decimal[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Decimal[] a, Int32[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Decimal[] a, float b);
    [ExtensionAttribute]
public static Single[] Add(Decimal[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Add(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Add(decimal a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Decimal[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Decimal[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Decimal[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Decimal[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Decimal[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Decimal[] a, Single[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, double b);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Add(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Add(decimal a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[] a, Double[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] Add(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[] Add(decimal a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(int a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(int a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Single[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, float b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(int a, Single[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Single[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Single[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Single[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Single[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Single[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Single[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Single[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Single[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Single[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Single[] b, Int32[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Int32[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Int32[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Int32[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(int a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Int32[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Int32[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Int32[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Int32[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Int32[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Int32[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Int32[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Int32[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Int32[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Int32[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Int32[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(int a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Double[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, double b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(int a, Double[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Double[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Double[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Double[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Double[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Double[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Double[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Double[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Double[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Double[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Double[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(int a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, byte b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(int a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Byte[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Byte[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Byte[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Byte[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Byte[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Byte[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Byte[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Byte[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Byte[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Byte[] b, Int32[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Int32[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Int32[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Int32[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Int32[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(int a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Int32[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Int32[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Int32[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Int32[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Int32[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Int32[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Int32[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Int32[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Int32[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Int32[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Int32[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Int32[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(int a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Int32[] a, decimal b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(int a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[] a, Decimal[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Int32[][] a, Decimal[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[] a, Decimal[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Int32[][] a, Decimal[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Int32[0...,0...] a, Decimal[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Int32[][] a, Decimal[] b, Int32[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Int32[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Int32[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Int32[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Int32[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(int a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Int32[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Int32[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Int32[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Int32[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Int32[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Int32[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Int32[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Int32[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Int32[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(int a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Int32[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Int32[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Int32[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Int32[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Int32[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, int b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(float a, Int32[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Int32[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Int32[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Int32[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Int32[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Int32[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Int32[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Int32[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Int32[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Int32[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Int32[] b, Single[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Single[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Single[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Single[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Single[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(float a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Single[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Single[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Single[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Single[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Single[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Single[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Single[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Single[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Single[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Single[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Single[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Single[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(float a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(float a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(float a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Double[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, double b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(float a, Double[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Double[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Double[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Double[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Double[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Double[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Double[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Double[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Double[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Double[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Double[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(float a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Byte[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, byte b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(float a, Byte[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Byte[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Byte[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Byte[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Byte[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Byte[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Byte[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Byte[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Byte[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Byte[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Byte[] b, Single[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Single[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Single[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Single[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Single[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(float a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Single[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Single[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Single[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Single[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Single[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Single[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Single[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Single[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Single[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Single[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Single[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Single[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(float a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Single[] a, decimal b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(float a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[] a, Decimal[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[] a, Decimal[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Single[0...,0...] a, Decimal[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Single[][] a, Decimal[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[] a, Decimal[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[] a, Decimal[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Single[0...,0...] a, Decimal[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Single[][] a, Decimal[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Single[0...,0...] a, Decimal[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Single[][] a, Decimal[] b, Single[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Single[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Single[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Single[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Single[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(float a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Single[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Single[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Single[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Single[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Single[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Single[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Single[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Single[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Single[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Single[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Single[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Single[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Single[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(float a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Single[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Single[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Single[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Single[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Single[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Single[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(double a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Double[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Double[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Double[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Double[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(double a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Double[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Double[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Double[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Double[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Double[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Double[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Double[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Double[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Double[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Double[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Double[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Double[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(double a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Double[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Double[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Double[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Double[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(double a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Double[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Double[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Double[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Double[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Double[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Double[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Double[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Double[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Double[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Double[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Double[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Double[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(double a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(double a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Double[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Double[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Double[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Double[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(double a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Double[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Double[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Double[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Double[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Double[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Double[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Double[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Double[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Double[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Double[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Double[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Double[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Double[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(double a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Double[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Double[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Double[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Double[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Double[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Double[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Double[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Double[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Double[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Double[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(double a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Double[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Double[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Double[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Double[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Double[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Double[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Double[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Double[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Double[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Double[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Double[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Double[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, int b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(byte a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[] a, Int32[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[] a, Int32[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Int32[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[][] a, Int32[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[] a, Int32[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[] a, Int32[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Int32[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Int32[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Int32[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Int32[] b, Byte[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Byte[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Byte[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(byte a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Byte[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Byte[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Byte[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Byte[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Byte[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Byte[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Byte[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Byte[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Byte[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Byte[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(byte a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, Single[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, float b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(byte a, Single[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[] a, Single[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[] a, Single[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Single[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[][] a, Single[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[] a, Single[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[] a, Single[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Single[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Single[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Single[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Single[] b, Byte[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Byte[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Byte[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Byte[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(byte a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Byte[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Byte[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Byte[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Byte[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Byte[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Byte[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Byte[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Byte[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Byte[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Byte[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Byte[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(byte a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, Double[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, double b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(byte a, Double[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[] a, Double[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[] a, Double[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Double[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[][] a, Double[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[] a, Double[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[] a, Double[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Double[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Double[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Double[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Double[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(byte a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(byte a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(byte a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Byte[] a, decimal b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(byte a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[] a, Decimal[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[] a, Decimal[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Decimal[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Byte[][] a, Decimal[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[] a, Decimal[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Byte[][] a, Decimal[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Byte[0...,0...] a, Decimal[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Byte[][] a, Decimal[] b, Byte[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Byte[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Byte[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Byte[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Byte[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(byte a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Byte[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Byte[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Byte[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Byte[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Byte[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Byte[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Byte[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Byte[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Byte[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Byte[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Byte[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(byte a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Byte[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Byte[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Byte[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Byte[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Byte[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, int b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(decimal a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[] a, Int32[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[][] a, Int32[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[] a, Int32[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Int32[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Int32[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Int32[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Add(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Add(Decimal[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(Decimal[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Add(decimal a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Decimal[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Add(Decimal[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Add(Decimal[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Decimal[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Decimal[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] AddToDiagonal(Decimal[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(decimal a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, float b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(decimal a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[] a, Single[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[] a, Single[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Single[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[][] a, Single[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[] a, Single[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[] a, Single[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Single[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Single[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Single[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Single[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Add(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Add(Decimal[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(Decimal[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Add(decimal a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Decimal[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Decimal[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Add(Decimal[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Add(Decimal[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Add(Decimal[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Add(Decimal[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Decimal[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Decimal[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] AddToDiagonal(Decimal[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(decimal a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, double b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(decimal a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[] a, Double[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[] a, Double[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Double[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[][] a, Double[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[] a, Double[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[] a, Double[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Double[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Double[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Double[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Double[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(decimal a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, byte b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(decimal a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[] a, Byte[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[] a, Byte[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Byte[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[][] a, Byte[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[] a, Byte[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Byte[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Byte[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Byte[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(Decimal[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Decimal[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Add(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Add(Decimal[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(Decimal[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Add(decimal a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Decimal[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Decimal[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Add(Decimal[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Add(Decimal[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Decimal[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Add(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Add(Decimal[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Decimal[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Decimal[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] AddToDiagonal(Decimal[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(decimal a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Add(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(Decimal[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Add(decimal a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Add(Decimal[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Add(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Add(Decimal[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] AddToDiagonal(Decimal[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Add(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(Decimal[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Add(decimal a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Add(Decimal[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Add(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Add(Decimal[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] AddToDiagonal(Decimal[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] AddToDiagonal(Decimal[][] a, Decimal[] b, Double[][] result);
    public static Boolean[] Equals(Int32[] a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Int32[][] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, int b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, int b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, int b, int atol, double rtol);
    public static Boolean[] Equals(int a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(int a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, Int16[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Int16[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Int16[][] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Int16[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Int16[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, short b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, short b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, short b, int atol, double rtol);
    public static Boolean[] Equals(int a, Int16[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, Int16[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(int a, Int16[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Single[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Int32[] a, float b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, float b, float atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, float b, float atol, double rtol);
    public static Boolean[] Equals(int a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(int a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Int32[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int32[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(int a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(int a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int32[] a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Int64[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int32[] a, long b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, long b, long atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, long b, long atol, double rtol);
    public static Boolean[] Equals(int a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(int a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int32[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int32[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int32[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Int32[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int32[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(int a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(int a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(int a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Int32[] a, Byte[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, Byte[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, Byte[][] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Byte[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, Byte[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, byte b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, byte b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, byte b, int atol, double rtol);
    public static Boolean[] Equals(int a, Byte[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, Byte[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(int a, Byte[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, SByte[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, SByte[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[0...,0...] a, SByte[][] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, SByte[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, SByte[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int32[] a, sbyte b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int32[0...,0...] a, sbyte b, int atol, double rtol);
    public static Boolean[][] Equals(Int32[][] a, sbyte b, int atol, double rtol);
    public static Boolean[] Equals(int a, SByte[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(int a, SByte[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(int a, SByte[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int16[] a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Int32[][] b, int atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int16[] a, int b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, int b, int atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, int b, int atol, double rtol);
    public static Boolean[] Equals(short a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(short a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(Int16[] a, Int16[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Int16[][] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Int16[][] b, short atol, double rtol);
    public static Boolean[] Equals(Int16[] a, short b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, short b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, short b, short atol, double rtol);
    public static Boolean[] Equals(short a, Int16[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(short a, Int16[][] b, short atol, double rtol);
    public static Boolean[] Equals(Int16[] a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Single[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Int16[] a, float b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, float b, float atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, float b, float atol, double rtol);
    public static Boolean[] Equals(short a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(short a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Int16[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int16[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(short a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(short a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int16[] a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Int64[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int16[] a, long b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, long b, long atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, long b, long atol, double rtol);
    public static Boolean[] Equals(short a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(short a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int16[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int16[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int16[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Int16[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int16[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(short a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(short a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(short a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Int16[] a, Byte[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, Byte[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, Byte[][] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Byte[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, Byte[][] b, short atol, double rtol);
    public static Boolean[] Equals(Int16[] a, byte b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, byte b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, byte b, short atol, double rtol);
    public static Boolean[] Equals(short a, Byte[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, Byte[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(short a, Byte[][] b, short atol, double rtol);
    public static Boolean[] Equals(Int16[] a, SByte[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, SByte[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[0...,0...] a, SByte[][] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, SByte[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, SByte[][] b, short atol, double rtol);
    public static Boolean[] Equals(Int16[] a, sbyte b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Int16[0...,0...] a, sbyte b, short atol, double rtol);
    public static Boolean[][] Equals(Int16[][] a, sbyte b, short atol, double rtol);
    public static Boolean[] Equals(short a, SByte[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(short a, SByte[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(short a, SByte[][] b, short atol, double rtol);
    public static Boolean[] Equals(Single[] a, Int32[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Int32[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Int32[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Int32[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Int32[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, int b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, int b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, int b, float atol, double rtol);
    public static Boolean[] Equals(float a, Int32[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, Int32[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(float a, Int32[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, Int16[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Int16[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Int16[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Int16[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Int16[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, short b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, short b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, short b, float atol, double rtol);
    public static Boolean[] Equals(float a, Int16[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, Int16[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(float a, Int16[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Single[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, float b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, float b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, float b, float atol, double rtol);
    public static Boolean[] Equals(float a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(float a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Single[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(float a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(float a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Single[] a, Int64[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Int64[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Int64[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Int64[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Int64[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, long b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, long b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, long b, float atol, double rtol);
    public static Boolean[] Equals(float a, Int64[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, Int64[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(float a, Int64[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Single[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Single[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Single[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Single[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(float a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(float a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(float a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Single[] a, Byte[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, Byte[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, Byte[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Byte[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, Byte[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, byte b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, byte b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, byte b, float atol, double rtol);
    public static Boolean[] Equals(float a, Byte[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, Byte[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(float a, Byte[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, SByte[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, SByte[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[0...,0...] a, SByte[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, SByte[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, SByte[][] b, float atol, double rtol);
    public static Boolean[] Equals(Single[] a, sbyte b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Single[0...,0...] a, sbyte b, float atol, double rtol);
    public static Boolean[][] Equals(Single[][] a, sbyte b, float atol, double rtol);
    public static Boolean[] Equals(float a, SByte[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(float a, SByte[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(float a, SByte[][] b, float atol, double rtol);
    public static Boolean[] Equals(Double[] a, Int32[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Int32[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Int32[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Int32[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Int32[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, int b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, int b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, int b, double atol, double rtol);
    public static Boolean[] Equals(double a, Int32[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, Int32[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, Int32[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, Int16[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Int16[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Int16[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Int16[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Int16[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, short b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, short b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, short b, double atol, double rtol);
    public static Boolean[] Equals(double a, Int16[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, Int16[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, Int16[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, Single[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Single[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Single[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Single[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Single[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, float b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, float b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, float b, double atol, double rtol);
    public static Boolean[] Equals(double a, Single[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, Single[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, Single[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(double a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, Int64[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Int64[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Int64[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Int64[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Int64[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, long b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, long b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, long b, double atol, double rtol);
    public static Boolean[] Equals(double a, Int64[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, Int64[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, Int64[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Double[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Double[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Double[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Double[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(double a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(double a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(double a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Double[] a, Byte[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, Byte[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, Byte[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Byte[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, Byte[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, byte b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, byte b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, byte b, double atol, double rtol);
    public static Boolean[] Equals(double a, Byte[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, Byte[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, Byte[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, SByte[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, SByte[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[0...,0...] a, SByte[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, SByte[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, SByte[][] b, double atol, double rtol);
    public static Boolean[] Equals(Double[] a, sbyte b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Double[0...,0...] a, sbyte b, double atol, double rtol);
    public static Boolean[][] Equals(Double[][] a, sbyte b, double atol, double rtol);
    public static Boolean[] Equals(double a, SByte[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(double a, SByte[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(double a, SByte[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int64[] a, Int32[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Int32[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Int32[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Int32[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Int32[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, int b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, int b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, int b, long atol, double rtol);
    public static Boolean[] Equals(long a, Int32[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, Int32[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(long a, Int32[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, Int16[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Int16[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Int16[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Int16[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Int16[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, short b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, short b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, short b, long atol, double rtol);
    public static Boolean[] Equals(long a, Int16[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, Int16[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(long a, Int16[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Single[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Int64[] a, float b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, float b, float atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, float b, float atol, double rtol);
    public static Boolean[] Equals(long a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(long a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Int64[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int64[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(long a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(long a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Int64[] a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Int64[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, long b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, long b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, long b, long atol, double rtol);
    public static Boolean[] Equals(long a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(long a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int64[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int64[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Int64[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Int64[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(long a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(long a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(long a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Int64[] a, Byte[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, Byte[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, Byte[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Byte[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, Byte[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, byte b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, byte b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, byte b, long atol, double rtol);
    public static Boolean[] Equals(long a, Byte[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, Byte[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(long a, Byte[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, SByte[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, SByte[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[0...,0...] a, SByte[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, SByte[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, SByte[][] b, long atol, double rtol);
    public static Boolean[] Equals(Int64[] a, sbyte b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Int64[0...,0...] a, sbyte b, long atol, double rtol);
    public static Boolean[][] Equals(Int64[][] a, sbyte b, long atol, double rtol);
    public static Boolean[] Equals(long a, SByte[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(long a, SByte[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(long a, SByte[][] b, long atol, double rtol);
    public static Boolean[] Equals(Decimal[] a, Int32[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Int32[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Int32[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Int32[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Int32[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, int b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, int b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, int b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Int32[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Int32[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Int32[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, Int16[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Int16[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Int16[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Int16[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Int16[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, short b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, short b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, short b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Int16[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Int16[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Int16[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, Single[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Single[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Single[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Single[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Single[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, float b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, float b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, float b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Single[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Single[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Single[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, Double[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Double[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Double[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Double[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Double[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, double b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, double b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, double b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Double[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Double[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Double[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, Int64[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Int64[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Int64[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Int64[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Int64[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, long b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, long b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, long b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Int64[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Int64[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Int64[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, Byte[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, Byte[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, Byte[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Byte[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, Byte[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, byte b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, byte b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, byte b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, Byte[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, Byte[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, Byte[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, SByte[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, SByte[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[0...,0...] a, SByte[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, SByte[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, SByte[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Decimal[] a, sbyte b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Decimal[0...,0...] a, sbyte b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Decimal[][] a, sbyte b, decimal atol, decimal rtol);
    public static Boolean[] Equals(decimal a, SByte[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(decimal a, SByte[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(decimal a, SByte[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Byte[] a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Int32[][] b, int atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(Byte[] a, int b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, int b, int atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, int b, int atol, double rtol);
    public static Boolean[] Equals(byte a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(byte a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(Byte[] a, Int16[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Int16[][] b, short atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Int16[][] b, short atol, double rtol);
    public static Boolean[] Equals(Byte[] a, short b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, short b, short atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, short b, short atol, double rtol);
    public static Boolean[] Equals(byte a, Int16[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(byte a, Int16[][] b, short atol, double rtol);
    public static Boolean[] Equals(Byte[] a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Single[][] b, float atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Byte[] a, float b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, float b, float atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, float b, float atol, double rtol);
    public static Boolean[] Equals(byte a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(byte a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(Byte[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Byte[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(byte a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(byte a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(Byte[] a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Int64[][] b, long atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Byte[] a, long b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, long b, long atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, long b, long atol, double rtol);
    public static Boolean[] Equals(byte a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(byte a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(Byte[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Byte[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Byte[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Byte[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(Byte[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(byte a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(byte a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(byte a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(Byte[] a, Byte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, Byte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, Byte[][] b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Byte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, Byte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(Byte[] a, byte b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, byte b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, byte b, byte atol, double rtol);
    public static Boolean[] Equals(byte a, Byte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, Byte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(byte a, Byte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(Byte[] a, SByte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, SByte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[0...,0...] a, SByte[][] b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, SByte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, SByte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(Byte[] a, sbyte b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(Byte[0...,0...] a, sbyte b, byte atol, double rtol);
    public static Boolean[][] Equals(Byte[][] a, sbyte b, byte atol, double rtol);
    public static Boolean[] Equals(byte a, SByte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(byte a, SByte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(byte a, SByte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(SByte[] a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Int32[][] b, int atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(SByte[] a, int b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, int b, int atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, int b, int atol, double rtol);
    public static Boolean[] Equals(sbyte a, Int32[] b, int atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Int32[0...,0...] b, int atol, double rtol);
    public static Boolean[][] Equals(sbyte a, Int32[][] b, int atol, double rtol);
    public static Boolean[] Equals(SByte[] a, Int16[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Int16[][] b, short atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Int16[][] b, short atol, double rtol);
    public static Boolean[] Equals(SByte[] a, short b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, short b, short atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, short b, short atol, double rtol);
    public static Boolean[] Equals(sbyte a, Int16[] b, short atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Int16[0...,0...] b, short atol, double rtol);
    public static Boolean[][] Equals(sbyte a, Int16[][] b, short atol, double rtol);
    public static Boolean[] Equals(SByte[] a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Single[][] b, float atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(SByte[] a, float b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, float b, float atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, float b, float atol, double rtol);
    public static Boolean[] Equals(sbyte a, Single[] b, float atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Single[0...,0...] b, float atol, double rtol);
    public static Boolean[][] Equals(sbyte a, Single[][] b, float atol, double rtol);
    public static Boolean[] Equals(SByte[] a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Double[][] b, double atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(SByte[] a, double b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, double b, double atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, double b, double atol, double rtol);
    public static Boolean[] Equals(sbyte a, Double[] b, double atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Double[0...,0...] b, double atol, double rtol);
    public static Boolean[][] Equals(sbyte a, Double[][] b, double atol, double rtol);
    public static Boolean[] Equals(SByte[] a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Int64[][] b, long atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(SByte[] a, long b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, long b, long atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, long b, long atol, double rtol);
    public static Boolean[] Equals(sbyte a, Int64[] b, long atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Int64[0...,0...] b, long atol, double rtol);
    public static Boolean[][] Equals(sbyte a, Int64[][] b, long atol, double rtol);
    public static Boolean[] Equals(SByte[] a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(SByte[][] a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(SByte[][] a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(SByte[] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(SByte[][] a, decimal b, decimal atol, decimal rtol);
    public static Boolean[] Equals(sbyte a, Decimal[] b, decimal atol, decimal rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Decimal[0...,0...] b, decimal atol, decimal rtol);
    public static Boolean[][] Equals(sbyte a, Decimal[][] b, decimal atol, decimal rtol);
    public static Boolean[] Equals(SByte[] a, Byte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, Byte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, Byte[][] b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Byte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, Byte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(SByte[] a, byte b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, byte b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, byte b, byte atol, double rtol);
    public static Boolean[] Equals(sbyte a, Byte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, Byte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(sbyte a, Byte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(SByte[] a, SByte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, SByte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[0...,0...] a, SByte[][] b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, SByte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, SByte[][] b, byte atol, double rtol);
    public static Boolean[] Equals(SByte[] a, sbyte b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(SByte[0...,0...] a, sbyte b, byte atol, double rtol);
    public static Boolean[][] Equals(SByte[][] a, sbyte b, byte atol, double rtol);
    public static Boolean[] Equals(sbyte a, SByte[] b, byte atol, double rtol);
    public static Boolean[0...,0...] Equals(sbyte a, SByte[0...,0...] b, byte atol, double rtol);
    public static Boolean[][] Equals(sbyte a, SByte[][] b, byte atol, double rtol);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, int b);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, int b);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Int32[][] b);
    [ExtensionAttribute]
public static Double[] Divide(int a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[][] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Int32[] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Int32[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Divide(int a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Int32[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Int32[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Int32[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Int32[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Int32[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Int32[] a, Single[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, float b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Divide(int a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[] a, Double[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, double b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Double[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, byte b);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(int a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Int32[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Int32[] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Int32[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Int32[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, int b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Int32[][] b);
    [ExtensionAttribute]
public static Single[] Divide(float a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(float a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Single[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Single[] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Divide(float a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Divide(float a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Single[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[] a, Double[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, double b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Double[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, byte b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Byte[][] b);
    [ExtensionAttribute]
public static Single[] Divide(float a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(float a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Single[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Single[] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, decimal b);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[] Divide(float a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Single[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Single[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, int b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Int32[][] b);
    [ExtensionAttribute]
public static Double[] Divide(double a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(double a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Double[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Double[] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, float b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Single[][] b);
    [ExtensionAttribute]
public static Double[] Divide(double a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(double a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Double[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Double[] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Divide(double a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, byte b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Byte[][] b);
    [ExtensionAttribute]
public static Double[] Divide(double a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(double a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Double[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Double[] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, decimal b);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[] Divide(double a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Double[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Double[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Divide(Byte[] a, int b);
    [ExtensionAttribute]
public static Int32[] Divide(Byte[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Divide(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Divide(byte a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Byte[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Byte[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Byte[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Byte[] a, Int32[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, int b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[][] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Byte[] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Byte[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Divide(byte a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Byte[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Byte[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Byte[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Byte[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Byte[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Byte[] a, Single[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, float b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Divide(byte a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[] a, Double[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, double b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Double[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, byte b);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] Divide(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[] Divide(byte a, Byte[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Divide(Decimal[] a, int b);
    [ExtensionAttribute]
public static Int32[] Divide(Decimal[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Divide(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Divide(decimal a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Decimal[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Decimal[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Decimal[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Decimal[] a, Int32[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Decimal[] a, float b);
    [ExtensionAttribute]
public static Single[] Divide(Decimal[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Divide(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Divide(decimal a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Decimal[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Decimal[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Decimal[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Decimal[] a, Single[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, double b);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Divide(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Divide(decimal a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[] a, Double[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] Divide(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[] Divide(decimal a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(int a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Single[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, float b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Single[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Single[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Single[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Single[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Single[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Single[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Single[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Single[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Single[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Single[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Single[] b, Int32[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Int32[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Int32[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(int a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Int32[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Int32[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Int32[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Int32[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Int32[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Int32[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Int32[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Int32[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Int32[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(int a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Double[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, double b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Double[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Double[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Double[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Double[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Double[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Double[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Double[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Double[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Double[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Double[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Double[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(int a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, byte b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Byte[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Byte[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Byte[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Byte[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Byte[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Byte[] b, Int32[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Int32[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Int32[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Int32[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Int32[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(int a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Int32[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Int32[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Int32[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Int32[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Int32[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Int32[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Int32[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(int a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Int32[] a, decimal b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(int a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[] a, Decimal[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Int32[][] a, Decimal[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[] a, Decimal[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Int32[][] a, Decimal[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Decimal[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Int32[][] a, Decimal[] b, Int32[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Int32[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Int32[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Int32[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Int32[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(int a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Int32[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Int32[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Int32[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Int32[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Int32[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Int32[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Int32[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Int32[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(int a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Int32[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Int32[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Int32[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Int32[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Int32[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, int b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(float a, Int32[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Int32[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Int32[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Int32[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Int32[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Int32[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Int32[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Int32[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Int32[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Int32[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Int32[] b, Single[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Single[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Single[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Single[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Single[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(float a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Single[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Single[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Single[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Single[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Single[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Single[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Single[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Single[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Single[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Single[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Single[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Single[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(float a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(float a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(float a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Double[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, double b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(float a, Double[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Double[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Double[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Double[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Double[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Double[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Double[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Double[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Double[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Double[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Double[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(float a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Byte[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, byte b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(float a, Byte[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Byte[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Byte[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Byte[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Byte[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Byte[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Byte[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Byte[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Byte[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Byte[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Byte[] b, Single[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Single[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Single[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Single[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Single[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(float a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Single[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Single[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Single[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Single[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Single[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Single[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Single[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Single[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Single[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Single[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Single[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Single[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(float a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Single[] a, decimal b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(float a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[] a, Decimal[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Single[][] a, Decimal[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[] a, Decimal[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Single[][] a, Decimal[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Single[0...,0...] a, Decimal[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Single[][] a, Decimal[] b, Single[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Single[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Single[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Single[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Single[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(float a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Single[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Single[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Single[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Single[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Single[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Single[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Single[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Single[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Single[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(float a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Single[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Single[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Single[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Single[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Single[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(double a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Double[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Double[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Double[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Double[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(double a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Double[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Double[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Double[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Double[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Double[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Double[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Double[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Double[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Double[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Double[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Double[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Double[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(double a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Double[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Double[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Double[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Double[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(double a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Double[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Double[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Double[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Double[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Double[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Double[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Double[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Double[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Double[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Double[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Double[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Double[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(double a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(double a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Double[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Double[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Double[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Double[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(double a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Double[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Double[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Double[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Double[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Double[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Double[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Double[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Double[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Double[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Double[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Double[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Double[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Double[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(double a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Double[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Double[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Double[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Double[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Double[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Double[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Double[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Double[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Double[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Double[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(double a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Double[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Double[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Double[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Double[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Double[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Double[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Double[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Double[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Double[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Double[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Double[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Double[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, int b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(byte a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[] a, Int32[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[][] a, Int32[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[] a, Int32[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Int32[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Int32[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Int32[] b, Byte[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Byte[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Byte[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(byte a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Byte[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Byte[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Byte[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Byte[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Byte[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Byte[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(byte a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, Single[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, float b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(byte a, Single[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[] a, Single[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[] a, Single[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Single[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[][] a, Single[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[] a, Single[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[] a, Single[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Single[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Single[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Single[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Single[] b, Byte[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Byte[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Byte[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(byte a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Byte[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Byte[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Byte[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Byte[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Byte[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Byte[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Byte[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Byte[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Byte[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(byte a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, Double[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, double b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(byte a, Double[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[] a, Double[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[] a, Double[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Double[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[][] a, Double[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[] a, Double[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[] a, Double[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Double[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Double[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Double[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Double[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(byte a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(byte a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(byte a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Byte[] a, decimal b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(byte a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[] a, Decimal[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[] a, Decimal[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Decimal[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Byte[][] a, Decimal[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[] a, Decimal[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Byte[][] a, Decimal[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Decimal[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Byte[][] a, Decimal[] b, Byte[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Byte[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Byte[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Byte[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Byte[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(byte a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Byte[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Byte[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Byte[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Byte[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Byte[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Byte[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Byte[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Byte[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Byte[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Byte[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(byte a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Byte[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Byte[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Byte[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Byte[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, int b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(decimal a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[] a, Int32[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[][] a, Int32[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[] a, Int32[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Int32[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Int32[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Int32[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Divide(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Divide(Decimal[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(Decimal[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Divide(decimal a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Decimal[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Divide(Decimal[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Divide(Decimal[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Decimal[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Decimal[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] DivideByDiagonal(Decimal[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(decimal a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, float b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(decimal a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[] a, Single[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[][] a, Single[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[] a, Single[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Single[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Single[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Single[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Divide(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Divide(Decimal[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(Decimal[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Divide(decimal a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Decimal[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Divide(Decimal[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Divide(Decimal[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Decimal[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Decimal[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] DivideByDiagonal(Decimal[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(decimal a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, double b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(decimal a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[] a, Double[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[] a, Double[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Double[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[][] a, Double[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[] a, Double[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[] a, Double[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Double[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Double[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Double[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Double[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(decimal a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, byte b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(decimal a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[] a, Byte[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[] a, Byte[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Byte[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[][] a, Byte[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[] a, Byte[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Byte[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Byte[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Byte[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Decimal[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Decimal[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Divide(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Divide(Decimal[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(Decimal[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Divide(decimal a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Decimal[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Decimal[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Divide(Decimal[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Divide(Decimal[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Decimal[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Divide(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Divide(Decimal[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Decimal[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Decimal[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] DivideByDiagonal(Decimal[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(decimal a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(Decimal[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Divide(decimal a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Divide(Decimal[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Divide(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Divide(Decimal[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] DivideByDiagonal(Decimal[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Divide(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(Decimal[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Divide(decimal a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Divide(Decimal[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Divide(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Divide(Decimal[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] DivideByDiagonal(Decimal[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] DivideByDiagonal(Decimal[][] a, Decimal[] b, Double[][] result);
    private static TOutput[] VectorCreateAs(TInput[] vector);
    private static TOutput[0...,0...] MatrixCreateAs(TInput[0...,0...] matrix);
    private static TOutput[][] JaggedCreateAs(TInput[][] matrix);
    private static TOutput[0...,0...] MatrixCreateAs(TInput[][] matrix);
    private static TOutput[][] JaggedCreateAs(TInput[0...,0...] matrix);
    [ExtensionAttribute]
private static T[0...,0...] MemberwiseClone(T[0...,0...] matrix);
    [ExtensionAttribute]
private static T[][] MemberwiseClone(T[][] matrix);
    [ExtensionAttribute]
public static Double[] Exp(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Exp(Int32[][] value);
    [ExtensionAttribute]
public static Double[] Log(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Log(Int32[][] value);
    [ExtensionAttribute]
public static Int32[] Sign(Int32[] value);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Int32[][] Sign(Int32[][] value);
    [ExtensionAttribute]
public static Int32[] Abs(Int32[] value);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Int32[][] Abs(Int32[][] value);
    [ExtensionAttribute]
public static Double[] Sqrt(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sqrt(Int32[][] value);
    [ExtensionAttribute]
public static Double[] SignSqrt(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Int32[][] value);
    [ExtensionAttribute]
public static Double[] Floor(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Floor(Int32[][] value);
    [ExtensionAttribute]
public static Double[] Ceiling(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Ceiling(Int32[][] value);
    [ExtensionAttribute]
public static Double[] Round(Int32[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Int32[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Round(Int32[][] value);
    [ExtensionAttribute]
public static Double[] Exp(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Exp(Int16[][] value);
    [ExtensionAttribute]
public static Double[] Log(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Log(Int16[][] value);
    [ExtensionAttribute]
public static Int16[] Sign(Int16[] value);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Int16[][] Sign(Int16[][] value);
    [ExtensionAttribute]
public static Int16[] Abs(Int16[] value);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Int16[][] Abs(Int16[][] value);
    [ExtensionAttribute]
public static Double[] Sqrt(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sqrt(Int16[][] value);
    [ExtensionAttribute]
public static Double[] SignSqrt(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Int16[][] value);
    [ExtensionAttribute]
public static Double[] Floor(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Floor(Int16[][] value);
    [ExtensionAttribute]
public static Double[] Ceiling(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Ceiling(Int16[][] value);
    [ExtensionAttribute]
public static Double[] Round(Int16[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Int16[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Round(Int16[][] value);
    [ExtensionAttribute]
public static Double[] Exp(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Exp(Single[][] value);
    [ExtensionAttribute]
public static Double[] Log(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Log(Single[][] value);
    [ExtensionAttribute]
public static Single[] Sign(Single[] value);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Single[0...,0...] value);
    [ExtensionAttribute]
public static Single[][] Sign(Single[][] value);
    [ExtensionAttribute]
public static Single[] Abs(Single[] value);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Single[0...,0...] value);
    [ExtensionAttribute]
public static Single[][] Abs(Single[][] value);
    [ExtensionAttribute]
public static Double[] Sqrt(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sqrt(Single[][] value);
    [ExtensionAttribute]
public static Double[] SignSqrt(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Single[][] value);
    [ExtensionAttribute]
public static Double[] Floor(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Floor(Single[][] value);
    [ExtensionAttribute]
public static Double[] Ceiling(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Ceiling(Single[][] value);
    [ExtensionAttribute]
public static Double[] Round(Single[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Single[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Round(Single[][] value);
    [ExtensionAttribute]
public static Double[] Exp(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Exp(Double[][] value);
    [ExtensionAttribute]
public static Double[] Log(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Log(Double[][] value);
    [ExtensionAttribute]
public static Double[] Sign(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sign(Double[][] value);
    [ExtensionAttribute]
public static Double[] Abs(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Abs(Double[][] value);
    [ExtensionAttribute]
public static Double[] Sqrt(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sqrt(Double[][] value);
    [ExtensionAttribute]
public static Double[] SignSqrt(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Double[][] value);
    [ExtensionAttribute]
public static Double[] Floor(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Floor(Double[][] value);
    [ExtensionAttribute]
public static Double[] Ceiling(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Ceiling(Double[][] value);
    [ExtensionAttribute]
public static Double[] Round(Double[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Double[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Round(Double[][] value);
    [ExtensionAttribute]
public static Double[] Exp(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Exp(Int64[][] value);
    [ExtensionAttribute]
public static Double[] Log(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Log(Int64[][] value);
    [ExtensionAttribute]
public static Int64[] Sign(Int64[] value);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Int64[][] Sign(Int64[][] value);
    [ExtensionAttribute]
public static Int64[] Abs(Int64[] value);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Int64[][] Abs(Int64[][] value);
    [ExtensionAttribute]
public static Double[] Sqrt(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sqrt(Int64[][] value);
    [ExtensionAttribute]
public static Double[] SignSqrt(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Int64[][] value);
    [ExtensionAttribute]
public static Double[] Floor(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Floor(Int64[][] value);
    [ExtensionAttribute]
public static Double[] Ceiling(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Ceiling(Int64[][] value);
    [ExtensionAttribute]
public static Double[] Round(Int64[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Int64[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Round(Int64[][] value);
    [ExtensionAttribute]
public static Double[] Exp(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Exp(Decimal[][] value);
    [ExtensionAttribute]
public static Double[] Log(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Log(Decimal[][] value);
    [ExtensionAttribute]
public static Decimal[] Sign(Decimal[] value);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Decimal[][] Sign(Decimal[][] value);
    [ExtensionAttribute]
public static Decimal[] Abs(Decimal[] value);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Decimal[][] Abs(Decimal[][] value);
    [ExtensionAttribute]
public static Double[] Sqrt(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Sqrt(Decimal[][] value);
    [ExtensionAttribute]
public static Double[] SignSqrt(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Decimal[][] value);
    [ExtensionAttribute]
public static Double[] Floor(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Floor(Decimal[][] value);
    [ExtensionAttribute]
public static Double[] Ceiling(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Ceiling(Decimal[][] value);
    [ExtensionAttribute]
public static Double[] Round(Decimal[] value);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Decimal[0...,0...] value);
    [ExtensionAttribute]
public static Double[][] Round(Decimal[][] value);
    [ExtensionAttribute]
public static Int32[] Exp(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Exp(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Exp(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Log(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Log(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Log(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sign(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sign(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Abs(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Abs(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sqrt(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sqrt(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sqrt(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] SignSqrt(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignSqrt(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignSqrt(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Floor(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Floor(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Floor(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Ceiling(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Ceiling(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Ceiling(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Round(Int32[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Round(Int32[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Round(Int32[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] Exp(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Exp(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Exp(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Log(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Log(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Log(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sign(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sign(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Abs(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Abs(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sqrt(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sqrt(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sqrt(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] SignSqrt(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignSqrt(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignSqrt(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Floor(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Floor(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Floor(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Ceiling(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Ceiling(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Ceiling(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Round(Int32[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Round(Int32[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Round(Int32[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Single[] Exp(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Exp(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Exp(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Log(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Log(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Log(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sign(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sign(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Abs(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Abs(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sqrt(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sqrt(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sqrt(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] SignSqrt(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignSqrt(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignSqrt(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Floor(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Floor(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Floor(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Ceiling(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Ceiling(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Ceiling(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Round(Int32[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Round(Int32[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Round(Int32[][] value, Single[][] result);
    [ExtensionAttribute]
public static Double[] Exp(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Exp(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Log(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Log(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sign(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sign(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Abs(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Abs(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sqrt(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sqrt(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] SignSqrt(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Floor(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Floor(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Ceiling(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Ceiling(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Round(Int32[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Int32[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Round(Int32[][] value, Double[][] result);
    [ExtensionAttribute]
public static Int64[] Exp(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Exp(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Exp(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Log(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Log(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Log(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sign(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sign(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Abs(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Abs(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sqrt(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sqrt(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sqrt(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] SignSqrt(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignSqrt(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignSqrt(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Floor(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Floor(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Floor(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Ceiling(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Ceiling(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Ceiling(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Round(Int32[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Round(Int32[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Round(Int32[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] Exp(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Exp(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Exp(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Log(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Log(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Log(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sign(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sign(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Abs(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Abs(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sqrt(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sqrt(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sqrt(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] SignSqrt(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignSqrt(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignSqrt(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Floor(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Floor(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Floor(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Ceiling(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Ceiling(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Ceiling(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Round(Int32[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Round(Int32[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Round(Int32[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] Exp(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Exp(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Exp(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Log(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Log(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Log(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sign(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sign(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Abs(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Abs(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sqrt(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sqrt(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sqrt(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] SignSqrt(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignSqrt(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignSqrt(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Floor(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Floor(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Floor(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Ceiling(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Ceiling(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Ceiling(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Round(Int16[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Round(Int16[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Round(Int16[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] Exp(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Exp(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Exp(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Log(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Log(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Log(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sign(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sign(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Abs(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Abs(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sqrt(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sqrt(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sqrt(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] SignSqrt(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignSqrt(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignSqrt(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Floor(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Floor(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Floor(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Ceiling(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Ceiling(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Ceiling(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Round(Int16[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Round(Int16[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Round(Int16[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Single[] Exp(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Exp(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Exp(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Log(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Log(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Log(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sign(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sign(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Abs(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Abs(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sqrt(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sqrt(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sqrt(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] SignSqrt(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignSqrt(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignSqrt(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Floor(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Floor(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Floor(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Ceiling(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Ceiling(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Ceiling(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Round(Int16[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Round(Int16[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Round(Int16[][] value, Single[][] result);
    [ExtensionAttribute]
public static Double[] Exp(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Exp(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Log(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Log(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sign(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sign(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Abs(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Abs(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sqrt(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sqrt(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] SignSqrt(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Floor(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Floor(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Ceiling(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Ceiling(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Round(Int16[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Int16[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Round(Int16[][] value, Double[][] result);
    [ExtensionAttribute]
public static Int64[] Exp(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Exp(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Exp(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Log(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Log(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Log(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sign(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sign(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Abs(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Abs(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sqrt(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sqrt(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sqrt(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] SignSqrt(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignSqrt(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignSqrt(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Floor(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Floor(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Floor(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Ceiling(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Ceiling(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Ceiling(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Round(Int16[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Round(Int16[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Round(Int16[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] Exp(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Exp(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Exp(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Log(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Log(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Log(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sign(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sign(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Abs(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Abs(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sqrt(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sqrt(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sqrt(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] SignSqrt(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignSqrt(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignSqrt(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Floor(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Floor(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Floor(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Ceiling(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Ceiling(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Ceiling(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Round(Int16[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Round(Int16[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Round(Int16[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] Exp(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Exp(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Exp(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Log(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Log(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Log(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sign(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sign(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Abs(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Abs(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sqrt(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sqrt(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sqrt(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] SignSqrt(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignSqrt(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignSqrt(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Floor(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Floor(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Floor(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Ceiling(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Ceiling(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Ceiling(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Round(Single[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Round(Single[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Round(Single[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] Exp(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Exp(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Exp(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Log(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Log(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Log(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sign(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sign(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Abs(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Abs(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sqrt(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sqrt(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sqrt(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] SignSqrt(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignSqrt(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignSqrt(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Floor(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Floor(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Floor(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Ceiling(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Ceiling(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Ceiling(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Round(Single[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Round(Single[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Round(Single[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Single[] Exp(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Exp(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Exp(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Log(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Log(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Log(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sign(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sign(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Abs(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Abs(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sqrt(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sqrt(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sqrt(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] SignSqrt(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignSqrt(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignSqrt(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Floor(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Floor(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Floor(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Ceiling(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Ceiling(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Ceiling(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Round(Single[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Round(Single[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Round(Single[][] value, Single[][] result);
    [ExtensionAttribute]
public static Double[] Exp(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Exp(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Log(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Log(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sign(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sign(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Abs(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Abs(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sqrt(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sqrt(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] SignSqrt(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Floor(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Floor(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Ceiling(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Ceiling(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Round(Single[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Single[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Round(Single[][] value, Double[][] result);
    [ExtensionAttribute]
public static Int64[] Exp(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Exp(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Exp(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Log(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Log(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Log(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sign(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sign(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Abs(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Abs(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sqrt(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sqrt(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sqrt(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] SignSqrt(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignSqrt(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignSqrt(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Floor(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Floor(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Floor(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Ceiling(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Ceiling(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Ceiling(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Round(Single[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Round(Single[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Round(Single[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] Exp(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Exp(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Exp(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Log(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Log(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Log(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sign(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sign(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Abs(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Abs(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sqrt(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sqrt(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sqrt(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] SignSqrt(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignSqrt(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignSqrt(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Floor(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Floor(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Floor(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Ceiling(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Ceiling(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Ceiling(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Round(Single[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Round(Single[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Round(Single[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] Exp(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Exp(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Exp(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Log(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Log(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Log(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sign(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sign(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Abs(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Abs(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sqrt(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sqrt(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sqrt(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] SignSqrt(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignSqrt(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignSqrt(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Floor(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Floor(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Floor(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Ceiling(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Ceiling(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Ceiling(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Round(Double[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Round(Double[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Round(Double[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] Exp(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Exp(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Exp(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Log(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Log(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Log(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sign(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sign(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Abs(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Abs(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sqrt(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sqrt(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sqrt(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] SignSqrt(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignSqrt(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignSqrt(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Floor(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Floor(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Floor(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Ceiling(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Ceiling(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Ceiling(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Round(Double[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Round(Double[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Round(Double[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Single[] Exp(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Exp(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Exp(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Log(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Log(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Log(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sign(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sign(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Abs(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Abs(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sqrt(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sqrt(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sqrt(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] SignSqrt(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignSqrt(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignSqrt(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Floor(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Floor(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Floor(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Ceiling(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Ceiling(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Ceiling(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Round(Double[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Round(Double[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Round(Double[][] value, Single[][] result);
    [ExtensionAttribute]
public static Double[] Exp(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Exp(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Log(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Log(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sign(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sign(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Abs(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Abs(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sqrt(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sqrt(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] SignSqrt(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Floor(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Floor(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Ceiling(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Ceiling(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Round(Double[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Double[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Round(Double[][] value, Double[][] result);
    [ExtensionAttribute]
public static Int64[] Exp(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Exp(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Exp(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Log(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Log(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Log(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sign(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sign(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Abs(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Abs(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sqrt(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sqrt(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sqrt(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] SignSqrt(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignSqrt(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignSqrt(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Floor(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Floor(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Floor(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Ceiling(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Ceiling(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Ceiling(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Round(Double[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Round(Double[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Round(Double[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] Exp(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Exp(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Exp(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Log(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Log(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Log(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sign(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sign(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Abs(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Abs(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sqrt(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sqrt(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sqrt(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] SignSqrt(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignSqrt(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignSqrt(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Floor(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Floor(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Floor(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Ceiling(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Ceiling(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Ceiling(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Round(Double[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Round(Double[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Round(Double[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] Exp(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Exp(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Exp(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Log(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Log(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Log(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sign(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sign(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Abs(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Abs(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sqrt(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sqrt(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sqrt(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] SignSqrt(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignSqrt(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignSqrt(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Floor(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Floor(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Floor(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Ceiling(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Ceiling(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Ceiling(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Round(Int64[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Round(Int64[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Round(Int64[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] Exp(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Exp(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Exp(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Log(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Log(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Log(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sign(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sign(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Abs(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Abs(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sqrt(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sqrt(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sqrt(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] SignSqrt(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignSqrt(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignSqrt(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Floor(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Floor(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Floor(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Ceiling(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Ceiling(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Ceiling(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Round(Int64[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Round(Int64[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Round(Int64[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Single[] Exp(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Exp(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Exp(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Log(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Log(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Log(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sign(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sign(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Abs(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Abs(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sqrt(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sqrt(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sqrt(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] SignSqrt(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignSqrt(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignSqrt(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Floor(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Floor(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Floor(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Ceiling(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Ceiling(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Ceiling(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Round(Int64[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Round(Int64[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Round(Int64[][] value, Single[][] result);
    [ExtensionAttribute]
public static Double[] Exp(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Exp(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Log(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Log(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sign(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sign(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Abs(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Abs(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sqrt(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sqrt(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] SignSqrt(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Floor(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Floor(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Ceiling(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Ceiling(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Round(Int64[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Int64[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Round(Int64[][] value, Double[][] result);
    [ExtensionAttribute]
public static Int64[] Exp(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Exp(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Exp(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Log(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Log(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Log(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sign(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sign(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Abs(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Abs(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sqrt(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sqrt(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sqrt(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] SignSqrt(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignSqrt(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignSqrt(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Floor(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Floor(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Floor(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Ceiling(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Ceiling(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Ceiling(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Round(Int64[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Round(Int64[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Round(Int64[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] Exp(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Exp(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Exp(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Log(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Log(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Log(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sign(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sign(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Abs(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Abs(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sqrt(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sqrt(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sqrt(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] SignSqrt(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignSqrt(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignSqrt(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Floor(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Floor(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Floor(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Ceiling(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Ceiling(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Ceiling(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Round(Int64[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Round(Int64[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Round(Int64[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] Exp(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Exp(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Exp(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Log(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Log(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Log(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sign(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sign(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sign(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Abs(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Abs(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Abs(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Sqrt(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Sqrt(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Sqrt(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] SignSqrt(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignSqrt(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignSqrt(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Floor(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Floor(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Floor(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Ceiling(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Ceiling(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Ceiling(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Round(Decimal[] value, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Round(Decimal[0...,0...] value, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Round(Decimal[][] value, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] Exp(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Exp(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Exp(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Log(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Log(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Log(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sign(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sign(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sign(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Abs(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Abs(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Abs(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Sqrt(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Sqrt(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Sqrt(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] SignSqrt(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignSqrt(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignSqrt(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Floor(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Floor(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Floor(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Ceiling(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Ceiling(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Ceiling(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Round(Decimal[] value, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Round(Decimal[0...,0...] value, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Round(Decimal[][] value, Int16[][] result);
    [ExtensionAttribute]
public static Single[] Exp(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Exp(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Exp(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Log(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Log(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Log(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sign(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sign(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sign(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Abs(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Abs(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Abs(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Sqrt(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Sqrt(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Sqrt(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] SignSqrt(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignSqrt(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignSqrt(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Floor(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Floor(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Floor(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Ceiling(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Ceiling(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Ceiling(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Single[] Round(Decimal[] value, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Round(Decimal[0...,0...] value, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Round(Decimal[][] value, Single[][] result);
    [ExtensionAttribute]
public static Double[] Exp(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Exp(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Exp(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Log(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Log(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Log(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sign(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sign(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sign(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Abs(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Abs(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Abs(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Sqrt(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Sqrt(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Sqrt(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] SignSqrt(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignSqrt(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignSqrt(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Floor(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Floor(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Floor(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Ceiling(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Ceiling(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Ceiling(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Double[] Round(Decimal[] value, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Round(Decimal[0...,0...] value, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Round(Decimal[][] value, Double[][] result);
    [ExtensionAttribute]
public static Int64[] Exp(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Exp(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Exp(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Log(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Log(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Log(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sign(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sign(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sign(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Abs(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Abs(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Abs(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Sqrt(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Sqrt(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Sqrt(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] SignSqrt(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignSqrt(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignSqrt(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Floor(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Floor(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Floor(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Ceiling(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Ceiling(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Ceiling(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Round(Decimal[] value, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Round(Decimal[0...,0...] value, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Round(Decimal[][] value, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] Exp(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Exp(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Exp(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Log(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Log(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Log(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sign(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sign(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sign(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Abs(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Abs(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Abs(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Sqrt(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Sqrt(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Sqrt(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] SignSqrt(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignSqrt(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignSqrt(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Floor(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Floor(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Floor(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Ceiling(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Ceiling(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Ceiling(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Round(Decimal[] value, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Round(Decimal[0...,0...] value, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Round(Decimal[][] value, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] SignedPow(Int32[] value, double y);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Int32[0...,0...] value, double y);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Int32[][] value, double y);
    [ExtensionAttribute]
public static Int32[] Pow(Int32[] value, double y);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Int32[0...,0...] value, double y);
    [ExtensionAttribute]
public static Int32[][] Pow(Int32[][] value, double y);
    [ExtensionAttribute]
public static Int16[] SignedPow(Int16[] value, double y);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Int16[0...,0...] value, double y);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Int16[][] value, double y);
    [ExtensionAttribute]
public static Int16[] Pow(Int16[] value, double y);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Int16[0...,0...] value, double y);
    [ExtensionAttribute]
public static Int16[][] Pow(Int16[][] value, double y);
    [ExtensionAttribute]
public static Single[] SignedPow(Single[] value, double y);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Single[0...,0...] value, double y);
    [ExtensionAttribute]
public static Single[][] SignedPow(Single[][] value, double y);
    [ExtensionAttribute]
public static Single[] Pow(Single[] value, double y);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Single[0...,0...] value, double y);
    [ExtensionAttribute]
public static Single[][] Pow(Single[][] value, double y);
    [ExtensionAttribute]
public static Double[] SignedPow(Double[] value, double y);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Double[0...,0...] value, double y);
    [ExtensionAttribute]
public static Double[][] SignedPow(Double[][] value, double y);
    [ExtensionAttribute]
public static Double[] Pow(Double[] value, double y);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Double[0...,0...] value, double y);
    [ExtensionAttribute]
public static Double[][] Pow(Double[][] value, double y);
    [ExtensionAttribute]
public static Int64[] SignedPow(Int64[] value, double y);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Int64[0...,0...] value, double y);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Int64[][] value, double y);
    [ExtensionAttribute]
public static Int64[] Pow(Int64[] value, double y);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Int64[0...,0...] value, double y);
    [ExtensionAttribute]
public static Int64[][] Pow(Int64[][] value, double y);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Decimal[] value, double y);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Decimal[0...,0...] value, double y);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Decimal[][] value, double y);
    [ExtensionAttribute]
public static Decimal[] Pow(Decimal[] value, double y);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Decimal[0...,0...] value, double y);
    [ExtensionAttribute]
public static Decimal[][] Pow(Decimal[][] value, double y);
    [ExtensionAttribute]
public static Int32[] SignedPow(Int32[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Int32[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Int32[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Pow(Int32[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Int32[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Pow(Int32[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] SignedPow(Int32[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Int32[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Int32[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Pow(Int32[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Int32[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Pow(Int32[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Single[] SignedPow(Int32[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Int32[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignedPow(Int32[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Single[] Pow(Int32[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Int32[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Pow(Int32[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Double[] SignedPow(Int32[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Int32[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignedPow(Int32[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Double[] Pow(Int32[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Int32[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Pow(Int32[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Int64[] SignedPow(Int32[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Int32[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Int32[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Pow(Int32[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Int32[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Pow(Int32[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Int32[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Int32[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Int32[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Pow(Int32[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Int32[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Pow(Int32[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] SignedPow(Int16[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Int16[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Int16[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Pow(Int16[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Int16[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Pow(Int16[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] SignedPow(Int16[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Int16[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Int16[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Pow(Int16[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Int16[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Pow(Int16[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Single[] SignedPow(Int16[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Int16[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignedPow(Int16[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Single[] Pow(Int16[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Int16[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Pow(Int16[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Double[] SignedPow(Int16[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Int16[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignedPow(Int16[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Double[] Pow(Int16[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Int16[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Pow(Int16[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Int64[] SignedPow(Int16[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Int16[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Int16[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Pow(Int16[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Int16[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Pow(Int16[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Int16[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Int16[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Int16[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Pow(Int16[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Int16[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Pow(Int16[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] SignedPow(Single[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Single[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Single[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Pow(Single[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Single[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Pow(Single[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] SignedPow(Single[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Single[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Single[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Pow(Single[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Single[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Pow(Single[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Single[] SignedPow(Single[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Single[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignedPow(Single[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Single[] Pow(Single[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Single[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Pow(Single[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Double[] SignedPow(Single[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Single[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignedPow(Single[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Double[] Pow(Single[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Single[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Pow(Single[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Int64[] SignedPow(Single[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Single[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Single[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Pow(Single[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Single[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Pow(Single[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Single[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Single[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Single[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Pow(Single[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Single[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Pow(Single[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] SignedPow(Double[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Double[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Double[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Pow(Double[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Double[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Pow(Double[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] SignedPow(Double[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Double[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Double[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Pow(Double[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Double[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Pow(Double[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Single[] SignedPow(Double[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Double[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignedPow(Double[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Single[] Pow(Double[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Double[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Pow(Double[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Double[] SignedPow(Double[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Double[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignedPow(Double[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Double[] Pow(Double[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Double[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Pow(Double[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Int64[] SignedPow(Double[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Double[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Double[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Pow(Double[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Double[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Pow(Double[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Double[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Double[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Double[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Pow(Double[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Double[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Pow(Double[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] SignedPow(Int64[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Int64[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Int64[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Pow(Int64[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Int64[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Pow(Int64[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] SignedPow(Int64[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Int64[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Int64[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Pow(Int64[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Int64[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Pow(Int64[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Single[] SignedPow(Int64[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Int64[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignedPow(Int64[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Single[] Pow(Int64[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Int64[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Pow(Int64[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Double[] SignedPow(Int64[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Int64[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignedPow(Int64[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Double[] Pow(Int64[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Int64[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Pow(Int64[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Int64[] SignedPow(Int64[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Int64[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Int64[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Pow(Int64[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Int64[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Pow(Int64[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Int64[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Int64[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Int64[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Pow(Int64[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Int64[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Pow(Int64[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[] SignedPow(Decimal[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SignedPow(Decimal[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SignedPow(Decimal[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int32[] Pow(Decimal[] value, double y, Int32[] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Pow(Decimal[0...,0...] value, double y, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Pow(Decimal[][] value, double y, Int32[][] result);
    [ExtensionAttribute]
public static Int16[] SignedPow(Decimal[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] SignedPow(Decimal[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] SignedPow(Decimal[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Int16[] Pow(Decimal[] value, double y, Int16[] result);
    [ExtensionAttribute]
public static Int16[0...,0...] Pow(Decimal[0...,0...] value, double y, Int16[0...,0...] result);
    [ExtensionAttribute]
public static Int16[][] Pow(Decimal[][] value, double y, Int16[][] result);
    [ExtensionAttribute]
public static Single[] SignedPow(Decimal[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] SignedPow(Decimal[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SignedPow(Decimal[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Single[] Pow(Decimal[] value, double y, Single[] result);
    [ExtensionAttribute]
public static Single[0...,0...] Pow(Decimal[0...,0...] value, double y, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Pow(Decimal[][] value, double y, Single[][] result);
    [ExtensionAttribute]
public static Double[] SignedPow(Decimal[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] SignedPow(Decimal[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SignedPow(Decimal[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Double[] Pow(Decimal[] value, double y, Double[] result);
    [ExtensionAttribute]
public static Double[0...,0...] Pow(Decimal[0...,0...] value, double y, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Pow(Decimal[][] value, double y, Double[][] result);
    [ExtensionAttribute]
public static Int64[] SignedPow(Decimal[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] SignedPow(Decimal[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] SignedPow(Decimal[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Int64[] Pow(Decimal[] value, double y, Int64[] result);
    [ExtensionAttribute]
public static Int64[0...,0...] Pow(Decimal[0...,0...] value, double y, Int64[0...,0...] result);
    [ExtensionAttribute]
public static Int64[][] Pow(Decimal[][] value, double y, Int64[][] result);
    [ExtensionAttribute]
public static Decimal[] SignedPow(Decimal[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SignedPow(Decimal[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SignedPow(Decimal[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[] Pow(Decimal[] value, double y, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Pow(Decimal[0...,0...] value, double y, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Pow(Decimal[][] value, double y, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, int b);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[][] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Int32[] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Int32[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(int a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Int32[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Int32[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Int32[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Int32[] a, Single[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, float b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(int a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[] a, Double[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, double b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Double[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, byte b);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(int a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Int32[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Int32[] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Int32[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Int32[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, int b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Int32[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(float a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Single[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Single[] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(float a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[] a, Double[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, double b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Double[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, byte b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Byte[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(float a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Single[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Single[] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, decimal b);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Single[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Single[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, int b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Int32[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(double a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Double[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Double[] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, float b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Single[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(double a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Double[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Double[] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, byte b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Byte[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(double a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Double[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Double[] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, decimal b);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Double[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Double[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Multiply(Byte[] a, int b);
    [ExtensionAttribute]
public static Int32[] Multiply(Byte[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Multiply(byte a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Byte[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Byte[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Byte[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Byte[] a, Int32[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, int b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[][] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Byte[] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Byte[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(byte a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Byte[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Byte[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Byte[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Byte[] a, Single[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, float b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(byte a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[] a, Double[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, double b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Double[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, byte b);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] Multiply(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[] Multiply(byte a, Byte[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Multiply(Decimal[] a, int b);
    [ExtensionAttribute]
public static Int32[] Multiply(Decimal[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Multiply(decimal a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Decimal[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Decimal[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Decimal[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Decimal[] a, Int32[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Decimal[] a, float b);
    [ExtensionAttribute]
public static Single[] Multiply(Decimal[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Multiply(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Multiply(decimal a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Decimal[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Decimal[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Decimal[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Decimal[] a, Single[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, double b);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Multiply(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Multiply(decimal a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[] a, Double[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] Multiply(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[] Multiply(decimal a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(int a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Single[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, float b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Single[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Single[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Single[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Single[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Single[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Single[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Single[] b, Int32[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Int32[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Int32[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(int a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Int32[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Int32[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Int32[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Int32[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Int32[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Int32[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(int a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Double[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, double b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Double[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Double[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Double[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Double[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Double[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Double[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Double[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Double[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Double[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Double[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Double[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(int a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, byte b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Byte[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Byte[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Byte[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Byte[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Byte[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Byte[] b, Int32[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Int32[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Int32[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Int32[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Int32[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(int a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Int32[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Int32[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Int32[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Int32[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Int32[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Int32[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Int32[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(int a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Int32[] a, decimal b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(int a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[] a, Decimal[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Int32[][] a, Decimal[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[] a, Decimal[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Int32[][] a, Decimal[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Decimal[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Int32[][] a, Decimal[] b, Int32[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Int32[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Int32[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Int32[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Int32[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(int a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Int32[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Int32[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Int32[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Int32[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Int32[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Int32[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Int32[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Int32[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(int a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Int32[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Int32[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Int32[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Int32[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Int32[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, int b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Int32[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Int32[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Int32[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Int32[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Int32[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Int32[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Int32[] b, Single[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Single[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Single[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Single[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Single[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(float a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Single[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Single[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Single[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Single[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Single[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Single[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Single[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(float a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(float a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Double[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, double b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Double[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Double[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Double[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Double[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Double[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Double[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Double[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Double[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Double[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Double[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Double[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(float a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Byte[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, byte b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Byte[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Byte[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Byte[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Byte[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Byte[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Byte[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Byte[] b, Single[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Single[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Single[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Single[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Single[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(float a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Single[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Single[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Single[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Single[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Single[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Single[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Single[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(float a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Single[] a, decimal b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(float a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[] a, Decimal[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Single[][] a, Decimal[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[] a, Decimal[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Single[][] a, Decimal[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Decimal[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Single[][] a, Decimal[] b, Single[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Single[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Single[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Single[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Single[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(float a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Single[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Single[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Single[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Single[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Single[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Single[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Single[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Single[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(float a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Single[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Single[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Single[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Single[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Single[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Double[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Double[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Double[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Double[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(double a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Double[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Double[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Double[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Double[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Double[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Double[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Double[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Double[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Double[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Double[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Double[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Double[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Double[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Double[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Double[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(double a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Double[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Double[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Double[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Double[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Double[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Double[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Double[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Double[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Double[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Double[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Double[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Double[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Double[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Double[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Double[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(double a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Double[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Double[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Double[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Double[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Double[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Double[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Double[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Double[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Double[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Double[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Double[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Double[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(double a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Double[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Double[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Double[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Double[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Double[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Double[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Double[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Double[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(double a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Double[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Double[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Double[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Double[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Double[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Double[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Double[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Double[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Double[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Double[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Double[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Double[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, int b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(byte a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[] a, Int32[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[][] a, Int32[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[] a, Int32[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Int32[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Int32[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Int32[] b, Byte[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Byte[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Byte[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(byte a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Byte[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Byte[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Byte[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Byte[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Byte[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Byte[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(byte a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, Single[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, float b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(byte a, Single[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[] a, Single[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[][] a, Single[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[] a, Single[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Single[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Single[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Single[] b, Byte[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Byte[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Byte[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(byte a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Byte[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Byte[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Byte[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Byte[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Byte[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Byte[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(byte a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, Double[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, double b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(byte a, Double[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[] a, Double[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[] a, Double[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Double[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[][] a, Double[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[] a, Double[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[] a, Double[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Double[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Double[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Double[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Double[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(byte a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(byte a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(byte a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Byte[] a, decimal b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(byte a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[] a, Decimal[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[] a, Decimal[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Decimal[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Byte[][] a, Decimal[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[] a, Decimal[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Byte[][] a, Decimal[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Decimal[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Byte[][] a, Decimal[] b, Byte[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Byte[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Byte[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Byte[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Byte[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(byte a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Byte[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Byte[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Byte[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Byte[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Byte[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Byte[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Byte[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Byte[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Byte[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Byte[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(byte a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Byte[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Byte[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Byte[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Byte[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, int b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(decimal a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[] a, Int32[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[][] a, Int32[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[] a, Int32[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Int32[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Int32[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Int32[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Decimal[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(Decimal[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Multiply(decimal a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Decimal[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Multiply(Decimal[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Multiply(Decimal[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Decimal[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Decimal[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyWithDiagonal(Decimal[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(decimal a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, float b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(decimal a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[] a, Single[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[][] a, Single[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[] a, Single[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Single[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Single[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Single[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Multiply(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Multiply(Decimal[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(Decimal[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Multiply(decimal a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Decimal[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Multiply(Decimal[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Multiply(Decimal[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Decimal[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Decimal[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyWithDiagonal(Decimal[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(decimal a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, double b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(decimal a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[] a, Double[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[] a, Double[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Double[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[][] a, Double[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[] a, Double[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[] a, Double[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Double[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Double[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Double[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Double[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(decimal a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, byte b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(decimal a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[] a, Byte[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[] a, Byte[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Byte[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[][] a, Byte[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[] a, Byte[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Byte[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Byte[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Byte[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Decimal[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Decimal[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Decimal[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(Decimal[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Multiply(decimal a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Decimal[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Decimal[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Multiply(Decimal[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Multiply(Decimal[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Decimal[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Multiply(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Multiply(Decimal[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Decimal[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Decimal[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyWithDiagonal(Decimal[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(decimal a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(Decimal[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Multiply(decimal a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Multiply(Decimal[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Multiply(Decimal[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyWithDiagonal(Decimal[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Multiply(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(Decimal[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Multiply(decimal a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Multiply(Decimal[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Multiply(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Multiply(Decimal[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyWithDiagonal(Decimal[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyWithDiagonal(Decimal[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] MultiplyAndAdd(Int32[][] a, int b, Int32[][] c, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] MultiplyAndAdd(Int32[0...,0...] a, int b, Int32[0...,0...] c, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] MultiplyAndAdd(Single[][] a, float b, Single[][] c, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] MultiplyAndAdd(Single[0...,0...] a, float b, Single[0...,0...] c, Single[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] MultiplyAndAdd(Double[][] a, double b, Double[][] c, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] MultiplyAndAdd(Double[0...,0...] a, double b, Double[0...,0...] c, Double[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] MultiplyAndAdd(Byte[][] a, byte b, Byte[][] c, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] MultiplyAndAdd(Byte[0...,0...] a, byte b, Byte[0...,0...] c, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] MultiplyAndAdd(Decimal[][] a, decimal b, Decimal[][] c, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] MultiplyAndAdd(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] c, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, int b);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(int a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(int a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, int b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[][] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Int32[] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Int32[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(int a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Int32[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Int32[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(int a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(int a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Int32[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Int32[] a, Single[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, float b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, float b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(int a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(int a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(int a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[] a, Double[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, double b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, double b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Double[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, byte b);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(int a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(int a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Int32[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Int32[] a, Byte[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, byte b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, decimal b);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(int a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(int a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Int32[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Int32[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, decimal b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, int b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Int32[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(float a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(float a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Single[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Single[] a, Int32[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, int b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, int b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(float a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(float a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, float b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(float a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(float a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(float a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[] a, Double[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, double b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, double b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Double[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, byte b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Byte[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(float a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(float a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Single[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Single[] a, Byte[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, byte b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Byte[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, decimal b);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Decimal[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(float a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(float a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Single[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Single[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, decimal b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, int b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Int32[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(double a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(double a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Double[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Double[] a, Int32[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, int b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, int b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Int32[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, float b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Single[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(double a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(double a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Double[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Double[] a, Single[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, float b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, float b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(double a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(double a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, double b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, byte b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Byte[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(double a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(double a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Double[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Double[] a, Byte[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, byte b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Byte[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, decimal b);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Decimal[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(double a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(double a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Double[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Double[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, decimal b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Subtract(Byte[] a, int b);
    [ExtensionAttribute]
public static Int32[] Subtract(Byte[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Subtract(byte a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Byte[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Byte[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(byte a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(byte a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Byte[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Byte[] a, Int32[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, int b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, int b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[][] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Byte[] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Byte[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(byte a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Byte[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Byte[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(byte a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(byte a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Byte[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Byte[] a, Single[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, float b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, float b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(byte a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(byte a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(byte a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[] a, Double[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, double b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, double b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Double[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, byte b);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] Subtract(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[] Subtract(byte a, Byte[] b);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Byte[] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[] a, Byte[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[] a, Byte[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[][] a, Byte[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[] a, Byte[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[] a, Byte[][] b, int dimension);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(byte a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(byte a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[] a, Byte[0...,0...] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[] a, Byte[][] b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, byte b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, byte b);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Byte[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Int32[] Subtract(Decimal[] a, int b);
    [ExtensionAttribute]
public static Int32[] Subtract(Decimal[] a, Int32[] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[][] a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[] Subtract(decimal a, Int32[] b);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[][] a, Int32[] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[] a, Int32[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Decimal[][] a, Int32[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Decimal[] a, Int32[][] b, int dimension);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(decimal a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(decimal a, Int32[][] b);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Decimal[] a, Int32[0...,0...] b);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Decimal[] a, Int32[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, int b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, int b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Int32[] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Int32[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Decimal[] a, float b);
    [ExtensionAttribute]
public static Single[] Subtract(Decimal[] a, Single[] b);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[][] a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] Subtract(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[] Subtract(decimal a, Single[] b);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[][] a, Single[] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[] a, Single[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Decimal[][] a, Single[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Decimal[] a, Single[][] b, int dimension);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(decimal a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(decimal a, Single[][] b);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Decimal[] a, Single[0...,0...] b);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Decimal[] a, Single[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, float b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, float b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Single[] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Single[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, double b);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, Double[] b);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] Subtract(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[] Subtract(decimal a, Double[] b);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Double[] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[] a, Double[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[] a, Double[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[][] a, Double[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[] a, Double[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[] a, Double[][] b, int dimension);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(decimal a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(decimal a, Double[][] b);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[] a, Double[0...,0...] b);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[] a, Double[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, double b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, double b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Double[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, decimal b);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] Subtract(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[] Subtract(decimal a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Decimal[] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[] a, Decimal[0...,0...] b, VectorType dimension);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[] a, Decimal[][] b, VectorType dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[][] a, Decimal[] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[] a, Decimal[0...,0...] b, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[] a, Decimal[][] b, int dimension);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(decimal a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(decimal a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[] a, Decimal[0...,0...] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[] a, Decimal[][] b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, decimal b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, decimal b);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Decimal[] b);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Decimal[] b);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(int a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(int a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(int a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(int a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(int a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Single[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, float b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Single[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Single[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Single[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Single[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Single[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(int a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(int a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[] a, Single[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[] a, Single[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, float b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, float b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Single[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Single[] b, Int32[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Int32[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Int32[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(int a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Int32[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Int32[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Int32[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(int a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(int a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Int32[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Int32[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Int32[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Int32[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(int a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(int a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(int a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Double[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, double b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Double[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Double[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Double[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Double[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Double[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Double[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Double[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Double[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Double[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(int a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(int a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[] a, Double[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[] a, Double[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, double b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, double b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Double[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Double[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(int a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(int a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(int a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, byte b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Byte[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Byte[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Byte[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Byte[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Byte[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(int a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(int a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[] a, Byte[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[] a, Byte[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, byte b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, byte b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Byte[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Byte[] b, Int32[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Int32[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Int32[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Int32[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Int32[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(int a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Int32[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Int32[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Int32[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Int32[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(int a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(int a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Int32[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Int32[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Int32[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Int32[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(int a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(int a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(int a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Int32[] a, decimal b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(int a, Decimal[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[] a, Decimal[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Int32[][] a, Decimal[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[] a, Decimal[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Int32[][] a, Decimal[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(int a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(int a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[] a, Decimal[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[] a, Decimal[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, decimal b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, decimal b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Decimal[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Int32[][] a, Decimal[] b, Int32[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Int32[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Int32[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Int32[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Int32[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(int a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Int32[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Int32[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Int32[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Int32[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(int a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(int a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Int32[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Int32[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Int32[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Int32[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Int32[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(int a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Int32[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Int32[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Int32[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(int a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(int a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Int32[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Int32[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Int32[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, int b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Int32[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Int32[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Int32[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Int32[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Int32[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(float a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(float a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[] a, Int32[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[] a, Int32[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, int b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, int b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Int32[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Int32[] b, Single[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Single[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Single[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Single[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Single[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(float a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Single[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Single[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Single[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Single[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(float a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(float a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Single[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Single[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Single[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Single[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(float a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(float a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(float a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(float a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(float a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(float a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(float a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(float a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Double[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, double b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Double[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Double[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Double[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Double[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Double[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Double[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Double[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Double[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Double[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(float a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(float a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[] a, Double[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[] a, Double[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, double b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, double b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Double[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Double[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(float a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(float a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(float a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Byte[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, byte b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Byte[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Byte[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Byte[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Byte[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Byte[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(float a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(float a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[] a, Byte[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[] a, Byte[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, byte b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, byte b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Byte[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Byte[] b, Single[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Single[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Single[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Single[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Single[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(float a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Single[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Single[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Single[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Single[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(float a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(float a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Single[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Single[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Single[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Single[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(float a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(float a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(float a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Single[] a, decimal b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(float a, Decimal[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[] a, Decimal[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Single[][] a, Decimal[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[] a, Decimal[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Single[][] a, Decimal[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(float a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(float a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[] a, Decimal[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[] a, Decimal[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, decimal b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, decimal b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Decimal[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Single[][] a, Decimal[] b, Single[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Single[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Single[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Single[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Single[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(float a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Single[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Single[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Single[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Single[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(float a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(float a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Single[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Single[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Single[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Single[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Single[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(float a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Single[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Single[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Single[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(float a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(float a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Single[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Single[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(double a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(double a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Double[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Double[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Double[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Double[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(double a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Double[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Double[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Double[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Double[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Double[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Double[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Double[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Double[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(double a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(double a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Double[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Double[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Double[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Double[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(double a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(double a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Double[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Double[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Double[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Double[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(double a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Double[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Double[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Double[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Double[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Double[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Double[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Double[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Double[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(double a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(double a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Double[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Double[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Double[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Double[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(double a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(double a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(double a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(double a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Double[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Double[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Double[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Double[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(double a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Double[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Double[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Double[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Double[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Double[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Double[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Double[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Double[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(double a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(double a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Double[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Double[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Double[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Double[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Double[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(double a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Double[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Double[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Double[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(double a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(double a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Double[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Double[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Double[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Double[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Double[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(double a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Double[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Double[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Double[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Double[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Double[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Double[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Double[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Double[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(double a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(double a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Double[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Double[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Double[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Double[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Double[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, int b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(byte a, Int32[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[] a, Int32[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[][] a, Int32[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[] a, Int32[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Int32[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(byte a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(byte a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[] a, Int32[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[] a, Int32[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, int b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, int b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Int32[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Int32[] b, Byte[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Byte[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Byte[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(byte a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Byte[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Byte[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Byte[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(byte a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(byte a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Byte[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Byte[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Byte[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Byte[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(byte a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(byte a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(byte a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, Single[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, float b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(byte a, Single[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[] a, Single[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[][] a, Single[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[] a, Single[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Single[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(byte a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(byte a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[] a, Single[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[] a, Single[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, float b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, float b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Single[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Single[] b, Byte[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Byte[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Byte[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(byte a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Byte[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Byte[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Byte[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(byte a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(byte a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Byte[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Byte[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Byte[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Byte[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(byte a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(byte a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(byte a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, Double[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, double b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(byte a, Double[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[] a, Double[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[] a, Double[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Double[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[][] a, Double[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[] a, Double[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[] a, Double[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Double[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Double[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(byte a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(byte a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[] a, Double[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[] a, Double[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, double b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, double b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Double[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Double[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(byte a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(byte a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(byte a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(byte a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(byte a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(byte a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(byte a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(byte a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(byte a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Byte[] a, decimal b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(byte a, Decimal[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[] a, Decimal[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[] a, Decimal[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Decimal[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Byte[][] a, Decimal[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[] a, Decimal[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Byte[][] a, Decimal[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(byte a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(byte a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[] a, Decimal[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[] a, Decimal[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, decimal b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, decimal b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Decimal[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Byte[][] a, Decimal[] b, Byte[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Byte[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Byte[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Byte[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Byte[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(byte a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Byte[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Byte[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Byte[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Byte[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Byte[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Byte[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(byte a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(byte a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Byte[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Byte[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Byte[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Byte[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Byte[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(byte a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Byte[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Byte[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Byte[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(byte a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(byte a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Byte[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Byte[][] a, Decimal[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, int b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(decimal a, Int32[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[] a, Int32[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[][] a, Int32[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[] a, Int32[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Int32[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(decimal a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(decimal a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[] a, Int32[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[] a, Int32[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, int b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, int b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Int32[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Int32[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[][] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Decimal[] a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(Decimal[] a, int b, Int32[] result);
    [ExtensionAttribute]
public static Int32[] Subtract(decimal a, Int32[] b, Int32[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Decimal[] a, Int32[][] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, int dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Int32[][] Subtract(Decimal[][] a, Int32[] b, int dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[] a, Int32[][] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] Subtract(Decimal[][] a, Int32[] b, VectorType dimension, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(decimal a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(decimal a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Decimal[] a, Int32[0...,0...] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Decimal[] a, Int32[][] b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, int b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Decimal[][] a, int b, Int32[][] result);
    [ExtensionAttribute]
public static Int32[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Int32[] b, Int32[0...,0...] result);
    [ExtensionAttribute]
public static Int32[][] SubtractFromDiagonal(Decimal[][] a, Int32[] b, Int32[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, Int32[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, int b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(decimal a, Int32[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[] a, Int32[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[][] a, Int32[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[] a, Int32[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[] a, Int32[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Int32[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Int32[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(decimal a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(decimal a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[] a, Int32[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[] a, Int32[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, int b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, int b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Int32[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, Int32[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, float b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(decimal a, Single[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[] a, Single[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[][] a, Single[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[] a, Single[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Single[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(decimal a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(decimal a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[] a, Single[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[] a, Single[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, float b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, float b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Single[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Single[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[][] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[][] Subtract(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[] Subtract(Decimal[] a, Single[] b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(Decimal[] a, float b, Single[] result);
    [ExtensionAttribute]
public static Single[] Subtract(decimal a, Single[] b, Single[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Decimal[] a, Single[][] b, int dimension, Single[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, int dimension, Single[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Single[][] Subtract(Decimal[][] a, Single[] b, int dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[] a, Single[][] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, VectorType dimension, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] Subtract(Decimal[][] a, Single[] b, VectorType dimension, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(decimal a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(decimal a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Decimal[] a, Single[0...,0...] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Decimal[] a, Single[][] b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, float b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Decimal[][] a, float b, Single[][] result);
    [ExtensionAttribute]
public static Single[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Single[] b, Single[0...,0...] result);
    [ExtensionAttribute]
public static Single[][] SubtractFromDiagonal(Decimal[][] a, Single[] b, Single[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, Single[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, float b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(decimal a, Single[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[] a, Single[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[][] a, Single[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[] a, Single[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[] a, Single[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Single[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Single[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(decimal a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(decimal a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[] a, Single[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[] a, Single[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, float b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, float b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Single[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, Single[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, double b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(decimal a, Double[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[] a, Double[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[] a, Double[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Double[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[][] a, Double[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[] a, Double[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[] a, Double[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Double[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Double[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(decimal a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(decimal a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[] a, Double[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[] a, Double[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, double b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, double b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Double[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Double[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, Double[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, double b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(decimal a, Double[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[] a, Double[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[] a, Double[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Double[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[][] a, Double[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[] a, Double[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[] a, Double[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Double[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Double[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(decimal a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(decimal a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[] a, Double[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[] a, Double[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, double b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, double b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Double[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, Double[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, byte b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(decimal a, Byte[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[] a, Byte[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[] a, Byte[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Byte[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[][] a, Byte[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[] a, Byte[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Byte[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(decimal a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(decimal a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[] a, Byte[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[] a, Byte[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, byte b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, byte b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Byte[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Byte[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Decimal[][] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Decimal[0...,0...] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Decimal[] a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(Decimal[] a, byte b, Byte[] result);
    [ExtensionAttribute]
public static Byte[] Subtract(decimal a, Byte[] b, Byte[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Decimal[] a, Byte[0...,0...] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Decimal[] a, Byte[][] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[0...,0...] Subtract(Decimal[0...,0...] a, Byte[] b, int dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Byte[][] Subtract(Decimal[][] a, Byte[] b, int dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Decimal[] a, Byte[][] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] Subtract(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] Subtract(Decimal[][] a, Byte[] b, VectorType dimension, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(decimal a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(decimal a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Decimal[] a, Byte[0...,0...] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Decimal[] a, Byte[][] b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, byte b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Decimal[][] a, byte b, Byte[][] result);
    [ExtensionAttribute]
public static Byte[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Byte[] b, Byte[0...,0...] result);
    [ExtensionAttribute]
public static Byte[][] SubtractFromDiagonal(Decimal[][] a, Byte[] b, Byte[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, Byte[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, byte b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(decimal a, Byte[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[] a, Byte[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[] a, Byte[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Byte[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[][] a, Byte[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[] a, Byte[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[] a, Byte[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Byte[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Byte[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(decimal a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(decimal a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[] a, Byte[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[] a, Byte[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, byte b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, byte b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Byte[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, Byte[] b, Double[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(Decimal[] a, decimal b, Decimal[] result);
    [ExtensionAttribute]
public static Decimal[] Subtract(decimal a, Decimal[] b, Decimal[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[] a, Decimal[0...,0...] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[] a, Decimal[][] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[] b, int dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Decimal[][] Subtract(Decimal[][] a, Decimal[] b, int dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[] a, Decimal[][] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] Subtract(Decimal[][] a, Decimal[] b, VectorType dimension, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(decimal a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(decimal a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[] a, Decimal[0...,0...] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[] a, Decimal[][] b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, decimal b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, decimal b, Decimal[][] result);
    [ExtensionAttribute]
public static Decimal[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Decimal[] b, Decimal[0...,0...] result);
    [ExtensionAttribute]
public static Decimal[][] SubtractFromDiagonal(Decimal[][] a, Decimal[] b, Decimal[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[][] Subtract(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(Decimal[] a, decimal b, Double[] result);
    [ExtensionAttribute]
public static Double[] Subtract(decimal a, Decimal[] b, Double[] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[] a, Decimal[0...,0...] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[] a, Decimal[][] b, int dimension, Double[][] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[] b, int dimension, Double[0...,0...] result);
    [ExtensionAttribute]
[ObsoleteAttribute("Please specify a VectorType instead of an integer for the dimension argument")]
public static Double[][] Subtract(Decimal[][] a, Decimal[] b, int dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[] a, Decimal[0...,0...] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[] a, Decimal[][] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] Subtract(Decimal[0...,0...] a, Decimal[] b, VectorType dimension, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] Subtract(Decimal[][] a, Decimal[] b, VectorType dimension, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(decimal a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(decimal a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[] a, Decimal[0...,0...] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[] a, Decimal[][] b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, decimal b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, decimal b, Double[][] result);
    [ExtensionAttribute]
public static Double[0...,0...] SubtractFromDiagonal(Decimal[0...,0...] a, Decimal[] b, Double[0...,0...] result);
    [ExtensionAttribute]
public static Double[][] SubtractFromDiagonal(Decimal[][] a, Decimal[] b, Double[][] result);
}
public enum Accord.Math.VectorType : Enum {
    public int value__;
    public static VectorType RowVector;
    public static VectorType ColumnVector;
}
