public abstract class AdaptiveCards.AdaptiveAction : AdaptiveTypedElement {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Speak>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveActionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string Title { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("ActionBase.Speak has been deprecated.  Use AdaptiveCard.Speak", "False")]
public string Speak { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string IconUrl { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("default")]
public string Style { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool IsEnabled { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveActionMode", "primary")]
public AdaptiveActionMode Mode { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string Tooltip { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Speak();
    [CompilerGeneratedAttribute]
public void set_Speak(string value);
    [CompilerGeneratedAttribute]
public string get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public AdaptiveActionMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(AdaptiveActionMode value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveActionMode>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveActionMode : Enum {
    public int value__;
    public static AdaptiveActionMode Primary;
    public static AdaptiveActionMode Secondary;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveActionSet : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveAction> <Actions>k__BackingField;
    [XmlIgnoreAttribute]
[JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.IgnoreEmptyItemsConverter`1<AdaptiveCards.AdaptiveAction>")]
[XmlElementAttribute("AdaptiveCards.AdaptiveOpenUrlAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveShowCardAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveSubmitAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveToggleVisibilityAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveExecuteAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveUnknownAction")]
public List`1<AdaptiveAction> Actions { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<AdaptiveAction> value);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveAssociatedInputs>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveAssociatedInputs : Enum {
    public int value__;
    public static AdaptiveAssociatedInputs Auto;
    public static AdaptiveAssociatedInputs None;
}
public class AdaptiveCards.AdaptiveAuthCardButton : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string Title { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string Image { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class AdaptiveCards.AdaptiveAuthentication : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTokenExchangeResource <TokenExchangeResource>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveAuthCardButton> <Buttons>k__BackingField;
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string Text { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string ConnectionName { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute("AdaptiveCards.AdaptiveTokenExchangeResource")]
public AdaptiveTokenExchangeResource TokenExchangeResource { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute("AdaptiveCards.AdaptiveAuthCardButton")]
public List`1<AdaptiveAuthCardButton> Buttons { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public void set_ConnectionName(string value);
    [CompilerGeneratedAttribute]
public AdaptiveTokenExchangeResource get_TokenExchangeResource();
    [CompilerGeneratedAttribute]
public void set_TokenExchangeResource(AdaptiveTokenExchangeResource value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveAuthCardButton> get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(List`1<AdaptiveAuthCardButton> value);
}
[XmlTypeAttribute]
[JsonObjectAttribute]
public class AdaptiveCards.AdaptiveBackgroundImage : object {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveImageFillMode <FillMode>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveVerticalAlignment <VerticalAlignment>k__BackingField;
    [JsonRequiredAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public Uri Url { get; public set; }
    [XmlAttributeAttribute("BackgroundImage")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[JsonIgnoreAttribute]
public string UrlString { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveImageFillMode", "cover")]
public AdaptiveImageFillMode FillMode { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveHorizontalAlignment", "left")]
public AdaptiveHorizontalAlignment HorizontalAlignment { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveVerticalAlignment", "top")]
public AdaptiveVerticalAlignment VerticalAlignment { get; public set; }
    public AdaptiveBackgroundImage(string url);
    public AdaptiveBackgroundImage(Uri url);
    public AdaptiveBackgroundImage(string url, AdaptiveImageFillMode fillMode, AdaptiveHorizontalAlignment hAlignment, AdaptiveVerticalAlignment vAlignment);
    public AdaptiveBackgroundImage(Uri url, AdaptiveImageFillMode fillMode, AdaptiveHorizontalAlignment hAlignment, AdaptiveVerticalAlignment vAlignment);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    public string get_UrlString();
    public void set_UrlString(string value);
    [CompilerGeneratedAttribute]
public AdaptiveImageFillMode get_FillMode();
    [CompilerGeneratedAttribute]
public void set_FillMode(AdaptiveImageFillMode value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(AdaptiveHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public AdaptiveVerticalAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(AdaptiveVerticalAlignment value);
    public bool HasDefaultValues();
    public static AdaptiveBackgroundImage op_Implicit(Uri backgroundImageUrl);
}
public class AdaptiveCards.AdaptiveBackgroundImageConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public bool CanWrite { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual void WriteJson(JsonWriter writer, object backgroundImage, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[JsonConverterAttribute("AdaptiveCards.AdaptiveCardConverter")]
[XmlRootAttribute]
public class AdaptiveCards.AdaptiveCard : AdaptiveTypedElement {
    public static string ContentType;
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public static AdaptiveSchemaVersion KnownSchemaVersion;
    [CompilerGeneratedAttribute]
private AdaptiveSchemaVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveSchemaVersion <MinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FallbackText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Speak>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveBackgroundImage <BackgroundImage>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHeight <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PixelMinHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveElement> <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveVerticalContentAlignment <VerticalContentAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAction <SelectAction>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveRefresh <Refresh>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAuthentication <Authentication>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<AdaptiveSchemaVersion> <OnDeserializingMissingVersion>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveSchemaVersion Version { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("Use the Version property instead")]
public AdaptiveSchemaVersion MinVersion { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string FallbackText { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public string Speak { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Lang { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("The Title property is not officially supported right now and should not be used")]
public string Title { get; public set; }
    [XmlElementAttribute]
[JsonPropertyAttribute]
[JsonConverterAttribute("AdaptiveCards.AdaptiveBackgroundImageConverter")]
[DefaultValueAttribute("")]
public AdaptiveBackgroundImage BackgroundImage { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.StringSizeWithUnitConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlElementAttribute]
public AdaptiveHeight Height { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.StringSizeWithUnitConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public UInt32 PixelMinHeight { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("AdaptiveCards.IgnoreEmptyItemsConverter`1<AdaptiveCards.AdaptiveElement>")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTextBlock")]
[XmlElementAttribute("AdaptiveCards.AdaptiveRichTextBlock")]
[XmlElementAttribute("AdaptiveCards.AdaptiveImage")]
[XmlElementAttribute("AdaptiveCards.AdaptiveContainer")]
[XmlElementAttribute("AdaptiveCards.AdaptiveColumnSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveImageSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveFactSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTextInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveDateInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTimeInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveNumberInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveToggleInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveChoiceSetInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveMedia")]
[XmlElementAttribute("AdaptiveCards.AdaptiveActionSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTable")]
[XmlElementAttribute("AdaptiveCards.AdaptiveUnknownElement")]
public List`1<AdaptiveElement> Body { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("AdaptiveCards.IgnoreEmptyItemsConverter`1<AdaptiveCards.AdaptiveAction>")]
[XmlElementAttribute("AdaptiveCards.AdaptiveOpenUrlAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveShowCardAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveSubmitAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveToggleVisibilityAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveExecuteAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveUnknownAction")]
public List`1<AdaptiveAction> Actions { get; public set; }
    [JsonPropertyAttribute("$schema")]
[XmlIgnoreAttribute]
internal string JsonSchema { get; internal set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveVerticalContentAlignment", "top")]
public AdaptiveVerticalContentAlignment VerticalContentAlignment { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveAction SelectAction { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveRefresh Refresh { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveAuthentication Authentication { get; public set; }
    public static Func`1<AdaptiveSchemaVersion> OnDeserializingMissingVersion { get; public set; }
    public AdaptiveCard(AdaptiveSchemaVersion schemaVersion);
    public AdaptiveCard(string schemaVersion);
    private static AdaptiveCard();
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public AdaptiveSchemaVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(AdaptiveSchemaVersion value);
    [CompilerGeneratedAttribute]
public AdaptiveSchemaVersion get_MinVersion();
    [CompilerGeneratedAttribute]
public void set_MinVersion(AdaptiveSchemaVersion value);
    [CompilerGeneratedAttribute]
public string get_FallbackText();
    [CompilerGeneratedAttribute]
public void set_FallbackText(string value);
    [CompilerGeneratedAttribute]
public string get_Speak();
    [CompilerGeneratedAttribute]
public void set_Speak(string value);
    [CompilerGeneratedAttribute]
public string get_Lang();
    [CompilerGeneratedAttribute]
public void set_Lang(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public AdaptiveBackgroundImage get_BackgroundImage();
    [CompilerGeneratedAttribute]
public void set_BackgroundImage(AdaptiveBackgroundImage value);
    [CompilerGeneratedAttribute]
public AdaptiveHeight get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(AdaptiveHeight value);
    [CompilerGeneratedAttribute]
public UInt32 get_PixelMinHeight();
    [CompilerGeneratedAttribute]
public void set_PixelMinHeight(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveElement> get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(List`1<AdaptiveElement> value);
    public bool ShouldSerializeBody();
    [CompilerGeneratedAttribute]
public List`1<AdaptiveAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<AdaptiveAction> value);
    public bool ShouldSerializeActions();
    [CompilerGeneratedAttribute]
internal string get_JsonSchema();
    [CompilerGeneratedAttribute]
internal void set_JsonSchema(string value);
    public bool ShouldSerializeJsonSchema();
    [CompilerGeneratedAttribute]
public AdaptiveVerticalContentAlignment get_VerticalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalContentAlignment(AdaptiveVerticalContentAlignment value);
    [CompilerGeneratedAttribute]
public AdaptiveAction get_SelectAction();
    [CompilerGeneratedAttribute]
public void set_SelectAction(AdaptiveAction value);
    [CompilerGeneratedAttribute]
public AdaptiveRefresh get_Refresh();
    [CompilerGeneratedAttribute]
public void set_Refresh(AdaptiveRefresh value);
    [CompilerGeneratedAttribute]
public AdaptiveAuthentication get_Authentication();
    [CompilerGeneratedAttribute]
public void set_Authentication(AdaptiveAuthentication value);
    public bool ShouldSerializeHeight();
    [CompilerGeneratedAttribute]
public static Func`1<AdaptiveSchemaVersion> get_OnDeserializingMissingVersion();
    [CompilerGeneratedAttribute]
public static void set_OnDeserializingMissingVersion(Func`1<AdaptiveSchemaVersion> value);
    public static AdaptiveCardParseResult FromJson(string json);
    public string ToJson();
    public RemoteResourceInformation[] GetResourceInformation();
    private List`1<RemoteResourceInformation> GetResourceInformationInCard(AdaptiveCard card);
    private List`1<RemoteResourceInformation> GetResourceInformationInElement(AdaptiveElement element);
}
public class AdaptiveCards.AdaptiveCardConverter : AdaptiveTypedBaseElementConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public bool CanWrite { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    private void ValidateJsonVersion(JObject& jObject);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private string ValidateLang(string val);
    public virtual bool CanConvert(Type objectType);
    private AdaptiveCard MakeFallbackTextCard(JObject jObject);
}
public class AdaptiveCards.AdaptiveCardParseResult : object {
    [CompilerGeneratedAttribute]
private AdaptiveCard <Card>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public AdaptiveCard Card { get; public set; }
    public List`1<AdaptiveWarning> Warnings { get; }
    [CompilerGeneratedAttribute]
public AdaptiveCard get_Card();
    [CompilerGeneratedAttribute]
public void set_Card(AdaptiveCard value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveWarning> get_Warnings();
}
[JsonObjectAttribute]
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveChoice : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Speak>k__BackingField;
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Title { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    [ObsoleteAttribute("Choice.IsSelected has been deprecated.  Use AdaptiveChoiceSetInput.Value", "False")]
[JsonPropertyAttribute]
public bool IsSelected { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("AdaptiveChoiceSetInput.Speak has been deprecated.  Use AdaptiveCard.Speak", "False")]
public string Speak { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(bool value);
    [CompilerGeneratedAttribute]
public string get_Speak();
    [CompilerGeneratedAttribute]
public void set_Speak(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveChoiceInputStyle : Enum {
    public int value__;
    public static AdaptiveChoiceInputStyle Compact;
    public static AdaptiveChoiceInputStyle Expanded;
    public static AdaptiveChoiceInputStyle Filtered;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveChoiceSetInput : AdaptiveInput {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveChoiceInputStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveChoice> <Choices>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveChoiceInputStyle", "compact")]
public AdaptiveChoiceInputStyle Style { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsMultiSelect { get; public set; }
    [JsonRequiredAttribute]
public List`1<AdaptiveChoice> Choices { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Wrap { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Placeholder { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public AdaptiveChoiceInputStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(AdaptiveChoiceInputStyle value);
    [CompilerGeneratedAttribute]
public bool get_IsMultiSelect();
    [CompilerGeneratedAttribute]
public void set_IsMultiSelect(bool value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveChoice> get_Choices();
    [CompilerGeneratedAttribute]
public void set_Choices(List`1<AdaptiveChoice> value);
    [CompilerGeneratedAttribute]
public bool get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(bool value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    public virtual string GetNonInteractiveValue();
}
public abstract class AdaptiveCards.AdaptiveCollectionElement : AdaptiveElement {
    [CompilerGeneratedAttribute]
private Nullable`1<AdaptiveContainerStyle> <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveVerticalContentAlignment <VerticalContentAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAction <SelectAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bleed>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PixelMinHeight>k__BackingField;
    [JsonConverterAttribute("AdaptiveCards.IgnoreNullEnumConverter`1<AdaptiveCards.AdaptiveContainerStyle>", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public Nullable`1<AdaptiveContainerStyle> Style { get; public set; }
    [JsonIgnoreAttribute]
[XmlAttributeAttribute("Style")]
[EditorBrowsableAttribute("1")]
public AdaptiveContainerStyle StyleXml { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveVerticalContentAlignment", "top")]
public AdaptiveVerticalContentAlignment VerticalContentAlignment { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveAction SelectAction { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Bleed { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.StringSizeWithUnitConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public UInt32 PixelMinHeight { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<AdaptiveContainerStyle> get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(Nullable`1<AdaptiveContainerStyle> value);
    public AdaptiveContainerStyle get_StyleXml();
    public void set_StyleXml(AdaptiveContainerStyle value);
    public bool ShouldSerializeStyleXml();
    public abstract virtual IEnumerator`1<AdaptiveElement> GetEnumerator();
    public abstract virtual void Add(AdaptiveElement value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public AdaptiveVerticalContentAlignment get_VerticalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalContentAlignment(AdaptiveVerticalContentAlignment value);
    [CompilerGeneratedAttribute]
public AdaptiveAction get_SelectAction();
    [CompilerGeneratedAttribute]
public void set_SelectAction(AdaptiveAction value);
    [CompilerGeneratedAttribute]
public bool get_Bleed();
    [CompilerGeneratedAttribute]
public void set_Bleed(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_PixelMinHeight();
    [CompilerGeneratedAttribute]
public void set_PixelMinHeight(UInt32 value);
}
public abstract class AdaptiveCards.AdaptiveCollectionWithContentAlignment : AdaptiveElement {
    [CompilerGeneratedAttribute]
private AdaptiveVerticalContentAlignment <VerticalContentAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalContentAlignment <HorizontalContentAlignment>k__BackingField;
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveVerticalContentAlignment", "top")]
public AdaptiveVerticalContentAlignment VerticalContentAlignment { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveHorizontalContentAlignment", "left")]
public AdaptiveHorizontalContentAlignment HorizontalContentAlignment { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveVerticalContentAlignment get_VerticalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalContentAlignment(AdaptiveVerticalContentAlignment value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalContentAlignment get_HorizontalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalContentAlignment(AdaptiveHorizontalContentAlignment value);
    public abstract virtual IEnumerator`1<AdaptiveElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(AdaptiveElement element);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveColumn : AdaptiveContainer {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rtl>k__BackingField;
    [XmlIgnoreAttribute]
[JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("Column.Size has been deprecated.  Use Column.Width", "False")]
public string Size { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Width { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public Nullable`1<bool> Rtl { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rtl();
    [CompilerGeneratedAttribute]
public void set_Rtl(Nullable`1<bool> value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveColumnSet : AdaptiveCollectionElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveColumn> <Columns>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlElementAttribute]
public List`1<AdaptiveColumn> Columns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveColumn> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<AdaptiveColumn> value);
    public virtual IEnumerator`1<AdaptiveElement> GetEnumerator();
    public virtual void Add(AdaptiveElement element);
}
[ObsoleteAttribute("ColumnSize has been deprecated.  Use ColumnWidth", "False")]
public class AdaptiveCards.AdaptiveColumnSize : object {
    public static string Auto;
    public static string Stretch;
}
public class AdaptiveCards.AdaptiveColumnWidth : object {
    public static string Auto;
    public static string Stretch;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveContainer : AdaptiveCollectionElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveBackgroundImage <BackgroundImage>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveElement> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rtl>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.AdaptiveBackgroundImageConverter")]
[JsonPropertyAttribute]
[DefaultValueAttribute("")]
public AdaptiveBackgroundImage BackgroundImage { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("AdaptiveCards.IgnoreEmptyItemsConverter`1<AdaptiveCards.AdaptiveElement>")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTextBlock")]
[XmlElementAttribute("AdaptiveCards.AdaptiveRichTextBlock")]
[XmlElementAttribute("AdaptiveCards.AdaptiveImage")]
[XmlElementAttribute("AdaptiveCards.AdaptiveContainer")]
[XmlElementAttribute("AdaptiveCards.AdaptiveColumnSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveImageSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveFactSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTextInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveDateInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTimeInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveNumberInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveChoiceSetInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveToggleInput")]
[XmlElementAttribute("AdaptiveCards.AdaptiveMedia")]
[XmlElementAttribute("AdaptiveCards.AdaptiveActionSet")]
[XmlElementAttribute("AdaptiveCards.AdaptiveUnknownElement")]
public List`1<AdaptiveElement> Items { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public Nullable`1<bool> Rtl { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public AdaptiveBackgroundImage get_BackgroundImage();
    [CompilerGeneratedAttribute]
public void set_BackgroundImage(AdaptiveBackgroundImage value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveElement> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<AdaptiveElement> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rtl();
    [CompilerGeneratedAttribute]
public void set_Rtl(Nullable`1<bool> value);
    public virtual IEnumerator`1<AdaptiveElement> GetEnumerator();
    public virtual void Add(AdaptiveElement element);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveContainerStyle>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveContainerStyle : Enum {
    public int value__;
    [ObsoleteAttribute("ContainerStyle.Normal has been deprecated.  Use ContainerStyle.Default", "False")]
public static AdaptiveContainerStyle Normal;
    public static AdaptiveContainerStyle Default;
    public static AdaptiveContainerStyle Emphasis;
    public static AdaptiveContainerStyle Good;
    public static AdaptiveContainerStyle Attention;
    public static AdaptiveContainerStyle Warning;
    public static AdaptiveContainerStyle Accent;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveDateInput : AdaptiveInput {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Placeholder { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Min { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
    public virtual string GetNonInteractiveValue();
}
public abstract class AdaptiveCards.AdaptiveElement : AdaptiveTypedElement {
    [CompilerGeneratedAttribute]
private AdaptiveSpacing <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Speak>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHeight <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveSpacing", "default")]
public AdaptiveSpacing Spacing { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Separator { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("CardElement.Speak has been deprecated.  Use AdaptiveCard.Speak", "False")]
public string Speak { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.StringSizeWithUnitConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlElementAttribute]
public AdaptiveHeight Height { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("True")]
public bool IsVisible { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveSpacing get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(AdaptiveSpacing value);
    [CompilerGeneratedAttribute]
public bool get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(bool value);
    [CompilerGeneratedAttribute]
public string get_Speak();
    [CompilerGeneratedAttribute]
public void set_Speak(string value);
    [CompilerGeneratedAttribute]
public AdaptiveHeight get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(AdaptiveHeight value);
    public bool ShouldSerializeHeight();
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
}
public class AdaptiveCards.AdaptiveException : Exception {
    public AdaptiveException(string message);
    public AdaptiveException(string message, Exception innerException);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveExecuteAction : AdaptiveAction {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAssociatedInputs <AssociatedInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlIgnoreAttribute]
public object Data { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveAssociatedInputs", "auto")]
public AdaptiveAssociatedInputs AssociatedInputs { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public string Verb { get; public set; }
    [JsonIgnoreAttribute]
[XmlTextAttribute]
public string DataJson { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public AdaptiveAssociatedInputs get_AssociatedInputs();
    [CompilerGeneratedAttribute]
public void set_AssociatedInputs(AdaptiveAssociatedInputs value);
    [CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(string value);
    public string get_DataJson();
    public void set_DataJson(string value);
}
[JsonObjectAttribute]
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveFact : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Speak>k__BackingField;
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Title { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Value { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("FactSet.Speak has been deprecated.  Use AdaptiveCard.Speak", "False")]
public string Speak { get; public set; }
    public AdaptiveFact(string title, string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Speak();
    [CompilerGeneratedAttribute]
public void set_Speak(string value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveFactSet : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveFact> <Facts>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlElementAttribute]
public List`1<AdaptiveFact> Facts { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveFact> get_Facts();
    [CompilerGeneratedAttribute]
public void set_Facts(List`1<AdaptiveFact> value);
}
public class AdaptiveCards.AdaptiveFallbackConverter : AdaptiveTypedBaseElementConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public static bool IsInFallback;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object cardElement, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public AdaptiveFallbackElement ParseFallback(JToken fallbackJSON, JsonSerializer serializer, string objectId, AdaptiveInternalID internalId);
}
public class AdaptiveCards.AdaptiveFallbackElement : object {
    public static string drop;
    [CompilerGeneratedAttribute]
private AdaptiveFallbackType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTypedElement <Content>k__BackingField;
    [JsonIgnoreAttribute]
public AdaptiveFallbackType Type { get; public set; }
    [JsonIgnoreAttribute]
public AdaptiveTypedElement Content { get; public set; }
    public AdaptiveFallbackElement(AdaptiveFallbackType fallbackType);
    public AdaptiveFallbackElement(AdaptiveTypedElement fallbackContent);
    private static AdaptiveFallbackElement();
    [CompilerGeneratedAttribute]
public AdaptiveFallbackType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(AdaptiveFallbackType value);
    [CompilerGeneratedAttribute]
public AdaptiveTypedElement get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(AdaptiveTypedElement value);
}
public class AdaptiveCards.AdaptiveFallbackException : AdaptiveException {
    public AdaptiveFallbackException(string message);
    public AdaptiveFallbackException(string message, Exception innerException);
}
public class AdaptiveCards.AdaptiveFeatureRegistration : object {
    private static string adaptiveCardFeature;
    private Dictionary`2<string, string> features;
    public string Get(string feature);
    public void Set(string feature, string version);
    public void Remove(string feature);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveFontType>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveFontType : Enum {
    public int value__;
    public static AdaptiveFontType Default;
    public static AdaptiveFontType Monospace;
}
public class AdaptiveCards.AdaptiveHeight : object {
    [CompilerGeneratedAttribute]
private static AdaptiveHeight <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private static AdaptiveHeight <Stretch>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHeightType <HeightType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Unit>k__BackingField;
    public static AdaptiveHeight Auto { get; }
    public static AdaptiveHeight Stretch { get; }
    [JsonPropertyAttribute("heightType")]
[XmlAttributeAttribute]
public AdaptiveHeightType HeightType { get; public set; }
    [JsonPropertyAttribute("unit")]
[XmlIgnoreAttribute]
public Nullable`1<UInt32> Unit { get; public set; }
    [XmlAttributeAttribute("Unit")]
[JsonIgnoreAttribute]
public UInt32 UnitXml { get; public set; }
    public AdaptiveHeight(UInt32 px);
    public AdaptiveHeight(AdaptiveHeightType heightType);
    private static AdaptiveHeight();
    [CompilerGeneratedAttribute]
public static AdaptiveHeight get_Auto();
    [CompilerGeneratedAttribute]
public static AdaptiveHeight get_Stretch();
    [CompilerGeneratedAttribute]
public AdaptiveHeightType get_HeightType();
    [CompilerGeneratedAttribute]
public void set_HeightType(AdaptiveHeightType value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(Nullable`1<UInt32> value);
    public UInt32 get_UnitXml();
    public void set_UnitXml(UInt32 value);
    public bool ShouldSerializeUnitXml();
    public bool IsPixel();
    public bool ShouldSerializeAdaptiveHeight();
    public static bool op_Equality(AdaptiveHeight ah1, AdaptiveHeight ah2);
    public static bool op_Inequality(AdaptiveHeight ah1, AdaptiveHeight ah2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AdaptiveHeight other);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveHeightType>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveHeightType : Enum {
    public int value__;
    public static AdaptiveHeightType Auto;
    public static AdaptiveHeightType Stretch;
    public static AdaptiveHeightType Pixel;
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveHorizontalAlignment : Enum {
    public int value__;
    public static AdaptiveHorizontalAlignment Left;
    public static AdaptiveHorizontalAlignment Center;
    public static AdaptiveHorizontalAlignment Right;
    public static AdaptiveHorizontalAlignment Stretch;
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveHorizontalContentAlignment>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveHorizontalContentAlignment : Enum {
    public int value__;
    public static AdaptiveHorizontalContentAlignment Left;
    public static AdaptiveHorizontalContentAlignment Center;
    public static AdaptiveHorizontalContentAlignment Right;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveImage : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveImageSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveImageStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAction <SelectAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AltText>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PixelWidth>k__BackingField;
    [XmlIgnoreAttribute]
[JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveImageSize", "auto")]
public AdaptiveImageSize Size { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveImageStyle", "default")]
public AdaptiveImageStyle Style { get; public set; }
    [JsonRequiredAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public Uri Url { get; public set; }
    [XmlAttributeAttribute("Url")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[JsonIgnoreAttribute]
public string UrlString { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveHorizontalAlignment", "left")]
public AdaptiveHorizontalAlignment HorizontalAlignment { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.HashColorConverter")]
[JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string BackgroundColor { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveAction SelectAction { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string AltText { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.StringSizeWithUnitConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public UInt32 PixelWidth { get; public set; }
    [JsonIgnoreAttribute]
[XmlIgnoreAttribute]
public UInt32 PixelHeight { get; public set; }
    public AdaptiveImage(string url);
    public AdaptiveImage(Uri url);
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public AdaptiveImageSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(AdaptiveImageSize value);
    [CompilerGeneratedAttribute]
public AdaptiveImageStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(AdaptiveImageStyle value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    public string get_UrlString();
    public void set_UrlString(string value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(AdaptiveHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public string get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(string value);
    [CompilerGeneratedAttribute]
public AdaptiveAction get_SelectAction();
    [CompilerGeneratedAttribute]
public void set_SelectAction(AdaptiveAction value);
    [CompilerGeneratedAttribute]
public string get_AltText();
    [CompilerGeneratedAttribute]
public void set_AltText(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PixelWidth();
    [CompilerGeneratedAttribute]
public void set_PixelWidth(UInt32 value);
    public UInt32 get_PixelHeight();
    public void set_PixelHeight(UInt32 value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveImageFillMode : Enum {
    public int value__;
    public static AdaptiveImageFillMode Cover;
    public static AdaptiveImageFillMode RepeatHorizontally;
    public static AdaptiveImageFillMode RepeatVertically;
    public static AdaptiveImageFillMode Repeat;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveImageSet : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveImage> <Images>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveImageSize <ImageSize>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlElementAttribute("AdaptiveCards.AdaptiveImage")]
public List`1<AdaptiveImage> Images { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveImageSize", "auto")]
public AdaptiveImageSize ImageSize { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveImage> get_Images();
    [CompilerGeneratedAttribute]
public void set_Images(List`1<AdaptiveImage> value);
    [CompilerGeneratedAttribute]
public AdaptiveImageSize get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(AdaptiveImageSize value);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveImageSize>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveImageSize : Enum {
    public int value__;
    public static AdaptiveImageSize Auto;
    public static AdaptiveImageSize Stretch;
    public static AdaptiveImageSize Small;
    public static AdaptiveImageSize Medium;
    public static AdaptiveImageSize Large;
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveImageStyle>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveImageStyle : Enum {
    public int value__;
    public static AdaptiveImageStyle Default;
    [ObsoleteAttribute("ImageStyle.Normal has been deprecated.  Use ImageStyle.Default", "False")]
public static AdaptiveImageStyle Normal;
    public static AdaptiveImageStyle Person;
}
[JsonObjectAttribute]
public abstract class AdaptiveCards.AdaptiveInline : object {
    [CompilerGeneratedAttribute]
private SerializableDictionary`2<string, object> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
[XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonExtensionDataAttribute]
[XmlElementAttribute]
public SerializableDictionary`2<string, object> AdditionalProperties { get; public set; }
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public SerializableDictionary`2<string, object> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(SerializableDictionary`2<string, object> value);
    public bool ShouldSerializeAdditionalProperties();
}
internal class AdaptiveCards.AdaptiveInlinesConverter : AdaptiveTypedBaseElementConverter {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public abstract class AdaptiveCards.AdaptiveInput : AdaptiveElement {
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsRequired { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Label { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    public abstract virtual string GetNonInteractiveValue();
}
public class AdaptiveCards.AdaptiveInternalID : object {
    public static UInt32 Invalid;
    private static UInt32 CurrentInternalID;
    [CompilerGeneratedAttribute]
private UInt32 <ID>k__BackingField;
    private UInt32 ID { get; }
    private AdaptiveInternalID(UInt32 id);
    private static AdaptiveInternalID();
    [CompilerGeneratedAttribute]
private UInt32 get_ID();
    public static AdaptiveInternalID Current();
    public static AdaptiveInternalID Next();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveMedia : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveMediaSource> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Poster>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AltText>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlElementAttribute]
public List`1<AdaptiveMediaSource> Sources { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Poster { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string AltText { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveMediaSource> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(List`1<AdaptiveMediaSource> value);
    [CompilerGeneratedAttribute]
public string get_Poster();
    [CompilerGeneratedAttribute]
public void set_Poster(string value);
    [CompilerGeneratedAttribute]
public string get_AltText();
    [CompilerGeneratedAttribute]
public void set_AltText(string value);
}
[JsonObjectAttribute]
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveMediaSource : object {
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string MimeType { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Url { get; public set; }
    public AdaptiveMediaSource(string mimeType, string url);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveNumberInput : AdaptiveInput {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Placeholder { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("не число")]
public double Value { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("не число")]
public double Min { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("не число")]
public double Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    public virtual string GetNonInteractiveValue();
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveOpenUrlAction : AdaptiveAction {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public Uri Url { get; public set; }
    [XmlAttributeAttribute("Url")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[JsonIgnoreAttribute]
public string UrlString { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    public string get_UrlString();
    public void set_UrlString(string value);
}
[JsonObjectAttribute]
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveRefresh : object {
    [CompilerGeneratedAttribute]
private AdaptiveExecuteAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UserIds>k__BackingField;
    [JsonPropertyAttribute]
[XmlElementAttribute("AdaptiveCards.AdaptiveExecuteAction")]
public AdaptiveExecuteAction Action { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
public List`1<string> UserIds { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveExecuteAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(AdaptiveExecuteAction value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UserIds();
    [CompilerGeneratedAttribute]
public void set_UserIds(List`1<string> value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveRichTextBlock : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveInline> <Inlines>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveHorizontalAlignment", "left")]
public AdaptiveHorizontalAlignment HorizontalAlignment { get; public set; }
    [JsonRequiredAttribute]
[JsonConverterAttribute("AdaptiveCards.AdaptiveInlinesConverter")]
[XmlElementAttribute("AdaptiveCards.AdaptiveTextRun")]
public List`1<AdaptiveInline> Inlines { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(AdaptiveHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveInline> get_Inlines();
    [CompilerGeneratedAttribute]
public void set_Inlines(List`1<AdaptiveInline> value);
}
[JsonObjectAttribute]
[JsonConverterAttribute("AdaptiveCards.AdaptiveSchemaVersion/AdaptiveSchemaJsonConverter")]
public class AdaptiveCards.AdaptiveSchemaVersion : object {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [XmlAttributeAttribute]
public int Major { get; public set; }
    [XmlAttributeAttribute]
public int Minor { get; public set; }
    public AdaptiveSchemaVersion(string versionString);
    public AdaptiveSchemaVersion(int major, int minor);
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public void set_Minor(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static AdaptiveSchemaVersion op_Implicit(string versionString);
    public static bool op_Equality(AdaptiveSchemaVersion version1, AdaptiveSchemaVersion version2);
    public static bool op_Inequality(AdaptiveSchemaVersion version1, AdaptiveSchemaVersion version2);
    public sealed virtual int CompareTo(AdaptiveSchemaVersion other);
    public static bool op_LessThan(AdaptiveSchemaVersion left, AdaptiveSchemaVersion right);
    public static bool op_GreaterThan(AdaptiveSchemaVersion left, AdaptiveSchemaVersion right);
    public static bool op_LessThanOrEqual(AdaptiveSchemaVersion left, AdaptiveSchemaVersion right);
    public static bool op_GreaterThanOrEqual(AdaptiveSchemaVersion left, AdaptiveSchemaVersion right);
}
public class AdaptiveCards.AdaptiveSerializationException : AdaptiveException {
    public AdaptiveSerializationException(string message);
    public AdaptiveSerializationException(string message, Exception innerException);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveShowCardAction : AdaptiveAction {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveCard <Card>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute("AdaptiveCards.AdaptiveCard")]
public AdaptiveCard Card { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public AdaptiveCard get_Card();
    [CompilerGeneratedAttribute]
public void set_Card(AdaptiveCard value);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveSpacing>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveSpacing : Enum {
    public int value__;
    public static AdaptiveSpacing Default;
    public static AdaptiveSpacing None;
    public static AdaptiveSpacing Small;
    public static AdaptiveSpacing Medium;
    public static AdaptiveSpacing Large;
    public static AdaptiveSpacing ExtraLarge;
    public static AdaptiveSpacing Padding;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveSubmitAction : AdaptiveAction {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAssociatedInputs <AssociatedInputs>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlIgnoreAttribute]
public object Data { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveAssociatedInputs", "auto")]
public AdaptiveAssociatedInputs AssociatedInputs { get; public set; }
    [JsonIgnoreAttribute]
[XmlTextAttribute]
public string DataJson { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public AdaptiveAssociatedInputs get_AssociatedInputs();
    [CompilerGeneratedAttribute]
public void set_AssociatedInputs(AdaptiveAssociatedInputs value);
    public string get_DataJson();
    public void set_DataJson(string value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTable : AdaptiveCollectionWithContentAlignment {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveTableRow> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveTableColumnDefinition> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AdaptiveContainerStyle> <GridStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGridLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstRowAsHeaders>k__BackingField;
    public string Type { get; public set; }
    [XmlElementAttribute]
public List`1<AdaptiveTableRow> Rows { get; public set; }
    [XmlElementAttribute]
public List`1<AdaptiveTableColumnDefinition> Columns { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.IgnoreNullEnumConverter`1<AdaptiveCards.AdaptiveContainerStyle>", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public Nullable`1<AdaptiveContainerStyle> GridStyle { get; public set; }
    [JsonIgnoreAttribute]
[XmlAttributeAttribute("GridStyle")]
[EditorBrowsableAttribute("1")]
public AdaptiveContainerStyle GridStyleXml { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool ShowGridLines { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool FirstRowAsHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveTableRow> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(List`1<AdaptiveTableRow> value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveTableColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<AdaptiveTableColumnDefinition> value);
    public virtual IEnumerator`1<AdaptiveElement> GetEnumerator();
    public void Add(AdaptiveElement element);
    [CompilerGeneratedAttribute]
public Nullable`1<AdaptiveContainerStyle> get_GridStyle();
    [CompilerGeneratedAttribute]
public void set_GridStyle(Nullable`1<AdaptiveContainerStyle> value);
    public AdaptiveContainerStyle get_GridStyleXml();
    public void set_GridStyleXml(AdaptiveContainerStyle value);
    public bool ShouldSerializeStyleXml();
    [CompilerGeneratedAttribute]
public bool get_ShowGridLines();
    [CompilerGeneratedAttribute]
public void set_ShowGridLines(bool value);
    [CompilerGeneratedAttribute]
public bool get_FirstRowAsHeaders();
    [CompilerGeneratedAttribute]
public void set_FirstRowAsHeaders(bool value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTableCell : AdaptiveContainer {
    public static string TypeName;
}
[XmlTypeAttribute]
[JsonObjectAttribute]
public class AdaptiveCards.AdaptiveTableColumnDefinition : object {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private AdaptiveVerticalContentAlignment <VerticalContentAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalContentAlignment <HorizontalContentAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private TableColumnWidth <TableColumnWidth>k__BackingField;
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveVerticalContentAlignment", "top")]
public AdaptiveVerticalContentAlignment VerticalContentAlignment { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveHorizontalContentAlignment", "left")]
public AdaptiveHorizontalContentAlignment HorizontalContentAlignment { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.ColumnWidthConverter")]
[JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
private TableColumnWidth TableColumnWidth { get; private set; }
    [JsonIgnoreAttribute]
public double PixelWidth { get; public set; }
    [JsonIgnoreAttribute]
public long Width { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveVerticalContentAlignment get_VerticalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalContentAlignment(AdaptiveVerticalContentAlignment value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalContentAlignment get_HorizontalContentAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalContentAlignment(AdaptiveHorizontalContentAlignment value);
    [CompilerGeneratedAttribute]
private TableColumnWidth get_TableColumnWidth();
    [CompilerGeneratedAttribute]
private void set_TableColumnWidth(TableColumnWidth value);
    public double get_PixelWidth();
    public void set_PixelWidth(double value);
    public long get_Width();
    public void set_Width(long value);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTableRow : AdaptiveCollectionWithContentAlignment {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveTableCell> <Cells>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AdaptiveContainerStyle> <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rtl>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlElementAttribute]
public List`1<AdaptiveTableCell> Cells { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.IgnoreNullEnumConverter`1<AdaptiveCards.AdaptiveContainerStyle>", "Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public Nullable`1<AdaptiveContainerStyle> Style { get; public set; }
    [JsonIgnoreAttribute]
[XmlAttributeAttribute("Style")]
[EditorBrowsableAttribute("1")]
public AdaptiveContainerStyle StyleXml { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public Nullable`1<bool> Rtl { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveTableCell> get_Cells();
    [CompilerGeneratedAttribute]
public void set_Cells(List`1<AdaptiveTableCell> value);
    public virtual IEnumerator`1<AdaptiveElement> GetEnumerator();
    [CompilerGeneratedAttribute]
public Nullable`1<AdaptiveContainerStyle> get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(Nullable`1<AdaptiveContainerStyle> value);
    public AdaptiveContainerStyle get_StyleXml();
    public void set_StyleXml(AdaptiveContainerStyle value);
    public bool ShouldSerializeStyleXml();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rtl();
    [CompilerGeneratedAttribute]
public void set_Rtl(Nullable`1<bool> value);
}
[JsonObjectAttribute]
public class AdaptiveCards.AdaptiveTargetElement : object {
    [CompilerGeneratedAttribute]
private string <ElementId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsVisible>k__BackingField;
    [XmlAttributeAttribute]
public string ElementId { get; public set; }
    [JsonPropertyAttribute]
[XmlIgnoreAttribute]
public Nullable`1<bool> IsVisible { get; public set; }
    [JsonIgnoreAttribute]
[XmlAttributeAttribute("IsVisible")]
[EditorBrowsableAttribute("1")]
public bool IsVisibleXml { get; public set; }
    public AdaptiveTargetElement(string elementId);
    public AdaptiveTargetElement(string elementId, bool isVisible);
    [CompilerGeneratedAttribute]
public string get_ElementId();
    [CompilerGeneratedAttribute]
public void set_ElementId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(Nullable`1<bool> value);
    public bool get_IsVisibleXml();
    public void set_IsVisibleXml(bool value);
    public bool ShouldSerializeIsVisibleXml();
    public static AdaptiveTargetElement op_Implicit(string elementId);
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTextBlock : AdaptiveElement {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubtle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveFontType <FontType>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextBlockStyle <Style>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextSize", "normal")]
public AdaptiveTextSize Size { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextWeight", "normal")]
public AdaptiveTextWeight Weight { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextColor", "default")]
public AdaptiveTextColor Color { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsSubtle { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Italic { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Strikethrough { get; public set; }
    [JsonRequiredAttribute]
[XmlTextAttribute]
public string Text { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveHorizontalAlignment", "left")]
public AdaptiveHorizontalAlignment HorizontalAlignment { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Wrap { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int MaxLines { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int MaxWidth { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveFontType", "default")]
public AdaptiveFontType FontType { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextBlockStyle", "paragraph")]
public AdaptiveTextBlockStyle Style { get; public set; }
    public AdaptiveTextBlock(string text);
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveTextSize get_Size();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Size(AdaptiveTextSize value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveTextWeight get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Weight(AdaptiveTextWeight value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveTextColor get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(AdaptiveTextColor value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSubtle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSubtle(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Italic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Strikethrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(AdaptiveHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public bool get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxLines();
    [CompilerGeneratedAttribute]
public void set_MaxLines(int value);
    [CompilerGeneratedAttribute]
public int get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveFontType get_FontType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontType(AdaptiveFontType value);
    [CompilerGeneratedAttribute]
public AdaptiveTextBlockStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(AdaptiveTextBlockStyle value);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveTextBlockStyle>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveTextBlockStyle : Enum {
    public int value__;
    public static AdaptiveTextBlockStyle Paragraph;
    public static AdaptiveTextBlockStyle Heading;
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveTextColor>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveTextColor : Enum {
    public int value__;
    public static AdaptiveTextColor Default;
    public static AdaptiveTextColor Dark;
    public static AdaptiveTextColor Light;
    public static AdaptiveTextColor Accent;
    public static AdaptiveTextColor Good;
    public static AdaptiveTextColor Warning;
    public static AdaptiveTextColor Attention;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTextInput : AdaptiveInput {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextInputStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiline>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAction <InlineAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Placeholder { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextInputStyle", "text")]
public AdaptiveTextInputStyle Style { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsMultiline { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int MaxLength { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute("AdaptiveCards.AdaptiveOpenUrlAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveShowCardAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveSubmitAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveToggleVisibilityAction")]
[XmlElementAttribute("AdaptiveCards.AdaptiveUnknownAction")]
public AdaptiveAction InlineAction { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Regex { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public AdaptiveTextInputStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(AdaptiveTextInputStyle value);
    [CompilerGeneratedAttribute]
public bool get_IsMultiline();
    [CompilerGeneratedAttribute]
public void set_IsMultiline(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public AdaptiveAction get_InlineAction();
    [CompilerGeneratedAttribute]
public void set_InlineAction(AdaptiveAction value);
    public virtual string GetNonInteractiveValue();
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveTextInputStyle : Enum {
    public int value__;
    public static AdaptiveTextInputStyle Text;
    public static AdaptiveTextInputStyle Tel;
    public static AdaptiveTextInputStyle Url;
    public static AdaptiveTextInputStyle Email;
    public static AdaptiveTextInputStyle Password;
}
[JsonObjectAttribute]
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTextRun : AdaptiveInline {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubtle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveFontType <FontType>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveAction <SelectAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextSize", "normal")]
public AdaptiveTextSize Size { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextWeight", "normal")]
public AdaptiveTextWeight Weight { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveTextColor", "default")]
public AdaptiveTextColor Color { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool IsSubtle { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Italic { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Strikethrough { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Highlight { get; public set; }
    [JsonRequiredAttribute]
[XmlTextAttribute]
public string Text { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("AdaptiveCards.AdaptiveFontType", "default")]
public AdaptiveFontType FontType { get; public set; }
    [JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveAction SelectAction { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Underline { get; public set; }
    public AdaptiveTextRun(string text);
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveTextSize get_Size();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Size(AdaptiveTextSize value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveTextWeight get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Weight(AdaptiveTextWeight value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveTextColor get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(AdaptiveTextColor value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSubtle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSubtle(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Italic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Strikethrough(bool value);
    [CompilerGeneratedAttribute]
public bool get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual AdaptiveFontType get_FontType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontType(AdaptiveFontType value);
    [CompilerGeneratedAttribute]
public AdaptiveAction get_SelectAction();
    [CompilerGeneratedAttribute]
public void set_SelectAction(AdaptiveAction value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveTextSize>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveTextSize : Enum {
    public int value__;
    public static AdaptiveTextSize Default;
    [ObsoleteAttribute("TextSize.Normal has been deprecated.  Use Default", "False")]
public static AdaptiveTextSize Normal;
    public static AdaptiveTextSize Small;
    public static AdaptiveTextSize Medium;
    public static AdaptiveTextSize Large;
    public static AdaptiveTextSize ExtraLarge;
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveTextWeight>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveTextWeight : Enum {
    public int value__;
    public static AdaptiveTextWeight Default;
    [ObsoleteAttribute("TextWeight.Normal has been deprecated.  Use TextWeight.Default", "False")]
public static AdaptiveTextWeight Normal;
    public static AdaptiveTextWeight Lighter;
    public static AdaptiveTextWeight Bolder;
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveTimeInput : AdaptiveInput {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Max>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Placeholder { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Min { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Max { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(string value);
    [CompilerGeneratedAttribute]
public string get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(string value);
    public virtual string GetNonInteractiveValue();
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveToggleInput : AdaptiveInput {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueOff>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Title { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string ValueOn { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string ValueOff { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool Wrap { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_ValueOn();
    [CompilerGeneratedAttribute]
public void set_ValueOn(string value);
    [CompilerGeneratedAttribute]
public string get_ValueOff();
    [CompilerGeneratedAttribute]
public void set_ValueOff(string value);
    [CompilerGeneratedAttribute]
public bool get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(bool value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string GetNonInteractiveValue();
}
[XmlTypeAttribute]
public class AdaptiveCards.AdaptiveToggleVisibilityAction : AdaptiveAction {
    public static string TypeName;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdaptiveTargetElement> <TargetElements>k__BackingField;
    [XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("AdaptiveCards.ToggleElementsConverter")]
[XmlElementAttribute]
public List`1<AdaptiveTargetElement> TargetElements { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<AdaptiveTargetElement> get_TargetElements();
    [CompilerGeneratedAttribute]
public void set_TargetElements(List`1<AdaptiveTargetElement> value);
}
public class AdaptiveCards.AdaptiveTokenExchangeResource : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Id { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string Uri { get; public set; }
    [JsonRequiredAttribute]
[XmlAttributeAttribute]
public string ProviderId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(string value);
}
public abstract class AdaptiveCards.AdaptiveTypedBaseElementConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private ParseContext <ParseContext>k__BackingField;
    public ParseContext ParseContext { get; public set; }
    [CompilerGeneratedAttribute]
public ParseContext get_ParseContext();
    [CompilerGeneratedAttribute]
public void set_ParseContext(ParseContext value);
}
[JsonObjectAttribute]
[JsonConverterAttribute("AdaptiveCards.AdaptiveTypedElementConverter")]
public abstract class AdaptiveCards.AdaptiveTypedElement : object {
    [CompilerGeneratedAttribute]
private SerializableDictionary`2<string, object> <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveFallbackElement <Fallback>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveInternalID <InternalID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [JsonPropertyAttribute]
[XmlIgnoreAttribute]
[DefaultValueAttribute("")]
public IDictionary`2<string, string> Requires;
    [JsonPropertyAttribute]
[XmlIgnoreAttribute]
public string Type { get; public set; }
    [JsonExtensionDataAttribute]
[XmlElementAttribute]
public SerializableDictionary`2<string, object> AdditionalProperties { get; public set; }
    [JsonConverterAttribute("AdaptiveCards.AdaptiveFallbackConverter")]
[JsonPropertyAttribute]
[XmlElementAttribute]
[DefaultValueAttribute("")]
public AdaptiveFallbackElement Fallback { get; public set; }
    [JsonIgnoreAttribute]
[XmlIgnoreAttribute]
public AdaptiveInternalID InternalID { get; public set; }
    [JsonPropertyAttribute]
[XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string Id { get; public set; }
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public SerializableDictionary`2<string, object> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(SerializableDictionary`2<string, object> value);
    public bool ShouldSerializeAdditionalProperties();
    [CompilerGeneratedAttribute]
public AdaptiveFallbackElement get_Fallback();
    [CompilerGeneratedAttribute]
public void set_Fallback(AdaptiveFallbackElement value);
    [CompilerGeneratedAttribute]
public AdaptiveInternalID get_InternalID();
    [CompilerGeneratedAttribute]
public void set_InternalID(AdaptiveInternalID value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public bool MeetsRequirements(AdaptiveFeatureRegistration featureRegistration);
}
public class AdaptiveCards.AdaptiveTypedElementConverter : AdaptiveTypedBaseElementConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public static Lazy`1<Dictionary`2<string, Type>> TypedElementTypes;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    private static AdaptiveTypedElementConverter();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public static void RegisterTypedElement(string typeName);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public static string GetElementTypeName(Type objectType, JObject jObject);
    public static T CreateElement(string typeName);
}
public class AdaptiveCards.AdaptiveUnknownAction : AdaptiveAction {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
}
public class AdaptiveCards.AdaptiveUnknownElement : AdaptiveElement {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveVerticalAlignment : Enum {
    public int value__;
    public static AdaptiveVerticalAlignment Top;
    public static AdaptiveVerticalAlignment Center;
    public static AdaptiveVerticalAlignment Bottom;
}
[JsonConverterAttribute("AdaptiveCards.IgnoreDefaultStringEnumConverter`1<AdaptiveCards.AdaptiveVerticalContentAlignment>", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.AdaptiveVerticalContentAlignment : Enum {
    public int value__;
    public static AdaptiveVerticalContentAlignment Top;
    public static AdaptiveVerticalContentAlignment Center;
    public static AdaptiveVerticalContentAlignment Bottom;
}
public class AdaptiveCards.AdaptiveWarning : object {
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public int Code { get; public set; }
    public string Message { get; public set; }
    public AdaptiveWarning(int code, string message);
    [CompilerGeneratedAttribute]
public int get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public virtual string ToString();
}
public class AdaptiveCards.ColorUtil : object {
    public static int alphaColorLength;
    public static int colorStringLength;
    private static ColorUtil();
    public static bool IsValidColor(string color);
    public static bool TryParseColor(string color, Int32& result);
    public static string GenerateLighterColor(string hexColor);
}
internal class AdaptiveCards.ColumnWidthConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class AdaptiveCards.Globals : object {
    public static string ObjectModelVersion;
    private static Globals();
}
public class AdaptiveCards.HashColorConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    private JsonSerializer defaultSerializer;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public bool CanWrite { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public interface AdaptiveCards.IAdaptiveTextElement {
    public AdaptiveTextSize Size { get; public set; }
    public AdaptiveTextWeight Weight { get; public set; }
    public AdaptiveTextColor Color { get; public set; }
    public bool IsSubtle { get; public set; }
    public bool Italic { get; public set; }
    public bool Strikethrough { get; public set; }
    public string Text { get; public set; }
    public AdaptiveFontType FontType { get; public set; }
    public abstract virtual AdaptiveTextSize get_Size();
    public abstract virtual void set_Size(AdaptiveTextSize value);
    public abstract virtual AdaptiveTextWeight get_Weight();
    public abstract virtual void set_Weight(AdaptiveTextWeight value);
    public abstract virtual AdaptiveTextColor get_Color();
    public abstract virtual void set_Color(AdaptiveTextColor value);
    public abstract virtual bool get_IsSubtle();
    public abstract virtual void set_IsSubtle(bool value);
    public abstract virtual bool get_Italic();
    public abstract virtual void set_Italic(bool value);
    public abstract virtual bool get_Strikethrough();
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual AdaptiveFontType get_FontType();
    public abstract virtual void set_FontType(AdaptiveFontType value);
}
internal class AdaptiveCards.IgnoreDefaultStringEnumConverter`1 : StringEnumConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    private string defaultValue;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public IgnoreDefaultStringEnumConverter`1(bool camelCaseText);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    private string GetDefaultValueFromEnum();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class AdaptiveCards.IgnoreEmptyItemsConverter`1 : AdaptiveTypedBaseElementConverter {
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class AdaptiveCards.IgnoreNullEnumConverter`1 : StringEnumConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public IgnoreNullEnumConverter`1(bool camelCase);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal interface AdaptiveCards.ILogWarnings {
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public abstract virtual List`1<AdaptiveWarning> get_Warnings();
    public abstract virtual void set_Warnings(List`1<AdaptiveWarning> value);
}
[ExtensionAttribute]
public static class AdaptiveCards.JsonExtensions : object {
    [ExtensionAttribute]
public static bool IsHexDigit(char c);
    [ExtensionAttribute]
public static bool IsIntegerType(Type type);
}
public class AdaptiveCards.ParseContext : object {
    [CompilerGeneratedAttribute]
private ContextType <Type>k__BackingField;
    private IDictionary`2<string, List`1<AdaptiveInternalID>> elementIds;
    private Stack`1<Tuple`3<string, AdaptiveInternalID, bool>> idStack;
    public ContextType Type { get; public set; }
    [CompilerGeneratedAttribute]
public ContextType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ContextType value);
    public void PushElement(string idJsonProperty, AdaptiveInternalID internalId);
    public void PopElement();
    public AdaptiveInternalID GetNearestFallbackID(AdaptiveInternalID skipID);
}
public class AdaptiveCards.RemoteResourceInformation : ValueType {
    private string url;
    private string mimeType;
    public RemoteResourceInformation(string url, string mimeType);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ActionsConfig : object {
    [CompilerGeneratedAttribute]
private ActionsOrientation <ActionsOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveHorizontalAlignment <ActionAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ButtonSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxActions>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveSpacing <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private ShowCardConfig <ShowCard>k__BackingField;
    [CompilerGeneratedAttribute]
private IconPlacement <IconPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IconSize>k__BackingField;
    [JsonPropertyAttribute]
public ActionsOrientation ActionsOrientation { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveHorizontalAlignment ActionAlignment { get; public set; }
    [JsonPropertyAttribute]
public int ButtonSpacing { get; public set; }
    [JsonPropertyAttribute]
public int MaxActions { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveSpacing Spacing { get; public set; }
    [JsonPropertyAttribute]
public ShowCardConfig ShowCard { get; public set; }
    [JsonPropertyAttribute]
public IconPlacement IconPlacement { get; public set; }
    [JsonPropertyAttribute]
public int IconSize { get; public set; }
    [CompilerGeneratedAttribute]
public ActionsOrientation get_ActionsOrientation();
    [CompilerGeneratedAttribute]
public void set_ActionsOrientation(ActionsOrientation value);
    [CompilerGeneratedAttribute]
public AdaptiveHorizontalAlignment get_ActionAlignment();
    [CompilerGeneratedAttribute]
public void set_ActionAlignment(AdaptiveHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public int get_ButtonSpacing();
    [CompilerGeneratedAttribute]
public void set_ButtonSpacing(int value);
    [CompilerGeneratedAttribute]
public int get_MaxActions();
    [CompilerGeneratedAttribute]
public void set_MaxActions(int value);
    [CompilerGeneratedAttribute]
public AdaptiveSpacing get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(AdaptiveSpacing value);
    [CompilerGeneratedAttribute]
public ShowCardConfig get_ShowCard();
    [CompilerGeneratedAttribute]
public void set_ShowCard(ShowCardConfig value);
    [CompilerGeneratedAttribute]
public IconPlacement get_IconPlacement();
    [CompilerGeneratedAttribute]
public void set_IconPlacement(IconPlacement value);
    [CompilerGeneratedAttribute]
public int get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(int value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.Rendering.ActionsOrientation : Enum {
    public int value__;
    public static ActionsOrientation Horizontal;
    public static ActionsOrientation Vertical;
}
public class AdaptiveCards.Rendering.AdaptiveActionHandlers : object {
    private List`1<Type> _supportedActions;
    public void AddSupportedAction();
    public void RemoveSupportedAction();
    public bool IsSupported(Type type);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.AdaptiveCardConfig : AdaptiveConfigBase {
    [CompilerGeneratedAttribute]
private bool <AllowCustomStyle>k__BackingField;
    [JsonPropertyAttribute]
public bool AllowCustomStyle { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowCustomStyle();
    [CompilerGeneratedAttribute]
public void set_AllowCustomStyle(bool value);
}
public abstract class AdaptiveCards.Rendering.AdaptiveCardRendererBase`2 : object {
    private AdaptiveSchemaVersion _supportedSchemaVersion;
    [CompilerGeneratedAttribute]
private AdaptiveHostConfig <HostConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveElementRenderers`2<TUIElement, TContext> <ElementRenderers>k__BackingField;
    public AdaptiveSchemaVersion SupportedSchemaVersion { get; }
    public AdaptiveHostConfig HostConfig { get; public set; }
    public AdaptiveElementRenderers`2<TUIElement, TContext> ElementRenderers { get; }
    protected abstract virtual AdaptiveSchemaVersion GetSupportedSchemaVersion();
    public AdaptiveSchemaVersion get_SupportedSchemaVersion();
    [CompilerGeneratedAttribute]
public virtual AdaptiveHostConfig get_HostConfig();
    [CompilerGeneratedAttribute]
public virtual void set_HostConfig(AdaptiveHostConfig value);
    [CompilerGeneratedAttribute]
public virtual AdaptiveElementRenderers`2<TUIElement, TContext> get_ElementRenderers();
}
[JsonObjectAttribute]
public abstract class AdaptiveCards.Rendering.AdaptiveConfigBase : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalData>k__BackingField;
    [JsonExtensionDataAttribute]
public IDictionary`2<string, JToken> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JToken> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, JToken> value);
}
public class AdaptiveCards.Rendering.AdaptiveElementRenderers`2 : object {
    private Dictionary`2<Type, Func`3<AdaptiveTypedElement, TContext, TUIElement>> _dictionary;
    public void Set(Func`3<TElement, TContext, TUIElement> renderer);
    public void Remove();
    public Func`3<TElement, TContext, TUIElement> Get();
    public Func`3<AdaptiveTypedElement, TContext, TUIElement> Get(Type type);
}
public class AdaptiveCards.Rendering.AdaptiveHostConfig : AdaptiveConfigBase {
    [CompilerGeneratedAttribute]
private ActionsConfig <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveCardConfig <AdaptiveCard>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerStylesConfig <ContainerStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSizesConfig <ImageSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSetConfig <ImageSet>k__BackingField;
    [CompilerGeneratedAttribute]
private FactSetConfig <FactSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontSizesConfig <FontSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeightsConfig <FontWeights>k__BackingField;
    [CompilerGeneratedAttribute]
private FontTypesConfig <FontTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private SpacingsConfig <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private SeparatorConfig <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaConfig <Media>k__BackingField;
    [CompilerGeneratedAttribute]
private InputsConfig <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private HeadingsConfig <Headings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsInteractivity>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ImageBaseUrl>k__BackingField;
    [JsonPropertyAttribute]
public ActionsConfig Actions { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveCardConfig AdaptiveCard { get; public set; }
    [JsonPropertyAttribute]
public ContainerStylesConfig ContainerStyles { get; public set; }
    [JsonPropertyAttribute]
public ImageSizesConfig ImageSizes { get; public set; }
    [JsonPropertyAttribute]
public ImageSetConfig ImageSet { get; public set; }
    [JsonPropertyAttribute]
public FactSetConfig FactSet { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("AdaptiveHostConfig.FontFamily has been deprecated.  Use AdaptiveHostConfig.FontTypes.Default.FontFamily", "False")]
public string FontFamily { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("AdaptiveHostConfig.FontSizes has been deprecated.  Use AdaptiveHostConfig.FontTypes.Default.FontSizes", "False")]
public FontSizesConfig FontSizes { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("AdaptiveHostConfig.FontWeights has been deprecated.  Use AdaptiveHostConfig.FontTypes.Default.FontWeights", "False")]
public FontWeightsConfig FontWeights { get; public set; }
    [JsonPropertyAttribute]
public FontTypesConfig FontTypes { get; public set; }
    [JsonPropertyAttribute]
public SpacingsConfig Spacing { get; public set; }
    [JsonPropertyAttribute]
public SeparatorConfig Separator { get; public set; }
    [JsonPropertyAttribute]
public MediaConfig Media { get; public set; }
    [JsonPropertyAttribute]
public InputsConfig Inputs { get; public set; }
    [JsonPropertyAttribute]
public HeadingsConfig Headings { get; public set; }
    public bool SupportsInteractivity { get; public set; }
    [JsonPropertyAttribute]
public Uri ImageBaseUrl { get; public set; }
    [CompilerGeneratedAttribute]
public ActionsConfig get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(ActionsConfig value);
    [CompilerGeneratedAttribute]
public AdaptiveCardConfig get_AdaptiveCard();
    [CompilerGeneratedAttribute]
public void set_AdaptiveCard(AdaptiveCardConfig value);
    [CompilerGeneratedAttribute]
public ContainerStylesConfig get_ContainerStyles();
    [CompilerGeneratedAttribute]
public void set_ContainerStyles(ContainerStylesConfig value);
    [CompilerGeneratedAttribute]
public ImageSizesConfig get_ImageSizes();
    [CompilerGeneratedAttribute]
public void set_ImageSizes(ImageSizesConfig value);
    [CompilerGeneratedAttribute]
public ImageSetConfig get_ImageSet();
    [CompilerGeneratedAttribute]
public void set_ImageSet(ImageSetConfig value);
    [CompilerGeneratedAttribute]
public FactSetConfig get_FactSet();
    [CompilerGeneratedAttribute]
public void set_FactSet(FactSetConfig value);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public FontSizesConfig get_FontSizes();
    [CompilerGeneratedAttribute]
public void set_FontSizes(FontSizesConfig value);
    [CompilerGeneratedAttribute]
public FontWeightsConfig get_FontWeights();
    [CompilerGeneratedAttribute]
public void set_FontWeights(FontWeightsConfig value);
    [CompilerGeneratedAttribute]
public FontTypesConfig get_FontTypes();
    [CompilerGeneratedAttribute]
public void set_FontTypes(FontTypesConfig value);
    [CompilerGeneratedAttribute]
public SpacingsConfig get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(SpacingsConfig value);
    [CompilerGeneratedAttribute]
public SeparatorConfig get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(SeparatorConfig value);
    [CompilerGeneratedAttribute]
public MediaConfig get_Media();
    [CompilerGeneratedAttribute]
public void set_Media(MediaConfig value);
    [CompilerGeneratedAttribute]
public InputsConfig get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(InputsConfig value);
    [CompilerGeneratedAttribute]
public HeadingsConfig get_Headings();
    [CompilerGeneratedAttribute]
public void set_Headings(HeadingsConfig value);
    [CompilerGeneratedAttribute]
public bool get_SupportsInteractivity();
    [CompilerGeneratedAttribute]
public void set_SupportsInteractivity(bool value);
    [CompilerGeneratedAttribute]
public Uri get_ImageBaseUrl();
    [CompilerGeneratedAttribute]
public void set_ImageBaseUrl(Uri value);
    public Uri ResolveFinalAbsoluteUri(string uriString);
    public Uri ResolveFinalAbsoluteUri(Uri uri);
    public int GetSpacing(AdaptiveSpacing spacing);
    public static AdaptiveHostConfig FromJson(string json);
    public string ToJson();
    public string GetFontFamily(AdaptiveFontType fontType);
    public int GetFontWeight(AdaptiveFontType fontType, AdaptiveTextWeight requestedWeight);
    public int GetFontSize(AdaptiveFontType fontType, AdaptiveTextSize requestedSize);
    private string GetDefaultFontFamily(AdaptiveFontType fontType);
}
public class AdaptiveCards.Rendering.AdaptiveRenderArgs : object {
    [CompilerGeneratedAttribute]
private AdaptiveContainerStyle <ParentStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ForegroundColorsConfig <ForegroundColors>k__BackingField;
    [CompilerGeneratedAttribute]
private BleedDirection <BleedDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParentWithPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveInternalID <ContainerCardId>k__BackingField;
    public AdaptiveContainerStyle ParentStyle { get; public set; }
    public ForegroundColorsConfig ForegroundColors { get; public set; }
    public BleedDirection BleedDirection { get; public set; }
    public bool HasParentWithPadding { get; public set; }
    public AdaptiveInternalID ContainerCardId { get; public set; }
    public AdaptiveRenderArgs(AdaptiveRenderArgs previousRenderArgs);
    [CompilerGeneratedAttribute]
public AdaptiveContainerStyle get_ParentStyle();
    [CompilerGeneratedAttribute]
public void set_ParentStyle(AdaptiveContainerStyle value);
    [CompilerGeneratedAttribute]
public ForegroundColorsConfig get_ForegroundColors();
    [CompilerGeneratedAttribute]
public void set_ForegroundColors(ForegroundColorsConfig value);
    [CompilerGeneratedAttribute]
public BleedDirection get_BleedDirection();
    [CompilerGeneratedAttribute]
public void set_BleedDirection(BleedDirection value);
    [CompilerGeneratedAttribute]
public bool get_HasParentWithPadding();
    [CompilerGeneratedAttribute]
public void set_HasParentWithPadding(bool value);
    [CompilerGeneratedAttribute]
public AdaptiveInternalID get_ContainerCardId();
    [CompilerGeneratedAttribute]
public void set_ContainerCardId(AdaptiveInternalID value);
}
public class AdaptiveCards.Rendering.AdaptiveRenderException : AdaptiveException {
    [CompilerGeneratedAttribute]
private string <CardFallbackText>k__BackingField;
    public string CardFallbackText { get; public set; }
    public AdaptiveRenderException(string message);
    public AdaptiveRenderException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_CardFallbackText();
    [CompilerGeneratedAttribute]
public void set_CardFallbackText(string value);
}
public class AdaptiveCards.Rendering.AdaptiveRenderTransformers`2 : object {
    private Dictionary`2<Type, Action`3<AdaptiveTypedElement, TUIElement, TContext>> _dictionary;
    public void Register(Action`3<TElement, TUIElement, TContext> transformer);
    public void Remove();
    public void Apply(TElement element, TUIElement uiElement, TContext context);
}
public class AdaptiveCards.Rendering.AdaptiveVisitor : object {
    public virtual void Visit(AdaptiveElement adaptiveElement);
    public virtual void Visit(AdaptiveCard card);
    public virtual void Visit(AdaptiveContainer container);
    public virtual void Visit(AdaptiveColumnSet columnSet);
    public virtual void Visit(AdaptiveFactSet factSet);
    public virtual void Visit(AdaptiveImageSet imageSet);
    public virtual void Visit(AdaptiveTextBlock textBlock);
    public virtual void Visit(AdaptiveImage image);
    public virtual void Visit(AdaptiveFact fact);
    public virtual void Visit(AdaptiveTextInput inputText);
    public virtual void Visit(AdaptiveDateInput inputDate);
    public virtual void Visit(AdaptiveNumberInput inputNumber);
    public virtual void Visit(AdaptiveTimeInput inputTime);
    public virtual void Visit(AdaptiveToggleInput inputToggle);
    public virtual void Visit(AdaptiveChoiceSetInput adaptiveChoiceSetInput);
    public virtual void Visit(AdaptiveActionSet actionSet);
    public virtual void Visit(AdaptiveAction action);
    public virtual void Visit(AdaptiveSubmitAction action);
    public virtual void Visit(AdaptiveOpenUrlAction action);
    public virtual void Visit(AdaptiveShowCardAction action);
    public virtual void Visit(AdaptiveToggleVisibilityAction action);
    public virtual void Visit(AdaptiveExecuteAction action);
    public virtual void Visit(AdaptiveMedia media);
}
public enum AdaptiveCards.Rendering.BleedDirection : Enum {
    public int value__;
    public static BleedDirection BleedNone;
    public static BleedDirection BleedLeft;
    public static BleedDirection BleedRight;
    public static BleedDirection BleedUp;
    public static BleedDirection BleedDown;
    public static BleedDirection BleedAll;
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ContainerStyleConfig : object {
    [CompilerGeneratedAttribute]
private string <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ForegroundColorsConfig <ForegroundColors>k__BackingField;
    [JsonPropertyAttribute]
public string BackgroundColor { get; public set; }
    [JsonPropertyAttribute]
public ForegroundColorsConfig ForegroundColors { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(string value);
    [CompilerGeneratedAttribute]
public ForegroundColorsConfig get_ForegroundColors();
    [CompilerGeneratedAttribute]
public void set_ForegroundColors(ForegroundColorsConfig value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ContainerStylesConfig : object {
    [CompilerGeneratedAttribute]
private ContainerStyleConfig <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerStyleConfig <Emphasis>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerStyleConfig <Good>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerStyleConfig <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerStyleConfig <Attention>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerStyleConfig <Accent>k__BackingField;
    private static ForegroundColorsConfig alternateForegroundColors;
    [JsonPropertyAttribute]
public ContainerStyleConfig Default { get; public set; }
    [JsonPropertyAttribute]
public ContainerStyleConfig Emphasis { get; public set; }
    [JsonPropertyAttribute]
public ContainerStyleConfig Good { get; public set; }
    [JsonPropertyAttribute]
public ContainerStyleConfig Warning { get; public set; }
    [JsonPropertyAttribute]
public ContainerStyleConfig Attention { get; public set; }
    [JsonPropertyAttribute]
public ContainerStyleConfig Accent { get; public set; }
    private static ContainerStylesConfig();
    [CompilerGeneratedAttribute]
public ContainerStyleConfig get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(ContainerStyleConfig value);
    [CompilerGeneratedAttribute]
public ContainerStyleConfig get_Emphasis();
    [CompilerGeneratedAttribute]
public void set_Emphasis(ContainerStyleConfig value);
    [CompilerGeneratedAttribute]
public ContainerStyleConfig get_Good();
    [CompilerGeneratedAttribute]
public void set_Good(ContainerStyleConfig value);
    [CompilerGeneratedAttribute]
public ContainerStyleConfig get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(ContainerStyleConfig value);
    [CompilerGeneratedAttribute]
public ContainerStyleConfig get_Attention();
    [CompilerGeneratedAttribute]
public void set_Attention(ContainerStyleConfig value);
    [CompilerGeneratedAttribute]
public ContainerStyleConfig get_Accent();
    [CompilerGeneratedAttribute]
public void set_Accent(ContainerStyleConfig value);
    public ContainerStyleConfig GetContainerStyleConfig(Nullable`1<AdaptiveContainerStyle> style);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ErrorMessageConfig : object {
    [CompilerGeneratedAttribute]
private AdaptiveSpacing <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextWeight <Weight>k__BackingField;
    [JsonPropertyAttribute]
public AdaptiveSpacing Spacing { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveTextSize Size { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveTextWeight Weight { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveSpacing get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(AdaptiveSpacing value);
    [CompilerGeneratedAttribute]
public AdaptiveTextSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(AdaptiveTextSize value);
    [CompilerGeneratedAttribute]
public AdaptiveTextWeight get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(AdaptiveTextWeight value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.FactSetConfig : object {
    [CompilerGeneratedAttribute]
private TextBlockConfig <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private TextBlockConfig <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Spacing>k__BackingField;
    [JsonPropertyAttribute]
public TextBlockConfig Title { get; public set; }
    [JsonPropertyAttribute]
public TextBlockConfig Value { get; public set; }
    public int Spacing { get; public set; }
    [CompilerGeneratedAttribute]
public TextBlockConfig get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(TextBlockConfig value);
    [CompilerGeneratedAttribute]
public TextBlockConfig get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TextBlockConfig value);
    [CompilerGeneratedAttribute]
public int get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(int value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.FontColorConfig : object {
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subtle>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlightColorConfig <HighlightColors>k__BackingField;
    [JsonPropertyAttribute]
public string Default { get; public set; }
    [JsonPropertyAttribute]
public string Subtle { get; public set; }
    [JsonPropertyAttribute]
public HighlightColorConfig HighlightColors { get; public set; }
    public FontColorConfig(string defaultColor, string subtle);
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    [CompilerGeneratedAttribute]
public string get_Subtle();
    [CompilerGeneratedAttribute]
public void set_Subtle(string value);
    [CompilerGeneratedAttribute]
public HighlightColorConfig get_HighlightColors();
    [CompilerGeneratedAttribute]
public void set_HighlightColors(HighlightColorConfig value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.FontSizesConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Small>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Medium>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Large>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExtraLarge>k__BackingField;
    public Nullable`1<int> Small { get; public set; }
    public Nullable`1<int> Default { get; public set; }
    public Nullable`1<int> Medium { get; public set; }
    public Nullable`1<int> Large { get; public set; }
    public Nullable`1<int> ExtraLarge { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Small();
    [CompilerGeneratedAttribute]
public void set_Small(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Medium();
    [CompilerGeneratedAttribute]
public void set_Medium(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Large();
    [CompilerGeneratedAttribute]
public void set_Large(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExtraLarge();
    [CompilerGeneratedAttribute]
public void set_ExtraLarge(Nullable`1<int> value);
    public Nullable`1<int> GetFontSize(AdaptiveTextSize fontSize);
    public static int GetDefaultFontSize(AdaptiveTextSize fontSize);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.FontStyleConfig : object {
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private FontSizesConfig <FontSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private FontWeightsConfig <FontWeights>k__BackingField;
    [JsonPropertyAttribute]
public string FontFamily { get; public set; }
    [JsonPropertyAttribute]
public FontSizesConfig FontSizes { get; public set; }
    [JsonPropertyAttribute]
public FontWeightsConfig FontWeights { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public FontSizesConfig get_FontSizes();
    [CompilerGeneratedAttribute]
public void set_FontSizes(FontSizesConfig value);
    [CompilerGeneratedAttribute]
public FontWeightsConfig get_FontWeights();
    [CompilerGeneratedAttribute]
public void set_FontWeights(FontWeightsConfig value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.FontTypesConfig : object {
    [CompilerGeneratedAttribute]
private FontStyleConfig <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyleConfig <Monospace>k__BackingField;
    [JsonPropertyAttribute]
public FontStyleConfig Default { get; public set; }
    [JsonPropertyAttribute]
public FontStyleConfig Monospace { get; public set; }
    [CompilerGeneratedAttribute]
public FontStyleConfig get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(FontStyleConfig value);
    [CompilerGeneratedAttribute]
public FontStyleConfig get_Monospace();
    [CompilerGeneratedAttribute]
public void set_Monospace(FontStyleConfig value);
    public FontStyleConfig GetFontType(AdaptiveFontType fontType);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.FontWeightsConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Lighter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Bolder>k__BackingField;
    public Nullable`1<int> Lighter { get; public set; }
    public Nullable`1<int> Default { get; public set; }
    public Nullable`1<int> Bolder { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Lighter();
    [CompilerGeneratedAttribute]
public void set_Lighter(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Bolder();
    [CompilerGeneratedAttribute]
public void set_Bolder(Nullable`1<int> value);
    public Nullable`1<int> GetFontWeight(AdaptiveTextWeight fontWeight);
    public static int GetDefaultFontWeight(AdaptiveTextWeight fontWeight);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ForegroundColorsConfig : object {
    [CompilerGeneratedAttribute]
private FontColorConfig <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private FontColorConfig <Accent>k__BackingField;
    [CompilerGeneratedAttribute]
private FontColorConfig <Dark>k__BackingField;
    [CompilerGeneratedAttribute]
private FontColorConfig <Light>k__BackingField;
    [CompilerGeneratedAttribute]
private FontColorConfig <Good>k__BackingField;
    [CompilerGeneratedAttribute]
private FontColorConfig <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private FontColorConfig <Attention>k__BackingField;
    [JsonPropertyAttribute]
public FontColorConfig Default { get; public set; }
    [JsonPropertyAttribute]
public FontColorConfig Accent { get; public set; }
    [JsonPropertyAttribute]
public FontColorConfig Dark { get; public set; }
    [JsonPropertyAttribute]
public FontColorConfig Light { get; public set; }
    [JsonPropertyAttribute]
public FontColorConfig Good { get; public set; }
    [JsonPropertyAttribute]
public FontColorConfig Warning { get; public set; }
    [JsonPropertyAttribute]
public FontColorConfig Attention { get; public set; }
    [CompilerGeneratedAttribute]
public FontColorConfig get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(FontColorConfig value);
    [CompilerGeneratedAttribute]
public FontColorConfig get_Accent();
    [CompilerGeneratedAttribute]
public void set_Accent(FontColorConfig value);
    [CompilerGeneratedAttribute]
public FontColorConfig get_Dark();
    [CompilerGeneratedAttribute]
public void set_Dark(FontColorConfig value);
    [CompilerGeneratedAttribute]
public FontColorConfig get_Light();
    [CompilerGeneratedAttribute]
public void set_Light(FontColorConfig value);
    [CompilerGeneratedAttribute]
public FontColorConfig get_Good();
    [CompilerGeneratedAttribute]
public void set_Good(FontColorConfig value);
    [CompilerGeneratedAttribute]
public FontColorConfig get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(FontColorConfig value);
    [CompilerGeneratedAttribute]
public FontColorConfig get_Attention();
    [CompilerGeneratedAttribute]
public void set_Attention(FontColorConfig value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.HeadingsConfig : object {
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public int Level { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.HighlightColorConfig : object {
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subtle>k__BackingField;
    [JsonPropertyAttribute]
public string Default { get; public set; }
    [JsonPropertyAttribute]
public string Subtle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    [CompilerGeneratedAttribute]
public string get_Subtle();
    [CompilerGeneratedAttribute]
public void set_Subtle(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.Rendering.IconPlacement : Enum {
    public int value__;
    public static IconPlacement AboveTitle;
    public static IconPlacement LeftOfTitle;
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ImageSetConfig : object {
    [CompilerGeneratedAttribute]
private AdaptiveImageSize <ImageSize>k__BackingField;
    public AdaptiveImageSize ImageSize { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveImageSize get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(AdaptiveImageSize value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ImageSizesConfig : object {
    [CompilerGeneratedAttribute]
private int <Small>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Medium>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Large>k__BackingField;
    public int Small { get; public set; }
    public int Medium { get; public set; }
    public int Large { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Small();
    [CompilerGeneratedAttribute]
public void set_Small(int value);
    [CompilerGeneratedAttribute]
public int get_Medium();
    [CompilerGeneratedAttribute]
public void set_Medium(int value);
    [CompilerGeneratedAttribute]
public int get_Large();
    [CompilerGeneratedAttribute]
public void set_Large(int value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.InputLabelConfig : object {
    [CompilerGeneratedAttribute]
private AdaptiveTextColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubtle>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextWeight <Weight>k__BackingField;
    [JsonPropertyAttribute]
public AdaptiveTextColor Color { get; public set; }
    [JsonPropertyAttribute]
public bool IsSubtle { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveTextSize Size { get; public set; }
    [JsonPropertyAttribute]
public string Suffix { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveTextWeight Weight { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveTextColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(AdaptiveTextColor value);
    [CompilerGeneratedAttribute]
public bool get_IsSubtle();
    [CompilerGeneratedAttribute]
public void set_IsSubtle(bool value);
    [CompilerGeneratedAttribute]
public AdaptiveTextSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(AdaptiveTextSize value);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public void set_Suffix(string value);
    [CompilerGeneratedAttribute]
public AdaptiveTextWeight get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(AdaptiveTextWeight value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.InputsConfig : object {
    [CompilerGeneratedAttribute]
private LabelConfig <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorMessageConfig <ErrorMessage>k__BackingField;
    [JsonPropertyAttribute]
public LabelConfig Label { get; public set; }
    [JsonPropertyAttribute]
public ErrorMessageConfig ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public LabelConfig get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(LabelConfig value);
    [CompilerGeneratedAttribute]
public ErrorMessageConfig get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(ErrorMessageConfig value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.LabelConfig : object {
    [CompilerGeneratedAttribute]
private InputLabelConfig <RequiredInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private InputLabelConfig <OptionalInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveSpacing <InputSpacing>k__BackingField;
    [JsonPropertyAttribute]
public InputLabelConfig RequiredInputs { get; public set; }
    [JsonPropertyAttribute]
public InputLabelConfig OptionalInputs { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveSpacing InputSpacing { get; public set; }
    [CompilerGeneratedAttribute]
public InputLabelConfig get_RequiredInputs();
    [CompilerGeneratedAttribute]
public void set_RequiredInputs(InputLabelConfig value);
    [CompilerGeneratedAttribute]
public InputLabelConfig get_OptionalInputs();
    [CompilerGeneratedAttribute]
public void set_OptionalInputs(InputLabelConfig value);
    [CompilerGeneratedAttribute]
public AdaptiveSpacing get_InputSpacing();
    [CompilerGeneratedAttribute]
public void set_InputSpacing(AdaptiveSpacing value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.MediaConfig : object {
    [CompilerGeneratedAttribute]
private string <DefaultPoster>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlayButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInlinePlayback>k__BackingField;
    [JsonPropertyAttribute]
public string DefaultPoster { get; public set; }
    [JsonPropertyAttribute]
public string PlayButton { get; public set; }
    public bool AllowInlinePlayback { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultPoster();
    [CompilerGeneratedAttribute]
public void set_DefaultPoster(string value);
    [CompilerGeneratedAttribute]
public string get_PlayButton();
    [CompilerGeneratedAttribute]
public void set_PlayButton(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowInlinePlayback();
    [CompilerGeneratedAttribute]
public void set_AllowInlinePlayback(bool value);
}
public abstract class AdaptiveCards.Rendering.RenderedAdaptiveCardBase : object {
    [CompilerGeneratedAttribute]
private AdaptiveCard <OriginatingCard>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AdaptiveWarning> <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderedAdaptiveCardInputs <UserInputs>k__BackingField;
    public AdaptiveCard OriginatingCard { get; }
    public IList`1<AdaptiveWarning> Warnings { get; }
    public RenderedAdaptiveCardInputs UserInputs { get; public set; }
    protected RenderedAdaptiveCardBase(AdaptiveCard originatingCard, IList`1<AdaptiveWarning> warnings);
    [CompilerGeneratedAttribute]
public AdaptiveCard get_OriginatingCard();
    [CompilerGeneratedAttribute]
public IList`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public RenderedAdaptiveCardInputs get_UserInputs();
    [CompilerGeneratedAttribute]
public void set_UserInputs(RenderedAdaptiveCardInputs value);
}
public class AdaptiveCards.Rendering.RenderedAdaptiveCardInputs : object {
    private IDictionary`2<string, Func`1<string>> _inputBindings;
    public RenderedAdaptiveCardInputs(IDictionary`2& inputBindings);
    public JObject AsJson();
    public IReadOnlyDictionary`2<string, string> AsDictionary();
}
[ExtensionAttribute]
public static class AdaptiveCards.Rendering.RendererUtilities : object {
    private static Regex TextFunctionRegex;
    private static Regex _regexBinding;
    private static RendererUtilities();
    public static string HandleHtmlSpaces(string text);
    public static string ApplyTextFunctions(string text, string lang);
    private static CultureInfo GetValidCultureInfo(string val);
    public static string JoinString(List`1<string> choices, string sep, string last);
    [ExtensionAttribute]
public static T TryGetValue(IDictionary dictionary, string key);
    [ExtensionAttribute]
public static T TryGetValue(IDictionary`2<string, object> dictionary, string key);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.SeparatorConfig : object {
    [CompilerGeneratedAttribute]
private int <LineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineColor>k__BackingField;
    public int LineThickness { get; public set; }
    [JsonPropertyAttribute]
public string LineColor { get; public set; }
    [CompilerGeneratedAttribute]
public int get_LineThickness();
    [CompilerGeneratedAttribute]
public void set_LineThickness(int value);
    [CompilerGeneratedAttribute]
public string get_LineColor();
    [CompilerGeneratedAttribute]
public void set_LineColor(string value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum AdaptiveCards.Rendering.ShowCardActionMode : Enum {
    public int value__;
    public static ShowCardActionMode Inline;
    public static ShowCardActionMode Popup;
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.ShowCardConfig : object {
    [CompilerGeneratedAttribute]
private ShowCardActionMode <ActionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveContainerStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InlineTopMargin>k__BackingField;
    [JsonPropertyAttribute]
public ShowCardActionMode ActionMode { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveContainerStyle Style { get; public set; }
    [JsonPropertyAttribute]
public int InlineTopMargin { get; public set; }
    [CompilerGeneratedAttribute]
public ShowCardActionMode get_ActionMode();
    [CompilerGeneratedAttribute]
public void set_ActionMode(ShowCardActionMode value);
    [CompilerGeneratedAttribute]
public AdaptiveContainerStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(AdaptiveContainerStyle value);
    [CompilerGeneratedAttribute]
public int get_InlineTopMargin();
    [CompilerGeneratedAttribute]
public void set_InlineTopMargin(int value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.SpacingsConfig : object {
    [CompilerGeneratedAttribute]
private int <Small>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Medium>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Large>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtraLarge>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Padding>k__BackingField;
    public int Small { get; public set; }
    public int Default { get; public set; }
    public int Medium { get; public set; }
    public int Large { get; public set; }
    public int ExtraLarge { get; public set; }
    public int Padding { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Small();
    [CompilerGeneratedAttribute]
public void set_Small(int value);
    [CompilerGeneratedAttribute]
public int get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(int value);
    [CompilerGeneratedAttribute]
public int get_Medium();
    [CompilerGeneratedAttribute]
public void set_Medium(int value);
    [CompilerGeneratedAttribute]
public int get_Large();
    [CompilerGeneratedAttribute]
public void set_Large(int value);
    [CompilerGeneratedAttribute]
public int get_ExtraLarge();
    [CompilerGeneratedAttribute]
public void set_ExtraLarge(int value);
    [CompilerGeneratedAttribute]
public int get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(int value);
}
[JsonObjectAttribute]
public class AdaptiveCards.Rendering.TextBlockConfig : object {
    [CompilerGeneratedAttribute]
private AdaptiveTextSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private AdaptiveTextColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubtle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWidth>k__BackingField;
    [JsonPropertyAttribute]
public AdaptiveTextSize Size { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveTextWeight Weight { get; public set; }
    [JsonPropertyAttribute]
public AdaptiveTextColor Color { get; public set; }
    [JsonPropertyAttribute]
public bool IsSubtle { get; public set; }
    [JsonPropertyAttribute]
public bool Wrap { get; public set; }
    [JsonPropertyAttribute]
public int MaxWidth { get; public set; }
    [CompilerGeneratedAttribute]
public AdaptiveTextSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(AdaptiveTextSize value);
    [CompilerGeneratedAttribute]
public AdaptiveTextWeight get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(AdaptiveTextWeight value);
    [CompilerGeneratedAttribute]
public AdaptiveTextColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(AdaptiveTextColor value);
    [CompilerGeneratedAttribute]
public bool get_IsSubtle();
    [CompilerGeneratedAttribute]
public void set_IsSubtle(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(int value);
}
[XmlRootAttribute("dictionary")]
public class AdaptiveCards.SerializableDictionary`2 : Dictionary`2<TKey, TValue> {
    public SerializableDictionary`2(IEqualityComparer`1<TKey> comparer);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public class AdaptiveCards.StrictIntConverter : JsonConverter {
    private JsonSerializer defaultSerializer;
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class AdaptiveCards.StringSizeWithUnitConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private List`1<AdaptiveWarning> <Warnings>k__BackingField;
    private JsonSerializer defaultSerializer;
    private bool isHeight;
    public List`1<AdaptiveWarning> Warnings { get; public set; }
    public bool CanWrite { get; }
    public StringSizeWithUnitConverter(bool height);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AdaptiveWarning> get_Warnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Warnings(List`1<AdaptiveWarning> value);
    public virtual bool CanConvert(Type objectType);
    private bool isPixelHeight(string size);
    private object GenerateReturnValue(UInt32 px);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class AdaptiveCards.TableColumnWidth : object {
    [CompilerGeneratedAttribute]
private double <PixelWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RelativeWidth>k__BackingField;
    public double PixelWidth { get; public set; }
    public long RelativeWidth { get; public set; }
    public TableColumnWidth(double pixelWidth);
    public TableColumnWidth(long relativeWidth);
    [CompilerGeneratedAttribute]
public double get_PixelWidth();
    [CompilerGeneratedAttribute]
public void set_PixelWidth(double value);
    [CompilerGeneratedAttribute]
public long get_RelativeWidth();
    [CompilerGeneratedAttribute]
public void set_RelativeWidth(long value);
}
public class AdaptiveCards.ToggleElementsConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class AdaptiveCards.TypedEventHandler`2 : MulticastDelegate {
    public TypedEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(TSender sender, TEventArgs e);
    public virtual IAsyncResult BeginInvoke(TSender sender, TEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class AdaptiveCards.WarningLoggingContractResolver : DefaultContractResolver {
    private AdaptiveCardParseResult _parseResult;
    private ParseContext _parseContext;
    public WarningLoggingContractResolver(AdaptiveCardParseResult parseResult, ParseContext parseContext);
    protected virtual JsonConverter ResolveContractConverter(Type type);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.MarkedNet.BlockRules : object {
    private static Regex newline;
    private static Regex code;
    private static Regex fences;
    private static Regex hr;
    private static Regex heading;
    private static Regex npTable;
    private static Regex lHeading;
    private static Regex blockquote;
    private static Regex list;
    private static Regex html;
    private static Regex def;
    private static Regex table;
    private static Regex paragraph;
    private static Regex text;
    private static Regex bullet;
    private static Regex item;
    public Regex Newline { get; }
    public Regex Сode { get; }
    public Regex Fences { get; }
    public Regex Hr { get; }
    public Regex Heading { get; }
    public Regex NpTable { get; }
    public Regex LHeading { get; }
    public Regex Blockquote { get; }
    public Regex List { get; }
    public Regex Html { get; }
    public Regex Def { get; }
    public Regex Table { get; }
    public Regex Paragraph { get; }
    public Regex Text { get; }
    public Regex Bullet { get; }
    public Regex Item { get; }
    private static BlockRules();
    public virtual Regex get_Newline();
    public virtual Regex get_Сode();
    public virtual Regex get_Fences();
    public virtual Regex get_Hr();
    public virtual Regex get_Heading();
    public virtual Regex get_NpTable();
    public virtual Regex get_LHeading();
    public virtual Regex get_Blockquote();
    public virtual Regex get_List();
    public virtual Regex get_Html();
    public virtual Regex get_Def();
    public virtual Regex get_Table();
    public virtual Regex get_Paragraph();
    public virtual Regex get_Text();
    public virtual Regex get_Bullet();
    public virtual Regex get_Item();
}
public class Microsoft.MarkedNet.BreaksInlineRules : GfmInlineRules {
    private static Regex br;
    private static Regex text;
    public Regex Br { get; }
    public Regex Text { get; }
    private static BreaksInlineRules();
    public virtual Regex get_Br();
    public virtual Regex get_Text();
}
public static class Microsoft.MarkedNet.Emoji : object {
    public static string copyright;
    public static string registered;
    public static string bangbang;
    public static string interrobang;
    public static string tm;
    public static string information_source;
    public static string left_right_arrow;
    public static string arrow_up_down;
    public static string arrow_upper_left;
    public static string arrow_upper_right;
    public static string arrow_lower_right;
    public static string arrow_lower_left;
    public static string leftwards_arrow_with_hook;
    public static string arrow_right_hook;
    public static string watch;
    public static string hourglass;
    public static string keyboard;
    public static string fast_forward;
    public static string rewind;
    public static string arrow_double_up;
    public static string arrow_double_down;
    public static string black_right_pointing_double_triangle_with_vertical_bar;
    public static string black_left_pointing_double_triangle_with_vertical_bar;
    public static string black_right_pointing_triangle_with_double_vertical_bar;
    public static string alarm_clock;
    public static string stopwatch;
    public static string timer_clock;
    public static string hourglass_flowing_sand;
    public static string double_vertical_bar;
    public static string black_square_for_stop;
    public static string black_circle_for_record;
    public static string m;
    public static string black_small_square;
    public static string white_small_square;
    public static string arrow_forward;
    public static string arrow_backward;
    public static string white_medium_square;
    public static string black_medium_square;
    public static string white_medium_small_square;
    public static string black_medium_small_square;
    public static string sunny;
    public static string cloud;
    public static string umbrella;
    public static string showman;
    public static string comet;
    public static string phone;
    public static string ballot_box_with_check;
    public static string umbrella2;
    public static string coffee;
    public static string shamrock;
    public static string point_up;
    public static string skull_and_crossbones;
    public static string radioactive_sign;
    public static string biohazard_sign;
    public static string orthodox_cross;
    public static string star_and_crescent;
    public static string peace_symbol;
    public static string yin_yang;
    public static string wheel_of_dharma;
    public static string white_frowning_face;
    public static string relaxed;
    public static string aries;
    public static string taurus;
    public static string gemini;
    public static string cancer;
    public static string leo;
    public static string virgo;
    public static string libra;
    public static string scorpius;
    public static string sagittarius;
    public static string capricorn;
    public static string aquarius;
    public static string pisces;
    public static string spades;
    public static string clubs;
    public static string hearts;
    public static string diamonds;
    public static string hotsprings;
    public static string recycle;
    public static string wheelchair;
    public static string hammer_and_pick;
    public static string anchor;
    public static string crossed_swords;
    public static string scales;
    public static string alembic;
    public static string gear;
    public static string atom_symbol;
    public static string fleur_de_lis;
    public static string warning;
    public static string zap;
    public static string white_circle;
    public static string black_circle;
    public static string coffin;
    public static string funeral_urn;
    public static string soccer;
    public static string baseball;
    public static string snowman;
    public static string partly_sunny;
    public static string thunder_cloud_and_rain;
    public static string ophiuchus;
    public static string pick;
    public static string helmet_with_white_cross;
    public static string chains;
    public static string no_entry;
    public static string shinto_shrine;
    public static string church;
    public static string mountain;
    public static string umbrella_on_ground;
    public static string fountain;
    public static string golf;
    public static string ferry;
    public static string boat;
    public static string skier;
    public static string ice_skate;
    public static string person_with_ball;
    public static string tent;
    public static string fuelpump;
    public static string scissors;
    public static string white_check_mark;
    public static string airplane;
    public static string email;
    public static string fist;
    public static string hand;
    public static string v;
    public static string writing_hand;
    public static string pencil2;
    public static string black_nib;
    public static string heavy_check_mark;
    public static string heavy_multiplication_x;
    public static string latin_cross;
    public static string star_of_david;
    public static string sparkles;
    public static string eight_spoked_asterisk;
    public static string eight_pointed_black_star;
    public static string snowflake;
    public static string sparkle;
    public static string x;
    public static string negative_squared_cross_mark;
    public static string question;
    public static string grey_question;
    public static string grey_exclamation;
    public static string exclamation;
    public static string heavy_heart_exclamation_mark_ornament;
    public static string heart;
    public static string heavy_plus_sign;
    public static string heavy_minus_sign;
    public static string heavy_division_sign;
    public static string arrow_right;
    public static string curly_loop;
    public static string loop;
    public static string arrow_heading_up;
    public static string arrow_heading_down;
    public static string arrow_left;
    public static string arrow_up;
    public static string arrow_down;
    public static string black_large_square;
    public static string white_large_square;
    public static string star;
    public static string o;
    public static string wavy_dash;
    public static string part_alternation_mark;
    public static string congratulations;
    public static string secret;
    public static string mahjong;
    public static string black_joker;
    public static string a;
    public static string b;
    public static string o2;
    public static string parking;
    public static string ab;
    public static string cl;
    public static string cool;
    public static string free;
    public static string id;
    public static string New;
    public static string ng;
    public static string ok;
    public static string sos;
    public static string up;
    public static string vs;
    public static string koko;
    public static string sa;
    public static string u7121;
    public static string u6307;
    public static string u7981;
    public static string u7a7a;
    public static string u5408;
    public static string u6e80;
    public static string u6709;
    public static string u6708;
    public static string u7533;
    public static string u5272;
    public static string u55b6;
    public static string ideograph_advantage;
    public static string accept;
    public static string cyclone;
    public static string foggy;
    public static string closed_umbrella;
    public static string night_with_stars;
    public static string sunrise_over_mountains;
    public static string sunrise;
    public static string city_sunset;
    public static string city_sunrise;
    public static string rainbow;
    public static string bridge_at_night;
    public static string ocean;
    public static string volcano;
    public static string milky_way;
    public static string earth_africa;
    public static string earth_americas;
    public static string earth_asia;
    public static string globe_with_meridians;
    public static string new_moon;
    public static string waxing_crescent_moon;
    public static string first_quarter_moon;
    public static string moon;
    public static string full_moon;
    public static string waning_gibbous_moon;
    public static string last_quarter_moon;
    public static string waning_crescent_moon;
    public static string crescent_moon;
    public static string new_moon_with_face;
    public static string first_quarter_moon_with_face;
    public static string last_quarter_moon_with_face;
    public static string full_moon_with_face;
    public static string sun_with_face;
    public static string star2;
    public static string stars;
    public static string thermometer;
    public static string mostly_sunny;
    public static string barely_sunny;
    public static string partly_sunny_rain;
    public static string rain_cloud;
    public static string snow_cloud;
    public static string lightning;
    public static string tornado;
    public static string fog;
    public static string wind_blowing_face;
    public static string hotdog;
    public static string taco;
    public static string burrito;
    public static string chestnut;
    public static string seedling;
    public static string evergreen_tree;
    public static string deciduous_tree;
    public static string palm_tree;
    public static string cactus;
    public static string hot_pepper;
    public static string tulip;
    public static string cherry_blossom;
    public static string rose;
    public static string hibiscus;
    public static string sunflower;
    public static string blossom;
    public static string corn;
    public static string ear_of_rice;
    public static string herb;
    public static string four_leaf_clover;
    public static string maple_leaf;
    public static string fallen_leaf;
    public static string leaves;
    public static string mushroom;
    public static string tomato;
    public static string eggplant;
    public static string grapes;
    public static string melon;
    public static string watermelon;
    public static string tangerine;
    public static string lemon;
    public static string banana;
    public static string pineapple;
    public static string apple;
    public static string green_apple;
    public static string pear;
    public static string peach;
    public static string cherries;
    public static string strawberry;
    public static string hamburger;
    public static string pizza;
    public static string meat_on_bone;
    public static string poultry_leg;
    public static string rice_cracker;
    public static string rice_ball;
    public static string rice;
    public static string curry;
    public static string ramen;
    public static string spaghetti;
    public static string bread;
    public static string fries;
    public static string sweet_potato;
    public static string dango;
    public static string oden;
    public static string sushi;
    public static string fried_shrimp;
    public static string fish_cake;
    public static string icecream;
    public static string shaved_ice;
    public static string ice_cream;
    public static string doughnut;
    public static string cookie;
    public static string chocolate_bar;
    public static string candy;
    public static string lollipop;
    public static string custard;
    public static string honey_pot;
    public static string cake;
    public static string bento;
    public static string stew;
    public static string egg;
    public static string fork_and_knife;
    public static string tea;
    public static string sake;
    public static string wine_glass;
    public static string cocktail;
    public static string tropical_drink;
    public static string beer;
    public static string beers;
    public static string baby_bottle;
    public static string knife_fork_plate;
    public static string champagne;
    public static string popcorn;
    public static string ribbon;
    public static string gift;
    public static string birthday;
    public static string jack_o_lantern;
    public static string christmas_tree;
    public static string santa;
    public static string fireworks;
    public static string sparkler;
    public static string balloon;
    public static string tada;
    public static string confetti_ball;
    public static string tanabata_tree;
    public static string crossed_flags;
    public static string bamboo;
    public static string dolls;
    public static string flags;
    public static string wind_chime;
    public static string rice_scene;
    public static string school_satchel;
    public static string mortar_board;
    public static string medal;
    public static string reminder_ribbon;
    public static string studio_microphone;
    public static string level_slider;
    public static string control_knobs;
    public static string film_frames;
    public static string admission_tickets;
    public static string carousel_horse;
    public static string ferris_wheel;
    public static string roller_coaster;
    public static string fishing_pole_and_fish;
    public static string microphone;
    public static string movie_camera;
    public static string cinema;
    public static string headphones;
    public static string art;
    public static string tophat;
    public static string circus_tent;
    public static string ticket;
    public static string clapper;
    public static string performing_arts;
    public static string video_game;
    public static string dart;
    public static string slot_machine;
    public static string Eightball;
    public static string game_die;
    public static string bowling;
    public static string flower_playing_cards;
    public static string musical_note;
    public static string notes;
    public static string saxophone;
    public static string guitar;
    public static string musical_keyboard;
    public static string trumpet;
    public static string violin;
    public static string musical_score;
    public static string running_shirt_with_sash;
    public static string tennis;
    public static string ski;
    public static string basketball;
    public static string checkered_flag;
    public static string snowboarder;
    public static string runner;
    public static string surfer;
    public static string sports_medal;
    public static string trophy;
    public static string horse_racing;
    public static string football;
    public static string rugby_football;
    public static string swimmer;
    public static string weight_lifter;
    public static string golfer;
    public static string racing_motorcycle;
    public static string racing_car;
    public static string cricket_bat_and_ball;
    public static string volleyball;
    public static string field_hockey_stick_and_ball;
    public static string ice_hockey_stick_and_puck;
    public static string table_tennis_paddle_and_ball;
    public static string snow_capped_mountain;
    public static string camping;
    public static string beach_with_umbrella;
    public static string building_construction;
    public static string house_buildings;
    public static string cityscape;
    public static string derelict_house_building;
    public static string classical_building;
    public static string desert;
    public static string desert_island;
    public static string national_park;
    public static string stadium;
    public static string house;
    public static string house_with_garden;
    public static string office;
    public static string post_office;
    public static string european_post_office;
    public static string hospital;
    public static string bank;
    public static string atm;
    public static string hotel;
    public static string love_hotel;
    public static string convenience_store;
    public static string school;
    public static string department_store;
    public static string factory;
    public static string izakaya_lantern;
    public static string japanese_castle;
    public static string european_castle;
    public static string waving_white_flag;
    public static string waving_black_flag;
    public static string rosette;
    public static string label;
    public static string badminton_racquet_and_shuttlecock;
    public static string bow_and_arrow;
    public static string amphora;
    public static string skin_tone_2;
    public static string skin_tone_3;
    public static string skin_tone_4;
    public static string skin_tone_5;
    public static string skin_tone_6;
    public static string rat;
    public static string mouse2;
    public static string ox;
    public static string water_buffalo;
    public static string cow2;
    public static string tiger2;
    public static string leopard;
    public static string rabbit2;
    public static string cat2;
    public static string dragon;
    public static string crocodile;
    public static string whale2;
    public static string snail;
    public static string snake;
    public static string racehorse;
    public static string ram;
    public static string goat;
    public static string sheep;
    public static string monkey;
    public static string rooster;
    public static string chicken;
    public static string dog2;
    public static string pig2;
    public static string boar;
    public static string elephant;
    public static string octopus;
    public static string shell;
    public static string bug;
    public static string ant;
    public static string bee;
    public static string beetle;
    public static string fish;
    public static string tropical_fish;
    public static string blowfish;
    public static string turtle;
    public static string hatching_chick;
    public static string baby_chick;
    public static string hatched_chick;
    public static string bird;
    public static string penguin;
    public static string koala;
    public static string poodle;
    public static string dromedary_camel;
    public static string camel;
    public static string dolphin;
    public static string mouse;
    public static string cow;
    public static string tiger;
    public static string rabbit;
    public static string cat;
    public static string dragon_face;
    public static string whale;
    public static string horse;
    public static string monkey_face;
    public static string dog;
    public static string pig;
    public static string frog;
    public static string hamster;
    public static string wolf;
    public static string bear;
    public static string panda_face;
    public static string pig_nose;
    public static string feet;
    public static string chipmunk;
    public static string eyes;
    public static string eye;
    public static string ear;
    public static string nose;
    public static string lips;
    public static string tongue;
    public static string point_up_2;
    public static string point_down;
    public static string point_left;
    public static string point_right;
    public static string facepunch;
    public static string wave;
    public static string ok_hand;
    public static string plus1;
    public static string minus1;
    public static string clap;
    public static string open_hands;
    public static string crown;
    public static string womans_hat;
    public static string eyeglasses;
    public static string necktie;
    public static string shirt;
    public static string jeans;
    public static string dress;
    public static string kimono;
    public static string bikini;
    public static string womans_clothes;
    public static string purse;
    public static string handbag;
    public static string pouch;
    public static string mans_shoe;
    public static string athletic_shoe;
    public static string high_heel;
    public static string sandal;
    public static string boot;
    public static string footprints;
    public static string bust_in_silhouette;
    public static string busts_in_silhouette;
    public static string boy;
    public static string girl;
    public static string man;
    public static string woman;
    public static string family;
    public static string couple;
    public static string two_men_holding_hands;
    public static string two_women_holding_hands;
    public static string cop;
    public static string dancers;
    public static string bride_with_veil;
    public static string person_with_blond_hair;
    public static string man_with_gua_pi_mao;
    public static string man_with_turban;
    public static string older_man;
    public static string older_woman;
    public static string baby;
    public static string construction_worker;
    public static string princess;
    public static string japanese_ogre;
    public static string japanese_goblin;
    public static string ghost;
    public static string angel;
    public static string alien;
    public static string space_invader;
    public static string imp;
    public static string skull;
    public static string information_desk_person;
    public static string guardsman;
    public static string dancer;
    public static string lipstick;
    public static string nail_care;
    public static string massage;
    public static string haircut;
    public static string barber;
    public static string syringe;
    public static string pill;
    public static string kiss;
    public static string love_letter;
    public static string ring;
    public static string gem;
    public static string couplekiss;
    public static string bouquet;
    public static string couple_with_heart;
    public static string wedding;
    public static string heartbeat;
    public static string broken_heart;
    public static string two_hearts;
    public static string sparkling_heart;
    public static string heartpulse;
    public static string cupid;
    public static string blue_heart;
    public static string green_heart;
    public static string yellow_heart;
    public static string purple_heart;
    public static string gift_heart;
    public static string revolving_hearts;
    public static string heart_decoration;
    public static string diamond_shape_with_a_dot_inside;
    public static string bulb;
    public static string anger;
    public static string bomb;
    public static string zzz;
    public static string boom;
    public static string sweat_drops;
    public static string droplet;
    public static string dash;
    public static string hankey;
    public static string muscle;
    public static string dizzy;
    public static string speech_balloon;
    public static string thought_balloon;
    public static string white_flower;
    public static string OneHundred;
    public static string moneybag;
    public static string currency_exchange;
    public static string heavy_dollar_sign;
    public static string credit_card;
    public static string yen;
    public static string dollar;
    public static string euro;
    public static string pound;
    public static string money_with_wings;
    public static string chart;
    public static string seat;
    public static string computer;
    public static string briefcase;
    public static string minidisc;
    public static string floppy_disk;
    public static string cd;
    public static string dvd;
    public static string file_folder;
    public static string open_file_folder;
    public static string page_with_curl;
    public static string page_facing_up;
    public static string date;
    public static string calendar;
    public static string card_index;
    public static string chart_with_upwards_trend;
    public static string chart_with_downwards_trend;
    public static string bar_chart;
    public static string clipboard;
    public static string pushpin;
    public static string round_pushpin;
    public static string paperclip;
    public static string straight_ruler;
    public static string triangular_ruler;
    public static string bookmark_tabs;
    public static string ledger;
    public static string notebook;
    public static string notebook_with_decorative_cover;
    public static string closed_book;
    public static string book;
    public static string green_book;
    public static string blue_book;
    public static string orange_book;
    public static string books;
    public static string name_badge;
    public static string scroll;
    public static string memo;
    public static string telephone_receiver;
    public static string pager;
    public static string fax;
    public static string satellite;
    public static string loudspeaker;
    public static string mega;
    public static string outbox_tray;
    public static string inbox_tray;
    public static string package;
    public static string email2;
    public static string incoming_envelope;
    public static string envelope_with_arrow;
    public static string mailbox_closed;
    public static string mailbox;
    public static string mailbox_with_mail;
    public static string mailbox_with_no_mail;
    public static string postbox;
    public static string postal_horn;
    public static string newspaper;
    public static string iphone;
    public static string calling;
    public static string vibration_mode;
    public static string mobile_phone_off;
    public static string no_mobile_phones;
    public static string signal_strength;
    public static string camera;
    public static string camera_with_flash;
    public static string video_camera;
    public static string tv;
    public static string radio;
    public static string vhs;
    public static string film_projector;
    public static string prayer_beads;
    public static string twisted_rightwards_arrows;
    public static string repeat;
    public static string repeat_one;
    public static string arrows_clockwise;
    public static string arrows_counterclockwise;
    public static string low_brightness;
    public static string high_brightness;
    public static string mute;
    public static string speaker;
    public static string sound;
    public static string loud_sound;
    public static string battery;
    public static string electric_plug;
    public static string mag;
    public static string mag_right;
    public static string lock_with_ink_pen;
    public static string closed_lock_with_key;
    public static string key;
    public static string Lock;
    public static string unlock;
    public static string bell;
    public static string no_bell;
    public static string bookmark;
    public static string link;
    public static string radio_button;
    public static string back;
    public static string end;
    public static string on;
    public static string soon;
    public static string top;
    public static string underage;
    public static string keycap_ten;
    public static string capital_abcd;
    public static string abcd;
    public static string OneTwoThreeFour;
    public static string symbols;
    public static string abc;
    public static string fire;
    public static string flashlight;
    public static string wrench;
    public static string hammer;
    public static string nut_and_bolt;
    public static string hocho;
    public static string gun;
    public static string microscope;
    public static string telescope;
    public static string crystal_ball;
    public static string six_pointed_star;
    public static string beginner;
    public static string trident;
    public static string black_square_button;
    public static string white_square_button;
    public static string red_circle;
    public static string large_blue_circle;
    public static string large_orange_diamond;
    public static string large_blue_diamond;
    public static string small_orange_diamond;
    public static string small_blue_diamond;
    public static string small_red_triangle;
    public static string small_red_triangle_down;
    public static string arrow_up_small;
    public static string arrow_down_small;
    public static string om_symbol;
    public static string dove_of_peace;
    public static string kaaba;
    public static string mosque;
    public static string synagogue;
    public static string menorah_with_nine_branches;
    public static string clock1;
    public static string clock2;
    public static string clock3;
    public static string clock4;
    public static string clock5;
    public static string clock6;
    public static string clock7;
    public static string clock8;
    public static string clock9;
    public static string clock10;
    public static string clock11;
    public static string clock12;
    public static string clock130;
    public static string clock230;
    public static string clock330;
    public static string clock430;
    public static string clock530;
    public static string clock630;
    public static string clock730;
    public static string clock830;
    public static string clock930;
    public static string clock1030;
    public static string clock1130;
    public static string clock1230;
    public static string candle;
    public static string mantelpiece_clock;
    public static string hole;
    public static string man_in_business_suit_levitating;
    public static string sleuth_or_spy;
    public static string dark_sunglasses;
    public static string spider;
    public static string spider_web;
    public static string joystick;
    public static string linked_paperclips;
    public static string lower_left_ballpoint_pen;
    public static string lower_left_fountain_pen;
    public static string lower_left_paintbrush;
    public static string lower_left_crayon;
    public static string raised_hand_with_fingers_splayed;
    public static string middle_finger;
    public static string spock_hand;
    public static string desktop_computer;
    public static string printer;
    public static string three_button_mouse;
    public static string trackball;
    public static string frame_with_picture;
    public static string card_index_dividers;
    public static string card_file_box;
    public static string file_cabinet;
    public static string wastebasket;
    public static string spiral_note_pad;
    public static string spiral_calendar_pad;
    public static string compression;
    public static string old_key;
    public static string rolled_up_newspaper;
    public static string dagger_knife;
    public static string speaking_head_in_silhouette;
    public static string left_speech_bubble;
    public static string right_anger_bubble;
    public static string ballot_box_with_ballot;
    public static string world_map;
    public static string mount_fuji;
    public static string tokyo_tower;
    public static string statue_of_liberty;
    public static string japan;
    public static string moyai;
    public static string grinning;
    public static string grin;
    public static string joy;
    public static string smiley;
    public static string smile;
    public static string sweat_smile;
    public static string laughing;
    public static string innocent;
    public static string smiling_imp;
    public static string wink;
    public static string blush;
    public static string yum;
    public static string relieved;
    public static string heart_eyes;
    public static string sunglasses;
    public static string smirk;
    public static string neutral_face;
    public static string expressionless;
    public static string unamused;
    public static string sweat;
    public static string pensive;
    public static string confused;
    public static string confounded;
    public static string kissing;
    public static string kissing_heart;
    public static string kissing_smiling_eyes;
    public static string kissing_closed_eyes;
    public static string stuck_out_tongue;
    public static string stuck_out_tongue_winking_eye;
    public static string stuck_out_tongue_closed_eyes;
    public static string disappointed;
    public static string worried;
    public static string angry;
    public static string rage;
    public static string cry;
    public static string persevere;
    public static string triumph;
    public static string disappointed_relieved;
    public static string frowning;
    public static string anguished;
    public static string fearful;
    public static string weary;
    public static string sleepy;
    public static string tired_face;
    public static string grimacing;
    public static string sob;
    public static string open_mouth;
    public static string hushed;
    public static string cold_sweat;
    public static string scream;
    public static string astonished;
    public static string flushed;
    public static string sleeping;
    public static string dizzy_face;
    public static string no_mouth;
    public static string mask;
    public static string smile_cat;
    public static string joy_cat;
    public static string smiley_cat;
    public static string heart_eyes_cat;
    public static string smirk_cat;
    public static string kissing_cat;
    public static string pouting_cat;
    public static string crying_cat_face;
    public static string scream_cat;
    public static string slightly_frowning_face;
    public static string slightly_smiling_face;
    public static string upside_down_face;
    public static string face_with_rolling_eyes;
    public static string no_good;
    public static string ok_woman;
    public static string bow;
    public static string see_no_evil;
    public static string hear_no_evil;
    public static string speak_no_evil;
    public static string raising_hand;
    public static string raised_hands;
    public static string person_frowning;
    public static string person_with_pouting_face;
    public static string pray;
    public static string rocket;
    public static string helicopter;
    public static string steam_locomotive;
    public static string railway_car;
    public static string bullettrain_side;
    public static string bullettrain_front;
    public static string train2;
    public static string metro;
    public static string light_rail;
    public static string station;
    public static string tram;
    public static string train;
    public static string bus;
    public static string oncoming_bus;
    public static string trolleybus;
    public static string busstop;
    public static string minibus;
    public static string ambulance;
    public static string fire_engine;
    public static string police_car;
    public static string oncoming_police_car;
    public static string taxi;
    public static string oncoming_taxi;
    public static string car;
    public static string oncoming_automobile;
    public static string blue_car;
    public static string truck;
    public static string articulated_lorry;
    public static string tractor;
    public static string monorail;
    public static string mountain_railway;
    public static string suspension_railway;
    public static string mountain_cableway;
    public static string aerial_tramway;
    public static string ship;
    public static string rowboat;
    public static string speedboat;
    public static string traffic_light;
    public static string vertical_traffic_light;
    public static string construction;
    public static string rotating_light;
    public static string triangular_flag_on_post;
    public static string door;
    public static string no_entry_sign;
    public static string smoking;
    public static string no_smoking;
    public static string put_litter_in_its_place;
    public static string do_not_litter;
    public static string potable_water;
    public static string nonpotable_water;
    public static string bike;
    public static string no_bicycles;
    public static string bicyclist;
    public static string mountain_bicyclist;
    public static string walking;
    public static string no_pedestrians;
    public static string children_crossing;
    public static string mens;
    public static string womens;
    public static string restroom;
    public static string baby_symbol;
    public static string toilet;
    public static string wc;
    public static string shower;
    public static string bath;
    public static string bathtub;
    public static string passport_control;
    public static string customs;
    public static string baggage_claim;
    public static string left_luggage;
    public static string couch_and_lamp;
    public static string sleeping_accommodation;
    public static string shopping_bags;
    public static string bellhop_bell;
    public static string bed;
    public static string place_of_worship;
    public static string hammer_and_wrench;
    public static string shield;
    public static string oil_drum;
    public static string motorway;
    public static string railway_track;
    public static string motor_boat;
    public static string small_airplane;
    public static string airplane_departure;
    public static string airplane_arriving;
    public static string satellite2;
    public static string passenger_ship;
    public static string zipper_mouth_face;
    public static string money_mouth_face;
    public static string face_with_thermometer;
    public static string nerd_face;
    public static string thinking_face;
    public static string face_with_head_bandage;
    public static string robot_face;
    public static string hugging_face;
    public static string the_horns;
    public static string crab;
    public static string lion_face;
    public static string scorpion;
    public static string turkey;
    public static string unicorn_face;
    public static string cheese_wedge;
    public static string hash;
    public static string keycap_star;
    public static string zero;
    public static string one;
    public static string two;
    public static string three;
    public static string four;
    public static string five;
    public static string six;
    public static string seven;
    public static string eight;
    public static string nine;
    public static string flag_ac;
    public static string flag_ad;
    public static string flag_ae;
    public static string flag_af;
    public static string flag_ag;
    public static string flag_ai;
    public static string flag_al;
    public static string flag_am;
    public static string flag_ao;
    public static string flag_aq;
    public static string flag_ar;
    public static string flag_as;
    public static string flag_at;
    public static string flag_au;
    public static string flag_aw;
    public static string flag_ax;
    public static string flag_az;
    public static string flag_ba;
    public static string flag_bb;
    public static string flag_bd;
    public static string flag_be;
    public static string flag_bf;
    public static string flag_bg;
    public static string flag_bh;
    public static string flag_bi;
    public static string flag_bj;
    public static string flag_bl;
    public static string flag_bm;
    public static string flag_bn;
    public static string flag_bo;
    public static string flag_bq;
    public static string flag_br;
    public static string flag_bs;
    public static string flag_bt;
    public static string flag_bv;
    public static string flag_bw;
    public static string flag_by;
    public static string flag_bz;
    public static string flag_ca;
    public static string flag_cc;
    public static string flag_cd;
    public static string flag_cf;
    public static string flag_cg;
    public static string flag_ch;
    public static string flag_ci;
    public static string flag_ck;
    public static string flag_cl;
    public static string flag_cm;
    public static string flag_cn;
    public static string flag_co;
    public static string flag_cp;
    public static string flag_cr;
    public static string flag_cu;
    public static string flag_cv;
    public static string flag_cw;
    public static string flag_cx;
    public static string flag_cy;
    public static string flag_cz;
    public static string flag_de;
    public static string flag_dg;
    public static string flag_dj;
    public static string flag_dk;
    public static string flag_dm;
    public static string flag_do;
    public static string flag_dz;
    public static string flag_ea;
    public static string flag_ec;
    public static string flag_ee;
    public static string flag_eg;
    public static string flag_eh;
    public static string flag_er;
    public static string flag_es;
    public static string flag_et;
    public static string flag_eu;
    public static string flag_fi;
    public static string flag_fj;
    public static string flag_fk;
    public static string flag_fm;
    public static string flag_fo;
    public static string flag_fr;
    public static string flag_ga;
    public static string flag_gb;
    public static string flag_gd;
    public static string flag_ge;
    public static string flag_gf;
    public static string flag_gg;
    public static string flag_gh;
    public static string flag_gi;
    public static string flag_gl;
    public static string flag_gm;
    public static string flag_gn;
    public static string flag_gp;
    public static string flag_gq;
    public static string flag_gr;
    public static string flag_gs;
    public static string flag_gt;
    public static string flag_gu;
    public static string flag_gw;
    public static string flag_gy;
    public static string flag_hk;
    public static string flag_hm;
    public static string flag_hn;
    public static string flag_hr;
    public static string flag_ht;
    public static string flag_hu;
    public static string flag_ic;
    public static string flag_id;
    public static string flag_ie;
    public static string flag_il;
    public static string flag_im;
    public static string flag_in;
    public static string flag_io;
    public static string flag_iq;
    public static string flag_ir;
    public static string flag_is;
    public static string flag_it;
    public static string flag_je;
    public static string flag_jm;
    public static string flag_jo;
    public static string flag_jp;
    public static string flag_ke;
    public static string flag_kg;
    public static string flag_kh;
    public static string flag_ki;
    public static string flag_km;
    public static string flag_kn;
    public static string flag_kp;
    public static string flag_kr;
    public static string flag_kw;
    public static string flag_ky;
    public static string flag_kz;
    public static string flag_la;
    public static string flag_lb;
    public static string flag_lc;
    public static string flag_li;
    public static string flag_lk;
    public static string flag_lr;
    public static string flag_ls;
    public static string flag_lt;
    public static string flag_lu;
    public static string flag_lv;
    public static string flag_ly;
    public static string flag_ma;
    public static string flag_mc;
    public static string flag_md;
    public static string flag_me;
    public static string flag_mf;
    public static string flag_mg;
    public static string flag_mh;
    public static string flag_mk;
    public static string flag_ml;
    public static string flag_mm;
    public static string flag_mn;
    public static string flag_mo;
    public static string flag_mp;
    public static string flag_mq;
    public static string flag_mr;
    public static string flag_ms;
    public static string flag_mt;
    public static string flag_mu;
    public static string flag_mv;
    public static string flag_mw;
    public static string flag_mx;
    public static string flag_my;
    public static string flag_mz;
    public static string flag_na;
    public static string flag_nc;
    public static string flag_ne;
    public static string flag_nf;
    public static string flag_ng;
    public static string flag_ni;
    public static string flag_nl;
    public static string flag_no;
    public static string flag_np;
    public static string flag_nr;
    public static string flag_nu;
    public static string flag_nz;
    public static string flag_om;
    public static string flag_pa;
    public static string flag_pe;
    public static string flag_pf;
    public static string flag_pg;
    public static string flag_ph;
    public static string flag_pk;
    public static string flag_pl;
    public static string flag_pm;
    public static string flag_pn;
    public static string flag_pr;
    public static string flag_ps;
    public static string flag_pt;
    public static string flag_pw;
    public static string flag_py;
    public static string flag_qa;
    public static string flag_re;
    public static string flag_ro;
    public static string flag_rs;
    public static string flag_ru;
    public static string flag_rw;
    public static string flag_sa;
    public static string flag_sb;
    public static string flag_sc;
    public static string flag_sd;
    public static string flag_se;
    public static string flag_sg;
    public static string flag_sh;
    public static string flag_si;
    public static string flag_sj;
    public static string flag_sk;
    public static string flag_sl;
    public static string flag_sm;
    public static string flag_sn;
    public static string flag_so;
    public static string flag_sr;
    public static string flag_ss;
    public static string flag_st;
    public static string flag_sv;
    public static string flag_sx;
    public static string flag_sy;
    public static string flag_sz;
    public static string flag_ta;
    public static string flag_tc;
    public static string flag_td;
    public static string flag_tf;
    public static string flag_tg;
    public static string flag_th;
    public static string flag_tj;
    public static string flag_tk;
    public static string flag_tl;
    public static string flag_tm;
    public static string flag_tn;
    public static string flag_to;
    public static string flag_tr;
    public static string flag_tt;
    public static string flag_tv;
    public static string flag_tw;
    public static string flag_tz;
    public static string flag_ua;
    public static string flag_ug;
    public static string flag_um;
    public static string flag_us;
    public static string flag_uy;
    public static string flag_uz;
    public static string flag_va;
    public static string flag_vc;
    public static string flag_ve;
    public static string flag_vg;
    public static string flag_vi;
    public static string flag_vn;
    public static string flag_vu;
    public static string flag_wf;
    public static string flag_ws;
    public static string flag_xk;
    public static string flag_ye;
    public static string flag_yt;
    public static string flag_za;
    public static string flag_zm;
    public static string flag_zw;
    private static Emoji();
}
public static class Microsoft.MarkedNet.EmojiConverter : object {
    private static Dictionary`2<string, string> markup2Emoji;
    private static Dictionary`2<string, string> emoji2Markup;
    private static Regex MarkupRegex;
    public static Dictionary`2<string, string> Markup2Emoji { get; }
    public static Dictionary`2<string, string> Emoji2Markup { get; }
    private static EmojiConverter();
    public static void Add(string name, string markup, int code1, Nullable`1<int> code2, Nullable`1<int> code3);
    public static Dictionary`2<string, string> get_Markup2Emoji();
    public static Dictionary`2<string, string> get_Emoji2Markup();
    public static string ConvertMarkupToEmoji(string markup);
    public static string ConvertEmojiToMarkup(string emojiText);
}
public class Microsoft.MarkedNet.EmojiMarkdownRenderer : MarkdownRenderer {
    public EmojiMarkdownRenderer(Options options);
    public virtual string Preprocess(string text);
}
public static class Microsoft.MarkedNet.EmojiMarkup : object {
    public static string copyright;
    public static string registered;
    public static string bangbang;
    public static string interrobang;
    public static string tm;
    public static string information_source;
    public static string left_right_arrow;
    public static string arrow_up_down;
    public static string arrow_upper_left;
    public static string arrow_upper_right;
    public static string arrow_lower_right;
    public static string arrow_lower_left;
    public static string leftwards_arrow_with_hook;
    public static string arrow_right_hook;
    public static string watch;
    public static string hourglass;
    public static string keyboard;
    public static string fast_forward;
    public static string rewind;
    public static string arrow_double_up;
    public static string arrow_double_down;
    public static string black_right_pointing_double_triangle_with_vertical_bar;
    public static string black_left_pointing_double_triangle_with_vertical_bar;
    public static string black_right_pointing_triangle_with_double_vertical_bar;
    public static string alarm_clock;
    public static string stopwatch;
    public static string timer_clock;
    public static string hourglass_flowing_sand;
    public static string double_vertical_bar;
    public static string black_square_for_stop;
    public static string black_circle_for_record;
    public static string m;
    public static string black_small_square;
    public static string white_small_square;
    public static string arrow_forward;
    public static string arrow_backward;
    public static string white_medium_square;
    public static string black_medium_square;
    public static string white_medium_small_square;
    public static string black_medium_small_square;
    public static string sunny;
    public static string cloud;
    public static string umbrella;
    public static string showman;
    public static string comet;
    public static string phone;
    public static string ballot_box_with_check;
    public static string coffee;
    public static string shamrock;
    public static string point_up;
    public static string skull_and_crossbones;
    public static string radioactive_sign;
    public static string biohazard_sign;
    public static string orthodox_cross;
    public static string star_and_crescent;
    public static string peace_symbol;
    public static string yin_yang;
    public static string wheel_of_dharma;
    public static string white_frowning_face;
    public static string relaxed;
    public static string aries;
    public static string taurus;
    public static string gemini;
    public static string cancer;
    public static string leo;
    public static string virgo;
    public static string libra;
    public static string scorpius;
    public static string sagittarius;
    public static string capricorn;
    public static string aquarius;
    public static string pisces;
    public static string spades;
    public static string clubs;
    public static string hearts;
    public static string diamonds;
    public static string hotsprings;
    public static string recycle;
    public static string wheelchair;
    public static string hammer_and_pick;
    public static string anchor;
    public static string crossed_swords;
    public static string scales;
    public static string alembic;
    public static string gear;
    public static string atom_symbol;
    public static string fleur_de_lis;
    public static string warning;
    public static string zap;
    public static string white_circle;
    public static string black_circle;
    public static string coffin;
    public static string funeral_urn;
    public static string soccer;
    public static string baseball;
    public static string snowman;
    public static string partly_sunny;
    public static string thunder_cloud_and_rain;
    public static string ophiuchus;
    public static string pick;
    public static string helmet_with_white_cross;
    public static string chains;
    public static string no_entry;
    public static string shinto_shrine;
    public static string church;
    public static string mountain;
    public static string umbrella_on_ground;
    public static string fountain;
    public static string golf;
    public static string ferry;
    public static string boat;
    public static string skier;
    public static string ice_skate;
    public static string person_with_ball;
    public static string tent;
    public static string fuelpump;
    public static string scissors;
    public static string white_check_mark;
    public static string airplane;
    public static string email;
    public static string fist;
    public static string hand;
    public static string v;
    public static string writing_hand;
    public static string pencil2;
    public static string black_nib;
    public static string heavy_check_mark;
    public static string heavy_multiplication_x;
    public static string latin_cross;
    public static string star_of_david;
    public static string sparkles;
    public static string eight_spoked_asterisk;
    public static string eight_pointed_black_star;
    public static string snowflake;
    public static string sparkle;
    public static string x;
    public static string negative_squared_cross_mark;
    public static string question;
    public static string grey_question;
    public static string grey_exclamation;
    public static string exclamation;
    public static string heavy_heart_exclamation_mark_ornament;
    public static string heart;
    public static string heavy_plus_sign;
    public static string heavy_minus_sign;
    public static string heavy_division_sign;
    public static string arrow_right;
    public static string curly_loop;
    public static string loop;
    public static string arrow_heading_up;
    public static string arrow_heading_down;
    public static string arrow_left;
    public static string arrow_up;
    public static string arrow_down;
    public static string black_large_square;
    public static string white_large_square;
    public static string star;
    public static string o;
    public static string wavy_dash;
    public static string part_alternation_mark;
    public static string congratulations;
    public static string secret;
    public static string mahjong;
    public static string black_joker;
    public static string a;
    public static string b;
    public static string o2;
    public static string parking;
    public static string ab;
    public static string cl;
    public static string cool;
    public static string free;
    public static string id;
    public static string New;
    public static string ng;
    public static string ok;
    public static string sos;
    public static string up;
    public static string vs;
    public static string koko;
    public static string sa;
    public static string u7121;
    public static string u6307;
    public static string u7981;
    public static string u7a7a;
    public static string u5408;
    public static string u6e80;
    public static string u6709;
    public static string u6708;
    public static string u7533;
    public static string u5272;
    public static string u55b6;
    public static string ideograph_advantage;
    public static string accept;
    public static string cyclone;
    public static string foggy;
    public static string closed_umbrella;
    public static string night_with_stars;
    public static string sunrise_over_mountains;
    public static string sunrise;
    public static string city_sunset;
    public static string city_sunrise;
    public static string rainbow;
    public static string bridge_at_night;
    public static string ocean;
    public static string volcano;
    public static string milky_way;
    public static string earth_africa;
    public static string earth_americas;
    public static string earth_asia;
    public static string globe_with_meridians;
    public static string new_moon;
    public static string waxing_crescent_moon;
    public static string first_quarter_moon;
    public static string moon;
    public static string full_moon;
    public static string waning_gibbous_moon;
    public static string last_quarter_moon;
    public static string waning_crescent_moon;
    public static string crescent_moon;
    public static string new_moon_with_face;
    public static string first_quarter_moon_with_face;
    public static string last_quarter_moon_with_face;
    public static string full_moon_with_face;
    public static string sun_with_face;
    public static string star2;
    public static string stars;
    public static string thermometer;
    public static string mostly_sunny;
    public static string barely_sunny;
    public static string partly_sunny_rain;
    public static string rain_cloud;
    public static string snow_cloud;
    public static string lightning;
    public static string tornado;
    public static string fog;
    public static string wind_blowing_face;
    public static string hotdog;
    public static string taco;
    public static string burrito;
    public static string chestnut;
    public static string seedling;
    public static string evergreen_tree;
    public static string deciduous_tree;
    public static string palm_tree;
    public static string cactus;
    public static string hot_pepper;
    public static string tulip;
    public static string cherry_blossom;
    public static string rose;
    public static string hibiscus;
    public static string sunflower;
    public static string blossom;
    public static string corn;
    public static string ear_of_rice;
    public static string herb;
    public static string four_leaf_clover;
    public static string maple_leaf;
    public static string fallen_leaf;
    public static string leaves;
    public static string mushroom;
    public static string tomato;
    public static string eggplant;
    public static string grapes;
    public static string melon;
    public static string watermelon;
    public static string tangerine;
    public static string lemon;
    public static string banana;
    public static string pineapple;
    public static string apple;
    public static string green_apple;
    public static string pear;
    public static string peach;
    public static string cherries;
    public static string strawberry;
    public static string hamburger;
    public static string pizza;
    public static string meat_on_bone;
    public static string poultry_leg;
    public static string rice_cracker;
    public static string rice_ball;
    public static string rice;
    public static string curry;
    public static string ramen;
    public static string spaghetti;
    public static string bread;
    public static string fries;
    public static string sweet_potato;
    public static string dango;
    public static string oden;
    public static string sushi;
    public static string fried_shrimp;
    public static string fish_cake;
    public static string icecream;
    public static string shaved_ice;
    public static string ice_cream;
    public static string doughnut;
    public static string cookie;
    public static string chocolate_bar;
    public static string candy;
    public static string lollipop;
    public static string custard;
    public static string honey_pot;
    public static string cake;
    public static string bento;
    public static string stew;
    public static string egg;
    public static string fork_and_knife;
    public static string tea;
    public static string sake;
    public static string wine_glass;
    public static string cocktail;
    public static string tropical_drink;
    public static string beer;
    public static string beers;
    public static string baby_bottle;
    public static string knife_fork_plate;
    public static string champagne;
    public static string popcorn;
    public static string ribbon;
    public static string gift;
    public static string birthday;
    public static string jack_o_lantern;
    public static string christmas_tree;
    public static string santa;
    public static string fireworks;
    public static string sparkler;
    public static string balloon;
    public static string tada;
    public static string confetti_ball;
    public static string tanabata_tree;
    public static string crossed_flags;
    public static string bamboo;
    public static string dolls;
    public static string flags;
    public static string wind_chime;
    public static string rice_scene;
    public static string school_satchel;
    public static string mortar_board;
    public static string medal;
    public static string reminder_ribbon;
    public static string studio_microphone;
    public static string level_slider;
    public static string control_knobs;
    public static string film_frames;
    public static string admission_tickets;
    public static string carousel_horse;
    public static string ferris_wheel;
    public static string roller_coaster;
    public static string fishing_pole_and_fish;
    public static string microphone;
    public static string movie_camera;
    public static string cinema;
    public static string headphones;
    public static string art;
    public static string tophat;
    public static string circus_tent;
    public static string ticket;
    public static string clapper;
    public static string performing_arts;
    public static string video_game;
    public static string dart;
    public static string slot_machine;
    public static string Eightball;
    public static string game_die;
    public static string bowling;
    public static string flower_playing_cards;
    public static string musical_note;
    public static string notes;
    public static string saxophone;
    public static string guitar;
    public static string musical_keyboard;
    public static string trumpet;
    public static string violin;
    public static string musical_score;
    public static string running_shirt_with_sash;
    public static string tennis;
    public static string ski;
    public static string basketball;
    public static string checkered_flag;
    public static string snowboarder;
    public static string runner;
    public static string surfer;
    public static string sports_medal;
    public static string trophy;
    public static string horse_racing;
    public static string football;
    public static string rugby_football;
    public static string swimmer;
    public static string weight_lifter;
    public static string golfer;
    public static string racing_motorcycle;
    public static string racing_car;
    public static string cricket_bat_and_ball;
    public static string volleyball;
    public static string field_hockey_stick_and_ball;
    public static string ice_hockey_stick_and_puck;
    public static string table_tennis_paddle_and_ball;
    public static string snow_capped_mountain;
    public static string camping;
    public static string beach_with_umbrella;
    public static string building_construction;
    public static string house_buildings;
    public static string cityscape;
    public static string derelict_house_building;
    public static string classical_building;
    public static string desert;
    public static string desert_island;
    public static string national_park;
    public static string stadium;
    public static string house;
    public static string house_with_garden;
    public static string office;
    public static string post_office;
    public static string european_post_office;
    public static string hospital;
    public static string bank;
    public static string atm;
    public static string hotel;
    public static string love_hotel;
    public static string convenience_store;
    public static string school;
    public static string department_store;
    public static string factory;
    public static string izakaya_lantern;
    public static string japanese_castle;
    public static string european_castle;
    public static string waving_white_flag;
    public static string waving_black_flag;
    public static string rosette;
    public static string label;
    public static string badminton_racquet_and_shuttlecock;
    public static string bow_and_arrow;
    public static string amphora;
    public static string skin_tone_2;
    public static string skin_tone_3;
    public static string skin_tone_4;
    public static string skin_tone_5;
    public static string skin_tone_6;
    public static string rat;
    public static string mouse2;
    public static string ox;
    public static string water_buffalo;
    public static string cow2;
    public static string tiger2;
    public static string leopard;
    public static string rabbit2;
    public static string cat2;
    public static string dragon;
    public static string crocodile;
    public static string whale2;
    public static string snail;
    public static string snake;
    public static string racehorse;
    public static string ram;
    public static string goat;
    public static string sheep;
    public static string monkey;
    public static string rooster;
    public static string chicken;
    public static string dog2;
    public static string pig2;
    public static string boar;
    public static string elephant;
    public static string octopus;
    public static string shell;
    public static string bug;
    public static string ant;
    public static string bee;
    public static string beetle;
    public static string fish;
    public static string tropical_fish;
    public static string blowfish;
    public static string turtle;
    public static string hatching_chick;
    public static string baby_chick;
    public static string hatched_chick;
    public static string bird;
    public static string penguin;
    public static string koala;
    public static string poodle;
    public static string dromedary_camel;
    public static string camel;
    public static string dolphin;
    public static string mouse;
    public static string cow;
    public static string tiger;
    public static string rabbit;
    public static string cat;
    public static string dragon_face;
    public static string whale;
    public static string horse;
    public static string monkey_face;
    public static string dog;
    public static string pig;
    public static string frog;
    public static string hamster;
    public static string wolf;
    public static string bear;
    public static string panda_face;
    public static string pig_nose;
    public static string feet;
    public static string chipmunk;
    public static string eyes;
    public static string eye;
    public static string ear;
    public static string nose;
    public static string lips;
    public static string tongue;
    public static string point_up_2;
    public static string point_down;
    public static string point_left;
    public static string point_right;
    public static string facepunch;
    public static string wave;
    public static string ok_hand;
    public static string plus1;
    public static string minus1;
    public static string clap;
    public static string open_hands;
    public static string crown;
    public static string womans_hat;
    public static string eyeglasses;
    public static string necktie;
    public static string shirt;
    public static string jeans;
    public static string dress;
    public static string kimono;
    public static string bikini;
    public static string womans_clothes;
    public static string purse;
    public static string handbag;
    public static string pouch;
    public static string mans_shoe;
    public static string athletic_shoe;
    public static string high_heel;
    public static string sandal;
    public static string boot;
    public static string footprints;
    public static string bust_in_silhouette;
    public static string busts_in_silhouette;
    public static string boy;
    public static string girl;
    public static string man;
    public static string woman;
    public static string family;
    public static string couple;
    public static string two_men_holding_hands;
    public static string two_women_holding_hands;
    public static string cop;
    public static string dancers;
    public static string bride_with_veil;
    public static string person_with_blond_hair;
    public static string man_with_gua_pi_mao;
    public static string man_with_turban;
    public static string older_man;
    public static string older_woman;
    public static string baby;
    public static string construction_worker;
    public static string princess;
    public static string japanese_ogre;
    public static string japanese_goblin;
    public static string ghost;
    public static string angel;
    public static string alien;
    public static string space_invader;
    public static string imp;
    public static string skull;
    public static string information_desk_person;
    public static string guardsman;
    public static string dancer;
    public static string lipstick;
    public static string nail_care;
    public static string massage;
    public static string haircut;
    public static string barber;
    public static string syringe;
    public static string pill;
    public static string kiss;
    public static string love_letter;
    public static string ring;
    public static string gem;
    public static string couplekiss;
    public static string bouquet;
    public static string couple_with_heart;
    public static string wedding;
    public static string heartbeat;
    public static string broken_heart;
    public static string two_hearts;
    public static string sparkling_heart;
    public static string heartpulse;
    public static string cupid;
    public static string blue_heart;
    public static string green_heart;
    public static string yellow_heart;
    public static string purple_heart;
    public static string gift_heart;
    public static string revolving_hearts;
    public static string heart_decoration;
    public static string diamond_shape_with_a_dot_inside;
    public static string bulb;
    public static string anger;
    public static string bomb;
    public static string zzz;
    public static string boom;
    public static string sweat_drops;
    public static string droplet;
    public static string dash;
    public static string hankey;
    public static string muscle;
    public static string dizzy;
    public static string speech_balloon;
    public static string thought_balloon;
    public static string white_flower;
    public static string one_hundred;
    public static string moneybag;
    public static string currency_exchange;
    public static string heavy_dollar_sign;
    public static string credit_card;
    public static string yen;
    public static string dollar;
    public static string euro;
    public static string pound;
    public static string money_with_wings;
    public static string chart;
    public static string seat;
    public static string computer;
    public static string briefcase;
    public static string minidisc;
    public static string floppy_disk;
    public static string cd;
    public static string dvd;
    public static string file_folder;
    public static string open_file_folder;
    public static string page_with_curl;
    public static string page_facing_up;
    public static string date;
    public static string calendar;
    public static string card_index;
    public static string chart_with_upwards_trend;
    public static string chart_with_downwards_trend;
    public static string bar_chart;
    public static string clipboard;
    public static string pushpin;
    public static string round_pushpin;
    public static string paperclip;
    public static string straight_ruler;
    public static string triangular_ruler;
    public static string bookmark_tabs;
    public static string ledger;
    public static string notebook;
    public static string notebook_with_decorative_cover;
    public static string closed_book;
    public static string book;
    public static string green_book;
    public static string blue_book;
    public static string orange_book;
    public static string books;
    public static string name_badge;
    public static string scroll;
    public static string memo;
    public static string telephone_receiver;
    public static string pager;
    public static string fax;
    public static string satellite;
    public static string loudspeaker;
    public static string mega;
    public static string outbox_tray;
    public static string inbox_tray;
    public static string package;
    public static string email2;
    public static string incoming_envelope;
    public static string envelope_with_arrow;
    public static string mailbox_closed;
    public static string mailbox;
    public static string mailbox_with_mail;
    public static string mailbox_with_no_mail;
    public static string postbox;
    public static string postal_horn;
    public static string newspaper;
    public static string iphone;
    public static string calling;
    public static string vibration_mode;
    public static string mobile_phone_off;
    public static string no_mobile_phones;
    public static string signal_strength;
    public static string camera;
    public static string camera_with_flash;
    public static string video_camera;
    public static string tv;
    public static string radio;
    public static string vhs;
    public static string film_projector;
    public static string prayer_beads;
    public static string twisted_rightwards_arrows;
    public static string repeat;
    public static string repeat_one;
    public static string arrows_clockwise;
    public static string arrows_counterclockwise;
    public static string low_brightness;
    public static string high_brightness;
    public static string mute;
    public static string speaker;
    public static string sound;
    public static string loud_sound;
    public static string battery;
    public static string electric_plug;
    public static string mag;
    public static string mag_right;
    public static string lock_with_ink_pen;
    public static string closed_lock_with_key;
    public static string key;
    public static string Lock;
    public static string unlock;
    public static string bell;
    public static string no_bell;
    public static string bookmark;
    public static string link;
    public static string radio_button;
    public static string back;
    public static string end;
    public static string on;
    public static string soon;
    public static string top;
    public static string underage;
    public static string keycap_ten;
    public static string capital_abcd;
    public static string abcd;
    public static string OneTwoThreeFour;
    public static string symbols;
    public static string abc;
    public static string fire;
    public static string flashlight;
    public static string wrench;
    public static string hammer;
    public static string nut_and_bolt;
    public static string hocho;
    public static string gun;
    public static string microscope;
    public static string telescope;
    public static string crystal_ball;
    public static string six_pointed_star;
    public static string beginner;
    public static string trident;
    public static string black_square_button;
    public static string white_square_button;
    public static string red_circle;
    public static string large_blue_circle;
    public static string large_orange_diamond;
    public static string large_blue_diamond;
    public static string small_orange_diamond;
    public static string small_blue_diamond;
    public static string small_red_triangle;
    public static string small_red_triangle_down;
    public static string arrow_up_small;
    public static string arrow_down_small;
    public static string om_symbol;
    public static string dove_of_peace;
    public static string kaaba;
    public static string mosque;
    public static string synagogue;
    public static string menorah_with_nine_branches;
    public static string clock1;
    public static string clock2;
    public static string clock3;
    public static string clock4;
    public static string clock5;
    public static string clock6;
    public static string clock7;
    public static string clock8;
    public static string clock9;
    public static string clock10;
    public static string clock11;
    public static string clock12;
    public static string clock130;
    public static string clock230;
    public static string clock330;
    public static string clock430;
    public static string clock530;
    public static string clock630;
    public static string clock730;
    public static string clock830;
    public static string clock930;
    public static string clock1030;
    public static string clock1130;
    public static string clock1230;
    public static string candle;
    public static string mantelpiece_clock;
    public static string hole;
    public static string man_in_business_suit_levitating;
    public static string sleuth_or_spy;
    public static string dark_sunglasses;
    public static string spider;
    public static string spider_web;
    public static string joystick;
    public static string linked_paperclips;
    public static string lower_left_ballpoint_pen;
    public static string lower_left_fountain_pen;
    public static string lower_left_paintbrush;
    public static string lower_left_crayon;
    public static string raised_hand_with_fingers_splayed;
    public static string middle_finger;
    public static string spock_hand;
    public static string desktop_computer;
    public static string printer;
    public static string three_button_mouse;
    public static string trackball;
    public static string frame_with_picture;
    public static string card_index_dividers;
    public static string card_file_box;
    public static string file_cabinet;
    public static string wastebasket;
    public static string spiral_note_pad;
    public static string spiral_calendar_pad;
    public static string compression;
    public static string old_key;
    public static string rolled_up_newspaper;
    public static string dagger_knife;
    public static string speaking_head_in_silhouette;
    public static string left_speech_bubble;
    public static string right_anger_bubble;
    public static string ballot_box_with_ballot;
    public static string world_map;
    public static string mount_fuji;
    public static string tokyo_tower;
    public static string statue_of_liberty;
    public static string japan;
    public static string moyai;
    public static string grinning;
    public static string grin;
    public static string joy;
    public static string smiley;
    public static string smile;
    public static string sweat_smile;
    public static string laughing;
    public static string innocent;
    public static string smiling_imp;
    public static string wink;
    public static string blush;
    public static string yum;
    public static string relieved;
    public static string heart_eyes;
    public static string sunglasses;
    public static string smirk;
    public static string neutral_face;
    public static string expressionless;
    public static string unamused;
    public static string sweat;
    public static string pensive;
    public static string confused;
    public static string confounded;
    public static string kissing;
    public static string kissing_heart;
    public static string kissing_smiling_eyes;
    public static string kissing_closed_eyes;
    public static string stuck_out_tongue;
    public static string stuck_out_tongue_winking_eye;
    public static string stuck_out_tongue_closed_eyes;
    public static string disappointed;
    public static string worried;
    public static string angry;
    public static string rage;
    public static string cry;
    public static string persevere;
    public static string triumph;
    public static string disappointed_relieved;
    public static string frowning;
    public static string anguished;
    public static string fearful;
    public static string weary;
    public static string sleepy;
    public static string tired_face;
    public static string grimacing;
    public static string sob;
    public static string open_mouth;
    public static string hushed;
    public static string cold_sweat;
    public static string scream;
    public static string astonished;
    public static string flushed;
    public static string sleeping;
    public static string dizzy_face;
    public static string no_mouth;
    public static string mask;
    public static string smile_cat;
    public static string joy_cat;
    public static string smiley_cat;
    public static string heart_eyes_cat;
    public static string smirk_cat;
    public static string kissing_cat;
    public static string pouting_cat;
    public static string crying_cat_face;
    public static string scream_cat;
    public static string slightly_frowning_face;
    public static string slightly_smiling_face;
    public static string upside_down_face;
    public static string face_with_rolling_eyes;
    public static string no_good;
    public static string ok_woman;
    public static string bow;
    public static string see_no_evil;
    public static string hear_no_evil;
    public static string speak_no_evil;
    public static string raising_hand;
    public static string raised_hands;
    public static string person_frowning;
    public static string person_with_pouting_face;
    public static string pray;
    public static string rocket;
    public static string helicopter;
    public static string steam_locomotive;
    public static string railway_car;
    public static string bullettrain_side;
    public static string bullettrain_front;
    public static string train2;
    public static string metro;
    public static string light_rail;
    public static string station;
    public static string tram;
    public static string train;
    public static string bus;
    public static string oncoming_bus;
    public static string trolleybus;
    public static string busstop;
    public static string minibus;
    public static string ambulance;
    public static string fire_engine;
    public static string police_car;
    public static string oncoming_police_car;
    public static string taxi;
    public static string oncoming_taxi;
    public static string car;
    public static string oncoming_automobile;
    public static string blue_car;
    public static string truck;
    public static string articulated_lorry;
    public static string tractor;
    public static string monorail;
    public static string mountain_railway;
    public static string suspension_railway;
    public static string mountain_cableway;
    public static string aerial_tramway;
    public static string ship;
    public static string rowboat;
    public static string speedboat;
    public static string traffic_light;
    public static string vertical_traffic_light;
    public static string construction;
    public static string rotating_light;
    public static string triangular_flag_on_post;
    public static string door;
    public static string no_entry_sign;
    public static string smoking;
    public static string no_smoking;
    public static string put_litter_in_its_place;
    public static string do_not_litter;
    public static string potable_water;
    public static string nonpotable_water;
    public static string bike;
    public static string no_bicycles;
    public static string bicyclist;
    public static string mountain_bicyclist;
    public static string walking;
    public static string no_pedestrians;
    public static string children_crossing;
    public static string mens;
    public static string womens;
    public static string restroom;
    public static string baby_symbol;
    public static string toilet;
    public static string wc;
    public static string shower;
    public static string bath;
    public static string bathtub;
    public static string passport_control;
    public static string customs;
    public static string baggage_claim;
    public static string left_luggage;
    public static string couch_and_lamp;
    public static string sleeping_accommodation;
    public static string shopping_bags;
    public static string bellhop_bell;
    public static string bed;
    public static string place_of_worship;
    public static string hammer_and_wrench;
    public static string shield;
    public static string oil_drum;
    public static string motorway;
    public static string railway_track;
    public static string motor_boat;
    public static string small_airplane;
    public static string airplane_departure;
    public static string airplane_arriving;
    public static string passenger_ship;
    public static string zipper_mouth_face;
    public static string money_mouth_face;
    public static string face_with_thermometer;
    public static string nerd_face;
    public static string thinking_face;
    public static string face_with_head_bandage;
    public static string robot_face;
    public static string hugging_face;
    public static string the_horns;
    public static string crab;
    public static string lion_face;
    public static string scorpion;
    public static string turkey;
    public static string unicorn_face;
    public static string cheese_wedge;
    public static string hash;
    public static string keycap_star;
    public static string zero;
    public static string one;
    public static string two;
    public static string three;
    public static string four;
    public static string five;
    public static string six;
    public static string seven;
    public static string eight;
    public static string nine;
    public static string flag_ac;
    public static string flag_ad;
    public static string flag_ae;
    public static string flag_af;
    public static string flag_ag;
    public static string flag_ai;
    public static string flag_al;
    public static string flag_am;
    public static string flag_ao;
    public static string flag_aq;
    public static string flag_ar;
    public static string flag_as;
    public static string flag_at;
    public static string flag_au;
    public static string flag_aw;
    public static string flag_ax;
    public static string flag_az;
    public static string flag_ba;
    public static string flag_bb;
    public static string flag_bd;
    public static string flag_be;
    public static string flag_bf;
    public static string flag_bg;
    public static string flag_bh;
    public static string flag_bi;
    public static string flag_bj;
    public static string flag_bl;
    public static string flag_bm;
    public static string flag_bn;
    public static string flag_bo;
    public static string flag_bq;
    public static string flag_br;
    public static string flag_bs;
    public static string flag_bt;
    public static string flag_bv;
    public static string flag_bw;
    public static string flag_by;
    public static string flag_bz;
    public static string flag_ca;
    public static string flag_cc;
    public static string flag_cd;
    public static string flag_cf;
    public static string flag_cg;
    public static string flag_ch;
    public static string flag_ci;
    public static string flag_ck;
    public static string flag_cl;
    public static string flag_cm;
    public static string flag_cn;
    public static string flag_co;
    public static string flag_cp;
    public static string flag_cr;
    public static string flag_cu;
    public static string flag_cv;
    public static string flag_cw;
    public static string flag_cx;
    public static string flag_cy;
    public static string flag_cz;
    public static string flag_de;
    public static string flag_dg;
    public static string flag_dj;
    public static string flag_dk;
    public static string flag_dm;
    public static string flag_do;
    public static string flag_dz;
    public static string flag_ea;
    public static string flag_ec;
    public static string flag_ee;
    public static string flag_eg;
    public static string flag_eh;
    public static string flag_er;
    public static string flag_es;
    public static string flag_et;
    public static string flag_eu;
    public static string flag_fi;
    public static string flag_fj;
    public static string flag_fk;
    public static string flag_fm;
    public static string flag_fo;
    public static string flag_fr;
    public static string flag_ga;
    public static string flag_gb;
    public static string flag_gd;
    public static string flag_ge;
    public static string flag_gf;
    public static string flag_gg;
    public static string flag_gh;
    public static string flag_gi;
    public static string flag_gl;
    public static string flag_gm;
    public static string flag_gn;
    public static string flag_gp;
    public static string flag_gq;
    public static string flag_gr;
    public static string flag_gs;
    public static string flag_gt;
    public static string flag_gu;
    public static string flag_gw;
    public static string flag_gy;
    public static string flag_hk;
    public static string flag_hm;
    public static string flag_hn;
    public static string flag_hr;
    public static string flag_ht;
    public static string flag_hu;
    public static string flag_ic;
    public static string flag_id;
    public static string flag_ie;
    public static string flag_il;
    public static string flag_im;
    public static string flag_in;
    public static string flag_io;
    public static string flag_iq;
    public static string flag_ir;
    public static string flag_is;
    public static string flag_it;
    public static string flag_je;
    public static string flag_jm;
    public static string flag_jo;
    public static string flag_jp;
    public static string flag_ke;
    public static string flag_kg;
    public static string flag_kh;
    public static string flag_ki;
    public static string flag_km;
    public static string flag_kn;
    public static string flag_kp;
    public static string flag_kr;
    public static string flag_kw;
    public static string flag_ky;
    public static string flag_kz;
    public static string flag_la;
    public static string flag_lb;
    public static string flag_lc;
    public static string flag_li;
    public static string flag_lk;
    public static string flag_lr;
    public static string flag_ls;
    public static string flag_lt;
    public static string flag_lu;
    public static string flag_lv;
    public static string flag_ly;
    public static string flag_ma;
    public static string flag_mc;
    public static string flag_md;
    public static string flag_me;
    public static string flag_mf;
    public static string flag_mg;
    public static string flag_mh;
    public static string flag_mk;
    public static string flag_ml;
    public static string flag_mm;
    public static string flag_mn;
    public static string flag_mo;
    public static string flag_mp;
    public static string flag_mq;
    public static string flag_mr;
    public static string flag_ms;
    public static string flag_mt;
    public static string flag_mu;
    public static string flag_mv;
    public static string flag_mw;
    public static string flag_mx;
    public static string flag_my;
    public static string flag_mz;
    public static string flag_na;
    public static string flag_nc;
    public static string flag_ne;
    public static string flag_nf;
    public static string flag_ng;
    public static string flag_ni;
    public static string flag_nl;
    public static string flag_no;
    public static string flag_np;
    public static string flag_nr;
    public static string flag_nu;
    public static string flag_nz;
    public static string flag_om;
    public static string flag_pa;
    public static string flag_pe;
    public static string flag_pf;
    public static string flag_pg;
    public static string flag_ph;
    public static string flag_pk;
    public static string flag_pl;
    public static string flag_pm;
    public static string flag_pn;
    public static string flag_pr;
    public static string flag_ps;
    public static string flag_pt;
    public static string flag_pw;
    public static string flag_py;
    public static string flag_qa;
    public static string flag_re;
    public static string flag_ro;
    public static string flag_rs;
    public static string flag_ru;
    public static string flag_rw;
    public static string flag_sa;
    public static string flag_sb;
    public static string flag_sc;
    public static string flag_sd;
    public static string flag_se;
    public static string flag_sg;
    public static string flag_sh;
    public static string flag_si;
    public static string flag_sj;
    public static string flag_sk;
    public static string flag_sl;
    public static string flag_sm;
    public static string flag_sn;
    public static string flag_so;
    public static string flag_sr;
    public static string flag_ss;
    public static string flag_st;
    public static string flag_sv;
    public static string flag_sx;
    public static string flag_sy;
    public static string flag_sz;
    public static string flag_ta;
    public static string flag_tc;
    public static string flag_td;
    public static string flag_tf;
    public static string flag_tg;
    public static string flag_th;
    public static string flag_tj;
    public static string flag_tk;
    public static string flag_tl;
    public static string flag_tm;
    public static string flag_tn;
    public static string flag_to;
    public static string flag_tr;
    public static string flag_tt;
    public static string flag_tv;
    public static string flag_tw;
    public static string flag_tz;
    public static string flag_ua;
    public static string flag_ug;
    public static string flag_um;
    public static string flag_us;
    public static string flag_uy;
    public static string flag_uz;
    public static string flag_va;
    public static string flag_vc;
    public static string flag_ve;
    public static string flag_vg;
    public static string flag_vi;
    public static string flag_vn;
    public static string flag_vu;
    public static string flag_wf;
    public static string flag_ws;
    public static string flag_xk;
    public static string flag_ye;
    public static string flag_yt;
    public static string flag_za;
    public static string flag_zm;
    public static string flag_zw;
}
public class Microsoft.MarkedNet.GfmBlockRules : BlockRules {
    private static Regex fences;
    private static Regex paragraph;
    private static Regex heading;
    public Regex Fences { get; }
    public Regex Paragraph { get; }
    public Regex Heading { get; }
    private static GfmBlockRules();
    public virtual Regex get_Fences();
    public virtual Regex get_Paragraph();
    public virtual Regex get_Heading();
}
public class Microsoft.MarkedNet.GfmInlineRules : InlineRules {
    private static Regex escape;
    private static Regex url;
    private static Regex del;
    private static Regex text;
    public Regex Escape { get; }
    public Regex Url { get; }
    public Regex Del { get; }
    public Regex Text { get; }
    private static GfmInlineRules();
    public virtual Regex get_Escape();
    public virtual Regex get_Url();
    public virtual Regex get_Del();
    public virtual Regex get_Text();
}
public class Microsoft.MarkedNet.HtmlRenderer : EmojiMarkdownRenderer {
    public HtmlRenderer(Options options);
}
public class Microsoft.MarkedNet.InlineLexer : object {
    private Random _random;
    private Options _options;
    private InlineRules _rules;
    private IDictionary`2<string, LinkObj> links;
    private bool inLink;
    public InlineLexer(IDictionary`2<string, LinkObj> links, Options options);
    public virtual string Output(string src);
    protected virtual string OutputLink(IList`1<string> cap, LinkObj link);
    protected virtual string Mangle(string text);
    protected virtual string Smartypants(string text);
    protected virtual string EscapeHtml(string text, bool encode);
}
public class Microsoft.MarkedNet.InlineRules : object {
    private static Regex escape;
    private static Regex autoLink;
    private static Regex url;
    private static Regex tag;
    private static Regex link;
    private static Regex refLink;
    private static Regex noLink;
    private static Regex strong;
    private static Regex em;
    private static Regex code;
    private static Regex br;
    private static Regex del;
    private static Regex text;
    public Regex Escape { get; }
    public Regex AutoLink { get; }
    public Regex Url { get; }
    public Regex Tag { get; }
    public Regex Link { get; }
    public Regex RefLink { get; }
    public Regex NoLink { get; }
    public Regex Strong { get; }
    public Regex Em { get; }
    public Regex Code { get; }
    public Regex Br { get; }
    public Regex Del { get; }
    public Regex Text { get; }
    private static InlineRules();
    public virtual Regex get_Escape();
    public virtual Regex get_AutoLink();
    public virtual Regex get_Url();
    public virtual Regex get_Tag();
    public virtual Regex get_Link();
    public virtual Regex get_RefLink();
    public virtual Regex get_NoLink();
    public virtual Regex get_Strong();
    public virtual Regex get_Em();
    public virtual Regex get_Code();
    public virtual Regex get_Br();
    public virtual Regex get_Del();
    public virtual Regex get_Text();
}
public class Microsoft.MarkedNet.Lexer : object {
    private Options _options;
    private BlockRules _rules;
    public Lexer(Options options);
    public static TokensResult Lex(string src, Options options);
    protected virtual TokensResult Lex(string src);
    protected virtual TokensResult Token(string srcOrig, bool top, TokensResult result);
}
public class Microsoft.MarkedNet.LinkObj : object {
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Href { get; public set; }
    public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
public class Microsoft.MarkedNet.MarkdownRenderer : object {
    [CompilerGeneratedAttribute]
private Options <Options>k__BackingField;
    public Options Options { get; public set; }
    public MarkdownRenderer(Options options);
    [CompilerGeneratedAttribute]
public Options get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Options value);
    public virtual string Code(string code, string lang, bool escaped);
    public virtual string Blockquote(string quote);
    public virtual string Html(string html);
    public virtual string Heading(string text, int level, string raw);
    public virtual string Hr();
    public virtual string List(string body, bool ordered, int start);
    public virtual string ListItem(string text);
    public virtual string Paragraph(string text);
    public virtual string Table(string header, string body);
    public virtual string TableRow(string content);
    public virtual string TableCell(string content, TableCellFlags flags);
    public virtual string Strong(string text);
    public virtual string Em(string text);
    public virtual string Codespan(string text);
    public virtual string Br();
    public virtual string Del(string text);
    public virtual string Link(string href, string title, string text);
    public virtual string Image(string href, string title, string text);
    public virtual string Text(string text);
    public virtual string Preprocess(string text);
    public virtual string Postprocess(string text);
}
public class Microsoft.MarkedNet.Marked : object {
    [CompilerGeneratedAttribute]
private Options <Options>k__BackingField;
    public Options Options { get; public set; }
    public Marked(Options options);
    [CompilerGeneratedAttribute]
public Options get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Options value);
    public virtual string Parse(string src);
}
public class Microsoft.MarkedNet.NormalBlockRules : BlockRules {
}
public class Microsoft.MarkedNet.NormalInlineRules : InlineRules {
}
public class Microsoft.MarkedNet.Options : object {
    private MarkdownRenderer _renderer;
    [CompilerGeneratedAttribute]
private Func`3<string, string, string> <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <Sanitizer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LangPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sanitize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pedantic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mangle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Smartypants>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Breaks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gfm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SmartLists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EscapeHtml>k__BackingField;
    public Func`3<string, string, string> Highlight { get; public set; }
    public Func`2<string, string> Sanitizer { get; public set; }
    public MarkdownRenderer Renderer { get; public set; }
    public string LangPrefix { get; public set; }
    public string HeaderPrefix { get; public set; }
    public bool XHtml { get; public set; }
    public bool Sanitize { get; public set; }
    public bool Pedantic { get; public set; }
    public bool Mangle { get; public set; }
    public bool Smartypants { get; public set; }
    public bool Breaks { get; public set; }
    public bool Gfm { get; public set; }
    public bool Tables { get; public set; }
    public bool SmartLists { get; public set; }
    public bool EscapeHtml { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<string, string, string> get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(Func`3<string, string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_Sanitizer();
    [CompilerGeneratedAttribute]
public void set_Sanitizer(Func`2<string, string> value);
    public MarkdownRenderer get_Renderer();
    public void set_Renderer(MarkdownRenderer value);
    [CompilerGeneratedAttribute]
public string get_LangPrefix();
    [CompilerGeneratedAttribute]
public void set_LangPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderPrefix();
    [CompilerGeneratedAttribute]
public void set_HeaderPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_XHtml();
    [CompilerGeneratedAttribute]
public void set_XHtml(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sanitize();
    [CompilerGeneratedAttribute]
public void set_Sanitize(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pedantic();
    [CompilerGeneratedAttribute]
public void set_Pedantic(bool value);
    [CompilerGeneratedAttribute]
public bool get_Mangle();
    [CompilerGeneratedAttribute]
public void set_Mangle(bool value);
    [CompilerGeneratedAttribute]
public bool get_Smartypants();
    [CompilerGeneratedAttribute]
public void set_Smartypants(bool value);
    [CompilerGeneratedAttribute]
public bool get_Breaks();
    [CompilerGeneratedAttribute]
public void set_Breaks(bool value);
    [CompilerGeneratedAttribute]
public bool get_Gfm();
    [CompilerGeneratedAttribute]
public void set_Gfm(bool value);
    [CompilerGeneratedAttribute]
public bool get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(bool value);
    [CompilerGeneratedAttribute]
public bool get_SmartLists();
    [CompilerGeneratedAttribute]
public void set_SmartLists(bool value);
    [CompilerGeneratedAttribute]
public bool get_EscapeHtml();
    [CompilerGeneratedAttribute]
public void set_EscapeHtml(bool value);
}
public class Microsoft.MarkedNet.Parser : object {
    private Options _options;
    private InlineLexer inline;
    private Stack`1<Token> tokens;
    private Token token;
    public Parser(Options options);
    public static string Parse(TokensResult src, Options options);
    public virtual string Parse(TokensResult src);
    protected virtual Token Next();
    protected virtual Token Peek();
    protected virtual string ParseText();
    protected virtual string Tok();
}
public class Microsoft.MarkedNet.PedanticInlineRules : InlineRules {
    private static Regex strong;
    private static Regex em;
    public Regex Strong { get; }
    public Regex Em { get; }
    private static PedanticInlineRules();
    public virtual Regex get_Strong();
    public virtual Regex get_Em();
}
[ExtensionAttribute]
public static class Microsoft.MarkedNet.StringHelper : object {
    public static string DecodeURIComponent(string str);
    public static string Escape(string html, bool encode);
    public static string Unescape(string html);
    public static string NotEmpty(IList`1<string> source, int index1, int index2);
    [ExtensionAttribute]
public static string ReplaceRegex(string input, string pattern, string replacement);
    [ExtensionAttribute]
public static IList`1<string> SplitRegex(string input, string pattern);
    [ExtensionAttribute]
public static IList`1<string> Exec(Regex regex, string src);
    [ExtensionAttribute]
public static String[] Match(string src, Regex regex);
}
public class Microsoft.MarkedNet.TableCellFlags : object {
    [CompilerGeneratedAttribute]
private bool <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Align>k__BackingField;
    public bool Header { get; public set; }
    public string Align { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(bool value);
    [CompilerGeneratedAttribute]
public string get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(string value);
}
public class Microsoft.MarkedNet.TablesBlockRules : GfmBlockRules {
    private static Regex npTable;
    private static Regex table;
    public Regex NpTable { get; }
    public Regex Table { get; }
    private static TablesBlockRules();
    public virtual Regex get_NpTable();
    public virtual Regex get_Table();
}
public class Microsoft.MarkedNet.TextMarkdownRenderer : EmojiMarkdownRenderer {
    public TextMarkdownRenderer(Options options);
    public virtual string Blockquote(string quote);
    public virtual string Br();
    public virtual string Code(string code, string lang, bool escaped);
    public virtual string Codespan(string text);
    public virtual string Del(string text);
    public virtual string Em(string text);
    public virtual string Heading(string text, int level, string raw);
    public virtual string Hr();
    public virtual string Html(string html);
    public virtual string Image(string href, string title, string text);
    public virtual string Link(string href, string title, string text);
    public virtual string List(string body, bool ordered, int start);
    public virtual string ListItem(string text);
    public virtual string Paragraph(string text);
    public virtual string Strong(string text);
    public virtual string Table(string header, string body);
    public virtual string TableRow(string content);
    public virtual string TableCell(string content, TableCellFlags flags);
    public virtual string Postprocess(string text);
}
public class Microsoft.MarkedNet.Token : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Escaped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ordered>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pre>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Align>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IList`1<string>> <Cells>k__BackingField;
    public string Text { get; public set; }
    public string Type { get; public set; }
    public int Depth { get; public set; }
    public bool Escaped { get; public set; }
    public string Lang { get; public set; }
    public bool Ordered { get; public set; }
    public int Start { get; public set; }
    public bool Pre { get; public set; }
    public IList`1<string> Header { get; public set; }
    public IList`1<string> Align { get; public set; }
    public IList`1<IList`1<string>> Cells { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public bool get_Escaped();
    [CompilerGeneratedAttribute]
public void set_Escaped(bool value);
    [CompilerGeneratedAttribute]
public string get_Lang();
    [CompilerGeneratedAttribute]
public void set_Lang(string value);
    [CompilerGeneratedAttribute]
public bool get_Ordered();
    [CompilerGeneratedAttribute]
public void set_Ordered(bool value);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public bool get_Pre();
    [CompilerGeneratedAttribute]
public void set_Pre(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<IList`1<string>> get_Cells();
    [CompilerGeneratedAttribute]
public void set_Cells(IList`1<IList`1<string>> value);
}
public class Microsoft.MarkedNet.TokensResult : object {
    [CompilerGeneratedAttribute]
private IList`1<Token> <Tokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, LinkObj> <Links>k__BackingField;
    public IList`1<Token> Tokens { get; public set; }
    public IDictionary`2<string, LinkObj> Links { get; public set; }
    public int Length { get; }
    [CompilerGeneratedAttribute]
public IList`1<Token> get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(IList`1<Token> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, LinkObj> get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(IDictionary`2<string, LinkObj> value);
    public int get_Length();
    public IEnumerable`1<Token> Reverse();
    public void Add(Token token);
}
public class Microsoft.MarkedNet.XamlRenderer : EmojiMarkdownRenderer {
    [CompilerGeneratedAttribute]
private string <CodeStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodespanStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlockQuoteStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeSpanStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <HeadingStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderedListStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnorderedListStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageTitleStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParagraphStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CellHeaderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListItemStyle>k__BackingField;
    public string CodeStyle { get; public set; }
    public string CodespanStyle { get; public set; }
    public string BlockQuoteStyle { get; public set; }
    public string CodeSpanStyle { get; public set; }
    public String[] HeadingStyles { get; public set; }
    public string OrderedListStyle { get; public set; }
    public string UnorderedListStyle { get; public set; }
    public string ImageStyle { get; public set; }
    public string ImageTitleStyle { get; public set; }
    public string ParagraphStyle { get; public set; }
    public string CellHeaderStyle { get; public set; }
    public string CellStyle { get; public set; }
    public string ListItemStyle { get; public set; }
    public XamlRenderer(Options options);
    [CompilerGeneratedAttribute]
public string get_CodeStyle();
    [CompilerGeneratedAttribute]
public void set_CodeStyle(string value);
    [CompilerGeneratedAttribute]
public string get_CodespanStyle();
    [CompilerGeneratedAttribute]
public void set_CodespanStyle(string value);
    [CompilerGeneratedAttribute]
public string get_BlockQuoteStyle();
    [CompilerGeneratedAttribute]
public void set_BlockQuoteStyle(string value);
    [CompilerGeneratedAttribute]
public string get_CodeSpanStyle();
    [CompilerGeneratedAttribute]
public void set_CodeSpanStyle(string value);
    [CompilerGeneratedAttribute]
public String[] get_HeadingStyles();
    [CompilerGeneratedAttribute]
public void set_HeadingStyles(String[] value);
    [CompilerGeneratedAttribute]
public string get_OrderedListStyle();
    [CompilerGeneratedAttribute]
public void set_OrderedListStyle(string value);
    [CompilerGeneratedAttribute]
public string get_UnorderedListStyle();
    [CompilerGeneratedAttribute]
public void set_UnorderedListStyle(string value);
    [CompilerGeneratedAttribute]
public string get_ImageStyle();
    [CompilerGeneratedAttribute]
public void set_ImageStyle(string value);
    [CompilerGeneratedAttribute]
public string get_ImageTitleStyle();
    [CompilerGeneratedAttribute]
public void set_ImageTitleStyle(string value);
    [CompilerGeneratedAttribute]
public string get_ParagraphStyle();
    [CompilerGeneratedAttribute]
public void set_ParagraphStyle(string value);
    [CompilerGeneratedAttribute]
public string get_CellHeaderStyle();
    [CompilerGeneratedAttribute]
public void set_CellHeaderStyle(string value);
    [CompilerGeneratedAttribute]
public string get_CellStyle();
    [CompilerGeneratedAttribute]
public void set_CellStyle(string value);
    [CompilerGeneratedAttribute]
public string get_ListItemStyle();
    [CompilerGeneratedAttribute]
public void set_ListItemStyle(string value);
    public virtual string Blockquote(string quote);
    public virtual string Br();
    public virtual string Code(string code, string lang, bool escaped);
    public virtual string Codespan(string text);
    public virtual string Del(string text);
    public virtual string Em(string text);
    public virtual string Heading(string text, int level, string raw);
    public virtual string Hr();
    public virtual string Html(string html);
    public virtual string Image(string href, string title, string text);
    public virtual string Link(string href, string title, string text);
    public virtual string List(string body, bool ordered, int start);
    public virtual string ListItem(string text);
    public virtual string Paragraph(string text);
    public virtual string Strong(string text);
    public virtual string Table(string header, string body);
    public virtual string TableRow(string content);
    public virtual string TableCell(string content, TableCellFlags flags);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
