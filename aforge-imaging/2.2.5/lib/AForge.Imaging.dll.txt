public class AForge.Imaging.Blob : object {
    private UnmanagedImage image;
    private bool originalSize;
    private Rectangle rect;
    private int id;
    private int area;
    private Point cog;
    private double fullness;
    private Color colorMean;
    private Color colorStdDev;
    [BrowsableAttribute("False")]
public UnmanagedImage Image { get; internal set; }
    [BrowsableAttribute("False")]
public bool OriginalSize { get; internal set; }
    public Rectangle Rectangle { get; }
    [BrowsableAttribute("False")]
public int ID { get; internal set; }
    public int Area { get; internal set; }
    public double Fullness { get; internal set; }
    public Point CenterOfGravity { get; internal set; }
    public Color ColorMean { get; internal set; }
    public Color ColorStdDev { get; internal set; }
    public Blob(int id, Rectangle rect);
    public Blob(Blob source);
    public UnmanagedImage get_Image();
    internal void set_Image(UnmanagedImage value);
    public bool get_OriginalSize();
    internal void set_OriginalSize(bool value);
    public Rectangle get_Rectangle();
    public int get_ID();
    internal void set_ID(int value);
    public int get_Area();
    internal void set_Area(int value);
    public double get_Fullness();
    internal void set_Fullness(double value);
    public Point get_CenterOfGravity();
    internal void set_CenterOfGravity(Point value);
    public Color get_ColorMean();
    internal void set_ColorMean(Color value);
    public Color get_ColorStdDev();
    internal void set_ColorStdDev(Color value);
}
public class AForge.Imaging.BlobCounter : BlobCounterBase {
    private byte backgroundThresholdR;
    private byte backgroundThresholdG;
    private byte backgroundThresholdB;
    public Color BackgroundThreshold { get; public set; }
    public BlobCounter(Bitmap image);
    public BlobCounter(BitmapData imageData);
    public BlobCounter(UnmanagedImage image);
    public Color get_BackgroundThreshold();
    public void set_BackgroundThreshold(Color value);
    protected virtual void BuildObjectsMap(UnmanagedImage image);
}
public abstract class AForge.Imaging.BlobCounterBase : object {
    private List`1<Blob> blobs;
    private ObjectsOrder objectsOrder;
    private bool filterBlobs;
    private IBlobsFilter filter;
    private bool coupledSizeFiltering;
    private int minWidth;
    private int minHeight;
    private int maxWidth;
    private int maxHeight;
    protected int objectsCount;
    protected Int32[] objectLabels;
    protected int imageWidth;
    protected int imageHeight;
    public int ObjectsCount { get; }
    public Int32[] ObjectLabels { get; }
    public ObjectsOrder ObjectsOrder { get; public set; }
    public bool FilterBlobs { get; public set; }
    public bool CoupledSizeFiltering { get; public set; }
    public int MinWidth { get; public set; }
    public int MinHeight { get; public set; }
    public int MaxWidth { get; public set; }
    public int MaxHeight { get; public set; }
    public IBlobsFilter BlobsFilter { get; public set; }
    public BlobCounterBase(Bitmap image);
    public BlobCounterBase(BitmapData imageData);
    public BlobCounterBase(UnmanagedImage image);
    public int get_ObjectsCount();
    public Int32[] get_ObjectLabels();
    public ObjectsOrder get_ObjectsOrder();
    public void set_ObjectsOrder(ObjectsOrder value);
    public bool get_FilterBlobs();
    public void set_FilterBlobs(bool value);
    public bool get_CoupledSizeFiltering();
    public void set_CoupledSizeFiltering(bool value);
    public int get_MinWidth();
    public void set_MinWidth(int value);
    public int get_MinHeight();
    public void set_MinHeight(int value);
    public int get_MaxWidth();
    public void set_MaxWidth(int value);
    public int get_MaxHeight();
    public void set_MaxHeight(int value);
    public IBlobsFilter get_BlobsFilter();
    public void set_BlobsFilter(IBlobsFilter value);
    public void ProcessImage(Bitmap image);
    public void ProcessImage(BitmapData imageData);
    public void ProcessImage(UnmanagedImage image);
    public Rectangle[] GetObjectsRectangles();
    public Blob[] GetObjectsInformation();
    public Blob[] GetObjects(Bitmap image, bool extractInOriginalSize);
    public Blob[] GetObjects(UnmanagedImage image, bool extractInOriginalSize);
    public void ExtractBlobsImage(Bitmap image, Blob blob, bool extractInOriginalSize);
    public void ExtractBlobsImage(UnmanagedImage image, Blob blob, bool extractInOriginalSize);
    public void GetBlobsLeftAndRightEdges(Blob blob, List`1& leftEdge, List`1& rightEdge);
    public void GetBlobsTopAndBottomEdges(Blob blob, List`1& topEdge, List`1& bottomEdge);
    public List`1<IntPoint> GetBlobsEdgePoints(Blob blob);
    protected abstract virtual void BuildObjectsMap(UnmanagedImage image);
    private void CollectObjectsInfo(UnmanagedImage image);
}
public class AForge.Imaging.BlockMatch : object {
    private IntPoint sourcePoint;
    private IntPoint matchPoint;
    private float similarity;
    public IntPoint SourcePoint { get; }
    public IntPoint MatchPoint { get; }
    public float Similarity { get; }
    public BlockMatch(IntPoint sourcePoint, IntPoint matchPoint, float similarity);
    public IntPoint get_SourcePoint();
    public IntPoint get_MatchPoint();
    public float get_Similarity();
}
public class AForge.Imaging.ColorReduction.BurkesColorDithering : ColorErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.ColorReduction.ColorErrorDiffusionToAdjacentNeighbors : ErrorDiffusionColorDithering {
    private Int32[][] coefficients;
    private int coefficientsSum;
    public Int32[][] Coefficients { get; public set; }
    public ColorErrorDiffusionToAdjacentNeighbors(Int32[][] coefficients);
    public Int32[][] get_Coefficients();
    public void set_Coefficients(Int32[][] value);
    protected virtual void Diffuse(int rError, int gError, int bError, Byte* ptr);
    private void CalculateCoefficientsSum();
}
public class AForge.Imaging.ColorReduction.ColorImageQuantizer : object {
    private IColorQuantizer quantizer;
    private bool useCaching;
    private Color[] paletteToUse;
    private Dictionary`2<Color, int> cache;
    public IColorQuantizer Quantizer { get; public set; }
    public bool UseCaching { get; public set; }
    public ColorImageQuantizer(IColorQuantizer quantizer);
    public IColorQuantizer get_Quantizer();
    public void set_Quantizer(IColorQuantizer value);
    public bool get_UseCaching();
    public void set_UseCaching(bool value);
    public Color[] CalculatePalette(Bitmap image, int paletteSize);
    public Color[] CalculatePalette(UnmanagedImage image, int paletteSize);
    public Bitmap ReduceColors(Bitmap image, int paletteSize);
    public Bitmap ReduceColors(UnmanagedImage image, int paletteSize);
    public Bitmap ReduceColors(Bitmap image, Color[] palette);
    public Bitmap ReduceColors(UnmanagedImage image, Color[] palette);
    private int GetClosestColor(int red, int green, int blue);
}
public abstract class AForge.Imaging.ColorReduction.ErrorDiffusionColorDithering : object {
    private bool useCaching;
    protected int x;
    protected int y;
    protected int width;
    protected int height;
    protected int stride;
    protected int pixelSize;
    private Color[] colorTable;
    private Dictionary`2<Color, byte> cache;
    public Color[] ColorTable { get; public set; }
    public bool UseCaching { get; public set; }
    public Color[] get_ColorTable();
    public void set_ColorTable(Color[] value);
    public bool get_UseCaching();
    public void set_UseCaching(bool value);
    protected abstract virtual void Diffuse(int rError, int gError, int bError, Byte* ptr);
    public Bitmap Apply(Bitmap sourceImage);
    public Bitmap Apply(UnmanagedImage sourceImage);
    private Color GetClosestColor(int red, int green, int blue, Byte& colorIndex);
}
public class AForge.Imaging.ColorReduction.FloydSteinbergColorDithering : ColorErrorDiffusionToAdjacentNeighbors {
}
public interface AForge.Imaging.ColorReduction.IColorQuantizer {
    public abstract virtual void AddColor(Color color);
    public abstract virtual Color[] GetPalette(int colorCount);
    public abstract virtual void Clear();
}
public class AForge.Imaging.ColorReduction.JarvisJudiceNinkeColorDithering : ColorErrorDiffusionToAdjacentNeighbors {
}
internal class AForge.Imaging.ColorReduction.MedianCutCube : object {
    private List`1<Color> colors;
    private byte minR;
    private byte maxR;
    private byte minG;
    private byte maxG;
    private byte minB;
    private byte maxB;
    private Nullable`1<Color> cubeColor;
    public int RedSize { get; }
    public int GreenSize { get; }
    public int BlueSize { get; }
    public Color Color { get; }
    public MedianCutCube(List`1<Color> colors);
    public int get_RedSize();
    public int get_GreenSize();
    public int get_BlueSize();
    public Color get_Color();
    public void SplitAtMedian(int rgbComponent, MedianCutCube& cube1, MedianCutCube& cube2);
}
public class AForge.Imaging.ColorReduction.MedianCutQuantizer : object {
    private List`1<Color> colors;
    public sealed virtual void AddColor(Color color);
    public sealed virtual Color[] GetPalette(int colorCount);
    public sealed virtual void Clear();
    private void SplitCubes(List`1<MedianCutCube> cubes, int count);
}
public class AForge.Imaging.ColorReduction.OrderedColorDithering : object {
    private bool useCaching;
    private Color[] colorTable;
    private Byte[0...,0...] matrix;
    private Dictionary`2<Color, byte> cache;
    public Byte[0...,0...] ThresholdMatrix { get; public set; }
    public Color[] ColorTable { get; public set; }
    public bool UseCaching { get; public set; }
    public OrderedColorDithering(Byte[0...,0...] matrix);
    public Byte[0...,0...] get_ThresholdMatrix();
    public void set_ThresholdMatrix(Byte[0...,0...] value);
    public Color[] get_ColorTable();
    public void set_ColorTable(Color[] value);
    public bool get_UseCaching();
    public void set_UseCaching(bool value);
    public Bitmap Apply(Bitmap sourceImage);
    public Bitmap Apply(UnmanagedImage sourceImage);
    private Color GetClosestColor(int red, int green, int blue, Byte& colorIndex);
}
public class AForge.Imaging.ColorReduction.SierraColorDithering : ColorErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.ColorReduction.StuckiColorDithering : ColorErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.ComplexFilters.FrequencyFilter : object {
    private IntRange frequencyRange;
    public IntRange FrequencyRange { get; public set; }
    public FrequencyFilter(IntRange frequencyRange);
    public IntRange get_FrequencyRange();
    public void set_FrequencyRange(IntRange value);
    public sealed virtual void Apply(ComplexImage complexImage);
}
public interface AForge.Imaging.ComplexFilters.IComplexFilter {
    public abstract virtual void Apply(ComplexImage complexImage);
}
public class AForge.Imaging.ComplexImage : object {
    private Complex[0...,0...] data;
    private int width;
    private int height;
    private bool fourierTransformed;
    public int Width { get; }
    public int Height { get; }
    public bool FourierTransformed { get; }
    public Complex[0...,0...] Data { get; }
    protected ComplexImage(int width, int height);
    public int get_Width();
    public int get_Height();
    public bool get_FourierTransformed();
    public Complex[0...,0...] get_Data();
    public sealed virtual object Clone();
    public static ComplexImage FromBitmap(Bitmap image);
    public static ComplexImage FromBitmap(BitmapData imageData);
    public Bitmap ToBitmap();
    public void ForwardFourierTransform();
    public void BackwardFourierTransform();
}
public class AForge.Imaging.DocumentSkewChecker : object {
    private int stepsPerDegree;
    private int houghHeight;
    private double thetaStep;
    private double maxSkewToDetect;
    private Double[] sinMap;
    private Double[] cosMap;
    private bool needToInitialize;
    private Int16[0...,0...] houghMap;
    private short maxMapIntensity;
    private int localPeakRadius;
    private ArrayList lines;
    public int StepsPerDegree { get; public set; }
    public double MaxSkewToDetect { get; public set; }
    [ObsoleteAttribute("The property is deprecated and setting it has not any effect. Use MaxSkewToDetect property instead.")]
public double MinBeta { get; public set; }
    [ObsoleteAttribute("The property is deprecated and setting it has not any effect. Use MaxSkewToDetect property instead.")]
public double MaxBeta { get; public set; }
    public int LocalPeakRadius { get; public set; }
    public int get_StepsPerDegree();
    public void set_StepsPerDegree(int value);
    public double get_MaxSkewToDetect();
    public void set_MaxSkewToDetect(double value);
    public double get_MinBeta();
    public void set_MinBeta(double value);
    public double get_MaxBeta();
    public void set_MaxBeta(double value);
    public int get_LocalPeakRadius();
    public void set_LocalPeakRadius(int value);
    public double GetSkewAngle(Bitmap image);
    public double GetSkewAngle(Bitmap image, Rectangle rect);
    public double GetSkewAngle(BitmapData imageData);
    public double GetSkewAngle(BitmapData imageData, Rectangle rect);
    public double GetSkewAngle(UnmanagedImage image);
    public double GetSkewAngle(UnmanagedImage image, Rectangle rect);
    private HoughLine[] GetMostIntensiveLines(int count);
    private void CollectLines(short minLineIntensity);
    private void InitHoughMap();
}
public static class AForge.Imaging.Drawing : object {
    public static void FillRectangle(BitmapData imageData, Rectangle rectangle, Color color);
    public static void FillRectangle(UnmanagedImage image, Rectangle rectangle, Color color);
    public static void Rectangle(BitmapData imageData, Rectangle rectangle, Color color);
    public static void Rectangle(UnmanagedImage image, Rectangle rectangle, Color color);
    public static void Line(BitmapData imageData, IntPoint point1, IntPoint point2, Color color);
    public static void Line(UnmanagedImage image, IntPoint point1, IntPoint point2, Color color);
    public static void Polygon(BitmapData imageData, List`1<IntPoint> points, Color color);
    public static void Polygon(UnmanagedImage image, List`1<IntPoint> points, Color color);
    public static void Polyline(BitmapData imageData, List`1<IntPoint> points, Color color);
    public static void Polyline(UnmanagedImage image, List`1<IntPoint> points, Color color);
    private static void CheckPixelFormat(PixelFormat format);
    private static void CheckEndPoint(int width, int height, IntPoint start, IntPoint& end);
}
internal static class AForge.Imaging.ExceptionMessage : object {
    public static string ColorHistogramException;
    public static string GrayHistogramException;
}
public class AForge.Imaging.ExhaustiveBlockMatching : object {
    private int blockSize;
    private int searchRadius;
    private float similarityThreshold;
    public int SearchRadius { get; public set; }
    public int BlockSize { get; public set; }
    public float SimilarityThreshold { get; public set; }
    public ExhaustiveBlockMatching(int blockSize, int searchRadius);
    public int get_SearchRadius();
    public void set_SearchRadius(int value);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public float get_SimilarityThreshold();
    public void set_SimilarityThreshold(float value);
    public sealed virtual List`1<BlockMatch> ProcessImage(Bitmap sourceImage, List`1<IntPoint> coordinates, Bitmap searchImage);
    public sealed virtual List`1<BlockMatch> ProcessImage(BitmapData sourceImageData, List`1<IntPoint> coordinates, BitmapData searchImageData);
    public sealed virtual List`1<BlockMatch> ProcessImage(UnmanagedImage sourceImage, List`1<IntPoint> coordinates, UnmanagedImage searchImage);
}
public class AForge.Imaging.ExhaustiveTemplateMatching : object {
    private float similarityThreshold;
    public float SimilarityThreshold { get; public set; }
    public ExhaustiveTemplateMatching(float similarityThreshold);
    public float get_SimilarityThreshold();
    public void set_SimilarityThreshold(float value);
    public TemplateMatch[] ProcessImage(Bitmap image, Bitmap template);
    public sealed virtual TemplateMatch[] ProcessImage(Bitmap image, Bitmap template, Rectangle searchZone);
    public TemplateMatch[] ProcessImage(BitmapData imageData, BitmapData templateData);
    public sealed virtual TemplateMatch[] ProcessImage(BitmapData imageData, BitmapData templateData, Rectangle searchZone);
    public TemplateMatch[] ProcessImage(UnmanagedImage image, UnmanagedImage template);
    public sealed virtual TemplateMatch[] ProcessImage(UnmanagedImage image, UnmanagedImage template, Rectangle searchZone);
}
public class AForge.Imaging.Filters.AdaptiveSmoothing : BaseUsingCopyPartialFilter {
    private double factor;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double Factor { get; public set; }
    public AdaptiveSmoothing(double factor);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public double get_Factor();
    public void set_Factor(double value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.Add : BaseInPlaceFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Add(Bitmap overlayImage);
    public Add(UnmanagedImage unmanagedOverlayImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.AdditiveNoise : BaseInPlacePartialFilter {
    private IRandomNumberGenerator generator;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IRandomNumberGenerator Generator { get; public set; }
    public AdditiveNoise(IRandomNumberGenerator generator);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IRandomNumberGenerator get_Generator();
    public void set_Generator(IRandomNumberGenerator value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ApplyMask : BaseInPlacePartialFilter {
    private Bitmap maskImage;
    private UnmanagedImage unmanagedMaskImage;
    private Byte[0...,0...] mask;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Bitmap MaskImage { get; public set; }
    public UnmanagedImage UnmanagedMaskImage { get; public set; }
    public Byte[0...,0...] Mask { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ApplyMask(Bitmap maskImage);
    public ApplyMask(UnmanagedImage unmanagedMaskImage);
    public ApplyMask(Byte[0...,0...] mask);
    public Bitmap get_MaskImage();
    public void set_MaskImage(Bitmap value);
    public UnmanagedImage get_UnmanagedMaskImage();
    public void set_UnmanagedMaskImage(UnmanagedImage value);
    public Byte[0...,0...] get_Mask();
    public void set_Mask(Byte[0...,0...] value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void ProcessImage(UnmanagedImage image, Rectangle rect, Byte* mask, int maskLineSize);
}
public class AForge.Imaging.Filters.BackwardQuadrilateralTransformation : BaseInPlaceFilter {
    private Bitmap sourceImage;
    private UnmanagedImage sourceUnmanagedImage;
    private List`1<IntPoint> destinationQuadrilateral;
    private bool useInterpolation;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Bitmap SourceImage { get; public set; }
    public UnmanagedImage SourceUnmanagedImage { get; public set; }
    public List`1<IntPoint> DestinationQuadrilateral { get; public set; }
    public bool UseInterpolation { get; public set; }
    public BackwardQuadrilateralTransformation(Bitmap sourceImage);
    public BackwardQuadrilateralTransformation(UnmanagedImage sourceUnmanagedImage);
    public BackwardQuadrilateralTransformation(Bitmap sourceImage, List`1<IntPoint> destinationQuadrilateral);
    public BackwardQuadrilateralTransformation(UnmanagedImage sourceUnmanagedImage, List`1<IntPoint> destinationQuadrilateral);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Bitmap get_SourceImage();
    public void set_SourceImage(Bitmap value);
    public UnmanagedImage get_SourceUnmanagedImage();
    public void set_SourceUnmanagedImage(UnmanagedImage value);
    public List`1<IntPoint> get_DestinationQuadrilateral();
    public void set_DestinationQuadrilateral(List`1<IntPoint> value);
    public bool get_UseInterpolation();
    public void set_UseInterpolation(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image);
    private void ProcessFilter(UnmanagedImage dstImage, UnmanagedImage srcImage);
}
public abstract class AForge.Imaging.Filters.BaseFilter : object {
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public abstract virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    protected abstract virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    private void CheckSourceFormat(PixelFormat pixelFormat);
}
public abstract class AForge.Imaging.Filters.BaseFilter2 : BaseFilter {
    private Bitmap overlayImage;
    private UnmanagedImage unmanagedOverlayImage;
    public Bitmap OverlayImage { get; public set; }
    public UnmanagedImage UnmanagedOverlayImage { get; public set; }
    protected BaseFilter2(Bitmap overlayImage);
    protected BaseFilter2(UnmanagedImage unmanagedOverlayImage);
    public Bitmap get_OverlayImage();
    public void set_OverlayImage(Bitmap value);
    public UnmanagedImage get_UnmanagedOverlayImage();
    public void set_UnmanagedOverlayImage(UnmanagedImage value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    protected abstract virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage overlay, UnmanagedImage destinationData);
}
public abstract class AForge.Imaging.Filters.BaseInPlaceFilter : object {
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public abstract virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    public sealed virtual void ApplyInPlace(Bitmap image);
    public sealed virtual void ApplyInPlace(BitmapData imageData);
    public sealed virtual void ApplyInPlace(UnmanagedImage image);
    protected abstract virtual void ProcessFilter(UnmanagedImage image);
    private void CheckSourceFormat(PixelFormat pixelFormat);
}
public abstract class AForge.Imaging.Filters.BaseInPlaceFilter2 : BaseInPlaceFilter {
    private Bitmap overlayImage;
    private UnmanagedImage unmanagedOverlayImage;
    public Bitmap OverlayImage { get; public set; }
    public UnmanagedImage UnmanagedOverlayImage { get; public set; }
    protected BaseInPlaceFilter2(Bitmap overlayImage);
    protected BaseInPlaceFilter2(UnmanagedImage unmanagedOverlayImage);
    public Bitmap get_OverlayImage();
    public void set_OverlayImage(Bitmap value);
    public UnmanagedImage get_UnmanagedOverlayImage();
    public void set_UnmanagedOverlayImage(UnmanagedImage value);
    protected virtual void ProcessFilter(UnmanagedImage image);
    protected abstract virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public abstract class AForge.Imaging.Filters.BaseInPlacePartialFilter : object {
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public abstract virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    public sealed virtual void ApplyInPlace(Bitmap image);
    public sealed virtual void ApplyInPlace(BitmapData imageData);
    public sealed virtual void ApplyInPlace(UnmanagedImage image);
    public sealed virtual void ApplyInPlace(Bitmap image, Rectangle rect);
    public sealed virtual void ApplyInPlace(BitmapData imageData, Rectangle rect);
    public sealed virtual void ApplyInPlace(UnmanagedImage image, Rectangle rect);
    protected abstract virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void CheckSourceFormat(PixelFormat pixelFormat);
}
public abstract class AForge.Imaging.Filters.BaseResizeFilter : BaseTransformationFilter {
    protected int newWidth;
    protected int newHeight;
    public int NewWidth { get; public set; }
    public int NewHeight { get; public set; }
    protected BaseResizeFilter(int newWidth, int newHeight);
    public int get_NewWidth();
    public void set_NewWidth(int value);
    public int get_NewHeight();
    public void set_NewHeight(int value);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
}
public abstract class AForge.Imaging.Filters.BaseRotateFilter : BaseTransformationFilter {
    protected double angle;
    protected bool keepSize;
    protected Color fillColor;
    public double Angle { get; public set; }
    public bool KeepSize { get; public set; }
    public Color FillColor { get; public set; }
    public BaseRotateFilter(double angle);
    public BaseRotateFilter(double angle, bool keepSize);
    public double get_Angle();
    public void set_Angle(double value);
    public bool get_KeepSize();
    public void set_KeepSize(bool value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
}
public abstract class AForge.Imaging.Filters.BaseTransformationFilter : object {
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public abstract virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    protected abstract virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    protected abstract virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    private void CheckSourceFormat(PixelFormat pixelFormat);
}
public abstract class AForge.Imaging.Filters.BaseUsingCopyPartialFilter : object {
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public abstract virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    public sealed virtual void ApplyInPlace(Bitmap image);
    public sealed virtual void ApplyInPlace(BitmapData imageData);
    public sealed virtual void ApplyInPlace(UnmanagedImage image);
    public sealed virtual void ApplyInPlace(Bitmap image, Rectangle rect);
    public sealed virtual void ApplyInPlace(BitmapData imageData, Rectangle rect);
    public sealed virtual void ApplyInPlace(UnmanagedImage image, Rectangle rect);
    protected abstract virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
    private void CheckSourceFormat(PixelFormat pixelFormat);
}
public class AForge.Imaging.Filters.BayerDithering : OrderedDithering {
}
public class AForge.Imaging.Filters.BayerFilter : BaseFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private bool performDemosaicing;
    private Int32[0...,0...] bayerPattern;
    public bool PerformDemosaicing { get; public set; }
    public Int32[0...,0...] BayerPattern { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool get_PerformDemosaicing();
    public void set_PerformDemosaicing(bool value);
    public Int32[0...,0...] get_BayerPattern();
    public void set_BayerPattern(Int32[0...,0...] value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.BayerFilterOptimized : BaseFilter {
    private BayerPattern bayerPattern;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public BayerPattern Pattern { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public BayerPattern get_Pattern();
    public void set_Pattern(BayerPattern value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    private void ApplyGRBG(UnmanagedImage sourceData, UnmanagedImage destinationData);
    private void ApplyBGGR(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public enum AForge.Imaging.Filters.BayerPattern : Enum {
    public int value__;
    public static BayerPattern GRBG;
    public static BayerPattern BGGR;
}
public class AForge.Imaging.Filters.BilateralSmoothing : BaseUsingCopyPartialFilter {
    private static int maxKernelSize;
    private static int colorsCount;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private int kernelSize;
    private double spatialFactor;
    private double spatialPower;
    private double colorFactor;
    private double colorPower;
    private bool spatialPropertiesChanged;
    private bool colorPropertiesChanged;
    private bool limitKernelSize;
    private bool enableParallelProcessing;
    private Double[0...,0...] spatialFunc;
    private Double[0...,0...] colorFunc;
    public bool LimitKernelSize { get; public set; }
    public bool EnableParallelProcessing { get; public set; }
    public int KernelSize { get; public set; }
    public double SpatialFactor { get; public set; }
    public double SpatialPower { get; public set; }
    public double ColorFactor { get; public set; }
    public double ColorPower { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool get_LimitKernelSize();
    public void set_LimitKernelSize(bool value);
    public bool get_EnableParallelProcessing();
    public void set_EnableParallelProcessing(bool value);
    public int get_KernelSize();
    public void set_KernelSize(int value);
    public double get_SpatialFactor();
    public void set_SpatialFactor(double value);
    public double get_SpatialPower();
    public void set_SpatialPower(double value);
    public double get_ColorFactor();
    public void set_ColorFactor(double value);
    public double get_ColorPower();
    public void set_ColorPower(double value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    private void InitSpatialFunc();
    private void InitColorFunc();
    private void InitFilter();
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
    private void ProcessWithoutChecksParallel(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
    private void ProcessWithoutChecks(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
    private void ProcessWithEdgeChecks(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.BinaryDilatation3x3 : BaseUsingCopyPartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public class AForge.Imaging.Filters.BinaryErosion3x3 : BaseUsingCopyPartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public class AForge.Imaging.Filters.BlobsFiltering : BaseInPlaceFilter {
    private BlobCounter blobCounter;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool CoupledSizeFiltering { get; public set; }
    public int MinWidth { get; public set; }
    public int MinHeight { get; public set; }
    public int MaxWidth { get; public set; }
    public int MaxHeight { get; public set; }
    public IBlobsFilter BlobsFilter { get; public set; }
    public BlobsFiltering(int minWidth, int minHeight, int maxWidth, int maxHeight);
    public BlobsFiltering(int minWidth, int minHeight, int maxWidth, int maxHeight, bool coupledSizeFiltering);
    public BlobsFiltering(IBlobsFilter blobsFilter);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_CoupledSizeFiltering();
    public void set_CoupledSizeFiltering(bool value);
    public int get_MinWidth();
    public void set_MinWidth(int value);
    public int get_MinHeight();
    public void set_MinHeight(int value);
    public int get_MaxWidth();
    public void set_MaxWidth(int value);
    public int get_MaxHeight();
    public void set_MaxHeight(int value);
    public IBlobsFilter get_BlobsFilter();
    public void set_BlobsFilter(IBlobsFilter value);
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.Blur : Convolution {
}
public class AForge.Imaging.Filters.BottomHat : BaseInPlaceFilter {
    private Closing closing;
    private Subtract subtract;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public BottomHat(Int16[0...,0...] se);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.BradleyLocalThresholding : BaseInPlaceFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private int windowSize;
    private float pixelBrightnessDifferenceLimit;
    public int WindowSize { get; public set; }
    public float PixelBrightnessDifferenceLimit { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int get_WindowSize();
    public void set_WindowSize(int value);
    public float get_PixelBrightnessDifferenceLimit();
    public void set_PixelBrightnessDifferenceLimit(float value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.BrightnessCorrection : BaseInPlacePartialFilter {
    private LevelsLinear baseFilter;
    private int adjustValue;
    public int AdjustValue { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public BrightnessCorrection(int adjustValue);
    public int get_AdjustValue();
    public void set_AdjustValue(int value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.BurkesDithering : ErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.Filters.CannyEdgeDetector : BaseUsingCopyPartialFilter {
    private GaussianBlur gaussianFilter;
    private byte lowThreshold;
    private byte highThreshold;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public byte LowThreshold { get; public set; }
    public byte HighThreshold { get; public set; }
    public double GaussianSigma { get; public set; }
    public int GaussianSize { get; public set; }
    public CannyEdgeDetector(byte lowThreshold, byte highThreshold);
    public CannyEdgeDetector(byte lowThreshold, byte highThreshold, double sigma);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public byte get_LowThreshold();
    public void set_LowThreshold(byte value);
    public byte get_HighThreshold();
    public void set_HighThreshold(byte value);
    public double get_GaussianSigma();
    public void set_GaussianSigma(double value);
    public int get_GaussianSize();
    public void set_GaussianSize(int value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.CanvasCrop : BaseInPlaceFilter {
    private byte fillRed;
    private byte fillGreen;
    private byte fillBlue;
    private byte fillGray;
    private Rectangle region;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color FillColorRGB { get; public set; }
    public byte FillColorGray { get; public set; }
    public Rectangle Region { get; public set; }
    public CanvasCrop(Rectangle region);
    public CanvasCrop(Rectangle region, Color fillColorRGB);
    public CanvasCrop(Rectangle region, byte fillColorGray);
    public CanvasCrop(Rectangle region, Color fillColorRGB, byte fillColorGray);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_FillColorRGB();
    public void set_FillColorRGB(Color value);
    public byte get_FillColorGray();
    public void set_FillColorGray(byte value);
    public Rectangle get_Region();
    public void set_Region(Rectangle value);
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.CanvasFill : BaseInPlaceFilter {
    private byte fillRed;
    private byte fillGreen;
    private byte fillBlue;
    private byte fillGray;
    private Rectangle region;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color FillColorRGB { get; public set; }
    public byte FillColorGray { get; public set; }
    public Rectangle Region { get; public set; }
    public CanvasFill(Rectangle region);
    public CanvasFill(Rectangle region, Color fillColorRGB);
    public CanvasFill(Rectangle region, byte fillColorGray);
    public CanvasFill(Rectangle region, Color fillColorRGB, byte fillColorGray);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_FillColorRGB();
    public void set_FillColorRGB(Color value);
    public byte get_FillColorGray();
    public void set_FillColorGray(byte value);
    public Rectangle get_Region();
    public void set_Region(Rectangle value);
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.CanvasMove : BaseInPlaceFilter {
    private byte fillRed;
    private byte fillGreen;
    private byte fillBlue;
    private byte fillAlpha;
    private byte fillGray;
    private IntPoint movePoint;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color FillColorRGB { get; public set; }
    public byte FillColorGray { get; public set; }
    public IntPoint MovePoint { get; public set; }
    public CanvasMove(IntPoint movePoint);
    public CanvasMove(IntPoint movePoint, Color fillColorRGB);
    public CanvasMove(IntPoint movePoint, byte fillColorGray);
    public CanvasMove(IntPoint movePoint, Color fillColorRGB, byte fillColorGray);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_FillColorRGB();
    public void set_FillColorRGB(Color value);
    public byte get_FillColorGray();
    public void set_FillColorGray(byte value);
    public IntPoint get_MovePoint();
    public void set_MovePoint(IntPoint value);
    protected virtual void ProcessFilter(UnmanagedImage image);
    private void ProcessFilter8bpc(UnmanagedImage image);
    private void ProcessFilter16bpc(UnmanagedImage image);
}
public class AForge.Imaging.Filters.ChannelFiltering : BaseInPlacePartialFilter {
    private IntRange red;
    private IntRange green;
    private IntRange blue;
    private byte fillR;
    private byte fillG;
    private byte fillB;
    private bool redFillOutsideRange;
    private bool greenFillOutsideRange;
    private bool blueFillOutsideRange;
    private Byte[] mapRed;
    private Byte[] mapGreen;
    private Byte[] mapBlue;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IntRange Red { get; public set; }
    public byte FillRed { get; public set; }
    public IntRange Green { get; public set; }
    public byte FillGreen { get; public set; }
    public IntRange Blue { get; public set; }
    public byte FillBlue { get; public set; }
    public bool RedFillOutsideRange { get; public set; }
    public bool GreenFillOutsideRange { get; public set; }
    public bool BlueFillOutsideRange { get; public set; }
    public ChannelFiltering(IntRange red, IntRange green, IntRange blue);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IntRange get_Red();
    public void set_Red(IntRange value);
    public byte get_FillRed();
    public void set_FillRed(byte value);
    public IntRange get_Green();
    public void set_Green(IntRange value);
    public byte get_FillGreen();
    public void set_FillGreen(byte value);
    public IntRange get_Blue();
    public void set_Blue(IntRange value);
    public byte get_FillBlue();
    public void set_FillBlue(byte value);
    public bool get_RedFillOutsideRange();
    public void set_RedFillOutsideRange(bool value);
    public bool get_GreenFillOutsideRange();
    public void set_GreenFillOutsideRange(bool value);
    public bool get_BlueFillOutsideRange();
    public void set_BlueFillOutsideRange(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void CalculateMap(IntRange range, byte fill, bool fillOutsideRange, Byte[] map);
}
public class AForge.Imaging.Filters.Closing : object {
    private Erosion errosion;
    private Dilatation dilatation;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Closing(Int16[0...,0...] se);
    public sealed virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    public sealed virtual void ApplyInPlace(Bitmap image);
    public sealed virtual void ApplyInPlace(BitmapData imageData);
    public sealed virtual void ApplyInPlace(UnmanagedImage image);
    public sealed virtual void ApplyInPlace(Bitmap image, Rectangle rect);
    public sealed virtual void ApplyInPlace(BitmapData imageData, Rectangle rect);
    public sealed virtual void ApplyInPlace(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ColorFiltering : BaseInPlacePartialFilter {
    private IntRange red;
    private IntRange green;
    private IntRange blue;
    private byte fillR;
    private byte fillG;
    private byte fillB;
    private bool fillOutsideRange;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IntRange Red { get; public set; }
    public IntRange Green { get; public set; }
    public IntRange Blue { get; public set; }
    public RGB FillColor { get; public set; }
    public bool FillOutsideRange { get; public set; }
    public ColorFiltering(IntRange red, IntRange green, IntRange blue);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IntRange get_Red();
    public void set_Red(IntRange value);
    public IntRange get_Green();
    public void set_Green(IntRange value);
    public IntRange get_Blue();
    public void set_Blue(IntRange value);
    public RGB get_FillColor();
    public void set_FillColor(RGB value);
    public bool get_FillOutsideRange();
    public void set_FillOutsideRange(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ColorRemapping : BaseInPlacePartialFilter {
    private Byte[] redMap;
    private Byte[] greenMap;
    private Byte[] blueMap;
    private Byte[] grayMap;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Byte[] RedMap { get; public set; }
    public Byte[] GreenMap { get; public set; }
    public Byte[] BlueMap { get; public set; }
    public Byte[] GrayMap { get; public set; }
    public ColorRemapping(Byte[] redMap, Byte[] greenMap, Byte[] blueMap);
    public ColorRemapping(Byte[] grayMap);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Byte[] get_RedMap();
    public void set_RedMap(Byte[] value);
    public Byte[] get_GreenMap();
    public void set_GreenMap(Byte[] value);
    public Byte[] get_BlueMap();
    public void set_BlueMap(Byte[] value);
    public Byte[] get_GrayMap();
    public void set_GrayMap(Byte[] value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ConnectedComponentsLabeling : BaseFilter {
    private static Color[] colorTable;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private BlobCounterBase blobCounter;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public BlobCounterBase BlobCounter { get; public set; }
    public static Color[] ColorTable { get; public set; }
    public bool FilterBlobs { get; public set; }
    public bool CoupledSizeFiltering { get; public set; }
    public int MinWidth { get; public set; }
    public int MinHeight { get; public set; }
    public int MaxWidth { get; public set; }
    public int MaxHeight { get; public set; }
    public int ObjectCount { get; }
    private static ConnectedComponentsLabeling();
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public BlobCounterBase get_BlobCounter();
    public void set_BlobCounter(BlobCounterBase value);
    public static Color[] get_ColorTable();
    public static void set_ColorTable(Color[] value);
    public bool get_FilterBlobs();
    public void set_FilterBlobs(bool value);
    public bool get_CoupledSizeFiltering();
    public void set_CoupledSizeFiltering(bool value);
    public int get_MinWidth();
    public void set_MinWidth(int value);
    public int get_MinHeight();
    public void set_MinHeight(int value);
    public int get_MaxWidth();
    public void set_MaxWidth(int value);
    public int get_MaxHeight();
    public void set_MaxHeight(int value);
    public int get_ObjectCount();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.ConservativeSmoothing : BaseUsingCopyPartialFilter {
    private int size;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int KernelSize { get; public set; }
    public ConservativeSmoothing(int size);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_KernelSize();
    public void set_KernelSize(int value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.ContrastCorrection : BaseInPlacePartialFilter {
    private LevelsLinear baseFilter;
    private int factor;
    public int Factor { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ContrastCorrection(int factor);
    public int get_Factor();
    public void set_Factor(int value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ContrastStretch : BaseInPlacePartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.Convolution : BaseUsingCopyPartialFilter {
    private Int32[0...,0...] kernel;
    private int divisor;
    private int threshold;
    private int size;
    private bool dynamicDivisorForEdges;
    private bool processAlpha;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Int32[0...,0...] Kernel { get; public set; }
    public int Divisor { get; public set; }
    public int Threshold { get; public set; }
    public bool DynamicDivisorForEdges { get; public set; }
    public bool ProcessAlpha { get; public set; }
    public Convolution(Int32[0...,0...] kernel);
    public Convolution(Int32[0...,0...] kernel, int divisor);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Int32[0...,0...] get_Kernel();
    public void set_Kernel(Int32[0...,0...] value);
    public int get_Divisor();
    public void set_Divisor(int value);
    public int get_Threshold();
    public void set_Threshold(int value);
    public bool get_DynamicDivisorForEdges();
    public void set_DynamicDivisorForEdges(bool value);
    public bool get_ProcessAlpha();
    public void set_ProcessAlpha(bool value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
    private void Process8bppImage(Byte* src, Byte* dst, int srcStride, int dstStride, int srcOffset, int dstOffset, int startX, int startY, int stopX, int stopY);
    private void Process24bppImage(Byte* src, Byte* dst, int srcStride, int dstStride, int srcOffset, int dstOffset, int startX, int startY, int stopX, int stopY, int pixelSize);
    private void Process32bppImage(Byte* src, Byte* dst, int srcStride, int dstStride, int srcOffset, int dstOffset, int startX, int startY, int stopX, int stopY);
    private void Process16bppImage(UInt16* baseSrc, UInt16* baseDst, int srcStride, int dstStride, int startX, int startY, int stopX, int stopY);
    private void Process48bppImage(UInt16* baseSrc, UInt16* baseDst, int srcStride, int dstStride, int startX, int startY, int stopX, int stopY, int pixelSize);
    private void Process64bppImage(UInt16* baseSrc, UInt16* baseDst, int srcStride, int dstStride, int startX, int startY, int stopX, int stopY);
}
public class AForge.Imaging.Filters.CornersMarker : BaseInPlaceFilter {
    private Color markerColor;
    private ICornersDetector detector;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color MarkerColor { get; public set; }
    public ICornersDetector Detector { get; public set; }
    public CornersMarker(ICornersDetector detector);
    public CornersMarker(ICornersDetector detector, Color markerColor);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public ICornersDetector get_Detector();
    public void set_Detector(ICornersDetector value);
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.Crop : BaseTransformationFilter {
    private Rectangle rect;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Rectangle Rectangle { get; public set; }
    public Crop(Rectangle rect);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Rectangle get_Rectangle();
    public void set_Rectangle(Rectangle value);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.Difference : BaseInPlaceFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Difference(Bitmap overlayImage);
    public Difference(UnmanagedImage unmanagedOverlayImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.DifferenceEdgeDetector : BaseUsingCopyPartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.Dilatation : BaseUsingCopyPartialFilter {
    private Int16[0...,0...] se;
    private int size;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Dilatation(Int16[0...,0...] se);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public class AForge.Imaging.Filters.Dilatation3x3 : BaseUsingCopyPartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public class AForge.Imaging.Filters.Edges : Convolution {
}
public class AForge.Imaging.Filters.Erosion : BaseUsingCopyPartialFilter {
    private Int16[0...,0...] se;
    private int size;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Erosion(Int16[0...,0...] se);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public class AForge.Imaging.Filters.Erosion3x3 : BaseUsingCopyPartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public abstract class AForge.Imaging.Filters.ErrorDiffusionDithering : BaseInPlacePartialFilter {
    private byte threshold;
    protected int x;
    protected int y;
    protected int startX;
    protected int startY;
    protected int stopX;
    protected int stopY;
    protected int stride;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public byte ThresholdValue { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public byte get_ThresholdValue();
    public void set_ThresholdValue(byte value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected abstract virtual void Diffuse(int error, Byte* ptr);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ErrorDiffusionToAdjacentNeighbors : ErrorDiffusionDithering {
    private Int32[][] coefficients;
    private int coefficientsSum;
    public Int32[][] Coefficients { get; public set; }
    public ErrorDiffusionToAdjacentNeighbors(Int32[][] coefficients);
    public Int32[][] get_Coefficients();
    public void set_Coefficients(Int32[][] value);
    protected virtual void Diffuse(int error, Byte* ptr);
    private void CalculateCoefficientsSum();
}
public class AForge.Imaging.Filters.EuclideanColorFiltering : BaseInPlacePartialFilter {
    private short radius;
    private RGB center;
    private RGB fill;
    private bool fillOutside;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public short Radius { get; public set; }
    public RGB CenterColor { get; public set; }
    public RGB FillColor { get; public set; }
    public bool FillOutside { get; public set; }
    public EuclideanColorFiltering(RGB center, short radius);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public short get_Radius();
    public void set_Radius(short value);
    public RGB get_CenterColor();
    public void set_CenterColor(RGB value);
    public RGB get_FillColor();
    public void set_FillColor(RGB value);
    public bool get_FillOutside();
    public void set_FillOutside(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ExtractBiggestBlob : object {
    private Bitmap originalImage;
    private IntPoint blobPosition;
    public IntPoint BlobPosition { get; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Bitmap OriginalImage { get; public set; }
    public IntPoint get_BlobPosition();
    public sealed virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Bitmap get_OriginalImage();
    public void set_OriginalImage(Bitmap value);
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
}
public class AForge.Imaging.Filters.ExtractChannel : BaseFilter {
    private short channel;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public short Channel { get; public set; }
    public ExtractChannel(short channel);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public short get_Channel();
    public void set_Channel(short value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.ExtractNormalizedRGBChannel : BaseFilter {
    private short channel;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public short Channel { get; public set; }
    public ExtractNormalizedRGBChannel(short channel);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public short get_Channel();
    public void set_Channel(short value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.FillHoles : BaseInPlaceFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private bool coupledSizeFiltering;
    private int maxHoleWidth;
    private int maxHoleHeight;
    public bool CoupledSizeFiltering { get; public set; }
    public int MaxHoleWidth { get; public set; }
    public int MaxHoleHeight { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool get_CoupledSizeFiltering();
    public void set_CoupledSizeFiltering(bool value);
    public int get_MaxHoleWidth();
    public void set_MaxHoleWidth(int value);
    public int get_MaxHoleHeight();
    public void set_MaxHoleHeight(int value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.FilterIterator : object {
    private IFilter baseFilter;
    private int iterations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IFilter BaseFilter { get; public set; }
    public int Iterations { get; public set; }
    public FilterIterator(IFilter baseFilter);
    public FilterIterator(IFilter baseFilter, int iterations);
    public sealed virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IFilter get_BaseFilter();
    public void set_BaseFilter(IFilter value);
    public int get_Iterations();
    public void set_Iterations(int value);
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
}
[DefaultMemberAttribute("Item")]
public class AForge.Imaging.Filters.FiltersSequence : CollectionBase {
    public IFilter Item { get; }
    public FiltersSequence(IFilter[] filters);
    public IFilter get_Item(int index);
    public void Add(IFilter filter);
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
}
public class AForge.Imaging.Filters.FlatFieldCorrection : BaseInPlaceFilter {
    private Bitmap backgroundImage;
    private UnmanagedImage unmanagedBackgroundImage;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Bitmap BackgoundImage { get; public set; }
    public UnmanagedImage UnmanagedBackgoundImage { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public FlatFieldCorrection(Bitmap backgroundImage);
    public Bitmap get_BackgoundImage();
    public void set_BackgoundImage(Bitmap value);
    public UnmanagedImage get_UnmanagedBackgoundImage();
    public void set_UnmanagedBackgoundImage(UnmanagedImage value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.FloydSteinbergDithering : ErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.Filters.GammaCorrection : BaseInPlacePartialFilter {
    private double gamma;
    private Byte[] table;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double Gamma { get; public set; }
    public GammaCorrection(double gamma);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public double get_Gamma();
    public void set_Gamma(double value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.GaussianBlur : Convolution {
    private double sigma;
    private int size;
    public double Sigma { get; public set; }
    public int Size { get; public set; }
    public GaussianBlur(double sigma);
    public GaussianBlur(double sigma, int size);
    public double get_Sigma();
    public void set_Sigma(double value);
    public int get_Size();
    public void set_Size(int value);
    private void CreateFilter();
}
public class AForge.Imaging.Filters.GaussianSharpen : Convolution {
    private double sigma;
    private int size;
    public double Sigma { get; public set; }
    public int Size { get; public set; }
    public GaussianSharpen(double sigma);
    public GaussianSharpen(double sigma, int size);
    public double get_Sigma();
    public void set_Sigma(double value);
    public int get_Size();
    public void set_Size(int value);
    private void CreateFilter();
}
public class AForge.Imaging.Filters.Grayscale : BaseFilter {
    public double RedCoefficient;
    public double GreenCoefficient;
    public double BlueCoefficient;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Grayscale(double cr, double cg, double cb);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
[ObsoleteAttribute("Use Grayscale.CommonAlgorithms.BT709 object instead")]
public class AForge.Imaging.Filters.GrayscaleBT709 : Grayscale {
}
[ObsoleteAttribute("Use Grayscale.CommonAlgorithms.RMY object instead")]
public class AForge.Imaging.Filters.GrayscaleRMY : Grayscale {
}
public class AForge.Imaging.Filters.GrayscaleToRGB : BaseFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
[ObsoleteAttribute("Use Grayscale.CommonAlgorithms.Y object instead")]
public class AForge.Imaging.Filters.GrayscaleY : Grayscale {
}
public class AForge.Imaging.Filters.HistogramEqualization : BaseInPlacePartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private Byte[] Equalize(Int32[] histogram, long numPixel);
}
public class AForge.Imaging.Filters.HitAndMiss : BaseUsingCopyPartialFilter {
    private Int16[0...,0...] se;
    private int size;
    private Modes mode;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Modes Mode { get; public set; }
    public HitAndMiss(Int16[0...,0...] se);
    public HitAndMiss(Int16[0...,0...] se, Modes mode);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Modes get_Mode();
    public void set_Mode(Modes value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData, Rectangle rect);
}
public class AForge.Imaging.Filters.HomogenityEdgeDetector : BaseUsingCopyPartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.HorizontalRunLengthSmoothing : BaseInPlacePartialFilter {
    private int maxGapSize;
    private bool processGapsWithImageBorders;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public int MaxGapSize { get; public set; }
    public bool ProcessGapsWithImageBorders { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public HorizontalRunLengthSmoothing(int maxGapSize);
    public int get_MaxGapSize();
    public void set_MaxGapSize(int value);
    public bool get_ProcessGapsWithImageBorders();
    public void set_ProcessGapsWithImageBorders(bool value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.HSLFiltering : BaseInPlacePartialFilter {
    private IntRange hue;
    private Range saturation;
    private Range luminance;
    private int fillH;
    private float fillS;
    private float fillL;
    private bool fillOutsideRange;
    private bool updateH;
    private bool updateS;
    private bool updateL;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IntRange Hue { get; public set; }
    public Range Saturation { get; public set; }
    public Range Luminance { get; public set; }
    public HSL FillColor { get; public set; }
    public bool FillOutsideRange { get; public set; }
    public bool UpdateHue { get; public set; }
    public bool UpdateSaturation { get; public set; }
    public bool UpdateLuminance { get; public set; }
    public HSLFiltering(IntRange hue, Range saturation, Range luminance);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IntRange get_Hue();
    public void set_Hue(IntRange value);
    public Range get_Saturation();
    public void set_Saturation(Range value);
    public Range get_Luminance();
    public void set_Luminance(Range value);
    public HSL get_FillColor();
    public void set_FillColor(HSL value);
    public bool get_FillOutsideRange();
    public void set_FillOutsideRange(bool value);
    public bool get_UpdateHue();
    public void set_UpdateHue(bool value);
    public bool get_UpdateSaturation();
    public void set_UpdateSaturation(bool value);
    public bool get_UpdateLuminance();
    public void set_UpdateLuminance(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.HSLLinear : BaseInPlacePartialFilter {
    private Range inLuminance;
    private Range inSaturation;
    private Range outLuminance;
    private Range outSaturation;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Range InLuminance { get; public set; }
    public Range OutLuminance { get; public set; }
    public Range InSaturation { get; public set; }
    public Range OutSaturation { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Range get_InLuminance();
    public void set_InLuminance(Range value);
    public Range get_OutLuminance();
    public void set_OutLuminance(Range value);
    public Range get_InSaturation();
    public void set_InSaturation(Range value);
    public Range get_OutSaturation();
    public void set_OutSaturation(Range value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.HueModifier : BaseInPlacePartialFilter {
    private int hue;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int Hue { get; public set; }
    public HueModifier(int hue);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_Hue();
    public void set_Hue(int value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public interface AForge.Imaging.Filters.IFilter {
    public abstract virtual Bitmap Apply(Bitmap image);
    public abstract virtual Bitmap Apply(BitmapData imageData);
    public abstract virtual UnmanagedImage Apply(UnmanagedImage image);
    public abstract virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
}
public interface AForge.Imaging.Filters.IFilterInformation {
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public abstract virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
}
public interface AForge.Imaging.Filters.IInPlaceFilter {
    public abstract virtual void ApplyInPlace(Bitmap image);
    public abstract virtual void ApplyInPlace(BitmapData imageData);
    public abstract virtual void ApplyInPlace(UnmanagedImage image);
}
public interface AForge.Imaging.Filters.IInPlacePartialFilter {
    public abstract virtual void ApplyInPlace(Bitmap image, Rectangle rect);
    public abstract virtual void ApplyInPlace(BitmapData imageData, Rectangle rect);
    public abstract virtual void ApplyInPlace(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ImageWarp : BaseFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private IntPoint[0...,0...] warpMap;
    public IntPoint[0...,0...] WarpMap { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ImageWarp(IntPoint[0...,0...] warpMap);
    public IntPoint[0...,0...] get_WarpMap();
    public void set_WarpMap(IntPoint[0...,0...] value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination);
}
public class AForge.Imaging.Filters.Intersect : BaseInPlaceFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Intersect(Bitmap overlayImage);
    public Intersect(UnmanagedImage unmanagedOverlayImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.Invert : BaseInPlacePartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.IterativeThreshold : Threshold {
    private int minError;
    public int MinimumError { get; public set; }
    public IterativeThreshold(int minError);
    public IterativeThreshold(int minError, int threshold);
    public int get_MinimumError();
    public void set_MinimumError(int value);
    public int CalculateThreshold(Bitmap image, Rectangle rect);
    public int CalculateThreshold(BitmapData image, Rectangle rect);
    public int CalculateThreshold(UnmanagedImage image, Rectangle rect);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.JarvisJudiceNinkeDithering : ErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.Filters.Jitter : BaseUsingCopyPartialFilter {
    private int radius;
    private Random rand;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int Radius { get; public set; }
    public Jitter(int radius);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_Radius();
    public void set_Radius(int value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.LevelsLinear : BaseInPlacePartialFilter {
    private IntRange inRed;
    private IntRange inGreen;
    private IntRange inBlue;
    private IntRange outRed;
    private IntRange outGreen;
    private IntRange outBlue;
    private Byte[] mapRed;
    private Byte[] mapGreen;
    private Byte[] mapBlue;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IntRange InRed { get; public set; }
    public IntRange InGreen { get; public set; }
    public IntRange InBlue { get; public set; }
    public IntRange InGray { get; public set; }
    unknown IntRange Input {public set; }
    public IntRange OutRed { get; public set; }
    public IntRange OutGreen { get; public set; }
    public IntRange OutBlue { get; public set; }
    public IntRange OutGray { get; public set; }
    unknown IntRange Output {public set; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IntRange get_InRed();
    public void set_InRed(IntRange value);
    public IntRange get_InGreen();
    public void set_InGreen(IntRange value);
    public IntRange get_InBlue();
    public void set_InBlue(IntRange value);
    public IntRange get_InGray();
    public void set_InGray(IntRange value);
    public void set_Input(IntRange value);
    public IntRange get_OutRed();
    public void set_OutRed(IntRange value);
    public IntRange get_OutGreen();
    public void set_OutGreen(IntRange value);
    public IntRange get_OutBlue();
    public void set_OutBlue(IntRange value);
    public IntRange get_OutGray();
    public void set_OutGray(IntRange value);
    public void set_Output(IntRange value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void CalculateMap(IntRange inRange, IntRange outRange, Byte[] map);
}
public class AForge.Imaging.Filters.LevelsLinear16bpp : BaseInPlacePartialFilter {
    private IntRange inRed;
    private IntRange inGreen;
    private IntRange inBlue;
    private IntRange outRed;
    private IntRange outGreen;
    private IntRange outBlue;
    private UInt16[] mapRed;
    private UInt16[] mapGreen;
    private UInt16[] mapBlue;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public IntRange InRed { get; public set; }
    public IntRange InGreen { get; public set; }
    public IntRange InBlue { get; public set; }
    public IntRange InGray { get; public set; }
    unknown IntRange Input {public set; }
    public IntRange OutRed { get; public set; }
    public IntRange OutGreen { get; public set; }
    public IntRange OutBlue { get; public set; }
    public IntRange OutGray { get; public set; }
    unknown IntRange Output {public set; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public IntRange get_InRed();
    public void set_InRed(IntRange value);
    public IntRange get_InGreen();
    public void set_InGreen(IntRange value);
    public IntRange get_InBlue();
    public void set_InBlue(IntRange value);
    public IntRange get_InGray();
    public void set_InGray(IntRange value);
    public void set_Input(IntRange value);
    public IntRange get_OutRed();
    public void set_OutRed(IntRange value);
    public IntRange get_OutGreen();
    public void set_OutGreen(IntRange value);
    public IntRange get_OutBlue();
    public void set_OutBlue(IntRange value);
    public IntRange get_OutGray();
    public void set_OutGray(IntRange value);
    public void set_Output(IntRange value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void CalculateMap(IntRange inRange, IntRange outRange, UInt16[] map);
}
public class AForge.Imaging.Filters.MaskedFilter : BaseInPlacePartialFilter {
    private IFilter baseFilter;
    private Bitmap maskImage;
    private UnmanagedImage unmanagedMaskImage;
    private Byte[0...,0...] mask;
    public IFilter BaseFilter { get; private set; }
    public Bitmap MaskImage { get; public set; }
    public UnmanagedImage UnmanagedMaskImage { get; public set; }
    public Byte[0...,0...] Mask { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public MaskedFilter(IFilter baseFiler, Bitmap maskImage);
    public MaskedFilter(IFilter baseFiler, UnmanagedImage unmanagedMaskImage);
    public MaskedFilter(IFilter baseFiler, Byte[0...,0...] mask);
    public IFilter get_BaseFilter();
    private void set_BaseFilter(IFilter value);
    public Bitmap get_MaskImage();
    public void set_MaskImage(Bitmap value);
    public UnmanagedImage get_UnmanagedMaskImage();
    public void set_UnmanagedMaskImage(UnmanagedImage value);
    public Byte[0...,0...] get_Mask();
    public void set_Mask(Byte[0...,0...] value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void ProcessImage(UnmanagedImage image, Rectangle rect, Byte* mask, int maskLineSize);
}
public class AForge.Imaging.Filters.Mean : Convolution {
}
public class AForge.Imaging.Filters.Median : BaseUsingCopyPartialFilter {
    private int size;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int Size { get; public set; }
    public Median(int size);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_Size();
    public void set_Size(int value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.Merge : BaseInPlaceFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Merge(Bitmap overlayImage);
    public Merge(UnmanagedImage unmanagedOverlayImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.Mirror : BaseInPlacePartialFilter {
    private bool mirrorX;
    private bool mirrorY;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool MirrorX { get; public set; }
    public bool MirrorY { get; public set; }
    public Mirror(bool mirrorX, bool mirrorY);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_MirrorX();
    public void set_MirrorX(bool value);
    public bool get_MirrorY();
    public void set_MirrorY(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.Morph : BaseInPlaceFilter2 {
    private double sourcePercent;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double SourcePercent { get; public set; }
    public Morph(Bitmap overlayImage);
    public Morph(UnmanagedImage unmanagedOverlayImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public double get_SourcePercent();
    public void set_SourcePercent(double value);
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.MoveTowards : BaseInPlaceFilter2 {
    private int stepSize;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int StepSize { get; public set; }
    public MoveTowards(Bitmap overlayImage);
    public MoveTowards(Bitmap overlayImage, int stepSize);
    public MoveTowards(UnmanagedImage unmanagedOverlayImage);
    public MoveTowards(UnmanagedImage unmanagedOverlayImage, int stepSize);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_StepSize();
    public void set_StepSize(int value);
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.OilPainting : BaseUsingCopyPartialFilter {
    private int brushSize;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int BrushSize { get; public set; }
    public OilPainting(int brushSize);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_BrushSize();
    public void set_BrushSize(int value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.Opening : object {
    private Erosion errosion;
    private Dilatation dilatation;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Opening(Int16[0...,0...] se);
    public sealed virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public sealed virtual Bitmap Apply(Bitmap image);
    public sealed virtual Bitmap Apply(BitmapData imageData);
    public sealed virtual UnmanagedImage Apply(UnmanagedImage image);
    public sealed virtual void Apply(UnmanagedImage sourceImage, UnmanagedImage destinationImage);
    public sealed virtual void ApplyInPlace(Bitmap image);
    public sealed virtual void ApplyInPlace(BitmapData imageData);
    public sealed virtual void ApplyInPlace(UnmanagedImage image);
    public sealed virtual void ApplyInPlace(Bitmap image, Rectangle rect);
    public sealed virtual void ApplyInPlace(BitmapData imageData, Rectangle rect);
    public sealed virtual void ApplyInPlace(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.OrderedDithering : BaseInPlacePartialFilter {
    private int rows;
    private int cols;
    private Byte[0...,0...] matrix;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public OrderedDithering(Byte[0...,0...] matrix);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.OtsuThreshold : BaseInPlacePartialFilter {
    private Threshold thresholdFilter;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int ThresholdValue { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_ThresholdValue();
    public int CalculateThreshold(Bitmap image, Rectangle rect);
    public int CalculateThreshold(BitmapData image, Rectangle rect);
    public int CalculateThreshold(UnmanagedImage image, Rectangle rect);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.Pixellate : BaseInPlacePartialFilter {
    private int pixelWidth;
    private int pixelHeight;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int PixelWidth { get; public set; }
    public int PixelHeight { get; public set; }
    unknown int PixelSize {public set; }
    public Pixellate(int pixelSize);
    public Pixellate(int pixelWidth, int pixelHeight);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_PixelWidth();
    public void set_PixelWidth(int value);
    public int get_PixelHeight();
    public void set_PixelHeight(int value);
    public void set_PixelSize(int value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.PointedColorFloodFill : BaseInPlacePartialFilter {
    private Boolean[0...,0...] checkedPixels;
    private Byte* scan0;
    private int stride;
    private int startX;
    private int stopX;
    private int startY;
    private int stopY;
    private byte minR;
    private byte maxR;
    private byte minG;
    private byte maxG;
    private byte minB;
    private byte maxB;
    private byte fillR;
    private byte fillG;
    private byte fillB;
    private IntPoint startingPoint;
    private Color tolerance;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color Tolerance { get; public set; }
    public Color FillColor { get; public set; }
    public IntPoint StartingPoint { get; public set; }
    public PointedColorFloodFill(Color fillColor);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_Tolerance();
    public void set_Tolerance(Color value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public IntPoint get_StartingPoint();
    public void set_StartingPoint(IntPoint value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void LinearFloodFill4Gray(IntPoint startingPoint);
    private void LinearFloodFill4RGB(IntPoint startPoint);
    private bool CheckGrayPixel(byte pixel);
    private bool CheckRGBPixel(Byte* pixel);
    private Byte* CoordsToPointerGray(int x, int y);
    private Byte* CoordsToPointerRGB(int x, int y);
}
public class AForge.Imaging.Filters.PointedMeanFloodFill : BaseInPlacePartialFilter {
    private Boolean[0...,0...] checkedPixels;
    private Byte* scan0;
    private int stride;
    private int startX;
    private int stopX;
    private int startY;
    private int stopY;
    private byte minR;
    private byte maxR;
    private byte minG;
    private byte maxG;
    private byte minB;
    private byte maxB;
    private int meanR;
    private int meanG;
    private int meanB;
    private int pixelsCount;
    private IntPoint startingPoint;
    private Color tolerance;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color Tolerance { get; public set; }
    public IntPoint StartingPoint { get; public set; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_Tolerance();
    public void set_Tolerance(Color value);
    public IntPoint get_StartingPoint();
    public void set_StartingPoint(IntPoint value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
    private void LinearFloodFill4Gray(int x, int y);
    private void LinearFloodFill4RGB(int x, int y);
    private bool CheckGrayPixel(byte pixel);
    private bool CheckRGBPixel(Byte* pixel);
    private Byte* CoordsToPointerGray(int x, int y);
    private Byte* CoordsToPointerRGB(int x, int y);
}
public class AForge.Imaging.Filters.QuadrilateralTransformation : BaseTransformationFilter {
    private bool automaticSizeCalculaton;
    private bool useInterpolation;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    protected int newWidth;
    protected int newHeight;
    private List`1<IntPoint> sourceQuadrilateral;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool AutomaticSizeCalculaton { get; public set; }
    public List`1<IntPoint> SourceQuadrilateral { get; public set; }
    public int NewWidth { get; public set; }
    public int NewHeight { get; public set; }
    public bool UseInterpolation { get; public set; }
    public QuadrilateralTransformation(List`1<IntPoint> sourceQuadrilateral, int newWidth, int newHeight);
    public QuadrilateralTransformation(List`1<IntPoint> sourceQuadrilateral);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_AutomaticSizeCalculaton();
    public void set_AutomaticSizeCalculaton(bool value);
    public List`1<IntPoint> get_SourceQuadrilateral();
    public void set_SourceQuadrilateral(List`1<IntPoint> value);
    public int get_NewWidth();
    public void set_NewWidth(int value);
    public int get_NewHeight();
    public void set_NewHeight(int value);
    public bool get_UseInterpolation();
    public void set_UseInterpolation(bool value);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    private void CalculateDestinationSize();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
[ObsoleteAttribute("The class is deprecated and SimpleQuadrilateralTransformation should be used instead")]
public class AForge.Imaging.Filters.QuadrilateralTransformationBilinear : BaseTransformationFilter {
    private SimpleQuadrilateralTransformation baseFilter;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool AutomaticSizeCalculaton { get; public set; }
    public List`1<IntPoint> SourceCorners { get; public set; }
    public int NewWidth { get; public set; }
    public int NewHeight { get; public set; }
    public QuadrilateralTransformationBilinear(List`1<IntPoint> sourceCorners, int newWidth, int newHeight);
    public QuadrilateralTransformationBilinear(List`1<IntPoint> sourceCorners);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_AutomaticSizeCalculaton();
    public void set_AutomaticSizeCalculaton(bool value);
    public List`1<IntPoint> get_SourceCorners();
    public void set_SourceCorners(List`1<IntPoint> value);
    public int get_NewWidth();
    public void set_NewWidth(int value);
    public int get_NewHeight();
    public void set_NewHeight(int value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
}
[ObsoleteAttribute("The class is deprecated and SimpleQuadrilateralTransformation should be used instead")]
public class AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor : BaseTransformationFilter {
    private SimpleQuadrilateralTransformation baseFilter;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool AutomaticSizeCalculaton { get; public set; }
    public List`1<IntPoint> SourceCorners { get; public set; }
    public int NewWidth { get; public set; }
    public int NewHeight { get; public set; }
    public QuadrilateralTransformationNearestNeighbor(List`1<IntPoint> sourceCorners, int newWidth, int newHeight);
    public QuadrilateralTransformationNearestNeighbor(List`1<IntPoint> sourceCorners);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_AutomaticSizeCalculaton();
    public void set_AutomaticSizeCalculaton(bool value);
    public List`1<IntPoint> get_SourceCorners();
    public void set_SourceCorners(List`1<IntPoint> value);
    public int get_NewWidth();
    public void set_NewWidth(int value);
    public int get_NewHeight();
    public void set_NewHeight(int value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
}
internal static class AForge.Imaging.Filters.QuadTransformationCalcs : object {
    private static double TOLERANCE;
    private static double Det2(double a, double b, double c, double d);
    private static Double[0...,0...] MultiplyMatrix(Double[0...,0...] a, Double[0...,0...] b);
    private static Double[0...,0...] AdjugateMatrix(Double[0...,0...] a);
    private static Double[0...,0...] MapSquareToQuad(List`1<IntPoint> quad);
    public static Double[0...,0...] MapQuadToQuad(List`1<IntPoint> input, List`1<IntPoint> output);
}
public class AForge.Imaging.Filters.ReplaceChannel : BaseInPlacePartialFilter {
    private short channel;
    private Bitmap channelImage;
    private UnmanagedImage unmanagedChannelImage;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public short Channel { get; public set; }
    public Bitmap ChannelImage { get; public set; }
    public UnmanagedImage UnmanagedChannelImage { get; public set; }
    public ReplaceChannel(short channel, Bitmap channelImage);
    public ReplaceChannel(short channel, UnmanagedImage channelImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public short get_Channel();
    public void set_Channel(short value);
    public Bitmap get_ChannelImage();
    public void set_ChannelImage(Bitmap value);
    public UnmanagedImage get_UnmanagedChannelImage();
    public void set_UnmanagedChannelImage(UnmanagedImage value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ResizeBicubic : BaseResizeFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ResizeBicubic(int newWidth, int newHeight);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.ResizeBilinear : BaseResizeFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ResizeBilinear(int newWidth, int newHeight);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.ResizeNearestNeighbor : BaseResizeFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ResizeNearestNeighbor(int newWidth, int newHeight);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.RotateBicubic : BaseRotateFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public RotateBicubic(double angle);
    public RotateBicubic(double angle, bool keepSize);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.RotateBilinear : BaseRotateFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public RotateBilinear(double angle);
    public RotateBilinear(double angle, bool keepSize);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.RotateChannels : BaseInPlacePartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.RotateNearestNeighbor : BaseRotateFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public RotateNearestNeighbor(double angle);
    public RotateNearestNeighbor(double angle, bool keepSize);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
    private void ProcessFilter8bpc(UnmanagedImage sourceData, UnmanagedImage destinationData);
    private void ProcessFilter16bpc(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.SaltAndPepperNoise : BaseInPlacePartialFilter {
    private double noiseAmount;
    private Random rand;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double NoiseAmount { get; public set; }
    public SaltAndPepperNoise(double noiseAmount);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public double get_NoiseAmount();
    public void set_NoiseAmount(double value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.SaturationCorrection : BaseInPlacePartialFilter {
    private HSLLinear baseFilter;
    private float adjustValue;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public float AdjustValue { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public SaturationCorrection(float adjustValue);
    public float get_AdjustValue();
    public void set_AdjustValue(float value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.Sepia : BaseInPlacePartialFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.Sharpen : Convolution {
}
public class AForge.Imaging.Filters.Shrink : BaseTransformationFilter {
    private Color colorToRemove;
    private int minX;
    private int minY;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Color ColorToRemove { get; public set; }
    public Shrink(Color colorToRemove);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Color get_ColorToRemove();
    public void set_ColorToRemove(Color value);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.SierraDithering : ErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.Filters.SimplePosterization : BaseInPlacePartialFilter {
    private byte posterizationInterval;
    private PosterizationFillingType fillingType;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public byte PosterizationInterval { get; public set; }
    public PosterizationFillingType FillingType { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public SimplePosterization(PosterizationFillingType fillingType);
    public byte get_PosterizationInterval();
    public void set_PosterizationInterval(byte value);
    public PosterizationFillingType get_FillingType();
    public void set_FillingType(PosterizationFillingType value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.SimpleQuadrilateralTransformation : BaseTransformationFilter {
    private bool automaticSizeCalculaton;
    private bool useInterpolation;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    protected int newWidth;
    protected int newHeight;
    private List`1<IntPoint> sourceQuadrilateral;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool AutomaticSizeCalculaton { get; public set; }
    public List`1<IntPoint> SourceQuadrilateral { get; public set; }
    public int NewWidth { get; public set; }
    public int NewHeight { get; public set; }
    public bool UseInterpolation { get; public set; }
    public SimpleQuadrilateralTransformation(List`1<IntPoint> sourceQuadrilateral, int newWidth, int newHeight);
    public SimpleQuadrilateralTransformation(List`1<IntPoint> sourceQuadrilateral);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_AutomaticSizeCalculaton();
    public void set_AutomaticSizeCalculaton(bool value);
    public List`1<IntPoint> get_SourceQuadrilateral();
    public void set_SourceQuadrilateral(List`1<IntPoint> value);
    public int get_NewWidth();
    public void set_NewWidth(int value);
    public int get_NewHeight();
    public void set_NewHeight(int value);
    public bool get_UseInterpolation();
    public void set_UseInterpolation(bool value);
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    private void CalculateDestinationSize();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.SimpleSkeletonization : BaseUsingCopyPartialFilter {
    private byte bg;
    private byte fg;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public byte Background { get; public set; }
    public byte Foreground { get; public set; }
    public SimpleSkeletonization(byte bg, byte fg);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public byte get_Background();
    public void set_Background(byte value);
    public byte get_Foreground();
    public void set_Foreground(byte value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.SISThreshold : BaseInPlacePartialFilter {
    private Threshold thresholdFilter;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int ThresholdValue { get; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_ThresholdValue();
    public int CalculateThreshold(Bitmap image, Rectangle rect);
    public int CalculateThreshold(BitmapData image, Rectangle rect);
    public int CalculateThreshold(UnmanagedImage image, Rectangle rect);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.SobelEdgeDetector : BaseUsingCopyPartialFilter {
    private bool scaleIntensity;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public bool ScaleIntensity { get; public set; }
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public bool get_ScaleIntensity();
    public void set_ScaleIntensity(bool value);
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination, Rectangle rect);
}
public class AForge.Imaging.Filters.StereoAnaglyph : BaseInPlaceFilter2 {
    private Algorithm anaglyphAlgorithm;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Algorithm AnaglyphAlgorithm { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public StereoAnaglyph(Algorithm anaglyphAlgorithm);
    public Algorithm get_AnaglyphAlgorithm();
    public void set_AnaglyphAlgorithm(Algorithm value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.StuckiDithering : ErrorDiffusionToAdjacentNeighbors {
}
public class AForge.Imaging.Filters.Subtract : BaseInPlaceFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Subtract(Bitmap overlayImage);
    public Subtract(UnmanagedImage unmanagedOverlayImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    private void InitFormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.TexturedFilter : BaseFilter {
    private ITextureGenerator textureGenerator;
    private Single[0...,0...] texture;
    private IFilter filter1;
    private IFilter filter2;
    private double filterLevel;
    private double preserveLevel;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double FilterLevel { get; public set; }
    public double PreserveLevel { get; public set; }
    public Single[0...,0...] Texture { get; public set; }
    public ITextureGenerator TextureGenerator { get; public set; }
    public IFilter Filter1 { get; public set; }
    public IFilter Filter2 { get; public set; }
    public TexturedFilter(Single[0...,0...] texture, IFilter filter1);
    public TexturedFilter(Single[0...,0...] texture, IFilter filter1, IFilter filter2);
    public TexturedFilter(ITextureGenerator generator, IFilter filter1);
    public TexturedFilter(ITextureGenerator generator, IFilter filter1, IFilter filter2);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public double get_FilterLevel();
    public void set_FilterLevel(double value);
    public double get_PreserveLevel();
    public void set_PreserveLevel(double value);
    public Single[0...,0...] get_Texture();
    public void set_Texture(Single[0...,0...] value);
    public ITextureGenerator get_TextureGenerator();
    public void set_TextureGenerator(ITextureGenerator value);
    public IFilter get_Filter1();
    public void set_Filter1(IFilter value);
    public IFilter get_Filter2();
    public void set_Filter2(IFilter value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.TexturedMerge : BaseInPlaceFilter2 {
    private ITextureGenerator textureGenerator;
    private Single[0...,0...] texture;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Single[0...,0...] Texture { get; public set; }
    public ITextureGenerator TextureGenerator { get; public set; }
    public TexturedMerge(Single[0...,0...] texture);
    public TexturedMerge(ITextureGenerator generator);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Single[0...,0...] get_Texture();
    public void set_Texture(Single[0...,0...] value);
    public ITextureGenerator get_TextureGenerator();
    public void set_TextureGenerator(ITextureGenerator value);
    protected virtual void ProcessFilter(UnmanagedImage image, UnmanagedImage overlay);
}
public class AForge.Imaging.Filters.Texturer : BaseInPlacePartialFilter {
    private ITextureGenerator textureGenerator;
    private Single[0...,0...] texture;
    private double filterLevel;
    private double preserveLevel;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double FilterLevel { get; public set; }
    public double PreserveLevel { get; public set; }
    public Single[0...,0...] Texture { get; public set; }
    public ITextureGenerator TextureGenerator { get; public set; }
    public Texturer(Single[0...,0...] texture);
    public Texturer(Single[0...,0...] texture, double filterLevel, double preserveLevel);
    public Texturer(ITextureGenerator generator);
    public Texturer(ITextureGenerator generator, double filterLevel, double preserveLevel);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public double get_FilterLevel();
    public void set_FilterLevel(double value);
    public double get_PreserveLevel();
    public void set_PreserveLevel(double value);
    public Single[0...,0...] get_Texture();
    public void set_Texture(Single[0...,0...] value);
    public ITextureGenerator get_TextureGenerator();
    public void set_TextureGenerator(ITextureGenerator value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.Threshold : BaseInPlacePartialFilter {
    protected int threshold;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int ThresholdValue { get; public set; }
    public Threshold(int threshold);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public int get_ThresholdValue();
    public void set_ThresholdValue(int value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.ThresholdedDifference : BaseFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private int threshold;
    private int whitePixelsCount;
    public int Threshold { get; public set; }
    public int WhitePixelsCount { get; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ThresholdedDifference(int threshold);
    public int get_Threshold();
    public void set_Threshold(int value);
    public int get_WhitePixelsCount();
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage overlay, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.ThresholdedEuclideanDifference : BaseFilter2 {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private int threshold;
    private int whitePixelsCount;
    public int Threshold { get; public set; }
    public int WhitePixelsCount { get; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public ThresholdedEuclideanDifference(int threshold);
    public int get_Threshold();
    public void set_Threshold(int value);
    public int get_WhitePixelsCount();
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage overlay, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.ThresholdWithCarry : BaseInPlacePartialFilter {
    private byte threshold;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public byte ThresholdValue { get; public set; }
    public ThresholdWithCarry(byte threshold);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public byte get_ThresholdValue();
    public void set_ThresholdValue(byte value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.TopHat : BaseInPlaceFilter {
    private Opening opening;
    private Subtract subtract;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public TopHat(Int16[0...,0...] se);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image);
}
public class AForge.Imaging.Filters.TransformFromPolar : BaseTransformationFilter {
    private static double Pi2;
    private static double PiHalf;
    private double circleDepth;
    private double offsetAngle;
    private bool mapBackwards;
    private bool mapFromTop;
    private Size newSize;
    private bool useOriginalImageSize;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public double CirlceDepth { get; public set; }
    public double OffsetAngle { get; public set; }
    public bool MapBackwards { get; public set; }
    public bool MapFromTop { get; public set; }
    public Size NewSize { get; public set; }
    public bool UseOriginalImageSize { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double get_CirlceDepth();
    public void set_CirlceDepth(double value);
    public double get_OffsetAngle();
    public void set_OffsetAngle(double value);
    public bool get_MapBackwards();
    public void set_MapBackwards(bool value);
    public bool get_MapFromTop();
    public void set_MapFromTop(bool value);
    public Size get_NewSize();
    public void set_NewSize(Size value);
    public bool get_UseOriginalImageSize();
    public void set_UseOriginalImageSize(bool value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.TransformToPolar : BaseTransformationFilter {
    private static double Pi2;
    private static double PiHalf;
    private double circleDepth;
    private double offsetAngle;
    private bool mapBackwards;
    private bool mapFromTop;
    private Color fillColor;
    private Size newSize;
    private bool useOriginalImageSize;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public double CirlceDepth { get; public set; }
    public double OffsetAngle { get; public set; }
    public bool MapBackwards { get; public set; }
    public bool MapFromTop { get; public set; }
    public Color FillColor { get; public set; }
    public Size NewSize { get; public set; }
    public bool UseOriginalImageSize { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public double get_CirlceDepth();
    public void set_CirlceDepth(double value);
    public double get_OffsetAngle();
    public void set_OffsetAngle(double value);
    public bool get_MapBackwards();
    public void set_MapBackwards(bool value);
    public bool get_MapFromTop();
    public void set_MapFromTop(bool value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Size get_NewSize();
    public void set_NewSize(Size value);
    public bool get_UseOriginalImageSize();
    public void set_UseOriginalImageSize(bool value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual Size CalculateNewImageSize(UnmanagedImage sourceData);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.VerticalRunLengthSmoothing : BaseInPlacePartialFilter {
    private int maxGapSize;
    private bool processGapsWithImageBorders;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public int MaxGapSize { get; public set; }
    public bool ProcessGapsWithImageBorders { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public VerticalRunLengthSmoothing(int maxGapSize);
    public int get_MaxGapSize();
    public void set_MaxGapSize(int value);
    public bool get_ProcessGapsWithImageBorders();
    public void set_ProcessGapsWithImageBorders(bool value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.WaterWave : BaseFilter {
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    private int xWavesCount;
    private int yWavesCount;
    private int xWavesAmplitude;
    private int yWavesAmplitude;
    public int HorizontalWavesCount { get; public set; }
    public int VerticalWavesCount { get; public set; }
    public int HorizontalWavesAmplitude { get; public set; }
    public int VerticalWavesAmplitude { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public int get_HorizontalWavesCount();
    public void set_HorizontalWavesCount(int value);
    public int get_VerticalWavesCount();
    public void set_VerticalWavesCount(int value);
    public int get_HorizontalWavesAmplitude();
    public void set_HorizontalWavesAmplitude(int value);
    public int get_VerticalWavesAmplitude();
    public void set_VerticalWavesAmplitude(int value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage source, UnmanagedImage destination);
}
public class AForge.Imaging.Filters.YCbCrExtractChannel : BaseFilter {
    private short channel;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public short Channel { get; public set; }
    public YCbCrExtractChannel(short channel);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public short get_Channel();
    public void set_Channel(short value);
    protected virtual void ProcessFilter(UnmanagedImage sourceData, UnmanagedImage destinationData);
}
public class AForge.Imaging.Filters.YCbCrFiltering : BaseInPlacePartialFilter {
    private Range yRange;
    private Range cbRange;
    private Range crRange;
    private float fillY;
    private float fillCb;
    private float fillCr;
    private bool fillOutsideRange;
    private bool updateY;
    private bool updateCb;
    private bool updateCr;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Range Y { get; public set; }
    public Range Cb { get; public set; }
    public Range Cr { get; public set; }
    public YCbCr FillColor { get; public set; }
    public bool FillOutsideRange { get; public set; }
    public bool UpdateY { get; public set; }
    public bool UpdateCb { get; public set; }
    public bool UpdateCr { get; public set; }
    public YCbCrFiltering(Range yRange, Range cbRange, Range crRange);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public Range get_Y();
    public void set_Y(Range value);
    public Range get_Cb();
    public void set_Cb(Range value);
    public Range get_Cr();
    public void set_Cr(Range value);
    public YCbCr get_FillColor();
    public void set_FillColor(YCbCr value);
    public bool get_FillOutsideRange();
    public void set_FillOutsideRange(bool value);
    public bool get_UpdateY();
    public void set_UpdateY(bool value);
    public bool get_UpdateCb();
    public void set_UpdateCb(bool value);
    public bool get_UpdateCr();
    public void set_UpdateCr(bool value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.YCbCrLinear : BaseInPlacePartialFilter {
    private Range inY;
    private Range inCb;
    private Range inCr;
    private Range outY;
    private Range outCb;
    private Range outCr;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Range InY { get; public set; }
    public Range InCb { get; public set; }
    public Range InCr { get; public set; }
    public Range OutY { get; public set; }
    public Range OutCb { get; public set; }
    public Range OutCr { get; public set; }
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public Range get_InY();
    public void set_InY(Range value);
    public Range get_InCb();
    public void set_InCb(Range value);
    public Range get_InCr();
    public void set_InCr(Range value);
    public Range get_OutY();
    public void set_OutY(Range value);
    public Range get_OutCb();
    public void set_OutCb(Range value);
    public Range get_OutCr();
    public void set_OutCr(Range value);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.Filters.YCbCrReplaceChannel : BaseInPlacePartialFilter {
    private short channel;
    private Bitmap channelImage;
    private UnmanagedImage unmanagedChannelImage;
    private Dictionary`2<PixelFormat, PixelFormat> formatTranslations;
    public Dictionary`2<PixelFormat, PixelFormat> FormatTranslations { get; }
    public short Channel { get; public set; }
    public Bitmap ChannelImage { get; public set; }
    public UnmanagedImage UnmanagedChannelImage { get; public set; }
    public YCbCrReplaceChannel(short channel, Bitmap channelImage);
    public YCbCrReplaceChannel(short channel, UnmanagedImage channelImage);
    public virtual Dictionary`2<PixelFormat, PixelFormat> get_FormatTranslations();
    public short get_Channel();
    public void set_Channel(short value);
    public Bitmap get_ChannelImage();
    public void set_ChannelImage(Bitmap value);
    public UnmanagedImage get_UnmanagedChannelImage();
    public void set_UnmanagedChannelImage(UnmanagedImage value);
    protected virtual void ProcessFilter(UnmanagedImage image, Rectangle rect);
}
public class AForge.Imaging.HorizontalIntensityStatistics : object {
    private Histogram red;
    private Histogram green;
    private Histogram blue;
    private Histogram gray;
    public Histogram Red { get; }
    public Histogram Green { get; }
    public Histogram Blue { get; }
    public Histogram Gray { get; }
    public bool IsGrayscale { get; }
    public HorizontalIntensityStatistics(Bitmap image);
    public HorizontalIntensityStatistics(BitmapData imageData);
    public HorizontalIntensityStatistics(UnmanagedImage image);
    public Histogram get_Red();
    public Histogram get_Green();
    public Histogram get_Blue();
    public Histogram get_Gray();
    public bool get_IsGrayscale();
    private void ProcessImage(UnmanagedImage image);
}
public class AForge.Imaging.HoughCircle : object {
    public int X;
    public int Y;
    public int Radius;
    public short Intensity;
    public double RelativeIntensity;
    public HoughCircle(int x, int y, int radius, short intensity, double relativeIntensity);
    public sealed virtual int CompareTo(object value);
}
public class AForge.Imaging.HoughCircleTransformation : object {
    private int radiusToDetect;
    private Int16[0...,0...] houghMap;
    private short maxMapIntensity;
    private int width;
    private int height;
    private int localPeakRadius;
    private short minCircleIntensity;
    private ArrayList circles;
    public short MinCircleIntensity { get; public set; }
    public int LocalPeakRadius { get; public set; }
    public short MaxIntensity { get; }
    public int CirclesCount { get; }
    public HoughCircleTransformation(int radiusToDetect);
    public short get_MinCircleIntensity();
    public void set_MinCircleIntensity(short value);
    public int get_LocalPeakRadius();
    public void set_LocalPeakRadius(int value);
    public short get_MaxIntensity();
    public int get_CirclesCount();
    public void ProcessImage(Bitmap image);
    public void ProcessImage(BitmapData imageData);
    public void ProcessImage(UnmanagedImage image);
    public Bitmap ToBitmap();
    public HoughCircle[] GetMostIntensiveCircles(int count);
    public HoughCircle[] GetCirclesByRelativeIntensity(double minRelativeIntensity);
    private void CollectCircles();
    private void DrawHoughCircle(int xCenter, int yCenter);
    private void SetHoughCirclePoints(int cx, int cy, int x, int y);
    private void SetHoughPoint(int x, int y);
}
public class AForge.Imaging.HoughLine : object {
    public double Theta;
    public short Radius;
    public short Intensity;
    public double RelativeIntensity;
    public HoughLine(double theta, short radius, short intensity, double relativeIntensity);
    public sealed virtual int CompareTo(object value);
}
public class AForge.Imaging.HoughLineTransformation : object {
    private int stepsPerDegree;
    private int houghHeight;
    private double thetaStep;
    private Double[] sinMap;
    private Double[] cosMap;
    private Int16[0...,0...] houghMap;
    private short maxMapIntensity;
    private int localPeakRadius;
    private short minLineIntensity;
    private ArrayList lines;
    public int StepsPerDegree { get; public set; }
    public short MinLineIntensity { get; public set; }
    public int LocalPeakRadius { get; public set; }
    public short MaxIntensity { get; }
    public int LinesCount { get; }
    public int get_StepsPerDegree();
    public void set_StepsPerDegree(int value);
    public short get_MinLineIntensity();
    public void set_MinLineIntensity(short value);
    public int get_LocalPeakRadius();
    public void set_LocalPeakRadius(int value);
    public short get_MaxIntensity();
    public int get_LinesCount();
    public void ProcessImage(Bitmap image);
    public void ProcessImage(Bitmap image, Rectangle rect);
    public void ProcessImage(BitmapData imageData);
    public void ProcessImage(BitmapData imageData, Rectangle rect);
    public void ProcessImage(UnmanagedImage image);
    public void ProcessImage(UnmanagedImage image, Rectangle rect);
    public Bitmap ToBitmap();
    public HoughLine[] GetMostIntensiveLines(int count);
    public HoughLine[] GetLinesByRelativeIntensity(double minRelativeIntensity);
    private void CollectLines();
}
public class AForge.Imaging.HSL : object {
    public int Hue;
    public float Saturation;
    public float Luminance;
    public HSL(int hue, float saturation, float luminance);
    public static void FromRGB(RGB rgb, HSL hsl);
    public static HSL FromRGB(RGB rgb);
    public static void ToRGB(HSL hsl, RGB rgb);
    public RGB ToRGB();
    private static float Hue_2_RGB(float v1, float v2, float vH);
}
public interface AForge.Imaging.IBlobsFilter {
    public abstract virtual bool Check(Blob blob);
}
public interface AForge.Imaging.IBlockMatching {
    public abstract virtual List`1<BlockMatch> ProcessImage(Bitmap sourceImage, List`1<IntPoint> coordinates, Bitmap searchImage);
    public abstract virtual List`1<BlockMatch> ProcessImage(BitmapData sourceImageData, List`1<IntPoint> coordinates, BitmapData searchImageData);
    public abstract virtual List`1<BlockMatch> ProcessImage(UnmanagedImage sourceImage, List`1<IntPoint> coordinates, UnmanagedImage searchImage);
}
public interface AForge.Imaging.ICornersDetector {
    public abstract virtual List`1<IntPoint> ProcessImage(Bitmap image);
    public abstract virtual List`1<IntPoint> ProcessImage(BitmapData imageData);
    public abstract virtual List`1<IntPoint> ProcessImage(UnmanagedImage image);
}
public static class AForge.Imaging.Image : object {
    public static bool IsGrayscale(Bitmap image);
    public static Bitmap CreateGrayscaleImage(int width, int height);
    public static void SetGrayscalePalette(Bitmap image);
    public static Bitmap Clone(Bitmap source, PixelFormat format);
    public static Bitmap Clone(Bitmap source);
    public static Bitmap Clone(BitmapData sourceData);
    [ObsoleteAttribute("Use Clone(Bitmap, PixelFormat) method instead and specify desired pixel format")]
public static void FormatImage(Bitmap& image);
    public static Bitmap FromFile(string fileName);
    public static Bitmap Convert16bppTo8bpp(Bitmap bimap);
    public static Bitmap Convert8bppTo16bpp(Bitmap bimap);
}
public class AForge.Imaging.ImageStatistics : object {
    private Histogram red;
    private Histogram green;
    private Histogram blue;
    private Histogram gray;
    private Histogram redWithoutBlack;
    private Histogram greenWithoutBlack;
    private Histogram blueWithoutBlack;
    private Histogram grayWithoutBlack;
    private int pixels;
    private int pixelsWithoutBlack;
    public Histogram Red { get; }
    public Histogram Green { get; }
    public Histogram Blue { get; }
    public Histogram Gray { get; }
    public Histogram RedWithoutBlack { get; }
    public Histogram GreenWithoutBlack { get; }
    public Histogram BlueWithoutBlack { get; }
    public Histogram GrayWithoutBlack { get; }
    public int PixelsCount { get; }
    public int PixelsCountWithoutBlack { get; }
    public bool IsGrayscale { get; }
    public ImageStatistics(Bitmap image);
    public ImageStatistics(Bitmap image, Bitmap mask);
    public ImageStatistics(Bitmap image, Byte[0...,0...] mask);
    public ImageStatistics(UnmanagedImage image);
    public ImageStatistics(UnmanagedImage image, UnmanagedImage mask);
    public ImageStatistics(UnmanagedImage image, Byte[0...,0...] mask);
    public Histogram get_Red();
    public Histogram get_Green();
    public Histogram get_Blue();
    public Histogram get_Gray();
    public Histogram get_RedWithoutBlack();
    public Histogram get_GreenWithoutBlack();
    public Histogram get_BlueWithoutBlack();
    public Histogram get_GrayWithoutBlack();
    public int get_PixelsCount();
    public int get_PixelsCountWithoutBlack();
    public bool get_IsGrayscale();
    private void ProcessImage(UnmanagedImage image, Byte* mask, int maskLineSize);
    private void CheckSourceFormat(PixelFormat pixelFormat);
    private void CheckMaskProperties(PixelFormat maskFormat, Size maskSize, Size sourceImageSize);
}
public class AForge.Imaging.ImageStatisticsHSL : object {
    private ContinuousHistogram luminance;
    private ContinuousHistogram saturation;
    private ContinuousHistogram luminanceWithoutBlack;
    private ContinuousHistogram saturationWithoutBlack;
    private int pixels;
    private int pixelsWithoutBlack;
    public ContinuousHistogram Saturation { get; }
    public ContinuousHistogram Luminance { get; }
    public ContinuousHistogram SaturationWithoutBlack { get; }
    public ContinuousHistogram LuminanceWithoutBlack { get; }
    public int PixelsCount { get; }
    public int PixelsCountWithoutBlack { get; }
    public ImageStatisticsHSL(Bitmap image);
    public ImageStatisticsHSL(Bitmap image, Bitmap mask);
    public ImageStatisticsHSL(Bitmap image, Byte[0...,0...] mask);
    public ImageStatisticsHSL(UnmanagedImage image);
    public ImageStatisticsHSL(UnmanagedImage image, UnmanagedImage mask);
    public ImageStatisticsHSL(UnmanagedImage image, Byte[0...,0...] mask);
    public ContinuousHistogram get_Saturation();
    public ContinuousHistogram get_Luminance();
    public ContinuousHistogram get_SaturationWithoutBlack();
    public ContinuousHistogram get_LuminanceWithoutBlack();
    public int get_PixelsCount();
    public int get_PixelsCountWithoutBlack();
    private void ProcessImage(UnmanagedImage image, Byte* mask, int maskLineSize);
    private void CheckSourceFormat(PixelFormat pixelFormat);
    private void CheckMaskProperties(PixelFormat maskFormat, Size maskSize, Size sourceImageSize);
}
public class AForge.Imaging.ImageStatisticsYCbCr : object {
    private ContinuousHistogram yHistogram;
    private ContinuousHistogram cbHistogram;
    private ContinuousHistogram crHistogram;
    private ContinuousHistogram yHistogramWithoutBlack;
    private ContinuousHistogram cbHistogramWithoutBlack;
    private ContinuousHistogram crHistogramWithoutBlack;
    private int pixels;
    private int pixelsWithoutBlack;
    public ContinuousHistogram Y { get; }
    public ContinuousHistogram Cb { get; }
    public ContinuousHistogram Cr { get; }
    public ContinuousHistogram YWithoutBlack { get; }
    public ContinuousHistogram CbWithoutBlack { get; }
    public ContinuousHistogram CrWithoutBlack { get; }
    public int PixelsCount { get; }
    public int PixelsCountWithoutBlack { get; }
    public ImageStatisticsYCbCr(Bitmap image);
    public ImageStatisticsYCbCr(Bitmap image, Bitmap mask);
    public ImageStatisticsYCbCr(Bitmap image, Byte[0...,0...] mask);
    public ImageStatisticsYCbCr(UnmanagedImage image);
    public ImageStatisticsYCbCr(UnmanagedImage image, UnmanagedImage mask);
    public ImageStatisticsYCbCr(UnmanagedImage image, Byte[0...,0...] mask);
    public ContinuousHistogram get_Y();
    public ContinuousHistogram get_Cb();
    public ContinuousHistogram get_Cr();
    public ContinuousHistogram get_YWithoutBlack();
    public ContinuousHistogram get_CbWithoutBlack();
    public ContinuousHistogram get_CrWithoutBlack();
    public int get_PixelsCount();
    public int get_PixelsCountWithoutBlack();
    private void ProcessImage(UnmanagedImage image, Byte* mask, int maskLineSize);
    private void CheckSourceFormat(PixelFormat pixelFormat);
    private void CheckMaskProperties(PixelFormat maskFormat, Size maskSize, Size sourceImageSize);
}
public class AForge.Imaging.IntegralImage : object {
    protected UInt32[0...,0...] integralImage;
    private int width;
    private int height;
    public int Width { get; }
    public int Height { get; }
    public UInt32[0...,0...] InternalData { get; }
    protected IntegralImage(int width, int height);
    public int get_Width();
    public int get_Height();
    public UInt32[0...,0...] get_InternalData();
    public static IntegralImage FromBitmap(Bitmap image);
    public static IntegralImage FromBitmap(BitmapData imageData);
    public static IntegralImage FromBitmap(UnmanagedImage image);
    public UInt32 GetRectangleSum(int x1, int y1, int x2, int y2);
    public int GetHaarXWavelet(int x, int y, int radius);
    public int GetHaarYWavelet(int x, int y, int radius);
    public UInt32 GetRectangleSumUnsafe(int x1, int y1, int x2, int y2);
    public UInt32 GetRectangleSum(int x, int y, int radius);
    public UInt32 GetRectangleSumUnsafe(int x, int y, int radius);
    public float GetRectangleMean(int x1, int y1, int x2, int y2);
    public float GetRectangleMeanUnsafe(int x1, int y1, int x2, int y2);
    public float GetRectangleMean(int x, int y, int radius);
    public float GetRectangleMeanUnsafe(int x, int y, int radius);
}
internal static class AForge.Imaging.Interpolation : object {
    public static double BiCubicKernel(double x);
}
public class AForge.Imaging.InvalidImagePropertiesException : ArgumentException {
    public InvalidImagePropertiesException(string message);
    public InvalidImagePropertiesException(string message, string paramName);
}
public interface AForge.Imaging.ITemplateMatching {
    public abstract virtual TemplateMatch[] ProcessImage(Bitmap image, Bitmap template, Rectangle searchZone);
    public abstract virtual TemplateMatch[] ProcessImage(BitmapData imageData, BitmapData templateData, Rectangle searchZone);
    public abstract virtual TemplateMatch[] ProcessImage(UnmanagedImage image, UnmanagedImage template, Rectangle searchZone);
}
public static class AForge.Imaging.MemoryManager : object {
    private static int maximumCacheSize;
    private static int currentCacheSize;
    private static int busyBlocks;
    private static int cachedMemory;
    private static int maxSizeToCache;
    private static int minSizeToCache;
    private static List`1<CacheBlock> memoryBlocks;
    public static int MaximumCacheSize { get; public set; }
    public static int CurrentCacheSize { get; }
    public static int BusyMemoryBlocks { get; }
    public static int FreeMemoryBlocks { get; }
    public static int CachedMemory { get; }
    public static int MaxSizeToCache { get; public set; }
    public static int MinSizeToCache { get; public set; }
    private static MemoryManager();
    public static int get_MaximumCacheSize();
    public static void set_MaximumCacheSize(int value);
    public static int get_CurrentCacheSize();
    public static int get_BusyMemoryBlocks();
    public static int get_FreeMemoryBlocks();
    public static int get_CachedMemory();
    public static int get_MaxSizeToCache();
    public static void set_MaxSizeToCache(int value);
    public static int get_MinSizeToCache();
    public static void set_MinSizeToCache(int value);
    public static IntPtr Alloc(int size);
    public static void Free(IntPtr pointer);
    public static int FreeUnusedMemory();
}
public class AForge.Imaging.MoravecCornersDetector : object {
    private int windowSize;
    private int threshold;
    private static Int32[] xDelta;
    private static Int32[] yDelta;
    public int WindowSize { get; public set; }
    public int Threshold { get; public set; }
    public MoravecCornersDetector(int threshold);
    public MoravecCornersDetector(int threshold, int windowSize);
    private static MoravecCornersDetector();
    public int get_WindowSize();
    public void set_WindowSize(int value);
    public int get_Threshold();
    public void set_Threshold(int value);
    public sealed virtual List`1<IntPoint> ProcessImage(Bitmap image);
    public sealed virtual List`1<IntPoint> ProcessImage(BitmapData imageData);
    public sealed virtual List`1<IntPoint> ProcessImage(UnmanagedImage image);
}
public enum AForge.Imaging.ObjectsOrder : Enum {
    public int value__;
    public static ObjectsOrder None;
    public static ObjectsOrder Size;
    public static ObjectsOrder Area;
    public static ObjectsOrder YX;
    public static ObjectsOrder XY;
}
public class AForge.Imaging.QuadrilateralFinder : object {
    public List`1<IntPoint> ProcessImage(Bitmap image);
    public List`1<IntPoint> ProcessImage(BitmapData imageData);
    public List`1<IntPoint> ProcessImage(UnmanagedImage image);
    private void CheckPixelFormat(PixelFormat format);
}
public class AForge.Imaging.RecursiveBlobCounter : BlobCounterBase {
    private Int32[] tempLabels;
    private int stride;
    private int pixelSize;
    private byte backgroundThresholdR;
    private byte backgroundThresholdG;
    private byte backgroundThresholdB;
    public Color BackgroundThreshold { get; public set; }
    public RecursiveBlobCounter(Bitmap image);
    public RecursiveBlobCounter(BitmapData imageData);
    public RecursiveBlobCounter(UnmanagedImage image);
    public Color get_BackgroundThreshold();
    public void set_BackgroundThreshold(Color value);
    protected virtual void BuildObjectsMap(UnmanagedImage image);
    private void LabelPixel(Byte* pixel, int labelPointer);
    private void LabelColorPixel(Byte* pixel, int labelPointer);
}
public class AForge.Imaging.RGB : object {
    public static short R;
    public static short G;
    public static short B;
    public static short A;
    public byte Red;
    public byte Green;
    public byte Blue;
    public byte Alpha;
    public Color Color { get; public set; }
    public RGB(byte red, byte green, byte blue);
    public RGB(byte red, byte green, byte blue, byte alpha);
    public RGB(Color color);
    public Color get_Color();
    public void set_Color(Color value);
}
public class AForge.Imaging.SusanCornersDetector : object {
    private int differenceThreshold;
    private int geometricalThreshold;
    private static Int32[] rowRadius;
    public int DifferenceThreshold { get; public set; }
    public int GeometricalThreshold { get; public set; }
    public SusanCornersDetector(int differenceThreshold, int geometricalThreshold);
    private static SusanCornersDetector();
    public int get_DifferenceThreshold();
    public void set_DifferenceThreshold(int value);
    public int get_GeometricalThreshold();
    public void set_GeometricalThreshold(int value);
    public sealed virtual List`1<IntPoint> ProcessImage(Bitmap image);
    public sealed virtual List`1<IntPoint> ProcessImage(BitmapData imageData);
    public sealed virtual List`1<IntPoint> ProcessImage(UnmanagedImage image);
}
public class AForge.Imaging.TemplateMatch : object {
    private Rectangle rect;
    private float similarity;
    public Rectangle Rectangle { get; }
    public float Similarity { get; }
    public TemplateMatch(Rectangle rect, float similarity);
    public Rectangle get_Rectangle();
    public float get_Similarity();
}
public class AForge.Imaging.Textures.CloudsTexture : object {
    private PerlinNoise noise;
    private Random rand;
    private int r;
    public sealed virtual Single[0...,0...] Generate(int width, int height);
    public sealed virtual void Reset();
}
public interface AForge.Imaging.Textures.ITextureGenerator {
    public abstract virtual Single[0...,0...] Generate(int width, int height);
    public abstract virtual void Reset();
}
public class AForge.Imaging.Textures.LabyrinthTexture : object {
    private PerlinNoise noise;
    private Random rand;
    private int r;
    public sealed virtual Single[0...,0...] Generate(int width, int height);
    public sealed virtual void Reset();
}
public class AForge.Imaging.Textures.MarbleTexture : object {
    private PerlinNoise noise;
    private Random rand;
    private int r;
    private double xPeriod;
    private double yPeriod;
    public double XPeriod { get; public set; }
    public double YPeriod { get; public set; }
    public MarbleTexture(double xPeriod, double yPeriod);
    public double get_XPeriod();
    public void set_XPeriod(double value);
    public double get_YPeriod();
    public void set_YPeriod(double value);
    public sealed virtual Single[0...,0...] Generate(int width, int height);
    public sealed virtual void Reset();
}
public class AForge.Imaging.Textures.TextileTexture : object {
    private PerlinNoise noise;
    private Random rand;
    private int r;
    public sealed virtual Single[0...,0...] Generate(int width, int height);
    public sealed virtual void Reset();
}
public class AForge.Imaging.Textures.TextureTools : object {
    public static Bitmap ToBitmap(Single[0...,0...] texture);
    public static Single[0...,0...] FromBitmap(Bitmap image);
    public static Single[0...,0...] FromBitmap(BitmapData imageData);
    public static Single[0...,0...] FromBitmap(UnmanagedImage image);
}
public class AForge.Imaging.Textures.WoodTexture : object {
    private PerlinNoise noise;
    private Random rand;
    private int r;
    private double rings;
    public double Rings { get; public set; }
    public WoodTexture(double rings);
    public double get_Rings();
    public void set_Rings(double value);
    public sealed virtual Single[0...,0...] Generate(int width, int height);
    public sealed virtual void Reset();
}
public class AForge.Imaging.UnmanagedImage : object {
    private IntPtr imageData;
    private int width;
    private int height;
    private int stride;
    private PixelFormat pixelFormat;
    private bool mustBeDisposed;
    public IntPtr ImageData { get; }
    public int Width { get; }
    public int Height { get; }
    public int Stride { get; }
    public PixelFormat PixelFormat { get; }
    public UnmanagedImage(IntPtr imageData, int width, int height, int stride, PixelFormat pixelFormat);
    public UnmanagedImage(BitmapData bitmapData);
    public IntPtr get_ImageData();
    public int get_Width();
    public int get_Height();
    public int get_Stride();
    public PixelFormat get_PixelFormat();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public UnmanagedImage Clone();
    public void Copy(UnmanagedImage destImage);
    public static UnmanagedImage Create(int width, int height, PixelFormat pixelFormat);
    public Bitmap ToManagedImage();
    public Bitmap ToManagedImage(bool makeCopy);
    public static UnmanagedImage FromManagedImage(Bitmap image);
    public static UnmanagedImage FromManagedImage(BitmapData imageData);
    public Byte[] Collect8bppPixelValues(List`1<IntPoint> points);
    public List`1<IntPoint> CollectActivePixels();
    public List`1<IntPoint> CollectActivePixels(Rectangle rect);
    public void SetPixels(List`1<IntPoint> coordinates, Color color);
    public void SetPixel(IntPoint point, Color color);
    public void SetPixel(int x, int y, Color color);
    public void SetPixel(int x, int y, byte value);
    private void SetPixel(int x, int y, byte r, byte g, byte b, byte a);
    public Color GetPixel(IntPoint point);
    public Color GetPixel(int x, int y);
    public UInt16[] Collect16bppPixelValues(List`1<IntPoint> points);
}
public class AForge.Imaging.UnsupportedImageFormatException : ArgumentException {
    public UnsupportedImageFormatException(string message);
    public UnsupportedImageFormatException(string message, string paramName);
}
public class AForge.Imaging.VerticalIntensityStatistics : object {
    private Histogram red;
    private Histogram green;
    private Histogram blue;
    private Histogram gray;
    public Histogram Red { get; }
    public Histogram Green { get; }
    public Histogram Blue { get; }
    public Histogram Gray { get; }
    public bool IsGrayscale { get; }
    public VerticalIntensityStatistics(Bitmap image);
    public VerticalIntensityStatistics(BitmapData imageData);
    public VerticalIntensityStatistics(UnmanagedImage image);
    public Histogram get_Red();
    public Histogram get_Green();
    public Histogram get_Blue();
    public Histogram get_Gray();
    public bool get_IsGrayscale();
    private void ProcessImage(UnmanagedImage image);
}
public class AForge.Imaging.YCbCr : object {
    public static short YIndex;
    public static short CbIndex;
    public static short CrIndex;
    public float Y;
    public float Cb;
    public float Cr;
    public YCbCr(float y, float cb, float cr);
    public static void FromRGB(RGB rgb, YCbCr ycbcr);
    public static YCbCr FromRGB(RGB rgb);
    public static void ToRGB(YCbCr ycbcr, RGB rgb);
    public RGB ToRGB();
}
