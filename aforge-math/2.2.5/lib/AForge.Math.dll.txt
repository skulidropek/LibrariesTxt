public class AForge.Math.Complex : ValueType {
    public double Re;
    public double Im;
    public static Complex Zero;
    public static Complex One;
    public static Complex I;
    public double Magnitude { get; }
    public double Phase { get; }
    public double SquaredMagnitude { get; }
    public Complex(double re, double im);
    public Complex(Complex c);
    private static Complex();
    public double get_Magnitude();
    public double get_Phase();
    public double get_SquaredMagnitude();
    public static Complex Add(Complex a, Complex b);
    public static Complex Add(Complex a, double s);
    public static void Add(Complex a, Complex b, Complex& result);
    public static void Add(Complex a, double s, Complex& result);
    public static Complex Subtract(Complex a, Complex b);
    public static Complex Subtract(Complex a, double s);
    public static Complex Subtract(double s, Complex a);
    public static void Subtract(Complex a, Complex b, Complex& result);
    public static void Subtract(Complex a, double s, Complex& result);
    public static void Subtract(double s, Complex a, Complex& result);
    public static Complex Multiply(Complex a, Complex b);
    public static Complex Multiply(Complex a, double s);
    public static void Multiply(Complex a, Complex b, Complex& result);
    public static void Multiply(Complex a, double s, Complex& result);
    public static Complex Divide(Complex a, Complex b);
    public static Complex Divide(Complex a, double s);
    public static Complex Divide(double s, Complex a);
    public static void Divide(Complex a, Complex b, Complex& result);
    public static void Divide(Complex a, double s, Complex& result);
    public static void Divide(double s, Complex a, Complex& result);
    public static Complex Negate(Complex a);
    public static bool ApproxEqual(Complex a, Complex b);
    public static bool ApproxEqual(Complex a, Complex b, double tolerance);
    public static Complex Parse(string s);
    public static bool TryParse(string s, Complex& result);
    public static Complex Sqrt(Complex a);
    public static Complex Log(Complex a);
    public static Complex Exp(Complex a);
    public static Complex Sin(Complex a);
    public static Complex Cos(Complex a);
    public static Complex Tan(Complex a);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static bool op_Equality(Complex u, Complex v);
    public static bool op_Inequality(Complex u, Complex v);
    public static Complex op_UnaryNegation(Complex a);
    public static Complex op_Addition(Complex a, Complex b);
    public static Complex op_Addition(Complex a, double s);
    public static Complex op_Addition(double s, Complex a);
    public static Complex op_Subtraction(Complex a, Complex b);
    public static Complex op_Subtraction(Complex a, double s);
    public static Complex op_Subtraction(double s, Complex a);
    public static Complex op_Multiply(Complex a, Complex b);
    public static Complex op_Multiply(double s, Complex a);
    public static Complex op_Multiply(Complex a, double s);
    public static Complex op_Division(Complex a, Complex b);
    public static Complex op_Division(Complex a, double s);
    public static Complex op_Division(double s, Complex a);
    public static Complex op_Explicit(float value);
    public static Complex op_Explicit(double value);
    private sealed virtual override object System.ICloneable.Clone();
    public Complex Clone();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class AForge.Math.ContinuousHistogram : object {
    private Int32[] values;
    private Range range;
    private float mean;
    private float stdDev;
    private float median;
    private float min;
    private float max;
    private int total;
    public Int32[] Values { get; }
    public Range Range { get; }
    public float Mean { get; }
    public float StdDev { get; }
    public float Median { get; }
    public float Min { get; }
    public float Max { get; }
    public ContinuousHistogram(Int32[] values, Range range);
    public Int32[] get_Values();
    public Range get_Range();
    public float get_Mean();
    public float get_StdDev();
    public float get_Median();
    public float get_Min();
    public float get_Max();
    public Range GetRange(float percent);
    public void Update();
}
public static class AForge.Math.FourierTransform : object {
    private static int minLength;
    private static int maxLength;
    private static int minBits;
    private static int maxBits;
    private static Int32[][] reversedBits;
    private static Complex[][0...,0...] complexRotation;
    private static FourierTransform();
    public static void DFT(Complex[] data, Direction direction);
    public static void DFT2(Complex[0...,0...] data, Direction direction);
    public static void FFT(Complex[] data, Direction direction);
    public static void FFT2(Complex[0...,0...] data, Direction direction);
    private static Int32[] GetReversedBits(int numberOfBits);
    private static Complex[] GetComplexRotation(int numberOfBits, Direction direction);
    private static void ReorderData(Complex[] data);
}
public class AForge.Math.Gaussian : object {
    private double sigma;
    private double sqrSigma;
    public double Sigma { get; public set; }
    public Gaussian(double sigma);
    public double get_Sigma();
    public void set_Sigma(double value);
    public double Function(double x);
    public double Function2D(double x, double y);
    public Double[] Kernel(int size);
    public Double[0...,0...] Kernel2D(int size);
}
public class AForge.Math.Geometry.ClosePointsMergingOptimizer : object {
    private float maxDistanceToMerge;
    public float MaxDistanceToMerge { get; public set; }
    public ClosePointsMergingOptimizer(float maxDistanceToMerge);
    public float get_MaxDistanceToMerge();
    public void set_MaxDistanceToMerge(float value);
    public sealed virtual List`1<IntPoint> OptimizeShape(List`1<IntPoint> shape);
}
public class AForge.Math.Geometry.CoplanarPosit : object {
    private static float ErrorLimit;
    private float focalLength;
    private Vector3[] modelPoints;
    private Matrix3x3 modelVectors;
    private Matrix3x3 modelPseudoInverse;
    private Vector3 modelNormal;
    private Matrix3x3 alternateRotation;
    private Vector3 alternateTranslation;
    private float alternatePoseError;
    private Matrix3x3 bestRotation;
    private Vector3 bestTranslation;
    private float bestPoseError;
    public Matrix3x3 BestEstimatedRotation { get; }
    public Vector3 BestEstimatedTranslation { get; }
    public float BestEstimationError { get; }
    public Matrix3x3 AlternateEstimatedRotation { get; }
    public Vector3 AlternateEstimatedTranslation { get; }
    public float AlternateEstimationError { get; }
    public Vector3[] Model { get; }
    public float FocalLength { get; public set; }
    public CoplanarPosit(Vector3[] model, float focalLength);
    public Matrix3x3 get_BestEstimatedRotation();
    public Vector3 get_BestEstimatedTranslation();
    public float get_BestEstimationError();
    public Matrix3x3 get_AlternateEstimatedRotation();
    public Vector3 get_AlternateEstimatedTranslation();
    public float get_AlternateEstimationError();
    public Vector3[] get_Model();
    public float get_FocalLength();
    public void set_FocalLength(float value);
    public void EstimatePose(Point[] points, Matrix3x3& rotation, Vector3& translation);
    private float Iterate(Point[] points, Matrix3x3& rotation, Vector3& translation);
    private void POS(Point[] imagePoints, Vector3 eps, Matrix3x3& rotation1, Matrix3x3& rotation2, Vector3& translation1, Vector3& translation2);
    private float GetError(Point[] imagePoints, Matrix3x3 rotation, Vector3 translation);
}
public class AForge.Math.Geometry.FlatAnglesOptimizer : object {
    private float maxAngleToKeep;
    public float MaxAngleToKeep { get; public set; }
    public FlatAnglesOptimizer(float maxAngleToKeep);
    public float get_MaxAngleToKeep();
    public void set_MaxAngleToKeep(float value);
    public sealed virtual List`1<IntPoint> OptimizeShape(List`1<IntPoint> shape);
}
public static class AForge.Math.Geometry.GeometryTools : object {
    public static float GetAngleBetweenVectors(Point startPoint, Point vector1end, Point vector2end);
    public static float GetAngleBetweenLines(Point a1, Point a2, Point b1, Point b2);
}
public class AForge.Math.Geometry.GrahamConvexHull : object {
    public sealed virtual List`1<IntPoint> FindHull(List`1<IntPoint> points);
}
public interface AForge.Math.Geometry.IConvexHullAlgorithm {
    public abstract virtual List`1<IntPoint> FindHull(List`1<IntPoint> points);
}
public interface AForge.Math.Geometry.IShapeOptimizer {
    public abstract virtual List`1<IntPoint> OptimizeShape(List`1<IntPoint> shape);
}
public class AForge.Math.Geometry.Line : object {
    private float k;
    private float b;
    public bool IsVertical { get; }
    public bool IsHorizontal { get; }
    public float Slope { get; }
    public float Intercept { get; }
    private Line(Point start, Point end);
    private Line(float slope, float intercept);
    private Line(float radius, float theta, bool unused);
    private Line(Point point, float theta);
    public bool get_IsVertical();
    public bool get_IsHorizontal();
    public float get_Slope();
    public float get_Intercept();
    public static Line FromPoints(Point point1, Point point2);
    public static Line FromSlopeIntercept(float slope, float intercept);
    public static Line FromRTheta(float radius, float theta);
    public static Line FromPointTheta(Point point, float theta);
    public float GetAngleBetweenLines(Line secondLine);
    public Nullable`1<Point> GetIntersectionWith(Line secondLine);
    public Nullable`1<Point> GetIntersectionWith(LineSegment other);
    public float DistanceToPoint(Point point);
    public static bool op_Equality(Line line1, Line line2);
    public static bool op_Inequality(Line line1, Line line2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class AForge.Math.Geometry.LineSegment : object {
    private Point start;
    private Point end;
    private Line line;
    public Point Start { get; }
    public Point End { get; }
    public float Length { get; }
    public LineSegment(Point start, Point end);
    public Point get_Start();
    public Point get_End();
    public float get_Length();
    public static Line op_Explicit(LineSegment segment);
    public float DistanceToPoint(Point point);
    public Nullable`1<Point> GetIntersectionWith(LineSegment other);
    public Nullable`1<Point> GetIntersectionWith(Line other);
    private ProjectionLocation LocateProjection(Point point);
    public static bool op_Equality(LineSegment line1, LineSegment line2);
    public static bool op_Inequality(LineSegment line1, LineSegment line2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class AForge.Math.Geometry.LineStraighteningOptimizer : object {
    private float maxDistanceToRemove;
    public float MaxDistanceToRemove { get; public set; }
    public LineStraighteningOptimizer(float maxDistanceToRemove);
    public float get_MaxDistanceToRemove();
    public void set_MaxDistanceToRemove(float value);
    public sealed virtual List`1<IntPoint> OptimizeShape(List`1<IntPoint> shape);
}
public static class AForge.Math.Geometry.PointsCloud : object {
    private static float quadrilateralRelativeDistortionLimit;
    public static float QuadrilateralRelativeDistortionLimit { get; public set; }
    private static PointsCloud();
    public static void Shift(IList`1<IntPoint> cloud, IntPoint shift);
    public static void GetBoundingRectangle(IEnumerable`1<IntPoint> cloud, IntPoint& minXY, IntPoint& maxXY);
    public static Point GetCenterOfGravity(IEnumerable`1<IntPoint> cloud);
    public static IntPoint GetFurthestPoint(IEnumerable`1<IntPoint> cloud, IntPoint referencePoint);
    public static void GetFurthestPointsFromLine(IEnumerable`1<IntPoint> cloud, IntPoint linePoint1, IntPoint linePoint2, IntPoint& furthestPoint1, IntPoint& furthestPoint2);
    public static void GetFurthestPointsFromLine(IEnumerable`1<IntPoint> cloud, IntPoint linePoint1, IntPoint linePoint2, IntPoint& furthestPoint1, Single& distance1, IntPoint& furthestPoint2, Single& distance2);
    public static IntPoint GetFurthestPointFromLine(IEnumerable`1<IntPoint> cloud, IntPoint linePoint1, IntPoint linePoint2);
    public static IntPoint GetFurthestPointFromLine(IEnumerable`1<IntPoint> cloud, IntPoint linePoint1, IntPoint linePoint2, Single& distance);
    public static float get_QuadrilateralRelativeDistortionLimit();
    public static void set_QuadrilateralRelativeDistortionLimit(float value);
    public static List`1<IntPoint> FindQuadrilateralCorners(IEnumerable`1<IntPoint> cloud);
}
public enum AForge.Math.Geometry.PolygonSubType : Enum {
    public int value__;
    public static PolygonSubType Unknown;
    public static PolygonSubType Trapezoid;
    public static PolygonSubType Parallelogram;
    public static PolygonSubType Rectangle;
    public static PolygonSubType Rhombus;
    public static PolygonSubType Square;
    public static PolygonSubType EquilateralTriangle;
    public static PolygonSubType IsoscelesTriangle;
    public static PolygonSubType RectangledTriangle;
    public static PolygonSubType RectangledIsoscelesTriangle;
}
public class AForge.Math.Geometry.Posit : object {
    private static float stop_epsilon;
    private float focalLength;
    private Vector3[] modelPoints;
    private Matrix3x3 modelVectors;
    private Matrix3x3 modelPseudoInverse;
    public Vector3[] Model { get; }
    public float FocalLength { get; public set; }
    public Posit(Vector3[] model, float focalLength);
    public Vector3[] get_Model();
    public float get_FocalLength();
    public void set_FocalLength(float value);
    public void EstimatePose(Point[] points, Matrix3x3& rotation, Vector3& translation);
}
public enum AForge.Math.Geometry.ShapeType : Enum {
    public int value__;
    public static ShapeType Unknown;
    public static ShapeType Circle;
    public static ShapeType Triangle;
    public static ShapeType Quadrilateral;
}
public class AForge.Math.Geometry.SimpleShapeChecker : object {
    private FlatAnglesOptimizer shapeOptimizer;
    private float minAcceptableDistortion;
    private float relativeDistortionLimit;
    private float angleError;
    private float lengthError;
    public float MinAcceptableDistortion { get; public set; }
    public float RelativeDistortionLimit { get; public set; }
    public float AngleError { get; public set; }
    public float LengthError { get; public set; }
    public float get_MinAcceptableDistortion();
    public void set_MinAcceptableDistortion(float value);
    public float get_RelativeDistortionLimit();
    public void set_RelativeDistortionLimit(float value);
    public float get_AngleError();
    public void set_AngleError(float value);
    public float get_LengthError();
    public void set_LengthError(float value);
    public ShapeType CheckShapeType(List`1<IntPoint> edgePoints);
    public bool IsCircle(List`1<IntPoint> edgePoints);
    public bool IsCircle(List`1<IntPoint> edgePoints, Point& center, Single& radius);
    public bool IsQuadrilateral(List`1<IntPoint> edgePoints);
    public bool IsQuadrilateral(List`1<IntPoint> edgePoints, List`1& corners);
    public bool IsTriangle(List`1<IntPoint> edgePoints);
    public bool IsTriangle(List`1<IntPoint> edgePoints, List`1& corners);
    public bool IsConvexPolygon(List`1<IntPoint> edgePoints, List`1& corners);
    public PolygonSubType CheckPolygonSubType(List`1<IntPoint> corners);
    public bool CheckIfPointsFitShape(List`1<IntPoint> edgePoints, List`1<IntPoint> corners);
    private List`1<IntPoint> GetShapeCorners(List`1<IntPoint> edgePoints);
}
public class AForge.Math.Histogram : object {
    private Int32[] values;
    private double mean;
    private double stdDev;
    private int median;
    private int min;
    private int max;
    private long total;
    public Int32[] Values { get; }
    public double Mean { get; }
    public double StdDev { get; }
    public int Median { get; }
    public int Min { get; }
    public int Max { get; }
    public long TotalCount { get; }
    public Histogram(Int32[] values);
    public Int32[] get_Values();
    public double get_Mean();
    public double get_StdDev();
    public int get_Median();
    public int get_Min();
    public int get_Max();
    public long get_TotalCount();
    public IntRange GetRange(double percent);
    public void Update();
}
public class AForge.Math.Matrix3x3 : ValueType {
    public float V00;
    public float V01;
    public float V02;
    public float V10;
    public float V11;
    public float V12;
    public float V20;
    public float V21;
    public float V22;
    public static Matrix3x3 Identity { get; }
    public float Determinant { get; }
    public static Matrix3x3 get_Identity();
    public float get_Determinant();
    public Single[] ToArray();
    public static Matrix3x3 CreateRotationY(float radians);
    public static Matrix3x3 CreateRotationX(float radians);
    public static Matrix3x3 CreateRotationZ(float radians);
    public static Matrix3x3 CreateFromYawPitchRoll(float yaw, float pitch, float roll);
    public void ExtractYawPitchRoll(Single& yaw, Single& pitch, Single& roll);
    public static Matrix3x3 CreateFromRows(Vector3 row0, Vector3 row1, Vector3 row2);
    public static Matrix3x3 CreateFromColumns(Vector3 column0, Vector3 column1, Vector3 column2);
    public static Matrix3x3 CreateDiagonal(Vector3 vector);
    public Vector3 GetRow(int index);
    public Vector3 GetColumn(int index);
    public static Matrix3x3 op_Multiply(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static Matrix3x3 Multiply(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static Matrix3x3 op_Addition(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static Matrix3x3 Add(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static Matrix3x3 op_Subtraction(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static Matrix3x3 Subtract(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static Vector3 op_Multiply(Matrix3x3 matrix, Vector3 vector);
    public static Vector3 Multiply(Matrix3x3 matrix, Vector3 vector);
    public static Matrix3x3 op_Multiply(Matrix3x3 matrix, float factor);
    public static Matrix3x3 Multiply(Matrix3x3 matrix, float factor);
    public static Matrix3x3 op_Addition(Matrix3x3 matrix, float value);
    public static Matrix3x3 Add(Matrix3x3 matrix, float value);
    public static bool op_Equality(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public static bool op_Inequality(Matrix3x3 matrix1, Matrix3x3 matrix2);
    public bool Equals(Matrix3x3 matrix);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Matrix3x3 Transpose();
    public Matrix3x3 MultiplySelfByTranspose();
    public Matrix3x3 MultiplyTransposeBySelf();
    public Matrix3x3 Adjugate();
    public Matrix3x3 Inverse();
    public Matrix3x3 PseudoInverse();
    public void SVD(Matrix3x3& u, Vector3& e, Matrix3x3& v);
}
public class AForge.Math.Matrix4x4 : ValueType {
    public float V00;
    public float V01;
    public float V02;
    public float V03;
    public float V10;
    public float V11;
    public float V12;
    public float V13;
    public float V20;
    public float V21;
    public float V22;
    public float V23;
    public float V30;
    public float V31;
    public float V32;
    public float V33;
    public static Matrix4x4 Identity { get; }
    public static Matrix4x4 get_Identity();
    public Single[] ToArray();
    public static Matrix4x4 CreateRotationY(float radians);
    public static Matrix4x4 CreateRotationX(float radians);
    public static Matrix4x4 CreateRotationZ(float radians);
    public static Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll);
    public void ExtractYawPitchRoll(Single& yaw, Single& pitch, Single& roll);
    public static Matrix4x4 CreateFromRotation(Matrix3x3 rotationMatrix);
    public static Matrix4x4 CreateTranslation(Vector3 position);
    public static Matrix4x4 CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget);
    public static Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance);
    public static Matrix4x4 CreateFromRows(Vector4 row0, Vector4 row1, Vector4 row2, Vector4 row3);
    public static Matrix4x4 CreateFromColumns(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3);
    public static Matrix4x4 CreateDiagonal(Vector4 vector);
    public Vector4 GetRow(int index);
    public Vector4 GetColumn(int index);
    public static Matrix4x4 op_Multiply(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static Matrix4x4 Multiply(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static Matrix4x4 op_Addition(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static Matrix4x4 Add(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static Matrix4x4 op_Subtraction(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static Matrix4x4 Subtract(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static Vector4 op_Multiply(Matrix4x4 matrix, Vector4 vector);
    public static Vector4 Multiply(Matrix4x4 matrix, Vector4 vector);
    public static bool op_Equality(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public static bool op_Inequality(Matrix4x4 matrix1, Matrix4x4 matrix2);
    public bool Equals(Matrix4x4 matrix);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AForge.Math.Metrics.CosineDistance : object {
    public sealed virtual double GetDistance(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.CosineSimilarity : object {
    public sealed virtual double GetSimilarityScore(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.EuclideanDistance : object {
    public sealed virtual double GetDistance(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.EuclideanSimilarity : object {
    public sealed virtual double GetSimilarityScore(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.HammingDistance : object {
    public sealed virtual double GetDistance(Double[] p, Double[] q);
}
public interface AForge.Math.Metrics.IDistance {
    public abstract virtual double GetDistance(Double[] p, Double[] q);
}
public interface AForge.Math.Metrics.ISimilarity {
    public abstract virtual double GetSimilarityScore(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.JaccardDistance : object {
    public sealed virtual double GetDistance(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.ManhattanDistance : object {
    public sealed virtual double GetDistance(Double[] p, Double[] q);
}
public class AForge.Math.Metrics.PearsonCorrelation : object {
    public sealed virtual double GetSimilarityScore(Double[] p, Double[] q);
}
public class AForge.Math.PerlinNoise : object {
    private double initFrequency;
    private double initAmplitude;
    private double persistence;
    private int octaves;
    public double InitFrequency { get; public set; }
    public double InitAmplitude { get; public set; }
    public double Persistence { get; public set; }
    public int Octaves { get; public set; }
    public PerlinNoise(int octaves, double persistence);
    public PerlinNoise(int octaves, double persistence, double initFrequency, double initAmplitude);
    public double get_InitFrequency();
    public void set_InitFrequency(double value);
    public double get_InitAmplitude();
    public void set_InitAmplitude(double value);
    public double get_Persistence();
    public void set_Persistence(double value);
    public int get_Octaves();
    public void set_Octaves(int value);
    public double Function(double x);
    public double Function2D(double x, double y);
    private double Noise(int x);
    private double Noise(int x, int y);
    private double SmoothedNoise(double x);
    private double SmoothedNoise(double x, double y);
    private double CosineInterpolate(double x1, double x2, double a);
}
public class AForge.Math.Random.ExponentialGenerator : object {
    private UniformOneGenerator rand;
    private float rate;
    public float Rate { get; }
    public float Mean { get; }
    public float Variance { get; }
    public ExponentialGenerator(float rate);
    public ExponentialGenerator(float rate, int seed);
    public float get_Rate();
    public sealed virtual float get_Mean();
    public sealed virtual float get_Variance();
    public sealed virtual float Next();
    public sealed virtual void SetSeed(int seed);
}
public class AForge.Math.Random.GaussianGenerator : object {
    private StandardGenerator rand;
    private float mean;
    private float stdDev;
    public float Mean { get; }
    public float Variance { get; }
    public float StdDev { get; }
    public GaussianGenerator(float mean, float stdDev);
    public GaussianGenerator(float mean, float stdDev, int seed);
    public sealed virtual float get_Mean();
    public sealed virtual float get_Variance();
    public float get_StdDev();
    public sealed virtual float Next();
    public sealed virtual void SetSeed(int seed);
}
public interface AForge.Math.Random.IRandomNumberGenerator {
    public float Mean { get; }
    public float Variance { get; }
    public abstract virtual float get_Mean();
    public abstract virtual float get_Variance();
    public abstract virtual float Next();
    public abstract virtual void SetSeed(int seed);
}
public class AForge.Math.Random.StandardGenerator : object {
    private UniformOneGenerator rand;
    private float secondValue;
    private bool useSecond;
    public float Mean { get; }
    public float Variance { get; }
    public StandardGenerator(int seed);
    public sealed virtual float get_Mean();
    public sealed virtual float get_Variance();
    public sealed virtual float Next();
    public sealed virtual void SetSeed(int seed);
}
public class AForge.Math.Random.UniformGenerator : object {
    private UniformOneGenerator rand;
    private float min;
    private float length;
    public float Mean { get; }
    public float Variance { get; }
    public Range Range { get; }
    public UniformGenerator(Range range);
    public UniformGenerator(Range range, int seed);
    public sealed virtual float get_Mean();
    public sealed virtual float get_Variance();
    public Range get_Range();
    public sealed virtual float Next();
    public sealed virtual void SetSeed(int seed);
}
public class AForge.Math.Random.UniformOneGenerator : object {
    private ThreadSafeRandom rand;
    public float Mean { get; }
    public float Variance { get; }
    public UniformOneGenerator(int seed);
    public sealed virtual float get_Mean();
    public sealed virtual float get_Variance();
    public sealed virtual float Next();
    public sealed virtual void SetSeed(int seed);
}
public static class AForge.Math.Statistics : object {
    public static double Mean(Int32[] values);
    public static double StdDev(Int32[] values);
    public static double StdDev(Int32[] values, double mean);
    public static int Median(Int32[] values);
    public static IntRange GetRange(Int32[] values, double percent);
    public static double Entropy(Int32[] values);
    public static int Mode(Int32[] values);
}
internal class AForge.Math.svd : object {
    public static void svdcmp(Double[0...,0...] a, Double[]& w, Double[0...,0...]& v);
    private static double Sign(double a, double b);
    private static double Pythag(double a, double b);
}
public static class AForge.Math.Tools : object {
    public static int Pow2(int power);
    public static bool IsPowerOf2(int x);
    public static int Log2(int x);
}
public class AForge.Math.Vector3 : ValueType {
    public float X;
    public float Y;
    public float Z;
    public float Max { get; }
    public float Min { get; }
    public int MaxIndex { get; }
    public int MinIndex { get; }
    public float Norm { get; }
    public float Square { get; }
    public Vector3(float x, float y, float z);
    public Vector3(float value);
    public float get_Max();
    public float get_Min();
    public int get_MaxIndex();
    public int get_MinIndex();
    public float get_Norm();
    public float get_Square();
    public virtual string ToString();
    public Single[] ToArray();
    public static Vector3 op_Addition(Vector3 vector1, Vector3 vector2);
    public static Vector3 Add(Vector3 vector1, Vector3 vector2);
    public static Vector3 op_Addition(Vector3 vector, float value);
    public static Vector3 Add(Vector3 vector, float value);
    public static Vector3 op_Subtraction(Vector3 vector1, Vector3 vector2);
    public static Vector3 Subtract(Vector3 vector1, Vector3 vector2);
    public static Vector3 op_Subtraction(Vector3 vector, float value);
    public static Vector3 Subtract(Vector3 vector, float value);
    public static Vector3 op_Multiply(Vector3 vector1, Vector3 vector2);
    public static Vector3 Multiply(Vector3 vector1, Vector3 vector2);
    public static Vector3 op_Multiply(Vector3 vector, float factor);
    public static Vector3 Multiply(Vector3 vector, float factor);
    public static Vector3 op_Division(Vector3 vector1, Vector3 vector2);
    public static Vector3 Divide(Vector3 vector1, Vector3 vector2);
    public static Vector3 op_Division(Vector3 vector, float factor);
    public static Vector3 Divide(Vector3 vector, float factor);
    public static bool op_Equality(Vector3 vector1, Vector3 vector2);
    public static bool op_Inequality(Vector3 vector1, Vector3 vector2);
    public bool Equals(Vector3 vector);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public float Normalize();
    public Vector3 Inverse();
    public Vector3 Abs();
    public static Vector3 Cross(Vector3 vector1, Vector3 vector2);
    public static float Dot(Vector3 vector1, Vector3 vector2);
    public Vector4 ToVector4();
}
public class AForge.Math.Vector4 : ValueType {
    public float X;
    public float Y;
    public float Z;
    public float W;
    public float Max { get; }
    public float Min { get; }
    public int MaxIndex { get; }
    public int MinIndex { get; }
    public float Norm { get; }
    public float Square { get; }
    public Vector4(float x, float y, float z, float w);
    public Vector4(float value);
    public float get_Max();
    public float get_Min();
    public int get_MaxIndex();
    public int get_MinIndex();
    public float get_Norm();
    public float get_Square();
    public virtual string ToString();
    public Single[] ToArray();
    public static Vector4 op_Addition(Vector4 vector1, Vector4 vector2);
    public static Vector4 Add(Vector4 vector1, Vector4 vector2);
    public static Vector4 op_Addition(Vector4 vector, float value);
    public static Vector4 Add(Vector4 vector, float value);
    public static Vector4 op_Subtraction(Vector4 vector1, Vector4 vector2);
    public static Vector4 Subtract(Vector4 vector1, Vector4 vector2);
    public static Vector4 op_Subtraction(Vector4 vector, float value);
    public static Vector4 Subtract(Vector4 vector, float value);
    public static Vector4 op_Multiply(Vector4 vector1, Vector4 vector2);
    public static Vector4 Multiply(Vector4 vector1, Vector4 vector2);
    public static Vector4 op_Multiply(Vector4 vector, float factor);
    public static Vector4 Multiply(Vector4 vector, float factor);
    public static Vector4 op_Division(Vector4 vector1, Vector4 vector2);
    public static Vector4 Divide(Vector4 vector1, Vector4 vector2);
    public static Vector4 op_Division(Vector4 vector, float factor);
    public static Vector4 Divide(Vector4 vector, float factor);
    public static bool op_Equality(Vector4 vector1, Vector4 vector2);
    public static bool op_Inequality(Vector4 vector1, Vector4 vector2);
    public bool Equals(Vector4 vector);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public float Normalize();
    public Vector4 Inverse();
    public Vector4 Abs();
    public static float Dot(Vector4 vector1, Vector4 vector2);
    public Vector3 ToVector3();
}
