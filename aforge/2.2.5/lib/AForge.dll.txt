public class AForge.CommunicationBufferEventArgs : EventArgs {
    private Byte[] message;
    private int index;
    private int length;
    public int MessageLength { get; }
    public CommunicationBufferEventArgs(Byte[] message);
    public CommunicationBufferEventArgs(Byte[] buffer, int index, int length);
    public int get_MessageLength();
    public Byte[] GetMessage();
    public string GetMessageString();
}
public class AForge.ConnectionFailedException : Exception {
    public ConnectionFailedException(string message);
}
public class AForge.ConnectionLostException : Exception {
    public ConnectionLostException(string message);
}
public class AForge.DeviceBusyException : Exception {
    public DeviceBusyException(string message);
}
public class AForge.DeviceErrorException : Exception {
    public DeviceErrorException(string message);
}
public class AForge.DoublePoint : ValueType {
    public double X;
    public double Y;
    public DoublePoint(double x, double y);
    public double DistanceTo(DoublePoint anotherPoint);
    public double SquaredDistanceTo(DoublePoint anotherPoint);
    public static DoublePoint op_Addition(DoublePoint point1, DoublePoint point2);
    public static DoublePoint Add(DoublePoint point1, DoublePoint point2);
    public static DoublePoint op_Subtraction(DoublePoint point1, DoublePoint point2);
    public static DoublePoint Subtract(DoublePoint point1, DoublePoint point2);
    public static DoublePoint op_Addition(DoublePoint point, double valueToAdd);
    public static DoublePoint Add(DoublePoint point, double valueToAdd);
    public static DoublePoint op_Subtraction(DoublePoint point, double valueToSubtract);
    public static DoublePoint Subtract(DoublePoint point, double valueToSubtract);
    public static DoublePoint op_Multiply(DoublePoint point, double factor);
    public static DoublePoint Multiply(DoublePoint point, double factor);
    public static DoublePoint op_Division(DoublePoint point, double factor);
    public static DoublePoint Divide(DoublePoint point, double factor);
    public static bool op_Equality(DoublePoint point1, DoublePoint point2);
    public static bool op_Inequality(DoublePoint point1, DoublePoint point2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static IntPoint op_Explicit(DoublePoint point);
    public static Point op_Explicit(DoublePoint point);
    public IntPoint Round();
    public virtual string ToString();
    public double EuclideanNorm();
}
public class AForge.DoubleRange : ValueType {
    private double min;
    private double max;
    public double Min { get; public set; }
    public double Max { get; public set; }
    public double Length { get; }
    public DoubleRange(double min, double max);
    public double get_Min();
    public void set_Min(double value);
    public double get_Max();
    public void set_Max(double value);
    public double get_Length();
    public bool IsInside(double x);
    public bool IsInside(DoubleRange range);
    public bool IsOverlapping(DoubleRange range);
    public IntRange ToIntRange(bool provideInnerRange);
    public static bool op_Equality(DoubleRange range1, DoubleRange range2);
    public static bool op_Inequality(DoubleRange range1, DoubleRange range2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class AForge.IntPoint : ValueType {
    public int X;
    public int Y;
    public IntPoint(int x, int y);
    public float DistanceTo(IntPoint anotherPoint);
    public float SquaredDistanceTo(Point anotherPoint);
    public static IntPoint op_Addition(IntPoint point1, IntPoint point2);
    public static IntPoint Add(IntPoint point1, IntPoint point2);
    public static IntPoint op_Subtraction(IntPoint point1, IntPoint point2);
    public static IntPoint Subtract(IntPoint point1, IntPoint point2);
    public static IntPoint op_Addition(IntPoint point, int valueToAdd);
    public static IntPoint Add(IntPoint point, int valueToAdd);
    public static IntPoint op_Subtraction(IntPoint point, int valueToSubtract);
    public static IntPoint Subtract(IntPoint point, int valueToSubtract);
    public static IntPoint op_Multiply(IntPoint point, int factor);
    public static IntPoint Multiply(IntPoint point, int factor);
    public static IntPoint op_Division(IntPoint point, int factor);
    public static IntPoint Divide(IntPoint point, int factor);
    public static bool op_Equality(IntPoint point1, IntPoint point2);
    public static bool op_Inequality(IntPoint point1, IntPoint point2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Point op_Implicit(IntPoint point);
    public static DoublePoint op_Implicit(IntPoint point);
    public virtual string ToString();
    public float EuclideanNorm();
}
public class AForge.IntRange : ValueType {
    private int min;
    private int max;
    public int Min { get; public set; }
    public int Max { get; public set; }
    public int Length { get; }
    public IntRange(int min, int max);
    public int get_Min();
    public void set_Min(int value);
    public int get_Max();
    public void set_Max(int value);
    public int get_Length();
    public bool IsInside(int x);
    public bool IsInside(IntRange range);
    public bool IsOverlapping(IntRange range);
    public static Range op_Implicit(IntRange range);
    public static bool op_Equality(IntRange range1, IntRange range2);
    public static bool op_Inequality(IntRange range1, IntRange range2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class AForge.MessageTransferHandler : MulticastDelegate {
    public MessageTransferHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CommunicationBufferEventArgs eventArgs);
    public virtual IAsyncResult BeginInvoke(object sender, CommunicationBufferEventArgs eventArgs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AForge.NotConnectedException : Exception {
    public NotConnectedException(string message);
}
public class AForge.Parallel : object {
    private static int threadsCount;
    private static object sync;
    private static Parallel modreq(System.Runtime.CompilerServices.IsVolatile) instance;
    private Thread[] threads;
    private AutoResetEvent[] jobAvailable;
    private ManualResetEvent[] threadIdle;
    private int currentIndex;
    private int stopIndex;
    private ForLoopBody loopBody;
    public static int ThreadsCount { get; public set; }
    private static Parallel Instance { get; }
    private static Parallel();
    public static int get_ThreadsCount();
    public static void set_ThreadsCount(int value);
    public static void For(int start, int stop, ForLoopBody loopBody);
    private static Parallel get_Instance();
    private void Initialize();
    private void Terminate();
    private void WorkerThread(object index);
}
public class AForge.Point : ValueType {
    public float X;
    public float Y;
    public Point(float x, float y);
    public float DistanceTo(Point anotherPoint);
    public float SquaredDistanceTo(Point anotherPoint);
    public static Point op_Addition(Point point1, Point point2);
    public static Point Add(Point point1, Point point2);
    public static Point op_Subtraction(Point point1, Point point2);
    public static Point Subtract(Point point1, Point point2);
    public static Point op_Addition(Point point, float valueToAdd);
    public static Point Add(Point point, float valueToAdd);
    public static Point op_Subtraction(Point point, float valueToSubtract);
    public static Point Subtract(Point point, float valueToSubtract);
    public static Point op_Multiply(Point point, float factor);
    public static Point Multiply(Point point, float factor);
    public static Point op_Division(Point point, float factor);
    public static Point Divide(Point point, float factor);
    public static bool op_Equality(Point point1, Point point2);
    public static bool op_Inequality(Point point1, Point point2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static IntPoint op_Explicit(Point point);
    public static DoublePoint op_Implicit(Point point);
    public IntPoint Round();
    public virtual string ToString();
    public float EuclideanNorm();
}
public static class AForge.PolishExpression : object {
    public static double Evaluate(string expression, Double[] variables);
}
public class AForge.Range : ValueType {
    private float min;
    private float max;
    public float Min { get; public set; }
    public float Max { get; public set; }
    public float Length { get; }
    public Range(float min, float max);
    public float get_Min();
    public void set_Min(float value);
    public float get_Max();
    public void set_Max(float value);
    public float get_Length();
    public bool IsInside(float x);
    public bool IsInside(Range range);
    public bool IsOverlapping(Range range);
    public IntRange ToIntRange(bool provideInnerRange);
    public static bool op_Equality(Range range1, Range range2);
    public static bool op_Inequality(Range range1, Range range2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class AForge.SystemTools : object {
    public static IntPtr CopyUnmanagedMemory(IntPtr dst, IntPtr src, int count);
    public static Byte* CopyUnmanagedMemory(Byte* dst, Byte* src, int count);
    public static IntPtr SetUnmanagedMemory(IntPtr dst, int filler, int count);
    public static Byte* SetUnmanagedMemory(Byte* dst, int filler, int count);
    private static Byte* memcpy(Byte* dst, Byte* src, int count);
    private static Byte* memset(Byte* dst, int filler, int count);
}
public class AForge.ThreadSafeRandom : Random {
    private object sync;
    public ThreadSafeRandom(int seed);
    public virtual int Next();
    public virtual int Next(int maxValue);
    public virtual int Next(int minValue, int maxValue);
    public virtual void NextBytes(Byte[] buffer);
    public virtual double NextDouble();
}
