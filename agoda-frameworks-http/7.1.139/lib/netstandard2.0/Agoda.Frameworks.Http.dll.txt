public class Agoda.Frameworks.Http.HttpErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <AttemptCount>k__BackingField;
    public Exception Error { get; }
    public int AttemptCount { get; }
    public HttpErrorEventArgs(Exception error, int attemptCount);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public int get_AttemptCount();
}
public class Agoda.Frameworks.Http.HttpErrorResponseException : RouteResException {
    public int Code { get; }
    public HttpErrorResponseException(string url, string combinedUrl, HttpResponseMessage res);
    public int get_Code();
}
public class Agoda.Frameworks.Http.RandomUrlHttpClient : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IResourceManager`1<string> <UrlResourceManager>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    private Func`3<HttpResponseMessage, string, int> _isErrorResponse;
    private ShouldRetryPredicate _shouldRetry;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<HttpErrorEventArgs> OnError;
    public HttpClient HttpClient { get; }
    public IResourceManager`1<string> UrlResourceManager { get; }
    public Nullable`1<TimeSpan> Timeout { get; }
    public RandomUrlHttpClient(String[] baseUrls, Nullable`1<TimeSpan> timeout, int maxRetry, Func`3<HttpResponseMessage, string, int> isErrorResponse);
    public RandomUrlHttpClient(HttpClient httpClient, String[] baseUrls, Nullable`1<TimeSpan> timeout, int maxRetry, Func`3<HttpResponseMessage, string, int> isErrorResponse);
    public RandomUrlHttpClient(HttpClient httpClient, String[] baseUrls, Nullable`1<TimeSpan> timeout, Func`3<HttpResponseMessage, string, int> isErrorResponse, ShouldRetryPredicate shouldRetry);
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public IResourceManager`1<string> get_UrlResourceManager();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<HttpErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<HttpErrorEventArgs> value);
    private static ShouldRetryPredicate GetRetryCountPredicate(int maxRetry);
    public void UpdateBaseUrls(String[] baseUrls);
    private static IResourceManager`1<string> CreateResourceManager(String[] baseUrls);
    public sealed virtual void Dispose();
    public Task`1<HttpResponseMessage> GetAsync(string url);
    public Task`1<HttpResponseMessage> PostAsync(string url, HttpContent content);
    public Task`1<HttpResponseMessage> PutAsync(string url, HttpContent content);
    public Task`1<HttpResponseMessage> PostJsonAsync(string url, string json);
    public Task`1<HttpResponseMessage> PutJsonAsync(string url, string json);
    public Task`1<HttpResponseMessage> DeleteAsync(string url);
    private HttpRequestMessage AddHeaders(HttpRequestMessage requestMessage, Dictionary`2<string, string> headers);
    public Task`1<HttpResponseMessage> SendAsync(string url, Func`2<string, HttpRequestMessage> requestMsg, Dictionary`2<string, string> headers);
    public Task`1<IReadOnlyList`1<RetryActionResult`2<string, HttpResponseMessage>>> SendAsyncWithDiag(string url, Func`2<string, HttpRequestMessage> requestMsg, Dictionary`2<string, string> headers);
    public Task`1<HttpResponseMessage> SendAsync(string url, Func`2<string, HttpRequestMessage> requestMsg, Dictionary`2<string, string> headers, bool isThrow);
    public Task`1<IReadOnlyList`1<RetryActionResult`2<string, HttpResponseMessage>>> SendAsyncWithDiag(string url, Func`2<string, HttpRequestMessage> requestMsg, Dictionary`2<string, string> headers, bool isThrow);
    public Task`1<HttpResponseMessage> SendAsync(string url, Func`2<string, HttpRequestMessage> requestMsg);
    public Task`1<IReadOnlyList`1<RetryActionResult`2<string, HttpResponseMessage>>> SendAsyncWithDiag(string url, Func`2<string, HttpRequestMessage> requestMsg);
    [AsyncStateMachineAttribute("Agoda.Frameworks.Http.RandomUrlHttpClient/<SendAsync>d__34")]
[DebuggerStepThroughAttribute]
private Task`1<HttpResponseMessage> SendAsync(string url, Func`3<string, CancellationToken, Task`1<HttpResponseMessage>> send, bool isThrow);
    private Task`1<IReadOnlyList`1<RetryActionResult`2<string, HttpResponseMessage>>> SendAsyncWithDiag(string url, Func`3<string, CancellationToken, Task`1<HttpResponseMessage>> send, bool isThrow);
    private static bool IsTransientHttpStatusCode(HttpStatusCode code);
    protected virtual void RaiseOnError(Exception error, int attemptCount);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <GetAsync>b__21_0(string uri, CancellationToken cxlToken);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <DeleteAsync>b__26_0(string uri, CancellationToken cxlToken);
}
public class Agoda.Frameworks.Http.RequestTimeoutException : RouteException {
    public RequestTimeoutException(string uri, string absoluteUri, string message, Exception innerException);
}
public class Agoda.Frameworks.Http.RouteException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AbsoluteUri>k__BackingField;
    public string Uri { get; }
    public string AbsoluteUri { get; }
    public RouteException(string uri, string absoluteUri, string message);
    public RouteException(string uri, string absoluteUri, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public string get_AbsoluteUri();
}
public class Agoda.Frameworks.Http.RouteResException : RouteException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; }
    public RouteResException(string uri, string absoluteUri, string message, HttpResponseMessage response);
    public RouteResException(string uri, string absoluteUri, string message, Exception innerException, HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
}
public class Agoda.Frameworks.Http.ServiceUnavailableException : RouteException {
    public ServiceUnavailableException(string uri, string absoluteUri, string message, Exception innerException);
}
public class Agoda.Frameworks.Http.TransientHttpRequestException : RouteResException {
    public HttpStatusCode StatusCode { get; }
    public TransientHttpRequestException(string uri, string absoluteUri, HttpResponseMessage res, string message);
    public HttpStatusCode get_StatusCode();
}
