[EventNameAttribute("rocket.data.apply_database_migrations")]
public class Aiwins.Rocket.Data.ApplyDatabaseMigrationsEto : EtoBase {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    public Nullable`1<Guid> TenantId { get; public set; }
    public string DatabaseName { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
}
public class Aiwins.Rocket.Data.ConnectionStringNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ConnectionStringNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static string GetConnStringName();
    public static string GetConnStringName(Type type);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Data.ConnectionStringResolverExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use ResolveAsync method")]
public static string Resolve(IConnectionStringResolver resolver);
    [ExtensionAttribute]
public static Task`1<string> ResolveAsync(IConnectionStringResolver resolver);
}
public class Aiwins.Rocket.Data.ConnectionStrings : Dictionary`2<string, string> {
    public static string DefaultConnectionStringName;
    public string Default { get; public set; }
    public string get_Default();
    public void set_Default(string value);
}
public class Aiwins.Rocket.Data.DataFilter : object {
    private ConcurrentDictionary`2<Type, object> _filters;
    private IServiceProvider _serviceProvider;
    public DataFilter(IServiceProvider serviceProvider);
    public sealed virtual IDisposable Enable();
    public sealed virtual IDisposable Disable();
    public sealed virtual bool IsEnabled();
    private IDataFilter`1<TFilter> GetFilter();
    [CompilerGeneratedAttribute]
private object <GetFilter>b__6_0();
}
public class Aiwins.Rocket.Data.DataFilter`1 : object {
    private RocketDataFilterOptions _options;
    private AsyncLocal`1<DataFilterState> _filter;
    public bool IsEnabled { get; }
    public DataFilter`1(IOptions`1<RocketDataFilterOptions> options);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual IDisposable Enable();
    public sealed virtual IDisposable Disable();
    private void EnsureInitialized();
    [CompilerGeneratedAttribute]
private void <Enable>b__5_0();
    [CompilerGeneratedAttribute]
private void <Disable>b__6_0();
}
public class Aiwins.Rocket.Data.DataFilterState : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsEnabled { get; public set; }
    public DataFilterState(bool isEnabled);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public DataFilterState Clone();
}
[DefaultMemberAttribute("Item")]
public class Aiwins.Rocket.Data.DataSeedContext : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    public Nullable`1<Guid> TenantId { get; public set; }
    public object Item { get; public set; }
    public Dictionary`2<string, object> Properties { get; }
    public DataSeedContext(Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<Guid> value);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    public virtual DataSeedContext WithProperty(string key, object value);
}
public class Aiwins.Rocket.Data.DataSeedContributorList : TypeList`1<IDataSeedContributor> {
}
public class Aiwins.Rocket.Data.DataSeeder : object {
    [CompilerGeneratedAttribute]
private IHybridServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private RocketDataSeedOptions <Options>k__BackingField;
    protected IHybridServiceScopeFactory ServiceScopeFactory { get; }
    protected RocketDataSeedOptions Options { get; }
    public DataSeeder(IOptions`1<RocketDataSeedOptions> options, IHybridServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
protected IHybridServiceScopeFactory get_ServiceScopeFactory();
    [CompilerGeneratedAttribute]
protected RocketDataSeedOptions get_Options();
    [AsyncStateMachineAttribute("Aiwins.Rocket.Data.DataSeeder/<SeedAsync>d__7")]
[UnitOfWorkAttribute]
public virtual Task SeedAsync(DataSeedContext context);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Data.DataSeederExtensions : object {
    [ExtensionAttribute]
public static Task SeedAsync(IDataSeeder seeder, Nullable`1<Guid> tenantId);
}
public class Aiwins.Rocket.Data.DefaultConnectionStringResolver : object {
    [CompilerGeneratedAttribute]
private RocketDbConnectionOptions <Options>k__BackingField;
    protected RocketDbConnectionOptions Options { get; }
    public DefaultConnectionStringResolver(IOptionsSnapshot`1<RocketDbConnectionOptions> options);
    [CompilerGeneratedAttribute]
protected RocketDbConnectionOptions get_Options();
    [ObsoleteAttribute("Use ResolveAsync method.")]
public virtual string Resolve(string connectionStringName);
    public virtual Task`1<string> ResolveAsync(string connectionStringName);
    private string ResolveInternal(string connectionStringName);
}
public interface Aiwins.Rocket.Data.IConnectionStringResolver {
    [ObsoleteAttribute("Use ResolveAsync method.")]
public abstract virtual string Resolve(string connectionStringName);
    public abstract virtual Task`1<string> ResolveAsync(string connectionStringName);
}
public interface Aiwins.Rocket.Data.IDataFilter {
    public abstract virtual IDisposable Enable();
    public abstract virtual IDisposable Disable();
    public abstract virtual bool IsEnabled();
}
public interface Aiwins.Rocket.Data.IDataFilter`1 {
    public bool IsEnabled { get; }
    public abstract virtual IDisposable Enable();
    public abstract virtual IDisposable Disable();
    public abstract virtual bool get_IsEnabled();
}
public interface Aiwins.Rocket.Data.IDataSeedContributor {
    public abstract virtual Task SeedAsync(DataSeedContext context);
}
public interface Aiwins.Rocket.Data.IDataSeeder {
    public abstract virtual Task SeedAsync(DataSeedContext context);
}
public interface Aiwins.Rocket.Data.IMayHaveOrganizationUnit {
    public Nullable`1<Guid> OrganizationUnitId { get; }
    public abstract virtual Nullable`1<Guid> get_OrganizationUnitId();
}
public interface Aiwins.Rocket.Data.IMustHaveOrganizationUnit {
    public Guid OrganizationUnitId { get; }
    public abstract virtual Guid get_OrganizationUnitId();
}
public interface Aiwins.Rocket.Data.ISoftDelete {
    public bool IsDeleted { get; public set; }
    public abstract virtual bool get_IsDeleted();
    public abstract virtual void set_IsDeleted(bool value);
}
public static class Aiwins.Rocket.Data.RocketCommonDbProperties : object {
    [CompilerGeneratedAttribute]
private static string <DbTablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DbSchema>k__BackingField;
    public static string DbTablePrefix { get; public set; }
    public static string DbSchema { get; public set; }
    private static RocketCommonDbProperties();
    [CompilerGeneratedAttribute]
public static string get_DbTablePrefix();
    [CompilerGeneratedAttribute]
public static void set_DbTablePrefix(string value);
    [CompilerGeneratedAttribute]
public static string get_DbSchema();
    [CompilerGeneratedAttribute]
public static void set_DbSchema(string value);
}
public class Aiwins.Rocket.Data.RocketDatabaseInfo : object {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <MappedConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsedByTenants>k__BackingField;
    public string DatabaseName { get; }
    public HashSet`1<string> MappedConnections { get; }
    public bool IsUsedByTenants { get; public set; }
    internal RocketDatabaseInfo(string databaseName);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_MappedConnections();
    [CompilerGeneratedAttribute]
public bool get_IsUsedByTenants();
    [CompilerGeneratedAttribute]
public void set_IsUsedByTenants(bool value);
}
public class Aiwins.Rocket.Data.RocketDatabaseInfoDictionary : Dictionary`2<string, RocketDatabaseInfo> {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RocketDatabaseInfo> <ConnectionIndex>k__BackingField;
    private Dictionary`2<string, RocketDatabaseInfo> ConnectionIndex { get; private set; }
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RocketDatabaseInfo> get_ConnectionIndex();
    [CompilerGeneratedAttribute]
private void set_ConnectionIndex(Dictionary`2<string, RocketDatabaseInfo> value);
    public RocketDatabaseInfo GetMappedDatabaseOrNull(string connectionStringName);
    public RocketDatabaseInfoDictionary Configure(string databaseName, Action`1<RocketDatabaseInfo> configureAction);
    public void RefreshIndexes();
}
public class Aiwins.Rocket.Data.RocketDataFilterOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, DataFilterState> <DefaultStates>k__BackingField;
    public Dictionary`2<Type, DataFilterState> DefaultStates { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, DataFilterState> get_DefaultStates();
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Aiwins.Rocket.Data.RocketDataModule : RocketModule {
    public virtual void PreConfigureServices(ServiceConfigurationContext context);
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    private static void AutoAddDataSeedContributors(IServiceCollection services);
}
public class Aiwins.Rocket.Data.RocketDataSeedOptions : object {
    [CompilerGeneratedAttribute]
private DataSeedContributorList <Contributors>k__BackingField;
    public DataSeedContributorList Contributors { get; }
    [CompilerGeneratedAttribute]
public DataSeedContributorList get_Contributors();
}
public class Aiwins.Rocket.Data.RocketDbConcurrencyException : RocketException {
    public RocketDbConcurrencyException(string message);
    public RocketDbConcurrencyException(string message, Exception innerException);
}
public class Aiwins.Rocket.Data.RocketDbConnectionOptions : object {
    [CompilerGeneratedAttribute]
private ConnectionStrings <ConnectionStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private RocketDatabaseInfoDictionary <Databases>k__BackingField;
    public ConnectionStrings ConnectionStrings { get; public set; }
    public RocketDatabaseInfoDictionary Databases { get; public set; }
    [CompilerGeneratedAttribute]
public ConnectionStrings get_ConnectionStrings();
    [CompilerGeneratedAttribute]
public void set_ConnectionStrings(ConnectionStrings value);
    [CompilerGeneratedAttribute]
public RocketDatabaseInfoDictionary get_Databases();
    [CompilerGeneratedAttribute]
public void set_Databases(RocketDatabaseInfoDictionary value);
    public string GetConnectionStringOrNull(string connectionStringName, bool fallbackToDatabaseMappings, bool fallbackToDefault);
}
public interface Aiwins.Rocket.Domain.Entities.IHasConcurrencyStamp {
    public string ConcurrencyStamp { get; public set; }
    public abstract virtual string get_ConcurrencyStamp();
    public abstract virtual void set_ConcurrencyStamp(string value);
}
internal class AiwinsRocketData_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
