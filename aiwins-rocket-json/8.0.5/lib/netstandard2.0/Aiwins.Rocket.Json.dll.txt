public interface Aiwins.Rocket.Json.IJsonSerializer {
    public abstract virtual string Serialize(object obj, bool camelCase, bool indented);
    public abstract virtual T Deserialize(string jsonString, bool camelCase);
    public abstract virtual object Deserialize(Type type, string jsonString, bool camelCase);
}
public interface Aiwins.Rocket.Json.IJsonSerializerProvider {
    public abstract virtual bool CanHandle(Type type);
    public abstract virtual string Serialize(object obj, bool camelCase, bool indented);
    public abstract virtual T Deserialize(string jsonString, bool camelCase);
    public abstract virtual object Deserialize(Type type, string jsonString, bool camelCase);
}
public class Aiwins.Rocket.Json.Newtonsoft.RocketJsonIsoDateTimeConverter : IsoDateTimeConverter {
    private IClock _clock;
    public RocketJsonIsoDateTimeConverter(IClock clock, IOptions`1<RocketJsonOptions> rocketJsonOptions);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Aiwins.Rocket.Json.Newtonsoft.RocketNewtonsoftJsonSerializerOptions : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<JsonConverter> <Converters>k__BackingField;
    public ITypeList`1<JsonConverter> Converters { get; }
    [CompilerGeneratedAttribute]
public ITypeList`1<JsonConverter> get_Converters();
}
public class Aiwins.Rocket.Json.Newtonsoft.RocketNewtonsoftJsonSerializerProvider : object {
    private static CamelCaseExceptDictionaryKeysResolver SharedCamelCaseExceptDictionaryKeysResolver;
    [CompilerGeneratedAttribute]
private List`1<JsonConverter> <Converters>k__BackingField;
    protected List`1<JsonConverter> Converters { get; }
    public RocketNewtonsoftJsonSerializerProvider(IOptions`1<RocketNewtonsoftJsonSerializerOptions> options, IServiceProvider serviceProvider);
    private static RocketNewtonsoftJsonSerializerProvider();
    [CompilerGeneratedAttribute]
protected List`1<JsonConverter> get_Converters();
    public sealed virtual bool CanHandle(Type type);
    public sealed virtual string Serialize(object obj, bool camelCase, bool indented);
    public sealed virtual T Deserialize(string jsonString, bool camelCase);
    public sealed virtual object Deserialize(Type type, string jsonString, bool camelCase);
    protected virtual JsonSerializerSettings CreateSerializerSettings(bool camelCase, bool indented);
}
public class Aiwins.Rocket.Json.RocketHybridJsonSerializer : object {
    [CompilerGeneratedAttribute]
private RocketJsonOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    protected RocketJsonOptions Options { get; }
    protected IServiceScopeFactory ServiceScopeFactory { get; }
    public RocketHybridJsonSerializer(IOptions`1<RocketJsonOptions> options, IServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
protected RocketJsonOptions get_Options();
    [CompilerGeneratedAttribute]
protected IServiceScopeFactory get_ServiceScopeFactory();
    public sealed virtual string Serialize(object obj, bool camelCase, bool indented);
    public sealed virtual T Deserialize(string jsonString, bool camelCase);
    public sealed virtual object Deserialize(Type type, string jsonString, bool camelCase);
    protected virtual IJsonSerializerProvider GetSerializerProvider(IServiceProvider serviceProvider, Type type);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Aiwins.Rocket.Json.RocketJsonModule : RocketModule {
    public virtual void ConfigureServices(ServiceConfigurationContext context);
}
public class Aiwins.Rocket.Json.RocketJsonOptions : object {
    [CompilerGeneratedAttribute]
private string <DefaultDateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHybridSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<IJsonSerializerProvider> <Providers>k__BackingField;
    public string DefaultDateTimeFormat { get; public set; }
    public bool UseHybridSerializer { get; public set; }
    public ITypeList`1<IJsonSerializerProvider> Providers { get; }
    [CompilerGeneratedAttribute]
public string get_DefaultDateTimeFormat();
    [CompilerGeneratedAttribute]
public void set_DefaultDateTimeFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseHybridSerializer();
    [CompilerGeneratedAttribute]
public void set_UseHybridSerializer(bool value);
    [CompilerGeneratedAttribute]
public ITypeList`1<IJsonSerializerProvider> get_Providers();
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.ObjectToInferredTypesConverter : JsonConverter`1<object> {
    public virtual object Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, object objectToWrite, JsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketDateTimeConverter : JsonConverter`1<DateTime> {
    private IClock _clock;
    private RocketJsonOptions _options;
    public RocketDateTimeConverter(IClock clock, IOptions`1<RocketJsonOptions> rocketJsonOptions);
    public virtual DateTime Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketHasExtraPropertiesJsonConverter`1 : JsonConverter`1<T> {
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    [CompilerGeneratedAttribute]
private bool <Read>b__0_0(JsonConverter x);
    [CompilerGeneratedAttribute]
private bool <Write>b__1_0(JsonConverter x);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketHasExtraPropertiesJsonConverterFactory : JsonConverterFactory {
    private static ConcurrentDictionary`2<Type, bool> CachedTypes;
    private static RocketHasExtraPropertiesJsonConverterFactory();
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketNullableDateTimeConverter : JsonConverter`1<Nullable`1<DateTime>> {
    private IClock _clock;
    private RocketJsonOptions _options;
    public RocketNullableDateTimeConverter(IClock clock, IOptions`1<RocketJsonOptions> rocketJsonOptions);
    public virtual Nullable`1<DateTime> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Nullable`1<DateTime> value, JsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketStringToBooleanConverter : JsonConverter`1<bool> {
    public virtual bool Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, bool value, JsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketStringToEnumConverter`1 : JsonConverter`1<T> {
    private JsonStringEnumConverter _innerJsonStringEnumConverter;
    public RocketStringToEnumConverter`1(JsonNamingPolicy namingPolicy, bool allowIntegerValues);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    [CompilerGeneratedAttribute]
private bool <Read>b__4_0(JsonConverter x);
    [CompilerGeneratedAttribute]
private bool <Write>b__5_0(JsonConverter x);
}
public class Aiwins.Rocket.Json.SystemTextJson.JsonConverters.RocketStringToEnumFactory : JsonConverterFactory {
    private JsonNamingPolicy _namingPolicy;
    private bool _allowIntegerValues;
    public RocketStringToEnumFactory(JsonNamingPolicy namingPolicy, bool allowIntegerValues);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.RocketSystemTextJsonSerializerOptions : object {
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <JsonSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList <UnsupportedTypes>k__BackingField;
    public JsonSerializerOptions JsonSerializerOptions { get; }
    public ITypeList UnsupportedTypes { get; }
    [CompilerGeneratedAttribute]
public JsonSerializerOptions get_JsonSerializerOptions();
    [CompilerGeneratedAttribute]
public ITypeList get_UnsupportedTypes();
}
public class Aiwins.Rocket.Json.SystemTextJson.RocketSystemTextJsonSerializerOptionsSetup : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    public RocketSystemTextJsonSerializerOptionsSetup(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    public sealed virtual void Configure(RocketSystemTextJsonSerializerOptions options);
}
public class Aiwins.Rocket.Json.SystemTextJson.RocketSystemTextJsonSerializerProvider : object {
    [CompilerGeneratedAttribute]
private RocketSystemTextJsonSerializerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private RocketSystemTextJsonUnsupportedTypeMatcher <RocketSystemTextJsonUnsupportedTypeMatcher>k__BackingField;
    protected RocketSystemTextJsonSerializerOptions Options { get; }
    protected RocketSystemTextJsonUnsupportedTypeMatcher RocketSystemTextJsonUnsupportedTypeMatcher { get; }
    public RocketSystemTextJsonSerializerProvider(IOptions`1<RocketSystemTextJsonSerializerOptions> options, RocketSystemTextJsonUnsupportedTypeMatcher rocketSystemTextJsonUnsupportedTypeMatcher);
    [CompilerGeneratedAttribute]
protected RocketSystemTextJsonSerializerOptions get_Options();
    [CompilerGeneratedAttribute]
protected RocketSystemTextJsonUnsupportedTypeMatcher get_RocketSystemTextJsonUnsupportedTypeMatcher();
    public sealed virtual bool CanHandle(Type type);
    public sealed virtual string Serialize(object obj, bool camelCase, bool indented);
    public sealed virtual T Deserialize(string jsonString, bool camelCase);
    public sealed virtual object Deserialize(Type type, string jsonString, bool camelCase);
    protected virtual JsonSerializerOptions CreateJsonSerializerOptions(bool camelCase, bool indented);
}
public class Aiwins.Rocket.Json.SystemTextJson.RocketSystemTextJsonUnsupportedTypeMatcher : object {
    [CompilerGeneratedAttribute]
private RocketSystemTextJsonSerializerOptions <Options>k__BackingField;
    protected RocketSystemTextJsonSerializerOptions Options { get; }
    public RocketSystemTextJsonUnsupportedTypeMatcher(IOptions`1<RocketSystemTextJsonSerializerOptions> options);
    [CompilerGeneratedAttribute]
protected RocketSystemTextJsonSerializerOptions get_Options();
    public virtual bool Match(Type type);
}
internal class AiwinsRocketJson_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
