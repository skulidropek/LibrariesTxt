public class Aiwins.Rocket.Localization.DefaultLanguageProvider : object {
    [CompilerGeneratedAttribute]
private RocketLocalizationOptions <Options>k__BackingField;
    protected RocketLocalizationOptions Options { get; }
    public DefaultLanguageProvider(IOptions`1<RocketLocalizationOptions> options);
    [CompilerGeneratedAttribute]
protected RocketLocalizationOptions get_Options();
    public sealed virtual Task`1<IReadOnlyList`1<LanguageInfo>> GetLanguagesAsync();
}
[LocalizationResourceNameAttribute("Default")]
public class Aiwins.Rocket.Localization.DefaultResource : object {
}
public class Aiwins.Rocket.Localization.ExceptionHandling.RocketExceptionLocalizationOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <ErrorCodeNamespaceMappings>k__BackingField;
    public Dictionary`2<string, Type> ErrorCodeNamespaceMappings { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Type> get_ErrorCodeNamespaceMappings();
    public void MapCodeNamespace(string errorCodeNamespace, Type type);
}
public interface Aiwins.Rocket.Localization.IInheritedResourceTypesProvider {
    public abstract virtual Type[] GetInheritedResourceTypes();
}
public interface Aiwins.Rocket.Localization.ILanguageInfo {
    public string CultureName { get; }
    public string UiCultureName { get; }
    public string DisplayName { get; }
    public string FlagIcon { get; }
    public abstract virtual string get_CultureName();
    public abstract virtual string get_UiCultureName();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_FlagIcon();
}
public interface Aiwins.Rocket.Localization.ILanguageProvider {
    public abstract virtual Task`1<IReadOnlyList`1<LanguageInfo>> GetLanguagesAsync();
}
public interface Aiwins.Rocket.Localization.ILocalizationDictionary {
    public string CultureName { get; }
    public abstract virtual string get_CultureName();
    public abstract virtual LocalizedString GetOrNull(string name);
    public abstract virtual void Fill(Dictionary`2<string, LocalizedString> dictionary);
}
public interface Aiwins.Rocket.Localization.ILocalizationResourceContributor {
    public abstract virtual void Initialize(LocalizationResourceInitializationContext context);
    public abstract virtual LocalizedString GetOrNull(string cultureName, string name);
    public abstract virtual void Fill(string cultureName, Dictionary`2<string, LocalizedString> dictionary);
}
[AttributeUsageAttribute("4")]
public class Aiwins.Rocket.Localization.InheritResourceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <ResourceTypes>k__BackingField;
    public Type[] ResourceTypes { get; }
    public InheritResourceAttribute(Type[] resourceTypes);
    [CompilerGeneratedAttribute]
public Type[] get_ResourceTypes();
    public virtual Type[] GetInheritedResourceTypes();
}
public interface Aiwins.Rocket.Localization.IStringLocalizerSupportsInheritance {
    public abstract virtual IEnumerable`1<LocalizedString> GetAllStrings(bool includeParentCultures, bool includeBaseLocalizers);
}
public interface Aiwins.Rocket.Localization.ITemplateLocalizer {
    public abstract virtual string Localize(IStringLocalizer localizer, string text);
}
public static class Aiwins.Rocket.Localization.Json.JsonLocalizationDictionaryBuilder : object {
    private static JsonSerializerSettings SharedJsonSerializerSettings;
    private static JsonLocalizationDictionaryBuilder();
    public static ILocalizationDictionary BuildFromFile(string filePath);
    public static ILocalizationDictionary BuildFromJsonString(string jsonString);
}
public class Aiwins.Rocket.Localization.Json.JsonLocalizationFile : object {
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Texts>k__BackingField;
    public string Culture { get; public set; }
    public Dictionary`2<string, string> Texts { get; }
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Texts();
}
public class Aiwins.Rocket.Localization.LanguageInfo : object {
    [CompilerGeneratedAttribute]
private string <CultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UiCultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlagIcon>k__BackingField;
    public string CultureName { get; protected set; }
    public string UiCultureName { get; protected set; }
    public string DisplayName { get; protected set; }
    public string FlagIcon { get; public set; }
    public LanguageInfo(string cultureName, string uiCultureName, string displayName, string flagIcon);
    [CompilerGeneratedAttribute]
public virtual string get_CultureName();
    [CompilerGeneratedAttribute]
protected virtual void set_CultureName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UiCultureName();
    [CompilerGeneratedAttribute]
protected virtual void set_UiCultureName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
protected virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FlagIcon();
    [CompilerGeneratedAttribute]
public virtual void set_FlagIcon(string value);
    public virtual void ChangeCulture(string cultureName, string uiCultureName, string displayName);
    private void ChangeCultureInternal(string cultureName, string uiCultureName, string displayName);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Localization.LanguageInfoExtensions : object {
    [ExtensionAttribute]
public static T FindByCulture(IEnumerable`1<T> languages, string cultureName, string uiCultureName);
}
public class Aiwins.Rocket.Localization.LocalizationResource : object {
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultCultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizationResourceContributorList <Contributors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <BaseResourceTypes>k__BackingField;
    public Type ResourceType { get; }
    public string ResourceName { get; }
    public string DefaultCultureName { get; public set; }
    public LocalizationResourceContributorList Contributors { get; }
    public List`1<Type> BaseResourceTypes { get; }
    public LocalizationResource(Type resourceType, string defaultCultureName, ILocalizationResourceContributor initialContributor);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    public string get_ResourceName();
    [CompilerGeneratedAttribute]
public string get_DefaultCultureName();
    [CompilerGeneratedAttribute]
public void set_DefaultCultureName(string value);
    [CompilerGeneratedAttribute]
public LocalizationResourceContributorList get_Contributors();
    [CompilerGeneratedAttribute]
public List`1<Type> get_BaseResourceTypes();
    protected virtual void AddBaseResourceTypes();
}
public class Aiwins.Rocket.Localization.LocalizationResourceContributorList : List`1<ILocalizationResourceContributor> {
    public LocalizedString GetOrNull(string cultureName, string name);
    public void Fill(string cultureName, Dictionary`2<string, LocalizedString> dictionary);
}
public class Aiwins.Rocket.Localization.LocalizationResourceDictionary : Dictionary`2<Type, LocalizationResource> {
    public LocalizationResource Add(string defaultCultureName);
    public LocalizationResource Add(Type resourceType, string defaultCultureName);
    public LocalizationResource Get();
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Localization.LocalizationResourceExtensions : object {
    [ExtensionAttribute]
public static LocalizationResource AddVirtualJson(LocalizationResource localizationResource, string virtualPath);
    [ExtensionAttribute]
public static LocalizationResource AddBaseTypes(LocalizationResource localizationResource, Type[] types);
}
public class Aiwins.Rocket.Localization.LocalizationResourceInitializationContext : object {
    [CompilerGeneratedAttribute]
private LocalizationResource <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public LocalizationResource Resource { get; }
    public IServiceProvider ServiceProvider { get; }
    public LocalizationResourceInitializationContext(LocalizationResource resource, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public LocalizationResource get_Resource();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
}
public static class Aiwins.Rocket.Localization.LocalizationSettingHelper : object {
    public static ValueTuple`2<string, string> ParseLanguageSetting(string settingValue);
}
public static class Aiwins.Rocket.Localization.LocalizationSettingNames : object {
    public static string Prefix;
    public static string DefaultLanguage;
}
public class Aiwins.Rocket.Localization.LocalizationSettingProvider : SettingDefinitionProvider {
    public virtual void Define(ISettingDefinitionContext context);
    private static LocalizableString L(string name);
}
[LocalizationResourceNameAttribute("RocketLocalization")]
public class Aiwins.Rocket.Localization.Resources.RocketLocalization.RocketLocalizationResource : object {
}
[DefaultMemberAttribute("Item")]
public class Aiwins.Rocket.Localization.RocketDictionaryBasedStringLocalizer : object {
    [CompilerGeneratedAttribute]
private LocalizationResource <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IStringLocalizer> <BaseLocalizers>k__BackingField;
    [CompilerGeneratedAttribute]
private RocketLocalizationOptions <LocalizationOptions>k__BackingField;
    public LocalizationResource Resource { get; }
    public List`1<IStringLocalizer> BaseLocalizers { get; }
    public LocalizedString Item { get; }
    public LocalizedString Item { get; }
    public RocketLocalizationOptions LocalizationOptions { get; }
    public RocketDictionaryBasedStringLocalizer(LocalizationResource resource, List`1<IStringLocalizer> baseLocalizers, RocketLocalizationOptions localizationOptions);
    [CompilerGeneratedAttribute]
public LocalizationResource get_Resource();
    [CompilerGeneratedAttribute]
public List`1<IStringLocalizer> get_BaseLocalizers();
    public virtual LocalizedString get_Item(string name);
    public virtual LocalizedString get_Item(string name, Object[] arguments);
    [CompilerGeneratedAttribute]
public RocketLocalizationOptions get_LocalizationOptions();
    public sealed virtual IEnumerable`1<LocalizedString> GetAllStrings(bool includeParentCultures);
    public sealed virtual IEnumerable`1<LocalizedString> GetAllStrings(bool includeParentCultures, bool includeBaseLocalizers);
    [ObsoleteAttribute("This method is obsolete. Use `CurrentCulture` and `CurrentUICulture` instead.")]
public IStringLocalizer WithCulture(CultureInfo culture);
    protected virtual LocalizedString GetLocalizedStringFormatted(string name, Object[] arguments);
    protected virtual LocalizedString GetLocalizedStringFormatted(string name, string cultureName, Object[] arguments);
    protected virtual LocalizedString GetLocalizedString(string name);
    protected virtual LocalizedString GetLocalizedString(string name, string cultureName);
    protected virtual LocalizedString GetLocalizedStringOrNull(string name, string cultureName, bool tryDefaults);
    protected virtual IReadOnlyList`1<LocalizedString> GetAllStrings(string cultureName, bool includeParentCultures, bool includeBaseLocalizers);
}
public static class Aiwins.Rocket.Localization.RocketInternalLocalizationHelper : object {
    public static string LocalizeWithFallback(IStringLocalizer[] localizers, String[] keys, string defaultValue);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Aiwins.Rocket.Localization.RocketLocalizationModule : RocketModule {
    public virtual void ConfigureServices(ServiceConfigurationContext context);
}
public class Aiwins.Rocket.Localization.RocketLocalizationOptions : object {
    [CompilerGeneratedAttribute]
private LocalizationResourceDictionary <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DefaultResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<ILocalizationResourceContributor> <GlobalContributors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LanguageInfo> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<NameValue>> <LanguagesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<NameValue>> <LanguageFilesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CulturesMap>k__BackingField;
    public LocalizationResourceDictionary Resources { get; }
    public Type DefaultResourceType { get; public set; }
    public ITypeList`1<ILocalizationResourceContributor> GlobalContributors { get; }
    public List`1<LanguageInfo> Languages { get; }
    public Dictionary`2<string, List`1<NameValue>> LanguagesMap { get; }
    public Dictionary`2<string, List`1<NameValue>> LanguageFilesMap { get; }
    public Dictionary`2<string, string> CulturesMap { get; }
    [CompilerGeneratedAttribute]
public LocalizationResourceDictionary get_Resources();
    [CompilerGeneratedAttribute]
public Type get_DefaultResourceType();
    [CompilerGeneratedAttribute]
public void set_DefaultResourceType(Type value);
    [CompilerGeneratedAttribute]
public ITypeList`1<ILocalizationResourceContributor> get_GlobalContributors();
    [CompilerGeneratedAttribute]
public List`1<LanguageInfo> get_Languages();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<NameValue>> get_LanguagesMap();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<NameValue>> get_LanguageFilesMap();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CulturesMap();
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Localization.RocketLocalizationOptionsExtensions : object {
    [ExtensionAttribute]
public static RocketLocalizationOptions AddLanguagesMapOrUpdate(RocketLocalizationOptions localizationOptions, string packageName, NameValue[] maps);
    [ExtensionAttribute]
public static string GetLanguagesMap(RocketLocalizationOptions localizationOptions, string packageName, string language);
    [ExtensionAttribute]
public static string GetCurrentUICultureLanguagesMap(RocketLocalizationOptions localizationOptions, string packageName);
    [ExtensionAttribute]
public static RocketLocalizationOptions AddLanguageFilesMapOrUpdate(RocketLocalizationOptions localizationOptions, string packageName, NameValue[] maps);
    [ExtensionAttribute]
public static string GetLanguageFilesMap(RocketLocalizationOptions localizationOptions, string packageName, string language);
    [ExtensionAttribute]
public static string GetCurrentUICultureLanguageFilesMap(RocketLocalizationOptions localizationOptions, string packageName);
    private static void AddOrUpdate(IDictionary`2<string, List`1<NameValue>> maps, string packageName, NameValue value);
    [ExtensionAttribute]
public static string GetCulturesMap(RocketLocalizationOptions localizationOptions, string cultureName);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Localization.RocketStringLocalizerExtensions : object {
    [ExtensionAttribute]
public static IStringLocalizer GetInternalLocalizer(IStringLocalizer stringLocalizer);
    [ExtensionAttribute]
public static IEnumerable`1<LocalizedString> GetAllStrings(IStringLocalizer stringLocalizer, bool includeParentCultures, bool includeBaseLocalizers);
}
public class Aiwins.Rocket.Localization.RocketStringLocalizerFactory : object {
    [CompilerGeneratedAttribute]
private RocketLocalizationOptions <RocketLocalizationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceManagerStringLocalizerFactory <InnerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, StringLocalizerCacheItem> <LocalizerCache>k__BackingField;
    protected internal RocketLocalizationOptions RocketLocalizationOptions { get; }
    protected ResourceManagerStringLocalizerFactory InnerFactory { get; }
    protected IServiceProvider ServiceProvider { get; }
    protected ConcurrentDictionary`2<Type, StringLocalizerCacheItem> LocalizerCache { get; }
    public RocketStringLocalizerFactory(ResourceManagerStringLocalizerFactory innerFactory, IOptions`1<RocketLocalizationOptions> rocketLocalizationOptions, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected internal RocketLocalizationOptions get_RocketLocalizationOptions();
    [CompilerGeneratedAttribute]
protected ResourceManagerStringLocalizerFactory get_InnerFactory();
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<Type, StringLocalizerCacheItem> get_LocalizerCache();
    public virtual IStringLocalizer Create(Type resourceType);
    private StringLocalizerCacheItem CreateStringLocalizerCacheItem(LocalizationResource resource);
    public virtual IStringLocalizer Create(string baseName, string location);
    internal static void Replace(IServiceCollection services);
    public sealed virtual IStringLocalizer CreateDefaultOrNull();
}
public class Aiwins.Rocket.Localization.StaticLocalizationDictionary : object {
    [CompilerGeneratedAttribute]
private string <CultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, LocalizedString> <Dictionary>k__BackingField;
    public string CultureName { get; }
    protected Dictionary`2<string, LocalizedString> Dictionary { get; }
    public StaticLocalizationDictionary(string cultureName, Dictionary`2<string, LocalizedString> dictionary);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CultureName();
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, LocalizedString> get_Dictionary();
    public virtual LocalizedString GetOrNull(string name);
    public sealed virtual void Fill(Dictionary`2<string, LocalizedString> dictionary);
}
public class Aiwins.Rocket.Localization.TemplateLocalizer : object {
    public sealed virtual string Localize(IStringLocalizer localizer, string text);
}
public class Aiwins.Rocket.Localization.VirtualFiles.Json.JsonVirtualFileLocalizationResourceContributor : VirtualFileLocalizationResourceContributorBase {
    public JsonVirtualFileLocalizationResourceContributor(string virtualPath);
    protected virtual bool CanParseFile(IFileInfo file);
    protected virtual ILocalizationDictionary CreateDictionaryFromFileContent(string jsonString);
}
public abstract class Aiwins.Rocket.Localization.VirtualFiles.VirtualFileLocalizationResourceContributorBase : object {
    private string _virtualPath;
    private IVirtualFileProvider _virtualFileProvider;
    private Dictionary`2<string, ILocalizationDictionary> _dictionaries;
    private bool _subscribedForChanges;
    private object _syncObj;
    protected VirtualFileLocalizationResourceContributorBase(string virtualPath);
    public sealed virtual void Initialize(LocalizationResourceInitializationContext context);
    public sealed virtual LocalizedString GetOrNull(string cultureName, string name);
    public sealed virtual void Fill(string cultureName, Dictionary`2<string, LocalizedString> dictionary);
    private Dictionary`2<string, ILocalizationDictionary> GetDictionaries();
    private Dictionary`2<string, ILocalizationDictionary> CreateDictionaries();
    protected abstract virtual bool CanParseFile(IFileInfo file);
    protected virtual ILocalizationDictionary CreateDictionaryFromFile(IFileInfo file);
    protected abstract virtual ILocalizationDictionary CreateDictionaryFromFileContent(string fileContent);
    [CompilerGeneratedAttribute]
private IChangeToken <GetDictionaries>b__9_0();
    [CompilerGeneratedAttribute]
private void <GetDictionaries>b__9_1();
}
internal class AiwinsRocketLocalization_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
