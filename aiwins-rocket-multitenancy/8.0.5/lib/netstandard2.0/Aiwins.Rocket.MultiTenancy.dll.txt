public class Aiwins.Rocket.MultiTenancy.ActionTenantResolveContributor : TenantResolveContributorBase {
    public static string ContributorName;
    private Action`1<ITenantResolveContext> _resolveAction;
    public string Name { get; }
    public ActionTenantResolveContributor(Action`1<ITenantResolveContext> resolveAction);
    public virtual string get_Name();
    public virtual Task ResolveAsync(ITenantResolveContext context);
}
public class Aiwins.Rocket.MultiTenancy.AsyncLocalCurrentTenantAccessor : object {
    private AsyncLocal`1<BasicTenantInfo> _currentScope;
    public BasicTenantInfo Current { get; public set; }
    public sealed virtual BasicTenantInfo get_Current();
    public sealed virtual void set_Current(BasicTenantInfo value);
}
public class Aiwins.Rocket.MultiTenancy.BasicTenantInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Nullable`1<Guid> TenantId { get; }
    public string Name { get; }
    public BasicTenantInfo(Nullable`1<Guid> tenantId, string name);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
public string get_Name();
}
[DependencyAttribute]
public class Aiwins.Rocket.MultiTenancy.ConfigurationStore.DefaultTenantStore : object {
    private RocketDefaultTenantStoreOptions _options;
    public DefaultTenantStore(IOptionsSnapshot`1<RocketDefaultTenantStoreOptions> options);
    public sealed virtual Task`1<TenantConfiguration> FindAsync(string name);
    public sealed virtual Task`1<TenantConfiguration> FindAsync(Guid id);
    public sealed virtual TenantConfiguration Find(string name);
    public sealed virtual TenantConfiguration Find(Guid id);
}
public class Aiwins.Rocket.MultiTenancy.ConfigurationStore.RocketDefaultTenantStoreOptions : object {
    [CompilerGeneratedAttribute]
private TenantConfiguration[] <Tenants>k__BackingField;
    public TenantConfiguration[] Tenants { get; public set; }
    [CompilerGeneratedAttribute]
public TenantConfiguration[] get_Tenants();
    [CompilerGeneratedAttribute]
public void set_Tenants(TenantConfiguration[] value);
}
public class Aiwins.Rocket.MultiTenancy.CurrentTenant : object {
    private ICurrentTenantAccessor _currentTenantAccessor;
    public bool IsAvailable { get; }
    public Nullable`1<Guid> Id { get; }
    public string Name { get; }
    public CurrentTenant(ICurrentTenantAccessor currentTenantAccessor);
    public virtual bool get_IsAvailable();
    public virtual Nullable`1<Guid> get_Id();
    public sealed virtual string get_Name();
    public sealed virtual IDisposable Change(Nullable`1<Guid> id, string name);
    private IDisposable SetCurrent(Nullable`1<Guid> tenantId, string name);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.MultiTenancy.CurrentTenantExtensions : object {
    [ExtensionAttribute]
public static Guid GetId(ICurrentTenant currentTenant);
    [ExtensionAttribute]
public static MultiTenancySides GetMultiTenancySide(ICurrentTenant currentTenant);
}
public class Aiwins.Rocket.MultiTenancy.CurrentUserTenantResolveContributor : TenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    public virtual Task ResolveAsync(ITenantResolveContext context);
}
public interface Aiwins.Rocket.MultiTenancy.ICurrentTenant {
    public bool IsAvailable { get; }
    public Nullable`1<Guid> Id { get; }
    public string Name { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual Nullable`1<Guid> get_Id();
    public abstract virtual string get_Name();
    public abstract virtual IDisposable Change(Nullable`1<Guid> id, string name);
}
public interface Aiwins.Rocket.MultiTenancy.ICurrentTenantAccessor {
    public BasicTenantInfo Current { get; public set; }
    public abstract virtual BasicTenantInfo get_Current();
    public abstract virtual void set_Current(BasicTenantInfo value);
}
[AttributeUsageAttribute("32767")]
public class Aiwins.Rocket.MultiTenancy.IgnoreMultiTenancyAttribute : Attribute {
}
public interface Aiwins.Rocket.MultiTenancy.IMultiTenant {
    public Nullable`1<Guid> TenantId { get; }
    public abstract virtual Nullable`1<Guid> get_TenantId();
}
public interface Aiwins.Rocket.MultiTenancy.ITenantConfigurationProvider {
    public abstract virtual Task`1<TenantConfiguration> GetAsync(bool saveResolveResult);
}
public interface Aiwins.Rocket.MultiTenancy.ITenantResolveContext {
    public string TenantIdOrName { get; public set; }
    public bool Handled { get; public set; }
    public abstract virtual string get_TenantIdOrName();
    public abstract virtual void set_TenantIdOrName(string value);
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
}
public interface Aiwins.Rocket.MultiTenancy.ITenantResolveContributor {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task ResolveAsync(ITenantResolveContext context);
}
public interface Aiwins.Rocket.MultiTenancy.ITenantResolver {
    public abstract virtual Task`1<TenantResolveResult> ResolveTenantIdOrNameAsync();
}
public interface Aiwins.Rocket.MultiTenancy.ITenantResolveResultAccessor {
    public TenantResolveResult Result { get; public set; }
    public abstract virtual TenantResolveResult get_Result();
    public abstract virtual void set_Result(TenantResolveResult value);
}
public interface Aiwins.Rocket.MultiTenancy.ITenantStore {
    public abstract virtual Task`1<TenantConfiguration> FindAsync(string name);
    public abstract virtual Task`1<TenantConfiguration> FindAsync(Guid id);
    [ObsoleteAttribute("Use FindAsync method.")]
public abstract virtual TenantConfiguration Find(string name);
    [ObsoleteAttribute("Use FindAsync method.")]
public abstract virtual TenantConfiguration Find(Guid id);
}
[FlagsAttribute]
public enum Aiwins.Rocket.MultiTenancy.MultiTenancyDatabaseStyle : Enum {
    public int value__;
    public static MultiTenancyDatabaseStyle Shared;
    public static MultiTenancyDatabaseStyle PerTenant;
    public static MultiTenancyDatabaseStyle Hybrid;
}
[FlagsAttribute]
public enum Aiwins.Rocket.MultiTenancy.MultiTenancySides : Enum {
    public int value__;
    public static MultiTenancySides Tenant;
    public static MultiTenancySides Host;
    public static MultiTenancySides Both;
}
[DependencyAttribute]
public class Aiwins.Rocket.MultiTenancy.MultiTenantConnectionStringResolver : DefaultConnectionStringResolver {
    private ICurrentTenant _currentTenant;
    private IServiceProvider _serviceProvider;
    public MultiTenantConnectionStringResolver(IOptionsSnapshot`1<RocketDbConnectionOptions> options, ICurrentTenant currentTenant, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Aiwins.Rocket.MultiTenancy.MultiTenantConnectionStringResolver/<ResolveAsync>d__3")]
public virtual Task`1<string> ResolveAsync(string connectionStringName);
    [ObsoleteAttribute("Use ResolveAsync method.")]
public virtual string Resolve(string connectionStringName);
    [AsyncStateMachineAttribute("Aiwins.Rocket.MultiTenancy.MultiTenantConnectionStringResolver/<FindTenantConfigurationAsync>d__5")]
protected virtual Task`1<TenantConfiguration> FindTenantConfigurationAsync(Guid tenantId);
    [ObsoleteAttribute("Use FindTenantConfigurationAsync method.")]
protected virtual TenantConfiguration FindTenantConfiguration(Guid tenantId);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<string> <>n__0(string connectionStringName);
}
public class Aiwins.Rocket.MultiTenancy.NullTenantResolveResultAccessor : object {
    public TenantResolveResult Result { get; public set; }
    public sealed virtual TenantResolveResult get_Result();
    public sealed virtual void set_Result(TenantResolveResult value);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Aiwins.Rocket.MultiTenancy.RocketMultiTenancyModule : RocketModule {
    public virtual void ConfigureServices(ServiceConfigurationContext context);
}
public class Aiwins.Rocket.MultiTenancy.RocketMultiTenancyOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiTenancyDatabaseStyle <DatabaseStyle>k__BackingField;
    public bool IsEnabled { get; public set; }
    public MultiTenancyDatabaseStyle DatabaseStyle { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public MultiTenancyDatabaseStyle get_DatabaseStyle();
    [CompilerGeneratedAttribute]
public void set_DatabaseStyle(MultiTenancyDatabaseStyle value);
}
public class Aiwins.Rocket.MultiTenancy.RocketTenantResolveOptions : object {
    [CompilerGeneratedAttribute]
private List`1<ITenantResolveContributor> <TenantResolvers>k__BackingField;
    public List`1<ITenantResolveContributor> TenantResolvers { get; }
    [CompilerGeneratedAttribute]
public List`1<ITenantResolveContributor> get_TenantResolvers();
}
public class Aiwins.Rocket.MultiTenancy.TenantConfiguration : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionStrings <ConnectionStrings>k__BackingField;
    public Guid Id { get; public set; }
    public string Name { get; public set; }
    public bool IsActive { get; public set; }
    public ConnectionStrings ConnectionStrings { get; public set; }
    public TenantConfiguration(Guid id, string name);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public ConnectionStrings get_ConnectionStrings();
    [CompilerGeneratedAttribute]
public void set_ConnectionStrings(ConnectionStrings value);
}
public class Aiwins.Rocket.MultiTenancy.TenantConfigurationProvider : object {
    [CompilerGeneratedAttribute]
private ITenantResolver <TenantResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantStore <TenantStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantResolveResultAccessor <TenantResolveResultAccessor>k__BackingField;
    protected ITenantResolver TenantResolver { get; }
    protected ITenantStore TenantStore { get; }
    protected ITenantResolveResultAccessor TenantResolveResultAccessor { get; }
    public TenantConfigurationProvider(ITenantResolver tenantResolver, ITenantStore tenantStore, ITenantResolveResultAccessor tenantResolveResultAccessor);
    [CompilerGeneratedAttribute]
protected virtual ITenantResolver get_TenantResolver();
    [CompilerGeneratedAttribute]
protected virtual ITenantStore get_TenantStore();
    [CompilerGeneratedAttribute]
protected virtual ITenantResolveResultAccessor get_TenantResolveResultAccessor();
    [AsyncStateMachineAttribute("Aiwins.Rocket.MultiTenancy.TenantConfigurationProvider/<GetAsync>d__10")]
public virtual Task`1<TenantConfiguration> GetAsync(bool saveResolveResult);
    [AsyncStateMachineAttribute("Aiwins.Rocket.MultiTenancy.TenantConfigurationProvider/<FindTenantAsync>d__11")]
protected virtual Task`1<TenantConfiguration> FindTenantAsync(string tenantIdOrName);
}
[EventNameAttribute("rocket.multi_tenancy.tenant.connection_string.updated")]
public class Aiwins.Rocket.MultiTenancy.TenantConnectionStringUpdatedEto : EtoBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionStringName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewValue>k__BackingField;
    public Guid Id { get; public set; }
    public string Name { get; public set; }
    public string ConnectionStringName { get; public set; }
    public string OldValue { get; public set; }
    public string NewValue { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionStringName();
    [CompilerGeneratedAttribute]
public void set_ConnectionStringName(string value);
    [CompilerGeneratedAttribute]
public string get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(string value);
    [CompilerGeneratedAttribute]
public string get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(string value);
}
[EventNameAttribute("rocket.multi_tenancy.tenant.created")]
public class Aiwins.Rocket.MultiTenancy.TenantCreatedEto : EtoBase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Guid Id { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Aiwins.Rocket.MultiTenancy.TenantResolveContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantIdOrName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public string TenantIdOrName { get; public set; }
    public bool Handled { get; public set; }
    public TenantResolveContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TenantIdOrName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantIdOrName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Handled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Handled(bool value);
    public bool HasResolvedTenantOrHost();
}
public abstract class Aiwins.Rocket.MultiTenancy.TenantResolveContributorBase : object {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task ResolveAsync(ITenantResolveContext context);
}
public class Aiwins.Rocket.MultiTenancy.TenantResolver : object {
    private IServiceProvider _serviceProvider;
    private RocketTenantResolveOptions _options;
    public TenantResolver(IOptions`1<RocketTenantResolveOptions> options, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Aiwins.Rocket.MultiTenancy.TenantResolver/<ResolveTenantIdOrNameAsync>d__3")]
public virtual Task`1<TenantResolveResult> ResolveTenantIdOrNameAsync();
}
public class Aiwins.Rocket.MultiTenancy.TenantResolverConsts : object {
    public static string DefaultTenantKey;
}
public class Aiwins.Rocket.MultiTenancy.TenantResolveResult : object {
    [CompilerGeneratedAttribute]
private string <TenantIdOrName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AppliedResolvers>k__BackingField;
    public string TenantIdOrName { get; public set; }
    public List`1<string> AppliedResolvers { get; }
    [CompilerGeneratedAttribute]
public string get_TenantIdOrName();
    [CompilerGeneratedAttribute]
public void set_TenantIdOrName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AppliedResolvers();
}
internal class AiwinsRocketMultiTenancy_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
[ExtensionAttribute]
public static class System.Security.Principal.RocketMultiTenancyClaimsIdentityExtensions : object {
    [ExtensionAttribute]
public static MultiTenancySides GetMultiTenancySide(IIdentity identity);
    [ExtensionAttribute]
public static MultiTenancySides GetMultiTenancySide(ClaimsPrincipal principal);
}
