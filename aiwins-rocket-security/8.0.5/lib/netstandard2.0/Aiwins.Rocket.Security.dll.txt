public class Aiwins.Rocket.Authorization.RocketAuthorizationException : RocketException {
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public LogLevel LogLevel { get; public set; }
    public string Code { get; }
    public RocketAuthorizationException(SerializationInfo serializationInfo, StreamingContext context);
    public RocketAuthorizationException(string message);
    public RocketAuthorizationException(string message, Exception innerException);
    public RocketAuthorizationException(string message, string code, Exception innerException);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public string get_Code();
    public RocketAuthorizationException WithData(string name, object value);
}
public class Aiwins.Rocket.Clients.CurrentClient : object {
    private ICurrentPrincipalAccessor _principalAccessor;
    public string Id { get; }
    public bool IsAuthenticated { get; }
    public CurrentClient(ICurrentPrincipalAccessor principalAccessor);
    public virtual string get_Id();
    public virtual bool get_IsAuthenticated();
}
public interface Aiwins.Rocket.Clients.ICurrentClient {
    public string Id { get; }
    public bool IsAuthenticated { get; }
    public abstract virtual string get_Id();
    public abstract virtual bool get_IsAuthenticated();
}
public abstract class Aiwins.Rocket.Security.Claims.CurrentPrincipalAccessorBase : object {
    private AsyncLocal`1<ClaimsPrincipal> _currentPrincipal;
    public ClaimsPrincipal Principal { get; }
    public sealed virtual ClaimsPrincipal get_Principal();
    protected abstract virtual ClaimsPrincipal GetClaimsPrincipal();
    public virtual IDisposable Change(ClaimsPrincipal principal);
    private IDisposable SetCurrent(ClaimsPrincipal principal);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Security.Claims.CurrentPrincipalAccessorExtensions : object {
    [ExtensionAttribute]
public static IDisposable Change(ICurrentPrincipalAccessor currentPrincipalAccessor, Claim claim);
    [ExtensionAttribute]
public static IDisposable Change(ICurrentPrincipalAccessor currentPrincipalAccessor, IEnumerable`1<Claim> claims);
    [ExtensionAttribute]
public static IDisposable Change(ICurrentPrincipalAccessor currentPrincipalAccessor, ClaimsIdentity claimsIdentity);
}
public interface Aiwins.Rocket.Security.Claims.ICurrentPrincipalAccessor {
    public ClaimsPrincipal Principal { get; }
    public abstract virtual ClaimsPrincipal get_Principal();
    public abstract virtual IDisposable Change(ClaimsPrincipal principal);
}
public interface Aiwins.Rocket.Security.Claims.IRocketClaimsPrincipalContributor {
    public abstract virtual Task ContributeAsync(RocketClaimsPrincipalContributorContext context);
}
public interface Aiwins.Rocket.Security.Claims.IRocketClaimsPrincipalFactory {
    public abstract virtual Task`1<ClaimsPrincipal> CreateAsync(ClaimsPrincipal existsClaimsPrincipal);
}
public class Aiwins.Rocket.Security.Claims.RocketClaimsPrincipalContributorContext : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <ClaimsPrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public ClaimsPrincipal ClaimsPrincipal { get; }
    public IServiceProvider ServiceProvider { get; }
    public RocketClaimsPrincipalContributorContext(ClaimsPrincipal claimsIdentity, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_ClaimsPrincipal();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
}
public class Aiwins.Rocket.Security.Claims.RocketClaimsPrincipalFactory : object {
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private RocketClaimsPrincipalFactoryOptions <Options>k__BackingField;
    public static string AuthenticationType { get; }
    protected IServiceScopeFactory ServiceScopeFactory { get; }
    protected RocketClaimsPrincipalFactoryOptions Options { get; }
    public RocketClaimsPrincipalFactory(IServiceScopeFactory serviceScopeFactory, IOptions`1<RocketClaimsPrincipalFactoryOptions> rocketClaimOptions);
    public static string get_AuthenticationType();
    [CompilerGeneratedAttribute]
protected IServiceScopeFactory get_ServiceScopeFactory();
    [CompilerGeneratedAttribute]
protected RocketClaimsPrincipalFactoryOptions get_Options();
    [AsyncStateMachineAttribute("Aiwins.Rocket.Security.Claims.RocketClaimsPrincipalFactory/<CreateAsync>d__9")]
public virtual Task`1<ClaimsPrincipal> CreateAsync(ClaimsPrincipal existsClaimsPrincipal);
}
public class Aiwins.Rocket.Security.Claims.RocketClaimsPrincipalFactoryOptions : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<IRocketClaimsPrincipalContributor> <Contributors>k__BackingField;
    public ITypeList`1<IRocketClaimsPrincipalContributor> Contributors { get; }
    [CompilerGeneratedAttribute]
public ITypeList`1<IRocketClaimsPrincipalContributor> get_Contributors();
}
public static class Aiwins.Rocket.Security.Claims.RocketClaimTypes : object {
    [CompilerGeneratedAttribute]
private static string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <RoleId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <OrganizationUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <OrganizationUnitId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <OrganizationUnitIdWithChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <EmailVerified>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <PhoneNumberVerified>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <EditionId>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ClientId>k__BackingField;
    public static string UserName { get; public set; }
    public static string UserId { get; public set; }
    public static string Name { get; public set; }
    public static string Role { get; public set; }
    public static string RoleId { get; public set; }
    public static string OrganizationUnit { get; public set; }
    public static string OrganizationUnitId { get; public set; }
    public static string OrganizationUnitIdWithChildren { get; public set; }
    public static string Email { get; public set; }
    public static string EmailVerified { get; public set; }
    public static string PhoneNumber { get; public set; }
    public static string PhoneNumberVerified { get; public set; }
    public static string TenantId { get; public set; }
    public static string EditionId { get; public set; }
    public static string ClientId { get; public set; }
    private static RocketClaimTypes();
    [CompilerGeneratedAttribute]
public static string get_UserName();
    [CompilerGeneratedAttribute]
public static void set_UserName(string value);
    [CompilerGeneratedAttribute]
public static string get_UserId();
    [CompilerGeneratedAttribute]
public static void set_UserId(string value);
    [CompilerGeneratedAttribute]
public static string get_Name();
    [CompilerGeneratedAttribute]
public static void set_Name(string value);
    [CompilerGeneratedAttribute]
public static string get_Role();
    [CompilerGeneratedAttribute]
public static void set_Role(string value);
    [CompilerGeneratedAttribute]
public static string get_RoleId();
    [CompilerGeneratedAttribute]
public static void set_RoleId(string value);
    [CompilerGeneratedAttribute]
public static string get_OrganizationUnit();
    [CompilerGeneratedAttribute]
public static void set_OrganizationUnit(string value);
    [CompilerGeneratedAttribute]
public static string get_OrganizationUnitId();
    [CompilerGeneratedAttribute]
public static void set_OrganizationUnitId(string value);
    [CompilerGeneratedAttribute]
public static string get_OrganizationUnitIdWithChildren();
    [CompilerGeneratedAttribute]
public static void set_OrganizationUnitIdWithChildren(string value);
    [CompilerGeneratedAttribute]
public static string get_Email();
    [CompilerGeneratedAttribute]
public static void set_Email(string value);
    [CompilerGeneratedAttribute]
public static string get_EmailVerified();
    [CompilerGeneratedAttribute]
public static void set_EmailVerified(string value);
    [CompilerGeneratedAttribute]
public static string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public static void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public static string get_PhoneNumberVerified();
    [CompilerGeneratedAttribute]
public static void set_PhoneNumberVerified(string value);
    [CompilerGeneratedAttribute]
public static string get_TenantId();
    [CompilerGeneratedAttribute]
public static void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public static string get_EditionId();
    [CompilerGeneratedAttribute]
public static void set_EditionId(string value);
    [CompilerGeneratedAttribute]
public static string get_ClientId();
    [CompilerGeneratedAttribute]
public static void set_ClientId(string value);
}
public class Aiwins.Rocket.Security.Claims.ThreadCurrentPrincipalAccessor : CurrentPrincipalAccessorBase {
    protected virtual ClaimsPrincipal GetClaimsPrincipal();
}
public interface Aiwins.Rocket.Security.Encryption.IStringEncryptionService {
    public abstract virtual string Encrypt(string plainText, string passPhrase, Byte[] salt);
    public abstract virtual string Decrypt(string cipherText, string passPhrase, Byte[] salt);
}
public class Aiwins.Rocket.Security.Encryption.RocketStringEncryptionOptions : object {
    [CompilerGeneratedAttribute]
private int <Keysize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultPassPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitVectorBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DefaultSalt>k__BackingField;
    public int Keysize { get; public set; }
    public string DefaultPassPhrase { get; public set; }
    public Byte[] InitVectorBytes { get; public set; }
    public Byte[] DefaultSalt { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Keysize();
    [CompilerGeneratedAttribute]
public void set_Keysize(int value);
    [CompilerGeneratedAttribute]
public string get_DefaultPassPhrase();
    [CompilerGeneratedAttribute]
public void set_DefaultPassPhrase(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitVectorBytes();
    [CompilerGeneratedAttribute]
public void set_InitVectorBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_DefaultSalt();
    [CompilerGeneratedAttribute]
public void set_DefaultSalt(Byte[] value);
}
public class Aiwins.Rocket.Security.Encryption.StringEncryptionService : object {
    [CompilerGeneratedAttribute]
private RocketStringEncryptionOptions <Options>k__BackingField;
    protected RocketStringEncryptionOptions Options { get; }
    public StringEncryptionService(IOptions`1<RocketStringEncryptionOptions> options);
    [CompilerGeneratedAttribute]
protected RocketStringEncryptionOptions get_Options();
    public virtual string Encrypt(string plainText, string passPhrase, Byte[] salt);
    public virtual string Decrypt(string cipherText, string passPhrase, Byte[] salt);
}
public class Aiwins.Rocket.Security.RocketSecurityModule : RocketModule {
    public virtual void PostConfigureServices(ServiceConfigurationContext context);
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    private static void AutoAddClaimsPrincipalContributors(IServiceCollection services);
}
public class Aiwins.Rocket.SecurityLog.DefaultSecurityLogManager : object {
    [CompilerGeneratedAttribute]
private RocketSecurityLogOptions <SecurityLogOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecurityLogStore <SecurityLogStore>k__BackingField;
    protected RocketSecurityLogOptions SecurityLogOptions { get; }
    protected ISecurityLogStore SecurityLogStore { get; }
    public DefaultSecurityLogManager(IOptions`1<RocketSecurityLogOptions> securityLogOptions, ISecurityLogStore securityLogStore);
    [CompilerGeneratedAttribute]
protected RocketSecurityLogOptions get_SecurityLogOptions();
    [CompilerGeneratedAttribute]
protected ISecurityLogStore get_SecurityLogStore();
    [AsyncStateMachineAttribute("Aiwins.Rocket.SecurityLog.DefaultSecurityLogManager/<SaveAsync>d__7")]
public sealed virtual Task SaveAsync(Action`1<SecurityLogInfo> saveAction);
    protected virtual Task`1<SecurityLogInfo> CreateAsync();
}
public interface Aiwins.Rocket.SecurityLog.ISecurityLogManager {
    public abstract virtual Task SaveAsync(Action`1<SecurityLogInfo> saveAction);
}
public interface Aiwins.Rocket.SecurityLog.ISecurityLogStore {
    public abstract virtual Task SaveAsync(SecurityLogInfo securityLogInfo);
}
public class Aiwins.Rocket.SecurityLog.RocketSecurityLogOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    public bool IsEnabled { get; public set; }
    public string ApplicationName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
}
public class Aiwins.Rocket.SecurityLog.SecurityLogInfo : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtraProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public string ApplicationName { get; public set; }
    public string Identity { get; public set; }
    public string Action { get; public set; }
    public Dictionary`2<string, object> ExtraProperties { get; public set; }
    public Nullable`1<Guid> UserId { get; public set; }
    public string UserName { get; public set; }
    public Nullable`1<Guid> TenantId { get; public set; }
    public string TenantName { get; public set; }
    public string ClientId { get; public set; }
    public string CorrelationId { get; public set; }
    public string ClientIpAddress { get; public set; }
    public string BrowserInfo { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ExtraProperties();
    [CompilerGeneratedAttribute]
public void set_ExtraProperties(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_TenantName();
    [CompilerGeneratedAttribute]
public void set_TenantName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientIpAddress();
    [CompilerGeneratedAttribute]
public void set_ClientIpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_BrowserInfo();
    [CompilerGeneratedAttribute]
public void set_BrowserInfo(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTime value);
    public virtual string ToString();
}
public class Aiwins.Rocket.SecurityLog.SimpleSecurityLogStore : object {
    [CompilerGeneratedAttribute]
private ILogger`1<SimpleSecurityLogStore> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private RocketSecurityLogOptions <SecurityLogOptions>k__BackingField;
    public ILogger`1<SimpleSecurityLogStore> Logger { get; public set; }
    protected RocketSecurityLogOptions SecurityLogOptions { get; }
    public SimpleSecurityLogStore(ILogger`1<SimpleSecurityLogStore> logger, IOptions`1<RocketSecurityLogOptions> securityLogOptions);
    [CompilerGeneratedAttribute]
public ILogger`1<SimpleSecurityLogStore> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<SimpleSecurityLogStore> value);
    [CompilerGeneratedAttribute]
protected RocketSecurityLogOptions get_SecurityLogOptions();
    public sealed virtual Task SaveAsync(SecurityLogInfo securityLogInfo);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Users.CurrentUserExtensions : object {
    [ExtensionAttribute]
public static string FindClaimValue(ICurrentUser currentUser, string claimType);
    [ExtensionAttribute]
public static T FindClaimValue(ICurrentUser currentUser, string claimType);
    [ExtensionAttribute]
public static Guid GetId(ICurrentUser currentUser);
}
public class Aiwins.Rocket.Users.DefaultCurrentUser : object {
    private static Claim[] EmptyClaimsArray;
    private ICurrentPrincipalAccessor _principalAccessor;
    public bool IsAuthenticated { get; }
    public Nullable`1<Guid> Id { get; }
    public string Name { get; }
    public string UserName { get; }
    public string PhoneNumber { get; }
    public bool PhoneNumberVerified { get; }
    public string Email { get; }
    public bool EmailVerified { get; }
    public Nullable`1<Guid> TenantId { get; }
    public String[] Roles { get; }
    public Guid[] RoleIds { get; }
    public String[] OrganizationUnits { get; }
    public Guid[] OrganizationUnitIds { get; }
    public Guid[] OrganizationUnitIdsWithChildren { get; }
    public DefaultCurrentUser(ICurrentPrincipalAccessor principalAccessor);
    private static DefaultCurrentUser();
    public virtual bool get_IsAuthenticated();
    public virtual Nullable`1<Guid> get_Id();
    public virtual string get_Name();
    public virtual string get_UserName();
    public virtual string get_PhoneNumber();
    public virtual bool get_PhoneNumberVerified();
    public virtual string get_Email();
    public virtual bool get_EmailVerified();
    public virtual Nullable`1<Guid> get_TenantId();
    public virtual String[] get_Roles();
    public virtual Guid[] get_RoleIds();
    public virtual String[] get_OrganizationUnits();
    public virtual Guid[] get_OrganizationUnitIds();
    public virtual Guid[] get_OrganizationUnitIdsWithChildren();
    public virtual Guid[] GetOrganizationUnitWithChildrenIds();
    public virtual Claim FindClaim(string claimType);
    public virtual Claim[] FindClaims(string claimType);
    public virtual Claim[] GetAllClaims();
    public virtual bool IsInRole(string roleName);
    public virtual bool IsInRole(Guid roleId);
    public virtual bool IsInOrganizationUnit(string organizationName);
    public virtual bool IsInOrganizationUnit(Guid organizationId);
}
public interface Aiwins.Rocket.Users.ICurrentUser {
    public bool IsAuthenticated { get; }
    public Nullable`1<Guid> Id { get; }
    public string Name { get; }
    public string UserName { get; }
    public string PhoneNumber { get; }
    public bool PhoneNumberVerified { get; }
    public string Email { get; }
    public bool EmailVerified { get; }
    public Nullable`1<Guid> TenantId { get; }
    public String[] Roles { get; }
    public Guid[] RoleIds { get; }
    public String[] OrganizationUnits { get; }
    public Guid[] OrganizationUnitIds { get; }
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual Nullable`1<Guid> get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_UserName();
    public abstract virtual string get_PhoneNumber();
    public abstract virtual bool get_PhoneNumberVerified();
    public abstract virtual string get_Email();
    public abstract virtual bool get_EmailVerified();
    public abstract virtual Nullable`1<Guid> get_TenantId();
    public abstract virtual String[] get_Roles();
    public abstract virtual Guid[] get_RoleIds();
    public abstract virtual String[] get_OrganizationUnits();
    public abstract virtual Guid[] get_OrganizationUnitIds();
    public abstract virtual Claim FindClaim(string claimType);
    public abstract virtual Claim[] FindClaims(string claimType);
    public abstract virtual Claim[] GetAllClaims();
    public abstract virtual bool IsInRole(string roleName);
    public abstract virtual bool IsInRole(Guid roleId);
    public abstract virtual bool IsInOrganizationUnit(string organizationName);
    public abstract virtual bool IsInOrganizationUnit(Guid organizationId);
    public abstract virtual Guid[] GetOrganizationUnitWithChildrenIds();
}
internal class AiwinsRocketSecurity_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
[ExtensionAttribute]
public static class System.Security.Principal.RocketClaimsIdentityExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<Guid> FindUserId(ClaimsPrincipal principal);
    [ExtensionAttribute]
public static Nullable`1<Guid> FindUserId(IIdentity identity);
    [ExtensionAttribute]
public static Nullable`1<Guid> FindTenantId(ClaimsPrincipal principal);
    [ExtensionAttribute]
public static Nullable`1<Guid> FindTenantId(IIdentity identity);
    [ExtensionAttribute]
public static string FindClientId(ClaimsPrincipal principal);
    [ExtensionAttribute]
public static string FindClientId(IIdentity identity);
    [ExtensionAttribute]
public static Nullable`1<Guid> FindEditionId(ClaimsPrincipal principal);
    [ExtensionAttribute]
public static Nullable`1<Guid> FindEditionId(IIdentity identity);
    [ExtensionAttribute]
public static ClaimsIdentity AddIfNotContains(ClaimsIdentity claimsIdentity, Claim claim);
    [ExtensionAttribute]
public static ClaimsIdentity AddOrReplace(ClaimsIdentity claimsIdentity, Claim claim);
    [ExtensionAttribute]
public static ClaimsPrincipal AddIdentityIfNotContains(ClaimsPrincipal principal, ClaimsIdentity identity);
}
