public class Aiwins.Rocket.Linq.AsyncQueryableExecuter : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAsyncQueryableProvider> <Providers>k__BackingField;
    protected IEnumerable`1<IAsyncQueryableProvider> Providers { get; }
    public AsyncQueryableExecuter(IEnumerable`1<IAsyncQueryableProvider> providers);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<IAsyncQueryableProvider> get_Providers();
    protected virtual IAsyncQueryableProvider FindProvider(IQueryable`1<T> queryable);
    public sealed virtual Task`1<bool> ContainsAsync(IQueryable`1<T> queryable, T item, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AllAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> MinAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> MinAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> MaxAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> MaxAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> SumAsync(IQueryable`1<decimal> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> SumAsync(IQueryable`1<int> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> SumAsync(IQueryable`1<long> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> SumAsync(IQueryable`1<double> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> SumAsync(IQueryable`1<float> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> AverageAsync(IQueryable`1<decimal> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<int> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<long> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<double> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> AverageAsync(IQueryable`1<float> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T[]> ToArrayAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
}
public interface Aiwins.Rocket.Linq.IAsyncQueryableExecuter {
    public abstract virtual Task`1<bool> ContainsAsync(IQueryable`1<T> queryable, T item, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AllAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> MinAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> MinAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> MaxAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> MaxAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T[]> ToArrayAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
}
public interface Aiwins.Rocket.Linq.IAsyncQueryableProvider {
    public abstract virtual bool CanExecute(IQueryable`1<T> queryable);
    public abstract virtual Task`1<bool> ContainsAsync(IQueryable`1<T> queryable, T item, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AllAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> MinAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> MinAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> MaxAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> MaxAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<float> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public abstract virtual Task`1<T[]> ToArrayAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
}
public class Aiwins.Rocket.Threading.AmbientDataContextAmbientScopeProvider`1 : object {
    [CompilerGeneratedAttribute]
private ILogger`1<AmbientDataContextAmbientScopeProvider`1<T>> <Logger>k__BackingField;
    private static ConcurrentDictionary`2<string, ScopeItem<T>> ScopeDictionary;
    private IAmbientDataContext _dataContext;
    public ILogger`1<AmbientDataContextAmbientScopeProvider`1<T>> Logger { get; public set; }
    public AmbientDataContextAmbientScopeProvider`1(IAmbientDataContext dataContext);
    private static AmbientDataContextAmbientScopeProvider`1();
    [CompilerGeneratedAttribute]
public ILogger`1<AmbientDataContextAmbientScopeProvider`1<T>> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<AmbientDataContextAmbientScopeProvider`1<T>> value);
    public sealed virtual T GetValue(string contextKey);
    public sealed virtual IDisposable BeginScope(string contextKey, T value);
    private ScopeItem<T> GetCurrentItem(string contextKey);
}
public class Aiwins.Rocket.Threading.AsyncLocalAmbientDataContext : object {
    private static ConcurrentDictionary`2<string, AsyncLocal`1<object>> AsyncLocalDictionary;
    private static AsyncLocalAmbientDataContext();
    public sealed virtual void SetData(string key, object value);
    public sealed virtual object GetData(string key);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Threading.AsyncLocalSimpleScopeExtensions : object {
    [ExtensionAttribute]
public static IDisposable SetScoped(AsyncLocal`1<T> asyncLocal, T value);
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Threading.CancellationTokenProviderExtensions : object {
    [ExtensionAttribute]
public static CancellationToken FallbackToProvider(ICancellationTokenProvider provider, CancellationToken prefferedValue);
}
public interface Aiwins.Rocket.Threading.IAmbientDataContext {
    public abstract virtual void SetData(string key, object value);
    public abstract virtual object GetData(string key);
}
public interface Aiwins.Rocket.Threading.IAmbientScopeProvider`1 {
    public abstract virtual T GetValue(string contextKey);
    public abstract virtual IDisposable BeginScope(string contextKey, T value);
}
public interface Aiwins.Rocket.Threading.ICancellationTokenProvider {
    public CancellationToken Token { get; }
    public abstract virtual CancellationToken get_Token();
}
public interface Aiwins.Rocket.Threading.IRunnable {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
public class Aiwins.Rocket.Threading.NullCancellationTokenProvider : object {
    [CompilerGeneratedAttribute]
private static NullCancellationTokenProvider <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    public static NullCancellationTokenProvider Instance { get; }
    public CancellationToken Token { get; }
    private static NullCancellationTokenProvider();
    [CompilerGeneratedAttribute]
public static NullCancellationTokenProvider get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_Token();
}
public class Aiwins.Rocket.Threading.RocketAsyncTimer : object {
    public Func`2<RocketAsyncTimer, Task> Elapsed;
    [CompilerGeneratedAttribute]
private int <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunOnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<RocketAsyncTimer> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionNotifier <ExceptionNotifier>k__BackingField;
    private Timer _taskTimer;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _performingTasks;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isRunning;
    public int Period { get; public set; }
    public bool RunOnStart { get; public set; }
    public ILogger`1<RocketAsyncTimer> Logger { get; public set; }
    public IExceptionNotifier ExceptionNotifier { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(int value);
    [CompilerGeneratedAttribute]
public bool get_RunOnStart();
    [CompilerGeneratedAttribute]
public void set_RunOnStart(bool value);
    [CompilerGeneratedAttribute]
public ILogger`1<RocketAsyncTimer> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<RocketAsyncTimer> value);
    [CompilerGeneratedAttribute]
public IExceptionNotifier get_ExceptionNotifier();
    [CompilerGeneratedAttribute]
public void set_ExceptionNotifier(IExceptionNotifier value);
    public void Start(CancellationToken cancellationToken);
    public void Stop(CancellationToken cancellationToken);
    private void TimerCallBack(object state);
    [AsyncStateMachineAttribute("Aiwins.Rocket.Threading.RocketAsyncTimer/<Timer_Elapsed>d__24")]
private Task Timer_Elapsed();
}
public class Aiwins.Rocket.Threading.RocketThreadingModule : RocketModule {
    public virtual void ConfigureServices(ServiceConfigurationContext context);
}
public class Aiwins.Rocket.Threading.RocketTimer : object {
    [CompilerGeneratedAttribute]
private EventHandler Elapsed;
    [CompilerGeneratedAttribute]
private int <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunOnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<RocketTimer> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionNotifier <ExceptionNotifier>k__BackingField;
    private Timer _taskTimer;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _performingTasks;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isRunning;
    public int Period { get; public set; }
    public bool RunOnStart { get; public set; }
    public ILogger`1<RocketTimer> Logger { get; public set; }
    public IExceptionNotifier ExceptionNotifier { get; public set; }
    [CompilerGeneratedAttribute]
public void add_Elapsed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Elapsed(EventHandler value);
    [CompilerGeneratedAttribute]
public int get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(int value);
    [CompilerGeneratedAttribute]
public bool get_RunOnStart();
    [CompilerGeneratedAttribute]
public void set_RunOnStart(bool value);
    [CompilerGeneratedAttribute]
public ILogger`1<RocketTimer> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<RocketTimer> value);
    [CompilerGeneratedAttribute]
public IExceptionNotifier get_ExceptionNotifier();
    [CompilerGeneratedAttribute]
public void set_ExceptionNotifier(IExceptionNotifier value);
    public void Start(CancellationToken cancellationToken);
    public void Stop(CancellationToken cancellationToken);
    private void TimerCallBack(object state);
}
internal class AiwinsRocketThreading_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
