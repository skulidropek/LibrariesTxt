public class Aiwins.Rocket.Timing.Clock : object {
    [CompilerGeneratedAttribute]
private RocketClockOptions <Options>k__BackingField;
    protected RocketClockOptions Options { get; }
    public DateTime Now { get; }
    public DateTimeKind Kind { get; }
    public bool SupportsMultipleTimezone { get; }
    public Clock(IOptions`1<RocketClockOptions> options);
    [CompilerGeneratedAttribute]
protected RocketClockOptions get_Options();
    public virtual DateTime get_Now();
    public virtual DateTimeKind get_Kind();
    public virtual bool get_SupportsMultipleTimezone();
    public virtual DateTime Normalize(DateTime dateTime);
}
[AttributeUsageAttribute("2180")]
public class Aiwins.Rocket.Timing.DisableDateTimeNormalizationAttribute : Attribute {
}
public interface Aiwins.Rocket.Timing.IClock {
    public DateTime Now { get; }
    public DateTimeKind Kind { get; }
    public bool SupportsMultipleTimezone { get; }
    public abstract virtual DateTime get_Now();
    public abstract virtual DateTimeKind get_Kind();
    public abstract virtual bool get_SupportsMultipleTimezone();
    public abstract virtual DateTime Normalize(DateTime dateTime);
}
public interface Aiwins.Rocket.Timing.ITimezoneProvider {
    public abstract virtual List`1<NameValue> GetWindowsTimezones();
    public abstract virtual List`1<NameValue> GetIanaTimezones();
    public abstract virtual string WindowsToIana(string windowsTimeZoneId);
    public abstract virtual string IanaToWindows(string ianaTimeZoneName);
    public abstract virtual TimeZoneInfo GetTimeZoneInfo(string windowsOrIanaTimeZoneId);
}
[LocalizationResourceNameAttribute("RocketTiming")]
public class Aiwins.Rocket.Timing.Localization.Resources.RocketTiming.RocketTimingResource : object {
}
public class Aiwins.Rocket.Timing.RocketClockOptions : object {
    [CompilerGeneratedAttribute]
private DateTimeKind <Kind>k__BackingField;
    public DateTimeKind Kind { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(DateTimeKind value);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Aiwins.Rocket.Timing.RocketTimingModule : RocketModule {
    public virtual void ConfigureServices(ServiceConfigurationContext context);
}
public static class Aiwins.Rocket.Timing.TimingSettingNames : object {
    public static string Prefix;
    public static string TimeZone;
}
public class Aiwins.Rocket.Timing.TimingSettingProvider : SettingDefinitionProvider {
    public virtual void Define(ISettingDefinitionContext context);
    private static LocalizableString L(string name);
}
public class Aiwins.Rocket.Timing.TZConvertTimezoneProvider : object {
    public virtual List`1<NameValue> GetWindowsTimezones();
    public virtual List`1<NameValue> GetIanaTimezones();
    public virtual string WindowsToIana(string windowsTimeZoneId);
    public virtual string IanaToWindows(string ianaTimeZoneName);
    public virtual TimeZoneInfo GetTimeZoneInfo(string windowsOrIanaTimeZoneId);
}
internal class AiwinsRocketTiming_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
