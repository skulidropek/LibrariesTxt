[ExposeServicesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Aiwins.Rocket.Uow.AmbientUnitOfWork : object {
    private AsyncLocal`1<IUnitOfWork> _currentUow;
    public IUnitOfWork UnitOfWork { get; }
    public sealed virtual IUnitOfWork get_UnitOfWork();
    public sealed virtual void SetUnitOfWork(IUnitOfWork unitOfWork);
}
internal class Aiwins.Rocket.Uow.ChildUnitOfWork : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<UnitOfWorkFailedEventArgs> Failed;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnitOfWorkEventArgs> Disposed;
    private IUnitOfWork _parent;
    public Guid Id { get; }
    public IRocketUnitOfWorkOptions Options { get; }
    public IUnitOfWork Outer { get; }
    public bool IsReserved { get; }
    public bool IsDisposed { get; }
    public bool IsCompleted { get; }
    public string ReservationName { get; }
    public IServiceProvider ServiceProvider { get; }
    public Dictionary`2<string, object> Items { get; }
    public ChildUnitOfWork(IUnitOfWork parent);
    public sealed virtual Guid get_Id();
    public sealed virtual IRocketUnitOfWorkOptions get_Options();
    public sealed virtual IUnitOfWork get_Outer();
    public sealed virtual bool get_IsReserved();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual string get_ReservationName();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler`1<UnitOfWorkEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler`1<UnitOfWorkEventArgs> value);
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual Dictionary`2<string, object> get_Items();
    public sealed virtual void SetOuter(IUnitOfWork outer);
    public sealed virtual void Initialize(RocketUnitOfWorkOptions options);
    public sealed virtual void Reserve(string reservationName);
    public sealed virtual Task SaveChangesAsync(CancellationToken cancellationToken);
    public sealed virtual Task CompleteAsync(CancellationToken cancellationToken);
    public sealed virtual Task RollbackAsync(CancellationToken cancellationToken);
    public sealed virtual void OnCompleted(Func`1<Task> handler);
    public sealed virtual IDatabaseApi FindDatabaseApi(string key);
    public sealed virtual void AddDatabaseApi(string key, IDatabaseApi api);
    public sealed virtual IDatabaseApi GetOrAddDatabaseApi(string key, Func`1<IDatabaseApi> factory);
    public sealed virtual ITransactionApi FindTransactionApi(string key);
    public sealed virtual void AddTransactionApi(string key, ITransactionApi api);
    public sealed virtual ITransactionApi GetOrAddTransactionApi(string key, Func`1<ITransactionApi> factory);
    public sealed virtual void Dispose();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_0(object sender, UnitOfWorkFailedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_1(object sender, UnitOfWorkEventArgs args);
}
public interface Aiwins.Rocket.Uow.IAmbientUnitOfWork {
}
public interface Aiwins.Rocket.Uow.IDatabaseApi {
}
public interface Aiwins.Rocket.Uow.IDatabaseApiContainer {
    public abstract virtual IDatabaseApi FindDatabaseApi(string key);
    public abstract virtual void AddDatabaseApi(string key, IDatabaseApi api);
    public abstract virtual IDatabaseApi GetOrAddDatabaseApi(string key, Func`1<IDatabaseApi> factory);
}
public interface Aiwins.Rocket.Uow.IRocketUnitOfWorkOptions {
    public bool IsTransactional { get; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; }
    public Nullable`1<int> Timeout { get; }
    public abstract virtual bool get_IsTransactional();
    public abstract virtual Nullable`1<IsolationLevel> get_IsolationLevel();
    public abstract virtual Nullable`1<int> get_Timeout();
}
public interface Aiwins.Rocket.Uow.ISupportsRollback {
    public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
}
public interface Aiwins.Rocket.Uow.ISupportsSavingChanges {
    public abstract virtual Task SaveChangesAsync(CancellationToken cancellationToken);
}
public interface Aiwins.Rocket.Uow.ITransactionApi {
    public abstract virtual Task CommitAsync();
}
public interface Aiwins.Rocket.Uow.ITransactionApiContainer {
    public abstract virtual ITransactionApi FindTransactionApi(string key);
    public abstract virtual void AddTransactionApi(string key, ITransactionApi api);
    public abstract virtual ITransactionApi GetOrAddTransactionApi(string key, Func`1<ITransactionApi> factory);
}
public interface Aiwins.Rocket.Uow.IUnitOfWork {
    public Guid Id { get; }
    public Dictionary`2<string, object> Items { get; }
    public IRocketUnitOfWorkOptions Options { get; }
    public IUnitOfWork Outer { get; }
    public bool IsReserved { get; }
    public bool IsDisposed { get; }
    public bool IsCompleted { get; }
    public string ReservationName { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual Dictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disposed(EventHandler`1<UnitOfWorkEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disposed(EventHandler`1<UnitOfWorkEventArgs> value);
    public abstract virtual IRocketUnitOfWorkOptions get_Options();
    public abstract virtual IUnitOfWork get_Outer();
    public abstract virtual bool get_IsReserved();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual string get_ReservationName();
    public abstract virtual void SetOuter(IUnitOfWork outer);
    public abstract virtual void Initialize(RocketUnitOfWorkOptions options);
    public abstract virtual void Reserve(string reservationName);
    public abstract virtual Task SaveChangesAsync(CancellationToken cancellationToken);
    public abstract virtual Task CompleteAsync(CancellationToken cancellationToken);
    public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
    public abstract virtual void OnCompleted(Func`1<Task> handler);
}
public interface Aiwins.Rocket.Uow.IUnitOfWorkAccessor {
    public IUnitOfWork UnitOfWork { get; }
    public abstract virtual IUnitOfWork get_UnitOfWork();
    public abstract virtual void SetUnitOfWork(IUnitOfWork unitOfWork);
}
public interface Aiwins.Rocket.Uow.IUnitOfWorkEnabled {
}
public interface Aiwins.Rocket.Uow.IUnitOfWorkManager {
    public IUnitOfWork Current { get; }
    public abstract virtual IUnitOfWork get_Current();
    public abstract virtual IUnitOfWork Begin(RocketUnitOfWorkOptions options, bool requiresNew);
    public abstract virtual IUnitOfWork Reserve(string reservationName, bool requiresNew);
    public abstract virtual void BeginReserved(string reservationName, RocketUnitOfWorkOptions options);
    public abstract virtual bool TryBeginReserved(string reservationName, RocketUnitOfWorkOptions options);
}
public interface Aiwins.Rocket.Uow.IUnitOfWorkManagerAccessor {
    public IUnitOfWorkManager UnitOfWorkManager { get; }
    public abstract virtual IUnitOfWorkManager get_UnitOfWorkManager();
}
public interface Aiwins.Rocket.Uow.IUnitOfWorkTransactionBehaviourProvider {
    public Nullable`1<bool> IsTransactional { get; }
    public abstract virtual Nullable`1<bool> get_IsTransactional();
}
public class Aiwins.Rocket.Uow.NullUnitOfWorkTransactionBehaviourProvider : object {
    public Nullable`1<bool> IsTransactional { get; }
    public sealed virtual Nullable`1<bool> get_IsTransactional();
}
public class Aiwins.Rocket.Uow.RocketUnitOfWorkDefaultOptions : object {
    [CompilerGeneratedAttribute]
private UnitOfWorkTransactionBehavior <TransactionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IsolationLevel> <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    public UnitOfWorkTransactionBehavior TransactionBehavior { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public UnitOfWorkTransactionBehavior get_TransactionBehavior();
    [CompilerGeneratedAttribute]
public void set_TransactionBehavior(UnitOfWorkTransactionBehavior value);
    [CompilerGeneratedAttribute]
public Nullable`1<IsolationLevel> get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    internal RocketUnitOfWorkOptions Normalize(RocketUnitOfWorkOptions options);
    public bool CalculateIsTransactional(bool autoValue);
}
public class Aiwins.Rocket.Uow.RocketUnitOfWorkModule : RocketModule {
    public virtual void PreConfigureServices(ServiceConfigurationContext context);
}
public class Aiwins.Rocket.Uow.RocketUnitOfWorkOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsTransactional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IsolationLevel> <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    public bool IsTransactional { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public RocketUnitOfWorkOptions(bool isTransactional, Nullable`1<IsolationLevel> isolationLevel, Nullable`1<int> timeout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTransactional();
    [CompilerGeneratedAttribute]
public void set_IsTransactional(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IsolationLevel> get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    public RocketUnitOfWorkOptions Clone();
}
public class Aiwins.Rocket.Uow.UnitOfWork : object {
    [CompilerGeneratedAttribute]
private static bool <EnableObsoleteDbContextCreationWarning>k__BackingField;
    public static string UnitOfWorkReservationName;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IRocketUnitOfWorkOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWork <Outer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReserved>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReservationName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`1<Task>> <CompletedHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnitOfWorkFailedEventArgs> Failed;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnitOfWorkEventArgs> Disposed;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Items>k__BackingField;
    private Dictionary`2<string, IDatabaseApi> _databaseApis;
    private Dictionary`2<string, ITransactionApi> _transactionApis;
    private RocketUnitOfWorkDefaultOptions _defaultOptions;
    private Exception _exception;
    private bool _isCompleting;
    private bool _isRolledback;
    public static bool EnableObsoleteDbContextCreationWarning { get; }
    public Guid Id { get; }
    public IRocketUnitOfWorkOptions Options { get; private set; }
    public IUnitOfWork Outer { get; private set; }
    public bool IsReserved { get; public set; }
    public bool IsDisposed { get; private set; }
    public bool IsCompleted { get; private set; }
    public string ReservationName { get; public set; }
    protected List`1<Func`1<Task>> CompletedHandlers { get; }
    public IServiceProvider ServiceProvider { get; }
    public Dictionary`2<string, object> Items { get; }
    public UnitOfWork(IServiceProvider serviceProvider, IOptions`1<RocketUnitOfWorkDefaultOptions> options);
    [CompilerGeneratedAttribute]
public static bool get_EnableObsoleteDbContextCreationWarning();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IRocketUnitOfWorkOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(IRocketUnitOfWorkOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitOfWork get_Outer();
    [CompilerGeneratedAttribute]
private void set_Outer(IUnitOfWork value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReserved();
    [CompilerGeneratedAttribute]
public void set_IsReserved(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReservationName();
    [CompilerGeneratedAttribute]
public void set_ReservationName(string value);
    [CompilerGeneratedAttribute]
protected List`1<Func`1<Task>> get_CompletedHandlers();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Failed(EventHandler`1<UnitOfWorkFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler`1<UnitOfWorkEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler`1<UnitOfWorkEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Items();
    public virtual void Initialize(RocketUnitOfWorkOptions options);
    public virtual void Reserve(string reservationName);
    public virtual void SetOuter(IUnitOfWork outer);
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWork/<SaveChangesAsync>d__56")]
public virtual Task SaveChangesAsync(CancellationToken cancellationToken);
    public IReadOnlyList`1<IDatabaseApi> GetAllActiveDatabaseApis();
    public IReadOnlyList`1<ITransactionApi> GetAllActiveTransactionApis();
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWork/<CompleteAsync>d__59")]
public virtual Task CompleteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWork/<RollbackAsync>d__60")]
public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public sealed virtual IDatabaseApi FindDatabaseApi(string key);
    public sealed virtual void AddDatabaseApi(string key, IDatabaseApi api);
    public sealed virtual IDatabaseApi GetOrAddDatabaseApi(string key, Func`1<IDatabaseApi> factory);
    public sealed virtual ITransactionApi FindTransactionApi(string key);
    public sealed virtual void AddTransactionApi(string key, ITransactionApi api);
    public sealed virtual ITransactionApi GetOrAddTransactionApi(string key, Func`1<ITransactionApi> factory);
    public sealed virtual void OnCompleted(Func`1<Task> handler);
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWork/<OnCompletedAsync>d__68")]
protected virtual Task OnCompletedAsync();
    protected virtual void OnFailed();
    protected virtual void OnDisposed();
    public virtual void Dispose();
    private void DisposeTransactions();
    private void PreventMultipleComplete();
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWork/<RollbackAllAsync>d__74")]
protected virtual Task RollbackAllAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWork/<CommitTransactionsAsync>d__75")]
protected virtual Task CommitTransactionsAsync();
    public virtual string ToString();
}
[AttributeUsageAttribute("1092")]
public class Aiwins.Rocket.Uow.UnitOfWorkAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsTransactional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IsolationLevel> <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public Nullable`1<bool> IsTransactional { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public Nullable`1<IsolationLevel> IsolationLevel { get; public set; }
    public bool IsDisabled { get; public set; }
    public UnitOfWorkAttribute(bool isTransactional);
    public UnitOfWorkAttribute(bool isTransactional, IsolationLevel isolationLevel);
    public UnitOfWorkAttribute(bool isTransactional, IsolationLevel isolationLevel, int timeout);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsTransactional();
    [CompilerGeneratedAttribute]
public void set_IsTransactional(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<IsolationLevel> get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(Nullable`1<IsolationLevel> value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    public virtual void SetOptions(RocketUnitOfWorkOptions options);
}
public class Aiwins.Rocket.Uow.UnitOfWorkEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IUnitOfWork <UnitOfWork>k__BackingField;
    public IUnitOfWork UnitOfWork { get; }
    public UnitOfWorkEventArgs(IUnitOfWork unitOfWork);
    [CompilerGeneratedAttribute]
public IUnitOfWork get_UnitOfWork();
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Uow.UnitOfWorkExtensions : object {
    [ExtensionAttribute]
public static bool IsReservedFor(IUnitOfWork unitOfWork, string reservationName);
    [ExtensionAttribute]
public static void AddItem(IUnitOfWork unitOfWork, string key, TValue value);
    [ExtensionAttribute]
public static TValue GetItemOrDefault(IUnitOfWork unitOfWork, string key);
    [ExtensionAttribute]
public static TValue GetOrAddItem(IUnitOfWork unitOfWork, string key, Func`2<string, TValue> factory);
    [ExtensionAttribute]
public static void RemoveItem(IUnitOfWork unitOfWork, string key);
}
public class Aiwins.Rocket.Uow.UnitOfWorkFailedEventArgs : UnitOfWorkEventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRolledback>k__BackingField;
    public Exception Exception { get; }
    public bool IsRolledback { get; }
    public UnitOfWorkFailedEventArgs(IUnitOfWork unitOfWork, Exception exception, bool isRolledback);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public bool get_IsRolledback();
}
public static class Aiwins.Rocket.Uow.UnitOfWorkHelper : object {
    public static bool IsUnitOfWorkType(TypeInfo implementationType);
    public static bool IsUnitOfWorkMethod(MethodInfo methodInfo, UnitOfWorkAttribute& unitOfWorkAttribute);
    public static UnitOfWorkAttribute GetUnitOfWorkAttributeOrNull(MethodInfo methodInfo);
    private static bool AnyMethodHasUnitOfWorkAttribute(TypeInfo implementationType);
    private static bool HasUnitOfWorkAttribute(MemberInfo methodInfo);
}
public class Aiwins.Rocket.Uow.UnitOfWorkInterceptor : RocketInterceptor {
    private IServiceScopeFactory _serviceScopeFactory;
    public UnitOfWorkInterceptor(IServiceScopeFactory serviceScopeFactory);
    [AsyncStateMachineAttribute("Aiwins.Rocket.Uow.UnitOfWorkInterceptor/<InterceptAsync>d__2")]
public virtual Task InterceptAsync(IRocketMethodInvocation invocation);
    private RocketUnitOfWorkOptions CreateOptions(IServiceProvider serviceProvider, IRocketMethodInvocation invocation, UnitOfWorkAttribute unitOfWorkAttribute);
}
public static class Aiwins.Rocket.Uow.UnitOfWorkInterceptorRegistrar : object {
    public static void RegisterIfNeeded(IOnServiceRegistredContext context);
    private static bool ShouldIntercept(Type type);
}
public class Aiwins.Rocket.Uow.UnitOfWorkManager : object {
    [CompilerGeneratedAttribute]
private static AsyncLocal`1<bool> <DisableObsoleteDbContextCreationWarning>k__BackingField;
    private IServiceScopeFactory _serviceScopeFactory;
    private IAmbientUnitOfWork _ambientUnitOfWork;
    [ObsoleteAttribute("This will be removed in next versions.")]
public static AsyncLocal`1<bool> DisableObsoleteDbContextCreationWarning { get; }
    public IUnitOfWork Current { get; }
    public UnitOfWorkManager(IAmbientUnitOfWork ambientUnitOfWork, IServiceScopeFactory serviceScopeFactory);
    private static UnitOfWorkManager();
    [CompilerGeneratedAttribute]
public static AsyncLocal`1<bool> get_DisableObsoleteDbContextCreationWarning();
    public sealed virtual IUnitOfWork get_Current();
    public sealed virtual IUnitOfWork Begin(RocketUnitOfWorkOptions options, bool requiresNew);
    public sealed virtual IUnitOfWork Reserve(string reservationName, bool requiresNew);
    public sealed virtual void BeginReserved(string reservationName, RocketUnitOfWorkOptions options);
    public sealed virtual bool TryBeginReserved(string reservationName, RocketUnitOfWorkOptions options);
    private IUnitOfWork GetCurrentUnitOfWork();
    private IUnitOfWork CreateNewUnitOfWork();
}
[ExtensionAttribute]
public static class Aiwins.Rocket.Uow.UnitOfWorkManagerExtensions : object {
    [ExtensionAttribute]
public static IUnitOfWork Begin(IUnitOfWorkManager unitOfWorkManager, bool requiresNew, bool isTransactional, Nullable`1<IsolationLevel> isolationLevel, Nullable`1<int> timeout);
    [ExtensionAttribute]
public static void BeginReserved(IUnitOfWorkManager unitOfWorkManager, string reservationName);
    [ExtensionAttribute]
public static void TryBeginReserved(IUnitOfWorkManager unitOfWorkManager, string reservationName);
}
public enum Aiwins.Rocket.Uow.UnitOfWorkTransactionBehavior : Enum {
    public int value__;
    public static UnitOfWorkTransactionBehavior Auto;
    public static UnitOfWorkTransactionBehavior Enabled;
    public static UnitOfWorkTransactionBehavior Disabled;
}
internal class AiwinsRocketUow_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
