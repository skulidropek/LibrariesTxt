public abstract class Aiwins.Rocket.VirtualFileSystem.DictionaryBasedFileProvider : object {
    protected IDictionary`2<string, IFileInfo> Files { get; }
    protected abstract virtual IDictionary`2<string, IFileInfo> get_Files();
    public virtual IFileInfo GetFileInfo(string subpath);
    public virtual IDirectoryContents GetDirectoryContents(string subpath);
    public virtual IChangeToken Watch(string filter);
    protected virtual string NormalizePath(string subpath);
}
public class Aiwins.Rocket.VirtualFileSystem.DynamicFileProvider : DictionaryBasedFileProvider {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IFileInfo> <DynamicFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ChangeTokenInfo> <FilePathTokenLookup>k__BackingField;
    protected IDictionary`2<string, IFileInfo> Files { get; }
    protected ConcurrentDictionary`2<string, IFileInfo> DynamicFiles { get; }
    protected ConcurrentDictionary`2<string, ChangeTokenInfo> FilePathTokenLookup { get; }
    protected virtual IDictionary`2<string, IFileInfo> get_Files();
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<string, IFileInfo> get_DynamicFiles();
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<string, ChangeTokenInfo> get_FilePathTokenLookup();
    public sealed virtual void AddOrUpdate(IFileInfo fileInfo);
    public sealed virtual bool Delete(string filePath);
    public virtual IChangeToken Watch(string filter);
    private IChangeToken GetOrAddChangeToken(string filePath);
    private void ReportChange(string filePath);
}
public class Aiwins.Rocket.VirtualFileSystem.Embedded.EmbeddedResourceFileInfo : object {
    private Nullable`1<long> _length;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastModified>k__BackingField;
    private Assembly _assembly;
    private string _resourcePath;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string VirtualPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public EmbeddedResourceFileInfo(Assembly assembly, string resourcePath, string virtualPath, string name, DateTimeOffset lastModified);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
    public virtual string ToString();
}
public class Aiwins.Rocket.VirtualFileSystem.Embedded.EmbeddedVirtualFileSetInfo : VirtualFileSetInfo {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseFolder>k__BackingField;
    public Assembly Assembly { get; }
    public string BaseFolder { get; }
    public EmbeddedVirtualFileSetInfo(IFileProvider fileProvider, Assembly assembly, string baseFolder);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public string get_BaseFolder();
}
public class Aiwins.Rocket.VirtualFileSystem.Embedded.RocketEmbeddedFileProvider : DictionaryBasedFileProvider {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseNamespace>k__BackingField;
    private Lazy`1<Dictionary`2<string, IFileInfo>> _files;
    public Assembly Assembly { get; }
    public string BaseNamespace { get; }
    protected IDictionary`2<string, IFileInfo> Files { get; }
    public RocketEmbeddedFileProvider(Assembly assembly, string baseNamespace);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public string get_BaseNamespace();
    protected virtual IDictionary`2<string, IFileInfo> get_Files();
    public void AddFiles(Dictionary`2<string, IFileInfo> files);
    private static void AddDirectoriesRecursively(Dictionary`2<string, IFileInfo> files, string directoryPath, DateTimeOffset lastModificationTime);
    private DateTimeOffset GetLastModificationTime();
    private string ConvertToRelativePath(string resourceName);
    private static string CalculateFileName(string filePath);
    protected virtual string NormalizePath(string subpath);
    private Dictionary`2<string, IFileInfo> CreateFiles();
}
internal class Aiwins.Rocket.VirtualFileSystem.EnumerableDirectoryContents : object {
    private IEnumerable`1<IFileInfo> _entries;
    public bool Exists { get; }
    public EnumerableDirectoryContents(IEnumerable`1<IFileInfo> entries);
    public sealed virtual bool get_Exists();
    public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface Aiwins.Rocket.VirtualFileSystem.IDynamicFileProvider {
    public abstract virtual void AddOrUpdate(IFileInfo fileInfo);
    public abstract virtual bool Delete(string filePath);
}
public class Aiwins.Rocket.VirtualFileSystem.InMemoryFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastModified>k__BackingField;
    private Byte[] _fileContent;
    [CompilerGeneratedAttribute]
private string <DynamicPath>k__BackingField;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public string DynamicPath { get; }
    public InMemoryFileInfo(string dynamicPath, Byte[] fileContent, string name);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    [CompilerGeneratedAttribute]
public string get_DynamicPath();
    public sealed virtual Stream CreateReadStream();
}
public interface Aiwins.Rocket.VirtualFileSystem.IVirtualFileProvider {
}
public class Aiwins.Rocket.VirtualFileSystem.Physical.PhysicalVirtualFileSetInfo : VirtualFileSetInfo {
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    public string Root { get; }
    public PhysicalVirtualFileSetInfo(IFileProvider fileProvider, string root);
    [CompilerGeneratedAttribute]
public string get_Root();
}
public class Aiwins.Rocket.VirtualFileSystem.RocketVirtualFileSystemModule : RocketModule {
}
public class Aiwins.Rocket.VirtualFileSystem.RocketVirtualFileSystemOptions : object {
    [CompilerGeneratedAttribute]
private VirtualFileSetList <FileSets>k__BackingField;
    public VirtualFileSetList FileSets { get; }
    [CompilerGeneratedAttribute]
public VirtualFileSetList get_FileSets();
}
public class Aiwins.Rocket.VirtualFileSystem.VirtualDirectoryFileInfo : object {
    [CompilerGeneratedAttribute]
private string <PhysicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastModified>k__BackingField;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public VirtualDirectoryFileInfo(string physicalPath, string name, DateTimeOffset lastModified);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PhysicalPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
internal static class Aiwins.Rocket.VirtualFileSystem.VirtualFilePathHelper : object {
    public static string NormalizePath(string fullPath);
    private static string NormalizeChars(string fileName);
}
public class Aiwins.Rocket.VirtualFileSystem.VirtualFileProvider : object {
    private IFileProvider _hybridFileProvider;
    private RocketVirtualFileSystemOptions _options;
    public VirtualFileProvider(IOptions`1<RocketVirtualFileSystemOptions> options, IDynamicFileProvider dynamicFileProvider);
    public virtual IFileInfo GetFileInfo(string subpath);
    public virtual IDirectoryContents GetDirectoryContents(string subpath);
    public virtual IChangeToken Watch(string filter);
    protected virtual IFileProvider CreateHybridProvider(IDynamicFileProvider dynamicFileProvider);
}
public class Aiwins.Rocket.VirtualFileSystem.VirtualFileSetInfo : object {
    [CompilerGeneratedAttribute]
private IFileProvider <FileProvider>k__BackingField;
    public IFileProvider FileProvider { get; }
    public VirtualFileSetInfo(IFileProvider fileProvider);
    [CompilerGeneratedAttribute]
public IFileProvider get_FileProvider();
}
public class Aiwins.Rocket.VirtualFileSystem.VirtualFileSetList : List`1<VirtualFileSetInfo> {
}
[ExtensionAttribute]
public static class Aiwins.Rocket.VirtualFileSystem.VirtualFileSetListExtensions : object {
    [ExtensionAttribute]
public static void AddEmbedded(VirtualFileSetList list, string baseNamespace, string baseFolder);
    [ExtensionAttribute]
public static void AddPhysical(VirtualFileSetList list, string root, ExclusionFilters exclusionFilters);
    private static IFileProvider CreateFileProvider(Assembly assembly, string baseNamespace, string baseFolder);
    [ExtensionAttribute]
public static void ReplaceEmbeddedByPhysical(VirtualFileSetList fileSets, string physicalPath);
}
internal class AiwinsRocketVirtualFileSystem_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.FileProviders.RocketFileInfoExtensions : object {
    [ExtensionAttribute]
public static string ReadAsString(IFileInfo fileInfo);
    [ExtensionAttribute]
public static Task`1<string> ReadAsStringAsync(IFileInfo fileInfo);
    [ExtensionAttribute]
public static string ReadAsString(IFileInfo fileInfo, Encoding encoding);
    [AsyncStateMachineAttribute("Microsoft.Extensions.FileProviders.RocketFileInfoExtensions/<ReadAsStringAsync>d__3")]
[ExtensionAttribute]
public static Task`1<string> ReadAsStringAsync(IFileInfo fileInfo, Encoding encoding);
    [ExtensionAttribute]
public static Byte[] ReadBytes(IFileInfo fileInfo);
    [AsyncStateMachineAttribute("Microsoft.Extensions.FileProviders.RocketFileInfoExtensions/<ReadBytesAsync>d__5")]
[ExtensionAttribute]
public static Task`1<Byte[]> ReadBytesAsync(IFileInfo fileInfo);
    [ExtensionAttribute]
public static string GetVirtualOrPhysicalPathOrNull(IFileInfo fileInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
