[DesignerAttribute("AjaxControlToolkit.Design.AccordionDesigner")]
[ToolboxDataAttribute("<{0}:Accordion runat=server></{0}:Accordion>")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Accordion.bmp")]
public class AjaxControlToolkit.Accordion : WebControl {
    internal static string ItemCountViewStateKey;
    [CompilerGeneratedAttribute]
private EventHandler`1<AccordionItemEventArgs> ItemCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<AccordionItemEventArgs> ItemDataBound;
    [CompilerGeneratedAttribute]
private CommandEventHandler ItemCommand;
    private AccordionExtender _extender;
    private AccordionPaneCollection _panes;
    private object _dataSource;
    private ITemplate _headerTemplate;
    private ITemplate _contentTemplate;
    private bool _initialized;
    private bool _pagePreLoadFired;
    private bool _requiresDataBinding;
    private bool _throwOnDataPropertyChange;
    private DataSourceView _currentView;
    private bool _currentViewIsFromDataSourceID;
    private bool _currentViewValid;
    private DataSourceSelectArguments _arguments;
    private IEnumerable _selectResult;
    private EventWaitHandle _selectWait;
    private AccordionExtender AccordionExtender { get; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Length of the transition animation in milliseconds")]
[DefaultValueAttribute("500")]
public int TransitionDuration { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Number of frames per second used in the transition animation")]
[DefaultValueAttribute("30")]
public int FramesPerSecond { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Whether or not to use a fade effect in the transition animations")]
[DefaultValueAttribute("False")]
public bool FadeTransitions { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Default CSS class for Accordion Pane Headers")]
public string HeaderCssClass { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Default CSS class for the selected Accordion Pane Headers")]
public string HeaderSelectedCssClass { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Default CSS class for Accordion Pane Content")]
public string ContentCssClass { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Determine how the growth of the Accordion will be controlled")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AutoSize AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Index of the AccordionPane to be displayed")]
[DefaultValueAttribute("0")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Whether or not clicking the header will close the currently opened pane (leaving all the Accordion's panes closed)")]
[DefaultValueAttribute("True")]
public bool RequireOpenedPane { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Whether or not we suppress the client-side click handlers of any elements in the header sections")]
[DefaultValueAttribute("False")]
public bool SuppressHeaderPostbacks { get; public set; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("2")]
public AccordionPaneCollection Panes { get; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("AjaxControlToolkit.AccordionContentPanel")]
public ITemplate HeaderTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("AjaxControlToolkit.AccordionContentPanel")]
public ITemplate ContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.DataSourceControl")]
[CategoryAttribute("Data")]
public string DataSourceID { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string DataMember { get; public set; }
    protected bool IsBoundUsingDataSourceID { get; }
    protected bool RequiresDataBinding { get; protected set; }
    protected DataSourceSelectArguments SelectArguments { get; }
    [CompilerGeneratedAttribute]
public void add_ItemCreated(EventHandler`1<AccordionItemEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemCreated(EventHandler`1<AccordionItemEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ItemDataBound(EventHandler`1<AccordionItemEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ItemDataBound(EventHandler`1<AccordionItemEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ItemCommand(CommandEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ItemCommand(CommandEventHandler value);
    private AccordionExtender get_AccordionExtender();
    public int get_TransitionDuration();
    public void set_TransitionDuration(int value);
    public int get_FramesPerSecond();
    public void set_FramesPerSecond(int value);
    public bool get_FadeTransitions();
    public void set_FadeTransitions(bool value);
    public string get_HeaderCssClass();
    public void set_HeaderCssClass(string value);
    public string get_HeaderSelectedCssClass();
    public void set_HeaderSelectedCssClass(string value);
    public string get_ContentCssClass();
    public void set_ContentCssClass(string value);
    public AutoSize get_AutoSize();
    public void set_AutoSize(AutoSize value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public bool get_RequireOpenedPane();
    public void set_RequireOpenedPane(bool value);
    public bool get_SuppressHeaderPostbacks();
    public void set_SuppressHeaderPostbacks(bool value);
    public AccordionPaneCollection get_Panes();
    public virtual ControlCollection get_Controls();
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual ITemplate get_ContentTemplate();
    public virtual void set_ContentTemplate(ITemplate value);
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    public virtual string get_DataMember();
    public virtual void set_DataMember(string value);
    protected bool get_IsBoundUsingDataSourceID();
    protected bool get_RequiresDataBinding();
    protected void set_RequiresDataBinding(bool value);
    protected DataSourceSelectArguments get_SelectArguments();
    protected virtual void OnInit(EventArgs e);
    private void OnPagePreLoad(object sender, EventArgs e);
    protected virtual void OnLoad(EventArgs e);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    public virtual Control FindControl(string id);
    internal void ClearPanes();
    private DataSourceView ConnectToDataSourceView();
    public virtual void DataBind();
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void CreateControlHierarchy(bool useDataSource);
    private void CreateItem(object dataItem, int index, AccordionItemType itemType, AccordionContentPanel container, ITemplate template, bool dataBind);
    protected void EnsureDataBound();
    protected virtual IEnumerable GetData();
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    private void DoSelect(IEnumerable data);
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs args);
    protected virtual void OnItemCommand(AccordionCommandEventArgs args);
    protected virtual void OnItemCreated(AccordionItemEventArgs args);
    protected virtual void OnItemDataBound(AccordionItemEventArgs args);
}
public class AjaxControlToolkit.AccordionCommandEventArgs : CommandEventArgs {
    private AccordionContentPanel _container;
    public AccordionContentPanel Container { get; }
    internal AccordionCommandEventArgs(AccordionContentPanel container, string commandName, object commandArg);
    public AccordionContentPanel get_Container();
}
public class AjaxControlToolkit.AccordionContentPanel : Panel {
    private bool _collapsed;
    private object _dataItem;
    private int _dataIndex;
    private AccordionItemType _type;
    public bool Collapsed { get; public set; }
    public AccordionItemType ItemType { get; }
    public object DataItem { get; }
    public int DataItemIndex { get; }
    public int DisplayIndex { get; }
    internal AccordionContentPanel(object dataItem, int dataIndex, AccordionItemType type);
    public bool get_Collapsed();
    public void set_Collapsed(bool value);
    public AccordionItemType get_ItemType();
    public sealed virtual object get_DataItem();
    public sealed virtual int get_DataItemIndex();
    public sealed virtual int get_DisplayIndex();
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    internal void SetDataItemProperties(object dataItem, int dataIndex, AccordionItemType type);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.AccordionBehavior", "Accordion")]
[ToolboxItemAttribute("False")]
[DesignerAttribute("AjaxControlToolkit.Design.AccordionExtenderDesigner")]
[TargetControlTypeAttribute("AjaxControlToolkit.Accordion")]
public class AjaxControlToolkit.AccordionExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("autoSize")]
public AutoSize AutoSize { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("250")]
[ClientPropertyNameAttribute("transitionDuration")]
public int TransitionDuration { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("fadeTransitions")]
public bool FadeTransitions { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("30")]
[ClientPropertyNameAttribute("framesPerSecond")]
public int FramesPerSecond { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("selectedIndex")]
public int SelectedIndex { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("requireOpenedPane")]
public bool RequireOpenedPane { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("suppressHeaderPostbacks")]
public bool SuppressHeaderPostbacks { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("headerCssClass")]
public string HeaderCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("headerSelectedCssClass")]
public string HeaderSelectedCssClass { get; public set; }
    [DefaultValueAttribute("")]
public string ContentCssClass { get; public set; }
    public AutoSize get_AutoSize();
    public void set_AutoSize(AutoSize value);
    public int get_TransitionDuration();
    public void set_TransitionDuration(int value);
    public bool get_FadeTransitions();
    public void set_FadeTransitions(bool value);
    public int get_FramesPerSecond();
    public void set_FramesPerSecond(int value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public bool get_RequireOpenedPane();
    public void set_RequireOpenedPane(bool value);
    public bool get_SuppressHeaderPostbacks();
    public void set_SuppressHeaderPostbacks(bool value);
    public string get_HeaderCssClass();
    public void set_HeaderCssClass(string value);
    public string get_HeaderSelectedCssClass();
    public void set_HeaderSelectedCssClass(string value);
    public string get_ContentCssClass();
    public void set_ContentCssClass(string value);
}
public class AjaxControlToolkit.AccordionItemEventArgs : EventArgs {
    private AccordionContentPanel _item;
    private AccordionItemType _type;
    public AccordionContentPanel AccordionItem { get; }
    public AccordionItemType ItemType { get; }
    public object Item { get; }
    public int ItemIndex { get; }
    public AccordionItemEventArgs(AccordionContentPanel item, AccordionItemType type);
    public AccordionContentPanel get_AccordionItem();
    public AccordionItemType get_ItemType();
    public object get_Item();
    public int get_ItemIndex();
}
public enum AjaxControlToolkit.AccordionItemType : Enum {
    public int value__;
    public static AccordionItemType Header;
    public static AccordionItemType Content;
}
[ToolboxDataAttribute("<{0}:AccordionPane runat="server"></{0}:AccordionPane>")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Accordion.bmp")]
public class AjaxControlToolkit.AccordionPane : WebControl {
    private AccordionContentPanel _header;
    private ITemplate _headerTemplate;
    private AccordionContentPanel _content;
    private ITemplate _contentTemplate;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AccordionContentPanel HeaderContainer { get; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("CSS class for Accordion Pane Header")]
public string HeaderCssClass { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("Accordion Pane Header")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("AjaxControlToolkit.AccordionContentPanel")]
[TemplateInstanceAttribute]
public ITemplate Header { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AccordionContentPanel ContentContainer { get; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("CSS class for Accordion Pane Content")]
public string ContentCssClass { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("Accordion Pane Content")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("AjaxControlToolkit.AccordionContentPanel")]
[TemplateInstanceAttribute]
public ITemplate Content { get; public set; }
    public ControlCollection Controls { get; }
    public AccordionContentPanel get_HeaderContainer();
    public string get_HeaderCssClass();
    public void set_HeaderCssClass(string value);
    public virtual ITemplate get_Header();
    public virtual void set_Header(ITemplate value);
    public AccordionContentPanel get_ContentContainer();
    public string get_ContentCssClass();
    public void set_ContentCssClass(string value);
    public virtual ITemplate get_Content();
    public virtual void set_Content(ITemplate value);
    public virtual ControlCollection get_Controls();
    protected virtual void CreateChildControls();
    public virtual Control FindControl(string id);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    public virtual void RenderEndTag(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
public class AjaxControlToolkit.AccordionPaneCollection : object {
    private Accordion _parent;
    private int _version;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public AccordionPane Item { get; }
    public AccordionPane Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal AccordionPaneCollection(Accordion parent);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public AccordionPane get_Item(int index);
    public AccordionPane get_Item(string id);
    private int ToRawIndex(int paneIndex);
    private int FromRawIndex(int index);
    public void Add(AccordionPane item);
    public sealed virtual void Clear();
    public bool Contains(AccordionPane item);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(AccordionPane[] array, int index);
    public int IndexOf(AccordionPane item);
    public void Insert(int index, AccordionPane item);
    public void Remove(AccordionPane item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<AccordionPane> GetEnumerator();
}
public class AjaxControlToolkit.AjaxControlToolkitConfigSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("useStaticResources")]
public bool UseStaticResources { get; public set; }
    [ConfigurationPropertyAttribute("renderStyleLinks")]
public bool RenderStyleLinks { get; public set; }
    [ConfigurationPropertyAttribute("htmlSanitizer")]
public string HtmlSanitizer { get; public set; }
    [ConfigurationPropertyAttribute("tempFolder")]
public string TempFolder { get; public set; }
    [ConfigurationPropertyAttribute("additionalUploadFileExtensions")]
public string AdditionalUploadFileExtensions { get; public set; }
    [ConfigurationPropertyAttribute("customControls")]
[ConfigurationCollectionAttribute("AjaxControlToolkit.CustomControlsCollection")]
public CustomControlsCollection CustomControls { get; }
    public bool get_UseStaticResources();
    public void set_UseStaticResources(bool value);
    public bool get_RenderStyleLinks();
    public void set_RenderStyleLinks(bool value);
    public string get_HtmlSanitizer();
    public void set_HtmlSanitizer(string value);
    public string get_TempFolder();
    public void set_TempFolder(string value);
    public string get_AdditionalUploadFileExtensions();
    public void set_AdditionalUploadFileExtensions(string value);
    public CustomControlsCollection get_CustomControls();
}
[DesignerAttribute("AjaxControlToolkit.Design.AjaxFileUploadDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientCssResourceAttribute("AjaxFileUpload")]
[ClientScriptResourceAttribute("Sys.Extended.UI.AjaxFileUpload.Control", "AjaxFileUpload")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "AjaxFileUpload.bmp")]
public class AjaxControlToolkit.AjaxFileUpload : ScriptControlBase {
    internal static string ContextKey;
    private static string DefaultTempSubDir;
    private string _uploadedFilePath;
    [CompilerGeneratedAttribute]
private string <ContextKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInFileUploadPostBack>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumNumberOfFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowedFileTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<AjaxFileUploadStartEventArgs> UploadStart;
    [CompilerGeneratedAttribute]
private EventHandler`1<AjaxFileUploadEventArgs> UploadComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<AjaxFileUploadCompleteAllEventArgs> UploadCompleteAll;
    private bool IsDesignMode { get; }
    public string ContextKeys { get; public set; }
    [DescriptionAttribute("ID of Throbber")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public string ThrobberID { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[ObsoleteAttribute("Always false.")]
[EditorBrowsableAttribute("1")]
public bool IsInFileUploadPostBack { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("10")]
[ClientPropertyNameAttribute("maximumNumberOfFiles")]
public int MaximumNumberOfFiles { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("allowedFileTypes")]
public string AllowedFileTypes { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("4096")]
[ClientPropertyNameAttribute("chunkSize")]
public int ChunkSize { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("maxFileSize")]
public int MaxFileSize { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("clearFileListAfterUpload")]
public bool ClearFileListAfterUpload { get; public set; }
    [ObsoleteAttribute("Use UploadHandlerPath instead.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("useAbsoluteHandlerPath")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool UseAbsoluteHandlerPath { get; public set; }
    [DefaultValueAttribute("")]
public string UploadHandlerPath { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("mode")]
public AjaxFileUploadMode Mode { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("autoStartUpload")]
public bool AutoStartUpload { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadStart")]
public string OnClientUploadStart { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadComplete")]
public string OnClientUploadComplete { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadCompleteAll")]
public string OnClientUploadCompleteAll { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadError")]
public string OnClientUploadError { get; public set; }
    public bool ServerPollingSupport { get; }
    private bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public string get_ContextKeys();
    [CompilerGeneratedAttribute]
public void set_ContextKeys(string value);
    public string get_ThrobberID();
    public void set_ThrobberID(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInFileUploadPostBack();
    [CompilerGeneratedAttribute]
public void set_IsInFileUploadPostBack(bool value);
    [CompilerGeneratedAttribute]
public int get_MaximumNumberOfFiles();
    [CompilerGeneratedAttribute]
public void set_MaximumNumberOfFiles(int value);
    [CompilerGeneratedAttribute]
public string get_AllowedFileTypes();
    [CompilerGeneratedAttribute]
public void set_AllowedFileTypes(string value);
    public int get_ChunkSize();
    public void set_ChunkSize(int value);
    public int get_MaxFileSize();
    public void set_MaxFileSize(int value);
    public bool get_ClearFileListAfterUpload();
    public void set_ClearFileListAfterUpload(bool value);
    public bool get_UseAbsoluteHandlerPath();
    public void set_UseAbsoluteHandlerPath(bool value);
    public string get_UploadHandlerPath();
    public void set_UploadHandlerPath(string value);
    public AjaxFileUploadMode get_Mode();
    public void set_Mode(AjaxFileUploadMode value);
    public bool get_AutoStartUpload();
    public void set_AutoStartUpload(bool value);
    [CompilerGeneratedAttribute]
public void add_UploadStart(EventHandler`1<AjaxFileUploadStartEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadStart(EventHandler`1<AjaxFileUploadStartEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UploadComplete(EventHandler`1<AjaxFileUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadComplete(EventHandler`1<AjaxFileUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UploadCompleteAll(EventHandler`1<AjaxFileUploadCompleteAllEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadCompleteAll(EventHandler`1<AjaxFileUploadCompleteAllEventArgs> value);
    public string get_OnClientUploadStart();
    public void set_OnClientUploadStart(string value);
    public string get_OnClientUploadComplete();
    public void set_OnClientUploadComplete(string value);
    public string get_OnClientUploadCompleteAll();
    public void set_OnClientUploadCompleteAll(string value);
    public string get_OnClientUploadError();
    public void set_OnClientUploadError(string value);
    public bool get_ServerPollingSupport();
    protected virtual void OnInit(EventArgs e);
    private bool AreFileUploadParamsPresent();
    private void SetUploadedFilePath(string path);
    protected virtual void OnLoad(EventArgs e);
    public void SaveAs(string fileName);
    public static void CleanAllTemporaryData();
    public static string GetTempFolder(string fileId);
    public static string GetRootTempFolder();
    private static string GetPhysicalPath(string path);
    internal void CreateChilds();
    protected virtual void CreateChildControls();
    protected string GenerateHtmlInputControls();
    private HtmlGenericControl GenerateHtmlFooterContainer(Control progressBar);
    private HtmlGenericControl GenerateHtmlSelectFileContainer(Control html5InputFileElement, Control inputFileElement);
    private HtmlGenericControl GenerateHtmlTopFileStatus(Control fileStatusContainer);
    private void HideElement(HtmlControl element);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    private string ResolveUploadHandlerPath(string uploadHandlerPath);
    private static string CombineUrl(string part1, string part2);
    public static void CheckTempFilePath(string tmpFilePath);
    private static bool IsImmediateFolder(string tmpFilePath);
    private static bool IsValidLastFolderName(string tmpFilePath);
    private static bool IsValidExtension(string tmpFilePath);
    private static string GetGrandParentDirectoryName(string tmpFilePath);
}
public class AjaxControlToolkit.AjaxFileUploadCompleteAllEventArgs : EventArgs {
    private int _filesInQueue;
    private int _filesUploaded;
    private AjaxFileUploadCompleteAllReason _reason;
    [CompilerGeneratedAttribute]
private string <ServerArguments>k__BackingField;
    public int FilesUploaded { get; }
    public int FilesInQueue { get; }
    public AjaxFileUploadCompleteAllReason Reason { get; }
    public string ServerArguments { get; public set; }
    public AjaxFileUploadCompleteAllEventArgs(int filesInQueue, int filesUploaded, AjaxFileUploadCompleteAllReason reason);
    public int get_FilesUploaded();
    public int get_FilesInQueue();
    public AjaxFileUploadCompleteAllReason get_Reason();
    [CompilerGeneratedAttribute]
public string get_ServerArguments();
    [CompilerGeneratedAttribute]
public void set_ServerArguments(string value);
}
public enum AjaxControlToolkit.AjaxFileUploadCompleteAllReason : Enum {
    public int value__;
    public static AjaxFileUploadCompleteAllReason Success;
    public static AjaxFileUploadCompleteAllReason Canceled;
    public static AjaxFileUploadCompleteAllReason Unknown;
}
public class AjaxControlToolkit.AjaxFileUploadEventArgs : EventArgs {
    private string _fileId;
    private string _statusMessage;
    private string _fileName;
    private int _fileSize;
    private string _contentType;
    private string _postedUrl;
    private AjaxFileUploadState _state;
    public string FileId { get; }
    public AjaxFileUploadState State { get; }
    public string ContentType { get; }
    public int FileSize { get; }
    public string FileName { get; }
    public string StatusMessage { get; }
    public string PostedUrl { get; public set; }
    public AjaxFileUploadEventArgs(string fileId, AjaxFileUploadState state, string statusMessage, string fileName, int fileSize, string contentType);
    public string get_FileId();
    public AjaxFileUploadState get_State();
    public string get_ContentType();
    public int get_FileSize();
    public string get_FileName();
    public string get_StatusMessage();
    public string get_PostedUrl();
    public void set_PostedUrl(string value);
    public Byte[] GetContents();
    public Stream GetStreamContents();
    public void DeleteTemporaryData();
}
public class AjaxControlToolkit.AjaxFileUploadHandler : object {
    public bool IsReusable { get; }
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
}
public static class AjaxControlToolkit.AjaxFileUploadHelper : object {
    private static int ChunkSize;
    private static int ChunkSizeForPolling;
    private static String[] DefaultAllowedExtensions;
    private static AjaxFileUploadHelper();
    public static void Abort(HttpContext context, string fileId);
    public static bool Process(HttpContext context);
    private static int GetReadEntityBodyMode(HttpRequest request);
    public static bool ProcessStream(HttpContext context, Stream source, string fileId, string fileName, bool chunked, bool isFirstChunk, bool usePoll);
    private static void CreateTempFilePathFolder(string tmpFilePath);
    private static string GetTempFilePath(string fileId, string fileName);
}
public enum AjaxControlToolkit.AjaxFileUploadMode : Enum {
    public int value__;
    public static AjaxFileUploadMode Auto;
    public static AjaxFileUploadMode Client;
    public static AjaxFileUploadMode Server;
}
public class AjaxControlToolkit.AjaxFileUploadStartEventArgs : EventArgs {
    private int _filesInQueue;
    [CompilerGeneratedAttribute]
private string <ServerArguments>k__BackingField;
    public int FilesInQueue { get; }
    public string ServerArguments { get; public set; }
    public AjaxFileUploadStartEventArgs(int filesInQueue);
    public int get_FilesInQueue();
    [CompilerGeneratedAttribute]
public string get_ServerArguments();
    [CompilerGeneratedAttribute]
public void set_ServerArguments(string value);
}
public enum AjaxControlToolkit.AjaxFileUploadState : Enum {
    public int value__;
    public static AjaxFileUploadState Success;
    public static AjaxFileUploadState Failed;
    public static AjaxFileUploadState Unknown;
}
public class AjaxControlToolkit.AjaxFileUploadStates : object {
    private HttpContext _httpContext;
    private string _id;
    public decimal FileLength { get; public set; }
    public decimal Uploaded { get; public set; }
    public decimal Percent { get; }
    public bool Abort { get; public set; }
    public List`1<string> BlockList { get; public set; }
    public AjaxFileUploadStates(HttpContext context, string id);
    public decimal get_FileLength();
    public void set_FileLength(decimal value);
    public decimal get_Uploaded();
    public void set_Uploaded(decimal value);
    public decimal get_Percent();
    public bool get_Abort();
    public void set_Abort(bool value);
    public List`1<string> get_BlockList();
    public void set_BlockList(List`1<string> value);
    private string GetSessionName(string name);
}
[DesignerAttribute("AjaxControlToolkit.Design.AlwaysVisibleControlExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.AlwaysVisibleControlBehavior", "AlwaysVisibleControl")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts")]
[DefaultPropertyAttribute("VerticalOffset")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[TargetControlTypeAttribute("System.Web.UI.UpdateProgress")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "AlwaysVisibleControl.bmp")]
public class AjaxControlToolkit.AlwaysVisibleControlExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("horizontalOffset")]
public int HorizontalOffset { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("horizontalSide")]
public HorizontalSide HorizontalSide { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("verticalOffset")]
public int VerticalOffset { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("verticalSide")]
public VerticalSide VerticalSide { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0,1")]
[ClientPropertyNameAttribute("scrollEffectDuration")]
public float ScrollEffectDuration { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("useAnimation")]
public bool UseAnimation { get; public set; }
    public int get_HorizontalOffset();
    public void set_HorizontalOffset(int value);
    public HorizontalSide get_HorizontalSide();
    public void set_HorizontalSide(HorizontalSide value);
    public int get_VerticalOffset();
    public void set_VerticalOffset(int value);
    public VerticalSide get_VerticalSide();
    public void set_VerticalSide(VerticalSide value);
    public float get_ScrollEffectDuration();
    public void set_ScrollEffectDuration(float value);
    public bool get_UseAnimation();
    public void set_UseAnimation(bool value);
    public virtual void EnsureValid();
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[DefaultPropertyAttribute("Name")]
public class AjaxControlToolkit.Animation : object {
    private static JavaScriptSerializer _serializer;
    private string _name;
    private List`1<Animation> _children;
    private Dictionary`2<string, string> _properties;
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public IList`1<Animation> Children { get; }
    [BrowsableAttribute("False")]
public Dictionary`2<string, string> Properties { get; }
    private static Animation();
    public string get_Name();
    public void set_Name(string value);
    public IList`1<Animation> get_Children();
    public Dictionary`2<string, string> get_Properties();
    public virtual string ToString();
    public static string Serialize(Animation animation);
    public static Animation Deserialize(string json);
    public static Animation Deserialize(XmlNode node);
    public static void Parse(string value, ExtenderControl extenderControl);
    private static int GetLineNumber(string source, string tag);
}
[DesignerAttribute("AjaxControlToolkit.Design.AnimationExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.Animation.AnimationBehavior", "Animation")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Animation.bmp")]
public class AjaxControlToolkit.AnimationExtender : AnimationExtenderControlBase {
    private Animation _onLoad;
    private Animation _onClick;
    private Animation _onMouseOver;
    private Animation _onMouseOut;
    private Animation _onHoverOver;
    private Animation _onHoverOut;
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onLoad")]
public Animation OnLoad { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onClick")]
public Animation OnClick { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onMouseOver")]
public Animation OnMouseOver { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onMouseOut")]
public Animation OnMouseOut { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onHoverOver")]
public Animation OnHoverOver { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onHoverOut")]
public Animation OnHoverOut { get; public set; }
    public Animation get_OnLoad();
    public void set_OnLoad(Animation value);
    public Animation get_OnClick();
    public void set_OnClick(Animation value);
    public Animation get_OnMouseOver();
    public void set_OnMouseOver(Animation value);
    public Animation get_OnMouseOut();
    public void set_OnMouseOut(Animation value);
    public Animation get_OnHoverOver();
    public void set_OnHoverOver(Animation value);
    public Animation get_OnHoverOut();
    public void set_OnHoverOut(Animation value);
    protected virtual void OnPreRender(EventArgs e);
}
[DefaultPropertyAttribute("Animations")]
public abstract class AjaxControlToolkit.AnimationExtenderControlBase : ExtenderControlBase {
    private string _animations;
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.ComponentModel.MultilineStringConverter")]
[ExtenderControlPropertyAttribute]
public string Animations { get; public set; }
    public string get_Animations();
    public void set_Animations(string value);
    private static string TrimForDesigner(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeAnimations();
    protected Animation GetAnimation(Animation& animation, string name);
    protected void SetAnimation(Animation& animation, string name, Animation value);
    protected void ResolveControlIDs(Animation animation);
}
internal class AjaxControlToolkit.AnimationJavaScriptConverter : JavaScriptConverter {
    public IEnumerable`1<Type> SupportedTypes { get; }
    public virtual IEnumerable`1<Type> get_SupportedTypes();
    public virtual IDictionary`2<string, object> Serialize(object obj, JavaScriptSerializer serializer);
    private static IDictionary`2<string, object> Serialize(Animation animation);
    public virtual object Deserialize(IDictionary`2<string, object> dictionary, Type t, JavaScriptSerializer serializer);
    private static Animation Deserialize(IDictionary`2<string, object> obj);
}
[ClientScriptResourceAttribute("", "AnimationScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
public static class AjaxControlToolkit.AnimationScripts : object {
}
[ClientCssResourceAttribute("AreaChart")]
[ClientScriptResourceAttribute("Sys.Extended.UI.AreaChart", "AreaChart")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "AreaChart.bmp")]
public class AjaxControlToolkit.AreaChart : ChartBase {
    private List`1<AreaChartSeries> _series;
    [CompilerGeneratedAttribute]
private string <CategoriesAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private AreaChartType <ChartType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseLineColor>k__BackingField;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("displayValues")]
public bool DisplayValues { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("categoriesAxis")]
public string CategoriesAxis { get; public set; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("clientSeries")]
public List`1<AreaChartSeries> ClientSeries { get; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.Design.ChartBaseSeriesEditor`1<AjaxControlToolkit.AreaChartSeries>", "System.Drawing.Design.UITypeEditor")]
public List`1<AreaChartSeries> Series { get; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("chartType")]
public AreaChartType ChartType { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("9")]
[ClientPropertyNameAttribute("valueAxisLines")]
public int ValueAxisLines { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("valueAxisLineColor")]
public string ValueAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("categoryAxisLineColor")]
public string CategoryAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("baseLineColor")]
public string BaseLineColor { get; public set; }
    public void set_DisplayValues(bool value);
    public bool get_DisplayValues();
    [CompilerGeneratedAttribute]
public string get_CategoriesAxis();
    [CompilerGeneratedAttribute]
public void set_CategoriesAxis(string value);
    public List`1<AreaChartSeries> get_ClientSeries();
    public List`1<AreaChartSeries> get_Series();
    [CompilerGeneratedAttribute]
public AreaChartType get_ChartType();
    [CompilerGeneratedAttribute]
public void set_ChartType(AreaChartType value);
    [CompilerGeneratedAttribute]
public int get_ValueAxisLines();
    [CompilerGeneratedAttribute]
public void set_ValueAxisLines(int value);
    [CompilerGeneratedAttribute]
public string get_ValueAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_ValueAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_CategoryAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_BaseLineColor();
    [CompilerGeneratedAttribute]
public void set_BaseLineColor(string value);
    protected virtual void OnInit(EventArgs e);
}
public class AjaxControlToolkit.AreaChartSeries : object {
    private string _name;
    private string _areaColor;
    [CompilerGeneratedAttribute]
private Decimal[] <Data>k__BackingField;
    public string Name { get; public set; }
    public string AreaColor { get; public set; }
    [TypeConverterAttribute("AjaxControlToolkit.DataConverter`1<System.Decimal>")]
public Decimal[] Data { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_AreaColor();
    public void set_AreaColor(string value);
    [CompilerGeneratedAttribute]
public Decimal[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Decimal[] value);
}
public enum AjaxControlToolkit.AreaChartType : Enum {
    public int value__;
    public static AreaChartType Basic;
    public static AreaChartType Stacked;
}
[ExtensionAttribute]
public static class AjaxControlToolkit.ArrayExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<int> StartingIndex(Byte[] x, Byte[] y);
}
[DesignerAttribute("AjaxControlToolkit.Design.AsyncFileUploadDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.AsyncFileUpload", "AsyncFileUpload")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "AsyncFileUpload.bmp")]
public class AjaxControlToolkit.AsyncFileUpload : ScriptControlBase {
    private HttpPostedFile _postedFile;
    private HtmlInputFile _inputFile;
    private string _lastError;
    private string _hiddenFieldID;
    private string _innerTBID;
    private bool _persistFile;
    private bool _failedValidation;
    private AsyncFileUploaderStyle _controlStyle;
    [CompilerGeneratedAttribute]
private EventHandler`1<AsyncFileUploadEventArgs> UploadedComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<AsyncFileUploadEventArgs> UploadedFileError;
    private bool IsDesignMode { get; }
    private HttpPostedFile CurrentFile { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadStarted")]
public string OnClientUploadStarted { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadComplete")]
public string OnClientUploadComplete { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("uploadError")]
public string OnClientUploadError { get; public set; }
    [BrowsableAttribute("False")]
public Byte[] FileBytes { get; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("ID of Throbber")]
[DefaultValueAttribute("")]
public string ThrobberID { get; public set; }
    [CategoryAttribute("Appearance")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
[DescriptionAttribute("Control's background color on upload complete.")]
[DefaultValueAttribute("System.Drawing.Color", "Lime")]
public Color CompleteBackColor { get; public set; }
    [CategoryAttribute("Appearance")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
[DescriptionAttribute("Control's background color when uploading is in progress.")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color UploadingBackColor { get; public set; }
    [CategoryAttribute("Appearance")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
[DescriptionAttribute("Control's background color on upload error.")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color ErrorBackColor { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[CategoryAttribute("Layout")]
public Unit Width { get; public set; }
    [BrowsableAttribute("False")]
public bool FailedValidation { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AsyncFileUploaderStyle UploaderStyle { get; public set; }
    [BrowsableAttribute("False")]
public HttpPostedFile PostedFile { get; }
    [BrowsableAttribute("False")]
public bool HasFile { get; }
    [BrowsableAttribute("False")]
public string FileName { get; }
    [BrowsableAttribute("False")]
public string ContentType { get; }
    [BrowsableAttribute("False")]
public Stream FileContent { get; }
    [BrowsableAttribute("False")]
public bool IsUploading { get; }
    [BindableAttribute("True")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool PersistFile { get; public set; }
    [CompilerGeneratedAttribute]
public void add_UploadedComplete(EventHandler`1<AsyncFileUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadedComplete(EventHandler`1<AsyncFileUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UploadedFileError(EventHandler`1<AsyncFileUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadedFileError(EventHandler`1<AsyncFileUploadEventArgs> value);
    private bool get_IsDesignMode();
    private HttpPostedFile get_CurrentFile();
    public string get_OnClientUploadStarted();
    public void set_OnClientUploadStarted(string value);
    public string get_OnClientUploadComplete();
    public void set_OnClientUploadComplete(string value);
    public string get_OnClientUploadError();
    public void set_OnClientUploadError(string value);
    public Byte[] get_FileBytes();
    public string get_ThrobberID();
    public void set_ThrobberID(string value);
    public Color get_CompleteBackColor();
    public void set_CompleteBackColor(Color value);
    public Color get_UploadingBackColor();
    public void set_UploadingBackColor(Color value);
    public Color get_ErrorBackColor();
    public void set_ErrorBackColor(Color value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public bool get_FailedValidation();
    public void set_FailedValidation(bool value);
    public AsyncFileUploaderStyle get_UploaderStyle();
    public void set_UploaderStyle(AsyncFileUploaderStyle value);
    public HttpPostedFile get_PostedFile();
    public bool get_HasFile();
    public string get_FileName();
    public string get_ContentType();
    public Stream get_FileContent();
    public bool get_IsUploading();
    public bool get_PersistFile();
    public void set_PersistFile(bool value);
    public void ClearAllFilesFromPersistedStore();
    public void ClearFileFromPersistedStore();
    public void SaveAs(string fileName);
    private void PopulateObjectPriorToRender(string controlId);
    protected virtual void OnUploadedFileError(AsyncFileUploadEventArgs e);
    protected virtual void OnUploadedComplete(AsyncFileUploadEventArgs e);
    private void ReceivedFile(string sendingControlID);
    public Byte[] GetBytesFromStream(Stream stream);
    protected virtual void OnPreRender(EventArgs e);
    internal void CreateChilds();
    protected virtual void CreateChildControls();
    protected string GenerateHtmlInputHiddenControl();
    protected string GenerateHtmlInputFileControl(string lastFileName);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    protected virtual Style CreateControlStyle();
}
public enum AjaxControlToolkit.AsyncFileUploaderStyle : Enum {
    public int value__;
    public static AsyncFileUploaderStyle Traditional;
    public static AsyncFileUploaderStyle Modern;
}
public class AjaxControlToolkit.AsyncFileUploadEventArgs : EventArgs {
    private string _statusMessage;
    private string _filename;
    private string _filesize;
    private AsyncFileUploadState _state;
    public string StatusMessage { get; }
    public string FileName { get; }
    public string FileSize { get; }
    public AsyncFileUploadState State { get; }
    public AsyncFileUploadEventArgs(AsyncFileUploadState state, string statusMessage, string filename, string filesize);
    public string get_StatusMessage();
    public string get_FileName();
    public string get_FileSize();
    public AsyncFileUploadState get_State();
}
public enum AjaxControlToolkit.AsyncFileUploadState : Enum {
    public int value__;
    public static AsyncFileUploadState Success;
    public static AsyncFileUploadState Failed;
    public static AsyncFileUploadState Unknown;
}
[DesignerAttribute("AjaxControlToolkit.Design.AutoCompleteExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.AutoCompleteBehavior", "AutoComplete")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "AutoComplete.bmp")]
public class AjaxControlToolkit.AutoCompleteExtender : AnimationExtenderControlBase {
    private Animation _onShow;
    private Animation _onHide;
    [DefaultValueAttribute("3")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("minimumPrefixLength")]
public int MinimumPrefixLength { get; public set; }
    [DefaultValueAttribute("1000")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("completionInterval")]
public int CompletionInterval { get; public set; }
    [DefaultValueAttribute("10")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("completionSetCount")]
public int CompletionSetCount { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("completionListElementID")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ObsoleteAttribute("Instead of passing in CompletionListElementID, use the default flyout and style that using the CssClass properties.")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string CompletionListElementID { get; public set; }
    [DefaultValueAttribute("")]
[RequiredPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("serviceMethod")]
public string ServiceMethod { get; public set; }
    [UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[ClientPropertyNameAttribute("servicePath")]
public string ServicePath { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("contextKey")]
[DefaultValueAttribute("")]
public string ContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("useContextKey")]
[DefaultValueAttribute("False")]
public bool UseContextKey { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("completionListCssClass")]
public string CompletionListCssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("completionListItemCssClass")]
public string CompletionListItemCssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("highlightedItemCssClass")]
public string CompletionListHighlightedItemCssClass { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("enableCaching")]
public bool EnableCaching { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("delimiterCharacters")]
public string DelimiterCharacters { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("firstRowSelected")]
public bool FirstRowSelected { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("showOnlyCurrentWordInCompletionListItem")]
[DefaultValueAttribute("False")]
public bool ShowOnlyCurrentWordInCompletionListItem { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("populating")]
public string OnClientPopulating { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("populated")]
public string OnClientPopulated { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("showing")]
public string OnClientShowing { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("shown")]
public string OnClientShown { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("hiding")]
public string OnClientHiding { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("hidden")]
public string OnClientHidden { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("itemSelected")]
public string OnClientItemSelected { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("itemOver")]
public string OnClientItemOver { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("itemOut")]
public string OnClientItemOut { get; public set; }
    public virtual int get_MinimumPrefixLength();
    public virtual void set_MinimumPrefixLength(int value);
    public virtual int get_CompletionInterval();
    public virtual void set_CompletionInterval(int value);
    public virtual int get_CompletionSetCount();
    public virtual void set_CompletionSetCount(int value);
    public virtual string get_CompletionListElementID();
    public virtual void set_CompletionListElementID(string value);
    public virtual string get_ServiceMethod();
    public virtual void set_ServiceMethod(string value);
    public virtual string get_ServicePath();
    public virtual void set_ServicePath(string value);
    public string get_ContextKey();
    public void set_ContextKey(string value);
    public bool get_UseContextKey();
    public void set_UseContextKey(bool value);
    public string get_CompletionListCssClass();
    public void set_CompletionListCssClass(string value);
    public string get_CompletionListItemCssClass();
    public void set_CompletionListItemCssClass(string value);
    public string get_CompletionListHighlightedItemCssClass();
    public void set_CompletionListHighlightedItemCssClass(string value);
    public virtual bool get_EnableCaching();
    public virtual void set_EnableCaching(bool value);
    public virtual string get_DelimiterCharacters();
    public virtual void set_DelimiterCharacters(string value);
    public virtual bool get_FirstRowSelected();
    public virtual void set_FirstRowSelected(bool value);
    public bool get_ShowOnlyCurrentWordInCompletionListItem();
    public void set_ShowOnlyCurrentWordInCompletionListItem(bool value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    public string get_OnClientPopulating();
    public void set_OnClientPopulating(string value);
    public string get_OnClientPopulated();
    public void set_OnClientPopulated(string value);
    public string get_OnClientShowing();
    public void set_OnClientShowing(string value);
    public string get_OnClientShown();
    public void set_OnClientShown(string value);
    public string get_OnClientHiding();
    public void set_OnClientHiding(string value);
    public string get_OnClientHidden();
    public void set_OnClientHidden(string value);
    public string get_OnClientItemSelected();
    public void set_OnClientItemSelected(string value);
    public string get_OnClientItemOver();
    public void set_OnClientItemOver(string value);
    public string get_OnClientItemOut();
    public void set_OnClientItemOut(string value);
    protected virtual void OnPreRender(EventArgs e);
    public static string CreateAutoCompleteItem(string text, string value);
}
public enum AjaxControlToolkit.AutoSize : Enum {
    public int value__;
    public static AutoSize None;
    public static AutoSize Fill;
    public static AutoSize Limit;
}
public class AjaxControlToolkit.BackgroundColorSelector : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
[ClientScriptResourceAttribute("Sys.Extended.UI.BalloonPopupControlBehavior", "BalloonPopup")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[ClientCssResourceAttribute("BalloonPopup.Cloud")]
[ClientCssResourceAttribute("BalloonPopup.Rectangle")]
[DesignerAttribute("AjaxControlToolkit.Design.BalloonPopupExtenderDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "BalloonPopup.bmp")]
public class AjaxControlToolkit.BalloonPopupExtender : DynamicPopulateExtenderControlBase {
    private Animation _onHide;
    private Animation _onShow;
    [CompilerGeneratedAttribute]
private BalloonPopupPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private BalloonPopupStyle <BalloonStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomCssUrl>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ExtenderControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("balloonPopupControlID")]
public string BalloonPopupControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("balloonPopupPosition")]
public BalloonPopupPosition Position { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("balloonPopupStyle")]
public BalloonPopupStyle BalloonStyle { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("offsetX")]
public int OffsetX { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("offsetY")]
public int OffsetY { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("displayOnMouseOver")]
[DefaultValueAttribute("False")]
public bool DisplayOnMouseOver { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("displayOnFocus")]
[DefaultValueAttribute("False")]
public bool DisplayOnFocus { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("displayOnClick")]
[DefaultValueAttribute("True")]
public bool DisplayOnClick { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("balloonSize")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public BalloonPopupSize BalloonSize { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("useShadow")]
[DefaultValueAttribute("True")]
public bool UseShadow { get; public set; }
    [DefaultValueAttribute("")]
public string CustomCssUrl { get; public set; }
    [DefaultValueAttribute]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("scrollBars")]
[DescriptionAttribute("Scroll bars behavior when content is overflow")]
[ExtenderControlPropertyAttribute]
public ScrollBars ScrollBars { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("customClassName")]
[DefaultValueAttribute("")]
public string CustomClassName { get; public set; }
    public string get_ExtenderControlID();
    public void set_ExtenderControlID(string value);
    public string get_BalloonPopupControlID();
    public void set_BalloonPopupControlID(string value);
    [CompilerGeneratedAttribute]
public BalloonPopupPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(BalloonPopupPosition value);
    [CompilerGeneratedAttribute]
public BalloonPopupStyle get_BalloonStyle();
    [CompilerGeneratedAttribute]
public void set_BalloonStyle(BalloonPopupStyle value);
    public int get_OffsetX();
    public void set_OffsetX(int value);
    public int get_OffsetY();
    public void set_OffsetY(int value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    public bool get_DisplayOnMouseOver();
    public void set_DisplayOnMouseOver(bool value);
    public bool get_DisplayOnFocus();
    public void set_DisplayOnFocus(bool value);
    public bool get_DisplayOnClick();
    public void set_DisplayOnClick(bool value);
    public BalloonPopupSize get_BalloonSize();
    public void set_BalloonSize(BalloonPopupSize value);
    public bool get_UseShadow();
    public void set_UseShadow(bool value);
    [CompilerGeneratedAttribute]
public string get_CustomCssUrl();
    [CompilerGeneratedAttribute]
public void set_CustomCssUrl(string value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public string get_CustomClassName();
    public void set_CustomClassName(string value);
    protected virtual void OnPreRender(EventArgs e);
}
public enum AjaxControlToolkit.BalloonPopupPosition : Enum {
    public int value__;
    public static BalloonPopupPosition Auto;
    public static BalloonPopupPosition TopRight;
    public static BalloonPopupPosition TopLeft;
    public static BalloonPopupPosition BottomRight;
    public static BalloonPopupPosition BottomLeft;
}
public enum AjaxControlToolkit.BalloonPopupSize : Enum {
    public int value__;
    public static BalloonPopupSize Small;
    public static BalloonPopupSize Medium;
    public static BalloonPopupSize Large;
}
public enum AjaxControlToolkit.BalloonPopupStyle : Enum {
    public int value__;
    public static BalloonPopupStyle Rectangle;
    public static BalloonPopupStyle Cloud;
    public static BalloonPopupStyle Custom;
}
[ClientCssResourceAttribute("BarChart")]
[ClientScriptResourceAttribute("Sys.Extended.UI.BarChart", "BarChart")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "BarChart.bmp")]
public class AjaxControlToolkit.BarChart : ChartBase {
    private List`1<BarChartSeries> _series;
    [CompilerGeneratedAttribute]
private string <CategoriesAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private BarChartType <ChartType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseLineColor>k__BackingField;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("categoriesAxis")]
public string CategoriesAxis { get; public set; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("clientSeries")]
public List`1<BarChartSeries> ClientSeries { get; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.Design.ChartBaseSeriesEditor`1<AjaxControlToolkit.BarChartSeries>", "System.Drawing.Design.UITypeEditor")]
public List`1<BarChartSeries> Series { get; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("chartType")]
public BarChartType ChartType { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("9")]
[ClientPropertyNameAttribute("valueAxisLines")]
public int ValueAxisLines { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("valueAxisLineColor")]
public string ValueAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("categoryAxisLineColor")]
public string CategoryAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("baseLineColor")]
public string BaseLineColor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CategoriesAxis();
    [CompilerGeneratedAttribute]
public void set_CategoriesAxis(string value);
    public List`1<BarChartSeries> get_ClientSeries();
    public List`1<BarChartSeries> get_Series();
    [CompilerGeneratedAttribute]
public BarChartType get_ChartType();
    [CompilerGeneratedAttribute]
public void set_ChartType(BarChartType value);
    [CompilerGeneratedAttribute]
public int get_ValueAxisLines();
    [CompilerGeneratedAttribute]
public void set_ValueAxisLines(int value);
    [CompilerGeneratedAttribute]
public string get_ValueAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_ValueAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_CategoryAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_BaseLineColor();
    [CompilerGeneratedAttribute]
public void set_BaseLineColor(string value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
public class AjaxControlToolkit.BarChartSeries : object {
    private string _name;
    private string _barColor;
    [CompilerGeneratedAttribute]
private Decimal[] <Data>k__BackingField;
    public string Name { get; public set; }
    public string BarColor { get; public set; }
    [TypeConverterAttribute("AjaxControlToolkit.DataConverter`1<System.Decimal>")]
public Decimal[] Data { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_BarColor();
    public void set_BarColor(string value);
    [CompilerGeneratedAttribute]
public Decimal[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Decimal[] value);
}
public enum AjaxControlToolkit.BarChartType : Enum {
    public int value__;
    public static BarChartType Column;
    public static BarChartType Bar;
    public static BarChartType StackedColumn;
    public static BarChartType StackedBar;
}
public class AjaxControlToolkit.Bold : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
[FlagsAttribute]
public enum AjaxControlToolkit.BoxCorners : Enum {
    public int value__;
    public static BoxCorners None;
    public static BoxCorners TopLeft;
    public static BoxCorners TopRight;
    public static BoxCorners BottomRight;
    public static BoxCorners BottomLeft;
    public static BoxCorners Top;
    public static BoxCorners Right;
    public static BoxCorners Bottom;
    public static BoxCorners Left;
    public static BoxCorners All;
}
[ClientCssResourceAttribute("BubbleChart")]
[ClientScriptResourceAttribute("Sys.Extended.UI.BubbleChart", "BubbleChart")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "BubbleChart.bmp")]
public class AjaxControlToolkit.BubbleChart : ChartBase {
    private List`1<BubbleChartValue> _values;
    [CompilerGeneratedAttribute]
private int <YAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <XAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BubbleSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipFontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XAxisLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YAxisLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BubbleLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AxislabelFontColor>k__BackingField;
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("bubbleChartClientValues")]
public List`1<BubbleChartValue> BubbleChartClientValues { get; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.Design.ChartBaseSeriesEditor`1<AjaxControlToolkit.BubbleChartValue>", "System.Drawing.Design.UITypeEditor")]
public List`1<BubbleChartValue> BubbleChartValues { get; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("6")]
[ClientPropertyNameAttribute("yAxisLines")]
public int YAxisLines { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("6")]
[ClientPropertyNameAttribute("xAxisLines")]
public int XAxisLines { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("5")]
[ClientPropertyNameAttribute("bubbleSizes")]
public int BubbleSizes { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("yAxisLineColor")]
public string YAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("xAxisLineColor")]
public string XAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("baseLineColor")]
public string BaseLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("#FFC652")]
[ClientPropertyNameAttribute("tooltipBackgroundColor")]
public string TooltipBackgroundColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("#0E426C")]
[ClientPropertyNameAttribute("tooltipFontColor")]
public string TooltipFontColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("#B85B3E")]
[ClientPropertyNameAttribute("tooltipBorderColor")]
public string TooltipBorderColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("xAxisLabel")]
public string XAxisLabel { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("yAxisLabel")]
public string YAxisLabel { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("bubbleLabel")]
public string BubbleLabel { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("axislabelFontColor")]
public string AxislabelFontColor { get; public set; }
    public List`1<BubbleChartValue> get_BubbleChartClientValues();
    public List`1<BubbleChartValue> get_BubbleChartValues();
    [CompilerGeneratedAttribute]
public int get_YAxisLines();
    [CompilerGeneratedAttribute]
public void set_YAxisLines(int value);
    [CompilerGeneratedAttribute]
public int get_XAxisLines();
    [CompilerGeneratedAttribute]
public void set_XAxisLines(int value);
    [CompilerGeneratedAttribute]
public int get_BubbleSizes();
    [CompilerGeneratedAttribute]
public void set_BubbleSizes(int value);
    [CompilerGeneratedAttribute]
public string get_YAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_YAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_XAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_XAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_BaseLineColor();
    [CompilerGeneratedAttribute]
public void set_BaseLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_TooltipBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_TooltipBackgroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_TooltipFontColor();
    [CompilerGeneratedAttribute]
public void set_TooltipFontColor(string value);
    [CompilerGeneratedAttribute]
public string get_TooltipBorderColor();
    [CompilerGeneratedAttribute]
public void set_TooltipBorderColor(string value);
    [CompilerGeneratedAttribute]
public string get_XAxisLabel();
    [CompilerGeneratedAttribute]
public void set_XAxisLabel(string value);
    [CompilerGeneratedAttribute]
public string get_YAxisLabel();
    [CompilerGeneratedAttribute]
public void set_YAxisLabel(string value);
    [CompilerGeneratedAttribute]
public string get_BubbleLabel();
    [CompilerGeneratedAttribute]
public void set_BubbleLabel(string value);
    [CompilerGeneratedAttribute]
public string get_AxislabelFontColor();
    [CompilerGeneratedAttribute]
public void set_AxislabelFontColor(string value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
}
public class AjaxControlToolkit.BubbleChartValue : object {
    private string _category;
    private decimal _x;
    private decimal _y;
    private decimal _data;
    private string _bubbleColor;
    public string Category { get; public set; }
    public decimal X { get; public set; }
    public decimal Y { get; public set; }
    public decimal Data { get; public set; }
    public string BubbleColor { get; public set; }
    public string get_Category();
    public void set_Category(string value);
    public decimal get_X();
    public void set_X(decimal value);
    public decimal get_Y();
    public void set_Y(decimal value);
    public decimal get_Data();
    public void set_Data(decimal value);
    public string get_BubbleColor();
    public void set_BubbleColor(string value);
}
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.BulletedList : WebControl {
    protected HtmlTextWriterTag TagKey { get; }
    protected virtual HtmlTextWriterTag get_TagKey();
}
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.BulletedListItem : WebControl {
    protected HtmlTextWriterTag TagKey { get; }
    protected virtual HtmlTextWriterTag get_TagKey();
}
public class AjaxControlToolkit.Bundling.BundleResolver : object {
    public static string ConfigFileVirtualPath;
    private static string ConfigCacheKey;
    private ICache _cache;
    private static Dictionary`2<string, Assembly> LoadedAssemblies;
    public BundleResolver(ICache cache);
    private static BundleResolver();
    public virtual List`1<Type> GetControlTypesInBundles(String[] bundles, string fileName);
    private string ReadConfiguration(string fileName);
    private Settings ParseConfiguration(string text);
    private static Assembly GetAssembly(string name);
    public IEnumerable`1<string> GetControlBundles();
}
public class AjaxControlToolkit.Bundling.Control : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("assembly")]
public string Assembly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
}
public class AjaxControlToolkit.Bundling.ControlBundle : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Control[] <Controls>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("control")]
public Control[] Controls { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Control[] get_Controls();
    [CompilerGeneratedAttribute]
public void set_Controls(Control[] value);
}
public class AjaxControlToolkit.Bundling.ControlBundleSection : object {
    [CompilerGeneratedAttribute]
private ControlBundle[] <ControlBundles>k__BackingField;
    [XmlElementAttribute("controlBundle")]
public ControlBundle[] ControlBundles { get; public set; }
    [CompilerGeneratedAttribute]
public ControlBundle[] get_ControlBundles();
    [CompilerGeneratedAttribute]
public void set_ControlBundles(ControlBundle[] value);
}
public class AjaxControlToolkit.Bundling.DefaultCache : object {
    public sealed virtual void Set(string key, object value);
    public sealed virtual T Get(string key);
    public sealed virtual void Remove(string key);
    public sealed virtual void Set(string key, object value, string fileCacheDependencyName);
}
public interface AjaxControlToolkit.Bundling.ICache {
    public abstract virtual T Get(string key);
    public abstract virtual void Set(string key, object value);
    public abstract virtual void Set(string key, object value, string fileCacheDependencyName);
    public abstract virtual void Remove(string key);
}
[XmlRootAttribute("ajaxControlToolkit")]
public class AjaxControlToolkit.Bundling.Settings : object {
    [CompilerGeneratedAttribute]
private ControlBundleSection[] <ControlBundleSections>k__BackingField;
    [XmlElementAttribute("controlBundles")]
public ControlBundleSection[] ControlBundleSections { get; public set; }
    [CompilerGeneratedAttribute]
public ControlBundleSection[] get_ControlBundleSections();
    [CompilerGeneratedAttribute]
public void set_ControlBundleSections(ControlBundleSection[] value);
}
public enum AjaxControlToolkit.CalendarDefaultView : Enum {
    public int value__;
    public static CalendarDefaultView Days;
    public static CalendarDefaultView Months;
    public static CalendarDefaultView Years;
}
[DesignerAttribute("AjaxControlToolkit.Design.CalendarExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "0")]
[RequiredScriptAttribute("AjaxControlToolkit.DateTimeScripts", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender", "2")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts", "3")]
[RequiredScriptAttribute("AjaxControlToolkit.ThreadingScripts", "4")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ClientCssResourceAttribute("Calendar")]
[ClientScriptResourceAttribute("Sys.Extended.UI.CalendarBehavior", "Calendar")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Calendar.bmp")]
public class AjaxControlToolkit.CalendarExtender : ExtenderControlBase {
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cssClass")]
public string CssClass { get; public set; }
    [DefaultValueAttribute("d")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("format")]
public string Format { get; public set; }
    [DefaultValueAttribute("MMMM d, yyyy")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("todaysDateFormat")]
public string TodaysDateFormat { get; public set; }
    [DefaultValueAttribute("MMMM, yyyy")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("daysModeTitleFormat")]
public string DaysModeTitleFormat { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("clearTime")]
public bool ClearTime { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("enabled")]
public bool EnabledOnClient { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("animated")]
public bool Animated { get; public set; }
    [DefaultValueAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("firstDayOfWeek")]
public FirstDayOfWeek FirstDayOfWeek { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("button")]
[ElementReferenceAttribute]
[IDReferencePropertyAttribute]
public string PopupButtonID { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("popupPosition")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Indicates where you want the calendar displayed, bottom or top of the textbox.")]
public CalendarPosition PopupPosition { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("selectedDate")]
public Nullable`1<DateTime> SelectedDate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("defaultView")]
[DescriptionAttribute("Default view of the calendar when it first pops up.")]
public CalendarDefaultView DefaultView { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("showing")]
public string OnClientShowing { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("shown")]
public string OnClientShown { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("hiding")]
public string OnClientHiding { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("hidden")]
public string OnClientHidden { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("dateSelectionChanged")]
public string OnClientDateSelectionChanged { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("startDate")]
public Nullable`1<DateTime> StartDate { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("endDate")]
public Nullable`1<DateTime> EndDate { get; public set; }
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    public virtual string get_Format();
    public virtual void set_Format(string value);
    public virtual string get_TodaysDateFormat();
    public virtual void set_TodaysDateFormat(string value);
    public virtual string get_DaysModeTitleFormat();
    public virtual void set_DaysModeTitleFormat(string value);
    public virtual bool get_ClearTime();
    public virtual void set_ClearTime(bool value);
    public virtual bool get_EnabledOnClient();
    public virtual void set_EnabledOnClient(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual FirstDayOfWeek get_FirstDayOfWeek();
    public virtual void set_FirstDayOfWeek(FirstDayOfWeek value);
    public virtual string get_PopupButtonID();
    public virtual void set_PopupButtonID(string value);
    public virtual CalendarPosition get_PopupPosition();
    public virtual void set_PopupPosition(CalendarPosition value);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    public virtual CalendarDefaultView get_DefaultView();
    public virtual void set_DefaultView(CalendarDefaultView value);
    public virtual string get_OnClientShowing();
    public virtual void set_OnClientShowing(string value);
    public virtual string get_OnClientShown();
    public virtual void set_OnClientShown(string value);
    public virtual string get_OnClientHiding();
    public virtual void set_OnClientHiding(string value);
    public virtual string get_OnClientHidden();
    public virtual void set_OnClientHidden(string value);
    public virtual string get_OnClientDateSelectionChanged();
    public virtual void set_OnClientDateSelectionChanged(string value);
    public Nullable`1<DateTime> get_StartDate();
    public void set_StartDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_EndDate();
    public void set_EndDate(Nullable`1<DateTime> value);
}
public enum AjaxControlToolkit.CalendarPosition : Enum {
    public int value__;
    public static CalendarPosition BottomLeft;
    public static CalendarPosition BottomRight;
    public static CalendarPosition TopLeft;
    public static CalendarPosition TopRight;
    public static CalendarPosition Right;
    public static CalendarPosition Left;
}
[DesignerAttribute("AjaxControlToolkit.Design.CascadingDropDownExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.CascadingDropDownBehavior", "CascadingDropDown")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.ListBox")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.DropDownList")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "CascadingDropDown.bmp")]
public class AjaxControlToolkit.CascadingDropDown : ExtenderControlBase {
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.DropDownList")]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("parentControlID")]
public string ParentControlID { get; public set; }
    [RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("category")]
public string Category { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("promptText")]
public string PromptText { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("promptValue")]
public string PromptValue { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("emptyText")]
public string EmptyText { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("emptyValue")]
public string EmptyValue { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("loadingText")]
public string LoadingText { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("selectedValue")]
public string SelectedValue { get; public set; }
    [UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[ClientPropertyNameAttribute("servicePath")]
public string ServicePath { get; public set; }
    [RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("serviceMethod")]
public string ServiceMethod { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("contextKey")]
[DefaultValueAttribute("")]
public string ContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("useContextKey")]
[DefaultValueAttribute("False")]
public bool UseContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("useHttpGet")]
[DefaultValueAttribute("False")]
public bool UseHttpGet { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("enableAtLoading")]
[DefaultValueAttribute("False")]
public bool EnableAtLoading { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("clearSelectedItemOnParentChange")]
[DefaultValueAttribute("False")]
public bool ClearSelectedItemOnParentChange { get; public set; }
    public string get_ParentControlID();
    public void set_ParentControlID(string value);
    public string get_Category();
    public void set_Category(string value);
    public string get_PromptText();
    public void set_PromptText(string value);
    public string get_PromptValue();
    public void set_PromptValue(string value);
    public string get_EmptyText();
    public void set_EmptyText(string value);
    public string get_EmptyValue();
    public void set_EmptyValue(string value);
    public string get_LoadingText();
    public void set_LoadingText(string value);
    public string get_SelectedValue();
    public void set_SelectedValue(string value);
    public string get_ServicePath();
    public void set_ServicePath(string value);
    private bool ShouldSerializeServicePath();
    public string get_ServiceMethod();
    public void set_ServiceMethod(string value);
    public string get_ContextKey();
    public void set_ContextKey(string value);
    public bool get_UseContextKey();
    public void set_UseContextKey(bool value);
    public bool get_UseHttpGet();
    public void set_UseHttpGet(bool value);
    public bool get_EnableAtLoading();
    public void set_EnableAtLoading(bool value);
    public bool get_ClearSelectedItemOnParentChange();
    public void set_ClearSelectedItemOnParentChange(bool value);
    private void CascadingDropDown_ClientStateValuesLoaded(object sender, EventArgs e);
    public static StringDictionary ParseKnownCategoryValuesString(string knownCategoryValues);
    public static CascadingDropDownNameValue[] QuerySimpleCascadingDropDownDocument(XmlDocument document, String[] documentHierarchy, StringDictionary knownCategoryValuesDictionary, string category);
    public static CascadingDropDownNameValue[] QuerySimpleCascadingDropDownDocument(XmlDocument document, String[] documentHierarchy, StringDictionary knownCategoryValuesDictionary, string category, Regex inputValidationRegex);
}
public class AjaxControlToolkit.CascadingDropDownNameValue : object {
    public string name;
    public string value;
    public bool isDefaultValue;
    public string optionTitle;
    public CascadingDropDownNameValue(string name, string value);
    public CascadingDropDownNameValue(string name, string value, bool defaultValue);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[DesignerAttribute("AjaxControlToolkit.Design.ChartBaseDesigner")]
public abstract class AjaxControlToolkit.ChartBase : ScriptControlBase {
    protected string ContainerID;
    [CompilerGeneratedAttribute]
private string <ChartWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChartHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChartTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChartTitleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    protected bool IsDesignMode { get; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("chartWidth")]
public string ChartWidth { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("chartHeight")]
public string ChartHeight { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("chartTitle")]
public string ChartTitle { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("chartTitleColor")]
public string ChartTitleColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("PieChart")]
[ClientPropertyNameAttribute("theme")]
public string Theme { get; public set; }
    protected bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public string get_ChartWidth();
    [CompilerGeneratedAttribute]
public void set_ChartWidth(string value);
    [CompilerGeneratedAttribute]
public string get_ChartHeight();
    [CompilerGeneratedAttribute]
public void set_ChartHeight(string value);
    [CompilerGeneratedAttribute]
public string get_ChartTitle();
    [CompilerGeneratedAttribute]
public void set_ChartTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ChartTitleColor();
    [CompilerGeneratedAttribute]
public void set_ChartTitleColor(string value);
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    protected virtual void CreateChildControls();
}
public class AjaxControlToolkit.CleanWord : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.ClientCssResourceAttribute : ClientResourceAttribute {
    public ClientCssResourceAttribute(string resourcePath);
}
[AttributeUsageAttribute("128")]
public class AjaxControlToolkit.ClientPropertyNameAttribute : Attribute {
    private string _propertyName;
    public string PropertyName { get; }
    public ClientPropertyNameAttribute(string propertyName);
    public string get_PropertyName();
}
[AttributeUsageAttribute("4")]
public abstract class AjaxControlToolkit.ClientResourceAttribute : Attribute {
    private int _loadOrder;
    private string _resourcePath;
    public string ResourcePath { get; }
    public int LoadOrder { get; }
    public ClientResourceAttribute(string resourcePath);
    public string get_ResourcePath();
    public int get_LoadOrder();
}
public class AjaxControlToolkit.ClientScriptResourceAttribute : ClientResourceAttribute {
    private string _componentType;
    public string ComponentType { get; }
    public ClientScriptResourceAttribute(string componentType, string resourcePath);
    public string get_ComponentType();
}
public enum AjaxControlToolkit.CollapsiblePanelExpandDirection : Enum {
    public int value__;
    public static CollapsiblePanelExpandDirection Horizontal;
    public static CollapsiblePanelExpandDirection Vertical;
}
[DesignerAttribute("AjaxControlToolkit.Design.CollapsiblePanelExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.CollapsiblePanelBehavior", "CollapsiblePanel")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.Panel")]
[DefaultPropertyAttribute("CollapseControlID")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "CollapsiblePanel.bmp")]
public class AjaxControlToolkit.CollapsiblePanelExtender : ExtenderControlBase {
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("collapseControlID")]
public string CollapseControlID { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("expandControlID")]
public string ExpandControlID { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoCollapse")]
public bool AutoCollapse { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoExpand")]
public bool AutoExpand { get; public set; }
    [DefaultValueAttribute("-1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("collapsedSize")]
public int CollapsedSize { get; public set; }
    [DefaultValueAttribute("-1")]
[ExtenderControlPropertyAttribute]
public int ExpandedSize { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("scrollContents")]
public bool ScrollContents { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("suppressPostBack")]
public bool SuppressPostBack { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("collapsed")]
public bool Collapsed { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("collapsedText")]
public string CollapsedText { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("expandedText")]
public string ExpandedText { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.Label")]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("textLabelID")]
public string TextLabelID { get; public set; }
    [DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("expandedImage")]
public string ExpandedImage { get; public set; }
    [DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("collapsedImage")]
public string CollapsedImage { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.Image")]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("imageControlID")]
public string ImageControlID { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("expandDirection")]
public CollapsiblePanelExpandDirection ExpandDirection { get; public set; }
    public string get_CollapseControlID();
    public void set_CollapseControlID(string value);
    public string get_ExpandControlID();
    public void set_ExpandControlID(string value);
    public bool get_AutoCollapse();
    public void set_AutoCollapse(bool value);
    public bool get_AutoExpand();
    public void set_AutoExpand(bool value);
    public int get_CollapsedSize();
    public void set_CollapsedSize(int value);
    public int get_ExpandedSize();
    public void set_ExpandedSize(int value);
    public bool get_ScrollContents();
    public void set_ScrollContents(bool value);
    public bool get_SuppressPostBack();
    public void set_SuppressPostBack(bool value);
    public bool get_Collapsed();
    public void set_Collapsed(bool value);
    public string get_CollapsedText();
    public void set_CollapsedText(string value);
    public string get_ExpandedText();
    public void set_ExpandedText(string value);
    public string get_TextLabelID();
    public void set_TextLabelID(string value);
    public string get_ExpandedImage();
    public void set_ExpandedImage(string value);
    public string get_CollapsedImage();
    public void set_CollapsedImage(string value);
    public string get_ImageControlID();
    public void set_ImageControlID(string value);
    public CollapsiblePanelExpandDirection get_ExpandDirection();
    public void set_ExpandDirection(CollapsiblePanelExpandDirection value);
    [EditorBrowsableAttribute("1")]
public virtual void EnsureValid();
    private void CollapsiblePanelExtender_ClientStateValuesLoaded(object sender, EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "0")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.ThreadingScripts", "2")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ClientCssResourceAttribute("ColorPicker")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ColorPickerBehavior", "ColorPicker")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ColorPicker.bmp")]
[DesignerAttribute("AjaxControlToolkit.Design.ColorPickerExtenderDesigner")]
public class AjaxControlToolkit.ColorPickerExtender : ExtenderControlBase {
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("enabled")]
public bool EnabledOnClient { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("button")]
[ElementReferenceAttribute]
[IDReferencePropertyAttribute]
public string PopupButtonID { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("sample")]
[ElementReferenceAttribute]
[IDReferencePropertyAttribute]
public string SampleControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("popupPosition")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Indicates where you want the color picker displayed relative to the textbox.")]
public PositioningMode PopupPosition { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("paletteStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ColorPickerPaletteStyle PaletteStyle { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("selectedColor")]
public string SelectedColor { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("showing")]
public string OnClientShowing { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("shown")]
public string OnClientShown { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("hiding")]
public string OnClientHiding { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("hidden")]
public string OnClientHidden { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("colorSelectionChanged")]
public string OnClientColorSelectionChanged { get; public set; }
    public virtual bool get_EnabledOnClient();
    public virtual void set_EnabledOnClient(bool value);
    public virtual string get_PopupButtonID();
    public virtual void set_PopupButtonID(string value);
    public virtual string get_SampleControlID();
    public virtual void set_SampleControlID(string value);
    public virtual PositioningMode get_PopupPosition();
    public virtual void set_PopupPosition(PositioningMode value);
    public virtual ColorPickerPaletteStyle get_PaletteStyle();
    public virtual void set_PaletteStyle(ColorPickerPaletteStyle value);
    public string get_SelectedColor();
    public void set_SelectedColor(string value);
    public virtual string get_OnClientShowing();
    public virtual void set_OnClientShowing(string value);
    public virtual string get_OnClientShown();
    public virtual void set_OnClientShown(string value);
    public virtual string get_OnClientHiding();
    public virtual void set_OnClientHiding(string value);
    public virtual string get_OnClientHidden();
    public virtual void set_OnClientHidden(string value);
    public virtual string get_OnClientColorSelectionChanged();
    public virtual void set_OnClientColorSelectionChanged(string value);
}
public enum AjaxControlToolkit.ColorPickerPaletteStyle : Enum {
    public int value__;
    public static ColorPickerPaletteStyle Default;
    public static ColorPickerPaletteStyle Continuous;
}
[SupportsEventValidationAttribute]
[ValidationPropertyAttribute("SelectedItem")]
[DesignerAttribute("AjaxControlToolkit.Design.ComboBoxDesigner")]
[BindableAttribute("True", "1")]
[DataBindingHandlerAttribute("System.Web.UI.Design.WebControls.ListControlDataBindingHandler")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DefaultPropertyAttribute("SelectedValue")]
[ControlValuePropertyAttribute("SelectedValue")]
[ParseChildrenAttribute("True", "Items")]
[ToolboxDataAttribute("<{0}:ComboBox runat="server"></{0}:ComboBox>")]
[ClientCssResourceAttribute("ComboBox")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ComboBox", "ComboBox")]
[RequiredScriptAttribute("AjaxControlToolkit.ScriptControlBase", "2")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender", "3")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "4")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ComboBox.bmp")]
public class AjaxControlToolkit.ComboBox : ListControl {
    private TextBox _textBoxControl;
    private ScriptManager _scriptManager;
    private ComboBoxButton _buttonControl;
    private HiddenField _hiddenFieldControl;
    private BulletedList _optionListControl;
    private Table _comboTable;
    private TableRow _comboTableRow;
    private TableCell _comboTableTextBoxCell;
    private TableCell _comboTableButtonCell;
    private static object EventItemInserting;
    private static object EventItemInserted;
    protected ScriptManager ScriptManager { get; protected set; }
    protected string ClientControlType { get; }
    [CategoryAttribute("Layout")]
[DefaultValueAttribute("AjaxControlToolkit.ComboBoxRenderMode", "Inline")]
[DescriptionAttribute("Whether the ComboBox will render as a block or inline HTML element.")]
public ComboBoxRenderMode RenderMode { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("AjaxControlToolkit.ComboBoxStyle", "DropDown")]
[DescriptionAttribute("Whether the ComboBox requires typed text to match an item in the list or allows new items to be created.")]
public ComboBoxStyle DropDownStyle { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("AjaxControlToolkit.ComboBoxAutoCompleteMode", "None")]
[DescriptionAttribute("Whether the ComboBox auto-completes typing by suggesting an item in the list or appending matches as the user types.")]
public ComboBoxAutoCompleteMode AutoCompleteMode { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("AjaxControlToolkit.ComboBoxItemInsertLocation", "Append")]
[DescriptionAttribute("Whether a new item will be appended, prepended, or inserted ordinally into the items collection.")]
public ComboBoxItemInsertLocation ItemInsertLocation { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Whether the ComboBox auto-completes user typing on a case-sensitive basis.")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("caseSensitive")]
public bool CaseSensitive { get; public set; }
    [CategoryAttribute("Style")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The CSS class to apply to a hovered item in the list.")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("listItemHoverCssClass")]
public string ListItemHoverCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("selectedIndex")]
public int SelectedIndex { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoPostBack")]
public bool AutoPostBack { get; public set; }
    public int MaxLength { get; public set; }
    public short TabIndex { get; public set; }
    public bool Enabled { get; public set; }
    public Unit Height { get; public set; }
    public Unit Width { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    public FontInfo Font { get; }
    public Color BorderColor { get; public set; }
    public BorderStyle BorderStyle { get; public set; }
    public Unit BorderWidth { get; public set; }
    protected TextBox TextBoxControl { get; }
    protected ComboBoxButton ButtonControl { get; }
    protected HiddenField HiddenFieldControl { get; }
    protected BulletedList OptionListControl { get; }
    protected Table ComboTable { get; }
    protected TableRow ComboTableRow { get; }
    protected TableCell ComboTableTextBoxCell { get; }
    protected TableCell ComboTableButtonCell { get; }
    protected HtmlTextWriterTag TagKey { get; }
    private static ComboBox();
    protected virtual void set_ScriptManager(ScriptManager value);
    protected virtual ScriptManager get_ScriptManager();
    protected virtual string get_ClientControlType();
    public sealed virtual Control ResolveControl(string controlId);
    public void set_RenderMode(ComboBoxRenderMode value);
    public ComboBoxRenderMode get_RenderMode();
    public virtual void set_DropDownStyle(ComboBoxStyle value);
    public virtual ComboBoxStyle get_DropDownStyle();
    public virtual void set_AutoCompleteMode(ComboBoxAutoCompleteMode value);
    public virtual ComboBoxAutoCompleteMode get_AutoCompleteMode();
    public virtual void set_ItemInsertLocation(ComboBoxItemInsertLocation value);
    public virtual ComboBoxItemInsertLocation get_ItemInsertLocation();
    public virtual void set_CaseSensitive(bool value);
    public virtual bool get_CaseSensitive();
    public virtual void set_ListItemHoverCssClass(string value);
    public virtual string get_ListItemHoverCssClass();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual bool get_AutoPostBack();
    public virtual void set_AutoPostBack(bool value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public virtual short get_TabIndex();
    public virtual void set_TabIndex(short value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual FontInfo get_Font();
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    protected virtual TextBox get_TextBoxControl();
    protected virtual ComboBoxButton get_ButtonControl();
    protected virtual HiddenField get_HiddenFieldControl();
    protected virtual BulletedList get_OptionListControl();
    protected virtual Table get_ComboTable();
    protected virtual TableRow get_ComboTableRow();
    protected virtual TableCell get_ComboTableTextBoxCell();
    protected virtual TableCell get_ComboTableButtonCell();
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
    protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void CreateChildControls();
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddContainerAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddTableAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddTextBoxAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddButtonAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddOptionListAttributesToRender(HtmlTextWriter writer);
    public virtual void RenderControl(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    public virtual void RaisePostDataChangedEvent();
    public void add_ItemInserting(EventHandler`1<ComboBoxItemInsertEventArgs> value);
    public void remove_ItemInserting(EventHandler`1<ComboBoxItemInsertEventArgs> value);
    public void add_ItemInserted(EventHandler`1<ComboBoxItemInsertEventArgs> value);
    public void remove_ItemInserted(EventHandler`1<ComboBoxItemInsertEventArgs> value);
    protected virtual void OnItemInserting(ComboBoxItemInsertEventArgs e);
    protected virtual void OnItemInserted(ComboBoxItemInsertEventArgs e);
    protected virtual void InsertItem(ComboBoxItemInsertEventArgs e);
    private string GetInlineDisplayStyle();
}
public enum AjaxControlToolkit.ComboBoxAutoCompleteMode : Enum {
    public int value__;
    public static ComboBoxAutoCompleteMode None;
    public static ComboBoxAutoCompleteMode Append;
    public static ComboBoxAutoCompleteMode Suggest;
    public static ComboBoxAutoCompleteMode SuggestAppend;
}
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.ComboBoxButton : WebControl {
    protected HtmlTextWriterTag TagKey { get; }
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
}
internal class AjaxControlToolkit.ComboBoxDesignerActionList : DesignerActionList {
    private ComboBox _comboBox;
    public bool AppendDataBoundItems { get; public set; }
    public bool CaseSensitive { get; public set; }
    public ComboBoxStyle DropDownStyle { get; public set; }
    public ComboBoxAutoCompleteMode AutoCompleteMode { get; public set; }
    public ComboBoxDesignerActionList(IComponent component);
    public bool get_AppendDataBoundItems();
    public void set_AppendDataBoundItems(bool value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public ComboBoxStyle get_DropDownStyle();
    public void set_DropDownStyle(ComboBoxStyle value);
    public ComboBoxAutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(ComboBoxAutoCompleteMode value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
    protected virtual DesignerActionPropertyItem GetPropertyItem(string propertyName, string displayName);
    protected virtual void SetComponentProperty(string propertyName, object value);
}
public class AjaxControlToolkit.ComboBoxItemInsertEventArgs : CancelEventArgs {
    private ListItem _listItem;
    private ComboBoxItemInsertLocation _insertLocation;
    public ListItem Item { get; public set; }
    public ComboBoxItemInsertLocation InsertLocation { get; public set; }
    internal ComboBoxItemInsertEventArgs(string text, ComboBoxItemInsertLocation location);
    public void set_Item(ListItem value);
    public ListItem get_Item();
    public void set_InsertLocation(ComboBoxItemInsertLocation value);
    public ComboBoxItemInsertLocation get_InsertLocation();
}
public enum AjaxControlToolkit.ComboBoxItemInsertLocation : Enum {
    public int value__;
    public static ComboBoxItemInsertLocation Append;
    public static ComboBoxItemInsertLocation Prepend;
    public static ComboBoxItemInsertLocation OrdinalText;
    public static ComboBoxItemInsertLocation OrdinalValue;
}
public enum AjaxControlToolkit.ComboBoxRenderMode : Enum {
    public int value__;
    public static ComboBoxRenderMode Inline;
    public static ComboBoxRenderMode Block;
}
public enum AjaxControlToolkit.ComboBoxStyle : Enum {
    public int value__;
    public static ComboBoxStyle DropDownList;
    public static ComboBoxStyle DropDown;
    public static ComboBoxStyle Simple;
}
[ClientScriptResourceAttribute("", "Common")]
[ClientScriptResourceAttribute("", "ComponentSet")]
public static class AjaxControlToolkit.CommonToolkitScripts : object {
}
public class AjaxControlToolkit.ComponentDescriber : object {
    private static Dictionary`2<Type, Converter`2<object, string>> _customConverters;
    private static ComponentDescriber();
    public static void DescribeComponent(object instance, IScriptComponentDescriptor descriptor, IUrlResolutionService urlResolver, IControlResolver controlResolver);
}
[AttributeUsageAttribute("128")]
public class AjaxControlToolkit.ComponentReferenceAttribute : Attribute {
}
[DesignerAttribute("AjaxControlToolkit.Design.ConfirmButtonExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ConfirmButtonBehavior", "ConfirmButton")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.IButtonControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ConfirmButton.bmp")]
public class AjaxControlToolkit.ConfirmButtonExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("confirmText")]
public string ConfirmText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("onClientCancel")]
public string OnClientCancel { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("confirmOnFormSubmit")]
public bool ConfirmOnFormSubmit { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("displayModalPopupID")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("AjaxControlToolkit.ModalPopupExtender")]
public string DisplayModalPopupID { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("postBackScript")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string PostBackScript { get; public set; }
    protected virtual void OnLoad(EventArgs e);
    public void RegisterDisplayModalPopup();
    public string get_ConfirmText();
    public void set_ConfirmText(string value);
    public string get_OnClientCancel();
    public void set_OnClientCancel(string value);
    public bool get_ConfirmOnFormSubmit();
    public void set_ConfirmOnFormSubmit(bool value);
    public string get_DisplayModalPopupID();
    public void set_DisplayModalPopupID(string value);
    public string get_PostBackScript();
    public void set_PostBackScript(string value);
}
public static class AjaxControlToolkit.Constants : object {
    public static string CdnPrefix;
    internal static string CdnScriptDebugPrefix;
    internal static string CdnScriptReleasePrefix;
    internal static string JsPostfix;
    internal static string DebugJsPostfix;
    internal static string CssPostfix;
    internal static string MinCssPostfix;
    internal static string IconPostfix;
    internal static string UploadTempFileExtension;
    internal static string ContentVirtualPath;
    internal static string StylesVirtualPath;
    internal static string ImagesVirtualPath;
    internal static string ScriptsVirtualPath;
    internal static string ScriptsDebugVirtualPath;
    internal static string ScriptsReleaseVirtualPath;
    internal static string ImageResourcePrefix;
    internal static string StyleResourcePrefix;
    internal static string BackgroundStylesName;
    internal static string BaseScriptName;
    internal static string CommonScriptName;
    internal static string CompatDragDropScriptName;
    internal static string CompatTimerScriptName;
    internal static string ComponentSetName;
    internal static string DateTimeScriptName;
    internal static string LocalizationScriptName;
    internal static string ThreadingScriptName;
    internal static string AccordionName;
    internal static string AjaxFileUploadName;
    internal static string AlwaysVisibleControlName;
    internal static string AnimationName;
    internal static string AnimationScriptsName;
    internal static string AreaChartName;
    internal static string AsyncFileUploadName;
    internal static string AutoCompleteName;
    internal static string BalloonPopupName;
    internal static string BarChartName;
    internal static string BubbleChartName;
    internal static string CalendarName;
    internal static string CascadingDropDownName;
    internal static string CollapsiblePanelName;
    internal static string ColorPickerName;
    internal static string ConfirmButtonName;
    internal static string ComboBoxName;
    internal static string DynamicPopulateName;
    internal static string DraggableListItemName;
    internal static string DragPanelName;
    internal static string DropDownName;
    internal static string DropShadowName;
    internal static string DropWatcherName;
    internal static string FilteredTextBoxName;
    internal static string FloatingBehaviorName;
    internal static string GravatarName;
    internal static string HoverMenuName;
    internal static string HoverName;
    internal static string HtmlEditorExtenderName;
    internal static string LineChartName;
    internal static string ListSearchName;
    internal static string MaskedEditName;
    internal static string MaskedEditValidatorName;
    internal static string ModalPopup;
    internal static string MultiHandleSliderName;
    internal static string MutuallyExclusiveCheckBoxName;
    internal static string NoBotName;
    internal static string NumericUpDownName;
    internal static string PagingBulletedListName;
    internal static string PasswordStrengthName;
    internal static string PieChartName;
    internal static string PopupControlName;
    internal static string PopupName;
    internal static string RatingName;
    internal static string ReorderListName;
    internal static string ResizableControlName;
    internal static string RoundedCornersName;
    internal static string SeadragonName;
    internal static string SliderName;
    internal static string SlideShowName;
    internal static string TabsName;
    internal static string TextBoxWatermarkName;
    internal static string ToggleButtonName;
    internal static string TwitterName;
    internal static string UpdatePanelAnimationName;
    internal static string ValidatorCalloutName;
    internal static string AsyncFileUploadImage;
    internal static string HtmlEditorName;
    internal static string HtmlEditorPopupsName;
    internal static string HtmlEditorToolbarButtonsName;
    internal static string HtmlEditorHtmlEditorName;
    internal static string HtmlEditorEditorName;
    internal static string HtmlEditorToolbarName;
    internal static string HtmlEditorEnumsName;
    internal static string HtmlEditorEventsName;
    internal static string HtmlEditorPreviewPanelName;
    internal static string HtmlEditorModePanelName;
    internal static string HtmlEditorEditPanelName;
    internal static string HtmlEditorHtmlPanelName;
    internal static string HtmlEditorDocumentName;
    internal static string HtmlEditorDesignPanelName;
    internal static string HtmlEditorExecCommandEmulationName;
    internal static string HtmlEditorDesignPanelEventHandlerName;
    internal static string HtmlEditorPopupName;
    internal static string HtmlEditorAttachedTemplatePopupName;
    internal static string HtmlEditorAttachedPopupName;
    internal static string HtmlEditorPopupCommandButtonName;
    internal static string HtmlEditorPopupBoxButtonName;
    internal static string HtmlEditorPopupBGIButtonName;
    internal static string HtmlEditorOkCancelAttachedTemplatePopupName;
    internal static string HtmlEditorLinkPropertiesName;
    internal static string HtmlEditorBaseColorsPopupName;
    internal static string HtmlEditorBackColorClearButtonName;
    internal static string HtmlEditorBackColorSelectorButtonName;
    internal static string HtmlEditorBoldButtonName;
    internal static string HtmlEditorBoxButtonName;
    internal static string HtmlEditorBulletedListButtonName;
    internal static string HtmlEditorColorButtonName;
    internal static string HtmlEditorColorSelectorName;
    internal static string HtmlEditorCommonButtonName;
    internal static string HtmlEditorCopyButtonName;
    internal static string HtmlEditorCutButtonName;
    internal static string HtmlEditorDecreaseIndentButtonName;
    internal static string HtmlEditorDesignModeButtonName;
    internal static string HtmlEditorDesignModeBoxButtonName;
    internal static string HtmlEditorDesignModeImageButtonName;
    internal static string HtmlEditorDesignModePopupImageButtonName;
    internal static string HtmlEditorDesignModeSelectButtonName;
    internal static string HtmlEditorToggleButtonName;
    internal static string HtmlEditorFixedBackColorButtonName;
    internal static string HtmlEditorFixedColorButtonName;
    internal static string HtmlEditorFixedForeColorButtonName;
    internal static string HtmlEditorFontNameButtonName;
    internal static string HtmlEditorFontSizeButtonName;
    internal static string HtmlEditorForeColorButtonName;
    internal static string HtmlEditorForeColorClearButtonName;
    internal static string HtmlEditorForeColorSelectorButtonName;
    internal static string HtmlEditorHorizontalSepearatorButtonName;
    internal static string HtmlEditorHtmlModeButtonName;
    internal static string HtmlEditorImageButtonName;
    internal static string HtmlEditorIncreaseIndentButtonName;
    internal static string HtmlEditorInsertHRButtonName;
    internal static string HtmlEditorInsertLinkButtonName;
    internal static string HtmlEditorItalicButtonName;
    internal static string HtmlEditorJustifyCenterButtonName;
    internal static string HtmlEditorJustifyFullButtonName;
    internal static string HtmlEditorJustifyRightButtonName;
    internal static string HtmlEditorJustifyLeftButtonName;
    internal static string HtmlEditorLtrButtonName;
    internal static string HtmlEditorMethodButtonName;
    internal static string HtmlEditorModeButtonName;
    internal static string HtmlEditorOkCancelPopupButtonName;
    internal static string HtmlEditorOrderedListButtonName;
    internal static string HtmlEditorParagraphButtonName;
    internal static string HtmlEditorPasteButtonName;
    internal static string HtmlEditorPasteTextButtonName;
    internal static string HtmlEditorPasteWordButtonName;
    internal static string HtmlEditorPreviewModeButtonName;
    internal static string HtmlEditorRedoButtonMode;
    internal static string HtmlEditorRemoveAlignmentButtonName;
    internal static string HtmlEditorRemoveLinkButtonName;
    internal static string HtmlEditorRemoveStylesButtonName;
    internal static string HtmlEditorRtlButtonName;
    internal static string HtmlEditorSelectButtonName;
    internal static string HtmlEditorSelectorButtonName;
    internal static string HtmlEditorStrikeThroughButtonName;
    internal static string HtmlEditorSubScriptButtonName;
    internal static string HtmlEditorSuperScriptButtonName;
    internal static string HtmlEditorUnderlineButtonName;
    internal static string HtmlEditorUndoButtonName;
    internal static string HtmlEditorBgiButtonImage;
    internal static string HtmlEditorEdColorBgClearNImage;
    internal static string HtmlEditorEdColorBgClearAImage;
    internal static string HtmlEditorEdFormatBoldAImage;
    internal static string HtmlEditorEdFormatBoldNImage;
    internal static string HtmlEditorEdListBulletAImage;
    internal static string HtmlEditorEdListBulletNImage;
    internal static string HtmlEditorEdCopyAImage;
    internal static string HtmlEditorEdCopyNImage;
    internal static string HtmlEditorEdCutAImage;
    internal static string HtmlEditorEdCutNImage;
    internal static string HtmlEditorEdIndentLessAImage;
    internal static string HtmlEditorEdIndentLessNImage;
    internal static string HtmlEditorEdDesignAImage;
    internal static string HtmlEditorEdDesignNImage;
    internal static string HtmlEditorEdBackColorAImage;
    internal static string HtmlEditorEdBackColorNImage;
    internal static string HtmlEditorEdForeColorAImage;
    internal static string HtmlEditorEdForeColorNImage;
    internal static string HtmlEditorEdColorFgAImage;
    internal static string HtmlEditorEdColorFgNImage;
    internal static string HtmlEditorEdColorFgClearAImage;
    internal static string HtmlEditorEdColorFgClearNImage;
    internal static string HtmlEditorEdSepImage;
    internal static string HtmlEditorEdHtmlAImage;
    internal static string HtmlEditorEdHtmlNImage;
    internal static string HtmlEditorEdIndentMoreAImage;
    internal static string HtmlEditorEdIndentMoreNImage;
    internal static string HtmlEditorEdRuleAImage;
    internal static string HtmlEditorEdRuleNImage;
    internal static string HtmlEditorEdLinkAImage;
    internal static string HtmlEditorEdLinkNImage;
    internal static string HtmlEditorEdFormatItalicAImage;
    internal static string HtmlEditorEdFormatItalicNImage;
    internal static string HtmlEditorEdAlingCenterAImage;
    internal static string HtmlEditorEdAlingCenterNImage;
    internal static string HtmlEditorEdAlignJustifyAImage;
    internal static string HtmlEditorEdAlignJustifyNImage;
    internal static string HtmlEditorEdAlignLeftAImage;
    internal static string HtmlEditorEdAlignLeftNImage;
    internal static string HtmlEditorEdAlignRightAImage;
    internal static string HtmlEditorEdAlignRightNImage;
    internal static string HtmlEditorEdFormatLtrAImage;
    internal static string HtmlEditorEdFormatLtrNImage;
    internal static string HtmlEditorEdListNumAImage;
    internal static string HtmlEditorEdListNumNImage;
    internal static string HtmlEditorEdFormatParagraphAImage;
    internal static string HtmlEditorEdFormatParagraphNImage;
    internal static string HtmlEditorEdPasteAImage;
    internal static string HtmlEditorEdPasteNImage;
    internal static string HtmlEditorEdPasteTextAImage;
    internal static string HtmlEditorEdPasteTextNImage;
    internal static string HtmlEditorEdPasteWordAImage;
    internal static string HtmlEditorEdPasteWordNImage;
    internal static string HtmlEditorEdPreviewAImage;
    internal static string HtmlEditorEdPreviewNImage;
    internal static string HtmlEditorEdRedoAImage;
    internal static string HtmlEditorEdRedoNImage;
    internal static string HtmlEditorEdRemoveAlignAImage;
    internal static string HtmlEditorEdRemoveAlignNImage;
    internal static string HtmlEditorEdUnlinkAImage;
    internal static string HtmlEditorEdUnlinkNImage;
    internal static string HtmlEditorEdUnformatAImage;
    internal static string HtmlEditorEdUnformatNImage;
    internal static string HtmlEditorEdFormatRtlAImage;
    internal static string HtmlEditorEdFormatRtlNImage;
    internal static string HtmlEditorEdSelectorAImage;
    internal static string HtmlEditorEdSelectorNImage;
    internal static string HtmlEditorEdFormatStrikeAImage;
    internal static string HtmlEditorEdFormatStrikeNImage;
    internal static string HtmlEditorEdFormatSubAImage;
    internal static string HtmlEditorEdFormatSubNImage;
    internal static string HtmlEditorEdFormatSupAImage;
    internal static string HtmlEditorEdFormatSupNImage;
    internal static string HtmlEditorEdFormatUnderlineAImage;
    internal static string HtmlEditorEdFormatUnderlineNImage;
    internal static string HtmlEditorEdUndoAImage;
    internal static string HtmlEditorEdUndoNImage;
    internal static string HtmlEditorEd1x1Image;
    internal static string HtmlEditorEdAnchorImage;
    internal static string HtmlEditorEdFlashImage;
    internal static string HtmlEditorEdMediaImage;
    internal static string HtmlEditorEdPlaceHolderImage;
    internal static string HtmlEditorExtenderButtonsImage;
    internal static string BalloonPopupCloudGifSprite;
    internal static string BalloonPopupCloudPngSprite;
    internal static string BalloonPopupRectangleGifSprite;
    internal static string BalloonPopupRectanglePngSprite;
    internal static string CalendarArrowLeftImage;
    internal static string CalendarArrowRightImage;
    internal static string ComboBoxArrowDownImage;
    internal static string DropDownDropArrowImage;
    internal static string GravatarAnonymousImage;
    internal static string GravatarGImage;
    internal static string GravatarPGImage;
    internal static string GravatarRImage;
    internal static string GravatarXImage;
    internal static string MultiHandleSliderHHandleImage;
    internal static string MultiHandleSliderHHandleDownImage;
    internal static string MultiHandleSliderHHandleHoverImage;
    internal static string MultiHandleSliderHRailImage;
    internal static string MultiHandleSliderHRailOuterImage;
    internal static string MultiHandleSliderVHandleImage;
    internal static string MultiHandleSliderVHandleDownImage;
    internal static string MultiHandleSliderVHandleHoverImage;
    internal static string MultiHandleSliderVRailImage;
    internal static string MultiHandleSliderVRailOuterImage;
    internal static string SeadragonFullpageGrouphoverImage;
    internal static string SeadragonFullpageHoverImage;
    internal static string SeadragonFullpagePressedImage;
    internal static string SeadragonFullpageRestImage;
    internal static string SeadragonHomeGrouphoverImage;
    internal static string SeadragonHomeHoverImage;
    internal static string SeadragonHomePressedImage;
    internal static string SeadragonHomeRestImage;
    internal static string SeadragonZoominGrouphoverImage;
    internal static string SeadragonZoominHoverImage;
    internal static string SeadragonZoominPressedImage;
    internal static string SeadragonZoominRestImage;
    internal static string SeadragonZoomoutGrouphoverImage;
    internal static string SeadragonZoomoutHoverImage;
    internal static string SeadragonZoomoutPressedImage;
    internal static string SeadragonZoomoutRestImage;
    internal static string SliderVerticalRailImage;
    internal static string SliderHorizontalRailImage;
    internal static string SliderVerticalHandleImage;
    internal static string SliderHorizontalHandleImage;
    internal static string TabsImage;
    internal static string TabsActiveLeftVerticalleftImage;
    internal static string TabsActiveLeftVerticalrightImage;
    internal static string TabsActiveLeftImage;
    internal static string TabsActiveRightVerticallefImage;
    internal static string TabsActiveRightVerticalrightImage;
    internal static string TabsActiveRightImage;
    internal static string TabsActiveVerticalleftImage;
    internal static string TabsActiveVerticalrightImage;
    internal static string TabsActiveImage;
    internal static string TabsBottomActiveLeftImage;
    internal static string TabsBottomActiveRightImage;
    internal static string TabsBottomActiveImage;
    internal static string TabsBottomHoverLeftImage;
    internal static string TabsBottomHoverRightImage;
    internal static string TabsBottomHoverImage;
    internal static string TabsBottomLeftImage;
    internal static string TabsBottomRightImage;
    internal static string TabsBottomImage;
    internal static string TabsHoverLeftVerticalleftImage;
    internal static string TabsHoverLeftVerticalrightImage;
    internal static string TabsHoverLeftImage;
    internal static string TabsHoverRightVerticalleftImage;
    internal static string TabsHoverRightVerticalrightImage;
    internal static string TabsHoverRightImage;
    internal static string TabsHoverVerticalleftImage;
    internal static string TabsHoverVerticalrightImage;
    internal static string TabsHoverImage;
    internal static string TabsLeftVerticalleftImage;
    internal static string TabsLeftVerticalrightImage;
    internal static string TabsLeftImage;
    internal static string TabsLineImage;
    internal static string TabsRightVerticalleftImage;
    internal static string TabsRightVerticalrightImage;
    internal static string TabsRightImage;
    internal static string TabsVerticalleftImage;
    internal static string TabsVerticalrightImage;
    internal static string Twitter24Image;
    internal static string Twitter32Image;
    internal static string ValidatorCalloutAlertLargeImage;
    internal static string ValidatorCalloutAlertSmallImage;
    internal static string ValidatorCalloutCloseImage;
}
public enum AjaxControlToolkit.ControlAnchor : Enum {
    public int value__;
    public static ControlAnchor None;
    public static ControlAnchor TopLeft;
    public static ControlAnchor TopRight;
    public static ControlAnchor BottomRight;
    public static ControlAnchor BottomLeft;
}
public class AjaxControlToolkit.ControlDependencyMap : object {
    private static Lazy`1<Dictionary`2<string, ControlDependencyMap>> _dependencyMaps;
    private List`1<Type> _dependecies;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public static Dictionary`2<string, ControlDependencyMap> Maps { get; }
    public Type Type { get; private set; }
    public IEnumerable`1<Type> Dependecies { get; }
    public ControlDependencyMap(Type type, Type[] types);
    private static ControlDependencyMap();
    public static Dictionary`2<string, ControlDependencyMap> get_Maps();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public IEnumerable`1<Type> get_Dependecies();
    private static Dictionary`2<string, ControlDependencyMap> CreateDependencyMaps();
    public static ControlDependencyMap BuildDependencyMap(Type type);
    private static void SeekDependencies(Type ctlType, List`1& dependencies);
    private static IEnumerable`1<Type> GetMemberTypes(MemberInfo memberInfo);
}
public class AjaxControlToolkit.Copy : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.CreateLink : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
internal class AjaxControlToolkit.CustomControlElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public string get_Type();
    public void set_Type(string value);
}
public class AjaxControlToolkit.CustomControlsCollection : ConfigurationElementCollection {
    public ConfigurationElementCollectionType CollectionType { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class AjaxControlToolkit.Cut : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.DataConverter`1 : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("", "Common.DateTime")]
public class AjaxControlToolkit.DateTimeScripts : object {
}
public class AjaxControlToolkit.Delete : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.Design.AccordionDesigner : ControlDesigner {
    private Accordion _accordion;
    public virtual void Initialize(IComponent component);
    public virtual string GetDesignTimeHtml();
}
public class AjaxControlToolkit.Design.AccordionExtenderDesigner : ExtenderControlBaseDesigner`1<AccordionExtender> {
}
public class AjaxControlToolkit.Design.AjaxFileUploadDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
}
public class AjaxControlToolkit.Design.AlwaysVisibleControlExtenderDesigner : ExtenderControlBaseDesigner`1<AlwaysVisibleControlExtender> {
}
public class AjaxControlToolkit.Design.AnimationExtenderDesigner : ExtenderControlBaseDesigner`1<AnimationExtender> {
}
public class AjaxControlToolkit.Design.AsyncFileUploadDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
}
public class AjaxControlToolkit.Design.AutoCompleteExtenderDesigner : ExtenderControlBaseDesigner`1<AutoCompleteExtender> {
}
public class AjaxControlToolkit.Design.BalloonPopupExtenderDesigner : ExtenderControlBaseDesigner`1<BalloonPopupExtender> {
}
internal class AjaxControlToolkit.Design.CalendarExtenderDesigner : ExtenderControlDesigner {
}
public class AjaxControlToolkit.Design.CascadingDropDownExtenderDesigner : ExtenderControlBaseDesigner`1<CascadingDropDown> {
}
public class AjaxControlToolkit.Design.ChartBaseDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
}
public class AjaxControlToolkit.Design.ChartBaseSeriesEditor`1 : CollectionEditor {
    public ChartBaseSeriesEditor`1(Type type);
    protected virtual Type[] CreateNewItemTypes();
    protected virtual bool CanSelectMultipleInstances();
}
internal class AjaxControlToolkit.Design.CollapsiblePanelExtenderDesigner : ExtenderControlBaseDesigner`1<CollapsiblePanelExtender> {
}
internal class AjaxControlToolkit.Design.ColorPickerExtenderDesigner : ExtenderControlBaseDesigner`1<ColorPickerExtender> {
}
public class AjaxControlToolkit.Design.ComboBoxDesigner : ListControlDesigner {
    private static string substitutionPattern;
    public bool AllowResize { get; }
    public DesignerActionListCollection ActionLists { get; }
    public virtual string GetDesignTimeHtml();
    private string GetStringFromResourceStream(string resourceName);
    protected virtual string PerformWebResourceSubstitution(Match match);
    public virtual bool get_AllowResize();
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class AjaxControlToolkit.Design.ConfirmButtonExtenderDesigner : ExtenderControlBaseDesigner`1<ConfirmButtonExtender> {
}
public class AjaxControlToolkit.Design.DesignerWithMapPath : ControlDesigner {
    public string MapPath(string originalPath);
}
internal class AjaxControlToolkit.Design.DragPanelExtenderDesigner : ExtenderControlBaseDesigner`1<DragPanelExtender> {
}
public class AjaxControlToolkit.Design.DropDownExtenderDesigner : ExtenderControlBaseDesigner`1<DropDownExtender> {
}
internal class AjaxControlToolkit.Design.DropShadowExtenderDesigner : ExtenderControlBaseDesigner`1<DropShadowExtender> {
}
public class AjaxControlToolkit.Design.DynamicPopulateExtenderDesigner : ExtenderControlBaseDesigner`1<DynamicPopulateExtender> {
}
public class AjaxControlToolkit.Design.ExtenderControlBaseDesigner`1 : ExtenderControlDesigner {
    private static int DisableDesignerFeaturesUnknown;
    private static int DisableDesignerFeaturesYes;
    private static int DisableDesignerFeaturesNo;
    private static string ExtenderControlDictionaryKey;
    private ExtenderPropertyRenameDescProv`1<T> _renameProvider;
    private int _disableDesignerFeatures;
    protected bool DesignerFeaturesEnabled { get; }
    protected T ExtenderControl { get; }
    protected bool get_DesignerFeaturesEnabled();
    public sealed virtual bool CanExtend(object extendee);
    protected T get_ExtenderControl();
}
internal class AjaxControlToolkit.Design.ExtenderPropertyRenameDescProv`1 : FilterTypeDescriptionProvider`1<IComponent> {
    private ExtenderControlBaseDesigner`1<T> _owner;
    public ExtenderPropertyRenameDescProv`1(ExtenderControlBaseDesigner`1<T> owner, IComponent target);
}
internal class AjaxControlToolkit.Design.FilteredTextBoxExtenderDesigner : ExtenderControlBaseDesigner`1<FilteredTextBoxExtender> {
}
internal class AjaxControlToolkit.Design.FilterTypeDescriptionProvider`1 : TypeDescriptionProvider {
    private T _target;
    private TypeDescriptionProvider _baseProvider;
    private ICustomTypeDescriptor _baseDescriptor;
    private bool _extended;
    protected bool FilterExtendedProperties { get; protected set; }
    protected T Target { get; }
    private ICustomTypeDescriptor BaseDescriptor { get; }
    public FilterTypeDescriptionProvider`1(T target);
    protected bool get_FilterExtendedProperties();
    protected void set_FilterExtendedProperties(bool value);
    protected T get_Target();
    private ICustomTypeDescriptor get_BaseDescriptor();
    public void Dispose();
    public sealed virtual AttributeCollection GetAttributes();
    public sealed virtual string GetClassName();
    public sealed virtual string GetComponentName();
    public sealed virtual TypeConverter GetConverter();
    public sealed virtual EventDescriptor GetDefaultEvent();
    public sealed virtual PropertyDescriptor GetDefaultProperty();
    public sealed virtual object GetEditor(Type editorBaseType);
    public sealed virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public sealed virtual EventDescriptorCollection GetEvents();
    public sealed virtual object GetPropertyOwner(PropertyDescriptor pd);
    public sealed virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public sealed virtual PropertyDescriptorCollection GetProperties();
    private PropertyDescriptorCollection FilterProperties(PropertyDescriptorCollection props);
    protected virtual PropertyDescriptor ProcessProperty(PropertyDescriptor baseProp);
}
public class AjaxControlToolkit.Design.GravatarDesigner : ControlDesigner {
    private Gravatar _gravatar;
    public bool AllowResize { get; }
    protected bool Visible { get; }
    public virtual void Initialize(IComponent component);
    public virtual string GetDesignTimeHtml();
    public virtual bool get_AllowResize();
    protected virtual bool get_Visible();
}
internal class AjaxControlToolkit.Design.HoverExtenderDesigner : ExtenderControlBaseDesigner`1<HoverExtender> {
}
public class AjaxControlToolkit.Design.HoverMenuExtenderDesigner : ExtenderControlBaseDesigner`1<HoverMenuExtender> {
}
public class AjaxControlToolkit.Design.HtmlEditorDesigner : DesignerWithMapPath {
    private Editor HtmlEditor { get; }
    private Editor get_HtmlEditor();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
}
public class AjaxControlToolkit.Design.ListSearchExtenderDesigner : ExtenderControlBaseDesigner`1<ListSearchExtender> {
}
internal class AjaxControlToolkit.Design.MaskedEditExtenderDesigner : ExtenderControlBaseDesigner`1<MaskedEditExtender> {
}
public class AjaxControlToolkit.Design.ModalPopupExtenderDesigner : ExtenderControlBaseDesigner`1<ModalPopupExtender> {
}
internal class AjaxControlToolkit.Design.MultiHandleSliderExtenderDesigner : ExtenderControlBaseDesigner`1<MultiHandleSliderExtender> {
}
public class AjaxControlToolkit.Design.MultiHandleSliderTargetsEditor : CollectionEditor {
    public MultiHandleSliderTargetsEditor(Type type);
    protected virtual Type[] CreateNewItemTypes();
    protected virtual bool CanSelectMultipleInstances();
}
internal class AjaxControlToolkit.Design.MutuallyExclusiveCheckBoxExtenderDesigner : ExtenderControlBaseDesigner`1<MutuallyExclusiveCheckBoxExtender> {
}
public class AjaxControlToolkit.Design.NoBotExtenderDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class AjaxControlToolkit.Design.NumericUpDownExtenderDesigner : ExtenderControlBaseDesigner`1<NumericUpDownExtender> {
}
[AttributeUsageAttribute("4096")]
public class AjaxControlToolkit.Design.PageMethodSignatureAttribute : Attribute {
    private string _friendlyName;
    private string _servicePathProperty;
    private string _serviceMethodProperty;
    private string _useContextKeyProperty;
    public string FriendlyName { get; }
    public string ServicePathProperty { get; }
    public string ServiceMethodProperty { get; }
    public string UseContextKeyProperty { get; }
    public bool IncludeContextParameter { get; }
    public PageMethodSignatureAttribute(string friendlyName, string servicePathProperty, string serviceMethodProperty);
    public PageMethodSignatureAttribute(string friendlyName, string servicePathProperty, string serviceMethodProperty, string useContextKeyProperty);
    public string get_FriendlyName();
    public string get_ServicePathProperty();
    public string get_ServiceMethodProperty();
    public string get_UseContextKeyProperty();
    public bool get_IncludeContextParameter();
}
internal class AjaxControlToolkit.Design.PagingBulletedListExtenderDesigner : ExtenderControlBaseDesigner`1<PagingBulletedListExtender> {
}
internal class AjaxControlToolkit.Design.PasswordStrengthExtenderDesigner : ExtenderControlBaseDesigner`1<PasswordStrength> {
}
public class AjaxControlToolkit.Design.PopupControlExtenderDesigner : ExtenderControlBaseDesigner`1<PopupControlExtender> {
}
internal class AjaxControlToolkit.Design.PopupExtenderDesigner : ExtenderControlBaseDesigner`1<PopupExtender> {
}
internal class AjaxControlToolkit.Design.RatingExtenderDesigner : ControlDesigner {
    private DesignerActionListCollection _actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class AjaxControlToolkit.Design.ReorderListDesigner : DataBoundControlDesigner {
    private static string _designtimeHTML;
    private static string _designtimeHTML_Template;
    private TemplateGroupCollection _templateGroups;
    private static int DefaultTemplateIndex;
    private static TemplateItem[] TemplateItems;
    public DesignerActionListCollection ActionLists { get; }
    private object CurrentObject { get; }
    private ITemplate CurrentTemplate { get; }
    private PropertyDescriptor CurrentTemplateDescriptor { get; }
    private int CurrentView { get; private set; }
    private string CurrentViewName { get; }
    private ITemplate CurrentViewControlTemplate { get; }
    private ReorderList ReorderList { get; }
    private TemplateDefinition TemplateDefinition { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static ReorderListDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    private object get_CurrentObject();
    private ITemplate get_CurrentTemplate();
    private PropertyDescriptor get_CurrentTemplateDescriptor();
    private int get_CurrentView();
    private void set_CurrentView(int value);
    private string get_CurrentViewName();
    private ITemplate get_CurrentViewControlTemplate();
    private ReorderList get_ReorderList();
    private TemplateDefinition get_TemplateDefinition();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    private EditableDesignerRegion BuildRegion();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
internal class AjaxControlToolkit.Design.ResizableControlExtenderDesigner : ExtenderControlBaseDesigner`1<ResizableControlExtender> {
}
public class AjaxControlToolkit.Design.RoundedCornersExtenderDesigner : ExtenderControlBaseDesigner`1<RoundedCornersExtender> {
}
internal class AjaxControlToolkit.Design.SliderDesigner : ExtenderControlBaseDesigner`1<SliderExtender> {
}
public class AjaxControlToolkit.Design.SlideShowExtenderDesigner : ExtenderControlBaseDesigner`1<SlideShowExtender> {
}
public class AjaxControlToolkit.Design.TabContainerDesigner : ControlDesigner {
    private static string TabLink;
    private static string ActiveTabLink;
    private static string ClickRegionHtml;
    private static string DesignTimeHtml;
    private static string EmptyDesignTimeHtml;
    private static string AddTabName;
    private TabContainer TabContainer { get; }
    public DesignerActionListCollection ActionLists { get; }
    unknown string CurrentTabID {private set; }
    protected bool UsePreviewControl { get; }
    [CategoryAttribute("Design")]
[DesignOnlyAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Hide overflow content at design-time.")]
public bool HideOverflowContent { get; public set; }
    private TabContainer get_TabContainer();
    public virtual DesignerActionListCollection get_ActionLists();
    private void set_CurrentTabID(string value);
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    private string GetTemplateContent(ITemplate template, string id);
    private string GetTabContent(TabPanel tab, bool isContent);
    public virtual void Initialize(IComponent component);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
    private static void PersistTemplateContent(TabPanel panel, IDesignerHost host, string content, string propertyName);
    private static void PersistTemplate(TabPanel panel, IDesignerHost host, ITemplate template, string propertyName);
    protected virtual void OnClick(DesignerRegionMouseEventArgs e);
    private void OnAddTabPanel();
    private static string GetUniqueName(Type t, Control parent);
    private void OnRemoveTabPanel();
    public bool get_HideOverflowContent();
    public void set_HideOverflowContent(bool value);
}
internal class AjaxControlToolkit.Design.TabPanelDesigner : ControlDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class AjaxControlToolkit.Design.TextBoxWatermarkExtenderDesigner : ExtenderControlBaseDesigner`1<TextBoxWatermarkExtender> {
}
public class AjaxControlToolkit.Design.ToggleButtonExtenderDesigner : ExtenderControlBaseDesigner`1<ToggleButtonExtender> {
}
public class AjaxControlToolkit.Design.TwitterDesigner : CompositeControlDesigner {
    private Twitter _twitter;
    private List`1<string> _values;
    private int _valCounter;
    public bool AllowResize { get; }
    protected bool Visible { get; }
    public virtual void Initialize(IComponent component);
    public virtual string GetDesignTimeHtml();
    private string RenderEmptyData();
    private IList`1<TwitterStatus> GenerateData();
    private IList`1<TwitterStatus> GenerateFakeData();
    private string RenderLayout(IList`1<TwitterStatus> statuses);
    private string PersistTemplate(ITemplate template);
    private string FillStatusValue(Match match);
    private string RenderEvalScripts(ITemplate template, TwitterStatus status);
    private string RenderStatus(TwitterStatus status);
    private static string RenderControl(Control control);
    public virtual bool get_AllowResize();
    protected virtual bool get_Visible();
}
public class AjaxControlToolkit.Design.TypedControlIDConverter`1 : ControlIDConverter {
    protected virtual bool FilterControl(Control control);
}
public class AjaxControlToolkit.Design.UpdatePanelAnimationExtenderDesigner : ExtenderControlBaseDesigner`1<UpdatePanelAnimationExtender> {
}
internal class AjaxControlToolkit.Design.ValidatorCalloutExtenderDesigner : ExtenderControlBaseDesigner`1<ValidatorCalloutExtender> {
}
public enum AjaxControlToolkit.DisplayPosition : Enum {
    public int value__;
    public static DisplayPosition RightSide;
    public static DisplayPosition AboveRight;
    public static DisplayPosition AboveLeft;
    public static DisplayPosition LeftSide;
    public static DisplayPosition BelowRight;
    public static DisplayPosition BelowLeft;
}
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("", "Compat.DragDrop")]
public static class AjaxControlToolkit.DragDropScripts : object {
}
[ClientScriptResourceAttribute("Sys.Extended.UI.DraggableListItem", "DraggableListItem")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("AjaxControlToolkit.ReorderListItem")]
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.DraggableListItemExtender : ExtenderControlBase {
    [IDReferencePropertyAttribute("System.Web.UI.Control")]
[ClientPropertyNameAttribute("handle")]
[ExtenderControlPropertyAttribute]
[ElementReferenceAttribute]
[DefaultValueAttribute("")]
public string Handle { get; public set; }
    public string get_Handle();
    public void set_Handle(string value);
}
[DesignerAttribute("AjaxControlToolkit.Design.DragPanelExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.FloatingBehavior", "FloatingBehavior")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[RequiredScriptAttribute("AjaxControlToolkit.DragDropScripts")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "DragPanel.bmp")]
public class AjaxControlToolkit.DragPanelExtender : ExtenderControlBase {
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ExtenderControlPropertyAttribute]
[ElementReferenceAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("handle")]
public string DragHandleID { get; public set; }
    public string get_DragHandleID();
    public void set_DragHandleID(string value);
}
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.HoverExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender")]
[ClientCssResourceAttribute("DropDown")]
[ClientScriptResourceAttribute("Sys.Extended.UI.DropDownBehavior", "DropDown")]
[DesignerAttribute("AjaxControlToolkit.Design.DropDownExtenderDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "DropDown.bmp")]
public class AjaxControlToolkit.DropDownExtender : DynamicPopulateExtenderControlBase {
    private Animation _onShow;
    private Animation _onHide;
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.Control")]
[ExtenderControlPropertyAttribute]
[ElementReferenceAttribute]
[ClientPropertyNameAttribute("dropDownControl")]
public string DropDownControlID { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("highlightBorderColor")]
public Color HighlightBorderColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("highlightBackgroundColor")]
public Color HighlightBackColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dropArrowBackgroundColor")]
public Color DropArrowBackColor { get; public set; }
    [DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dropArrowImageUrl")]
public string DropArrowImageUrl { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dropArrowWidth")]
public Unit DropArrowWidth { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("popup")]
public string OnClientPopup { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("populating")]
public string OnClientPopulating { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("populated")]
public string OnClientPopulated { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    public string get_DropDownControlID();
    public void set_DropDownControlID(string value);
    public Color get_HighlightBorderColor();
    public void set_HighlightBorderColor(Color value);
    public Color get_HighlightBackColor();
    public void set_HighlightBackColor(Color value);
    public Color get_DropArrowBackColor();
    public void set_DropArrowBackColor(Color value);
    public string get_DropArrowImageUrl();
    public void set_DropArrowImageUrl(string value);
    public Unit get_DropArrowWidth();
    public void set_DropArrowWidth(Unit value);
    public string get_OnClientPopup();
    public void set_OnClientPopup(string value);
    public string get_OnClientPopulating();
    public void set_OnClientPopulating(string value);
    public string get_OnClientPopulated();
    public void set_OnClientPopulated(string value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    protected virtual void OnPreRender(EventArgs e);
}
[DesignerAttribute("AjaxControlToolkit.Design.DropShadowExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.DropShadowBehavior", "DropShadow")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.RoundedCornersExtender", "2")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript", "3")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "DropShadow.bmp")]
public class AjaxControlToolkit.DropShadowExtender : ExtenderControlBase {
    [DefaultValueAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("opacity")]
public float Opacity { get; public set; }
    [DefaultValueAttribute("5")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("width")]
public int Width { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("trackPosition")]
public bool TrackPosition { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("rounded")]
public bool Rounded { get; public set; }
    [DefaultValueAttribute("5")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("radius")]
public int Radius { get; public set; }
    public float get_Opacity();
    public void set_Opacity(float value);
    public int get_Width();
    public void set_Width(int value);
    public bool get_TrackPosition();
    public void set_TrackPosition(bool value);
    public bool get_Rounded();
    public void set_Rounded(bool value);
    public int get_Radius();
    public void set_Radius(int value);
}
[ToolboxItemAttribute("False")]
[ClientScriptResourceAttribute("Sys.Extended.UI.DragDropWatcher", "DropWatcher")]
[RequiredScriptAttribute("AjaxControlToolkit.DragDropScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("AjaxControlToolkit.BulletedList")]
public class AjaxControlToolkit.DropWatcherExtender : ExtenderControlBase {
    private string DataTypeName { get; }
    [BrowsableAttribute("False")]
[ClientPropertyNameAttribute("acceptedDataTypes")]
[ExtenderControlPropertyAttribute]
public string AcceptedDataTypes { get; public set; }
    [ClientPropertyNameAttribute("argReplaceString")]
[ExtenderControlPropertyAttribute]
public string ArgReplaceString { get; public set; }
    [ClientPropertyNameAttribute("argSuccessString")]
[ExtenderControlPropertyAttribute]
public string ArgSuccessString { get; public set; }
    [ClientPropertyNameAttribute("argErrorString")]
[ExtenderControlPropertyAttribute]
public string ArgErrorString { get; public set; }
    [ClientPropertyNameAttribute("argContextString")]
[ExtenderControlPropertyAttribute]
public string ArgContextString { get; public set; }
    [ClientPropertyNameAttribute("callbackCssStyle")]
[ExtenderControlPropertyAttribute]
public string CallbackCssStyle { get; public set; }
    [BrowsableAttribute("False")]
[ClientPropertyNameAttribute("dragDataType")]
[ExtenderControlPropertyAttribute]
public string DataType { get; public set; }
    [BrowsableAttribute("False")]
[ClientPropertyNameAttribute("dragMode")]
[ExtenderControlPropertyAttribute]
public int DragMode { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.Control")]
[ElementReferenceAttribute]
[ClientPropertyNameAttribute("dropCueTemplate")]
[ExtenderControlPropertyAttribute]
public string DropLayoutElement { get; public set; }
    [ClientPropertyNameAttribute("postbackCode")]
[ExtenderControlPropertyAttribute]
public string PostBackCode { get; public set; }
    private string get_DataTypeName();
    public string get_AcceptedDataTypes();
    public void set_AcceptedDataTypes(string value);
    public string get_ArgReplaceString();
    public void set_ArgReplaceString(string value);
    public string get_ArgSuccessString();
    public void set_ArgSuccessString(string value);
    public string get_ArgErrorString();
    public void set_ArgErrorString(string value);
    public string get_ArgContextString();
    public void set_ArgContextString(string value);
    public string get_CallbackCssStyle();
    public void set_CallbackCssStyle(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public int get_DragMode();
    public void set_DragMode(int value);
    public string get_DropLayoutElement();
    public void set_DropLayoutElement(string value);
    public string get_PostBackCode();
    public void set_PostBackCode(string value);
}
[DesignerAttribute("AjaxControlToolkit.Design.DynamicPopulateExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.DynamicPopulateBehavior", "DynamicPopulate")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "DynamicPopulate.bmp")]
public class AjaxControlToolkit.DynamicPopulateExtender : ExtenderControlBase {
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("clearContentsDuringUpdate")]
public bool ClearContentsDuringUpdate { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("contextKey")]
public string ContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.Control")]
[ClientPropertyNameAttribute("populateTriggerID")]
[CategoryAttribute("Behavior")]
public string PopulateTriggerControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("serviceMethod")]
public string ServiceMethod { get; public set; }
    [ExtenderControlPropertyAttribute]
[UrlPropertyAttribute]
[TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("servicePath")]
public string ServicePath { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("updatingCssClass")]
public string UpdatingCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("customScript")]
public string CustomScript { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cacheDynamicResults")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool CacheDynamicResults { get; public set; }
    public bool get_ClearContentsDuringUpdate();
    public void set_ClearContentsDuringUpdate(bool value);
    public string get_ContextKey();
    public void set_ContextKey(string value);
    public string get_PopulateTriggerControlID();
    public void set_PopulateTriggerControlID(string value);
    public string get_ServiceMethod();
    public void set_ServiceMethod(string value);
    public string get_ServicePath();
    public void set_ServicePath(string value);
    private bool ShouldSerializeServicePath();
    public string get_UpdatingCssClass();
    public void set_UpdatingCssClass(string value);
    public string get_CustomScript();
    public void set_CustomScript(string value);
    public bool get_CacheDynamicResults();
    public void set_CacheDynamicResults(bool value);
    protected virtual bool CheckIfValid(bool throwException);
}
[RequiredScriptAttribute("AjaxControlToolkit.DynamicPopulateExtender")]
public abstract class AjaxControlToolkit.DynamicPopulateExtenderControlBase : AnimationExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicControlID")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[CategoryAttribute("Behavior")]
public string DynamicControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicContextKey")]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public string DynamicContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicServicePath")]
[UrlPropertyAttribute]
[TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[CategoryAttribute("Behavior")]
public string DynamicServicePath { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicServiceMethod")]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public string DynamicServiceMethod { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cacheDynamicResults")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool CacheDynamicResults { get; public set; }
    public string get_DynamicControlID();
    public void set_DynamicControlID(string value);
    public string get_DynamicContextKey();
    public void set_DynamicContextKey(string value);
    public string get_DynamicServicePath();
    public void set_DynamicServicePath(string value);
    private bool ShouldSerializeServicePath();
    public string get_DynamicServiceMethod();
    public void set_DynamicServiceMethod(string value);
    public bool get_CacheDynamicResults();
    public void set_CacheDynamicResults(bool value);
    public virtual void EnsureValid();
}
[AttributeUsageAttribute("128")]
public class AjaxControlToolkit.ElementReferenceAttribute : Attribute {
}
public class AjaxControlToolkit.EmbeddedScript : object {
    [CompilerGeneratedAttribute]
private Assembly <SourceAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Assembly SourceAssembly { get; private set; }
    public string Name { get; private set; }
    public EmbeddedScript(string name, Assembly sourceAssembly);
    [CompilerGeneratedAttribute]
public Assembly get_SourceAssembly();
    [CompilerGeneratedAttribute]
private void set_SourceAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[ThemeableAttribute("True")]
[ClientScriptResourceAttribute("", "BaseScripts")]
public abstract class AjaxControlToolkit.ExtenderControlBase : ExtenderControl {
    private Dictionary`2<string, Control> _findControlHelperCache;
    private string _clientState;
    private bool _enableClientState;
    private bool _loadedClientStateValues;
    [CompilerGeneratedAttribute]
private ResolveControlEventHandler ResolveControlID;
    [CompilerGeneratedAttribute]
private EventHandler ClientStateValuesLoaded;
    [DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ClientState { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("id")]
public string BehaviorID { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.HiddenField")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string ClientStateFieldID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool EnableClientState { get; public set; }
    protected string ClientControlType { get; }
    protected Control TargetControl { get; }
    [CompilerGeneratedAttribute]
public void add_ResolveControlID(ResolveControlEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ResolveControlID(ResolveControlEventHandler value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_ClientState();
    public void set_ClientState(string value);
    public string get_BehaviorID();
    public void set_BehaviorID(string value);
    private string GetClientStateFieldID();
    protected virtual void OnInit(EventArgs e);
    private void Page_PreLoad(object sender, EventArgs e);
    private HiddenField CreateClientStateField();
    private void LoadClientStateValues();
    [CompilerGeneratedAttribute]
protected void add_ClientStateValuesLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
protected void remove_ClientStateValuesLoaded(EventHandler value);
    private void SaveClientStateValues();
    public string get_ClientStateFieldID();
    public void set_ClientStateFieldID(string value);
    public bool get_EnableClientState();
    public void set_EnableClientState(bool value);
    protected virtual string get_ClientControlType();
    public sealed virtual Control ResolveControl(string controlId);
    public virtual Control FindControl(string id);
    protected Control get_TargetControl();
    protected Control FindControlHelper(string id);
    protected virtual void OnResolveControlID(ResolveControlEventArgs e);
    protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors(Control targetControl);
    public virtual void EnsureValid();
    protected virtual bool CheckIfValid(bool throwException);
    protected virtual void RenderScriptAttributes(ScriptBehaviorDescriptor descriptor);
    protected virtual void RenderInnerScript(ScriptBehaviorDescriptor descriptor);
    protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    protected V GetPropertyValue(string propertyName, V nullValue);
    protected void SetPropertyValue(string propertyName, V value);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void OnLoad(EventArgs e);
}
[AttributeUsageAttribute("128")]
public class AjaxControlToolkit.ExtenderControlEventAttribute : Attribute {
    private bool _isScriptEvent;
    public bool IsScriptEvent { get; }
    public ExtenderControlEventAttribute(bool isScriptEvent);
    public bool get_IsScriptEvent();
}
[AttributeUsageAttribute("64")]
public class AjaxControlToolkit.ExtenderControlMethodAttribute : Attribute {
    private bool _isScriptMethod;
    public bool IsScriptMethod { get; }
    public ExtenderControlMethodAttribute(bool isScriptMethod);
    public bool get_IsScriptMethod();
}
[AttributeUsageAttribute("128")]
public class AjaxControlToolkit.ExtenderControlPropertyAttribute : Attribute {
    private bool _useJsonSerialization;
    private bool _isScriptProperty;
    public bool IsScriptProperty { get; }
    public bool UseJsonSerialization { get; }
    public ExtenderControlPropertyAttribute(bool isScriptProperty);
    public ExtenderControlPropertyAttribute(bool isScriptProperty, bool useJsonSerialization);
    public bool get_IsScriptProperty();
    public bool get_UseJsonSerialization();
}
public class AjaxControlToolkit.FileHeaderInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BoundaryDelimiterLength>k__BackingField;
    public string FileName { get; public set; }
    public string ContentType { get; public set; }
    public int StartIndex { get; public set; }
    public int BoundaryDelimiterLength { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(int value);
    [CompilerGeneratedAttribute]
public int get_BoundaryDelimiterLength();
    [CompilerGeneratedAttribute]
public void set_BoundaryDelimiterLength(int value);
}
[DesignerAttribute("AjaxControlToolkit.Design.FilteredTextBoxExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.FilteredTextBoxBehavior", "FilteredTextBox")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[DefaultPropertyAttribute("ValidChars")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "FilteredTextBox.bmp")]
public class AjaxControlToolkit.FilteredTextBoxExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("filterType")]
public FilterTypes FilterType { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("filterMode")]
public FilterModes FilterMode { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("validChars")]
public string ValidChars { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("invalidChars")]
public string InvalidChars { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("250")]
[ClientPropertyNameAttribute("filterInterval")]
public int FilterInterval { get; public set; }
    public FilterTypes get_FilterType();
    public void set_FilterType(FilterTypes value);
    public FilterModes get_FilterMode();
    public void set_FilterMode(FilterModes value);
    public string get_ValidChars();
    public void set_ValidChars(string value);
    public string get_InvalidChars();
    public void set_InvalidChars(string value);
    public int get_FilterInterval();
    public void set_FilterInterval(int value);
    protected virtual bool CheckIfValid(bool throwException);
}
[FlagsAttribute]
public enum AjaxControlToolkit.FilterModes : Enum {
    public int value__;
    public static FilterModes ValidChars;
    public static FilterModes InvalidChars;
}
[FlagsAttribute]
public enum AjaxControlToolkit.FilterTypes : Enum {
    public int value__;
    public static FilterTypes Custom;
    public static FilterTypes Numbers;
    public static FilterTypes UppercaseLetters;
    public static FilterTypes LowercaseLetters;
}
public class AjaxControlToolkit.FontNameSelector : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.FontSizeSelector : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.ForeColorSelector : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
[DesignerAttribute("AjaxControlToolkit.Design.GravatarDesigner")]
[ToolboxDataAttribute("<{0}:Gravatar runat="server"></{0}:Gravatar>")]
[RequiredScriptAttribute("AjaxControlToolkit.ScriptControlBase", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "2")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Gravatar.bmp")]
public class AjaxControlToolkit.Gravatar : WebControl {
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultImage>k__BackingField;
    [CompilerGeneratedAttribute]
private GravatarDefaultImageBehavior <DefaultImageBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private GravatarRating <Rating>k__BackingField;
    [CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[DescriptionAttribute("Account email.")]
[ClientPropertyNameAttribute("email")]
public string Email { get; public set; }
    [CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[DescriptionAttribute("Image size.")]
[ClientPropertyNameAttribute("size")]
public Nullable`1<int> Size { get; public set; }
    [CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[DescriptionAttribute("Image, that will be shown by default.")]
[ClientPropertyNameAttribute("defaultImage")]
public string DefaultImage { get; public set; }
    [CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[DescriptionAttribute("Behavior, that will be by default.")]
[ClientPropertyNameAttribute("defaultImage")]
public GravatarDefaultImageBehavior DefaultImageBehavior { get; public set; }
    [CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[DescriptionAttribute("Image rating.")]
[ClientPropertyNameAttribute("rating")]
public GravatarRating Rating { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DefaultImage();
    [CompilerGeneratedAttribute]
public void set_DefaultImage(string value);
    [CompilerGeneratedAttribute]
public GravatarDefaultImageBehavior get_DefaultImageBehavior();
    [CompilerGeneratedAttribute]
public void set_DefaultImageBehavior(GravatarDefaultImageBehavior value);
    [CompilerGeneratedAttribute]
public GravatarRating get_Rating();
    [CompilerGeneratedAttribute]
public void set_Rating(GravatarRating value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    private string GetUrl(string email, Nullable`1<int> size, string defaultImage, GravatarRating rating);
    private string GetHash(string Email);
}
public enum AjaxControlToolkit.GravatarDefaultImageBehavior : Enum {
    public int value__;
    public static GravatarDefaultImageBehavior Default;
    public static GravatarDefaultImageBehavior MysteryMan;
    public static GravatarDefaultImageBehavior Identicon;
    public static GravatarDefaultImageBehavior MonsterId;
    public static GravatarDefaultImageBehavior Wavatar;
    public static GravatarDefaultImageBehavior Retro;
}
public enum AjaxControlToolkit.GravatarRating : Enum {
    public int value__;
    public static GravatarRating Default;
    public static GravatarRating G;
    public static GravatarRating PG;
    public static GravatarRating R;
    public static GravatarRating X;
}
public class AjaxControlToolkit.HorizontalSeparator : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public enum AjaxControlToolkit.HorizontalSide : Enum {
    public int value__;
    public static HorizontalSide Left;
    public static HorizontalSide Center;
    public static HorizontalSide Right;
}
[DesignerAttribute("AjaxControlToolkit.Design.HoverExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HoverBehavior", "Hover")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.HoverExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("hoverDelay")]
[DefaultValueAttribute("0")]
public int HoverDelay { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("hoverScript")]
public string HoverScript { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("unhoverDelay")]
[DefaultValueAttribute("0")]
public int UnhoverDelay { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("unhoverScript")]
public string UnhoverScript { get; public set; }
    public int get_HoverDelay();
    public void set_HoverDelay(int value);
    public string get_HoverScript();
    public void set_HoverScript(string value);
    public int get_UnhoverDelay();
    public void set_UnhoverDelay(int value);
    public string get_UnhoverScript();
    public void set_UnhoverScript(string value);
}
[ClientScriptResourceAttribute("Sys.Extended.UI.HoverMenuBehavior", "HoverMenu")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.HoverExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "HoverMenu.bmp")]
[DesignerAttribute("AjaxControlToolkit.Design.HoverMenuExtenderDesigner")]
public class AjaxControlToolkit.HoverMenuExtender : DynamicPopulateExtenderControlBase {
    private Animation _onShow;
    private Animation _onHide;
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ElementReferenceAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("popupElement")]
public string PopupControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("hoverCssClass")]
public string HoverCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("offsetX")]
public int OffsetX { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("offsetY")]
public int OffsetY { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("popDelay")]
public int PopDelay { get; public set; }
    [DefaultValueAttribute("0")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("hoverDelay")]
public int HoverDelay { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("popupPosition")]
public HoverMenuPopupPosition PopupPosition { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    public string get_PopupControlID();
    public void set_PopupControlID(string value);
    public string get_HoverCssClass();
    public void set_HoverCssClass(string value);
    public int get_OffsetX();
    public void set_OffsetX(int value);
    public int get_OffsetY();
    public void set_OffsetY(int value);
    public int get_PopDelay();
    public void set_PopDelay(int value);
    public int get_HoverDelay();
    public void set_HoverDelay(int value);
    public HoverMenuPopupPosition get_PopupPosition();
    public void set_PopupPosition(HoverMenuPopupPosition value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    protected virtual void OnPreRender(EventArgs e);
}
public enum AjaxControlToolkit.HoverMenuPopupPosition : Enum {
    public int value__;
    public static HoverMenuPopupPosition Center;
    public static HoverMenuPopupPosition Top;
    public static HoverMenuPopupPosition Left;
    public static HoverMenuPopupPosition Bottom;
    public static HoverMenuPopupPosition Right;
}
public enum AjaxControlToolkit.HtmlEditor.ActiveModeType : Enum {
    public int value__;
    public static ActiveModeType Design;
    public static ActiveModeType Html;
    public static ActiveModeType Preview;
}
public class AjaxControlToolkit.HtmlEditor.ContentChangedEventHandler : MulticastDelegate {
    public ContentChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "0")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.HtmlEditor", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ExecCommandEmulation", "2")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.DesignPanelEventHandler", "3")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.DesignPanel", "HtmlEditor.DesignPanel")]
internal class AjaxControlToolkit.HtmlEditor.DesignPanel : ModePanel {
    protected virtual void OnInit(EventArgs e);
}
[ClientScriptResourceAttribute("", "HtmlEditor.DesignPanelEventHandler")]
internal static class AjaxControlToolkit.HtmlEditor.DesignPanelEventHandler : object {
}
[ObsoleteAttribute("HtmlEditor is obsolete. Use HtmlEditorExtender instead.")]
[DesignerAttribute("AjaxControlToolkit.Design.EditorDesigner, AjaxControlToolkit")]
[ToolboxItemAttribute("False")]
[ValidationPropertyAttribute("Content")]
[ClientCssResourceAttribute("HtmlEditor.Editor")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Enums")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.BackColorClear")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.BackColorSelector")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Bold")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.BoxButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.BulletedList")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ColorButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ColorSelector")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.CommonButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Copy")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Cut")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.DecreaseIndent")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignMode")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModeBoxButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModeImageButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModePopupImageButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModeSelectButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.EditorToggleButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.FixedBackColor")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.FixedColorButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.FixedForeColor")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.FontName")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.FontSize")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ForeColor")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ForeColorClear")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ForeColorSelector")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.HorizontalSeparator")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.HtmlMode")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ImageButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.IncreaseIndent")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.InsertHR")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.InsertLink")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Italic")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyCenter")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyFull")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyLeft")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyRight")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Ltr")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.MethodButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.ModeButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.OkCancelPopupButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.OrderedList")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Paragraph")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Paste")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.PasteText")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.PasteWord")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.PreviewMode")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Redo")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.RemoveAlignment")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.RemoveLink")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.RemoveStyles")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Rtl")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.SelectButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.SelectOption")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Selector")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.StrikeThrough")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.SubScript")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.SuperScript")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Underline")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.ToolbarButtons.Undo")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.AttachedPopup")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.AttachedTemplatePopup")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.BaseColorsPopup")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.LinkProperties")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.OkCancelAttachedTemplatePopup")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.Popup")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.PopupBGIButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.PopupBoxButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.PopupCommonButton")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Popups.RegisteredField")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Editor", "HtmlEditor.Editor")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "HtmlEditor.bmp")]
public class AjaxControlToolkit.HtmlEditor.Editor : ScriptControlBase {
    internal Toolbar _bottomToolbar;
    internal Toolbar _topToolbar;
    private EditPanel _editPanel;
    private Toolbar _changingToolbar;
    private TableCell _editPanelCell;
    private TableRow _topToolbarRow;
    private TableRow _bottomToolbarRow;
    private bool _wasPreRender;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool EnableSanitization { get; public set; }
    protected bool IsDesign { get; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool SuppressTabInDesignMode { get; public set; }
    [DefaultValueAttribute("False")]
public bool TopToolbarPreservePlace { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool IgnoreTab { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Folder used for toolbar's buttons' images")]
public string ButtonImagesFolder { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool NoUnicode { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool NoScript { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool InitialCleanUp { get; public set; }
    [DefaultValueAttribute("ajax__htmleditor_htmlpanel_default")]
[CategoryAttribute("Appearance")]
public string HtmlPanelCssClass { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string DocumentCssPath { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string DesignPanelCssPath { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
public bool AutoFocus { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string Content { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
public ActiveModeType ActiveMode { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public string OnClientActiveModeChanged { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public string OnClientBeforeActiveModeChanged { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[CategoryAttribute("Appearance")]
public Unit Height { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[CategoryAttribute("Appearance")]
public Unit Width { get; public set; }
    [DefaultValueAttribute("ajax__htmleditor_editor_default")]
[CategoryAttribute("Appearance")]
public string CssClass { get; public set; }
    internal EditPanel EditPanel { get; }
    protected Toolbar BottomToolbar { get; }
    protected Toolbar TopToolbar { get; }
    public bool get_EnableSanitization();
    public void set_EnableSanitization(bool value);
    public void add_ContentChanged(ContentChangedEventHandler value);
    public void remove_ContentChanged(ContentChangedEventHandler value);
    protected bool get_IsDesign();
    public virtual bool get_SuppressTabInDesignMode();
    public virtual void set_SuppressTabInDesignMode(bool value);
    public virtual bool get_TopToolbarPreservePlace();
    public virtual void set_TopToolbarPreservePlace(bool value);
    public virtual bool get_IgnoreTab();
    public virtual void set_IgnoreTab(bool value);
    public virtual string get_ButtonImagesFolder();
    public virtual void set_ButtonImagesFolder(string value);
    public virtual bool get_NoUnicode();
    public virtual void set_NoUnicode(bool value);
    public virtual bool get_NoScript();
    public virtual void set_NoScript(bool value);
    public virtual bool get_InitialCleanUp();
    public virtual void set_InitialCleanUp(bool value);
    public virtual string get_HtmlPanelCssClass();
    public virtual void set_HtmlPanelCssClass(string value);
    public virtual string get_DocumentCssPath();
    public virtual void set_DocumentCssPath(string value);
    public virtual string get_DesignPanelCssPath();
    public virtual void set_DesignPanelCssPath(string value);
    public virtual bool get_AutoFocus();
    public virtual void set_AutoFocus(bool value);
    public virtual string get_Content();
    public virtual void set_Content(string value);
    public virtual ActiveModeType get_ActiveMode();
    public virtual void set_ActiveMode(ActiveModeType value);
    public virtual string get_OnClientActiveModeChanged();
    public virtual void set_OnClientActiveModeChanged(string value);
    public virtual string get_OnClientBeforeActiveModeChanged();
    public virtual void set_OnClientBeforeActiveModeChanged(string value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    internal EditPanel get_EditPanel();
    protected Toolbar get_BottomToolbar();
    protected Toolbar get_TopToolbar();
    protected virtual Style CreateControlStyle();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    protected virtual void OnInit(EventArgs e);
    protected virtual void FillBottomToolbar();
    protected virtual void FillTopToolbar();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    internal void CreateChilds(DesignerWithMapPath designer);
}
[ValidationPropertyAttribute("Content")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Events")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Enums")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.HtmlEditor")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.EditPanel", "HtmlEditor.EditPanel")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.DesignPanel")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.HtmlPanel")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.PreviewPanel")]
public abstract class AjaxControlToolkit.HtmlEditor.EditPanel : ScriptControlBase {
    public static object EventContentChanged;
    private bool _contentChanged;
    private ModePanel[] ModePanels;
    private Collection`1<Toolbar> _toolbars;
    private ControlDesigner _designer;
    private IHtmlSanitizer _sanitizer;
    private bool _enableSanitization;
    private static Lazy`1<Dictionary`2<string, String[]>> _elementWhiteList;
    internal bool EnableSanitization { get; internal set; }
    private bool isDesign { get; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("suppressTabInDesignMode")]
public bool SuppressTabInDesignMode { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool IgnoreTab { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("noUnicode")]
public bool NoUnicode { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("noScript")]
public bool NoScript { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("initialCleanUp")]
public bool InitialCleanUp { get; public set; }
    [DefaultValueAttribute("ajax__htmleditor_htmlpanel_default")]
[CategoryAttribute("Appearance")]
public string HtmlPanelCssClass { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string DocumentCssPath { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("documentCssPath")]
public string ClientDocumentCssPath { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string DesignPanelCssPath { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("designPanelCssPath")]
public string ClientDesignPanelCssPath { get; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("imagePath_1x1")]
public string ImagePath_1X1 { get; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("imagePath_flash")]
public string ImagePath_Flash { get; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("imagePath_media")]
public string ImagePath_Media { get; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("imagePath_anchor")]
public string ImagePath_Anchor { get; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("imagePath_placeHolder")]
public string ImagePath_Placeholder { get; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autofocus")]
public bool AutoFocus { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string Content { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
public ActiveModeType ActiveMode { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("activeModeChanged")]
public string OnClientActiveModeChanged { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("beforeActiveModeChanged")]
public string OnClientBeforeActiveModeChanged { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "100%")]
[CategoryAttribute("Appearance")]
public Unit Height { get; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "100%")]
[CategoryAttribute("Appearance")]
public Unit Width { get; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("modePanelIds")]
public string ClientModePanelIds { get; }
    [PersistenceModeAttribute]
internal Collection`1<Toolbar> Toolbars { get; internal set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("toolbarIds")]
public string ToolbarIds { get; }
    internal EventHandlerList Events { get; }
    protected string ContentChangedId { get; }
    protected string ContentId { get; }
    protected string ContentForceId { get; }
    protected string ActiveModeId { get; }
    private static EditPanel();
    private void InitSanitizer();
    internal bool get_EnableSanitization();
    internal void set_EnableSanitization(bool value);
    public void add_ContentChanged(ContentChangedEventHandler value);
    public void remove_ContentChanged(ContentChangedEventHandler value);
    protected virtual void OnRaiseContentChanged(EventArgs e);
    protected virtual void RaisePostDataChangedEvent();
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    private bool get_isDesign();
    public bool get_SuppressTabInDesignMode();
    public void set_SuppressTabInDesignMode(bool value);
    public bool get_IgnoreTab();
    public void set_IgnoreTab(bool value);
    public bool get_NoUnicode();
    public void set_NoUnicode(bool value);
    public bool get_NoScript();
    public void set_NoScript(bool value);
    public bool get_InitialCleanUp();
    public void set_InitialCleanUp(bool value);
    public string get_HtmlPanelCssClass();
    public void set_HtmlPanelCssClass(string value);
    public string get_DocumentCssPath();
    public void set_DocumentCssPath(string value);
    public string get_ClientDocumentCssPath();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeClientDocumentCssPath();
    public string get_DesignPanelCssPath();
    public void set_DesignPanelCssPath(string value);
    public string get_ClientDesignPanelCssPath();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeClientDesignPanelCssPath();
    public string get_ImagePath_1X1();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeImagePath_1X1();
    public string get_ImagePath_Flash();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeImagePath_Flash();
    public string get_ImagePath_Media();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeImagePath_Media();
    public string get_ImagePath_Anchor();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeImagePath_Anchor();
    public string get_ImagePath_Placeholder();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeImagePath_Placeholder();
    public bool get_AutoFocus();
    public void set_AutoFocus(bool value);
    public string get_Content();
    public void set_Content(string value);
    public ActiveModeType get_ActiveMode();
    public void set_ActiveMode(ActiveModeType value);
    public string get_OnClientActiveModeChanged();
    public void set_OnClientActiveModeChanged(string value);
    public string get_OnClientBeforeActiveModeChanged();
    public void set_OnClientBeforeActiveModeChanged(string value);
    public virtual Unit get_Height();
    public virtual Unit get_Width();
    public string get_ClientModePanelIds();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeClientModePanelIds();
    internal Collection`1<Toolbar> get_Toolbars();
    internal void set_Toolbars(Collection`1<Toolbar> value);
    public string get_ToolbarIds();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeToolbarIds();
    internal EventHandlerList get_Events();
    protected string get_ContentChangedId();
    protected string get_ContentId();
    protected string get_ContentForceId();
    protected string get_ActiveModeId();
    protected void RefreshDesigner();
    public void SetDesigner(ControlDesigner designer);
    protected string LocalResolveUrl(string path);
    internal string getClientCSSPath(string pathN, string name);
    internal static bool IE(Page page);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    protected virtual void OnInit(EventArgs e);
    private static Dictionary`2<string, String[]> MakeElementWhiteList();
}
internal class AjaxControlToolkit.HtmlEditor.EditPanelInstance : EditPanel {
}
[ClientScriptResourceAttribute("", "HtmlEditor.Enums")]
internal static class AjaxControlToolkit.HtmlEditor.Enums : object {
}
[ClientScriptResourceAttribute("", "HtmlEditor.Events")]
internal static class AjaxControlToolkit.HtmlEditor.Events : object {
}
[ClientScriptResourceAttribute("", "HtmlEditor.ExecCommandEmulation")]
internal static class AjaxControlToolkit.HtmlEditor.ExecCommandEmulation : object {
}
[ClientScriptResourceAttribute("", "HtmlEditor.HtmlEditor")]
internal static class AjaxControlToolkit.HtmlEditor.HtmlEditor : object {
}
[ClientCssResourceAttribute("HtmlEditor.HtmlPanel")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.HtmlPanel", "HtmlEditor.HtmlPanel")]
internal class AjaxControlToolkit.HtmlEditor.HtmlPanel : ModePanel {
}
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Editor", "HtmlEditor.ModePanel")]
public abstract class AjaxControlToolkit.HtmlEditor.ModePanel : ScriptControlBase {
    private EditPanel _editPanel;
    protected ModePanel(HtmlTextWriterTag tag);
    protected virtual void OnInit(EventArgs e);
    internal void setEditPanel(EditPanel editPanel);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[ToolboxItemAttribute("False")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.AttachedPopup", "HtmlEditor.Popups.AttachedPopup")]
public class AjaxControlToolkit.HtmlEditor.Popups.AttachedPopup : Popup {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.AttachedTemplatePopup", "HtmlEditor.Popups.AttachedTemplatePopup")]
public class AjaxControlToolkit.HtmlEditor.Popups.AttachedTemplatePopup : AttachedPopup {
    private ITemplate _contentTemplate;
    private HtmlGenericControl _contentDiv;
    private Collection`1<Control> _content;
    private string _containerCSSClass;
    [DefaultValueAttribute("ajax__htmleditor_attachedpopup_default")]
[CategoryAttribute("Appearance")]
public string ContainerCSSClass { get; public set; }
    [PersistenceModeAttribute]
[TemplateInstanceAttribute]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public ITemplate ContentTemplate { get; public set; }
    protected Collection`1<Control> Content { get; }
    public string get_ContainerCSSClass();
    public void set_ContainerCSSClass(string value);
    public ITemplate get_ContentTemplate();
    public void set_ContentTemplate(ITemplate value);
    protected Collection`1<Control> get_Content();
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.BaseColorsPopup", "HtmlEditor.Popups.BaseColorsPopup")]
internal class AjaxControlToolkit.HtmlEditor.Popups.BaseColorsPopup : AttachedTemplatePopup {
    private static String[][] _colors;
    private static BaseColorsPopup();
    protected virtual void CreateChildControls();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.LinkProperties", "HtmlEditor.Popups.LinkProperties")]
internal class AjaxControlToolkit.HtmlEditor.Popups.LinkProperties : OkCancelAttachedTemplatePopup {
    private TextBox _url;
    private HtmlSelect _target;
    private string _defaultTarget;
    [DefaultValueAttribute("_self")]
[CategoryAttribute("Behavior")]
public string DefaultTarget { get; public set; }
    public string get_DefaultTarget();
    public void set_DefaultTarget(string value);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[ToolboxItemAttribute("False")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.OkCancelAttachedTemplatePopup", "HtmlEditor.Popups.OkCancelAttachedTemplatePopup")]
public class AjaxControlToolkit.HtmlEditor.Popups.OkCancelAttachedTemplatePopup : AttachedTemplatePopup {
    protected virtual void CreateChildControls();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.Popup", "HtmlEditor.Popups.Popup")]
public abstract class AjaxControlToolkit.HtmlEditor.Popups.Popup : ScriptControlBase {
    private ResourceManager _rm;
    private HtmlGenericControl _iframe;
    private Collection`1<RegisteredField> _registeredFields;
    private Collection`1<RegisteredField> _registeredHandlers;
    private string _savedCSS;
    private string _initialContent;
    private string _cssPath;
    private bool _autoDimensions;
    private bool isDesign { get; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoDimensions")]
public bool AutoDimensions { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("initialContent")]
public string InitialContent { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cssPath")]
public string CssPath { get; public set; }
    public Collection`1<RegisteredField> RegisteredFields { get; }
    private string RegisteredFieldsIds { get; }
    public Collection`1<RegisteredField> RegisteredHandlers { get; }
    private string RegisteredHandlersIds { get; }
    public static Popup GetExistingPopup(Control parent, Type type);
    private bool get_isDesign();
    public bool get_AutoDimensions();
    public void set_AutoDimensions(bool value);
    public string get_InitialContent();
    public void set_InitialContent(string value);
    public string get_CssPath();
    public void set_CssPath(string value);
    public Collection`1<RegisteredField> get_RegisteredFields();
    private string get_RegisteredFieldsIds();
    public Collection`1<RegisteredField> get_RegisteredHandlers();
    private string get_RegisteredHandlersIds();
    private string GetResourceString(string key);
    protected string GetButton(string name);
    protected string GetField(string name);
    protected string GetField(string name, string subName);
    protected virtual Style CreateControlStyle();
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.PopupBGIButton", "HtmlEditor.Popups.PopupBGIButton")]
internal class AjaxControlToolkit.HtmlEditor.Popups.PopupBGIButton : PopupBoxButton {
    private string _text;
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string Text { get; public set; }
    public PopupBGIButton(HtmlTextWriterTag tag);
    public string get_Text();
    public void set_Text(string value);
    protected virtual void CreateChildControls();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.PopupBoxButton", "HtmlEditor.Popups.PopupBoxButton")]
internal class AjaxControlToolkit.HtmlEditor.Popups.PopupBoxButton : PopupCommonButton {
    private ITemplate _contentTemplate;
    private Collection`1<Control> _content;
    [PersistenceModeAttribute]
[TemplateInstanceAttribute]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public ITemplate ContentTemplate { get; public set; }
    protected Collection`1<Control> Content { get; }
    public PopupBoxButton(HtmlTextWriterTag tag);
    public ITemplate get_ContentTemplate();
    public void set_ContentTemplate(ITemplate value);
    protected Collection`1<Control> get_Content();
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Popups.PopupCommonButton", "HtmlEditor.Popups.PopupCommonButton")]
public abstract class AjaxControlToolkit.HtmlEditor.Popups.PopupCommonButton : ScriptControlBase {
    private Collection`1<Control> _exportedControls;
    private string _name;
    protected bool IsDesign { get; }
    internal Collection`1<Control> ExportedControls { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("name")]
public string Name { get; public set; }
    protected PopupCommonButton(HtmlTextWriterTag tag);
    protected bool get_IsDesign();
    internal Collection`1<Control> get_ExportedControls();
    public string get_Name();
    public void set_Name(string value);
}
public class AjaxControlToolkit.HtmlEditor.Popups.RegisteredField : object {
    private string _name;
    private Control _control;
    public string Name { get; public set; }
    public Control Control { get; public set; }
    public RegisteredField(string name, Control control);
    public string get_Name();
    public void set_Name(string value);
    public Control get_Control();
    public void set_Control(Control value);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.HtmlEditor")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.PreviewPanel", "HtmlEditor.PreviewPanel")]
internal class AjaxControlToolkit.HtmlEditor.PreviewPanel : ModePanel {
    protected virtual void OnInit(EventArgs e);
}
public interface AjaxControlToolkit.HtmlEditor.Sanitizer.IHtmlSanitizer {
    public abstract virtual string GetSafeHtmlFragment(string htmlFragment, Dictionary`2<string, String[]> whiteList);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.Toolbar", "HtmlEditor.Toolbar")]
public abstract class AjaxControlToolkit.HtmlEditor.Toolbar : ScriptControlBase {
    private Collection`1<CommonButton> _buttons;
    private bool _wasPreRender;
    protected bool IsDesign { get; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("alwaysVisible")]
public bool AlwaysVisible { get; public set; }
    [PersistenceModeAttribute]
public Collection`1<CommonButton> Buttons { get; internal set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("buttonIds")]
public string ButtonIds { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Folder used for toolbar's buttons' images")]
public string ButtonImagesFolder { get; public set; }
    protected bool get_IsDesign();
    public bool get_AlwaysVisible();
    public void set_AlwaysVisible(bool value);
    public Collection`1<CommonButton> get_Buttons();
    internal void set_Buttons(Collection`1<CommonButton> value);
    public string get_ButtonIds();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeButtonIds();
    public string get_ButtonImagesFolder();
    public void set_ButtonImagesFolder(string value);
    protected string LocalResolveUrl(string path);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    internal void CreateChilds(DesignerWithMapPath designer);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.BackColorClear", "HtmlEditor.ToolbarButtons.BackColorClear")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.BackColorClear : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.BackColorSelector", "HtmlEditor.ToolbarButtons.BackColorSelector")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.BackColorSelector : ColorSelector {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Bold", "HtmlEditor.ToolbarButtons.Bold")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Bold : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.BoxButton", "HtmlEditor.ToolbarButtons.BoxButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.BoxButton : CommonButton {
    private ITemplate _contentTemplate;
    private Collection`1<Control> _content;
    [PersistenceModeAttribute]
[TemplateInstanceAttribute]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public ITemplate ContentTemplate { get; public set; }
    protected Collection`1<Control> Content { get; }
    public ITemplate get_ContentTemplate();
    public void set_ContentTemplate(ITemplate value);
    protected Collection`1<Control> get_Content();
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.BulletedList", "HtmlEditor.ToolbarButtons.BulletedList")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.BulletedList : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ColorButton", "HtmlEditor.ToolbarButtons.ColorButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ColorButton : DesignModePopupImageButton {
    protected virtual void OnInit(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ColorSelector", "HtmlEditor.ToolbarButtons.ColorSelector")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ColorSelector : Selector {
    private string _fixedColorButtonId;
    [DefaultValueAttribute("")]
public string FixedColorButtonId { get; public set; }
    public string get_FixedColorButtonId();
    public void set_FixedColorButtonId(string value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.CommonButton", "HtmlEditor.ToolbarButtons.CommonButton")]
[ToolboxItemAttribute("False")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.CommonButton : ScriptControlBase {
    private Collection`1<ActiveModeType> _activeModes;
    private Collection`1<Control> _exportedControls;
    private bool _wasPreRender;
    private bool _ignoreTab;
    internal DesignerWithMapPath _designer;
    protected bool IsDesign { get; }
    internal Page Page { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Collection`1<ActiveModeType> ActiveModes { get; }
    internal Collection`1<Control> ExportedControls { get; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("preservePlace")]
public bool PreservePlace { get; public set; }
    [DefaultValueAttribute("ajax__htmleditor_toolbar_button")]
public string CssClass { get; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool IgnoreTab { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("activeModesIds")]
public string ActiveModesIds { get; }
    protected CommonButton(HtmlTextWriterTag tag);
    protected bool get_IsDesign();
    internal Page get_Page();
    internal void set_Page(Page value);
    public Collection`1<ActiveModeType> get_ActiveModes();
    internal Collection`1<Control> get_ExportedControls();
    public bool get_PreservePlace();
    public void set_PreservePlace(bool value);
    public virtual string get_CssClass();
    public bool get_IgnoreTab();
    public void set_IgnoreTab(bool value);
    public string get_ActiveModesIds();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeActiveModesIds();
    protected string GetFromResource(string name);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    internal virtual void CreateChilds(DesignerWithMapPath designer);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Copy", "HtmlEditor.ToolbarButtons.Copy")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Copy : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Cut", "HtmlEditor.ToolbarButtons.Cut")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Cut : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.DecreaseIndent", "HtmlEditor.ToolbarButtons.DecreaseIndent")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.DecreaseIndent : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.DesignMode", "HtmlEditor.ToolbarButtons.DesignMode")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignMode : ModeButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.DesignModeBoxButton", "HtmlEditor.ToolbarButtons.DesignModeBoxButton")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModeBoxButton : BoxButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.DesignModeImageButton", "HtmlEditor.ToolbarButtons.DesignModeImageButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModeImageButton : ImageButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.DesignModePopupImageButton", "HtmlEditor.ToolbarButtons.DesignModePopupImageButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModePopupImageButton : MethodButton {
    private Popup _popup;
    private bool _autoClose;
    protected Popup RelatedPopup { get; protected set; }
    protected bool AutoClose { get; protected set; }
    protected Popup get_RelatedPopup();
    protected void set_RelatedPopup(Popup value);
    protected bool get_AutoClose();
    protected void set_AutoClose(bool value);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.DesignModeSelectButton", "HtmlEditor.ToolbarButtons.DesignModeSelectButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.DesignModeSelectButton : SelectButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.EditorToggleButton", "HtmlEditor.ToolbarButtons.EditorToggleButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.EditorToggleButton : DesignModeImageButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.FixedBackColor", "HtmlEditor.ToolbarButtons.FixedBackColor")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.FixedBackColor : FixedColorButton {
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.FixedColorButton", "HtmlEditor.ToolbarButtons.FixedColorButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.FixedColorButton : DesignModeBoxButton {
    private MethodButton _methodButton;
    private DesignModeBoxButton _colorDiv;
    private string _defaultColor;
    protected MethodButton MethodButton { get; protected set; }
    protected DesignModeBoxButton ColorDiv { get; protected set; }
    [DefaultValueAttribute("#000000")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("defaultColor")]
public string DefaultColor { get; public set; }
    protected MethodButton get_MethodButton();
    protected void set_MethodButton(MethodButton value);
    protected DesignModeBoxButton get_ColorDiv();
    protected void set_ColorDiv(DesignModeBoxButton value);
    public string get_DefaultColor();
    public void set_DefaultColor(string value);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    internal virtual void CreateChilds(DesignerWithMapPath designer);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.FixedForeColor", "HtmlEditor.ToolbarButtons.FixedForeColor")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.FixedForeColor : FixedColorButton {
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.FontName", "HtmlEditor.ToolbarButtons.FontName")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.FontName : DesignModeSelectButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.FontSize", "HtmlEditor.ToolbarButtons.FontSize")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.FontSize : DesignModeSelectButton {
    [DefaultValueAttribute("70px")]
[CategoryAttribute("Appearance")]
public string SelectWidth { get; }
    public virtual string get_SelectWidth();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ForeColor", "HtmlEditor.ToolbarButtons.ForeColor")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ForeColor : ColorButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ForeColorClear", "HtmlEditor.ToolbarButtons.ForeColorClear")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ForeColorClear : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ForeColorSelector", "HtmlEditor.ToolbarButtons.ForeColorSelector")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ForeColorSelector : ColorSelector {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.HorizontalSeparator", "HtmlEditor.ToolbarButtons.HorizontalSeparator")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.HorizontalSeparator : DesignModeImageButton {
    protected virtual void OnPreRender(EventArgs e);
    protected virtual Style CreateControlStyle();
}
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.HtmlMode", "HtmlEditor.ToolbarButtons.HtmlMode")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.HtmlMode : ModeButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ImageButton", "HtmlEditor.ToolbarButtons.ImageButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ImageButton : CommonButton {
    protected Type BaseImageButtonType { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("normalSrc")]
public string NormalSrc { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("hoverSrc")]
public string HoverSrc { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("downSrc")]
public string DownSrc { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("activeSrc")]
public string ActiveSrc { get; public set; }
    protected virtual Type get_BaseImageButtonType();
    public string get_NormalSrc();
    public void set_NormalSrc(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeNormalSrc();
    public string get_HoverSrc();
    public void set_HoverSrc(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeHoverSrc();
    public string get_DownSrc();
    public void set_DownSrc(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeDownSrc();
    public string get_ActiveSrc();
    public void set_ActiveSrc(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeActiveSrc();
    protected void RegisterButtonImages(string name, string ext);
    protected void RegisterButtonImages(string name);
    internal void InternalRegisterButtonImages(string name);
    private string getImagePath(Type type, string name, string ext, Toolbar toolbar);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.IncreaseIndent", "HtmlEditor.ToolbarButtons.IncreaseIndent")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.IncreaseIndent : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.InsertHR", "HtmlEditor.ToolbarButtons.InsertHR")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.InsertHR : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.InsertLink", "HtmlEditor.ToolbarButtons.InsertLink")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.InsertLink : OkCancelPopupButton {
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Italic", "HtmlEditor.ToolbarButtons.Italic")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Italic : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.JustifyCenter", "HtmlEditor.ToolbarButtons.JustifyCenter")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyCenter : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.JustifyFull", "HtmlEditor.ToolbarButtons.JustifyFull")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyFull : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.JustifyLeft", "HtmlEditor.ToolbarButtons.JustifyLeft")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyLeft : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.JustifyRight", "HtmlEditor.ToolbarButtons.JustifyRight")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.JustifyRight : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Ltr", "HtmlEditor.ToolbarButtons.Ltr")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Ltr : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.MethodButton", "HtmlEditor.ToolbarButtons.MethodButton")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.MethodButton : DesignModeImageButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.HtmlEditor.Enums")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.ModeButton", "HtmlEditor.ToolbarButtons.ModeButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.ModeButton : ImageButton {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("activeMode")]
public ActiveModeType ActiveMode { get; public set; }
    public ActiveModeType get_ActiveMode();
    public void set_ActiveMode(ActiveModeType value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeActiveMode();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.OkCancelPopupButton", "HtmlEditor.ToolbarButtons.OkCancelPopupButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.OkCancelPopupButton : DesignModePopupImageButton {
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.OrderedList", "HtmlEditor.ToolbarButtons.OrderedList")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.OrderedList : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Paragraph", "HtmlEditor.ToolbarButtons.Paragraph")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Paragraph : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Paste", "HtmlEditor.ToolbarButtons.Paste")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Paste : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.PasteText", "HtmlEditor.ToolbarButtons.PasteText")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.PasteText : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.PasteWord", "HtmlEditor.ToolbarButtons.PasteWord")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.PasteWord : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.PreviewMode", "HtmlEditor.ToolbarButtons.PreviewMode")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.PreviewMode : ModeButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Redo", "HtmlEditor.ToolbarButtons.Redo")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Redo : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.RemoveAlignment", "HtmlEditor.ToolbarButtons.RemoveAlignment")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.RemoveAlignment : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.RemoveLink", "HtmlEditor.ToolbarButtons.RemoveLink")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.RemoveLink : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.RemoveStyles", "HtmlEditor.ToolbarButtons.RemoveStyles")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.RemoveStyles : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Rtl", "HtmlEditor.ToolbarButtons.Rtl")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Rtl : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.SelectButton", "HtmlEditor.ToolbarButtons.SelectButton")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.SelectButton : CommonButton {
    private Collection`1<SelectOption> _options;
    [PersistenceModeAttribute]
public Collection`1<SelectOption> Options { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string SelectWidth { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
public string DefaultValue { get; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Appearance")]
public bool UseDefaultValue { get; }
    public Collection`1<SelectOption> get_Options();
    public virtual string get_SelectWidth();
    public virtual string get_DefaultValue();
    public virtual bool get_UseDefaultValue();
    protected virtual void CreateChildControls();
    protected virtual Style CreateControlStyle();
}
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.SelectOption : object {
    private string _value;
    private string _text;
    public string Value { get; public set; }
    public string Text { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public string get_Text();
    public void set_Text(string value);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Selector", "HtmlEditor.ToolbarButtons.Selector")]
public abstract class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Selector : DesignModePopupImageButton {
    protected virtual void OnPreRender(EventArgs e);
    protected virtual Style CreateControlStyle();
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.StrikeThrough", "HtmlEditor.ToolbarButtons.StrikeThrough")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.StrikeThrough : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.SubScript", "HtmlEditor.ToolbarButtons.SubScript")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.SubScript : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.SuperScript", "HtmlEditor.ToolbarButtons.SuperScript")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.SuperScript : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Underline", "HtmlEditor.ToolbarButtons.Underline")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Underline : EditorToggleButton {
    protected virtual void OnPreRender(EventArgs e);
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditor.ToolbarButtons.Undo", "HtmlEditor.ToolbarButtons.Undo")]
public class AjaxControlToolkit.HtmlEditor.ToolbarButtons.Undo : MethodButton {
    protected virtual void OnPreRender(EventArgs e);
}
internal class AjaxControlToolkit.HtmlEditor.ToolbarInstance : Toolbar {
}
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "0")]
[RequiredScriptAttribute("AjaxControlToolkit.ColorPickerExtender", "1")]
[ClientScriptResourceAttribute("Sys.Extended.UI.HtmlEditorExtenderBehavior", "HtmlEditorExtender")]
[ClientCssResourceAttribute("HtmlEditorExtender")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "HtmlEditorExtender.bmp")]
public class AjaxControlToolkit.HtmlEditorExtender : ExtenderControlBase {
    internal static int ButtonWidthDef;
    internal static int ButtonHeightDef;
    private static Lazy`1<IHtmlSanitizer> _sanitizer;
    private HtmlEditorExtenderButtonCollection buttonList;
    private AjaxFileUpload ajaxFileUpload;
    private bool enableSanitization;
    private static string InsertImageCommandName;
    [CompilerGeneratedAttribute]
private EventHandler`1<AjaxFileUploadEventArgs> ImageUploadComplete;
    private bool tracked;
    public IHtmlSanitizer Sanitizer { get; public set; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("toolbarButtons")]
public HtmlEditorExtenderButtonCollection ToolbarButtons { get; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.HtmlEditorExtenderButtonCollectionEditor", "System.Drawing.Design.UITypeEditor")]
[DescriptionAttribute("Costumize visible buttons, leave empty to show all buttons")]
public HtmlEditorExtenderButtonCollection Toolbar { get; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("displaySourceTab")]
public bool DisplaySourceTab { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("displayPreviewTab")]
public bool DisplayPreviewTab { get; public set; }
    [ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("change")]
[DefaultValueAttribute("")]
public string OnClientChange { get; public set; }
    [BrowsableAttribute("False")]
public AjaxFileUpload AjaxFileUpload { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool EnableSanitization { get; public set; }
    private static HtmlEditorExtender();
    private static IHtmlSanitizer CreateSanitizer();
    public IHtmlSanitizer get_Sanitizer();
    public void set_Sanitizer(IHtmlSanitizer value);
    public HtmlEditorExtenderButtonCollection get_ToolbarButtons();
    private void EnsureButtons();
    public HtmlEditorExtenderButtonCollection get_Toolbar();
    public bool get_DisplaySourceTab();
    public void set_DisplaySourceTab(bool value);
    public bool get_DisplayPreviewTab();
    public void set_DisplayPreviewTab(bool value);
    public string get_OnClientChange();
    public void set_OnClientChange(string value);
    public AjaxFileUpload get_AjaxFileUpload();
    public bool get_EnableSanitization();
    public void set_EnableSanitization(bool value);
    [CompilerGeneratedAttribute]
public void add_ImageUploadComplete(EventHandler`1<AjaxFileUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImageUploadComplete(EventHandler`1<AjaxFileUploadEventArgs> value);
    public string Decode(string value);
    private static string RemoveInsecureHtml(string html);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnLoad(EventArgs e);
    private bool HasImageButton();
    protected virtual void CreateButtons();
    private Dictionary`2<string, String[]> MakeCombinedElementList();
}
public abstract class AjaxControlToolkit.HtmlEditorExtenderButton : object {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public abstract virtual string get_CommandName();
    public virtual string get_Tooltip();
    public abstract virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public abstract virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.HtmlEditorExtenderButtonCollection : List`1<HtmlEditorExtenderButton> {
}
public class AjaxControlToolkit.HtmlEditorExtenderButtonCollectionEditor : CollectionEditor {
    public HtmlEditorExtenderButtonCollectionEditor(Type type);
    protected virtual Type[] CreateNewItemTypes();
    protected virtual bool CanSelectMultipleInstances();
}
public interface AjaxControlToolkit.IClientStateManager {
    public bool SupportsClientState { get; }
    public abstract virtual bool get_SupportsClientState();
    public abstract virtual void LoadClientState(string clientState);
    public abstract virtual string SaveClientState();
}
public interface AjaxControlToolkit.IControlResolver {
    public abstract virtual Control ResolveControl(string controlId);
}
public class AjaxControlToolkit.Indent : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.InsertHorizontalRule : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.InsertImage : HtmlEditorExtenderButton {
    [CompilerGeneratedAttribute]
private string <AjaxFileUploadHandlerPath>k__BackingField;
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public string AjaxFileUploadHandlerPath { get; public set; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
    [CompilerGeneratedAttribute]
public string get_AjaxFileUploadHandlerPath();
    [CompilerGeneratedAttribute]
public void set_AjaxFileUploadHandlerPath(string value);
}
public class AjaxControlToolkit.InsertOrderedList : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.InsertUnorderedList : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public interface AjaxControlToolkit.IScriptComponentDescriptor {
    public string ClientID { get; }
    public string ID { get; public set; }
    public string Type { get; public set; }
    public abstract virtual string get_ClientID();
    public abstract virtual string get_ID();
    public abstract virtual void set_ID(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual void AddComponentProperty(string name, string componentID);
    public abstract virtual void AddElementProperty(string name, string elementID);
    public abstract virtual void AddEvent(string name, string handler);
    public abstract virtual void AddProperty(string name, object value);
}
public class AjaxControlToolkit.Italic : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.JustifyCenter : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.JustifyFull : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.JustifyLeft : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.JustifyRight : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
[ClientCssResourceAttribute("LineChart")]
[ClientScriptResourceAttribute("Sys.Extended.UI.LineChart", "LineChart")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "LineChart.bmp")]
public class AjaxControlToolkit.LineChart : ChartBase {
    private List`1<LineChartSeries> _series;
    [CompilerGeneratedAttribute]
private string <CategoriesAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private LineChartType <ChartType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryAxisLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseLineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipFontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TooltipBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AreaDataLabel>k__BackingField;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("displayValues")]
public bool DisplayValues { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("categoriesAxis")]
public string CategoriesAxis { get; public set; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("clientSeries")]
public List`1<LineChartSeries> ClientSeries { get; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.Design.ChartBaseSeriesEditor`1<AjaxControlToolkit.LineChartSeries>", "System.Drawing.Design.UITypeEditor")]
public List`1<LineChartSeries> Series { get; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("chartType")]
public LineChartType ChartType { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("9")]
[ClientPropertyNameAttribute("valueAxisLines")]
public int ValueAxisLines { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("valueAxisLineColor")]
public string ValueAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("categoryAxisLineColor")]
public string CategoryAxisLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("baseLineColor")]
public string BaseLineColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("#FFC652")]
[ClientPropertyNameAttribute("tooltipBackgroundColor")]
public string TooltipBackgroundColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("#0E426C")]
[ClientPropertyNameAttribute("tooltipFontColor")]
public string TooltipFontColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("#B85B3E")]
[ClientPropertyNameAttribute("tooltipBorderColor")]
public string TooltipBorderColor { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("areaDataLabel")]
public string AreaDataLabel { get; public set; }
    public void set_DisplayValues(bool value);
    public bool get_DisplayValues();
    [CompilerGeneratedAttribute]
public string get_CategoriesAxis();
    [CompilerGeneratedAttribute]
public void set_CategoriesAxis(string value);
    public List`1<LineChartSeries> get_ClientSeries();
    public List`1<LineChartSeries> get_Series();
    [CompilerGeneratedAttribute]
public LineChartType get_ChartType();
    [CompilerGeneratedAttribute]
public void set_ChartType(LineChartType value);
    [CompilerGeneratedAttribute]
public int get_ValueAxisLines();
    [CompilerGeneratedAttribute]
public void set_ValueAxisLines(int value);
    [CompilerGeneratedAttribute]
public string get_ValueAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_ValueAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_CategoryAxisLineColor();
    [CompilerGeneratedAttribute]
public void set_CategoryAxisLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_BaseLineColor();
    [CompilerGeneratedAttribute]
public void set_BaseLineColor(string value);
    [CompilerGeneratedAttribute]
public string get_TooltipBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_TooltipBackgroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_TooltipFontColor();
    [CompilerGeneratedAttribute]
public void set_TooltipFontColor(string value);
    [CompilerGeneratedAttribute]
public string get_TooltipBorderColor();
    [CompilerGeneratedAttribute]
public void set_TooltipBorderColor(string value);
    [CompilerGeneratedAttribute]
public string get_AreaDataLabel();
    [CompilerGeneratedAttribute]
public void set_AreaDataLabel(string value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
}
public class AjaxControlToolkit.LineChartSeries : object {
    private string _name;
    private string _lineColor;
    [CompilerGeneratedAttribute]
private Decimal[] <Data>k__BackingField;
    public string Name { get; public set; }
    public string LineColor { get; public set; }
    [TypeConverterAttribute("AjaxControlToolkit.DataConverter`1<System.Decimal>")]
public Decimal[] Data { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_LineColor();
    public void set_LineColor(string value);
    [CompilerGeneratedAttribute]
public Decimal[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Decimal[] value);
}
public enum AjaxControlToolkit.LineChartType : Enum {
    public int value__;
    public static LineChartType Basic;
    public static LineChartType Stacked;
}
[TargetControlTypeAttribute("System.Web.UI.WebControls.ListControl")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ListSearchBehavior", "ListSearch")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "0")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupControlExtender", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender", "2")]
[DesignerAttribute("AjaxControlToolkit.Design.ListSearchExtenderDesigner")]
[DescriptionAttribute("Lets users search incrementally within ListBoxes")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ListSearch.bmp")]
public class AjaxControlToolkit.ListSearchExtender : AnimationExtenderControlBase {
    private Animation _onShow;
    private Animation _onHide;
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("promptText")]
[DefaultValueAttribute("Type to search")]
[DescriptionAttribute("The prompt text displayed when user clicks the list")]
public string PromptText { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("promptCssClass")]
[DefaultValueAttribute("")]
[DescriptionAttribute("CSS class applied to prompt when user clicks list")]
public string PromptCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("promptPosition")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Indicates where you want the prompt message displayed when the user clicks on the list.")]
public ListSearchPromptPosition PromptPosition { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("queryTimeout")]
public int QueryTimeout { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("queryPattern")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Indicates search criteria to be used to find items.")]
public ListSearchQueryPattern QueryPattern { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("isSorted")]
[DefaultValueAttribute("False")]
public bool IsSorted { get; public set; }
    protected virtual void OnLoad(EventArgs e);
    public string get_PromptText();
    public void set_PromptText(string value);
    public string get_PromptCssClass();
    public void set_PromptCssClass(string value);
    public ListSearchPromptPosition get_PromptPosition();
    public void set_PromptPosition(ListSearchPromptPosition value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    public int get_QueryTimeout();
    public void set_QueryTimeout(int value);
    protected virtual void OnPreRender(EventArgs e);
    public ListSearchQueryPattern get_QueryPattern();
    public void set_QueryPattern(ListSearchQueryPattern value);
    public bool get_IsSorted();
    public void set_IsSorted(bool value);
}
public enum AjaxControlToolkit.ListSearchPromptPosition : Enum {
    public int value__;
    public static ListSearchPromptPosition Top;
    public static ListSearchPromptPosition Bottom;
}
public enum AjaxControlToolkit.ListSearchQueryPattern : Enum {
    public int value__;
    public static ListSearchQueryPattern StartsWith;
    public static ListSearchQueryPattern Contains;
}
public class AjaxControlToolkit.Localization : object {
    private static object _locker;
    private static ICollection`1<string> _builtinLocales;
    private static IDictionary`2<string, LocaleScriptInfo> _customLocales;
    private static IDictionary`2<string, Func`2<string, ScriptReference>> _externalLocales;
    public ICollection`1<string> BuiltinLocales { get; }
    private static Assembly ToolkitAssembly { get; }
    private static Localization();
    public virtual ICollection`1<string> get_BuiltinLocales();
    public static void AddLocale(string localeKey, string scriptName, Assembly scriptAssembly);
    public static void AddExternalLocale(string localeKey, Func`2<string, ScriptReference> scriptReferenceProvider);
    private static Assembly get_ToolkitAssembly();
    private static void PopulateKnownLocales();
    public IEnumerable`1<ScriptReference> GetLocalizationScriptReferences();
    public IEnumerable`1<EmbeddedScript> GetAllLocalizationEmbeddedScripts();
    private IEnumerable`1<LocaleScriptInfo> GetAllLocaleScriptInfo();
    public string GetLocaleKey();
    public virtual bool IsLocalizationEnabled();
    internal static void RegisterLocalization(ClientScriptManager scriptManager, Type type);
    private ScriptReference CreateScriptReference(string localeKey, Assembly scriptAssembly);
    private string GetScriptSuffix();
    public virtual bool IsDebuggingEnabled();
    private static string GetCustomScriptName(string localeKey);
    private static string FormatScriptName(string localeKey);
    private string DetermineLocale();
    private string GetLocale(string culture);
    private string GetLanguage(string cultureName);
}
public static class AjaxControlToolkit.MaskedEditCommon : object {
    private static string _charEscape;
    private static string _charsEditMask;
    private static string _charNumbers;
    public static int GetFirstMaskPosition(string text);
    public static int GetLastMaskPosition(string text);
    public static string GetValidMask(string text);
    public static string ConvertMask(string text);
}
[DesignerAttribute("AjaxControlToolkit.Design.MaskedEditExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.MaskedEditBehavior", "MaskedEditValidator")]
[ClientScriptResourceAttribute("Sys.Extended.UI.MaskedEditBehavior", "MaskedEdit")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "MaskedEdit.bmp")]
public class AjaxControlToolkit.MaskedEditExtender : ExtenderControlBase {
    [RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("mask")]
public string Mask { get; public set; }
    [DefaultValueAttribute("Your browser security settings don't permit the automatic execution of paste operations. Please use the keyboard shortcut Ctrl+V instead.")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("clipboardText")]
public string ClipboardText { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[RefreshPropertiesAttribute("1")]
[ClientPropertyNameAttribute("maskType")]
public MaskedEditType MaskType { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("messageValidatorTip")]
public bool MessageValidatorTip { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("errorTooltipEnabled")]
public bool ErrorTooltipEnabled { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("errorTooltipCssClass")]
public string ErrorTooltipCssClass { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("clipboardEnabled")]
public bool ClipboardEnabled { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoComplete")]
public bool AutoComplete { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("clearTextOnInvalid")]
public bool ClearTextOnInvalid { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoCompleteValue")]
public string AutoCompleteValue { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("filtered")]
public string Filtered { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("inputDirection")]
public MaskedEditInputDirection InputDirection { get; public set; }
    [DefaultValueAttribute("_")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("promptCharacter")]
public string PromptCharacter { get; public set; }
    [DefaultValueAttribute("MaskedEditFocus")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onFocusCssClass")]
public string OnFocusCssClass { get; public set; }
    [DefaultValueAttribute("MaskedEditError")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onInvalidCssClass")]
public string OnInvalidCssClass { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("userDateFormat")]
public MaskedEditUserDateFormat UserDateFormat { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("userTimeFormat")]
public MaskedEditUserTimeFormat UserTimeFormat { get; public set; }
    [DefaultValueAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("clearMaskOnLostFocus")]
public bool ClearMaskOnLostFocus { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[RefreshPropertiesAttribute("1")]
[ClientPropertyNameAttribute("cultureName")]
public string CultureName { get; public set; }
    internal bool OverridePageCulture { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureDatePlaceholder")]
public string CultureDatePlaceholder { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureTimePlaceholder")]
public string CultureTimePlaceholder { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureDecimalPlaceholder")]
public string CultureDecimalPlaceholder { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureThousandsPlaceholder")]
public string CultureThousandsPlaceholder { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureDateFormat")]
public string CultureDateFormat { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureCurrencySymbolPlaceholder")]
public string CultureCurrencySymbolPlaceholder { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cultureAMPMPlaceholder")]
public string CultureAMPMPlaceholder { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("acceptAMPM")]
public bool AcceptAMPM { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("acceptNegative")]
public MaskedEditShowSymbol AcceptNegative { get; public set; }
    [DefaultValueAttribute("MaskedEditFocusNegative")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onFocusCssNegative")]
public string OnFocusCssNegative { get; public set; }
    [DefaultValueAttribute("MaskedEditBlurNegative")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onBlurCssNegative")]
public string OnBlurCssNegative { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("displayMoney")]
public MaskedEditShowSymbol DisplayMoney { get; public set; }
    [DefaultValueAttribute("1900")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("century")]
public int Century { get; public set; }
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void OnLoad(EventArgs e);
    public string get_Mask();
    public void set_Mask(string value);
    public string get_ClipboardText();
    public void set_ClipboardText(string value);
    public MaskedEditType get_MaskType();
    public void set_MaskType(MaskedEditType value);
    public bool get_MessageValidatorTip();
    public void set_MessageValidatorTip(bool value);
    public bool get_ErrorTooltipEnabled();
    public void set_ErrorTooltipEnabled(bool value);
    public string get_ErrorTooltipCssClass();
    public void set_ErrorTooltipCssClass(string value);
    public bool get_ClipboardEnabled();
    public void set_ClipboardEnabled(bool value);
    public bool get_AutoComplete();
    public void set_AutoComplete(bool value);
    public bool get_ClearTextOnInvalid();
    public void set_ClearTextOnInvalid(bool value);
    public string get_AutoCompleteValue();
    public void set_AutoCompleteValue(string value);
    public string get_Filtered();
    public void set_Filtered(string value);
    public MaskedEditInputDirection get_InputDirection();
    public void set_InputDirection(MaskedEditInputDirection value);
    public string get_PromptCharacter();
    public void set_PromptCharacter(string value);
    public string get_OnFocusCssClass();
    public void set_OnFocusCssClass(string value);
    public string get_OnInvalidCssClass();
    public void set_OnInvalidCssClass(string value);
    public MaskedEditUserDateFormat get_UserDateFormat();
    public void set_UserDateFormat(MaskedEditUserDateFormat value);
    public MaskedEditUserTimeFormat get_UserTimeFormat();
    public void set_UserTimeFormat(MaskedEditUserTimeFormat value);
    public bool get_ClearMaskOnLostFocus();
    public void set_ClearMaskOnLostFocus(bool value);
    public string get_CultureName();
    public void set_CultureName(string value);
    internal bool get_OverridePageCulture();
    internal void set_OverridePageCulture(bool value);
    public string get_CultureDatePlaceholder();
    public void set_CultureDatePlaceholder(string value);
    public string get_CultureTimePlaceholder();
    public void set_CultureTimePlaceholder(string value);
    public string get_CultureDecimalPlaceholder();
    public void set_CultureDecimalPlaceholder(string value);
    public string get_CultureThousandsPlaceholder();
    public void set_CultureThousandsPlaceholder(string value);
    public string get_CultureDateFormat();
    public void set_CultureDateFormat(string value);
    public string get_CultureCurrencySymbolPlaceholder();
    public void set_CultureCurrencySymbolPlaceholder(string value);
    public string get_CultureAMPMPlaceholder();
    public void set_CultureAMPMPlaceholder(string value);
    public bool get_AcceptAMPM();
    public void set_AcceptAMPM(bool value);
    public MaskedEditShowSymbol get_AcceptNegative();
    public void set_AcceptNegative(MaskedEditShowSymbol value);
    public string get_OnFocusCssNegative();
    public void set_OnFocusCssNegative(string value);
    public string get_OnBlurCssNegative();
    public void set_OnBlurCssNegative(string value);
    public MaskedEditShowSymbol get_DisplayMoney();
    public void set_DisplayMoney(MaskedEditShowSymbol value);
    public int get_Century();
    public void set_Century(int value);
    private bool validateMaskType();
}
public enum AjaxControlToolkit.MaskedEditInputDirection : Enum {
    public int value__;
    public static MaskedEditInputDirection LeftToRight;
    public static MaskedEditInputDirection RightToLeft;
}
public enum AjaxControlToolkit.MaskedEditShowSymbol : Enum {
    public int value__;
    public static MaskedEditShowSymbol None;
    public static MaskedEditShowSymbol Left;
    public static MaskedEditShowSymbol Right;
}
public enum AjaxControlToolkit.MaskedEditType : Enum {
    public int value__;
    public static MaskedEditType None;
    public static MaskedEditType Date;
    public static MaskedEditType Number;
    public static MaskedEditType Time;
    public static MaskedEditType DateTime;
}
public class AjaxControlToolkit.MaskedEditTypeConvert : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    private static Object[] GetControls(IContainer container);
    private static bool IncludeControl(Control serverControl);
}
public enum AjaxControlToolkit.MaskedEditUserDateFormat : Enum {
    public int value__;
    public static MaskedEditUserDateFormat None;
    public static MaskedEditUserDateFormat DayMonthYear;
    public static MaskedEditUserDateFormat DayYearMonth;
    public static MaskedEditUserDateFormat MonthDayYear;
    public static MaskedEditUserDateFormat MonthYearDay;
    public static MaskedEditUserDateFormat YearDayMonth;
    public static MaskedEditUserDateFormat YearMonthDay;
}
public enum AjaxControlToolkit.MaskedEditUserTimeFormat : Enum {
    public int value__;
    public static MaskedEditUserTimeFormat None;
    public static MaskedEditUserTimeFormat TwentyFourHour;
}
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "MaskedEdit.bmp")]
public class AjaxControlToolkit.MaskedEditValidator : BaseValidator {
    private bool _isValidEmpty;
    private string _messageTip;
    private string _messageInvalid;
    private string _messageEmpty;
    private string _messageMax;
    private string _messageMin;
    private string _textInvalid;
    private string _textEmpty;
    private string _textMax;
    private string _textMin;
    private string _initialValue;
    private string _validationExpression;
    private string _clientValidationFunction;
    private string _maximumValue;
    private string _minimumValue;
    private string _controlExtender;
    private CultureInfo _culture;
    [CompilerGeneratedAttribute]
private EventHandler`1<ServerValidateEventArgs> MaskedEditServerValidator;
    protected CultureInfo ControlCulture { get; protected set; }
    public string ErrorMessage { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("MaskedEdit")]
public bool IsValidEmpty { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string TooltipMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string EmptyValueMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string EmptyValueBlurredText { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string InvalidValueMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string InvalidValueBlurredMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string MaximumValue { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string MaximumValueMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string MaximumValueBlurredMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string ClientValidationFunction { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string InitialValue { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string ValidationExpression { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string MinimumValue { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string MinimumValueMessage { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("MaskedEdit")]
public string MinimumValueBlurredText { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("AjaxControlToolkit.MaskedEditTypeConvert")]
[RequiredPropertyAttribute]
[CategoryAttribute("MaskedEdit")]
public string ControlExtender { get; public set; }
    [CompilerGeneratedAttribute]
public void add_MaskedEditServerValidator(EventHandler`1<ServerValidateEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MaskedEditServerValidator(EventHandler`1<ServerValidateEventArgs> value);
    protected CultureInfo get_ControlCulture();
    protected void set_ControlCulture(CultureInfo value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public bool get_IsValidEmpty();
    public void set_IsValidEmpty(bool value);
    public string get_TooltipMessage();
    public void set_TooltipMessage(string value);
    public string get_EmptyValueMessage();
    public void set_EmptyValueMessage(string value);
    public string get_EmptyValueBlurredText();
    public void set_EmptyValueBlurredText(string value);
    public string get_InvalidValueMessage();
    public void set_InvalidValueMessage(string value);
    public string get_InvalidValueBlurredMessage();
    public void set_InvalidValueBlurredMessage(string value);
    public string get_MaximumValue();
    public void set_MaximumValue(string value);
    public string get_MaximumValueMessage();
    public void set_MaximumValueMessage(string value);
    public string get_MaximumValueBlurredMessage();
    public void set_MaximumValueBlurredMessage(string value);
    public string get_ClientValidationFunction();
    public void set_ClientValidationFunction(string value);
    public string get_InitialValue();
    public void set_InitialValue(string value);
    public string get_ValidationExpression();
    public void set_ValidationExpression(string value);
    public string get_MinimumValue();
    public void set_MinimumValue(string value);
    public string get_MinimumValueMessage();
    public void set_MinimumValueMessage(string value);
    public string get_MinimumValueBlurredText();
    public void set_MinimumValueBlurredText(string value);
    public string get_ControlExtender();
    public void set_ControlExtender(string value);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual bool ControlPropertiesValid();
    protected virtual bool EvaluateIsValid();
}
public abstract class AjaxControlToolkit.MaskedEditValidatorCompatibility.BaseValidator : BaseValidator {
    private ScriptManager _scriptManager;
    private bool _scriptManagerChecked;
    internal ScriptManager ScriptManager { get; }
    private bool AjaxControlToolkit.MaskedEditValidatorCompatibility.IBaseValidatorAccessor.RenderUpLevel { get; }
    private HtmlTextWriterTag AjaxControlToolkit.MaskedEditValidatorCompatibility.IWebControlAccessor.TagKey { get; }
    internal ScriptManager get_ScriptManager();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void RegisterValidatorDeclaration();
    private sealed virtual override bool AjaxControlToolkit.MaskedEditValidatorCompatibility.IBaseValidatorAccessor.get_RenderUpLevel();
    private sealed virtual override HtmlTextWriterTag AjaxControlToolkit.MaskedEditValidatorCompatibility.IWebControlAccessor.get_TagKey();
    private sealed virtual override void AjaxControlToolkit.MaskedEditValidatorCompatibility.IBaseValidatorAccessor.EnsureID();
    private sealed virtual override string AjaxControlToolkit.MaskedEditValidatorCompatibility.IBaseValidatorAccessor.GetControlRenderID(string name);
}
internal interface AjaxControlToolkit.MaskedEditValidatorCompatibility.IBaseCompareValidatorAccessor {
    public int CutoffYear { get; }
    public abstract virtual int get_CutoffYear();
    public abstract virtual string GetDateElementOrder();
}
internal interface AjaxControlToolkit.MaskedEditValidatorCompatibility.IBaseValidatorAccessor {
    public bool RenderUpLevel { get; }
    public abstract virtual bool get_RenderUpLevel();
    public abstract virtual void EnsureID();
    public abstract virtual string GetControlRenderID(string name);
}
internal interface AjaxControlToolkit.MaskedEditValidatorCompatibility.IWebControlAccessor {
    public HtmlTextWriterTag TagKey { get; }
    public abstract virtual HtmlTextWriterTag get_TagKey();
}
internal static class AjaxControlToolkit.MaskedEditValidatorCompatibility.ValidatorHelper : object {
    private static string ValidatorFileName;
    private static string ValidatorIncludeScriptKey;
    private static string ValidatorStartupScript;
    public static void DoBaseValidatorAddAttributes(BaseValidator validator, IBaseValidatorAccessor validatorAccessor, HtmlTextWriter writer);
    public static void DoWebControlAddAttributes(WebControl webControl, IWebControlAccessor webControlAccessor, HtmlTextWriter writer);
    public static void DoInitRegistration(Page page);
    public static void DoValidatorArrayDeclaration(BaseValidator validator, Type validatorType);
    public static void DoPreRenderRegistration(BaseValidator validator, IBaseValidatorAccessor validatorAccessor);
    public static void AddExpandoAttribute(WebControl webControl, string controlId, string attributeName, string attributeValue);
    public static void AddExpandoAttribute(WebControl webControl, string controlId, string attributeName, string attributeValue, bool encode);
}
[DesignerAttribute("AjaxControlToolkit.Design.ModalPopupExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ModalPopupBehavior", "ModalPopup")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.DragPanelExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.DropShadowExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.HiddenField")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ModalPopup.bmp")]
public class AjaxControlToolkit.ModalPopupExtender : DynamicPopulateExtenderControlBase {
    private Nullable`1<bool> _show;
    private Animation _onHidden;
    private Animation _onShown;
    private Animation _onHiding;
    private Animation _onShowing;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("popupControlID")]
public string PopupControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("backgroundCssClass")]
public string BackgroundCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("okControlID")]
public string OkControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("cancelControlID")]
public string CancelControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("onOkScript")]
public string OnOkScript { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("onCancelScript")]
public string OnCancelScript { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("-1")]
[ClientPropertyNameAttribute("x")]
public int X { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("-1")]
[ClientPropertyNameAttribute("y")]
public int Y { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ObsoleteAttribute("The drag feature on modal popup will be automatically turned on if you specify the PopupDragHandleControlID property. Setting the Drag property is a noop")]
[ClientPropertyNameAttribute("drag")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Drag { get; public set; }
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("popupDragHandleControlID")]
public string PopupDragHandleControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("dropShadow")]
public bool DropShadow { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("repositionMode")]
public ModalPopupRepositionMode RepositionMode { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShown")]
public Animation OnShown { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHidden")]
public Animation OnHidden { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShowing")]
public Animation OnShowing { get; public set; }
    [BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHiding")]
public Animation OnHiding { get; public set; }
    public string get_PopupControlID();
    public void set_PopupControlID(string value);
    public string get_BackgroundCssClass();
    public void set_BackgroundCssClass(string value);
    public string get_OkControlID();
    public void set_OkControlID(string value);
    public string get_CancelControlID();
    public void set_CancelControlID(string value);
    public string get_OnOkScript();
    public void set_OnOkScript(string value);
    public string get_OnCancelScript();
    public void set_OnCancelScript(string value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public bool get_Drag();
    public void set_Drag(bool value);
    public string get_PopupDragHandleControlID();
    public void set_PopupDragHandleControlID(string value);
    public bool get_DropShadow();
    public void set_DropShadow(bool value);
    public ModalPopupRepositionMode get_RepositionMode();
    public void set_RepositionMode(ModalPopupRepositionMode value);
    public Animation get_OnShown();
    public void set_OnShown(Animation value);
    public Animation get_OnHidden();
    public void set_OnHidden(Animation value);
    public Animation get_OnShowing();
    public void set_OnShowing(Animation value);
    public Animation get_OnHiding();
    public void set_OnHiding(Animation value);
    public void Show();
    public void Hide();
    protected virtual void OnPreRender(EventArgs e);
    private void ChangeVisibility(bool show);
}
public enum AjaxControlToolkit.ModalPopupRepositionMode : Enum {
    public int value__;
    public static ModalPopupRepositionMode None;
    public static ModalPopupRepositionMode RepositionOnWindowResize;
    public static ModalPopupRepositionMode RepositionOnWindowScroll;
    public static ModalPopupRepositionMode RepositionOnWindowResizeAndScroll;
}
public enum AjaxControlToolkit.MultiHandleInnerRailStyle : Enum {
    public int value__;
    public static MultiHandleInnerRailStyle AsIs;
    public static MultiHandleInnerRailStyle SlidingDoors;
}
[DesignerAttribute("AjaxControlToolkit.Design.MultiHandleSliderExtenderDesigner")]
[ClientCssResourceAttribute("MultiHandleSlider")]
[ClientScriptResourceAttribute("Sys.Extended.UI.MultiHandleSliderBehavior", "MultiHandleSlider")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.DragDropScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "MultiHandleSlider.bmp")]
public class AjaxControlToolkit.MultiHandleSliderExtender : ExtenderControlBase {
    [DescriptionAttribute("The lowest value on the slider.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimum")]
public int Minimum { get; public set; }
    [DescriptionAttribute("The highest value on the slider.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("100")]
[ClientPropertyNameAttribute("maximum")]
public int Maximum { get; public set; }
    [DescriptionAttribute("The length of the slider rail in pixels.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("150")]
[ClientPropertyNameAttribute("length")]
public int Length { get; public set; }
    [DescriptionAttribute("Determines number of discrete locations on the slider; otherwise, the slider is continous.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("steps")]
public int Steps { get; public set; }
    [DescriptionAttribute("Determines if the slider will show an inner selected range rail; otherwise, it will display as a uniform rail.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("showInnerRail")]
public bool ShowInnerRail { get; public set; }
    [DescriptionAttribute("Determines how the inner rail style is handled.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("innerRailStyle")]
public MultiHandleInnerRailStyle InnerRailStyle { get; public set; }
    [ExtenderControlPropertyAttribute]
[DescriptionAttribute("Determines if the slider's orientation is horizontal or vertical.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("orientation")]
public SliderOrientation Orientation { get; public set; }
    [DescriptionAttribute("Determines if changes to the slider's values are raised as an event when dragging; otherwise, they are raised on drag end.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("raiseChangeOnlyOnMouseUp")]
public bool RaiseChangeOnlyOnMouseUp { get; public set; }
    [DescriptionAttribute("Determines if the inner rail range can be dragged as a whole, moving both handles defining it.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("enableInnerRangeDrag")]
public bool EnableInnerRangeDrag { get; public set; }
    [DescriptionAttribute("Determines if clicking on the rail will detect and move the closest handle.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("enableRailClick")]
public bool EnableRailClick { get; public set; }
    [DescriptionAttribute("Determines if the slider and its values can be manipulated.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("isReadOnly")]
public bool IsReadOnly { get; public set; }
    [DescriptionAttribute("Determines if the slider will respond to arrow keys when it has focus.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("enableKeyboard")]
public bool EnableKeyboard { get; public set; }
    [DescriptionAttribute("Determines if the slider will respond to the mouse wheel when it has focus.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("enableMouseWheel")]
public bool EnableMouseWheel { get; public set; }
    [DescriptionAttribute("Determines the number of points to increment or decrement the slider using the keyboard or mousewheel; ignored if steps is used.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("1")]
[ClientPropertyNameAttribute("increment")]
public int Increment { get; public set; }
    [ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("_isServerControl")]
public bool IsServerControl { get; }
    [DescriptionAttribute("The list of controls used to bind slider handle values. These should be Label or TextBox controls.")]
[PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("2")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.Design.MultiHandleSliderTargetsEditor", "System.Drawing.Design.UITypeEditor")]
public Collection`1<MultiHandleSliderTarget> MultiHandleSliderTargets { get; }
    [DescriptionAttribute("The list of controls used to bind slider handle values. These should be Label or TextBox controls.")]
[PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("multiHandleSliderTargets")]
public Collection`1<MultiHandleSliderTarget> ClientMultiHandleSliderTargets { get; public set; }
    [DescriptionAttribute("Determines if the slider handles display an animation effect when changing position.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("enableHandleAnimation")]
public bool EnableHandleAnimation { get; public set; }
    [DescriptionAttribute("Determines if the slider handles will show a style effect when they are hovered over.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("showHandleHoverStyle")]
public bool ShowHandleHoverStyle { get; public set; }
    [DescriptionAttribute("Determines if the slider handles will show a style effect when they are being dragged.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("showHandleDragStyle")]
public bool ShowHandleDragStyle { get; public set; }
    [DescriptionAttribute("Determines the total duration of the animation effect, in seconds.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0,02")]
[ClientPropertyNameAttribute("handleAnimationDuration")]
public float HandleAnimationDuration { get; public set; }
    [DescriptionAttribute("Determines the text to display as the tooltip; {0} denotes the current handle's value in the format string.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("tooltipText")]
public string TooltipText { get; public set; }
    [DescriptionAttribute("The master style to apply to slider graphical elements.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("cssClass")]
public string CssClass { get; public set; }
    [ExtenderControlEventAttribute]
[DescriptionAttribute("The event raised when the slider is completely loaded on the page.")]
[ClientPropertyNameAttribute("load")]
[DefaultValueAttribute("")]
public string OnClientLoad { get; public set; }
    [ExtenderControlEventAttribute]
[DescriptionAttribute("The event raised when the user initiates a drag operation on the slider.")]
[ClientPropertyNameAttribute("dragStart")]
[DefaultValueAttribute("")]
public string OnClientDragStart { get; public set; }
    [ExtenderControlEventAttribute]
[DescriptionAttribute("The event raised when the user drags the slider.")]
[ClientPropertyNameAttribute("drag")]
[DefaultValueAttribute("")]
public string OnClientDrag { get; public set; }
    [ExtenderControlEventAttribute]
[DescriptionAttribute("The event raised when the user drops the slider.")]
[ClientPropertyNameAttribute("dragEnd")]
[DefaultValueAttribute("")]
public string OnClientDragEnd { get; public set; }
    [ExtenderControlEventAttribute]
[DescriptionAttribute("The event raised when the slider changes its state.")]
[ClientPropertyNameAttribute("valueChanged")]
[DefaultValueAttribute("")]
public string OnClientValueChanged { get; public set; }
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("boundControlID")]
public string BoundControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("decimals")]
[DefaultValueAttribute("0")]
public int Decimals { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("handleCssClass")]
public string HandleCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("railCssClass")]
public string RailCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("handleImageUrl")]
public string HandleImageUrl { get; public set; }
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Length();
    public void set_Length(int value);
    public int get_Steps();
    public void set_Steps(int value);
    public bool get_ShowInnerRail();
    public void set_ShowInnerRail(bool value);
    public MultiHandleInnerRailStyle get_InnerRailStyle();
    public void set_InnerRailStyle(MultiHandleInnerRailStyle value);
    public SliderOrientation get_Orientation();
    public void set_Orientation(SliderOrientation value);
    public bool get_RaiseChangeOnlyOnMouseUp();
    public void set_RaiseChangeOnlyOnMouseUp(bool value);
    public bool get_EnableInnerRangeDrag();
    public void set_EnableInnerRangeDrag(bool value);
    public bool get_EnableRailClick();
    public void set_EnableRailClick(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_EnableKeyboard();
    public void set_EnableKeyboard(bool value);
    public bool get_EnableMouseWheel();
    public void set_EnableMouseWheel(bool value);
    public int get_Increment();
    public void set_Increment(int value);
    public bool get_IsServerControl();
    public Collection`1<MultiHandleSliderTarget> get_MultiHandleSliderTargets();
    public Collection`1<MultiHandleSliderTarget> get_ClientMultiHandleSliderTargets();
    public void set_ClientMultiHandleSliderTargets(Collection`1<MultiHandleSliderTarget> value);
    public bool get_EnableHandleAnimation();
    public void set_EnableHandleAnimation(bool value);
    public bool get_ShowHandleHoverStyle();
    public void set_ShowHandleHoverStyle(bool value);
    public bool get_ShowHandleDragStyle();
    public void set_ShowHandleDragStyle(bool value);
    public float get_HandleAnimationDuration();
    public void set_HandleAnimationDuration(float value);
    public string get_TooltipText();
    public void set_TooltipText(string value);
    public string get_CssClass();
    public void set_CssClass(string value);
    public string get_OnClientLoad();
    public void set_OnClientLoad(string value);
    public string get_OnClientDragStart();
    public void set_OnClientDragStart(string value);
    public string get_OnClientDrag();
    public void set_OnClientDrag(string value);
    public string get_OnClientDragEnd();
    public void set_OnClientDragEnd(string value);
    public string get_OnClientValueChanged();
    public void set_OnClientValueChanged(string value);
    public string get_BoundControlID();
    public void set_BoundControlID(string value);
    public int get_Decimals();
    public void set_Decimals(int value);
    public string get_HandleCssClass();
    public void set_HandleCssClass(string value);
    public string get_RailCssClass();
    public void set_RailCssClass(string value);
    public string get_HandleImageUrl();
    public void set_HandleImageUrl(string value);
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class AjaxControlToolkit.MultiHandleSliderTarget : object {
    private string _controlID;
    private string _handleCssClass;
    private int _decimals;
    private int _offset;
    [ExtenderControlPropertyAttribute]
[DescriptionAttribute("Sets the ID of the control that is bound to the location of this handle.")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[NotifyParentPropertyAttribute("True")]
public string ControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DescriptionAttribute("Sets the style of the handle associated with the MultiHandleSliderTarget, if custom styles are used.")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
public string HandleCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DescriptionAttribute("Sets the number of decimal places to store with the value.")]
[DefaultValueAttribute("0")]
[NotifyParentPropertyAttribute("True")]
public int Decimals { get; public set; }
    [ExtenderControlPropertyAttribute]
[DescriptionAttribute("Sets the number of pixels to offset the width of the handle, for handles with transparent space.")]
[DefaultValueAttribute("0")]
[NotifyParentPropertyAttribute("True")]
public int Offset { get; public set; }
    public string get_ControlID();
    public void set_ControlID(string value);
    public string get_HandleCssClass();
    public void set_HandleCssClass(string value);
    public int get_Decimals();
    public void set_Decimals(int value);
    public int get_Offset();
    public void set_Offset(int value);
}
public class AjaxControlToolkit.MultipartFormDataParser : object {
    private static string EOF;
    public static FileHeaderInfo ParseHeaderInfo(Byte[] bytes, Encoding encoding);
    private static int GetContentTypeIndex(Byte[] bytes, Encoding encoding, string contentTypeString);
    private static MultipartFormData Parse(Byte[] bytes, Encoding encoding);
}
[TargetControlTypeAttribute("System.Web.UI.ICheckBoxControl")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.MutuallyExclusiveCheckBoxBehavior", "MutuallyExclusiveCheckBox")]
[DesignerAttribute("AjaxControlToolkit.Design.MutuallyExclusiveCheckBoxExtenderDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "MutuallyExclusiveCheckBox.bmp")]
public class AjaxControlToolkit.MutuallyExclusiveCheckBoxExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("key")]
public string Key { get; public set; }
    public string get_Key();
    public void set_Key(string value);
}
[DesignerAttribute("AjaxControlToolkit.Design.NoBotExtenderDesigner")]
[DefaultEventAttribute("GenerateChallengeAndResponse")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "NoBot.bmp")]
public class AjaxControlToolkit.NoBot : WebControl {
    private static SortedList`2<DateTime, string> _pastAddresses;
    private int _responseMinimumDelaySeconds;
    private int _cutoffWindowSeconds;
    private int _cutoffMaximumInstances;
    private NoBotExtender _extender;
    private NoBotState _state;
    [CompilerGeneratedAttribute]
private EventHandler`1<NoBotEventArgs> GenerateChallengeAndResponse;
    private string ResponseTimeKey { get; }
    private string SessionKeyKey { get; }
    public int ResponseMinimumDelaySeconds { get; public set; }
    public int CutoffWindowSeconds { get; public set; }
    public int CutoffMaximumInstances { get; public set; }
    private static NoBot();
    protected virtual void CreateChildControls();
    protected virtual void OnLoad(EventArgs e);
    public bool IsValid(NoBotState& state);
    public bool IsValid();
    public static SortedList`2<DateTime, string> GetCopyOfUserAddressCache();
    public static void EmptyUserAddressCache();
    private void CheckResponseAndStoreState();
    private string get_ResponseTimeKey();
    private string get_SessionKeyKey();
    private string CreateSessionKey(long ticks);
    [CompilerGeneratedAttribute]
public void add_GenerateChallengeAndResponse(EventHandler`1<NoBotEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GenerateChallengeAndResponse(EventHandler`1<NoBotEventArgs> value);
    public int get_ResponseMinimumDelaySeconds();
    public void set_ResponseMinimumDelaySeconds(int value);
    public int get_CutoffWindowSeconds();
    public void set_CutoffWindowSeconds(int value);
    public int get_CutoffMaximumInstances();
    public void set_CutoffMaximumInstances(int value);
}
public class AjaxControlToolkit.NoBotEventArgs : EventArgs {
    private string _challengeScript;
    private string _requiredResponse;
    public string ChallengeScript { get; public set; }
    public string RequiredResponse { get; public set; }
    public string get_ChallengeScript();
    public void set_ChallengeScript(string value);
    public string get_RequiredResponse();
    public void set_RequiredResponse(string value);
}
[ToolboxItemAttribute("False")]
[ClientScriptResourceAttribute("Sys.Extended.UI.NoBotBehavior", "NoBot")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.Label")]
public class AjaxControlToolkit.NoBotExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("challengeScript")]
public string ChallengeScript { get; public set; }
    public string get_ChallengeScript();
    public void set_ChallengeScript(string value);
}
public enum AjaxControlToolkit.NoBotState : Enum {
    public int value__;
    public static NoBotState Valid;
    public static NoBotState InvalidBadResponse;
    public static NoBotState InvalidResponseTooSoon;
    public static NoBotState InvalidAddressTooActive;
    public static NoBotState InvalidBadSession;
    public static NoBotState InvalidUnknown;
}
[DesignerAttribute("AjaxControlToolkit.Design.NumericUpDownExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientCssResourceAttribute("NumericUpDown")]
[ClientScriptResourceAttribute("Sys.Extended.UI.NumericUpDownBehavior", "NumericUpDown")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "NumericUpDown.bmp")]
public class AjaxControlToolkit.NumericUpDownExtender : ExtenderControlBase {
    [IDReferencePropertyAttribute("System.Web.UI.Control")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("targetButtonUpID")]
public string TargetButtonUpID { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.Control")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("targetButtonDownID")]
public string TargetButtonDownID { get; public set; }
    [TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[UrlPropertyAttribute]
[EditorAttribute("System.Web.UI.Design.UrlEditor", "System.Drawing.Design.UITypeEditor")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("serviceUpPath")]
public string ServiceUpPath { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("serviceUpMethod")]
public string ServiceUpMethod { get; public set; }
    [TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[UrlPropertyAttribute]
[EditorAttribute("System.Web.UI.Design.UrlEditor", "System.Drawing.Design.UITypeEditor")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("serviceDownPath")]
public string ServiceDownPath { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("serviceDownMethod")]
public string ServiceDownMethod { get; public set; }
    [DefaultValueAttribute("1")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("step")]
public double Step { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("minimum")]
public double Minimum { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("maximum")]
public double Maximum { get; public set; }
    [EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("refValues")]
public string RefValues { get; public set; }
    [RequiredPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("width")]
public int Width { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("tag")]
public string Tag { get; public set; }
    public string get_TargetButtonUpID();
    public void set_TargetButtonUpID(string value);
    public string get_TargetButtonDownID();
    public void set_TargetButtonDownID(string value);
    public string get_ServiceUpPath();
    public void set_ServiceUpPath(string value);
    private bool ShouldSerializeServiceUpPath();
    public string get_ServiceUpMethod();
    public void set_ServiceUpMethod(string value);
    public string get_ServiceDownPath();
    public void set_ServiceDownPath(string value);
    private bool ShouldSerializeServieDownPath();
    public string get_ServiceDownMethod();
    public void set_ServiceDownMethod(string value);
    public double get_Step();
    public void set_Step(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public string get_RefValues();
    public void set_RefValues(string value);
    public int get_Width();
    public void set_Width(int value);
    public string get_Tag();
    public void set_Tag(string value);
}
public enum AjaxControlToolkit.OnDemandMode : Enum {
    public int value__;
    public static OnDemandMode None;
    public static OnDemandMode Always;
    public static OnDemandMode Once;
}
public class AjaxControlToolkit.Outdent : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.OverlayCollectionEditor : CollectionEditor {
    public OverlayCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual Type[] CreateNewItemTypes();
}
[DesignerAttribute("AjaxControlToolkit.Design.PagingBulletedListExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.PagingBulletedListBehavior", "PagingBulletedList")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.BulletedList")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "PagingBulletedList.bmp")]
public class AjaxControlToolkit.PagingBulletedListExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("1")]
[ClientPropertyNameAttribute("indexSize")]
public int IndexSize { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("height")]
public Nullable`1<int> Height { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute(" - ")]
[ClientPropertyNameAttribute("separator")]
public string Separator { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("maxItemPerPage")]
public Nullable`1<int> MaxItemPerPage { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("clientSort")]
public bool ClientSort { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("selectIndexCssClass")]
public string SelectIndexCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("unselectIndexCssClass")]
public string UnselectIndexCssClass { get; public set; }
    public int get_IndexSize();
    public void set_IndexSize(int value);
    public Nullable`1<int> get_Height();
    public void set_Height(Nullable`1<int> value);
    public string get_Separator();
    public void set_Separator(string value);
    public Nullable`1<int> get_MaxItemPerPage();
    public void set_MaxItemPerPage(Nullable`1<int> value);
    public bool get_ClientSort();
    public void set_ClientSort(bool value);
    public string get_SelectIndexCssClass();
    public void set_SelectIndexCssClass(string value);
    public string get_UnselectIndexCssClass();
    public void set_UnselectIndexCssClass(string value);
}
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[DesignerAttribute("AjaxControlToolkit.Design.PasswordStrengthExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.PasswordStrengthExtenderBehavior", "PasswordStrength")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "PasswordStrength.bmp")]
public class AjaxControlToolkit.PasswordStrength : ExtenderControlBase {
    private static string _txtPasswordCssClass;
    private static string _barBorderCssClass;
    private static string _barIndicatorCssClass;
    private static string _strengthIndicatorType;
    private static string _displayPosition;
    private static string _prefixText;
    private static string _txtDisplayIndicators;
    private static string _strengthStyles;
    private static int _txtIndicatorsMinCount;
    private static int _txtIndicatorsMaxCount;
    private static char _txtIndicatorDelimiter;
    private static string _preferredPasswordLength;
    private static string _minPasswordNumerics;
    private static string _minPasswordSymbols;
    private static string _requiresUpperLowerCase;
    private static string _minLowerCaseChars;
    private static string _minUpperCaseChars;
    private static string _helpHandleCssClass;
    private static string _helphandlePosition;
    private static string _helpStatusLabelID;
    private static string _calcWeightings;
    private static string _prefixTextDefault;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("preferredPasswordLength")]
public int PreferredPasswordLength { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimumNumericCharacters")]
public int MinimumNumericCharacters { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("helpHandleCssClass")]
public string HelpHandleCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("helpHandlePosition")]
public DisplayPosition HelpHandlePosition { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.WebControls.Label")]
[DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("helpStatusLabelID")]
public string HelpStatusLabelID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimumSymbolCharacters")]
public int MinimumSymbolCharacters { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("requiresUpperAndLowerCaseCharacters")]
public bool RequiresUpperAndLowerCaseCharacters { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("textCssClass")]
public string TextCssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("barBorderCssClass")]
public string BarBorderCssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("barIndicatorCssClass")]
public string BarIndicatorCssClass { get; public set; }
    [DefaultValueAttribute("Strength: ")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("prefixText")]
public string PrefixText { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("displayPosition")]
public DisplayPosition DisplayPosition { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("strengthIndicatorType")]
public StrengthIndicatorTypes StrengthIndicatorType { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("calculationWeightings")]
public string CalculationWeightings { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("textStrengthDescriptions")]
public string TextStrengthDescriptions { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("strengthStyles")]
public string StrengthStyles { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimumLowerCaseCharacters")]
public int MinimumLowerCaseCharacters { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimumUpperCaseCharacters")]
public int MinimumUpperCaseCharacters { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Please use the StrengthStyles property instead.")]
[ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string TextStrengthDescriptionStyles { get; public set; }
    public int get_PreferredPasswordLength();
    public void set_PreferredPasswordLength(int value);
    public int get_MinimumNumericCharacters();
    public void set_MinimumNumericCharacters(int value);
    public string get_HelpHandleCssClass();
    public void set_HelpHandleCssClass(string value);
    public DisplayPosition get_HelpHandlePosition();
    public void set_HelpHandlePosition(DisplayPosition value);
    public string get_HelpStatusLabelID();
    public void set_HelpStatusLabelID(string value);
    public int get_MinimumSymbolCharacters();
    public void set_MinimumSymbolCharacters(int value);
    public bool get_RequiresUpperAndLowerCaseCharacters();
    public void set_RequiresUpperAndLowerCaseCharacters(bool value);
    public string get_TextCssClass();
    public void set_TextCssClass(string value);
    public string get_BarBorderCssClass();
    public void set_BarBorderCssClass(string value);
    public string get_BarIndicatorCssClass();
    public void set_BarIndicatorCssClass(string value);
    public string get_PrefixText();
    public void set_PrefixText(string value);
    public DisplayPosition get_DisplayPosition();
    public void set_DisplayPosition(DisplayPosition value);
    public StrengthIndicatorTypes get_StrengthIndicatorType();
    public void set_StrengthIndicatorType(StrengthIndicatorTypes value);
    public string get_CalculationWeightings();
    public void set_CalculationWeightings(string value);
    public string get_TextStrengthDescriptions();
    public void set_TextStrengthDescriptions(string value);
    public string get_StrengthStyles();
    public void set_StrengthStyles(string value);
    public int get_MinimumLowerCaseCharacters();
    public void set_MinimumLowerCaseCharacters(int value);
    public int get_MinimumUpperCaseCharacters();
    public void set_MinimumUpperCaseCharacters(int value);
    public string get_TextStrengthDescriptionStyles();
    public void set_TextStrengthDescriptionStyles(string value);
}
public class AjaxControlToolkit.Paste : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
internal class AjaxControlToolkit.PersistentStoreManager : object {
    private static string _idSeperator;
    private string _extendedFileUploadGUID;
    public static PersistentStoreManager Instance { get; }
    public string ExtendedFileUploadGUID { get; public set; }
    public static PersistentStoreManager get_Instance();
    public string get_ExtendedFileUploadGUID();
    public void set_ExtendedFileUploadGUID(string value);
    public string GetFullID(string controlId);
    public void ClearAllFilesFromSession(string controlId);
    public void RemoveFileFromSession(string controlId);
    public void AddFileToSession(string controlId, string filename, HttpPostedFile fileUpload);
    public bool FileExists(string controlId);
    public string GetFileName(string controlId);
    public string GetContentType(string controlId);
    public HttpPostedFile GetFileFromSession(string controlId);
    public List`1<HttpPostedFile> GetAllFilesFromSession(string controlId);
    private HttpContext GetCurrentContext();
}
[ClientCssResourceAttribute("PieChart")]
[ClientScriptResourceAttribute("Sys.Extended.UI.PieChart", "PieChart")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "PieChart.bmp")]
public class AjaxControlToolkit.PieChart : ChartBase {
    private List`1<PieChartValue> _values;
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("pieChartClientValues")]
public List`1<PieChartValue> PieChartClientValues { get; }
    [PersistenceModeAttribute]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("AjaxControlToolkit.Design.ChartBaseSeriesEditor`1<AjaxControlToolkit.PieChartValue>", "System.Drawing.Design.UITypeEditor")]
public List`1<PieChartValue> PieChartValues { get; }
    public List`1<PieChartValue> get_PieChartClientValues();
    public List`1<PieChartValue> get_PieChartValues();
    protected virtual void OnInit(EventArgs e);
}
public class AjaxControlToolkit.PieChartValue : object {
    private decimal _data;
    private string _category;
    private string _pieChartValueColor;
    private string _pieChartValueStrokeColor;
    public decimal Data { get; public set; }
    public string Category { get; public set; }
    public string PieChartValueColor { get; public set; }
    public string PieChartValueStrokeColor { get; public set; }
    public decimal get_Data();
    public void set_Data(decimal value);
    public string get_Category();
    public void set_Category(string value);
    public string get_PieChartValueColor();
    public void set_PieChartValueColor(string value);
    public string get_PieChartValueStrokeColor();
    public void set_PieChartValueStrokeColor(string value);
}
[ClientScriptResourceAttribute("Sys.Extended.UI.PopupControlBehavior", "PopupControl")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[DesignerAttribute("AjaxControlToolkit.Design.PopupControlExtenderDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "PopupControl.bmp")]
public class AjaxControlToolkit.PopupControlExtender : DynamicPopulateExtenderControlBase {
    private bool _shouldClose;
    private string _closeString;
    private Page _proxyForCurrentPopup;
    private EventHandler _pagePreRenderHandler;
    private Animation _onShow;
    private Animation _onHide;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ClientPropertyNameAttribute("extenderControlID")]
public string ExtenderControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("popupControlID")]
public string PopupControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("commitProperty")]
public string CommitProperty { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("commitScript")]
public string CommitScript { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("position")]
public PopupControlPopupPosition Position { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("offsetX")]
public int OffsetX { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("offsetY")]
public int OffsetY { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    private PopupControlExtender(Page page);
    public static PopupControlExtender GetProxyForCurrentPopup(Page page);
    public void Cancel();
    public void Commit(string result);
    protected virtual void OnLoad(EventArgs e);
    protected void Page_PreRender(object sender, EventArgs e);
    private void Close(string result);
    public string get_ExtenderControlID();
    public void set_ExtenderControlID(string value);
    public string get_PopupControlID();
    public void set_PopupControlID(string value);
    public string get_CommitProperty();
    public void set_CommitProperty(string value);
    public string get_CommitScript();
    public void set_CommitScript(string value);
    public PopupControlPopupPosition get_Position();
    public void set_Position(PopupControlPopupPosition value);
    public int get_OffsetX();
    public void set_OffsetX(int value);
    public int get_OffsetY();
    public void set_OffsetY(int value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    protected virtual void OnPreRender(EventArgs e);
}
public enum AjaxControlToolkit.PopupControlPopupPosition : Enum {
    public int value__;
    public static PopupControlPopupPosition Center;
    public static PopupControlPopupPosition Top;
    public static PopupControlPopupPosition Left;
    public static PopupControlPopupPosition Bottom;
    public static PopupControlPopupPosition Right;
}
[ClientScriptResourceAttribute("Sys.Extended.UI.PopupBehavior", "Popup")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxItemAttribute("False")]
[DesignerAttribute("AjaxControlToolkit.Design.PopupExtenderDesigner")]
public class AjaxControlToolkit.PopupExtender : AnimationExtenderControlBase {
    private Animation _onShow;
    private Animation _onHide;
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("parentElement")]
[ElementReferenceAttribute]
public string ParentElementID { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("x")]
[DefaultValueAttribute("0")]
public int X { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("y")]
[DefaultValueAttribute("0")]
public int Y { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("positioningMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PositioningMode PositioningMode { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("reparent")]
[DefaultValueAttribute("False")]
public bool Reparent { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    public string get_ParentElementID();
    public void set_ParentElementID(string value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public PositioningMode get_PositioningMode();
    public void set_PositioningMode(PositioningMode value);
    public bool get_Reparent();
    public void set_Reparent(bool value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    protected virtual void OnPreRender(EventArgs e);
}
public enum AjaxControlToolkit.PositioningMode : Enum {
    public int value__;
    public static PositioningMode Absolute;
    public static PositioningMode Center;
    public static PositioningMode BottomLeft;
    public static PositioningMode BottomRight;
    public static PositioningMode TopLeft;
    public static PositioningMode TopRight;
    public static PositioningMode Right;
    public static PositioningMode Left;
}
[NonVisualControlAttribute]
[ToolboxDataAttribute("<{0}:Rating runat="server"></{0}:Rating>")]
[DesignerAttribute("AjaxControlToolkit.Design.RatingExtenderDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Rating.bmp")]
public class AjaxControlToolkit.Rating : Panel {
    private static object EventChange;
    private static object EventClick;
    private RatingExtender _extender;
    private string _returnFromEvent;
    private Orientation _align;
    private RatingDirection _direction;
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("True to cause a postback on rating change")]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("autoPostBack")]
public bool AutoPostBack { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Rating")]
[BindableAttribute("True", "1")]
[DefaultValueAttribute("3")]
public int CurrentRating { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("MaxRating")]
[DefaultValueAttribute("5")]
[BindableAttribute("True", "1")]
[ClientPropertyNameAttribute("maxRating")]
public int MaxRating { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("BehaviorID")]
[DefaultValueAttribute("")]
public string BehaviorID { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("ReadOnly")]
[DefaultValueAttribute("False")]
[BindableAttribute("True", "1")]
[ClientPropertyNameAttribute("readOnly")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Tag")]
[DefaultValueAttribute("")]
[BindableAttribute("True", "1")]
[ClientPropertyNameAttribute("tag")]
public string Tag { get; public set; }
    [BrowsableAttribute("True")]
[ThemeableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("StarCssClass")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("starCssClass")]
public string StarCssClass { get; public set; }
    [BrowsableAttribute("True")]
[ThemeableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("FilledStarCssClass")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("filledStarCssClass")]
public string FilledStarCssClass { get; public set; }
    [BrowsableAttribute("True")]
[ThemeableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("EmptyStarCssClass")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("emptyStarCssClass")]
public string EmptyStarCssClass { get; public set; }
    [BrowsableAttribute("True")]
[ThemeableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("WaitingStarCssClass")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("waitingStarCssClass")]
public string WaitingStarCssClass { get; public set; }
    [BrowsableAttribute("True")]
[ThemeableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Rating Align")]
[DefaultValueAttribute]
public Orientation RatingAlign { get; public set; }
    [BrowsableAttribute("True")]
[ThemeableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Rating Direction")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("ratingDirection")]
public RatingDirection RatingDirection { get; public set; }
    public string ID { get; public set; }
    private static Rating();
    public bool get_AutoPostBack();
    public void set_AutoPostBack(bool value);
    public int get_CurrentRating();
    public void set_CurrentRating(int value);
    public int get_MaxRating();
    public void set_MaxRating(int value);
    public string get_BehaviorID();
    public void set_BehaviorID(string value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_Tag();
    public void set_Tag(string value);
    public string get_StarCssClass();
    public void set_StarCssClass(string value);
    public string get_FilledStarCssClass();
    public void set_FilledStarCssClass(string value);
    public string get_EmptyStarCssClass();
    public void set_EmptyStarCssClass(string value);
    public string get_WaitingStarCssClass();
    public void set_WaitingStarCssClass(string value);
    public Orientation get_RatingAlign();
    public void set_RatingAlign(Orientation value);
    public RatingDirection get_RatingDirection();
    public void set_RatingDirection(RatingDirection value);
    public virtual string get_ID();
    public virtual void set_ID(string value);
    protected virtual void CreateChildControls();
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void OnLoad(EventArgs e);
    public void add_Changed(RatingEventHandler value);
    public void remove_Changed(RatingEventHandler value);
    protected virtual void OnChanged(RatingEventArgs e);
    public void add_Click(RatingEventHandler value);
    public void remove_Click(RatingEventHandler value);
    protected virtual void OnClick(RatingEventArgs e);
    public sealed virtual string GetCallbackResult();
    public sealed virtual void RaiseCallbackEvent(string eventArgument);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    private RatingEventArgs HandleEvent(string eventArgument);
    private String[] ParseEventData(string eventArgument);
}
public enum AjaxControlToolkit.RatingDirection : Enum {
    public int value__;
    public static RatingDirection LeftToRightTopToBottom;
    public static RatingDirection RightToLeftBottomToTop;
}
public class AjaxControlToolkit.RatingEventArgs : EventArgs {
    private string _value;
    private string _tag;
    private string _callbackResult;
    public string Value { get; }
    public string Tag { get; }
    public string CallbackResult { get; public set; }
    [ObsoleteAttribute]
public RatingEventArgs(string args);
    public RatingEventArgs(string value, string tag);
    public string get_Value();
    public string get_Tag();
    public string get_CallbackResult();
    public void set_CallbackResult(string value);
}
public class AjaxControlToolkit.RatingEventHandler : MulticastDelegate {
    public RatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
[TargetControlTypeAttribute("AjaxControlToolkit.Rating")]
[ClientScriptResourceAttribute("Sys.Extended.UI.RatingBehavior", "Rating")]
public class AjaxControlToolkit.RatingExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("_isServerControl")]
public bool IsServerControl { get; }
    [ExtenderControlPropertyAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ClientPropertyNameAttribute("autoPostBack")]
public bool AutoPostBack { get; public set; }
    [DefaultValueAttribute("0")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("rating")]
public int Rating { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("callbackID")]
public string CallbackID { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("tag")]
public string Tag { get; public set; }
    [DefaultValueAttribute("0")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("ratingDirection")]
public int RatingDirection { get; public set; }
    [DefaultValueAttribute("5")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("maxRating")]
public int MaxRating { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("starCssClass")]
public string StarCssClass { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("readOnly")]
public bool ReadOnly { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("filledStarCssClass")]
public string FilledStarCssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("emptyStarCssClass")]
public string EmptyStarCssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("waitingStarCssClass")]
public string WaitingStarCssClass { get; public set; }
    public bool get_IsServerControl();
    public bool get_AutoPostBack();
    public void set_AutoPostBack(bool value);
    public int get_Rating();
    public void set_Rating(int value);
    public string get_CallbackID();
    public void set_CallbackID(string value);
    public string get_Tag();
    public void set_Tag(string value);
    public int get_RatingDirection();
    public void set_RatingDirection(int value);
    public int get_MaxRating();
    public void set_MaxRating(int value);
    public string get_StarCssClass();
    public void set_StarCssClass(string value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_FilledStarCssClass();
    public void set_FilledStarCssClass(string value);
    public string get_EmptyStarCssClass();
    public void set_EmptyStarCssClass(string value);
    public string get_WaitingStarCssClass();
    public void set_WaitingStarCssClass(string value);
}
public class AjaxControlToolkit.Redo : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.RemoveFormat : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public enum AjaxControlToolkit.ReorderHandleAlignment : Enum {
    public int value__;
    public static ReorderHandleAlignment Top;
    public static ReorderHandleAlignment Left;
    public static ReorderHandleAlignment Right;
    public static ReorderHandleAlignment Bottom;
}
[DesignerAttribute("AjaxControlToolkit.Design.ReorderListDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ReorderList.bmp")]
public class AjaxControlToolkit.ReorderList : CompositeDataBoundControl {
    private static object ItemCommandKey;
    private static object CancelCommandKey;
    private static object EditCommandKey;
    private static object DeleteCommandKey;
    private static object UpdateCommandKey;
    private static object InsertCommandKey;
    private static object ItemDataBoundKey;
    private static object ItemCreatedKey;
    private static object ItemReorderKey;
    private static object KeysKey;
    private BulletedList _childList;
    private Control _dropTemplateControl;
    private ITemplate _reorderTemplate;
    private ITemplate _itemTemplate;
    private ITemplate _editItemTemplate;
    private ITemplate _insertItemTemplate;
    private ITemplate _dragHandleTemplate;
    private ITemplate _emptyListTemplate;
    private List`1<DraggableListItemInfo> _draggableItems;
    private DropWatcherExtender _dropWatcherExtender;
    private ArrayList itemsArray;
    private static string ArgReplace;
    private static string ArgContext;
    private static string ArgSuccess;
    private static string ArgError;
    private ReorderListItemLayoutType _layoutType;
    private string _callbackResult;
    [DefaultValueAttribute("False")]
public bool AllowReorder { get; public set; }
    private IOrderedDictionary BoundFieldValues { get; }
    [DefaultValueAttribute("")]
public string CallbackCssStyle { get; public set; }
    internal BulletedList ChildList { get; }
    [DefaultValueAttribute("")]
public string DataKeyField { get; public set; }
    [BrowsableAttribute("False")]
public DataKeyCollection DataKeys { get; }
    private bool DataBindPending { get; }
    protected ArrayList DataKeysArray { get; }
    [TypeConverterAttribute("AjaxControlToolkit.Design.TypedControlIDConverter`1<System.Web.UI.IDataSource>")]
public string DataSourceID { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ReorderHandleAlignment DragHandleAlignment { get; public set; }
    [BrowsableAttribute("False")]
[TemplateContainerAttribute("AjaxControlToolkit.ReorderListItem")]
[PersistenceModeAttribute]
[DefaultValueAttribute("")]
public ITemplate DragHandleTemplate { get; public set; }
    [BrowsableAttribute("False")]
[TemplateContainerAttribute("AjaxControlToolkit.ReorderListItem")]
[PersistenceModeAttribute]
[DefaultValueAttribute("")]
public ITemplate EmptyListTemplate { get; public set; }
    [DefaultValueAttribute("-1")]
public int EditItemIndex { get; public set; }
    [BrowsableAttribute("False")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
[PersistenceModeAttribute]
[DefaultValueAttribute("")]
public ITemplate EditItemTemplate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ReorderListInsertLocation ItemInsertLocation { get; public set; }
    [BrowsableAttribute("False")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
[PersistenceModeAttribute]
[DefaultValueAttribute("")]
public ITemplate InsertItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
[PersistenceModeAttribute]
[DefaultValueAttribute("")]
public ITemplate ItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
public ReorderListItemCollection Items { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ReorderListItemLayoutType LayoutType { get; public set; }
    [DefaultValueAttribute("true")]
public bool PostBackOnReorder { get; public set; }
    [DefaultValueAttribute("")]
public string SortOrderField { get; public set; }
    [BrowsableAttribute("False")]
[TemplateContainerAttribute("AjaxControlToolkit.ReorderListItem")]
[PersistenceModeAttribute]
[DefaultValueAttribute("")]
public ITemplate ReorderTemplate { get; public set; }
    [DefaultValueAttribute("False")]
public bool ShowInsertItem { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    public bool HasFooter { get; }
    public bool HasHeader { get; }
    public bool HasSeparators { get; }
    public int RepeatedItemCount { get; }
    private string CallbackResult { get; private set; }
    private static ReorderList();
    public void add_ItemCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void remove_ItemCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void add_CancelCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void remove_CancelCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void add_DeleteCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void remove_DeleteCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void add_EditCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void remove_EditCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void add_InsertCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void remove_InsertCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void add_UpdateCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void remove_UpdateCommand(EventHandler`1<ReorderListCommandEventArgs> value);
    public void add_ItemDataBound(EventHandler`1<ReorderListItemEventArgs> value);
    public void remove_ItemDataBound(EventHandler`1<ReorderListItemEventArgs> value);
    public void add_ItemCreated(EventHandler`1<ReorderListItemEventArgs> value);
    public void remove_ItemCreated(EventHandler`1<ReorderListItemEventArgs> value);
    public void add_ItemReorder(EventHandler`1<ReorderListItemReorderEventArgs> value);
    public void remove_ItemReorder(EventHandler`1<ReorderListItemReorderEventArgs> value);
    public bool get_AllowReorder();
    public void set_AllowReorder(bool value);
    private IOrderedDictionary get_BoundFieldValues();
    public string get_CallbackCssStyle();
    public void set_CallbackCssStyle(string value);
    internal BulletedList get_ChildList();
    public string get_DataKeyField();
    public void set_DataKeyField(string value);
    public DataKeyCollection get_DataKeys();
    private bool get_DataBindPending();
    protected ArrayList get_DataKeysArray();
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    public ReorderHandleAlignment get_DragHandleAlignment();
    public void set_DragHandleAlignment(ReorderHandleAlignment value);
    public ITemplate get_DragHandleTemplate();
    public void set_DragHandleTemplate(ITemplate value);
    public ITemplate get_EmptyListTemplate();
    public void set_EmptyListTemplate(ITemplate value);
    public int get_EditItemIndex();
    public void set_EditItemIndex(int value);
    public ITemplate get_EditItemTemplate();
    public void set_EditItemTemplate(ITemplate value);
    public ReorderListInsertLocation get_ItemInsertLocation();
    public void set_ItemInsertLocation(ReorderListInsertLocation value);
    public ITemplate get_InsertItemTemplate();
    public void set_InsertItemTemplate(ITemplate value);
    public ITemplate get_ItemTemplate();
    public void set_ItemTemplate(ITemplate value);
    public ReorderListItemCollection get_Items();
    public ReorderListItemLayoutType get_LayoutType();
    public void set_LayoutType(ReorderListItemLayoutType value);
    public bool get_PostBackOnReorder();
    public void set_PostBackOnReorder(bool value);
    public string get_SortOrderField();
    public void set_SortOrderField(string value);
    public ITemplate get_ReorderTemplate();
    public void set_ReorderTemplate(ITemplate value);
    public bool get_ShowInsertItem();
    public void set_ShowInsertItem(bool value);
    protected virtual HtmlTextWriterTag get_TagKey();
    private static IDictionary CopyDictionary(IDictionary source, IDictionary dest);
    private void ClearChildren();
    protected virtual int CreateChildControls(IEnumerable dataSource, bool dataBinding);
    private Control CreateReorderArea(int index, string reorderKey);
    protected virtual ReorderListItem CreateInsertItem(int index);
    protected virtual void CreateDragHandle(ReorderListItem item);
    protected virtual ReorderListItem CreateItem(int index, bool dataBind, object dataItem, ListItemType itemType, bool hasDragHandle);
    protected virtual bool DoReorder(int oldIndex, int newIndex);
    private bool DoReorderInternal(DataTable dataSource, int oldIndex, int newIndex);
    private bool DoReorderInternal(IEnumerable dataSource, int oldIndex, int newIndex, DataSourceView dsv);
    protected virtual void OnPreRender(EventArgs e);
    private void ExtractRowValues(IOrderedDictionary fieldValues, ReorderListItem item, bool includePrimaryKey, bool isAddOperation);
    protected WebControl GetDropTemplateControl(Control& dropItem, Control& emptyItem);
    private int GetNewItemSortValue(Boolean& success);
    private void HandleCancel(ReorderListCommandEventArgs e);
    private void HandleDelete(ReorderListCommandEventArgs e);
    private void HandleEdit(ReorderListCommandEventArgs e);
    private void HandleInsert(ReorderListCommandEventArgs e);
    private void HandleUpdate(ReorderListCommandEventArgs e, int itemIndex);
    private static void MoveChildren(Control source, Control dest);
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    protected virtual void OnItemCreated(EventArgs e);
    protected virtual void OnItemDataBound(EventArgs e);
    protected virtual void OnItemCommand(EventArgs e);
    protected virtual void OnItemReorder(ReorderListItemReorderEventArgs e);
    protected virtual void OnCancelCommand(EventArgs e);
    protected virtual void OnDeleteCommand(EventArgs e);
    protected virtual void OnEditCommand(EventArgs e);
    protected virtual void OnInsertCommand(EventArgs e);
    protected virtual void OnUpdateCommand(EventArgs e);
    protected void Invoke(object key, EventArgs e);
    protected virtual void PerformDataBinding(IEnumerable data);
    private void PrepareRowValues(ReorderListCommandEventArgs e, IDictionary& oldValues, IOrderedDictionary& newValues, IDictionary& keys);
    private void PrepareRowValues(ReorderListCommandEventArgs e, IDictionary& oldValues, IOrderedDictionary& newValues, IDictionary& keys, bool isAddOperation);
    private void ProcessReorder(int oldIndex, int newIndex);
    protected virtual void RenderContents(HtmlTextWriter writer);
    public void UpdateItem(int rowIndex);
    public sealed virtual Style GetItemStyle(ListItemType itemType, int repeatIndex);
    public sealed virtual bool get_HasFooter();
    public sealed virtual bool get_HasHeader();
    public sealed virtual bool get_HasSeparators();
    public sealed virtual void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
    private ReorderListItem GetItem(ListItemType itemType, int repeatIndex);
    public sealed virtual int get_RepeatedItemCount();
    private static bool ParsePostBack(string eventArgument, String& eventName, String& itemId, String[]& args);
    protected void RaisePostBackEvent(string eventArgument);
    private string get_CallbackResult();
    private void set_CallbackResult(string value);
    private sealed virtual override string System.Web.UI.ICallbackEventHandler.GetCallbackResult();
    private sealed virtual override void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected V GetPropertyValue(string propertyName, V nullValue);
    protected void SetPropertyValue(string propertyName, V value);
}
public class AjaxControlToolkit.ReorderListCommandEventArgs : CommandEventArgs {
    private ReorderListItem _item;
    private object _source;
    public ReorderListItem Item { get; public set; }
    public object Source { get; public set; }
    internal ReorderListCommandEventArgs(CommandEventArgs ce, object source, ReorderListItem item);
    public ReorderListItem get_Item();
    public void set_Item(ReorderListItem value);
    public object get_Source();
    public void set_Source(object value);
}
public enum AjaxControlToolkit.ReorderListInsertLocation : Enum {
    public int value__;
    public static ReorderListInsertLocation Beginning;
    public static ReorderListInsertLocation End;
}
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.ReorderListItem : WebControl {
    private object _dataItem;
    private ReorderListItem _baseItem;
    private HtmlTextWriterTag _tag;
    private int _itemIndex;
    private ListItemType _itemType;
    private bool _isAddItem;
    internal static string ItemBaseName;
    public ListItemType ItemType { get; public set; }
    public object DataItem { get; public set; }
    public int ItemIndex { get; public set; }
    public bool IsAddItem { get; }
    protected HtmlTextWriterTag TagKey { get; }
    public int DataItemIndex { get; }
    public int DisplayIndex { get; }
    internal ReorderListItem(ReorderListItem baseItem, HtmlTextWriterTag tag);
    public ReorderListItem(int index);
    public ReorderListItem(int index, bool isAddItem);
    public ReorderListItem(object dataItem, int index, ListItemType itemType);
    public ListItemType get_ItemType();
    public void set_ItemType(ListItemType value);
    public sealed virtual object get_DataItem();
    public void set_DataItem(object value);
    public int get_ItemIndex();
    public void set_ItemIndex(int value);
    public bool get_IsAddItem();
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    public sealed virtual int get_DataItemIndex();
    public sealed virtual int get_DisplayIndex();
}
[DefaultMemberAttribute("Item")]
public class AjaxControlToolkit.ReorderListItemCollection : object {
    private ReorderList _parent;
    private ControlCollection ChildList { get; }
    public ReorderListItem Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ReorderListItemCollection(ReorderList parent);
    private ControlCollection get_ChildList();
    public sealed virtual int IndexOf(ReorderListItem item);
    public sealed virtual void Insert(int index, ReorderListItem item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ReorderListItem get_Item(int index);
    public sealed virtual void set_Item(int index, ReorderListItem value);
    public sealed virtual void Add(ReorderListItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ReorderListItem item);
    public sealed virtual void CopyTo(ReorderListItem[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ReorderListItem item);
    public sealed virtual IEnumerator`1<ReorderListItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class AjaxControlToolkit.ReorderListItemEventArgs : EventArgs {
    private ReorderListItem _item;
    public ReorderListItem Item { get; public set; }
    public ReorderListItemEventArgs(ReorderListItem item);
    public ReorderListItem get_Item();
    public void set_Item(ReorderListItem value);
}
public enum AjaxControlToolkit.ReorderListItemLayoutType : Enum {
    public int value__;
    public static ReorderListItemLayoutType User;
    public static ReorderListItemLayoutType Table;
}
public class AjaxControlToolkit.ReorderListItemReorderEventArgs : ReorderListItemEventArgs {
    private int _oldIndex;
    private int _newIndex;
    public int OldIndex { get; public set; }
    public int NewIndex { get; public set; }
    internal ReorderListItemReorderEventArgs(ReorderListItem item, int oldIndex, int newIndex);
    public int get_OldIndex();
    public void set_OldIndex(int value);
    public int get_NewIndex();
    public void set_NewIndex(int value);
}
public enum AjaxControlToolkit.RepeatDirection : Enum {
    public int value__;
    public static RepeatDirection Vertical;
    public static RepeatDirection Horizontal;
}
[AttributeUsageAttribute("128")]
public class AjaxControlToolkit.RequiredPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class AjaxControlToolkit.RequiredScriptAttribute : Attribute {
    private int _order;
    private Type _extenderType;
    public int LoadOrder { get; }
    public Type ExtenderType { get; }
    public RequiredScriptAttribute(Type extenderType);
    public RequiredScriptAttribute(Type extenderType, int loadOrder);
    public int get_LoadOrder();
    public Type get_ExtenderType();
}
[DesignerAttribute("AjaxControlToolkit.Design.ResizableControlExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ResizableControlBehavior", "ResizableControl")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ResizableControl.bmp")]
public class AjaxControlToolkit.ResizableControlExtender : ExtenderControlBase {
    private static int MaximumValue;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[RequiredPropertyAttribute]
[ClientPropertyNameAttribute("handleCssClass")]
public string HandleCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("resizableCssClass")]
public string ResizableCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("handleOffsetX")]
public int HandleOffsetX { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("handleOffsetY")]
public int HandleOffsetY { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimumWidth")]
public int MinimumWidth { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimumHeight")]
public int MinimumHeight { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("100000")]
[ClientPropertyNameAttribute("maximumWidth")]
public int MaximumWidth { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("100000")]
[ClientPropertyNameAttribute("maximumHeight")]
public int MaximumHeight { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("resize")]
public string OnClientResize { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("resizing")]
public string OnClientResizing { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("resizeBegin")]
public string OnClientResizeBegin { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("size")]
public Size Size { get; public set; }
    public string get_HandleCssClass();
    public void set_HandleCssClass(string value);
    public string get_ResizableCssClass();
    public void set_ResizableCssClass(string value);
    public int get_HandleOffsetX();
    public void set_HandleOffsetX(int value);
    public int get_HandleOffsetY();
    public void set_HandleOffsetY(int value);
    public int get_MinimumWidth();
    public void set_MinimumWidth(int value);
    public int get_MinimumHeight();
    public void set_MinimumHeight(int value);
    public int get_MaximumWidth();
    public void set_MaximumWidth(int value);
    public int get_MaximumHeight();
    public void set_MaximumHeight(int value);
    public string get_OnClientResize();
    public void set_OnClientResize(string value);
    public string get_OnClientResizing();
    public void set_OnClientResizing(string value);
    public string get_OnClientResizeBegin();
    public void set_OnClientResizeBegin(string value);
    public virtual void EnsureValid();
    public Size get_Size();
    public void set_Size(Size value);
}
public class AjaxControlToolkit.ResolveControlEventArgs : EventArgs {
    private string _controlID;
    private Control _control;
    public string ControlID { get; }
    public Control Control { get; public set; }
    public ResolveControlEventArgs(string controlId);
    public string get_ControlID();
    public Control get_Control();
    public void set_Control(Control value);
}
public class AjaxControlToolkit.ResolveControlEventHandler : MulticastDelegate {
    public ResolveControlEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResolveControlEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResolveControlEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerAttribute("AjaxControlToolkit.Design.RoundedCornersExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.RoundedCornersBehavior", "RoundedCorners")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.WebControl")]
[TargetControlTypeAttribute("System.Web.UI.HtmlControls.HtmlControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "RoundedCorners.bmp")]
public class AjaxControlToolkit.RoundedCornersExtender : ExtenderControlBase {
    [DefaultValueAttribute("5")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("radius")]
public int Radius { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("corners")]
public BoxCorners Corners { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("color")]
public Color Color { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("borderColor")]
public Color BorderColor { get; public set; }
    public int get_Radius();
    public void set_Radius(int value);
    public BoxCorners get_Corners();
    public void set_Corners(BoxCorners value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
}
public class AjaxControlToolkit.ScriptComponentDescriptorWrapper : object {
    private ScriptComponentDescriptor _descriptor;
    public string ClientID { get; }
    public string ID { get; public set; }
    public string Type { get; public set; }
    public ScriptComponentDescriptorWrapper(ScriptComponentDescriptor descriptor);
    public sealed virtual string get_ClientID();
    public sealed virtual string get_ID();
    public sealed virtual void set_ID(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual void AddComponentProperty(string name, string componentID);
    public sealed virtual void AddElementProperty(string name, string elementID);
    public sealed virtual void AddEvent(string name, string handler);
    public sealed virtual void AddProperty(string name, object value);
    public void AddScriptProperty(string name, string script);
}
[ClientScriptResourceAttribute("", "BaseScripts")]
public class AjaxControlToolkit.ScriptControlBase : ScriptControl {
    private HtmlTextWriterTag _tagKey;
    private bool _enableClientState;
    private string _cachedClientStateFieldID;
    private string _callbackArgument;
    private ScriptManager _scriptManager;
    private bool _renderingScript;
    public bool IsRenderingScript { get; }
    protected bool SupportsClientState { get; }
    protected HtmlTextWriterTag TagKey { get; }
    protected string ClientStateFieldID { get; }
    protected string ClientControlType { get; }
    protected ScriptManager ScriptManager { get; }
    private bool AjaxControlToolkit.IClientStateManager.SupportsClientState { get; }
    public ScriptControlBase(HtmlTextWriterTag tag);
    protected ScriptControlBase(bool enableClientState, HtmlTextWriterTag tag);
    public bool get_IsRenderingScript();
    protected virtual bool get_SupportsClientState();
    protected virtual string SaveClientState();
    protected virtual HtmlTextWriterTag get_TagKey();
    protected string get_ClientStateFieldID();
    protected virtual string get_ClientControlType();
    protected ScriptManager get_ScriptManager();
    public virtual Control FindControl(string id);
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    private void EnsureScriptManager();
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual void LoadClientState(string clientState);
    protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    public sealed virtual Control ResolveControl(string controlId);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    private sealed virtual override string System.Web.UI.ICallbackEventHandler.GetCallbackResult();
    protected virtual string GetCallbackResult();
    private string ExecuteCallbackMethod(string callbackArgument);
    private sealed virtual override void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument);
    protected virtual void RaiseCallbackEvent(string eventArgument);
    private sealed virtual override bool AjaxControlToolkit.IClientStateManager.get_SupportsClientState();
    private sealed virtual override void AjaxControlToolkit.IClientStateManager.LoadClientState(string clientState);
    private sealed virtual override string AjaxControlToolkit.IClientStateManager.SaveClientState();
}
[ClientScriptResourceAttribute("Sys.Extended.UI.Seadragon.Viewer", "Seadragon")]
[ToolboxDataAttribute("<{0}:Seadragon runat=server></{0}:Seadragon>")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Seadragon.bmp")]
public class AjaxControlToolkit.Seadragon : ScriptControlBase {
    private List`1<SeadragonControl> _controls;
    private List`1<SeadragonOverlay> _overlays;
    private ArrayList _controlsDescriptor;
    private ArrayList _overlaysDescriptor;
    private String[] _imageNames;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("1,5")]
[ClientPropertyNameAttribute("animationTime")]
public float AnimationTime { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("showNavigationControl")]
public bool ShowNavigationControl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0,5")]
[ClientPropertyNameAttribute("blendTime")]
public float BlendTime { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("alwaysBlend")]
public bool AlwaysBlend { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("autoHideControls")]
public bool AutoHideControls { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("immediateRender")]
public bool ImmediateRender { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("wrapHorizontal")]
public bool WrapHorizontal { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("wrapVertical")]
public bool WrapVertical { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0,8")]
[ClientPropertyNameAttribute("minZoomDimension")]
public float MinZoomDimension { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("2")]
[ClientPropertyNameAttribute("maxZoomPixelRatio")]
public float MaxZoomPixelRatio { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0,5")]
[ClientPropertyNameAttribute("visibilityRatio")]
public float VisibilityRatio { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("5")]
[ClientPropertyNameAttribute("springStiffness")]
public float SpringStiffness { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("2")]
[ClientPropertyNameAttribute("imageLoaderLimit")]
public int ImageLoaderLimit { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("200")]
[ClientPropertyNameAttribute("clickTimeThreshold")]
public int ClickTimeThreshold { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("2")]
[ClientPropertyNameAttribute("clickDistThreshold")]
public int clickDistThreshold { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("2")]
[ClientPropertyNameAttribute("zoomPerClick")]
public float ZoomPerClick { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("2")]
[ClientPropertyNameAttribute("zoomPerSecond")]
public float ZoomPerSecond { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("100")]
[ClientPropertyNameAttribute("maxImageCacheCount")]
public int MaxImageCacheCount { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0,5")]
[ClientPropertyNameAttribute("minPixelRatio")]
public float MinPixelRatio { get; public set; }
    [ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("open")]
[DefaultValueAttribute("")]
public string OnClientOpen { get; public set; }
    [ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("error")]
[DefaultValueAttribute("")]
public string OnClientError { get; public set; }
    [ExtenderControlEventAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("ignore")]
public string OnClientIgnore { get; public set; }
    [ExtenderControlEventAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("resize")]
public string OnClientResize { get; public set; }
    [ExtenderControlEventAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("animationstart")]
public string OnClientAnimationStart { get; public set; }
    [ExtenderControlEventAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("animationend")]
public string OnClientAnimationEnd { get; public set; }
    [ExtenderControlEventAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("animation")]
public string OnClientAnimation { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("mouseNavEnabled")]
public bool MouseNavEnabled { get; public set; }
    [EditorAttribute("AjaxControlToolkit.SeadragonUrlEditor", "System.Drawing.Design.UITypeEditor")]
public string SourceUrl { get; public set; }
    [PersistenceModeAttribute]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public List`1<SeadragonControl> ControlsCollection { get; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [PersistenceModeAttribute]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("AjaxControlToolkit.OverlayCollectionEditor", "System.Drawing.Design.UITypeEditor")]
public List`1<SeadragonOverlay> OverlaysCollection { get; }
    protected HtmlTextWriterTag TagKey { get; }
    public float get_AnimationTime();
    public void set_AnimationTime(float value);
    public bool get_ShowNavigationControl();
    public void set_ShowNavigationControl(bool value);
    public float get_BlendTime();
    public void set_BlendTime(float value);
    public bool get_AlwaysBlend();
    public void set_AlwaysBlend(bool value);
    public bool get_AutoHideControls();
    public void set_AutoHideControls(bool value);
    public bool get_ImmediateRender();
    public void set_ImmediateRender(bool value);
    public bool get_WrapHorizontal();
    public void set_WrapHorizontal(bool value);
    public bool get_WrapVertical();
    public void set_WrapVertical(bool value);
    public float get_MinZoomDimension();
    public void set_MinZoomDimension(float value);
    public float get_MaxZoomPixelRatio();
    public void set_MaxZoomPixelRatio(float value);
    public float get_VisibilityRatio();
    public void set_VisibilityRatio(float value);
    public float get_SpringStiffness();
    public void set_SpringStiffness(float value);
    public int get_ImageLoaderLimit();
    public void set_ImageLoaderLimit(int value);
    public int get_ClickTimeThreshold();
    public void set_ClickTimeThreshold(int value);
    public int get_clickDistThreshold();
    public void set_clickDistThreshold(int value);
    public float get_ZoomPerClick();
    public void set_ZoomPerClick(float value);
    public float get_ZoomPerSecond();
    public void set_ZoomPerSecond(float value);
    public int get_MaxImageCacheCount();
    public void set_MaxImageCacheCount(int value);
    public float get_MinPixelRatio();
    public void set_MinPixelRatio(float value);
    public string get_OnClientOpen();
    public void set_OnClientOpen(string value);
    public string get_OnClientError();
    public void set_OnClientError(string value);
    public string get_OnClientIgnore();
    public void set_OnClientIgnore(string value);
    public string get_OnClientResize();
    public void set_OnClientResize(string value);
    public string get_OnClientAnimationStart();
    public void set_OnClientAnimationStart(string value);
    public string get_OnClientAnimationEnd();
    public void set_OnClientAnimationEnd(string value);
    public string get_OnClientAnimation();
    public void set_OnClientAnimation(string value);
    public bool get_MouseNavEnabled();
    public void set_MouseNavEnabled(bool value);
    public string get_SourceUrl();
    public void set_SourceUrl(string value);
    public List`1<SeadragonControl> get_ControlsCollection();
    public virtual ControlCollection get_Controls();
    protected virtual ControlCollection CreateControlCollection();
    public List`1<SeadragonOverlay> get_OverlaysCollection();
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void CreateChildControls();
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    protected V GetPropertyValue(string propertyName, V nullValue);
    protected void SetPropertyValue(string propertyName, V value);
    protected virtual void OnPreRender(EventArgs e);
}
[ToolboxItemAttribute("False")]
[ToolboxDataAttribute("<{0}:SeadragonControl runat="server"></{0}:SeadragonControl>")]
public class AjaxControlToolkit.SeadragonControl : Panel {
    private ControlAnchor _anchor;
    public ControlAnchor Anchor { get; public set; }
    public SeadragonControl(Control ctl, ControlAnchor anchor);
    public ControlAnchor get_Anchor();
    public void set_Anchor(ControlAnchor value);
}
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.SeadragonFixedOverlay : SeadragonOverlay {
    private SeadragonPoint point;
    [DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public SeadragonPoint Point { get; }
    public SeadragonPoint get_Point();
}
[ToolboxDataAttribute("<{0}:SeadragonOverlay runat=server></{0}:SeadragonOverlay>")]
public abstract class AjaxControlToolkit.SeadragonOverlay : Panel {
    [CompilerGeneratedAttribute]
private SeadragonOverlayPlacement <Placement>k__BackingField;
    public SeadragonOverlayPlacement Placement { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [CompilerGeneratedAttribute]
public virtual SeadragonOverlayPlacement get_Placement();
    [CompilerGeneratedAttribute]
public virtual void set_Placement(SeadragonOverlayPlacement value);
    protected virtual HtmlTextWriterTag get_TagKey();
}
public enum AjaxControlToolkit.SeadragonOverlayPlacement : Enum {
    public int value__;
    public static SeadragonOverlayPlacement Center;
    public static SeadragonOverlayPlacement TopLeft;
    public static SeadragonOverlayPlacement Top;
    public static SeadragonOverlayPlacement TopRight;
    public static SeadragonOverlayPlacement Right;
    public static SeadragonOverlayPlacement BottomRight;
    public static SeadragonOverlayPlacement Bottom;
    public static SeadragonOverlayPlacement BottomLeft;
    public static SeadragonOverlayPlacement Left;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class AjaxControlToolkit.SeadragonPoint : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public SeadragonPoint(float x, float y);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class AjaxControlToolkit.SeadragonRect : object {
    private SeadragonPoint point;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    public float Height { get; public set; }
    public float Width { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public SeadragonPoint Point { get; }
    public SeadragonRect(float width, float height);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    public SeadragonPoint get_Point();
}
[ToolboxItemAttribute("False")]
public class AjaxControlToolkit.SeadragonScalableOverlay : SeadragonOverlay {
    private SeadragonRect rect;
    [DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public SeadragonRect Rect { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SeadragonOverlayPlacement Placement { get; public set; }
    public SeadragonRect get_Rect();
    public sealed virtual SeadragonOverlayPlacement get_Placement();
    public sealed virtual void set_Placement(SeadragonOverlayPlacement value);
}
public class AjaxControlToolkit.SeadragonUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class AjaxControlToolkit.SelectAll : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.ServicePathConverter : StringConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class AjaxControlToolkit.Slide : object {
    private string _imagePath;
    private string _name;
    private string _description;
    private string _url;
    public string ImagePath { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string Url { get; public set; }
    public Slide(string imagePath, string name, string description);
    public Slide(string imagePath, string name, string description, string url);
    public string get_ImagePath();
    public void set_ImagePath(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Url();
    public void set_Url(string value);
}
[DesignerAttribute("AjaxControlToolkit.Design.SliderDesigner")]
[ClientCssResourceAttribute("Slider")]
[ClientScriptResourceAttribute("Sys.Extended.UI.SliderBehavior", "Slider")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.DragDropScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Slider.bmp")]
public class AjaxControlToolkit.SliderExtender : ExtenderControlBase {
    private String[] _imageNames;
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("minimum")]
public double Minimum { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("100")]
[ClientPropertyNameAttribute("maximum")]
public double Maximum { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("railCssClass")]
public string RailCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[UrlPropertyAttribute]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ClientPropertyNameAttribute("handleImageUrl")]
public string HandleImageUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("handleCssClass")]
public string HandleCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("enableHandleAnimation")]
public bool EnableHandleAnimation { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("steps")]
public int Steps { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("orientation")]
public SliderOrientation Orientation { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("decimals")]
public int Decimals { get; public set; }
    [ExtenderControlPropertyAttribute]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("boundControlID")]
public string BoundControlID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("150")]
[ClientPropertyNameAttribute("length")]
public int Length { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("raiseChangeOnlyOnMouseUp")]
public bool RaiseChangeOnlyOnMouseUp { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("tooltipText")]
public string TooltipText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("True")]
[ClientPropertyNameAttribute("enableKeyboard")]
[DescriptionAttribute("Determines if the slider will respond to arrow keys when it has focus.")]
public bool EnableKeyboard { get; public set; }
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public string get_RailCssClass();
    public void set_RailCssClass(string value);
    public string get_HandleImageUrl();
    public void set_HandleImageUrl(string value);
    public string get_HandleCssClass();
    public void set_HandleCssClass(string value);
    public bool get_EnableHandleAnimation();
    public void set_EnableHandleAnimation(bool value);
    public int get_Steps();
    public void set_Steps(int value);
    public SliderOrientation get_Orientation();
    public void set_Orientation(SliderOrientation value);
    public int get_Decimals();
    public void set_Decimals(int value);
    public string get_BoundControlID();
    public void set_BoundControlID(string value);
    public int get_Length();
    public void set_Length(int value);
    public bool get_RaiseChangeOnlyOnMouseUp();
    public void set_RaiseChangeOnlyOnMouseUp(bool value);
    public string get_TooltipText();
    public void set_TooltipText(string value);
    public bool get_EnableKeyboard();
    public void set_EnableKeyboard(bool value);
    protected virtual void OnLoad(EventArgs e);
}
public enum AjaxControlToolkit.SliderOrientation : Enum {
    public int value__;
    public static SliderOrientation Horizontal;
    public static SliderOrientation Vertical;
}
public enum AjaxControlToolkit.SlideShowAnimationType : Enum {
    public int value__;
    public static SlideShowAnimationType None;
    public static SlideShowAnimationType FadeInOut;
    public static SlideShowAnimationType ScaleX;
    public static SlideShowAnimationType ScaleY;
    public static SlideShowAnimationType ZoomInOut;
    public static SlideShowAnimationType Rotate;
    public static SlideShowAnimationType SlideRight;
    public static SlideShowAnimationType SlideDown;
}
[DesignerAttribute("AjaxControlToolkit.Design.SlideShowExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.SlideShowBehavior", "SlideShow")]
[ClientCssResourceAttribute("SlideShow")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.Image")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.TimerScript")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "SlideShow.bmp")]
public class AjaxControlToolkit.SlideShowExtender : ExtenderControlBase {
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("slideShowServiceMethod")]
public string SlideShowServiceMethod { get; public set; }
    [UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[TypeConverterAttribute("AjaxControlToolkit.ServicePathConverter")]
[ClientPropertyNameAttribute("slideShowServicePath")]
public string SlideShowServicePath { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("contextKey")]
[DefaultValueAttribute("")]
public string ContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("useContextKey")]
[DefaultValueAttribute("False")]
public bool UseContextKey { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("nextButtonID")]
public string NextButtonID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("playButtonID")]
public string PlayButtonID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("playButtonText")]
public string PlayButtonText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("stopButtonText")]
public string StopButtonText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("3000")]
[ClientPropertyNameAttribute("playInterval")]
public int PlayInterval { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("imageTitleLabelID")]
public string ImageTitleLabelID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("imageDescriptionLabelID")]
public string ImageDescriptionLabelID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.WebControl")]
[ClientPropertyNameAttribute("previousButtonID")]
public string PreviousButtonID { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("loop")]
public bool Loop { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("False")]
[ClientPropertyNameAttribute("autoPlay")]
public bool AutoPlay { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ClientPropertyNameAttribute("slideShowAnimationType")]
public SlideShowAnimationType SlideShowAnimationType { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("400")]
[BrowsableAttribute("False")]
[ClientPropertyNameAttribute("imageWidth")]
public int ImageWidth { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("300")]
[BrowsableAttribute("False")]
[ClientPropertyNameAttribute("imageHeight")]
public int ImageHeight { get; public set; }
    public string get_SlideShowServiceMethod();
    public void set_SlideShowServiceMethod(string value);
    public string get_SlideShowServicePath();
    public void set_SlideShowServicePath(string value);
    public string get_ContextKey();
    public void set_ContextKey(string value);
    public bool get_UseContextKey();
    public void set_UseContextKey(bool value);
    public string get_NextButtonID();
    public void set_NextButtonID(string value);
    public string get_PlayButtonID();
    public void set_PlayButtonID(string value);
    public string get_PlayButtonText();
    public void set_PlayButtonText(string value);
    public string get_StopButtonText();
    public void set_StopButtonText(string value);
    public int get_PlayInterval();
    public void set_PlayInterval(int value);
    public string get_ImageTitleLabelID();
    public void set_ImageTitleLabelID(string value);
    public string get_ImageDescriptionLabelID();
    public void set_ImageDescriptionLabelID(string value);
    public string get_PreviousButtonID();
    public void set_PreviousButtonID(string value);
    public bool get_Loop();
    public void set_Loop(bool value);
    public bool get_AutoPlay();
    public void set_AutoPlay(bool value);
    public SlideShowAnimationType get_SlideShowAnimationType();
    public void set_SlideShowAnimationType(SlideShowAnimationType value);
    public int get_ImageWidth();
    public void set_ImageWidth(int value);
    public int get_ImageHeight();
    public void set_ImageHeight(int value);
    protected virtual void OnInit(EventArgs e);
}
public enum AjaxControlToolkit.StrengthIndicatorTypes : Enum {
    public int value__;
    public static StrengthIndicatorTypes Text;
    public static StrengthIndicatorTypes BarIndicator;
}
public class AjaxControlToolkit.StrikeThrough : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.Subscript : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.Superscript : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
[DesignerAttribute("AjaxControlToolkit.Design.TabContainerDesigner")]
[ParseChildrenAttribute("AjaxControlToolkit.TabPanel")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[ClientCssResourceAttribute("Tabs")]
[ClientScriptResourceAttribute("Sys.Extended.UI.TabContainer", "Tabs")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Tabs.bmp")]
public class AjaxControlToolkit.TabContainer : ScriptControlBase {
    private static object EventActiveTabChanged;
    private int _activeTabIndex;
    private int _cachedActiveTabIndex;
    private bool _initialized;
    private bool _autoPostBack;
    private TabStripPlacement _tabStripPlacement;
    private bool _useVerticalStripPlacement;
    private Unit _verticalStripWidth;
    private bool _onDemand;
    private TabCssTheme _cssTheme;
    [DefaultValueAttribute("-1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("activeTabIndex")]
public int ActiveTabIndexForClient { get; }
    [DefaultValueAttribute("-1")]
[CategoryAttribute("Behavior")]
public int ActiveTabIndex { get; public set; }
    private int LastActiveTabIndex { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TabPanelCollection Tabs { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TabPanel ActiveTab { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool AutoPostBack { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[CategoryAttribute("Appearance")]
public Unit Height { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[CategoryAttribute("Appearance")]
public Unit Width { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Appearance")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cssTheme")]
public TabCssTheme CssTheme { get; public set; }
    [DefaultValueAttribute]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("scrollBars")]
public ScrollBars ScrollBars { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Appearance")]
[ClientPropertyNameAttribute("tabStripPlacement")]
public TabStripPlacement TabStripPlacement { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("activeTabChanged")]
public string OnClientActiveTabChanged { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("autoPostBackId")]
public string UniqueID { get; public set; }
    [DescriptionAttribute("Change tab header placement vertically when value set to true")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Appearance")]
[ClientPropertyNameAttribute("useVerticalStripPlacement")]
public bool UseVerticalStripPlacement { get; public set; }
    [DescriptionAttribute("Set width of tab strips when UseVerticalStripPlacement is set to true. Size must be in pixel")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "120px")]
[CategoryAttribute("Appearance")]
public Unit VerticalStripWidth { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ClientPropertyNameAttribute("onDemand")]
public bool OnDemand { get; public set; }
    private static TabContainer();
    public void add_ActiveTabChanged(EventHandler value);
    public void remove_ActiveTabChanged(EventHandler value);
    public int get_ActiveTabIndexForClient();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeActiveTabIndexForClient();
    public virtual int get_ActiveTabIndex();
    public virtual void set_ActiveTabIndex(int value);
    private int get_LastActiveTabIndex();
    private void set_LastActiveTabIndex(int value);
    public TabPanelCollection get_Tabs();
    public TabPanel get_ActiveTab();
    public void set_ActiveTab(TabPanel value);
    public bool get_AutoPostBack();
    public void set_AutoPostBack(bool value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public TabCssTheme get_CssTheme();
    public void set_CssTheme(TabCssTheme value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public TabStripPlacement get_TabStripPlacement();
    public void set_TabStripPlacement(TabStripPlacement value);
    public string get_OnClientActiveTabChanged();
    public void set_OnClientActiveTabChanged(string value);
    public string get_UniqueID();
    public void set_UniqueID(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeUniqueID();
    public bool get_UseVerticalStripPlacement();
    public void set_UseVerticalStripPlacement(bool value);
    public Unit get_VerticalStripWidth();
    public void set_VerticalStripWidth(Unit value);
    public bool get_OnDemand();
    public void set_OnDemand(bool value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnActiveTabChanged(EventArgs e);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual void AddedControl(Control control, int index);
    protected virtual void RemovedControl(Control control);
    protected virtual ControlCollection CreateControlCollection();
    protected virtual Style CreateControlStyle();
    private int GetServerActiveTabIndex(int clientActiveTabIndex);
    protected virtual void LoadClientState(string clientState);
    protected virtual string SaveClientState();
    protected virtual void LoadControlState(object savedState);
    protected virtual object SaveControlState();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void RenderHeader(HtmlTextWriter writer);
    private void RenderSpannerForVerticalTabs(HtmlTextWriter writer);
    private string GetSuffixTabStripPlacementCss();
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual void RaisePostDataChangedEvent();
    private void EnsureActiveTab();
    public void ResetLoadedOnceTabs();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
}
public enum AjaxControlToolkit.TabCssTheme : Enum {
    public int value__;
    public static TabCssTheme None;
    public static TabCssTheme XP;
    public static TabCssTheme Plain;
}
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.DynamicPopulateExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.TabContainer")]
[ClientCssResourceAttribute("Tabs")]
[ClientScriptResourceAttribute("Sys.Extended.UI.TabPanel", "Tabs")]
[ToolboxItemAttribute("False")]
[DesignerAttribute("AjaxControlToolkit.Design.TabPanelDesigner")]
public class AjaxControlToolkit.TabPanel : ScriptControlBase {
    private bool _active;
    private ITemplate _contentTemplate;
    private ITemplate _headerTemplate;
    private TabContainer _owner;
    private Control _headerControl;
    [CompilerGeneratedAttribute]
private string <UpdatePanelID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasLoadedOnce>k__BackingField;
    [DefaultValueAttribute("")]
[CategoryAttribute("Appearance")]
[ClientPropertyNameAttribute("headerText")]
public string HeaderText { get; public set; }
    [PersistenceModeAttribute]
[TemplateInstanceAttribute]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public ITemplate HeaderTemplate { get; public set; }
    [PersistenceModeAttribute]
[TemplateInstanceAttribute]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public ITemplate ContentTemplate { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("enabled")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("scrollBars")]
public ScrollBars ScrollBars { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("click")]
public string OnClientClick { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicServicePath")]
[UrlPropertyAttribute]
public string DynamicServicePath { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicServiceMethod")]
public string DynamicServiceMethod { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("dynamicContextKey")]
public string DynamicContextKey { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onDemandMode")]
public OnDemandMode OnDemandMode { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("populating")]
public string OnClientPopulating { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ExtenderControlEventAttribute]
[ClientPropertyNameAttribute("populated")]
public string OnClientPopulated { get; public set; }
    internal bool Active { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("updatePanelID")]
public string UpdatePanelID { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("wasLoadedOnce")]
public bool WasLoadedOnce { get; public set; }
    public string get_HeaderText();
    public void set_HeaderText(string value);
    public ITemplate get_HeaderTemplate();
    public void set_HeaderTemplate(ITemplate value);
    public ITemplate get_ContentTemplate();
    public void set_ContentTemplate(ITemplate value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public string get_OnClientClick();
    public void set_OnClientClick(string value);
    public string get_DynamicServicePath();
    public void set_DynamicServicePath(string value);
    public string get_DynamicServiceMethod();
    public void set_DynamicServiceMethod(string value);
    public string get_DynamicContextKey();
    public void set_DynamicContextKey(string value);
    public OnDemandMode get_OnDemandMode();
    public void set_OnDemandMode(OnDemandMode value);
    public string get_OnClientPopulating();
    public void set_OnClientPopulating(string value);
    public string get_OnClientPopulated();
    public void set_OnClientPopulated(string value);
    internal bool get_Active();
    internal void set_Active(bool value);
    [CompilerGeneratedAttribute]
public string get_UpdatePanelID();
    [CompilerGeneratedAttribute]
public void set_UpdatePanelID(string value);
    [CompilerGeneratedAttribute]
public bool get_WasLoadedOnce();
    [CompilerGeneratedAttribute]
public void set_WasLoadedOnce(bool value);
    protected virtual void OnInit(EventArgs e);
    private void UpdatePanelOnLoad(object sender, EventArgs e);
    protected internal virtual void RenderHeader(HtmlTextWriter writer);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void RegisterScriptDescriptors();
    protected virtual void DescribeComponent(ScriptComponentDescriptor descriptor);
    internal void SetOwner(TabContainer owner);
}
[DefaultMemberAttribute("Item")]
public class AjaxControlToolkit.TabPanelCollection : ControlCollection {
    public TabPanel Item { get; }
    public TabPanelCollection(Control owner);
    public virtual void Add(Control child);
    public virtual void AddAt(int index, Control child);
    public TabPanel get_Item(int index);
}
public enum AjaxControlToolkit.TabStripPlacement : Enum {
    public int value__;
    public static TabStripPlacement Top;
    public static TabStripPlacement Bottom;
    public static TabStripPlacement TopRight;
    public static TabStripPlacement BottomRight;
}
[DesignerAttribute("AjaxControlToolkit.Design.TextBoxWatermarkExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.TextBoxWatermarkBehavior", "TextBoxWatermark")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[TargetControlTypeAttribute("System.Web.UI.WebControls.TextBox")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "TextBoxWatermark.bmp")]
public class AjaxControlToolkit.TextBoxWatermarkExtender : ExtenderControlBase {
    private static string stringWatermarkText;
    private static string stringWatermarkCssClass;
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("watermarkText")]
public string WatermarkText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("watermarkCssClass")]
public string WatermarkCssClass { get; public set; }
    protected virtual void OnLoad(EventArgs e);
    public string get_WatermarkText();
    public void set_WatermarkText(string value);
    public string get_WatermarkCssClass();
    public void set_WatermarkCssClass(string value);
}
[ClientScriptResourceAttribute("", "Common.Threading")]
public class AjaxControlToolkit.ThreadingScripts : object {
}
[ClientScriptResourceAttribute("", "Compat.Timer")]
public static class AjaxControlToolkit.TimerScript : object {
}
[DesignerAttribute("AjaxControlToolkit.Design.ToggleButtonExtenderDesigner")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ToggleButtonBehavior", "ToggleButton")]
[TargetControlTypeAttribute("System.Web.UI.ICheckBoxControl")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ToggleButton.bmp")]
public class AjaxControlToolkit.ToggleButtonExtender : ExtenderControlBase {
    private static string stringImageWidth;
    private static string stringImageHeight;
    private static string stringUncheckedImageUrl;
    private static string stringCheckedImageUrl;
    private static string stringDisabledUncheckedImageUrl;
    private static string stringDisabledCheckedImageUrl;
    private static string stringCheckedImageOverUrl;
    private static string stringUncheckedImageOverUrl;
    private static string stringUncheckedImageAlternateText;
    private static string stringCheckedImageAlternateText;
    private static string stringCheckedImageOverAlternateText;
    private static string stringUncheckedImageOverAlternateText;
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("imageWidth")]
public int ImageWidth { get; public set; }
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[DefaultValueAttribute("0")]
[ClientPropertyNameAttribute("imageHeight")]
public int ImageHeight { get; public set; }
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("uncheckedImageUrl")]
public string UncheckedImageUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[RequiredPropertyAttribute]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("checkedImageUrl")]
public string CheckedImageUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("disabledUncheckedImageUrl")]
public string DisabledUncheckedImageUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("disabledCheckedImageUrl")]
public string DisabledCheckedImageUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("checkedImageOverUrl")]
public string CheckedImageOverUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ClientPropertyNameAttribute("uncheckedImageOverUrl")]
public string UncheckedImageOverUrl { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("uncheckedImageAlternateText")]
public string UncheckedImageAlternateText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("checkedImageAlternateText")]
public string CheckedImageAlternateText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("checkedImageOverAlternateText")]
public string CheckedImageOverAlternateText { get; public set; }
    [ExtenderControlPropertyAttribute]
[DefaultValueAttribute("")]
[ClientPropertyNameAttribute("uncheckedImageOverAlternateText")]
public string UncheckedImageOverAlternateText { get; public set; }
    public int get_ImageWidth();
    public void set_ImageWidth(int value);
    public int get_ImageHeight();
    public void set_ImageHeight(int value);
    public string get_UncheckedImageUrl();
    public void set_UncheckedImageUrl(string value);
    public string get_CheckedImageUrl();
    public void set_CheckedImageUrl(string value);
    public string get_DisabledUncheckedImageUrl();
    public void set_DisabledUncheckedImageUrl(string value);
    public string get_DisabledCheckedImageUrl();
    public void set_DisabledCheckedImageUrl(string value);
    public string get_CheckedImageOverUrl();
    public void set_CheckedImageOverUrl(string value);
    public string get_UncheckedImageOverUrl();
    public void set_UncheckedImageOverUrl(string value);
    public string get_UncheckedImageAlternateText();
    public void set_UncheckedImageAlternateText(string value);
    public string get_CheckedImageAlternateText();
    public void set_CheckedImageAlternateText(string value);
    public string get_CheckedImageOverAlternateText();
    public void set_CheckedImageOverAlternateText(string value);
    public string get_UncheckedImageOverAlternateText();
    public void set_UncheckedImageOverAlternateText(string value);
}
internal class AjaxControlToolkit.ToolboxIcons.Accessor : object {
}
public static class AjaxControlToolkit.ToolkitConfig : object {
    private static Lazy`1<AjaxControlToolkitConfigSection> _configSection;
    private static AjaxControlToolkitConfigSection ConfigSection { get; }
    public static bool UseStaticResources { get; }
    public static bool RenderStyleLinks { get; }
    public static string HtmlSanitizer { get; }
    public static string TempFolder { get; }
    public static string AdditionalUploadFileExtensions { get; }
    public static IEnumerable`1<Type> CustomControls { get; }
    private static ToolkitConfig();
    private static AjaxControlToolkitConfigSection GetSection();
    private static AjaxControlToolkitConfigSection get_ConfigSection();
    public static bool get_UseStaticResources();
    public static bool get_RenderStyleLinks();
    public static string get_HtmlSanitizer();
    public static string get_TempFolder();
    public static string get_AdditionalUploadFileExtensions();
    public static IEnumerable`1<Type> get_CustomControls();
}
public static class AjaxControlToolkit.ToolkitResourceManager : object {
    private static string ContextKey_UseEmbeddedStyles;
    private static object _sync;
    private static Dictionary`2<Type, List`1<ResourceEntry>> _scriptsCache;
    private static Dictionary`2<Type, List`1<ResourceEntry>> _cssCache;
    private static Type[] _controlTypesWithBackground;
    public static bool RenderStyleLinks { get; public set; }
    private static ToolkitResourceManager();
    public static void RegisterControl(Type type);
    public static bool get_RenderStyleLinks();
    public static void set_RenderStyleLinks(bool value);
    public static ScriptReference GetBaseScriptReference();
    public static String[] GetScriptPaths(String[] toolkitBundles);
    public static IEnumerable`1<ScriptReference> GetControlScriptReferences(Type type);
    private static IEnumerable`1<EmbeddedScript> GetEmbeddedScripts(String[] toolkitBundles);
    private static string GetConfigPath();
    public static void RegisterScriptMappings(string bundleName);
    public static void RemoveScriptMappingsRegistration();
    private static string FormatScriptDebugVirtualPath(string scriptName);
    private static string FormatScriptReleaseVirtualPath(string scriptName);
    public static String[] GetStylePaths(String[] toolkitBundles);
    internal static IEnumerable`1<string> GetStyleHrefs(Control control);
    internal static string GetStyleHref(string entryName, Control control);
    internal static string GetStyleHref(ResourceEntry entry, Control control);
    public static string GetStyleHref(ResourceEntry entry, Control control, Func`3<Type, string, string> getWebResourceUrlFunc);
    private static string GetStyleResourceName(ResourceEntry entry, bool minified);
    internal static IEnumerable`1<ResourceEntry> GetStyleEntries(Type[] controlTypes);
    private static bool IsControlWithBackground(Type typeToCheck);
    private static string FormatStyleVirtualPath(string name, bool minified);
    private static string FormatStyleResourceName(string name, bool minified, bool useActPrefix);
    public static void RegisterCssReferences(Control control);
    internal static string GetImageHref(string imageName, Control control, bool resolveClientUrlForStatic);
    internal static void RegisterImagePaths(String[] imageNames, Control control);
    private static IEnumerable`1<ResourceEntry> GetScriptEntries(Type type);
    private static IEnumerable`1<ResourceEntry> GetStyleEntries(Type type);
    private static IEnumerable`1<ResourceEntry> GetResourceEntries(Type type, ICollection`1<Type> typeTrace, IDictionary`2<Type, List`1<ResourceEntry>> cache);
    private static bool GetContextFlag(string key, bool defaultValue);
    private static void SetContextFlag(string key, object defaultValue, object value);
    private static bool IsDebuggingEnabled();
    private static bool IsCdnEnabled();
    private static bool IsSecureConnection();
    private static ScriptManager GetCurrentScriptManager();
}
[ClientCssResourceAttribute("Twitter")]
[DesignerAttribute("AjaxControlToolkit.Design.TwitterDesigner")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "Twitter.bmp")]
public class AjaxControlToolkit.Twitter : CompositeControl {
    private ListView _listView;
    [CompilerGeneratedAttribute]
private TwitterMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScreenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRetweets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeReplies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CacheDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLiveContentOnDesignMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplate <StatusTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplate <AlternatingStatusTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplate <EmptyDataTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplate <LayoutTemplate>k__BackingField;
    public TwitterMode Mode { get; public set; }
    [CategoryAttribute("Profile")]
[DescriptionAttribute("Twitter Screen Name used when Mode=Profile")]
public string ScreenName { get; public set; }
    [CategoryAttribute("Search")]
[DescriptionAttribute("Twitter Caption")]
public string Caption { get; public set; }
    [CategoryAttribute("Search")]
[DescriptionAttribute("Twitter Title")]
public string Title { get; public set; }
    [CategoryAttribute("Search")]
[DescriptionAttribute("Twitter Profile Image Url")]
public string ProfileImageUrl { get; public set; }
    public string Search { get; public set; }
    public bool IncludeRetweets { get; public set; }
    public bool IncludeReplies { get; public set; }
    public int Count { get; public set; }
    public int CacheDuration { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Enable get live content from twitter server at design time")]
public bool IsLiveContentOnDesignMode { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem")]
public ITemplate StatusTemplate { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem")]
public ITemplate AlternatingStatusTemplate { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListView")]
public ITemplate EmptyDataTemplate { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute]
[TemplateContainerAttribute("AjaxControlToolkit.Twitter")]
public ITemplate LayoutTemplate { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [CompilerGeneratedAttribute]
public TwitterMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(TwitterMode value);
    [CompilerGeneratedAttribute]
public string get_ScreenName();
    [CompilerGeneratedAttribute]
public void set_ScreenName(string value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileImageUrl();
    [CompilerGeneratedAttribute]
public void set_ProfileImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Search();
    [CompilerGeneratedAttribute]
public void set_Search(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRetweets();
    [CompilerGeneratedAttribute]
public void set_IncludeRetweets(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeReplies();
    [CompilerGeneratedAttribute]
public void set_IncludeReplies(bool value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_CacheDuration();
    [CompilerGeneratedAttribute]
public void set_CacheDuration(int value);
    [CompilerGeneratedAttribute]
public bool get_IsLiveContentOnDesignMode();
    [CompilerGeneratedAttribute]
public void set_IsLiveContentOnDesignMode(bool value);
    [CompilerGeneratedAttribute]
public ITemplate get_StatusTemplate();
    [CompilerGeneratedAttribute]
public void set_StatusTemplate(ITemplate value);
    [CompilerGeneratedAttribute]
public ITemplate get_AlternatingStatusTemplate();
    [CompilerGeneratedAttribute]
public void set_AlternatingStatusTemplate(ITemplate value);
    [CompilerGeneratedAttribute]
public ITemplate get_EmptyDataTemplate();
    [CompilerGeneratedAttribute]
public void set_EmptyDataTemplate(ITemplate value);
    [CompilerGeneratedAttribute]
public ITemplate get_LayoutTemplate();
    [CompilerGeneratedAttribute]
public void set_LayoutTemplate(ITemplate value);
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    private void ControlPropertiesValid();
    protected virtual void CreateChildControls();
    private void PrepareTemplates();
    private IList`1<TwitterStatus> GetProfile();
    private IList`1<TwitterStatus> GetSearch();
    public static string Ago(DateTime date);
    public static string ActivateLinks(string text);
}
public class AjaxControlToolkit.TwitterAPI : object {
    public List`1<TwitterStatus> GetSearch(string search, int count);
    public IList`1<TwitterStatus> GetProfile(string screenName, int count, bool includeRetweets, bool includeReplies);
    private string Query(string resourceUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    private DateTime ParseDateTime(string date);
    [CompilerGeneratedAttribute]
private TwitterStatus <GetSearch>b__0_0(Response s);
    [CompilerGeneratedAttribute]
private TwitterStatus <GetProfile>b__1_0(Response s);
}
public enum AjaxControlToolkit.TwitterMode : Enum {
    public int value__;
    public static TwitterMode Profile;
    public static TwitterMode Search;
}
public class AjaxControlToolkit.TwitterStatus : object {
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TwitterUser <User>k__BackingField;
    public DateTime CreatedAt { get; public set; }
    public string Text { get; public set; }
    public TwitterUser User { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public TwitterUser get_User();
    [CompilerGeneratedAttribute]
public void set_User(TwitterUser value);
}
public class AjaxControlToolkit.TwitterUser : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScreenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileImageUrl>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string ScreenName { get; public set; }
    public string Description { get; public set; }
    public string Location { get; public set; }
    public string ProfileImageUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ScreenName();
    [CompilerGeneratedAttribute]
public void set_ScreenName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileImageUrl();
    [CompilerGeneratedAttribute]
public void set_ProfileImageUrl(string value);
}
public class AjaxControlToolkit.Underline : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.Undo : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.UnLink : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
public class AjaxControlToolkit.UnSelect : HtmlEditorExtenderButton {
    public string CommandName { get; }
    public string Tooltip { get; }
    public Dictionary`2<string, String[]> ElementWhiteList { get; }
    public Dictionary`2<string, String[]> AttributeWhiteList { get; }
    public virtual string get_CommandName();
    public virtual string get_Tooltip();
    public virtual Dictionary`2<string, String[]> get_ElementWhiteList();
    public virtual Dictionary`2<string, String[]> get_AttributeWhiteList();
}
[DesignerAttribute("AjaxControlToolkit.Design.UpdatePanelAnimationExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts", "0")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationScripts", "1")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender", "2")]
[ClientScriptResourceAttribute("Sys.Extended.UI.Animation.UpdatePanelAnimationBehavior", "UpdatePanelAnimation")]
[TargetControlTypeAttribute("System.Web.UI.UpdatePanel")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "UpdatePanelAnimation.bmp")]
public class AjaxControlToolkit.UpdatePanelAnimationExtender : AnimationExtenderControlBase {
    private Animation _updating;
    private Animation _updated;
    private List`1<string> _triggerControlsClientID;
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onUpdating")]
public Animation OnUpdating { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute]
[DesignerSerializationVisibilityAttribute("0")]
[ClientPropertyNameAttribute("onUpdated")]
public Animation OnUpdated { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("True")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("alwaysFinishOnUpdatingAnimation")]
public bool AlwaysFinishOnUpdatingAnimation { get; public set; }
    [DefaultValueAttribute("False")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("childrenAsTriggers")]
public bool ChildrenAsTriggers { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[ExtenderControlPropertyAttribute("True", "True")]
[ClientPropertyNameAttribute("triggerControlsClientID")]
public String[] TriggerControlsClientID { get; }
    public Animation get_OnUpdating();
    public void set_OnUpdating(Animation value);
    public Animation get_OnUpdated();
    public void set_OnUpdated(Animation value);
    public bool get_AlwaysFinishOnUpdatingAnimation();
    public void set_AlwaysFinishOnUpdatingAnimation(bool value);
    public bool get_ChildrenAsTriggers();
    public void set_ChildrenAsTriggers(bool value);
    public String[] get_TriggerControlsClientID();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void RenderScriptAttributes(ScriptBehaviorDescriptor descriptor);
    private void ReplaceStaticAnimationTargets(Animation animation);
    public Control GetTargetControl();
    public Control GetControl(string id);
}
[DesignerAttribute("AjaxControlToolkit.Design.ValidatorCalloutExtenderDesigner")]
[RequiredScriptAttribute("AjaxControlToolkit.CommonToolkitScripts")]
[RequiredScriptAttribute("AjaxControlToolkit.PopupExtender")]
[RequiredScriptAttribute("AjaxControlToolkit.AnimationExtender")]
[TargetControlTypeAttribute("System.Web.UI.IValidator")]
[ClientCssResourceAttribute("ValidatorCallout")]
[ClientScriptResourceAttribute("Sys.Extended.UI.ValidatorCalloutBehavior", "ValidatorCallout")]
[ToolboxBitmapAttribute("AjaxControlToolkit.ToolboxIcons.Accessor", "ValidatorCallout.bmp")]
public class AjaxControlToolkit.ValidatorCalloutExtender : AnimationExtenderControlBase {
    private Animation _onShow;
    private Animation _onHide;
    [DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("warningIconImageUrl")]
public string WarningIconImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[UrlPropertyAttribute]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("closeImageUrl")]
public string CloseImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("cssClass")]
public string CssClass { get; public set; }
    [DefaultValueAttribute("")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("highlightCssClass")]
public string HighlightCssClass { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("popupPosition")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Indicates where you want the ValidatorCallout displayed.")]
public ValidatorCalloutPosition PopupPosition { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("width")]
public Unit Width { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onShow")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnShow { get; public set; }
    [ExtenderControlPropertyAttribute]
[ClientPropertyNameAttribute("onHide")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Animation OnHide { get; public set; }
    public string get_WarningIconImageUrl();
    public void set_WarningIconImageUrl(string value);
    public string get_CloseImageUrl();
    public void set_CloseImageUrl(string value);
    public string get_CssClass();
    public void set_CssClass(string value);
    public string get_HighlightCssClass();
    public void set_HighlightCssClass(string value);
    public virtual ValidatorCalloutPosition get_PopupPosition();
    public virtual void set_PopupPosition(ValidatorCalloutPosition value);
    public Unit get_Width();
    public void set_Width(Unit value);
    public Animation get_OnShow();
    public void set_OnShow(Animation value);
    public Animation get_OnHide();
    public void set_OnHide(Animation value);
    protected virtual void OnPreRender(EventArgs e);
}
public enum AjaxControlToolkit.ValidatorCalloutPosition : Enum {
    public int value__;
    public static ValidatorCalloutPosition Right;
    public static ValidatorCalloutPosition Left;
    public static ValidatorCalloutPosition BottomLeft;
    public static ValidatorCalloutPosition BottomRight;
    public static ValidatorCalloutPosition TopLeft;
    public static ValidatorCalloutPosition TopRight;
}
public enum AjaxControlToolkit.VerticalSide : Enum {
    public int value__;
    public static VerticalSide Top;
    public static VerticalSide Middle;
    public static VerticalSide Bottom;
}
internal enum AjaxControlToolkit.XhrType : Enum {
    public int value__;
    public static XhrType None;
    public static XhrType Start;
    public static XhrType Poll;
    public static XhrType Cancel;
    public static XhrType Done;
    public static XhrType Complete;
}
