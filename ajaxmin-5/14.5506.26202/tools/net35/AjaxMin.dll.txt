[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Ajax.Utilities.ActivationObject : object {
    private bool m_useStrict;
    private bool m_isKnownAtCompileTime;
    [CompilerGeneratedAttribute]
private bool <Existing>k__BackingField;
    [CompilerGeneratedAttribute]
private AstNode <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSuperBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationObject <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInWithScope>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JSVariableField> <NameTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ActivationObject> <ChildScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Lookup> <ScopeLookups>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<INameDeclaration> <VarDeclaredNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<INameDeclaration> <LexicallyDeclaredNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<BindingIdentifier> <GhostedCatchParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FunctionObject> <GhostedFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <ScopeType>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, AstNode> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, AstNode> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<INameDeclaration, VariableDeclaration> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<INameDeclaration, VariableDeclaration> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, JSVariableField> CS$<>9__CachedAnonymousMethodDelegate17;
    internal bool Existing { get; internal set; }
    public AstNode Owner { get; public set; }
    public bool HasSuperBinding { get; public set; }
    public bool UseStrict { get; public set; }
    public bool IsKnownAtCompileTime { get; public set; }
    public ActivationObject Parent { get; private set; }
    public bool IsInWithScope { get; public set; }
    public IDictionary`2<string, JSVariableField> NameTable { get; private set; }
    public IList`1<ActivationObject> ChildScopes { get; private set; }
    public ICollection`1<Lookup> ScopeLookups { get; private set; }
    public ICollection`1<INameDeclaration> VarDeclaredNames { get; private set; }
    public ICollection`1<INameDeclaration> LexicallyDeclaredNames { get; private set; }
    public ICollection`1<BindingIdentifier> GhostedCatchParameters { get; private set; }
    public ICollection`1<FunctionObject> GhostedFunctions { get; private set; }
    public string ScopeName { get; public set; }
    public ScopeType ScopeType { get; protected set; }
    protected CodeSettings Settings { get; private set; }
    public JSVariableField Item { get; }
    protected ActivationObject(ActivationObject parent, CodeSettings codeSettings);
    [CompilerGeneratedAttribute]
internal bool get_Existing();
    [CompilerGeneratedAttribute]
internal void set_Existing(bool value);
    [CompilerGeneratedAttribute]
public AstNode get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(AstNode value);
    [CompilerGeneratedAttribute]
public bool get_HasSuperBinding();
    [CompilerGeneratedAttribute]
public void set_HasSuperBinding(bool value);
    public bool get_UseStrict();
    public void set_UseStrict(bool value);
    public bool get_IsKnownAtCompileTime();
    public void set_IsKnownAtCompileTime(bool value);
    [CompilerGeneratedAttribute]
public ActivationObject get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(ActivationObject value);
    [CompilerGeneratedAttribute]
public bool get_IsInWithScope();
    [CompilerGeneratedAttribute]
public void set_IsInWithScope(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JSVariableField> get_NameTable();
    [CompilerGeneratedAttribute]
private void set_NameTable(IDictionary`2<string, JSVariableField> value);
    [CompilerGeneratedAttribute]
public IList`1<ActivationObject> get_ChildScopes();
    [CompilerGeneratedAttribute]
private void set_ChildScopes(IList`1<ActivationObject> value);
    [CompilerGeneratedAttribute]
public ICollection`1<Lookup> get_ScopeLookups();
    [CompilerGeneratedAttribute]
private void set_ScopeLookups(ICollection`1<Lookup> value);
    [CompilerGeneratedAttribute]
public ICollection`1<INameDeclaration> get_VarDeclaredNames();
    [CompilerGeneratedAttribute]
private void set_VarDeclaredNames(ICollection`1<INameDeclaration> value);
    [CompilerGeneratedAttribute]
public ICollection`1<INameDeclaration> get_LexicallyDeclaredNames();
    [CompilerGeneratedAttribute]
private void set_LexicallyDeclaredNames(ICollection`1<INameDeclaration> value);
    [CompilerGeneratedAttribute]
public ICollection`1<BindingIdentifier> get_GhostedCatchParameters();
    [CompilerGeneratedAttribute]
private void set_GhostedCatchParameters(ICollection`1<BindingIdentifier> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FunctionObject> get_GhostedFunctions();
    [CompilerGeneratedAttribute]
private void set_GhostedFunctions(ICollection`1<FunctionObject> value);
    [CompilerGeneratedAttribute]
public string get_ScopeName();
    [CompilerGeneratedAttribute]
public void set_ScopeName(string value);
    [CompilerGeneratedAttribute]
public ScopeType get_ScopeType();
    [CompilerGeneratedAttribute]
protected void set_ScopeType(ScopeType value);
    [CompilerGeneratedAttribute]
protected CodeSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(CodeSettings value);
    public static bool DeleteFromBindingPattern(AstNode binding, bool normalizePattern);
    public static void RemoveBinding(AstNode binding);
    public abstract virtual void DeclareScope();
    protected void DefineLexicalDeclarations();
    protected void DefineVarDeclarations();
    private void DefineField(INameDeclaration nameDecl, AstNode fieldValue);
    internal virtual void AnalyzeScope();
    private void AnalyzeNonGlobalScope();
    private void UnreferencedVariableField(JSVariableField variableField);
    private void UnreferencedFunction(JSVariableField variableField, FunctionObject functionObject);
    private void UnreferencedVariable(JSVariableField variableField);
    private static void SingleReferenceVariableField(JSVariableField variableField);
    private static bool IsIterativeReference(AstNode initializer, INameReference reference);
    private static Block GetParentBlock(AstNode node);
    protected void ManualRenameFields();
    internal void ValidateGeneratedNames();
    private bool GenerateAvoidList(HashSet`1<string> table, string name);
    internal virtual void AutoRenameFields();
    internal IEnumerable`1<JSVariableField> GetUncrunchedLocals();
    public virtual JSVariableField get_Item(string name);
    public JSVariableField CanReference(string name);
    public JSVariableField FindReference(string name);
    public virtual JSVariableField DeclareField(string name, object value, FieldAttributes attributes);
    public virtual JSVariableField CreateField(JSVariableField outerField);
    public abstract virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
    public virtual JSVariableField CreateInnerField(JSVariableField outerField);
    internal JSVariableField AddField(JSVariableField variableField);
    public INameDeclaration VarDeclaredName(string name);
    public INameDeclaration LexicallyDeclaredName(string name);
    public void AddGlobal(string name);
    [CompilerGeneratedAttribute]
private static AstNode <DefineField>b__1(AstNode p);
    [CompilerGeneratedAttribute]
private static AstNode <DefineField>b__2(AstNode p);
    [CompilerGeneratedAttribute]
private static VariableDeclaration <UnreferencedVariable>b__9(INameDeclaration decl);
    [CompilerGeneratedAttribute]
private static VariableDeclaration <SingleReferenceVariableField>b__b(INameDeclaration d);
    [CompilerGeneratedAttribute]
private static JSVariableField <CreateField>b__16(JSVariableField o);
}
[ExtensionAttribute]
public static class Microsoft.Ajax.Utilities.AjaxMinExtensions : object {
    [ExtensionAttribute]
public static string FormatInvariant(string format, Object[] args);
    [ExtensionAttribute]
public static bool TryParseSingleInvariant(string text, Single& number);
    [ExtensionAttribute]
public static bool TryParseIntInvariant(string text, NumberStyles numberStyles, Int32& number);
    [ExtensionAttribute]
public static bool TryParseLongInvariant(string text, NumberStyles numberStyles, Int64& number);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string text);
    [ExtensionAttribute]
public static string IfNullOrWhiteSpace(string text, string defaultValue);
    [ExtensionAttribute]
public static string SubstringUpToFirst(string text, char delimiter);
    [ExtensionAttribute]
public static string ToStringInvariant(int number, string format);
    [ExtensionAttribute]
public static string ToStringInvariant(double number, string format);
    [ExtensionAttribute]
public static string ToStringInvariant(int number);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<TObject> collection, Action`1<TObject> action);
    [ExtensionAttribute]
public static TResult IfNotNull(TObject obj, Func`2<TObject, TResult> action);
    [ExtensionAttribute]
public static TResult IfNotNull(TObject obj, Func`2<TObject, TResult> action, TResult defaultValue);
    [ExtensionAttribute]
public static void IfNotNull(TObject obj, Action`1<TObject> action);
    [ExtensionAttribute]
public static void CopyItemsTo(ICollection`1<TSource> fromSet, ICollection`1<TSource> toSet);
    [ExtensionAttribute]
public static void Clear(StringBuilder stringBuilder);
}
internal class Microsoft.Ajax.Utilities.AnalyzeNodeVisitor : TreeVisitor {
    private JSParser m_parser;
    private bool m_encounteredCCOn;
    private MatchPropertiesVisitor m_matchVisitor;
    private Stack`1<ActivationObject> m_scopeStack;
    private JSError m_strictNameError;
    private HashSet`1<string> m_noRename;
    private bool m_stripDebug;
    private bool m_lookForDebugNamespaces;
    private bool m_possibleDebugNamespace;
    private int m_possibleDebugNamespaceIndex;
    private List`1<String[]> m_possibleDebugMatches;
    private String[][] m_debugNamespaceParts;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<GroupingOperator, FunctionObject> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`2<AstNodeList, Context> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<AstNodeList, bool> CS$<>9__CachedAnonymousMethodDelegate3e;
    [CompilerGeneratedAttribute]
private static Func`2<Block, bool> CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Action`1<ObjectLiteralProperty> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`2<INameDeclaration, bool> CS$<>9__CachedAnonymousMethodDelegate5d;
    [CompilerGeneratedAttribute]
private static Func`2<INameReference, bool> CS$<>9__CachedAnonymousMethodDelegate5e;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate5f;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static Func`2<FunctionObject, FunctionType> CS$<>9__CachedAnonymousMethodDelegate62;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate65;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate73;
    [CompilerGeneratedAttribute]
private static Func`2<Block, ActivationObject> CS$<>9__CachedAnonymousMethodDelegate76;
    public AnalyzeNodeVisitor(JSParser parser);
    public virtual void Visit(BinaryOperator node);
    public virtual void Visit(BindingIdentifier node);
    private void CombineExpressions(Block node);
    private void CombineWithPreviousExpression(Block node, int ndx);
    private static void CombineTwoExpressions(Block node, int ndx);
    private static void CombineReturnWithExpression(Block node, int ndx, ReturnNode returnNode);
    private void CombineForNodeWithExpression(Block node, int ndx, ForNode forNode);
    private static void CombineWithPreviousVar(Block node, int ndx, Var previousVar);
    private static AstNode FindLastStatement(Block node);
    public virtual void Visit(Block node);
    private static bool LabelMatchesParent(string label, AstNode parentNode);
    private static IfNode IsIfReturnExpr(AstNode node, AstNode& condition, AstNode& matchExpression);
    private static int PreviousStatementIndex(Block node, AstNode child);
    public virtual void Visit(Break node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(ClassNode node);
    private static string ClassElementKeyName(FunctionType funcType, string name);
    public virtual void Visit(ComprehensionNode node);
    private void Optimize(Conditional node);
    public virtual void Visit(Conditional node);
    public virtual void Visit(ConditionalCompilationOn node);
    private static bool StringSourceIsNotInlineSafe(string source);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(ConstStatement node);
    public virtual void Visit(ContinueNode node);
    public virtual void Visit(DebuggerNode node);
    public virtual void Visit(DoWhile node);
    public virtual void Visit(ExportNode node);
    public virtual void Visit(ForNode node);
    public virtual void Visit(ForIn node);
    public virtual void Visit(FunctionObject node);
    private static bool CheckParametersAreReferenced(AstNode binding, bool removeIfUnreferenced, bool foundLastReference);
    private static void TrimTrailingElisionsFromArrayBindings(AstNode binding);
    public virtual void Visit(IfNode node);
    private void IfConditionExpressionToExpression(IfNode ifNode, AstNode expression);
    public virtual void Visit(ImportNode node);
    public virtual void Visit(LabeledStatement node);
    public virtual void Visit(Lookup node);
    public virtual void Visit(Member node);
    private bool InitialDebugNameSpaceMatches(string name, bool parentIsMember);
    public virtual void Visit(ObjectLiteral node);
    private static bool FieldCanBeRenamed(AstNode node);
    public virtual void Visit(ObjectLiteralField node);
    public virtual void Visit(ObjectLiteralProperty node);
    private static string GetPropertyType(FunctionObject funcObj);
    public virtual void Visit(RegExpLiteral node);
    public virtual void Visit(ReturnNode node);
    public virtual void Visit(Switch node);
    public virtual void Visit(TryNode node);
    private void DoCatchBlock(TryNode node);
    public virtual void Visit(UnaryOperator node);
    public virtual void Visit(Var node);
    public virtual void Visit(VariableDeclaration node);
    public virtual void Visit(WhileNode node);
    public virtual void Visit(WithNode node);
    private static AstNode ClearDebugExpression(AstNode node);
    private static string GuessAtName(AstNode node);
    private static bool AreAssignmentsInVar(BinaryOperator binaryOp, Var varStatement);
    private static void ConvertAssignmentsToVarDecls(BinaryOperator binaryOp, Declaration declaration, JSParser parser);
    private static bool VarDeclExists(Var node, int ndx, string name);
    private static void DeleteNoInits(Var node, int min, string name);
    private static UnaryOperator CreateVoidNode(Context context);
    private static void ValidateIdentifier(bool isStrict, string identifier, Context context, JSError error);
    private static bool IsInsideLoop(AstNode node, bool orSwitch);
    private static AstNode ReplaceCultureValue(ConstantWrapper node);
    private static AstNode CreateNodeFromObject(Context context, object item);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__1b(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__1c(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__1d(JSVariableField v);
    [CompilerGeneratedAttribute]
private static FunctionObject <Visit>b__25(GroupingOperator g);
    [CompilerGeneratedAttribute]
private void <Visit>b__27(BlockScope s);
    [CompilerGeneratedAttribute]
private ActivationObject <Visit>b__28(BlockScope s);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__2e(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__2f(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__33(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__34(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__37(JSVariableField v);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__38(AstNodeList p);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__39(AstNodeList p);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__3b(Block b);
    [CompilerGeneratedAttribute]
private static bool <CheckParametersAreReferenced>b__42(JSVariableField v);
    [CompilerGeneratedAttribute]
private static void <TrimTrailingElisionsFromArrayBindings>b__44(ObjectLiteralProperty property);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__4e(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__51(AstNode r);
    [CompilerGeneratedAttribute]
private void <Visit>b__54(ObjectLiteralProperty property);
    [CompilerGeneratedAttribute]
private static bool <FieldCanBeRenamed>b__59(INameDeclaration n);
    [CompilerGeneratedAttribute]
private static bool <FieldCanBeRenamed>b__5b(INameReference n);
    [CompilerGeneratedAttribute]
private static bool <FieldCanBeRenamed>b__5a(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <FieldCanBeRenamed>b__5c(JSVariableField v);
    [CompilerGeneratedAttribute]
private static FunctionType <GetPropertyType>b__61(FunctionObject f);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__63(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__64(JSVariableField v);
    [CompilerGeneratedAttribute]
private void <Visit>b__67(Block b);
    [CompilerGeneratedAttribute]
private void <Visit>b__68(Block b);
    [CompilerGeneratedAttribute]
private void <DoCatchBlock>b__6b(Block b);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__72(AstNode p);
    [CompilerGeneratedAttribute]
private static ActivationObject <Visit>b__75(Block b);
}
public class Microsoft.Ajax.Utilities.ArrayLiteral : Expression {
    private AstNodeList m_elements;
    [CompilerGeneratedAttribute]
private bool <MayHaveIssues>k__BackingField;
    public AstNodeList Elements { get; public set; }
    public bool MayHaveIssues { get; public set; }
    public int Length { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsConstant { get; }
    public ArrayLiteral(Context context);
    public AstNodeList get_Elements();
    public void set_Elements(AstNodeList value);
    [CompilerGeneratedAttribute]
public bool get_MayHaveIssues();
    [CompilerGeneratedAttribute]
public void set_MayHaveIssues(bool value);
    public int get_Length();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool get_IsConstant();
}
public class Microsoft.Ajax.Utilities.AspNetBlockNode : AstNode {
    [CompilerGeneratedAttribute]
private bool <IsTerminatedByExplicitSemicolon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AspNetBlockText>k__BackingField;
    public bool IsTerminatedByExplicitSemicolon { get; public set; }
    public string AspNetBlockText { get; public set; }
    public AspNetBlockNode(Context context);
    [CompilerGeneratedAttribute]
public bool get_IsTerminatedByExplicitSemicolon();
    [CompilerGeneratedAttribute]
public void set_IsTerminatedByExplicitSemicolon(bool value);
    [CompilerGeneratedAttribute]
public string get_AspNetBlockText();
    [CompilerGeneratedAttribute]
public void set_AspNetBlockText(string value);
    public virtual void Accept(IVisitor visitor);
}
public abstract class Microsoft.Ajax.Utilities.AstNode : object {
    private static IEnumerable`1<AstNode> s_emptyChildrenCollection;
    private ActivationObject m_enclosingScope;
    [CompilerGeneratedAttribute]
private AstNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <TerminatingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDebugOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Index>k__BackingField;
    public AstNode Parent { get; public set; }
    public Context Context { get; public set; }
    public Context TerminatingContext { get; public set; }
    public bool IsExpression { get; }
    public bool IsConstant { get; }
    public bool IsDebugOnly { get; public set; }
    public long Index { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public bool IsDeclaration { get; }
    public bool IsWindowLookup { get; }
    public AstNode LeftHandSide { get; }
    public ActivationObject EnclosingScope { get; public set; }
    public bool HasOwnScope { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool ContainsInOperator { get; }
    protected AstNode(Context context);
    private static AstNode();
    [CompilerGeneratedAttribute]
public sealed virtual AstNode get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(AstNode value);
    [CompilerGeneratedAttribute]
public sealed virtual Context get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Context value);
    [CompilerGeneratedAttribute]
public virtual Context get_TerminatingContext();
    [CompilerGeneratedAttribute]
public virtual void set_TerminatingContext(Context value);
    public virtual bool get_IsExpression();
    public virtual bool get_IsConstant();
    [CompilerGeneratedAttribute]
public bool get_IsDebugOnly();
    [CompilerGeneratedAttribute]
public void set_IsDebugOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(long value);
    public virtual OperatorPrecedence get_Precedence();
    public virtual bool get_IsDeclaration();
    public bool get_IsWindowLookup();
    public virtual AstNode get_LeftHandSide();
    public virtual ActivationObject get_EnclosingScope();
    public virtual void set_EnclosingScope(ActivationObject value);
    public bool get_HasOwnScope();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool get_ContainsInOperator();
    internal virtual string GetFunctionGuess(AstNode target);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public bool IsGlobalNamed(string name);
    public abstract virtual void Accept(IVisitor visitor);
    public void UpdateWith(Context context);
    public static Block ForceToBlock(AstNode node);
    internal static IEnumerable`1<AstNode> FastEnumerateNonNullNodes(IList`1<T> nodes);
    internal static IEnumerable`1<AstNode> EnumerateNonNullNodes(IList`1<T> nodes);
    internal static IEnumerable`1<AstNode> EnumerateNonNullNodes(AstNode n1, AstNode n2, AstNode n3, AstNode n4);
    internal void UnlinkParent(AstNode node);
    internal void ReplaceNode(T& node, T value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.AstNodeList : AstNode {
    private List`1<AstNode> m_list;
    public Context TerminatingContext { get; }
    public OperatorPrecedence Precedence { get; }
    public int Count { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode Item { get; public set; }
    public string SingleConstantArgument { get; }
    public bool IsConstant { get; }
    public AstNodeList(Context context);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual OperatorPrecedence get_Precedence();
    public int get_Count();
    public virtual IEnumerable`1<AstNode> get_Children();
    public void ForEach(Action`1<TItem> action);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal AstNodeList Append(AstNode node);
    public AstNodeList Insert(int position, AstNode node);
    internal void RemoveAt(int position);
    public AstNode get_Item(int index);
    public void set_Item(int index, AstNode value);
    public bool IsSingleConstantArgument(string argumentValue);
    public string get_SingleConstantArgument();
    public virtual bool get_IsConstant();
    public virtual string ToString();
    public sealed virtual IEnumerator`1<AstNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Ajax.Utilities.BinaryOperator : Expression {
    private AstNode m_operand1;
    private AstNode m_operand2;
    [CompilerGeneratedAttribute]
private JSToken <OperatorToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public AstNode Operand1 { get; public set; }
    public AstNode Operand2 { get; public set; }
    public JSToken OperatorToken { get; public set; }
    public Context OperatorContext { get; public set; }
    public Context TerminatingContext { get; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public bool IsAssign { get; }
    public bool ContainsInOperator { get; }
    public bool IsConstant { get; }
    public BinaryOperator(Context context);
    public AstNode get_Operand1();
    public void set_Operand1(AstNode value);
    public AstNode get_Operand2();
    public void set_Operand2(AstNode value);
    [CompilerGeneratedAttribute]
public JSToken get_OperatorToken();
    [CompilerGeneratedAttribute]
public void set_OperatorToken(JSToken value);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    public virtual Context get_TerminatingContext();
    public virtual OperatorPrecedence get_Precedence();
    public virtual PrimitiveType FindPrimitiveType();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    public void SwapOperands();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public bool get_IsAssign();
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual bool get_ContainsInOperator();
    public virtual bool get_IsConstant();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__2(AstNode o);
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__3(AstNode o);
}
public class Microsoft.Ajax.Utilities.BindingIdentifier : AstNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenameNotAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <ScopeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<InitializerNode, AstNode> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public string Name { get; public set; }
    public JSVariableField VariableField { get; public set; }
    public bool RenameNotAllowed { get; public set; }
    public ScopeType ScopeType { get; public set; }
    public AstNode Initializer { get; }
    public bool IsParameter { get; public set; }
    public string OriginalName { get; }
    public bool WasRenamed { get; }
    public BindingIdentifier(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VariableField(JSVariableField value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RenameNotAllowed();
    [CompilerGeneratedAttribute]
public void set_RenameNotAllowed(bool value);
    [CompilerGeneratedAttribute]
public ScopeType get_ScopeType();
    [CompilerGeneratedAttribute]
public void set_ScopeType(ScopeType value);
    public sealed virtual AstNode get_Initializer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsParameter();
    [CompilerGeneratedAttribute]
public void set_IsParameter(bool value);
    public sealed virtual string get_OriginalName();
    public sealed virtual bool get_WasRenamed();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static AstNode <get_Initializer>b__0(InitializerNode v);
    [CompilerGeneratedAttribute]
private static bool <get_WasRenamed>b__2(JSVariableField f);
    [CompilerGeneratedAttribute]
private bool <IsEquivalentTo>b__4(JSVariableField v);
    [CompilerGeneratedAttribute]
private bool <IsEquivalentTo>b__5(JSVariableField v);
}
public class Microsoft.Ajax.Utilities.BindingsVisitor : object {
    private IList`1<BindingIdentifier> m_bindings;
    private IList`1<Lookup> m_lookups;
    [CompilerGeneratedAttribute]
private static Action`1<AstNode> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Action`1<Context> CS$<>9__CachedAnonymousMethodDelegate15;
    public static IList`1<BindingIdentifier> Bindings(AstNode node);
    public static IList`1<Lookup> References(AstNode node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    private static void ReportError(AstNode node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    [CompilerGeneratedAttribute]
private void <Visit>b__0(ArrayLiteral n);
    [CompilerGeneratedAttribute]
private void <Visit>b__1(AstNode e);
    [CompilerGeneratedAttribute]
private void <Visit>b__2(BindingIdentifier n);
    [CompilerGeneratedAttribute]
private void <Visit>b__3(ConstStatement n);
    [CompilerGeneratedAttribute]
private void <Visit>b__4(AstNode v);
    [CompilerGeneratedAttribute]
private void <Visit>b__5(InitializerNode n);
    [CompilerGeneratedAttribute]
private void <Visit>b__6(AstNode v);
    [CompilerGeneratedAttribute]
private void <Visit>b__7(LexicalDeclaration n);
    [CompilerGeneratedAttribute]
private void <Visit>b__8(AstNode v);
    [CompilerGeneratedAttribute]
private void <Visit>b__9(Lookup n);
    [CompilerGeneratedAttribute]
private void <Visit>b__a(ObjectLiteral n);
    [CompilerGeneratedAttribute]
private void <Visit>b__b(AstNode p);
    [CompilerGeneratedAttribute]
private void <Visit>b__c(ObjectLiteralProperty n);
    [CompilerGeneratedAttribute]
private void <Visit>b__d(AstNode v);
    [CompilerGeneratedAttribute]
private void <Visit>b__e(Var n);
    [CompilerGeneratedAttribute]
private void <Visit>b__f(AstNode v);
    [CompilerGeneratedAttribute]
private void <Visit>b__10(VariableDeclaration n);
    [CompilerGeneratedAttribute]
private void <Visit>b__11(AstNode b);
    [CompilerGeneratedAttribute]
private static void <ReportError>b__12(AstNode n);
    [CompilerGeneratedAttribute]
private static void <ReportError>b__13(Context c);
}
public static class Microsoft.Ajax.Utilities.BindingTransform : object {
    public static AstNode FromBinding(AstNode node);
    public static AstNode ToBinding(AstNode node);
    public static AstNodeList ToParameters(AstNode node);
    private static AstNode ConvertFromBinding(AstNode node);
    private static Lookup ConvertFromBindingIdentifier(BindingIdentifier bindingIdentifier);
    private static ArrayLiteral ConvertFromBindingArrayLiteral(ArrayLiteral bindingLiteral);
    private static ObjectLiteral ConvertFromBindingObjectLiteral(ObjectLiteral bindingLiteral);
    private static ObjectLiteralProperty ConvertFromBindingObjectProperty(ObjectLiteralProperty bindingLiteral);
    private static ObjectLiteralField ConvertFromBindingObjectName(ObjectLiteralField bindingLiteral);
    private static AstNode ConvertToBinding(AstNode node);
    private static BindingIdentifier ConvertToBindingIdentifier(Lookup lookup);
    private static ArrayLiteral ConvertToBindingArrayLiteral(ArrayLiteral arrayLiteral);
    private static ObjectLiteral ConvertToBindingObjectLiteral(ObjectLiteral objectLiteral);
    private static ObjectLiteralProperty ConvertToBindingObjectProperty(ObjectLiteralProperty objectProperty);
    private static ObjectLiteralField ConvertToBindingObjectName(ObjectLiteralField objectName);
    private static ImportExportSpecifier ConvertToBindingSpecifier(ImportExportSpecifier specifier);
    private static void RecurseParameters(AstNodeList parameterList, AstNode node);
    private static ParameterDeclaration ConvertToParameter(AstNode node, int position);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.Block : AstNode {
    private List`1<AstNode> m_list;
    [CompilerGeneratedAttribute]
private bool <BraceOnNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBraces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConcise>k__BackingField;
    public AstNode Item { get; public set; }
    public int Count { get; }
    public bool BraceOnNewLine { get; public set; }
    public bool IsModule { get; public set; }
    public Context TerminatingContext { get; }
    public bool ForceBraces { get; public set; }
    public bool IsConcise { get; public set; }
    public bool IsExpression { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public Block(Context context);
    public AstNode get_Item(int index);
    public void set_Item(int index, AstNode value);
    public int get_Count();
    [CompilerGeneratedAttribute]
public bool get_BraceOnNewLine();
    [CompilerGeneratedAttribute]
public void set_BraceOnNewLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsModule();
    [CompilerGeneratedAttribute]
public void set_IsModule(bool value);
    public virtual Context get_TerminatingContext();
    [CompilerGeneratedAttribute]
public bool get_ForceBraces();
    [CompilerGeneratedAttribute]
public void set_ForceBraces(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsConcise();
    [CompilerGeneratedAttribute]
public void set_IsConcise(bool value);
    public virtual bool get_IsExpression();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public void Clear();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public void Append(AstNode item);
    public int IndexOf(AstNode item);
    public void InsertAfter(AstNode after, AstNode item);
    public void Insert(int index, AstNode item);
    public void RemoveLast();
    public void RemoveAt(int index);
    public void InsertRange(int index, IEnumerable`1<AstNode> newItems);
    private void Unconcise();
    public sealed virtual IEnumerator`1<AstNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private AstNode <Clear>b__0(AstNode n);
}
public class Microsoft.Ajax.Utilities.BlockScope : ActivationObject {
    public BlockScope(ActivationObject parent, CodeSettings settings, ScopeType scopeType);
    public virtual void DeclareScope();
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
public enum Microsoft.Ajax.Utilities.BlockStart : Enum {
    public int value__;
    public static BlockStart NewLine;
    public static BlockStart SameLine;
    public static BlockStart UseSource;
}
public class Microsoft.Ajax.Utilities.Break : AstNode {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <LabelContext>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelInfo <LabelInfo>k__BackingField;
    public string Label { get; public set; }
    public Context LabelContext { get; public set; }
    public LabelInfo LabelInfo { get; public set; }
    public Break(Context context);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Context get_LabelContext();
    [CompilerGeneratedAttribute]
public void set_LabelContext(Context value);
    [CompilerGeneratedAttribute]
public LabelInfo get_LabelInfo();
    [CompilerGeneratedAttribute]
public void set_LabelInfo(LabelInfo value);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.CallNode : Expression {
    private AstNode m_function;
    private AstNodeList m_arguments;
    [CompilerGeneratedAttribute]
private bool <IsConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InBrackets>k__BackingField;
    public AstNode Function { get; public set; }
    public AstNodeList Arguments { get; public set; }
    public bool IsConstructor { get; public set; }
    public bool InBrackets { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public bool IsExpression { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public CallNode(Context context);
    public AstNode get_Function();
    public void set_Function(AstNode value);
    public AstNodeList get_Arguments();
    public void set_Arguments(AstNodeList value);
    [CompilerGeneratedAttribute]
public bool get_IsConstructor();
    [CompilerGeneratedAttribute]
public void set_IsConstructor(bool value);
    [CompilerGeneratedAttribute]
public bool get_InBrackets();
    [CompilerGeneratedAttribute]
public void set_InBrackets(bool value);
    public virtual OperatorPrecedence get_Precedence();
    public virtual bool get_IsExpression();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    public virtual bool IsEquivalentTo(AstNode otherNode);
}
public class Microsoft.Ajax.Utilities.CatchScope : BlockScope {
    [CompilerGeneratedAttribute]
private ParameterDeclaration <CatchParameter>k__BackingField;
    public ParameterDeclaration CatchParameter { get; public set; }
    internal CatchScope(ActivationObject parent, CodeSettings settings);
    [CompilerGeneratedAttribute]
public ParameterDeclaration get_CatchParameter();
    [CompilerGeneratedAttribute]
public void set_CatchParameter(ParameterDeclaration value);
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
public class Microsoft.Ajax.Utilities.ClassNode : AstNode {
    private AstNode m_binding;
    private AstNode m_heritage;
    private AstNodeList m_elements;
    [CompilerGeneratedAttribute]
private Context <ClassContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ExtendsContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OpenBrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <CloseBrace>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassType <ClassType>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockScope <Scope>k__BackingField;
    public Context ClassContext { get; public set; }
    public AstNode Binding { get; public set; }
    public Context ExtendsContext { get; public set; }
    public AstNode Heritage { get; public set; }
    public Context OpenBrace { get; public set; }
    public AstNodeList Elements { get; public set; }
    public Context CloseBrace { get; public set; }
    public ClassType ClassType { get; public set; }
    public bool IsExpression { get; }
    public BlockScope Scope { get; public set; }
    public bool IsDeclaration { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ClassNode(Context context);
    [CompilerGeneratedAttribute]
public Context get_ClassContext();
    [CompilerGeneratedAttribute]
public void set_ClassContext(Context value);
    public AstNode get_Binding();
    public void set_Binding(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_ExtendsContext();
    [CompilerGeneratedAttribute]
public void set_ExtendsContext(Context value);
    public AstNode get_Heritage();
    public void set_Heritage(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_OpenBrace();
    [CompilerGeneratedAttribute]
public void set_OpenBrace(Context value);
    public AstNodeList get_Elements();
    public void set_Elements(AstNodeList value);
    [CompilerGeneratedAttribute]
public Context get_CloseBrace();
    [CompilerGeneratedAttribute]
public void set_CloseBrace(Context value);
    [CompilerGeneratedAttribute]
public ClassType get_ClassType();
    [CompilerGeneratedAttribute]
public void set_ClassType(ClassType value);
    public virtual bool get_IsExpression();
    [CompilerGeneratedAttribute]
public BlockScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(BlockScope value);
    public virtual bool get_IsDeclaration();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public enum Microsoft.Ajax.Utilities.ClassType : Enum {
    public int value__;
    public static ClassType None;
    public static ClassType Declaration;
    public static ClassType Expression;
}
public class Microsoft.Ajax.Utilities.CodeSettings : CommonSettings {
    private bool m_minify;
    private bool m_amdSupport;
    private Dictionary`2<string, string> m_identifierReplacementMap;
    private HashSet`1<string> m_noRenameSet;
    private HashSet`1<string> m_knownGlobals;
    private HashSet`1<string> m_debugLookups;
    [CompilerGeneratedAttribute]
private bool <AlwaysEscapeNonAscii>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollapseToLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConstStatementsMozilla>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorIfNotInlineSafe>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EvalLiteralExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private EvalTreatment <EvalTreatment>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConditionalCompilation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePreprocessorDefines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineSafeStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalRenaming <LocalRenaming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MacSafariQuirks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ManualRenamesProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreprocessOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveFunctionNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveImportantComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuoteObjectLiteralProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReorderScopeDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveFunctionExpressionNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveUnneededCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptVersion <ScriptVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptSourceMode <SourceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripDebugStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceMap <SymbolsMap>k__BackingField;
    public bool HasRenamePairs { get; }
    public string RenamePairs { get; public set; }
    public IEnumerable`1<string> NoAutoRenameCollection { get; }
    public string NoAutoRenameList { get; public set; }
    public IEnumerable`1<string> KnownGlobalCollection { get; }
    public string KnownGlobalNamesList { get; public set; }
    public IEnumerable`1<string> DebugLookupCollection { get; }
    public string DebugLookupList { get; public set; }
    public bool AlwaysEscapeNonAscii { get; public set; }
    public bool AmdSupport { get; public set; }
    public bool CollapseToLiteral { get; public set; }
    public bool ConstStatementsMozilla { get; public set; }
    public bool ErrorIfNotInlineSafe { get; public set; }
    public bool EvalLiteralExpressions { get; public set; }
    public EvalTreatment EvalTreatment { get; public set; }
    public JavaScriptFormat Format { get; public set; }
    public bool IgnoreConditionalCompilation { get; public set; }
    public bool IgnorePreprocessorDefines { get; public set; }
    public bool InlineSafeStrings { get; public set; }
    public LocalRenaming LocalRenaming { get; public set; }
    public bool MacSafariQuirks { get; public set; }
    public bool MinifyCode { get; public set; }
    public bool ManualRenamesProperties { get; public set; }
    public bool PreprocessOnly { get; public set; }
    public bool PreserveFunctionNames { get; public set; }
    public bool PreserveImportantComments { get; public set; }
    public bool QuoteObjectLiteralProperties { get; public set; }
    public bool ReorderScopeDeclarations { get; public set; }
    public bool RemoveFunctionExpressionNames { get; public set; }
    public bool RemoveUnneededCode { get; public set; }
    public ScriptVersion ScriptVersion { get; public set; }
    public JavaScriptSourceMode SourceMode { get; public set; }
    public bool StrictMode { get; public set; }
    public bool StripDebugStatements { get; public set; }
    public ISourceMap SymbolsMap { get; public set; }
    public CodeSettings Clone();
    public bool AddRenamePair(string sourceName, string newName);
    public void ClearRenamePairs();
    public bool get_HasRenamePairs();
    public string GetNewName(string sourceName);
    public string get_RenamePairs();
    public void set_RenamePairs(string value);
    public IEnumerable`1<string> get_NoAutoRenameCollection();
    public int SetNoAutoRenames(IEnumerable`1<string> noRenameNames);
    public bool AddNoAutoRename(string noRename);
    public string get_NoAutoRenameList();
    public void set_NoAutoRenameList(string value);
    public IEnumerable`1<string> get_KnownGlobalCollection();
    public int SetKnownGlobalIdentifiers(IEnumerable`1<string> globalArray);
    public bool AddKnownGlobal(string identifier);
    public string get_KnownGlobalNamesList();
    public void set_KnownGlobalNamesList(string value);
    public IEnumerable`1<string> get_DebugLookupCollection();
    public int SetDebugNamespaces(IEnumerable`1<string> debugLookups);
    public bool AddDebugLookup(string debugNamespace);
    public string get_DebugLookupList();
    public void set_DebugLookupList(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysEscapeNonAscii();
    [CompilerGeneratedAttribute]
public void set_AlwaysEscapeNonAscii(bool value);
    public bool get_AmdSupport();
    public void set_AmdSupport(bool value);
    [CompilerGeneratedAttribute]
public bool get_CollapseToLiteral();
    [CompilerGeneratedAttribute]
public void set_CollapseToLiteral(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConstStatementsMozilla();
    [CompilerGeneratedAttribute]
public void set_ConstStatementsMozilla(bool value);
    [CompilerGeneratedAttribute]
public bool get_ErrorIfNotInlineSafe();
    [CompilerGeneratedAttribute]
public void set_ErrorIfNotInlineSafe(bool value);
    [CompilerGeneratedAttribute]
public bool get_EvalLiteralExpressions();
    [CompilerGeneratedAttribute]
public void set_EvalLiteralExpressions(bool value);
    [CompilerGeneratedAttribute]
public EvalTreatment get_EvalTreatment();
    [CompilerGeneratedAttribute]
public void set_EvalTreatment(EvalTreatment value);
    [CompilerGeneratedAttribute]
public JavaScriptFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(JavaScriptFormat value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConditionalCompilation();
    [CompilerGeneratedAttribute]
public void set_IgnoreConditionalCompilation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePreprocessorDefines();
    [CompilerGeneratedAttribute]
public void set_IgnorePreprocessorDefines(bool value);
    [CompilerGeneratedAttribute]
public bool get_InlineSafeStrings();
    [CompilerGeneratedAttribute]
public void set_InlineSafeStrings(bool value);
    [CompilerGeneratedAttribute]
public LocalRenaming get_LocalRenaming();
    [CompilerGeneratedAttribute]
public void set_LocalRenaming(LocalRenaming value);
    [CompilerGeneratedAttribute]
public bool get_MacSafariQuirks();
    [CompilerGeneratedAttribute]
public void set_MacSafariQuirks(bool value);
    public bool get_MinifyCode();
    public void set_MinifyCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManualRenamesProperties();
    [CompilerGeneratedAttribute]
public void set_ManualRenamesProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreprocessOnly();
    [CompilerGeneratedAttribute]
public void set_PreprocessOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveFunctionNames();
    [CompilerGeneratedAttribute]
public void set_PreserveFunctionNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveImportantComments();
    [CompilerGeneratedAttribute]
public void set_PreserveImportantComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuoteObjectLiteralProperties();
    [CompilerGeneratedAttribute]
public void set_QuoteObjectLiteralProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReorderScopeDeclarations();
    [CompilerGeneratedAttribute]
public void set_ReorderScopeDeclarations(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveFunctionExpressionNames();
    [CompilerGeneratedAttribute]
public void set_RemoveFunctionExpressionNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveUnneededCode();
    [CompilerGeneratedAttribute]
public void set_RemoveUnneededCode(bool value);
    [CompilerGeneratedAttribute]
public ScriptVersion get_ScriptVersion();
    [CompilerGeneratedAttribute]
public void set_ScriptVersion(ScriptVersion value);
    [CompilerGeneratedAttribute]
public JavaScriptSourceMode get_SourceMode();
    [CompilerGeneratedAttribute]
public void set_SourceMode(JavaScriptSourceMode value);
    [CompilerGeneratedAttribute]
public bool get_StrictMode();
    [CompilerGeneratedAttribute]
public void set_StrictMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_StripDebugStatements();
    [CompilerGeneratedAttribute]
public void set_StripDebugStatements(bool value);
    [CompilerGeneratedAttribute]
public ISourceMap get_SymbolsMap();
    [CompilerGeneratedAttribute]
public void set_SymbolsMap(ISourceMap value);
    public bool IsModificationAllowed(TreeModifications modification);
}
public class Microsoft.Ajax.Utilities.ColorSlice : object {
    private ColorName[] _colorArray;
    public static Dictionary`2<string, string> NameShorterThanHex { get; }
    public static Dictionary`2<string, string> StrictNameShorterThanHex { get; }
    public static Dictionary`2<string, string> HexShorterThanName { get; }
    public static Dictionary`2<string, string> StrictHexShorterThanNameAndAllNonStrict { get; }
    public static Dictionary`2<string, string> AllColorNames { get; }
    public static Dictionary`2<string, string> get_NameShorterThanHex();
    public static Dictionary`2<string, string> get_StrictNameShorterThanHex();
    public static Dictionary`2<string, string> get_HexShorterThanName();
    public static Dictionary`2<string, string> get_StrictHexShorterThanNameAndAllNonStrict();
    public static Dictionary`2<string, string> get_AllColorNames();
}
public class Microsoft.Ajax.Utilities.CommaOperator : BinaryOperator {
    public CommaOperator(Context context);
    public static AstNode CombineWithComma(Context context, AstNode operand1, AstNode operand2);
}
internal static class Microsoft.Ajax.Utilities.CommonData : object {
    private static Regex s_replacementToken;
    private static Regex s_decimalFormat;
    public static Regex ReplacementToken { get; }
    public static Regex DecimalFormat { get; }
    public static Regex get_ReplacementToken();
    public static Regex get_DecimalFormat();
}
public class Microsoft.Ajax.Utilities.CommonSettings : object {
    private int m_indentLevel;
    [CompilerGeneratedAttribute]
private bool <AllowEmbeddedAspNetBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockStart <BlocksStartOnSameLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreAllErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineBreakThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputMode <OutputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TermSemicolons>k__BackingField;
    [CompilerGeneratedAttribute]
private long <KillSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <IgnoreErrorCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PreprocessorValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResourceStrings> <ResourceStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ReplacementTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ReplacementFallbacks>k__BackingField;
    public bool AllowEmbeddedAspNetBlocks { get; public set; }
    public BlockStart BlocksStartOnSameLine { get; public set; }
    public bool IgnoreAllErrors { get; public set; }
    public int IndentSize { get; public set; }
    public int LineBreakThreshold { get; public set; }
    public OutputMode OutputMode { get; public set; }
    public bool TermSemicolons { get; public set; }
    public long KillSwitch { get; public set; }
    public string LineTerminator { get; }
    internal string TabSpaces { get; }
    public ICollection`1<string> IgnoreErrorCollection { get; private set; }
    public string IgnoreErrorList { get; public set; }
    public IDictionary`2<string, string> PreprocessorValues { get; private set; }
    public string PreprocessorDefineList { get; public set; }
    public IList`1<ResourceStrings> ResourceStrings { get; private set; }
    public IDictionary`2<string, string> ReplacementTokens { get; private set; }
    public IDictionary`2<string, string> ReplacementFallbacks { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_AllowEmbeddedAspNetBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowEmbeddedAspNetBlocks(bool value);
    [CompilerGeneratedAttribute]
public BlockStart get_BlocksStartOnSameLine();
    [CompilerGeneratedAttribute]
public void set_BlocksStartOnSameLine(BlockStart value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreAllErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreAllErrors(bool value);
    [CompilerGeneratedAttribute]
public int get_IndentSize();
    [CompilerGeneratedAttribute]
public void set_IndentSize(int value);
    [CompilerGeneratedAttribute]
public int get_LineBreakThreshold();
    [CompilerGeneratedAttribute]
public void set_LineBreakThreshold(int value);
    [CompilerGeneratedAttribute]
public OutputMode get_OutputMode();
    [CompilerGeneratedAttribute]
public void set_OutputMode(OutputMode value);
    [CompilerGeneratedAttribute]
public bool get_TermSemicolons();
    [CompilerGeneratedAttribute]
public void set_TermSemicolons(bool value);
    [CompilerGeneratedAttribute]
public long get_KillSwitch();
    [CompilerGeneratedAttribute]
public void set_KillSwitch(long value);
    public string get_LineTerminator();
    internal void Indent();
    internal void Unindent();
    internal string get_TabSpaces();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IgnoreErrorCollection();
    [CompilerGeneratedAttribute]
private void set_IgnoreErrorCollection(ICollection`1<string> value);
    public int SetIgnoreErrors(IEnumerable`1<string> ignoreErrors);
    public string get_IgnoreErrorList();
    public void set_IgnoreErrorList(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_PreprocessorValues();
    [CompilerGeneratedAttribute]
private void set_PreprocessorValues(IDictionary`2<string, string> value);
    public int SetPreprocessorDefines(String[] definedNames);
    public int SetPreprocessorValues(IDictionary`2<string, string> defines);
    public string get_PreprocessorDefineList();
    public void set_PreprocessorDefineList(string value);
    [CompilerGeneratedAttribute]
public IList`1<ResourceStrings> get_ResourceStrings();
    [CompilerGeneratedAttribute]
private void set_ResourceStrings(IList`1<ResourceStrings> value);
    public void AddResourceStrings(ResourceStrings resourceStrings);
    public void AddResourceStrings(IEnumerable`1<ResourceStrings> collection);
    public void ClearResourceStrings();
    public void RemoveResourceStrings(ResourceStrings resourceStrings);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ReplacementTokens();
    [CompilerGeneratedAttribute]
private void set_ReplacementTokens(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ReplacementFallbacks();
    [CompilerGeneratedAttribute]
private void set_ReplacementFallbacks(IDictionary`2<string, string> value);
    public void ReplacementTokensApplyDefaults(IDictionary`2<string, string> otherSet);
    public void ReplacementTokensApplyOverrides(IDictionary`2<string, string> otherSet);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Ajax.Utilities.CommonStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ContextSeparator { get; }
    internal static string FallbackEncodingFailed { get; }
    internal static string InvalidJSONOutput { get; }
    internal static string Severity0 { get; }
    internal static string Severity1 { get; }
    internal static string Severity2 { get; }
    internal static string Severity3 { get; }
    internal static string Severity4 { get; }
    internal static string SeverityUnknown { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ContextSeparator();
    internal static string get_FallbackEncodingFailed();
    internal static string get_InvalidJSONOutput();
    internal static string get_Severity0();
    internal static string get_Severity1();
    internal static string get_Severity2();
    internal static string get_Severity3();
    internal static string get_Severity4();
    internal static string get_SeverityUnknown();
}
public abstract class Microsoft.Ajax.Utilities.ComprehensionClause : AstNode {
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OpenContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <CloseContext>k__BackingField;
    public Context OperatorContext { get; public set; }
    public Context OpenContext { get; public set; }
    public Context CloseContext { get; public set; }
    protected ComprehensionClause(Context context);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_OpenContext();
    [CompilerGeneratedAttribute]
public void set_OpenContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_CloseContext();
    [CompilerGeneratedAttribute]
public void set_CloseContext(Context value);
}
public class Microsoft.Ajax.Utilities.ComprehensionForClause : ComprehensionClause {
    private AstNode m_binding;
    private AstNode m_expression;
    [CompilerGeneratedAttribute]
private bool <IsInOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OfContext>k__BackingField;
    public AstNode Binding { get; public set; }
    public bool IsInOperation { get; public set; }
    public Context OfContext { get; public set; }
    public AstNode Expression { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ComprehensionForClause(Context context);
    public AstNode get_Binding();
    public void set_Binding(AstNode value);
    [CompilerGeneratedAttribute]
public bool get_IsInOperation();
    [CompilerGeneratedAttribute]
public void set_IsInOperation(bool value);
    [CompilerGeneratedAttribute]
public Context get_OfContext();
    [CompilerGeneratedAttribute]
public void set_OfContext(Context value);
    public AstNode get_Expression();
    public void set_Expression(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ComprehensionIfClause : ComprehensionClause {
    private AstNode m_condition;
    public AstNode Condition { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ComprehensionIfClause(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ComprehensionNode : Expression {
    private AstNode m_expression;
    private AstNodeList m_clauses;
    [CompilerGeneratedAttribute]
private ComprehensionType <ComprehensionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MozillaOrdering>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OpenDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <CloseDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockScope <BlockScope>k__BackingField;
    public ComprehensionType ComprehensionType { get; public set; }
    public bool MozillaOrdering { get; public set; }
    public Context OpenDelimiter { get; public set; }
    public AstNode Expression { get; public set; }
    public AstNodeList Clauses { get; public set; }
    public Context CloseDelimiter { get; public set; }
    public BlockScope BlockScope { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ComprehensionNode(Context context);
    [CompilerGeneratedAttribute]
public ComprehensionType get_ComprehensionType();
    [CompilerGeneratedAttribute]
public void set_ComprehensionType(ComprehensionType value);
    [CompilerGeneratedAttribute]
public bool get_MozillaOrdering();
    [CompilerGeneratedAttribute]
public void set_MozillaOrdering(bool value);
    [CompilerGeneratedAttribute]
public Context get_OpenDelimiter();
    [CompilerGeneratedAttribute]
public void set_OpenDelimiter(Context value);
    public AstNode get_Expression();
    public void set_Expression(AstNode value);
    public AstNodeList get_Clauses();
    public void set_Clauses(AstNodeList value);
    [CompilerGeneratedAttribute]
public Context get_CloseDelimiter();
    [CompilerGeneratedAttribute]
public void set_CloseDelimiter(Context value);
    [CompilerGeneratedAttribute]
public BlockScope get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(BlockScope value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private bool <ReplaceChild>b__0(AstNodeList list);
}
public enum Microsoft.Ajax.Utilities.ComprehensionType : Enum {
    public int value__;
    public static ComprehensionType Array;
    public static ComprehensionType Generator;
}
public class Microsoft.Ajax.Utilities.Conditional : Expression {
    private AstNode m_condition;
    private AstNode m_trueExpression;
    private AstNode m_falseExpression;
    [CompilerGeneratedAttribute]
private Context <QuestionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public AstNode Condition { get; public set; }
    public AstNode TrueExpression { get; public set; }
    public AstNode FalseExpression { get; public set; }
    public Context QuestionContext { get; public set; }
    public Context ColonContext { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public Conditional(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public AstNode get_TrueExpression();
    public void set_TrueExpression(AstNode value);
    public AstNode get_FalseExpression();
    public void set_FalseExpression(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_QuestionContext();
    [CompilerGeneratedAttribute]
public void set_QuestionContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual OperatorPrecedence get_Precedence();
    public void SwapBranches();
    public virtual PrimitiveType FindPrimitiveType();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationComment : AstNode {
    private Block m_statements;
    public Block Statements { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationComment(Context context);
    public Block get_Statements();
    public void set_Statements(Block value);
    public virtual void Accept(IVisitor visitor);
    public void Append(AstNode statement);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationElse : ConditionalCompilationStatement {
    public ConditionalCompilationElse(Context context);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationElseIf : ConditionalCompilationStatement {
    private AstNode m_condition;
    public AstNode Condition { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationElseIf(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationEnd : ConditionalCompilationStatement {
    public ConditionalCompilationEnd(Context context);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationIf : ConditionalCompilationStatement {
    private AstNode m_condition;
    public AstNode Condition { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationIf(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationOn : ConditionalCompilationStatement {
    public ConditionalCompilationOn(Context context);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationSet : ConditionalCompilationStatement {
    private AstNode m_value;
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public AstNode Value { get; public set; }
    public string VariableName { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationSet(Context context);
    public AstNode get_Value();
    public void set_Value(AstNode value);
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public void set_VariableName(string value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public abstract class Microsoft.Ajax.Utilities.ConditionalCompilationStatement : AstNode {
    protected ConditionalCompilationStatement(Context context);
}
public enum Microsoft.Ajax.Utilities.Configuration.CodeType : Enum {
    public int value__;
    public static CodeType Unknown;
    public static CodeType JavaScript;
    public static CodeType StyleSheet;
    public static CodeType Mix;
}
public class Microsoft.Ajax.Utilities.Configuration.InputFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceOrigin <Origin>k__BackingField;
    public string Path { get; public set; }
    public string EncodingName { get; public set; }
    public bool Optional { get; public set; }
    public SourceOrigin Origin { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_EncodingName();
    [CompilerGeneratedAttribute]
public void set_EncodingName(string value);
    [CompilerGeneratedAttribute]
public bool get_Optional();
    [CompilerGeneratedAttribute]
public void set_Optional(bool value);
    [CompilerGeneratedAttribute]
public SourceOrigin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(SourceOrigin value);
}
public class Microsoft.Ajax.Utilities.Configuration.Manifest : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <DefaultArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RenameIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <NoRenameIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OutputGroup> <Outputs>k__BackingField;
    public IDictionary`2<string, string> DefaultArguments { get; private set; }
    public IDictionary`2<string, string> RenameIdentifiers { get; private set; }
    public ICollection`1<string> NoRenameIdentifiers { get; private set; }
    public IList`1<OutputGroup> Outputs { get; private set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_DefaultArguments();
    [CompilerGeneratedAttribute]
private void set_DefaultArguments(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RenameIdentifiers();
    [CompilerGeneratedAttribute]
private void set_RenameIdentifiers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_NoRenameIdentifiers();
    [CompilerGeneratedAttribute]
private void set_NoRenameIdentifiers(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<OutputGroup> get_Outputs();
    [CompilerGeneratedAttribute]
private void set_Outputs(IList`1<OutputGroup> value);
}
public static class Microsoft.Ajax.Utilities.Configuration.ManifestFactory : object {
    private static string ArgumentsElementName;
    private static string OutputElementName;
    private static string ResourceElementName;
    private static string InputElementName;
    private static string SymbolMapElementName;
    private static string RenameElementName;
    private static string NoRenameElementName;
    private static string PathAttributeName;
    private static string EncodingAttributeName;
    private static string EncodingAttributeShortName;
    private static string TypeAttributeName;
    private static string OriginAttributeName;
    private static string MapPathAttributeName;
    private static string SourceRootAttributeName;
    private static string SafeAttributeName;
    private static string NameAttributeName;
    private static string OptionalAttributeName;
    private static string ConfigAttributeName;
    private static string FromAttributeName;
    private static string ToAttributeName;
    private static string IdentifierAttributeName;
    public static Manifest Create(XmlReader reader);
    private static OutputGroup ReadOutputElement(XmlReader reader);
    private static void ReadRenameElement(XmlReader reader, IDictionary`2<string, string> renameIdentifiers);
    private static void ReadNoRenameElement(XmlReader reader, ICollection`1<string> noRenameIdentifiers);
    private static SymbolMap ReadSymbolMapElement(XmlReader reader);
    private static Resource ReadResourceElement(XmlReader reader);
    private static InputFile ReadInputElement(XmlReader reader);
    private static void ReadArgumentsElement(XmlReader reader, IDictionary`2<string, string> configDictionary);
}
public class Microsoft.Ajax.Utilities.Configuration.OutputGroup : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingName>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeType <CodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private SymbolMap <SymbolMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RenameIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <NoRenameIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Resource> <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<InputFile> <Inputs>k__BackingField;
    public string Path { get; public set; }
    public string EncodingName { get; public set; }
    public CodeType CodeType { get; public set; }
    public SymbolMap SymbolMap { get; public set; }
    public IDictionary`2<string, string> Arguments { get; private set; }
    public IDictionary`2<string, string> RenameIdentifiers { get; private set; }
    public ICollection`1<string> NoRenameIdentifiers { get; private set; }
    public IList`1<Resource> Resources { get; private set; }
    public IList`1<InputFile> Inputs { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_EncodingName();
    [CompilerGeneratedAttribute]
public void set_EncodingName(string value);
    [CompilerGeneratedAttribute]
public CodeType get_CodeType();
    [CompilerGeneratedAttribute]
public void set_CodeType(CodeType value);
    [CompilerGeneratedAttribute]
public SymbolMap get_SymbolMap();
    [CompilerGeneratedAttribute]
public void set_SymbolMap(SymbolMap value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RenameIdentifiers();
    [CompilerGeneratedAttribute]
private void set_RenameIdentifiers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_NoRenameIdentifiers();
    [CompilerGeneratedAttribute]
private void set_NoRenameIdentifiers(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<Resource> get_Resources();
    [CompilerGeneratedAttribute]
private void set_Resources(IList`1<Resource> value);
    [CompilerGeneratedAttribute]
public IList`1<InputFile> get_Inputs();
    [CompilerGeneratedAttribute]
private void set_Inputs(IList`1<InputFile> value);
}
public class Microsoft.Ajax.Utilities.Configuration.Resource : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    public string Path { get; public set; }
    public string Name { get; public set; }
    public bool Optional { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Optional();
    [CompilerGeneratedAttribute]
public void set_Optional(bool value);
}
public enum Microsoft.Ajax.Utilities.Configuration.SourceOrigin : Enum {
    public int value__;
    public static SourceOrigin Project;
    public static SourceOrigin External;
}
public class Microsoft.Ajax.Utilities.Configuration.SymbolMap : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SafeHeader>k__BackingField;
    public string Path { get; public set; }
    public string Name { get; public set; }
    public string SourceRoot { get; public set; }
    public Nullable`1<bool> SafeHeader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SourceRoot();
    [CompilerGeneratedAttribute]
public void set_SourceRoot(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SafeHeader();
    [CompilerGeneratedAttribute]
public void set_SafeHeader(Nullable`1<bool> value);
}
public class Microsoft.Ajax.Utilities.ConstantWrapper : Expression {
    private static Regex s_hexNumberFormat;
    private static Regex s_aspNetSubstitution;
    [CompilerGeneratedAttribute]
private bool <MayHaveIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveType <PrimitiveType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterToRegExp>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool MayHaveIssues { get; public set; }
    public object Value { get; public set; }
    public PrimitiveType PrimitiveType { get; public set; }
    public bool IsConstant { get; }
    public bool IsNumericLiteral { get; }
    public bool IsFiniteNumericLiteral { get; }
    public bool IsIntegerLiteral { get; }
    public bool IsExactInteger { get; }
    public bool IsNaN { get; }
    public bool IsInfinity { get; }
    public bool IsZero { get; }
    public bool IsBooleanLiteral { get; }
    public bool IsStringLiteral { get; }
    public bool IsParameterToRegExp { get; public set; }
    public bool IsSpecialNumeric { get; }
    public bool IsOtherDecimal { get; }
    public bool StringContainsAspNetReplacement { get; }
    public bool IsOkayToCombine { get; }
    public bool IsNotOneOrPositiveZero { get; }
    public bool IsNegativeZero { get; }
    public ConstantWrapper(object value, PrimitiveType primitiveType, Context context);
    private static ConstantWrapper();
    [CompilerGeneratedAttribute]
public bool get_MayHaveIssues();
    [CompilerGeneratedAttribute]
public void set_MayHaveIssues(bool value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public PrimitiveType get_PrimitiveType();
    [CompilerGeneratedAttribute]
public void set_PrimitiveType(PrimitiveType value);
    public virtual bool get_IsConstant();
    public bool get_IsNumericLiteral();
    public bool get_IsFiniteNumericLiteral();
    public bool get_IsIntegerLiteral();
    public bool get_IsExactInteger();
    public bool get_IsNaN();
    public bool get_IsInfinity();
    public bool get_IsZero();
    public bool get_IsBooleanLiteral();
    public bool get_IsStringLiteral();
    [CompilerGeneratedAttribute]
public bool get_IsParameterToRegExp();
    [CompilerGeneratedAttribute]
public void set_IsParameterToRegExp(bool value);
    public bool get_IsSpecialNumeric();
    public bool get_IsOtherDecimal();
    public bool get_StringContainsAspNetReplacement();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual void Accept(IVisitor visitor);
    private static void AddEscape(string unescapedRun, string escapedText, StringBuilder& sb);
    public static string EscapeString(string text, bool isRegularExpression, bool useW3Strict, bool useStrict);
    private static bool OkayToDoubleQuote(string text);
    public double ToNumber();
    public bool get_IsOkayToCombine();
    public static bool NumberIsOkayToCombine(double numericValue);
    public bool get_IsNotOneOrPositiveZero();
    public bool get_IsNegativeZero();
    internal double ToInteger();
    internal int ToInt32();
    internal UInt32 ToUInt32();
    public bool ToBoolean();
    public StringList Concat(ConstantWrapper other);
    public virtual string ToString();
    private static bool IsOnlyDecimalDigits(string text);
    [CompilerGeneratedAttribute]
private static bool <IsOnlyDecimalDigits>b__0(string s);
    [CompilerGeneratedAttribute]
private static bool <IsOnlyDecimalDigits>b__1(char c);
}
public class Microsoft.Ajax.Utilities.ConstantWrapperPP : Expression {
    [CompilerGeneratedAttribute]
private string <VarName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceComments>k__BackingField;
    public string VarName { get; public set; }
    public bool ForceComments { get; public set; }
    public ConstantWrapperPP(Context context);
    [CompilerGeneratedAttribute]
public string get_VarName();
    [CompilerGeneratedAttribute]
public void set_VarName(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceComments();
    [CompilerGeneratedAttribute]
public void set_ForceComments(bool value);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConstStatement : Declaration {
    public ConstStatement(Context context);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.Context : object {
    [CompilerGeneratedAttribute]
private DocumentContext <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceOffsetStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceOffsetEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private JSToken <Token>k__BackingField;
    public DocumentContext Document { get; private set; }
    public int StartLineNumber { get; internal set; }
    public int StartLinePosition { get; internal set; }
    public int StartPosition { get; internal set; }
    public int EndLineNumber { get; internal set; }
    public int EndLinePosition { get; internal set; }
    public int EndPosition { get; internal set; }
    public int SourceOffsetStart { get; internal set; }
    public int SourceOffsetEnd { get; internal set; }
    public int OutputLine { get; public set; }
    public int OutputColumn { get; public set; }
    public JSToken Token { get; internal set; }
    public int StartColumn { get; }
    public int EndColumn { get; }
    public bool HasCode { get; }
    public string Code { get; }
    private string ErrorSegment { get; }
    public Context(DocumentContext document);
    public Context(DocumentContext document, int startLineNumber, int startLinePosition, int startPosition, int endLineNumber, int endLinePosition, int endPosition, JSToken token);
    [CompilerGeneratedAttribute]
public DocumentContext get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(DocumentContext value);
    [CompilerGeneratedAttribute]
public int get_StartLineNumber();
    [CompilerGeneratedAttribute]
internal void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_StartLinePosition();
    [CompilerGeneratedAttribute]
internal void set_StartLinePosition(int value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
internal void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndLineNumber();
    [CompilerGeneratedAttribute]
internal void set_EndLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndLinePosition();
    [CompilerGeneratedAttribute]
internal void set_EndLinePosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
internal void set_EndPosition(int value);
    [CompilerGeneratedAttribute]
public int get_SourceOffsetStart();
    [CompilerGeneratedAttribute]
internal void set_SourceOffsetStart(int value);
    [CompilerGeneratedAttribute]
public int get_SourceOffsetEnd();
    [CompilerGeneratedAttribute]
internal void set_SourceOffsetEnd(int value);
    [CompilerGeneratedAttribute]
public int get_OutputLine();
    [CompilerGeneratedAttribute]
public void set_OutputLine(int value);
    [CompilerGeneratedAttribute]
public int get_OutputColumn();
    [CompilerGeneratedAttribute]
public void set_OutputColumn(int value);
    [CompilerGeneratedAttribute]
public JSToken get_Token();
    [CompilerGeneratedAttribute]
internal void set_Token(JSToken value);
    public int get_StartColumn();
    public int get_EndColumn();
    public bool get_HasCode();
    public string get_Code();
    private string get_ErrorSegment();
    public void SetData(Context input);
    public Context Clone();
    public Context FlattenToStart();
    public Context FlattenToEnd();
    public Context CombineWith(Context other);
    public Context SplitStart(int length);
    public Context UpdateWith(Context other);
    public bool Is(JSToken token);
    public bool IsEither(JSToken token1, JSToken token2);
    public bool IsOne(JSToken[] tokens);
    public bool IsOne(Boolean[] tokenMap);
    public bool IsNot(JSToken token);
    public bool IsNotAny(JSToken[] tokens);
    [LocalizableAttribute("False")]
public bool Is(string text);
    internal void ReportUndefined(Lookup lookup);
    internal void ChangeFileContext(string fileContext);
    public static string GetErrorString(JSError errorCode);
    internal void HandleError(JSError errorId, bool forceToError);
    public bool IsBefore(Context other);
    public virtual string ToString();
    private static int GetSeverity(JSError errorCode);
}
public class Microsoft.Ajax.Utilities.ContextError : object {
    [CompilerGeneratedAttribute]
private int <ErrorNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subcategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    public int ErrorNumber { get; public set; }
    public string File { get; public set; }
    public int Severity { get; public set; }
    public string Subcategory { get; public set; }
    [LocalizableAttribute("False")]
public string ErrorCode { get; public set; }
    public int StartLine { get; public set; }
    public int StartColumn { get; public set; }
    public int EndLine { get; public set; }
    public int EndColumn { get; public set; }
    public string Message { get; public set; }
    public bool IsError { get; public set; }
    public string HelpKeyword { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ErrorNumber();
    [CompilerGeneratedAttribute]
public void set_ErrorNumber(int value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Severity();
    [CompilerGeneratedAttribute]
public virtual void set_Severity(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Subcategory();
    [CompilerGeneratedAttribute]
public virtual void set_Subcategory(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ErrorCode();
    [CompilerGeneratedAttribute]
public virtual void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public virtual int get_StartLine();
    [CompilerGeneratedAttribute]
public virtual void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public virtual int get_StartColumn();
    [CompilerGeneratedAttribute]
public virtual void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public virtual int get_EndLine();
    [CompilerGeneratedAttribute]
public virtual void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public virtual int get_EndColumn();
    [CompilerGeneratedAttribute]
public virtual void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsError();
    [CompilerGeneratedAttribute]
public virtual void set_IsError(bool value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
    public virtual string ToString();
    internal static string GetSubcategory(int severity);
}
public class Microsoft.Ajax.Utilities.ContextErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ContextError <Error>k__BackingField;
    public ContextError Error { get; public set; }
    [CompilerGeneratedAttribute]
public ContextError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ContextError value);
}
public class Microsoft.Ajax.Utilities.ContinueNode : AstNode {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <LabelContext>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelInfo <LabelInfo>k__BackingField;
    public string Label { get; public set; }
    public Context LabelContext { get; public set; }
    public LabelInfo LabelInfo { get; public set; }
    public ContinueNode(Context context);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Context get_LabelContext();
    [CompilerGeneratedAttribute]
public void set_LabelContext(Context value);
    [CompilerGeneratedAttribute]
public LabelInfo get_LabelInfo();
    [CompilerGeneratedAttribute]
public void set_LabelInfo(LabelInfo value);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.CrunchEnumerator : object {
    private static int PrecalculateLength;
    private HashSet`1<string> m_skipNames;
    private int m_currentName;
    private static string s_varFirstLetters;
    private static string s_varPartLetters;
    private static String[] s_smallNames;
    public static string FirstLetters { get; public set; }
    public static string PartLetters { get; public set; }
    private string CurrentName { get; }
    internal CrunchEnumerator(HashSet`1<string> avoidNames);
    private static CrunchEnumerator();
    public static string get_FirstLetters();
    public static void set_FirstLetters(string value);
    public static string get_PartLetters();
    public static void set_PartLetters(string value);
    internal string NextName();
    private string get_CurrentName();
    private static String[] PrecalculateFrequentNames();
    public static string CrunchedLabel(int nestLevel);
    public static string GenerateNameFromNumber(int index);
}
public enum Microsoft.Ajax.Utilities.CssColor : Enum {
    public int value__;
    public static CssColor Strict;
    public static CssColor Hex;
    public static CssColor Major;
    public static CssColor NoSwap;
}
public enum Microsoft.Ajax.Utilities.CssComment : Enum {
    public int value__;
    public static CssComment Important;
    public static CssComment None;
    public static CssComment All;
    public static CssComment Hacks;
}
internal class Microsoft.Ajax.Utilities.CssContext : object {
    private Position m_start;
    private Position m_end;
    public Position Start { get; }
    public Position End { get; }
    internal CssContext(Position start, Position end);
    public Position get_Start();
    public Position get_End();
    public void Advance();
    public CssContext Clone();
    public void Reset(int line, int column);
}
public class Microsoft.Ajax.Utilities.CssEncoderFallback : EncoderFallback {
    public int MaxCharCount { get; }
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual int get_MaxCharCount();
}
internal class Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer : EncoderFallbackBuffer {
    private string m_fallbackString;
    private int m_position;
    private static string s_giveUpString;
    public int Remaining { get; }
    private static CssEncoderFallbackBuffer();
    public virtual int get_Remaining();
    private static string GetEncoding(int charValue);
    public virtual bool Fallback(char charUnknown, int index);
    public virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public virtual char GetNextChar();
    public virtual bool MovePrevious();
    public virtual void Reset();
    public virtual string ToString();
}
public enum Microsoft.Ajax.Utilities.CssErrorCode : Enum {
    public int value__;
    public static CssErrorCode NoError;
    public static CssErrorCode UnknownError;
    public static CssErrorCode UnterminatedComment;
    public static CssErrorCode UnterminatedString;
    public static CssErrorCode UnnecessaryUnits;
    public static CssErrorCode UnexpectedNumberCharacter;
    public static CssErrorCode ExpectedOpenParenthesis;
    public static CssErrorCode InvalidLowSurrogate;
    public static CssErrorCode HighSurrogateNoLow;
    public static CssErrorCode UnderscoreNotValid;
    public static CssErrorCode UnexpectedEscape;
    public static CssErrorCode UnexpectedStringCharacter;
    public static CssErrorCode DecimalNoDigit;
    public static CssErrorCode EquivalentNumbers;
    public static CssErrorCode ScannerSubsystem;
    public static CssErrorCode UnknownCharacterEncoding;
    public static CssErrorCode ParserSubsystem;
    public static CssErrorCode ExpectedCharset;
    public static CssErrorCode ExpectedSemicolon;
    public static CssErrorCode UnexpectedToken;
    public static CssErrorCode UnexpectedAtKeyword;
    public static CssErrorCode ExpectedNamespace;
    public static CssErrorCode ExpectedImport;
    public static CssErrorCode ExpectedCommaOrSemicolon;
    public static CssErrorCode ExpectedMediaIdentifier;
    public static CssErrorCode ExpectedCommaOrOpenBrace;
    public static CssErrorCode ExpectedOpenBrace;
    public static CssErrorCode ExpectedSemicolonOrOpenBrace;
    public static CssErrorCode DeclarationIgnoredFormat;
    public static CssErrorCode DeclarationIgnored;
    public static CssErrorCode ExpectedIdentifier;
    public static CssErrorCode ExpectedSelector;
    public static CssErrorCode ExpectedIdentifierOrString;
    public static CssErrorCode ExpectedClosingBracket;
    public static CssErrorCode ExpectedClosingParenthesis;
    public static CssErrorCode ExpectedColon;
    public static CssErrorCode ExpectedExpression;
    public static CssErrorCode HashAfterUnaryNotAllowed;
    public static CssErrorCode ExpectedHexColor;
    public static CssErrorCode TokenAfterUnaryNotAllowed;
    public static CssErrorCode UnexpectedDimension;
    public static CssErrorCode ExpectedProgId;
    public static CssErrorCode ExpectedFunction;
    public static CssErrorCode ProgIdIEOnly;
    public static CssErrorCode ExpectedEqualSign;
    public static CssErrorCode ExpectedTerm;
    public static CssErrorCode ExpectedComma;
    public static CssErrorCode ExpectedRgbNumberOrPercentage;
    public static CssErrorCode ColorCanBeCollapsed;
    public static CssErrorCode HackGeneratesInvalidCss;
    public static CssErrorCode ExpectedEndOfFile;
    public static CssErrorCode DuplicateNamespaceDeclaration;
    public static CssErrorCode UndeclaredNamespace;
    public static CssErrorCode InvalidUnicodeRange;
    public static CssErrorCode ExpressionError;
    public static CssErrorCode ExpectedMediaQueryExpression;
    public static CssErrorCode ExpectedMediaFeature;
    public static CssErrorCode ExpectedMediaQuery;
    public static CssErrorCode MediaQueryRequiresSpace;
    public static CssErrorCode PossibleInvalidClassName;
    public static CssErrorCode ExpectedClosingBrace;
    public static CssErrorCode ExpectedPercentageFromOrTo;
    public static CssErrorCode ExpectedSemicolonOrClosingBrace;
    public static CssErrorCode ExpectedUnit;
    public static CssErrorCode ExpectedProduct;
    public static CssErrorCode ExpectedSum;
    public static CssErrorCode UnexpectedEndOfFile;
    public static CssErrorCode ExpectedNumber;
    public static CssErrorCode UnexpectedCharset;
    public static CssErrorCode PossibleCharsetError;
    public static CssErrorCode UnexpectedFunction;
}
public class Microsoft.Ajax.Utilities.CssParser : object {
    private CssScanner m_scanner;
    private CssToken m_currentToken;
    private bool m_noOutput;
    private string m_lastOutputString;
    private bool m_mightNeedSpace;
    private bool m_skippedSpace;
    private int m_lineLength;
    private bool m_noColorAbbreviation;
    private bool m_encounteredNewLine;
    private Stack`1<StringBuilder> m_builders;
    private bool m_outputNewLine;
    private bool m_forceNewLine;
    private HashSet`1<string> m_namespaces;
    private CodeSettings m_jsSettings;
    private static Regex s_vendorSpecific;
    private static Regex s_regexHack1;
    private static Regex s_regexHack2;
    private static Regex s_regexHack3;
    private static Regex s_regexHack4;
    private static Regex s_regexHack5;
    private static Regex s_regexHack6;
    private static Regex s_regexHack7;
    private static Regex s_rrggbb;
    private bool m_parsingColorValue;
    private static Regex s_valueReplacement;
    private string m_valueReplacement;
    private static Regex s_sharepointReplacement;
    private EventHandler`1<ContextErrorEventArgs> CssError;
    [CompilerGeneratedAttribute]
private CssSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <EchoWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    public CssSettings Settings { get; public set; }
    public TextWriter EchoWriter { get; public set; }
    public string FileContext { get; public set; }
    public CodeSettings JSSettings { get; public set; }
    private TokenType CurrentTokenType { get; }
    private string CurrentTokenText { get; }
    private static CssParser();
    [CompilerGeneratedAttribute]
public CssSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(CssSettings value);
    [CompilerGeneratedAttribute]
public TextWriter get_EchoWriter();
    [CompilerGeneratedAttribute]
public void set_EchoWriter(TextWriter value);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
public void set_FileContext(string value);
    public CodeSettings get_JSSettings();
    public void set_JSSettings(CodeSettings value);
    private TokenType get_CurrentTokenType();
    private string get_CurrentTokenText();
    public string Parse(string source);
    private void PushWaypoint();
    private bool PopWaypoint(bool keepText);
    private string UnwindStackCompletely();
    private string HandleCharset(string source);
    private Parsed ParseStylesheet();
    private Parsed ParseCharset();
    private void ParseSCDOCDCComments();
    private Parsed ParseAtKeyword();
    private Parsed ParseAspNetBlock();
    private Parsed ParseNamespace();
    private void ValidateNamespace(string namespaceIdent);
    private Parsed ParseKeyFrames();
    private void ParseKeyFrameBlocks();
    private Parsed ParseKeyFrameSelectors();
    private Parsed ParseImport();
    private Parsed ParseMedia();
    private Parsed ParseMediaQueryList(bool mightNeedSpace);
    private Parsed ParseMediaQuery(bool firstQuery);
    private void ParseMediaQueryExpression();
    private Parsed ParseDeclarationBlock(bool allowMargins);
    private Parsed ParseDeclarationList(bool allowMargins);
    private Parsed ParsePage();
    private Parsed ParsePseudoPage();
    private Parsed ParseMargin();
    private Parsed ParseFontFace();
    private Parsed ParseOperator();
    private Parsed ParseCombinator();
    private Parsed ParseRule();
    private Parsed ParseSelectorList();
    private Parsed ParseSelector();
    private Parsed ParseSimpleSelector();
    private Parsed ParseClass();
    private Parsed ParseElementName();
    private Parsed ParseAttrib();
    private Parsed ParsePseudo();
    private Parsed ParseExpression();
    private Parsed ParseDeclaration();
    private Parsed ParsePrio();
    private Parsed ParseExpr();
    private Parsed ParseFunctionParameters();
    private Parsed ParseTerm(bool wasEmpty);
    private Parsed ParseProgId();
    private static string GetRoot(string text);
    private Parsed ParseFunction();
    private Parsed ParseRgb();
    private Parsed ParseExpressionFunction();
    private Parsed ParseHexcolor();
    private Parsed ParseUnit();
    private Parsed ParseProduct();
    private Parsed ParseSum();
    private Parsed ParseMinMax();
    private Parsed ParseCalc();
    private TokenType NextToken();
    private TokenType NextRawToken();
    private string NextSignificantToken();
    private void UpdateIfReplacementToken();
    private void SkipSpace();
    private void SkipSpaceComment();
    private bool SkipIfSpace();
    private void SkipToEndOfStatement();
    private void SkipToEndOfDeclaration();
    private void SkipToClose();
    private void SkipSemicolons();
    private static bool NeedsSpaceBefore(string text);
    private static bool NeedsSpaceAfter(string text);
    private bool AppendCurrent();
    private bool Append(object obj, TokenType tokenType);
    private string GetReplacementValue(Match match);
    private static bool EscapeCharacter(StringBuilder sb, char character);
    private bool Append(object obj);
    private void NewLine();
    private void AddNewLine();
    private void Indent();
    private void Unindent();
    private static string CrunchHexColor(string hexColor, CssColor colorNames, bool noAbbr);
    private static bool MightContainColorNames(string propertyName);
    public static string ErrorFormat(CssErrorCode errorCode);
    private void ReportError(int severity, CssErrorCode errorNumber, CssContext context, Object[] arguments);
    private void ReportError(int severity, CssErrorCode errorNumber, Object[] arguments);
    public void add_CssError(EventHandler`1<ContextErrorEventArgs> value);
    public void remove_CssError(EventHandler`1<ContextErrorEventArgs> value);
    protected void OnCssError(ContextError cssError);
    private static string NormalizedValueReplacementComment(string source);
    private static bool CommentContainsText(string comment);
    private string NormalizeImportantComment(string source);
    [CompilerGeneratedAttribute]
private void <Parse>b__2(object sender, ContextErrorEventArgs ea);
    [CompilerGeneratedAttribute]
private void <Parse>b__3(object sender, CssScannerContextChangeEventArgs ea);
}
internal class Microsoft.Ajax.Utilities.CssScanner : object {
    private static string c_scanIncludes;
    private static string c_dashMatch;
    private static string c_prefixMatch;
    private static string c_suffixMatch;
    private static string c_substringMatch;
    private static string c_commentStart;
    private static string c_commentEnd;
    private TextReader m_reader;
    private string m_readAhead;
    private StringBuilder m_scanBuilder;
    private StringBuilder m_literalBuilder;
    private char m_currentChar;
    private string m_rawNumber;
    private CssContext m_context;
    private static Regex s_leadingZeros;
    private static Regex s_trailingZeros;
    private static Regex s_sourceDirective;
    private static Regex s_sassSourceDirective;
    private bool m_isAtEOF;
    private EventHandler`1<ContextErrorEventArgs> ScannerError;
    private EventHandler`1<CssScannerContextChangeEventArgs> ContextChange;
    [CompilerGeneratedAttribute]
private bool <AllowEmbeddedAspNetBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GotEndOfLine>k__BackingField;
    public string RawNumber { get; }
    public bool AllowEmbeddedAspNetBlocks { get; public set; }
    public bool GotEndOfLine { get; public set; }
    public bool EndOfFile { get; }
    public CssScanner(TextReader reader);
    private static CssScanner();
    public string get_RawNumber();
    [CompilerGeneratedAttribute]
public bool get_AllowEmbeddedAspNetBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowEmbeddedAspNetBlocks(bool value);
    [CompilerGeneratedAttribute]
public bool get_GotEndOfLine();
    [CompilerGeneratedAttribute]
public void set_GotEndOfLine(bool value);
    public bool get_EndOfFile();
    public CssToken NextToken();
    public CssToken ScanReplacementToken();
    private static TokenType GetVendorSpecificFunctionType(string name);
    private CssToken ScanWhiteSpace();
    private CssToken ScanComment();
    private void EatOneLineBreak();
    private bool PreprocessingDirective(string comment);
    private CssToken ScanAspNetBlock();
    private CssToken ScanCDO();
    private CssToken ScanCDC();
    private CssToken ScanIncludes();
    private CssToken ScanDashMatch();
    private CssToken ScanPrefixMatch();
    private CssToken ScanSuffixMatch();
    private CssToken ScanSubstringMatch();
    private CssToken ScanString();
    private CssToken ScanHash();
    private CssToken ScanAtKeyword();
    private CssToken ScanImportant();
    private CssToken ScanUnicodeRange();
    private CssToken ScanUrl();
    private CssToken ScanNum();
    private CssToken ScanIdent();
    private CssToken ScanProgId();
    private static bool IsSpace(char ch);
    private static int HValue(char ch);
    public static bool IsH(char ch);
    private static bool IsD(char ch);
    private static bool IsNonAscii(char ch);
    internal static bool IsNmChar(char ch);
    private string GetReplacementToken(bool advancePastDelimiter);
    private int GetUnicodeEncodingValue(Boolean& follwedByWhitespace);
    private string GetUnicode();
    private static string ConvertUtf32ToUtf16(int unicodeValue);
    private string GetEscape();
    private string GetNmStart();
    private string GetNmChar();
    private string GetString();
    private void SkipAspNetBlock();
    private string GetIdent();
    private string GetName();
    private string GetNum();
    private string GetUrl();
    private string GetW();
    private string GetNewline();
    private void NextChar();
    public char PeekChar();
    private bool ReadString(string str);
    private void PushChar(char ch);
    private void PushString(string str);
    private void ReportError(int severity, CssErrorCode error, Object[] args);
    public void add_ScannerError(EventHandler`1<ContextErrorEventArgs> value);
    public void remove_ScannerError(EventHandler`1<ContextErrorEventArgs> value);
    protected void OnScannerError(ContextError error);
    public void add_ContextChange(EventHandler`1<CssScannerContextChangeEventArgs> value);
    public void remove_ContextChange(EventHandler`1<CssScannerContextChangeEventArgs> value);
    protected void OnContextChange(string fileContext, int line, int column);
}
internal class Microsoft.Ajax.Utilities.CssScannerContextChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    public string FileContext { get; private set; }
    public CssScannerContextChangeEventArgs(string fileContext);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
private void set_FileContext(string value);
}
public class Microsoft.Ajax.Utilities.CssSettings : CommonSettings {
    [CompilerGeneratedAttribute]
private CssColor <ColorNames>k__BackingField;
    [CompilerGeneratedAttribute]
private CssComment <CommentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private CssType <CssType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveEmptyBlocks>k__BackingField;
    public CssColor ColorNames { get; public set; }
    public CssComment CommentMode { get; public set; }
    public bool MinifyExpressions { get; public set; }
    public CssType CssType { get; public set; }
    public bool RemoveEmptyBlocks { get; public set; }
    public CssSettings Clone();
    [CompilerGeneratedAttribute]
public CssColor get_ColorNames();
    [CompilerGeneratedAttribute]
public void set_ColorNames(CssColor value);
    [CompilerGeneratedAttribute]
public CssComment get_CommentMode();
    [CompilerGeneratedAttribute]
public void set_CommentMode(CssComment value);
    [CompilerGeneratedAttribute]
public bool get_MinifyExpressions();
    [CompilerGeneratedAttribute]
public void set_MinifyExpressions(bool value);
    [CompilerGeneratedAttribute]
public CssType get_CssType();
    [CompilerGeneratedAttribute]
public void set_CssType(CssType value);
    [CompilerGeneratedAttribute]
public bool get_RemoveEmptyBlocks();
    [CompilerGeneratedAttribute]
public void set_RemoveEmptyBlocks(bool value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Ajax.Utilities.CssStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ColorCanBeCollapsed { get; }
    internal static string DecimalNoDigit { get; }
    internal static string DeclarationIgnored { get; }
    internal static string DeclarationIgnoredFormat { get; }
    internal static string DuplicateNamespaceDeclaration { get; }
    internal static string EquivalentNumbers { get; }
    internal static string ExpectedCharset { get; }
    internal static string ExpectedClosingBrace { get; }
    internal static string ExpectedClosingBracket { get; }
    internal static string ExpectedClosingParenthesis { get; }
    internal static string ExpectedColon { get; }
    internal static string ExpectedComma { get; }
    internal static string ExpectedCommaOrOpenBrace { get; }
    internal static string ExpectedCommaOrSemicolon { get; }
    internal static string ExpectedEndOfFile { get; }
    internal static string ExpectedEqualSign { get; }
    internal static string ExpectedExpression { get; }
    internal static string ExpectedFunction { get; }
    internal static string ExpectedHexColor { get; }
    internal static string ExpectedIdentifier { get; }
    internal static string ExpectedIdentifierOrString { get; }
    internal static string ExpectedImport { get; }
    internal static string ExpectedMediaFeature { get; }
    internal static string ExpectedMediaIdentifier { get; }
    internal static string ExpectedMediaQuery { get; }
    internal static string ExpectedMediaQueryExpression { get; }
    internal static string ExpectedNamespace { get; }
    internal static string ExpectedNumber { get; }
    internal static string ExpectedOpenBrace { get; }
    internal static string ExpectedOpenParenthesis { get; }
    internal static string ExpectedPercentageFromOrTo { get; }
    internal static string ExpectedProduct { get; }
    internal static string ExpectedProgId { get; }
    internal static string ExpectedRgbNumberOrPercentage { get; }
    internal static string ExpectedSelector { get; }
    internal static string ExpectedSemicolon { get; }
    internal static string ExpectedSemicolonOrClosingBrace { get; }
    internal static string ExpectedSemicolonOrOpenBrace { get; }
    internal static string ExpectedSum { get; }
    internal static string ExpectedTerm { get; }
    internal static string ExpectedUnit { get; }
    internal static string ExpressionError { get; }
    internal static string HackGeneratesInvalidCss { get; }
    internal static string HashAfterUnaryNotAllowed { get; }
    internal static string HighSurrogateNoLow { get; }
    internal static string InvalidLowSurrogate { get; }
    internal static string InvalidUnicodeRange { get; }
    internal static string MediaQueryRequiresSpace { get; }
    internal static string ParserSubsystem { get; }
    internal static string PossibleCharsetError { get; }
    internal static string PossibleInvalidClassName { get; }
    internal static string ProgIdIEOnly { get; }
    internal static string ScannerSubsystem { get; }
    internal static string TokenAfterUnaryNotAllowed { get; }
    internal static string UndeclaredNamespace { get; }
    internal static string UnderscoreNotValid { get; }
    internal static string UnexpectedAtKeyword { get; }
    internal static string UnexpectedCharset { get; }
    internal static string UnexpectedDimension { get; }
    internal static string UnexpectedEndOfFile { get; }
    internal static string UnexpectedEscape { get; }
    internal static string UnexpectedFunction { get; }
    internal static string UnexpectedNumberCharacter { get; }
    internal static string UnexpectedStringCharacter { get; }
    internal static string UnexpectedToken { get; }
    internal static string UnknownCharacterEncoding { get; }
    internal static string UnknownError { get; }
    internal static string UnnecessaryUnits { get; }
    internal static string UnterminatedComment { get; }
    internal static string UnterminatedString { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ColorCanBeCollapsed();
    internal static string get_DecimalNoDigit();
    internal static string get_DeclarationIgnored();
    internal static string get_DeclarationIgnoredFormat();
    internal static string get_DuplicateNamespaceDeclaration();
    internal static string get_EquivalentNumbers();
    internal static string get_ExpectedCharset();
    internal static string get_ExpectedClosingBrace();
    internal static string get_ExpectedClosingBracket();
    internal static string get_ExpectedClosingParenthesis();
    internal static string get_ExpectedColon();
    internal static string get_ExpectedComma();
    internal static string get_ExpectedCommaOrOpenBrace();
    internal static string get_ExpectedCommaOrSemicolon();
    internal static string get_ExpectedEndOfFile();
    internal static string get_ExpectedEqualSign();
    internal static string get_ExpectedExpression();
    internal static string get_ExpectedFunction();
    internal static string get_ExpectedHexColor();
    internal static string get_ExpectedIdentifier();
    internal static string get_ExpectedIdentifierOrString();
    internal static string get_ExpectedImport();
    internal static string get_ExpectedMediaFeature();
    internal static string get_ExpectedMediaIdentifier();
    internal static string get_ExpectedMediaQuery();
    internal static string get_ExpectedMediaQueryExpression();
    internal static string get_ExpectedNamespace();
    internal static string get_ExpectedNumber();
    internal static string get_ExpectedOpenBrace();
    internal static string get_ExpectedOpenParenthesis();
    internal static string get_ExpectedPercentageFromOrTo();
    internal static string get_ExpectedProduct();
    internal static string get_ExpectedProgId();
    internal static string get_ExpectedRgbNumberOrPercentage();
    internal static string get_ExpectedSelector();
    internal static string get_ExpectedSemicolon();
    internal static string get_ExpectedSemicolonOrClosingBrace();
    internal static string get_ExpectedSemicolonOrOpenBrace();
    internal static string get_ExpectedSum();
    internal static string get_ExpectedTerm();
    internal static string get_ExpectedUnit();
    internal static string get_ExpressionError();
    internal static string get_HackGeneratesInvalidCss();
    internal static string get_HashAfterUnaryNotAllowed();
    internal static string get_HighSurrogateNoLow();
    internal static string get_InvalidLowSurrogate();
    internal static string get_InvalidUnicodeRange();
    internal static string get_MediaQueryRequiresSpace();
    internal static string get_ParserSubsystem();
    internal static string get_PossibleCharsetError();
    internal static string get_PossibleInvalidClassName();
    internal static string get_ProgIdIEOnly();
    internal static string get_ScannerSubsystem();
    internal static string get_TokenAfterUnaryNotAllowed();
    internal static string get_UndeclaredNamespace();
    internal static string get_UnderscoreNotValid();
    internal static string get_UnexpectedAtKeyword();
    internal static string get_UnexpectedCharset();
    internal static string get_UnexpectedDimension();
    internal static string get_UnexpectedEndOfFile();
    internal static string get_UnexpectedEscape();
    internal static string get_UnexpectedFunction();
    internal static string get_UnexpectedNumberCharacter();
    internal static string get_UnexpectedStringCharacter();
    internal static string get_UnexpectedToken();
    internal static string get_UnknownCharacterEncoding();
    internal static string get_UnknownError();
    internal static string get_UnnecessaryUnits();
    internal static string get_UnterminatedComment();
    internal static string get_UnterminatedString();
}
internal class Microsoft.Ajax.Utilities.CssToken : object {
    private TokenType m_tokenType;
    private string m_text;
    private CssContext m_context;
    public TokenType TokenType { get; }
    public string Text { get; }
    public CssContext Context { get; }
    public CssToken(TokenType tokenType, string text, CssContext context);
    public CssToken(TokenType tokenType, char ch, CssContext context);
    public TokenType get_TokenType();
    public string get_Text();
    public CssContext get_Context();
}
public enum Microsoft.Ajax.Utilities.CssType : Enum {
    public int value__;
    public static CssType FullStyleSheet;
    public static CssType DeclarationList;
}
public class Microsoft.Ajax.Utilities.CustomNode : AstNode {
    internal bool RequiresSeparator { get; }
    internal bool IsDebuggerStatement { get; }
    public CustomNode(Context context);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool get_IsDebuggerStatement();
    public virtual string ToCode();
}
public class Microsoft.Ajax.Utilities.DebuggerNode : AstNode {
    public DebuggerNode(Context context);
    public virtual void Accept(IVisitor visitor);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Ajax.Utilities.Declaration : AstNode {
    private List`1<VariableDeclaration> m_list;
    [CompilerGeneratedAttribute]
private JSToken <StatementToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <KeywordContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationObject <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<BindingIdentifier, string> CS$<>9__CachedAnonymousMethodDelegate5;
    public JSToken StatementToken { get; public set; }
    public Context KeywordContext { get; public set; }
    public int Count { get; }
    public VariableDeclaration Item { get; public set; }
    public ActivationObject Scope { get; public set; }
    public bool IsDeclaration { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool ContainsInOperator { get; }
    protected Declaration(Context context);
    [CompilerGeneratedAttribute]
public JSToken get_StatementToken();
    [CompilerGeneratedAttribute]
public void set_StatementToken(JSToken value);
    [CompilerGeneratedAttribute]
public Context get_KeywordContext();
    [CompilerGeneratedAttribute]
public void set_KeywordContext(Context value);
    public int get_Count();
    public VariableDeclaration get_Item(int index);
    public void set_Item(int index, VariableDeclaration value);
    [CompilerGeneratedAttribute]
public ActivationObject get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ActivationObject value);
    public virtual bool get_IsDeclaration();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public void Append(AstNode element);
    public void InsertAt(int index, AstNode element);
    private bool HandleDuplicates(AstNode binding);
    public void RemoveAt(int index);
    public void Remove(VariableDeclaration variableDeclaration);
    public bool Contains(string name);
    public virtual bool get_ContainsInOperator();
    public sealed virtual IEnumerator`1<VariableDeclaration> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__0(VariableDeclaration n);
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__1(VariableDeclaration n);
    [CompilerGeneratedAttribute]
private static string <HandleDuplicates>b__4(BindingIdentifier b);
}
public class Microsoft.Ajax.Utilities.DetachReferences : TreeVisitor {
    private static DetachReferences s_instance;
    private static DetachReferences();
    public static void Apply(AstNode node);
    public static void Apply(AstNode[] nodes);
    public virtual void Visit(Lookup node);
}
public class Microsoft.Ajax.Utilities.DirectivePrologue : ConstantWrapper {
    [CompilerGeneratedAttribute]
private bool <UseStrict>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRedundant>k__BackingField;
    public bool UseStrict { get; private set; }
    public bool IsRedundant { get; public set; }
    public bool IsExpression { get; }
    public bool IsConstant { get; }
    public DirectivePrologue(string value, Context context);
    [CompilerGeneratedAttribute]
public bool get_UseStrict();
    [CompilerGeneratedAttribute]
private void set_UseStrict(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRedundant();
    [CompilerGeneratedAttribute]
public void set_IsRedundant(bool value);
    public virtual bool get_IsExpression();
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.DocumentContext : object {
    private Dictionary`2<string, string> m_reportedVariables;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private JSParser <Parser>k__BackingField;
    public string Source { get; private set; }
    public string FileContext { get; public set; }
    public bool IsGenerated { get; private set; }
    public JSParser Parser { get; public set; }
    public DocumentContext(string source);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
public void set_FileContext(string value);
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
private void set_IsGenerated(bool value);
    [CompilerGeneratedAttribute]
public JSParser get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(JSParser value);
    public DocumentContext Clone();
    internal void HandleError(ContextError error);
    internal void ReportUndefined(UndefinedReference referernce);
    internal bool HasAlreadySeenErrorFor(string varName);
}
public class Microsoft.Ajax.Utilities.DoWhile : IterationStatement {
    private AstNode m_condition;
    [CompilerGeneratedAttribute]
private Context <WhileContext>k__BackingField;
    public AstNode Condition { get; public set; }
    public Context WhileContext { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public DoWhile(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_WhileContext();
    [CompilerGeneratedAttribute]
public void set_WhileContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
}
public class Microsoft.Ajax.Utilities.EmptyStatement : AstNode {
    public EmptyStatement(Context context);
    public virtual void Accept(IVisitor visitor);
}
internal enum Microsoft.Ajax.Utilities.EncloseBlockType : Enum {
    public int value__;
    public static EncloseBlockType IfWithoutElse;
    public static EncloseBlockType SingleDoWhile;
}
public enum Microsoft.Ajax.Utilities.EvalTreatment : Enum {
    public int value__;
    public static EvalTreatment Ignore;
    public static EvalTreatment MakeImmediateSafe;
    public static EvalTreatment MakeAllSafe;
}
internal class Microsoft.Ajax.Utilities.EvaluateLiteralVisitor : TreeVisitor {
    private JSParser m_parser;
    [CompilerGeneratedAttribute]
private static Func`2<string, int> CS$<>9__CachedAnonymousMethodDelegate3;
    public EvaluateLiteralVisitor(JSParser parser);
    private bool ReplaceMemberBracketWithDot(BinaryOperator node, ConstantWrapper newLiteral);
    private static void ReplaceNodeWithLiteral(AstNode node, ConstantWrapper newLiteral);
    private static void ReplaceNodeCheckParens(AstNode oldNode, AstNode newNode);
    private void EvalThisOperator(BinaryOperator node, ConstantWrapper left, ConstantWrapper right);
    private void RotateFromLeft(BinaryOperator node, BinaryOperator binaryOp, ConstantWrapper newLiteral);
    private void RotateFromRight(BinaryOperator node, BinaryOperator binaryOp, ConstantWrapper newLiteral);
    private static bool NoMultiplicativeOverOrUnderFlow(ConstantWrapper left, ConstantWrapper right, ConstantWrapper result);
    private static bool NoOverflow(ConstantWrapper result);
    private void EvalToTheLeft(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator leftOperator);
    private void EvalFarToTheLeft(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator leftOperator);
    private void EvalToTheRight(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator rightOperator);
    private void EvalFarToTheRight(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator rightOperator);
    private ConstantWrapper Multiply(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Divide(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Modulo(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Plus(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper NumericAddition(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper StringConcat(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Minus(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LeftShift(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper RightShift(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper UnsignedRightShift(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LessThan(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LessThanOrEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper GreaterThan(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper GreaterThanOrEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Equal(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper NotEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper StrictEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper StrictNotEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper BitwiseAnd(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper BitwiseOr(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper BitwiseXor(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LogicalAnd(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LogicalOr(ConstantWrapper left, ConstantWrapper right);
    private static bool OnlyHasConstantItems(ArrayLiteral arrayLiteral);
    private static string ComputeJoin(ArrayLiteral arrayLiteral, ConstantWrapper separatorNode);
    private int NodeLength(AstNode node);
    public virtual void Visit(AstNodeList node);
    public virtual void Visit(BinaryOperator node);
    private void DoBinaryOperator(BinaryOperator node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(Conditional node);
    private void DoConditional(Conditional node);
    public virtual void Visit(ConditionalCompilationElseIf node);
    private void DoConditionalCompilationElseIf(ConditionalCompilationElseIf node);
    public virtual void Visit(ConditionalCompilationIf node);
    private void DoConditionalCompilationIf(ConditionalCompilationIf node);
    public virtual void Visit(DoWhile node);
    private void DoDoWhile(DoWhile node);
    public virtual void Visit(ForNode node);
    private void DoForNode(ForNode node);
    public virtual void Visit(IfNode node);
    private void DoIfNode(IfNode node);
    public virtual void Visit(Member node);
    public virtual void Visit(UnaryOperator node);
    private void DoUnaryNode(UnaryOperator node);
    public virtual void Visit(WhileNode node);
    private void DoWhileNode(WhileNode node);
    [CompilerGeneratedAttribute]
private static int <NodeLength>b__2(string c);
}
public enum Microsoft.Ajax.Utilities.ExistingFileTreatment : Enum {
    public int value__;
    public static ExistingFileTreatment Auto;
    public static ExistingFileTreatment Overwrite;
    public static ExistingFileTreatment Preserve;
}
public class Microsoft.Ajax.Utilities.ExportNode : ImportExportStatement {
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <DefaultContext>k__BackingField;
    public bool IsDefault { get; public set; }
    public Context DefaultContext { get; public set; }
    public ExportNode(Context context);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public Context get_DefaultContext();
    [CompilerGeneratedAttribute]
public void set_DefaultContext(Context value);
    public virtual void Accept(IVisitor visitor);
}
public abstract class Microsoft.Ajax.Utilities.Expression : AstNode {
    public bool IsExpression { get; }
    public OperatorPrecedence Precedence { get; }
    protected Expression(Context context);
    public virtual bool get_IsExpression();
    public virtual OperatorPrecedence get_Precedence();
}
public enum Microsoft.Ajax.Utilities.FieldType : Enum {
    public int value__;
    public static FieldType Local;
    public static FieldType Predefined;
    public static FieldType Global;
    public static FieldType Arguments;
    public static FieldType Argument;
    public static FieldType WithField;
    public static FieldType CatchError;
    public static FieldType GhostCatch;
    public static FieldType GhostFunction;
    public static FieldType UndefinedGlobal;
    public static FieldType Super;
}
internal class Microsoft.Ajax.Utilities.FinalPassVisitor : TreeVisitor {
    private CodeSettings m_settings;
    private StatementStartVisitor m_statementStart;
    private FinalPassVisitor(CodeSettings codeSettings);
    public static void Apply(AstNode node, CodeSettings codeSettings);
    public virtual void Visit(BinaryOperator node);
    private void PossiblyBreakExpressionStatement(BinaryOperator node, Block parentBlock);
    private void PossiblyBreakExpressionList(BinaryOperator node, Block parentBlock, AstNodeList nodeList);
    private static AstNode CreateSplitNodeFromEnd(AstNodeList nodeList, int ndx);
    private static void RotateOpeator(BinaryOperator node, AstNodeList rightSide);
    private bool CanBeBroken(AstNode node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(ImportExportSpecifier node);
}
public class Microsoft.Ajax.Utilities.ForIn : IterationStatement {
    private AstNode m_variable;
    private AstNode m_collection;
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockScope <BlockScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode Variable { get; public set; }
    public AstNode Collection { get; public set; }
    public Context OperatorContext { get; public set; }
    public BlockScope BlockScope { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ForIn(Context context);
    public AstNode get_Variable();
    public void set_Variable(AstNode value);
    public AstNode get_Collection();
    public void set_Collection(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    [CompilerGeneratedAttribute]
public BlockScope get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(BlockScope value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__0(Block b);
}
public class Microsoft.Ajax.Utilities.ForNode : IterationStatement {
    private AstNode m_initializer;
    private AstNode m_condition;
    private AstNode m_incrementer;
    [CompilerGeneratedAttribute]
private Context <Separator1Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Separator2Context>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockScope <BlockScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode Initializer { get; public set; }
    public AstNode Condition { get; public set; }
    public AstNode Incrementer { get; public set; }
    public Context Separator1Context { get; public set; }
    public Context Separator2Context { get; public set; }
    public BlockScope BlockScope { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ForNode(Context context);
    public AstNode get_Initializer();
    public void set_Initializer(AstNode value);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public AstNode get_Incrementer();
    public void set_Incrementer(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_Separator1Context();
    [CompilerGeneratedAttribute]
public void set_Separator1Context(Context value);
    [CompilerGeneratedAttribute]
public Context get_Separator2Context();
    [CompilerGeneratedAttribute]
public void set_Separator2Context(Context value);
    [CompilerGeneratedAttribute]
public BlockScope get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(BlockScope value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__0(Block b);
}
public class Microsoft.Ajax.Utilities.FunctionObject : AstNode {
    private BindingIdentifier m_binding;
    private AstNodeList m_parameters;
    private Block m_body;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <StaticContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameGuess>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionType <FunctionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSourceElement>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsStatic { get; public set; }
    public Context StaticContext { get; public set; }
    public BindingIdentifier Binding { get; public set; }
    public string NameGuess { get; public set; }
    public AstNodeList ParameterDeclarations { get; public set; }
    public Block Body { get; public set; }
    public bool IsDeclaration { get; }
    public FunctionType FunctionType { get; public set; }
    public bool IsExpression { get; }
    public bool IsGenerator { get; public set; }
    public bool IsSourceElement { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public bool IsReferenced { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public FunctionObject(Context functionContext);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
public void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public Context get_StaticContext();
    [CompilerGeneratedAttribute]
public void set_StaticContext(Context value);
    public BindingIdentifier get_Binding();
    public void set_Binding(BindingIdentifier value);
    [CompilerGeneratedAttribute]
public string get_NameGuess();
    [CompilerGeneratedAttribute]
public void set_NameGuess(string value);
    public AstNodeList get_ParameterDeclarations();
    public void set_ParameterDeclarations(AstNodeList value);
    public Block get_Body();
    public void set_Body(Block value);
    public virtual bool get_IsDeclaration();
    [CompilerGeneratedAttribute]
public FunctionType get_FunctionType();
    [CompilerGeneratedAttribute]
public void set_FunctionType(FunctionType value);
    public virtual bool get_IsExpression();
    [CompilerGeneratedAttribute]
public bool get_IsGenerator();
    [CompilerGeneratedAttribute]
public void set_IsGenerator(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSourceElement();
    [CompilerGeneratedAttribute]
public void set_IsSourceElement(bool value);
    public virtual OperatorPrecedence get_Precedence();
    public virtual void Accept(IVisitor visitor);
    public bool get_IsReferenced();
    private bool SafeIsReferenced(HashSet`1<FunctionObject> visited);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private static bool <SafeIsReferenced>b__0(JSVariableField v);
    [CompilerGeneratedAttribute]
private bool <ReplaceChild>b__2(AstNodeList list);
}
public class Microsoft.Ajax.Utilities.FunctionScope : ActivationObject {
    private HashSet`1<ActivationObject> m_refScopes;
    internal FunctionScope(ActivationObject parent, bool isExpression, CodeSettings settings, FunctionObject funcObj);
    public virtual void DeclareScope();
    private void DefineFunctionExpressionName();
    private void DefineParameters();
    private void DefineArgumentsObject();
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
    internal void AddReference(ActivationObject scope);
}
public enum Microsoft.Ajax.Utilities.FunctionType : Enum {
    public int value__;
    public static FunctionType Declaration;
    public static FunctionType Expression;
    public static FunctionType Getter;
    public static FunctionType Setter;
    public static FunctionType ArrowFunction;
    public static FunctionType Method;
}
public class Microsoft.Ajax.Utilities.GetterSetter : ObjectLiteralField {
    [CompilerGeneratedAttribute]
private bool <IsGetter>k__BackingField;
    public bool IsGetter { get; public set; }
    public GetterSetter(string identifier, bool isGetter, Context context);
    [CompilerGeneratedAttribute]
public bool get_IsGetter();
    [CompilerGeneratedAttribute]
public void set_IsGetter(bool value);
    public virtual void Accept(IVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.GlobalDefineEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.GlobalScope : ActivationObject {
    private static Regex s_blanketPrefixes;
    private HashSet`1<string> m_globalProperties;
    private HashSet`1<string> m_globalFunctions;
    private HashSet`1<string> m_assumedGlobals;
    private HashSet`1<UndefinedReference> m_undefined;
    public ICollection`1<UndefinedReference> UndefinedReferences { get; }
    public JSVariableField Item { get; }
    internal GlobalScope(CodeSettings settings);
    private static GlobalScope();
    public ICollection`1<UndefinedReference> get_UndefinedReferences();
    public void AddUndefinedReference(UndefinedReference exception);
    internal void SetAssumedGlobals(CodeSettings settings);
    internal virtual void AnalyzeScope();
    internal virtual void AutoRenameFields();
    public virtual JSVariableField get_Item(string name);
    private JSVariableField ResolveFromCollection(string name, HashSet`1<string> collection, FieldType fieldType, bool isFunction);
    public virtual void DeclareScope();
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
    public virtual JSVariableField CreateField(JSVariableField outerField);
}
public class Microsoft.Ajax.Utilities.GroupingOperator : Expression {
    private AstNode m_operand;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode Operand { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsConstant { get; }
    public GroupingOperator(Context context);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual OperatorPrecedence get_Precedence();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual bool get_IsConstant();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__0(AstNode o);
}
public class Microsoft.Ajax.Utilities.IfNode : AstNode {
    private AstNode m_condition;
    private Block m_trueBlock;
    private Block m_falseBlock;
    [CompilerGeneratedAttribute]
private Context <ElseContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode Condition { get; public set; }
    public Block TrueBlock { get; public set; }
    public Block FalseBlock { get; public set; }
    public Context ElseContext { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public IfNode(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public Block get_TrueBlock();
    public void set_TrueBlock(Block value);
    public Block get_FalseBlock();
    public void set_FalseBlock(Block value);
    [CompilerGeneratedAttribute]
public Context get_ElseContext();
    [CompilerGeneratedAttribute]
public void set_ElseContext(Context value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public void SwapBranches();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__0(Block b);
}
public interface Microsoft.Ajax.Utilities.IModuleReference {
    public string ModuleName { get; }
    public ModuleScope ReferencedModule { get; public set; }
    public abstract virtual string get_ModuleName();
    public abstract virtual ModuleScope get_ReferencedModule();
    public abstract virtual void set_ReferencedModule(ModuleScope value);
}
public class Microsoft.Ajax.Utilities.ImportantComment : AstNode {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; public set; }
    public bool IsDeclaration { get; }
    public ImportantComment(Context context);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    public virtual bool get_IsDeclaration();
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ImportExportSpecifier : AstNode {
    private AstNode m_localIdentifier;
    [CompilerGeneratedAttribute]
private Context <NameContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalName>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <AsContext>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    public Context NameContext { get; public set; }
    public string ExternalName { get; public set; }
    public Context AsContext { get; public set; }
    public AstNode LocalIdentifier { get; public set; }
    public string Name { get; }
    public AstNode Initializer { get; }
    public bool IsParameter { get; }
    public bool RenameNotAllowed { get; }
    public JSVariableField VariableField { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ImportExportSpecifier(Context context);
    [CompilerGeneratedAttribute]
public Context get_NameContext();
    [CompilerGeneratedAttribute]
public void set_NameContext(Context value);
    [CompilerGeneratedAttribute]
public string get_ExternalName();
    [CompilerGeneratedAttribute]
public void set_ExternalName(string value);
    [CompilerGeneratedAttribute]
public Context get_AsContext();
    [CompilerGeneratedAttribute]
public void set_AsContext(Context value);
    public AstNode get_LocalIdentifier();
    public void set_LocalIdentifier(AstNode value);
    public sealed virtual string get_Name();
    public sealed virtual AstNode get_Initializer();
    public sealed virtual bool get_IsParameter();
    public sealed virtual bool get_RenameNotAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VariableField(JSVariableField value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Ajax.Utilities.ImportExportStatement : AstNode {
    private List`1<AstNode> m_list;
    [CompilerGeneratedAttribute]
private Context <KeywordContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OpenContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <CloseContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <FromContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ModuleContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleScope <ReferencedModule>k__BackingField;
    public Context KeywordContext { get; public set; }
    public Context OpenContext { get; public set; }
    public Context CloseContext { get; public set; }
    public Context FromContext { get; public set; }
    public Context ModuleContext { get; public set; }
    public string ModuleName { get; public set; }
    public ModuleScope ReferencedModule { get; public set; }
    public bool IsDeclaration { get; }
    public int Count { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode Item { get; public set; }
    protected ImportExportStatement(Context context);
    [CompilerGeneratedAttribute]
public Context get_KeywordContext();
    [CompilerGeneratedAttribute]
public void set_KeywordContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_OpenContext();
    [CompilerGeneratedAttribute]
public void set_OpenContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_CloseContext();
    [CompilerGeneratedAttribute]
public void set_CloseContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_FromContext();
    [CompilerGeneratedAttribute]
public void set_FromContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_ModuleContext();
    [CompilerGeneratedAttribute]
public void set_ModuleContext(Context value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ModuleScope get_ReferencedModule();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReferencedModule(ModuleScope value);
    public virtual bool get_IsDeclaration();
    public int get_Count();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public ImportExportStatement Append(AstNode node);
    public ImportExportStatement Insert(int position, AstNode node);
    public void RemoveAt(int position);
    public AstNode get_Item(int index);
    public void set_Item(int index, AstNode value);
    public virtual string ToString();
    public sealed virtual IEnumerator`1<AstNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <RemoveAt>b__2(AstNode n);
}
public class Microsoft.Ajax.Utilities.ImportNode : ImportExportStatement {
    public ImportNode(Context context);
    public virtual void Accept(IVisitor visitor);
}
public interface Microsoft.Ajax.Utilities.INameDeclaration {
    public string Name { get; }
    public Context Context { get; }
    public AstNode Parent { get; }
    public AstNode Initializer { get; }
    public bool IsParameter { get; }
    public bool RenameNotAllowed { get; }
    public JSVariableField VariableField { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual Context get_Context();
    public abstract virtual AstNode get_Parent();
    public abstract virtual AstNode get_Initializer();
    public abstract virtual bool get_IsParameter();
    public abstract virtual bool get_RenameNotAllowed();
    public abstract virtual JSVariableField get_VariableField();
    public abstract virtual void set_VariableField(JSVariableField value);
}
public interface Microsoft.Ajax.Utilities.INameReference {
    public ActivationObject VariableScope { get; }
    public bool IsAssignment { get; }
    public AstNode AssignmentValue { get; }
    public JSVariableField VariableField { get; }
    public string Name { get; }
    public long Index { get; }
    public AstNode Parent { get; }
    public abstract virtual ActivationObject get_VariableScope();
    public abstract virtual bool get_IsAssignment();
    public abstract virtual AstNode get_AssignmentValue();
    public abstract virtual JSVariableField get_VariableField();
    public abstract virtual string get_Name();
    public abstract virtual long get_Index();
    public abstract virtual AstNode get_Parent();
}
public class Microsoft.Ajax.Utilities.InitializerNode : AstNode {
    private AstNode m_binding;
    private AstNode m_initializer;
    [CompilerGeneratedAttribute]
private Context <AssignContext>k__BackingField;
    public AstNode Binding { get; public set; }
    public Context AssignContext { get; public set; }
    public AstNode Initializer { get; public set; }
    public bool IsConstant { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public InitializerNode(Context context);
    public AstNode get_Binding();
    public void set_Binding(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_AssignContext();
    [CompilerGeneratedAttribute]
public void set_AssignContext(Context value);
    public AstNode get_Initializer();
    public void set_Initializer(AstNode value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual bool IsEquivalentTo(AstNode otherNode);
}
public class Microsoft.Ajax.Utilities.InvalidSwitchEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SwitchPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterPart>k__BackingField;
    public string SwitchPart { get; public set; }
    public string ParameterPart { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SwitchPart();
    [CompilerGeneratedAttribute]
public void set_SwitchPart(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterPart();
    [CompilerGeneratedAttribute]
public void set_ParameterPart(string value);
}
public interface Microsoft.Ajax.Utilities.IRenameable {
    public string OriginalName { get; }
    public bool WasRenamed { get; }
    public abstract virtual string get_OriginalName();
    public abstract virtual bool get_WasRenamed();
}
public interface Microsoft.Ajax.Utilities.ISourceMap {
    public string Name { get; }
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public abstract virtual void StartPackage(string sourcePath, string mapPath);
    public abstract virtual void EndPackage();
    public abstract virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    public abstract virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, Context context);
    public abstract virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public abstract virtual void EndOutputRun(int lineNumber, int columnPosition);
    public abstract virtual void EndFile(TextWriter writer, string newLine);
    public abstract virtual void NewLineInsertedInOutput();
    public abstract virtual string get_Name();
    public abstract virtual string get_SourceRoot();
    public abstract virtual void set_SourceRoot(string value);
    public abstract virtual bool get_SafeHeader();
    public abstract virtual void set_SafeHeader(bool value);
}
public abstract class Microsoft.Ajax.Utilities.IterationStatement : AstNode {
    private Block m_body;
    public Block Body { get; public set; }
    protected IterationStatement(Context context);
    public Block get_Body();
    public void set_Body(Block value);
}
public interface Microsoft.Ajax.Utilities.IVisitor {
    public abstract virtual void Visit(ArrayLiteral node);
    public abstract virtual void Visit(AspNetBlockNode node);
    public abstract virtual void Visit(AstNodeList node);
    public abstract virtual void Visit(BinaryOperator node);
    public abstract virtual void Visit(BindingIdentifier node);
    public abstract virtual void Visit(Block node);
    public abstract virtual void Visit(Break node);
    public abstract virtual void Visit(CallNode node);
    public abstract virtual void Visit(ClassNode node);
    public abstract virtual void Visit(ComprehensionNode node);
    public abstract virtual void Visit(ComprehensionForClause node);
    public abstract virtual void Visit(ComprehensionIfClause node);
    public abstract virtual void Visit(ConditionalCompilationComment node);
    public abstract virtual void Visit(ConditionalCompilationElse node);
    public abstract virtual void Visit(ConditionalCompilationElseIf node);
    public abstract virtual void Visit(ConditionalCompilationEnd node);
    public abstract virtual void Visit(ConditionalCompilationIf node);
    public abstract virtual void Visit(ConditionalCompilationOn node);
    public abstract virtual void Visit(ConditionalCompilationSet node);
    public abstract virtual void Visit(Conditional node);
    public abstract virtual void Visit(ConstantWrapper node);
    public abstract virtual void Visit(ConstantWrapperPP node);
    public abstract virtual void Visit(ConstStatement node);
    public abstract virtual void Visit(ContinueNode node);
    public abstract virtual void Visit(CustomNode node);
    public abstract virtual void Visit(DebuggerNode node);
    public abstract virtual void Visit(DirectivePrologue node);
    public abstract virtual void Visit(DoWhile node);
    public abstract virtual void Visit(EmptyStatement node);
    public abstract virtual void Visit(ExportNode node);
    public abstract virtual void Visit(ForIn node);
    public abstract virtual void Visit(ForNode node);
    public abstract virtual void Visit(FunctionObject node);
    public abstract virtual void Visit(GetterSetter node);
    public abstract virtual void Visit(GroupingOperator node);
    public abstract virtual void Visit(IfNode node);
    public abstract virtual void Visit(ImportantComment node);
    public abstract virtual void Visit(ImportExportSpecifier node);
    public abstract virtual void Visit(ImportNode node);
    public abstract virtual void Visit(InitializerNode node);
    public abstract virtual void Visit(LabeledStatement node);
    public abstract virtual void Visit(LexicalDeclaration node);
    public abstract virtual void Visit(Lookup node);
    public abstract virtual void Visit(Member node);
    public abstract virtual void Visit(ModuleDeclaration node);
    public abstract virtual void Visit(ObjectLiteral node);
    public abstract virtual void Visit(ObjectLiteralField node);
    public abstract virtual void Visit(ObjectLiteralProperty node);
    public abstract virtual void Visit(ParameterDeclaration node);
    public abstract virtual void Visit(RegExpLiteral node);
    public abstract virtual void Visit(ReturnNode node);
    public abstract virtual void Visit(Switch node);
    public abstract virtual void Visit(SwitchCase node);
    public abstract virtual void Visit(TemplateLiteral node);
    public abstract virtual void Visit(TemplateLiteralExpression node);
    public abstract virtual void Visit(ThisLiteral node);
    public abstract virtual void Visit(ThrowNode node);
    public abstract virtual void Visit(TryNode node);
    public abstract virtual void Visit(Var node);
    public abstract virtual void Visit(VariableDeclaration node);
    public abstract virtual void Visit(UnaryOperator node);
    public abstract virtual void Visit(WhileNode node);
    public abstract virtual void Visit(WithNode node);
}
public enum Microsoft.Ajax.Utilities.JavaScriptFormat : Enum {
    public int value__;
    public static JavaScriptFormat Normal;
    public static JavaScriptFormat JSON;
}
public enum Microsoft.Ajax.Utilities.JavaScriptSourceMode : Enum {
    public int value__;
    public static JavaScriptSourceMode Program;
    public static JavaScriptSourceMode Expression;
    public static JavaScriptSourceMode EventHandler;
    public static JavaScriptSourceMode Module;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Ajax.Utilities.JScript : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AmbiguousCatchVar { get; }
    internal static string AmbiguousNamedFunctionExpression { get; }
    internal static string ApplicationError { get; }
    internal static string ArgumentNotReferenced { get; }
    internal static string ArrayLiteralTrailingComma { get; }
    internal static string ArrowCannotBeConstructor { get; }
    internal static string AssignmentToConstant { get; }
    internal static string BadBindingSyntax { get; }
    internal static string BadBreak { get; }
    internal static string BadContinue { get; }
    internal static string BadHexEscapeSequence { get; }
    internal static string BadLabel { get; }
    internal static string BadNumericLiteral { get; }
    internal static string BadReturn { get; }
    internal static string BadSwitch { get; }
    internal static string BindingPatternRequiresInitializer { get; }
    internal static string CCInvalidElse { get; }
    internal static string CCInvalidElseIf { get; }
    internal static string CCInvalidEnd { get; }
    internal static string CCOff { get; }
    internal static string ClassElementExpected { get; }
    internal static string ConditionalCompilationTooComplex { get; }
    internal static string DupDefault { get; }
    internal static string DuplicateCatch { get; }
    internal static string DuplicateClassElementName { get; }
    internal static string DuplicateConstantDeclaration { get; }
    internal static string DuplicateLexicalDeclaration { get; }
    internal static string DuplicateModuleDeclaration { get; }
    internal static string DuplicateName { get; }
    internal static string ErrorEndOfFile { get; }
    internal static string ExportNotAtModuleLevel { get; }
    internal static string ExpressionExpected { get; }
    internal static string FunctionExpressionExpected { get; }
    internal static string FunctionNameMustBeIdentifier { get; }
    internal static string FunctionNotReferenced { get; }
    internal static string HighSurrogate { get; }
    internal static string IllegalAssignment { get; }
    internal static string IllegalChar { get; }
    internal static string ImplicitPropertyNameMustBeIdentifier { get; }
    internal static string ImportNoModuleName { get; }
    internal static string InvalidElse { get; }
    internal static string JSParserException { get; }
    internal static string KeywordUsedAsIdentifier { get; }
    internal static string LowSurrogate { get; }
    internal static string MethodsNotAllowedInBindings { get; }
    internal static string MisplacedFunctionDeclaration { get; }
    internal static string MultipleDefaultExports { get; }
    internal static string NewLineNotAllowed { get; }
    internal static string NoBinding { get; }
    internal static string NoCatch { get; }
    internal static string NoCCEnd { get; }
    internal static string NoColon { get; }
    internal static string NoComma { get; }
    internal static string NoCommentEnd { get; }
    internal static string NoDefaultModuleExport { get; }
    internal static string NoEndDebugDirective { get; }
    internal static string NoEndIfDirective { get; }
    internal static string NoEqual { get; }
    internal static string NoExpectedFrom { get; }
    internal static string NoForOrIf { get; }
    internal static string NoIdentifier { get; }
    internal static string NoLabel { get; }
    internal static string NoLeftCurly { get; }
    internal static string NoLeftParenthesis { get; }
    internal static string NoMemberIdentifier { get; }
    internal static string NoModuleExport { get; }
    internal static string NoRightBracket { get; }
    internal static string NoRightBracketOrComma { get; }
    internal static string NoRightCurly { get; }
    internal static string NoRightParenthesis { get; }
    internal static string NoRightParenthesisOrComma { get; }
    internal static string NoSemicolon { get; }
    internal static string NoSource { get; }
    internal static string NoSpecifierSet { get; }
    internal static string NoStringLiteral { get; }
    internal static string NoWhile { get; }
    internal static string NumericMaximum { get; }
    internal static string NumericMinimum { get; }
    internal static string NumericOverflow { get; }
    internal static string ObjectConstructorTakesNoArguments { get; }
    internal static string ObjectLiteralKeyword { get; }
    internal static string OctalLiteralsDeprecated { get; }
    internal static string ParameterListNotLast { get; }
    internal static string RegExpSyntax { get; }
    internal static string ResourceReferenceMustBeConstant { get; }
    internal static string RestParameterNotLast { get; }
    internal static string SemicolonInsertion { get; }
    internal static string SetterMustHaveOneParameter { get; }
    internal static string SpecialConstructor { get; }
    internal static string StatementBlockExpected { get; }
    internal static string StaticPrototype { get; }
    internal static string StrictComparisonIsAlwaysTrueOrFalse { get; }
    internal static string StrictModeArgumentName { get; }
    internal static string StrictModeCatchName { get; }
    internal static string StrictModeDuplicateArgument { get; }
    internal static string StrictModeDuplicateProperty { get; }
    internal static string StrictModeFunctionName { get; }
    internal static string StrictModeInvalidAssign { get; }
    internal static string StrictModeInvalidDelete { get; }
    internal static string StrictModeInvalidPreOrPost { get; }
    internal static string StrictModeNoWith { get; }
    internal static string StrictModeUndefinedVariable { get; }
    internal static string StrictModeVariableName { get; }
    internal static string StringNotInlineSafe { get; }
    internal static string SuspectAssignment { get; }
    internal static string SuspectEquality { get; }
    internal static string SuspectSemicolon { get; }
    internal static string SyntaxError { get; }
    internal static string TooManyTokensSkipped { get; }
    internal static string UnableToConvertFromBinding { get; }
    internal static string UnableToConvertToBinding { get; }
    internal static string UnclosedFunction { get; }
    internal static string UndeclaredFunction { get; }
    internal static string UndeclaredVariable { get; }
    internal static string UnexpectedSemicolon { get; }
    internal static string UnterminatedAspNetBlock { get; }
    internal static string UnterminatedString { get; }
    internal static string UnusedLabel { get; }
    internal static string VariableDefinedNotReferenced { get; }
    internal static string WithNotRecommended { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AmbiguousCatchVar();
    internal static string get_AmbiguousNamedFunctionExpression();
    internal static string get_ApplicationError();
    internal static string get_ArgumentNotReferenced();
    internal static string get_ArrayLiteralTrailingComma();
    internal static string get_ArrowCannotBeConstructor();
    internal static string get_AssignmentToConstant();
    internal static string get_BadBindingSyntax();
    internal static string get_BadBreak();
    internal static string get_BadContinue();
    internal static string get_BadHexEscapeSequence();
    internal static string get_BadLabel();
    internal static string get_BadNumericLiteral();
    internal static string get_BadReturn();
    internal static string get_BadSwitch();
    internal static string get_BindingPatternRequiresInitializer();
    internal static string get_CCInvalidElse();
    internal static string get_CCInvalidElseIf();
    internal static string get_CCInvalidEnd();
    internal static string get_CCOff();
    internal static string get_ClassElementExpected();
    internal static string get_ConditionalCompilationTooComplex();
    internal static string get_DupDefault();
    internal static string get_DuplicateCatch();
    internal static string get_DuplicateClassElementName();
    internal static string get_DuplicateConstantDeclaration();
    internal static string get_DuplicateLexicalDeclaration();
    internal static string get_DuplicateModuleDeclaration();
    internal static string get_DuplicateName();
    internal static string get_ErrorEndOfFile();
    internal static string get_ExportNotAtModuleLevel();
    internal static string get_ExpressionExpected();
    internal static string get_FunctionExpressionExpected();
    internal static string get_FunctionNameMustBeIdentifier();
    internal static string get_FunctionNotReferenced();
    internal static string get_HighSurrogate();
    internal static string get_IllegalAssignment();
    internal static string get_IllegalChar();
    internal static string get_ImplicitPropertyNameMustBeIdentifier();
    internal static string get_ImportNoModuleName();
    internal static string get_InvalidElse();
    internal static string get_JSParserException();
    internal static string get_KeywordUsedAsIdentifier();
    internal static string get_LowSurrogate();
    internal static string get_MethodsNotAllowedInBindings();
    internal static string get_MisplacedFunctionDeclaration();
    internal static string get_MultipleDefaultExports();
    internal static string get_NewLineNotAllowed();
    internal static string get_NoBinding();
    internal static string get_NoCatch();
    internal static string get_NoCCEnd();
    internal static string get_NoColon();
    internal static string get_NoComma();
    internal static string get_NoCommentEnd();
    internal static string get_NoDefaultModuleExport();
    internal static string get_NoEndDebugDirective();
    internal static string get_NoEndIfDirective();
    internal static string get_NoEqual();
    internal static string get_NoExpectedFrom();
    internal static string get_NoForOrIf();
    internal static string get_NoIdentifier();
    internal static string get_NoLabel();
    internal static string get_NoLeftCurly();
    internal static string get_NoLeftParenthesis();
    internal static string get_NoMemberIdentifier();
    internal static string get_NoModuleExport();
    internal static string get_NoRightBracket();
    internal static string get_NoRightBracketOrComma();
    internal static string get_NoRightCurly();
    internal static string get_NoRightParenthesis();
    internal static string get_NoRightParenthesisOrComma();
    internal static string get_NoSemicolon();
    internal static string get_NoSource();
    internal static string get_NoSpecifierSet();
    internal static string get_NoStringLiteral();
    internal static string get_NoWhile();
    internal static string get_NumericMaximum();
    internal static string get_NumericMinimum();
    internal static string get_NumericOverflow();
    internal static string get_ObjectConstructorTakesNoArguments();
    internal static string get_ObjectLiteralKeyword();
    internal static string get_OctalLiteralsDeprecated();
    internal static string get_ParameterListNotLast();
    internal static string get_RegExpSyntax();
    internal static string get_ResourceReferenceMustBeConstant();
    internal static string get_RestParameterNotLast();
    internal static string get_SemicolonInsertion();
    internal static string get_SetterMustHaveOneParameter();
    internal static string get_SpecialConstructor();
    internal static string get_StatementBlockExpected();
    internal static string get_StaticPrototype();
    internal static string get_StrictComparisonIsAlwaysTrueOrFalse();
    internal static string get_StrictModeArgumentName();
    internal static string get_StrictModeCatchName();
    internal static string get_StrictModeDuplicateArgument();
    internal static string get_StrictModeDuplicateProperty();
    internal static string get_StrictModeFunctionName();
    internal static string get_StrictModeInvalidAssign();
    internal static string get_StrictModeInvalidDelete();
    internal static string get_StrictModeInvalidPreOrPost();
    internal static string get_StrictModeNoWith();
    internal static string get_StrictModeUndefinedVariable();
    internal static string get_StrictModeVariableName();
    internal static string get_StringNotInlineSafe();
    internal static string get_SuspectAssignment();
    internal static string get_SuspectEquality();
    internal static string get_SuspectSemicolon();
    internal static string get_SyntaxError();
    internal static string get_TooManyTokensSkipped();
    internal static string get_UnableToConvertFromBinding();
    internal static string get_UnableToConvertToBinding();
    internal static string get_UnclosedFunction();
    internal static string get_UndeclaredFunction();
    internal static string get_UndeclaredVariable();
    internal static string get_UnexpectedSemicolon();
    internal static string get_UnterminatedAspNetBlock();
    internal static string get_UnterminatedString();
    internal static string get_UnusedLabel();
    internal static string get_VariableDefinedNotReferenced();
    internal static string get_WithNotRecommended();
}
public class Microsoft.Ajax.Utilities.JSEncoderFallback : EncoderFallback {
    public int MaxCharCount { get; }
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual int get_MaxCharCount();
}
internal class Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer : EncoderFallbackBuffer {
    private string m_fallbackString;
    private int m_position;
    public int Remaining { get; }
    public virtual int get_Remaining();
    private static string GetEncoding(int charValue);
    public virtual bool Fallback(char charUnknown, int index);
    public virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public virtual char GetNextChar();
    public virtual bool MovePrevious();
    public virtual void Reset();
    public virtual string ToString();
}
public enum Microsoft.Ajax.Utilities.JSError : Enum {
    public int value__;
    public static JSError NoError;
    public static JSError SyntaxError;
    public static JSError NoColon;
    public static JSError NoSemicolon;
    public static JSError NoLeftParenthesis;
    public static JSError NoRightParenthesis;
    public static JSError NoRightBracket;
    public static JSError NoLeftCurly;
    public static JSError NoRightCurly;
    public static JSError NoIdentifier;
    public static JSError NoEqual;
    public static JSError IllegalAssignment;
    public static JSError RegExpSyntax;
    public static JSError IllegalChar;
    public static JSError UnterminatedString;
    public static JSError NoCommentEnd;
    public static JSError BadReturn;
    public static JSError BadBreak;
    public static JSError BadContinue;
    public static JSError UnusedLabel;
    public static JSError BadHexEscapeSequence;
    public static JSError NoWhile;
    public static JSError BadLabel;
    public static JSError NoLabel;
    public static JSError DupDefault;
    public static JSError NoMemberIdentifier;
    public static JSError NoCCEnd;
    public static JSError CCOff;
    public static JSError NoCatch;
    public static JSError InvalidElse;
    public static JSError NoComma;
    public static JSError BadSwitch;
    public static JSError CCInvalidEnd;
    public static JSError CCInvalidElse;
    public static JSError CCInvalidElseIf;
    public static JSError ErrorEndOfFile;
    public static JSError DuplicateName;
    public static JSError UndeclaredVariable;
    public static JSError KeywordUsedAsIdentifier;
    public static JSError UndeclaredFunction;
    public static JSError NoRightParenthesisOrComma;
    public static JSError NoRightBracketOrComma;
    public static JSError ExpressionExpected;
    public static JSError UnexpectedSemicolon;
    public static JSError TooManyTokensSkipped;
    public static JSError SuspectAssignment;
    public static JSError SuspectSemicolon;
    public static JSError ParameterListNotLast;
    public static JSError StatementBlockExpected;
    public static JSError VariableDefinedNotReferenced;
    public static JSError ArgumentNotReferenced;
    public static JSError WithNotRecommended;
    public static JSError FunctionNotReferenced;
    public static JSError AmbiguousCatchVar;
    public static JSError FunctionExpressionExpected;
    public static JSError ObjectConstructorTakesNoArguments;
    public static JSError JSParserException;
    public static JSError NumericOverflow;
    public static JSError NumericMaximum;
    public static JSError NumericMinimum;
    public static JSError ResourceReferenceMustBeConstant;
    public static JSError AmbiguousNamedFunctionExpression;
    public static JSError ConditionalCompilationTooComplex;
    public static JSError UnterminatedAspNetBlock;
    public static JSError MisplacedFunctionDeclaration;
    public static JSError OctalLiteralsDeprecated;
    public static JSError FunctionNameMustBeIdentifier;
    public static JSError StrictComparisonIsAlwaysTrueOrFalse;
    public static JSError StrictModeNoWith;
    public static JSError StrictModeDuplicateArgument;
    public static JSError StrictModeVariableName;
    public static JSError StrictModeFunctionName;
    public static JSError StrictModeDuplicateProperty;
    public static JSError StrictModeInvalidAssign;
    public static JSError StrictModeInvalidPreOrPost;
    public static JSError StrictModeInvalidDelete;
    public static JSError StrictModeArgumentName;
    public static JSError DuplicateConstantDeclaration;
    public static JSError AssignmentToConstant;
    public static JSError StringNotInlineSafe;
    public static JSError StrictModeUndefinedVariable;
    public static JSError UnclosedFunction;
    public static JSError ObjectLiteralKeyword;
    public static JSError NoEndIfDirective;
    public static JSError NoEndDebugDirective;
    public static JSError BadNumericLiteral;
    public static JSError DuplicateLexicalDeclaration;
    public static JSError DuplicateCatch;
    public static JSError SuspectEquality;
    public static JSError SemicolonInsertion;
    public static JSError ArrayLiteralTrailingComma;
    public static JSError StrictModeCatchName;
    public static JSError BindingPatternRequiresInitializer;
    public static JSError ImplicitPropertyNameMustBeIdentifier;
    public static JSError SetterMustHaveOneParameter;
    public static JSError RestParameterNotLast;
    public static JSError UnableToConvertToBinding;
    public static JSError UnableToConvertFromBinding;
    public static JSError BadBindingSyntax;
    public static JSError MethodsNotAllowedInBindings;
    public static JSError NoForOrIf;
    public static JSError ClassElementExpected;
    public static JSError DuplicateClassElementName;
    public static JSError SpecialConstructor;
    public static JSError StaticPrototype;
    public static JSError NoBinding;
    public static JSError MultipleDefaultExports;
    public static JSError ImportNoModuleName;
    public static JSError DuplicateModuleDeclaration;
    public static JSError NoDefaultModuleExport;
    public static JSError NoModuleExport;
    public static JSError NoExpectedFrom;
    public static JSError NoStringLiteral;
    public static JSError NewLineNotAllowed;
    public static JSError NoSpecifierSet;
    public static JSError ExportNotAtModuleLevel;
    public static JSError ArrowCannotBeConstructor;
    public static JSError HighSurrogate;
    public static JSError LowSurrogate;
    public static JSError ApplicationError;
    public static JSError NoSource;
}
internal class Microsoft.Ajax.Utilities.JSKeyword : object {
    private JSKeyword m_next;
    private JSToken m_token;
    private string m_name;
    private int m_length;
    private JSKeyword(JSToken token, string name);
    private JSKeyword(JSToken token, string name, JSKeyword next);
    internal static string CanBeIdentifier(JSToken keyword);
    internal JSToken GetKeyword(string source, int startPosition, int wordLength);
    internal static JSKeyword[] InitKeywords();
}
public class Microsoft.Ajax.Utilities.JSON : object {
    private string m_jsonText;
    private int m_currentIndex;
    private StringBuilder m_builder;
    private bool IsAtEnd { get; }
    private char Current { get; }
    private string Minified { get; }
    private JSON(string jsonText);
    private bool get_IsAtEnd();
    private char get_Current();
    private string get_Minified();
    public static string Validate(string jsonText);
    private bool IsValidValue();
    [LocalizableAttribute("False")]
private bool IsFollowedBy(string text);
    private bool IsValidNumber();
    private bool IsValidString();
    private bool IsValidArray();
    private bool IsValidObject();
    private bool IsValidProperty();
    private char Peek(int offset);
    private char Next();
    private char SkipSpace();
}
public class Microsoft.Ajax.Utilities.JSONOutputVisitor : object {
    private TextWriter m_writer;
    private CodeSettings m_settings;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; private set; }
    private JSONOutputVisitor(TextWriter writer, CodeSettings settings);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    public static bool Apply(TextWriter writer, AstNode node, CodeSettings settings);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    private void OutputString(string text);
    public void OutputNumber(double numericValue, Context originalContext);
    private static string GetSmallestRep(string number);
    private static bool NotJustPrimitives(AstNodeList nodeList);
    private void NewLine();
}
public class Microsoft.Ajax.Utilities.JSParser : object {
    private static Boolean[] s_skippableTokens;
    private GlobalScope m_globalScope;
    private JSScanner m_scanner;
    private Context m_currentToken;
    private bool m_newModule;
    private CodeSettings m_settings;
    private bool m_foundEndOfLine;
    private IList`1<Context> m_importantComments;
    private Dictionary`2<string, LabelInfo> m_labelInfo;
    private Int64[] m_timingPoints;
    private EventHandler`1<ContextErrorEventArgs> CompilerError;
    private EventHandler`1<UndefinedReferenceEventArgs> UndefinedReference;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <DebugLookups>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptVersion <ParsedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <EchoWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AstNodeList, int> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<Context> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<AstNodeList, Context> CS$<>9__CachedAnonymousMethodDelegate40;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate97;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate98;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate9b;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate9c;
    private Context CurrentPositionContext { get; }
    public ICollection`1<string> DebugLookups { get; private set; }
    public ScriptVersion ParsedVersion { get; private set; }
    public CodeSettings Settings { get; public set; }
    public TextWriter EchoWriter { get; public set; }
    public GlobalScope GlobalScope { get; public set; }
    public IList`1<long> TimingPoints { get; }
    [ObsoleteAttribute("This Constructor will be removed in version 6. Please use the default constructor.", "False")]
public JSParser(string source);
    private static JSParser();
    private Context get_CurrentPositionContext();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_DebugLookups();
    [CompilerGeneratedAttribute]
private void set_DebugLookups(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ScriptVersion get_ParsedVersion();
    [CompilerGeneratedAttribute]
private void set_ParsedVersion(ScriptVersion value);
    public CodeSettings get_Settings();
    public void set_Settings(CodeSettings value);
    [CompilerGeneratedAttribute]
public TextWriter get_EchoWriter();
    [CompilerGeneratedAttribute]
public void set_EchoWriter(TextWriter value);
    public GlobalScope get_GlobalScope();
    public void set_GlobalScope(GlobalScope value);
    public IList`1<long> get_TimingPoints();
    public void add_CompilerError(EventHandler`1<ContextErrorEventArgs> value);
    public void remove_CompilerError(EventHandler`1<ContextErrorEventArgs> value);
    public void add_UndefinedReference(EventHandler`1<UndefinedReferenceEventArgs> value);
    public void remove_UndefinedReference(EventHandler`1<UndefinedReferenceEventArgs> value);
    public Block Parse(DocumentContext sourceContext);
    public Block Parse(DocumentContext sourceContext, CodeSettings settings);
    public Block Parse(string source);
    public Block Parse(string source, CodeSettings settings);
    [ObsoleteAttribute("This method will be removed in version 6. Please use the default constructor and use a Parse override that is passed the source.", "False")]
public Block Parse(CodeSettings settings);
    private Block InternalParse();
    private static void RemoveDuplicateDefines(Block scriptBlock);
    internal void OnUndefinedReference(UndefinedReference ex);
    internal void OnCompilerError(ContextError se);
    private Block ParseStatements(Block block);
    private AstNode ParseStatement(bool fSourceElement, bool skipImportantComment);
    private AstNode ParseExpressionStatement(bool fSourceElement);
    private LabeledStatement ParseLabeledStatement(Lookup lookup, bool fSourceElement);
    private AstNode ParseStatementLevelConditionalComment(bool fSourceElement);
    private ConditionalCompilationSet ParseConditionalCompilationSet();
    private ConditionalCompilationStatement ParseConditionalCompilationIf(bool isElseIf);
    private Block ParseBlock();
    private AstNode ParseDebuggerStatement();
    private AstNode ParseVariableStatement();
    private VariableDeclaration ParseVarDecl(JSToken inToken);
    private AstNode ParseBinding();
    private IfNode ParseIfStatement();
    private AstNode ParseForStatement();
    private DoWhile ParseDoStatement();
    private WhileNode ParseWhileStatement();
    private ContinueNode ParseContinueStatement();
    private Break ParseBreakStatement();
    private ReturnNode ParseReturnStatement();
    private WithNode ParseWithStatement();
    private AstNode ParseSwitchStatement();
    private AstNode ParseThrowStatement();
    private AstNode ParseTryStatement();
    private AstNode ParseModule();
    private AstNode ParseExport();
    private AstNode ParseImport();
    private FunctionObject ParseFunction(FunctionType functionType, Context fncCtx);
    private void ParseFunctionBody(Block body);
    private AstNodeList ParseFormalParameters();
    private ClassNode ParseClassNode(ClassType classType);
    private AstNode ParseClassElement();
    private AstNode ParseExpression(bool single, JSToken inToken);
    private AstNode ParseExpression(AstNode leftHandSide, bool single, bool bCanAssign, JSToken inToken);
    private AstNode ParseUnaryExpression(Boolean& isLeftHandSideExpr, bool isMinus);
    private AstNode ParsePostfixExpression(AstNode ast, Boolean& isLeftHandSideExpr);
    private AstNode ParseLeftHandSideExpression(bool isMinus);
    private RegExpLiteral ScanRegularExpression();
    private ConstantWrapper ScanReplacementToken();
    private TemplateLiteral ParseTemplateLiteral();
    private AstNode ParseYieldExpression();
    private FunctionObject ParseArrowFunction(AstNode parameters);
    private AstNode ParseArrayLiteral(bool isBindingPattern);
    private ComprehensionNode ParseComprehension(bool isArray, Context openDelimiter, AstNode expression);
    private ComprehensionClause ParseComprehensionClause();
    private ObjectLiteral ParseObjectLiteral(bool isBindingPattern);
    private ObjectLiteralProperty ParseObjectLiteralProperty(bool isBindingPattern);
    private ObjectLiteralField ParseObjectLiteralFieldName();
    private AstNode ParseObjectPropertyValue(bool isBindingPattern);
    private AstNode ParseMemberExpression(AstNode expression, List`1<Context> newContexts);
    private AstNodeList ParseExpressionList(JSToken terminator);
    private void SetDocumentContext(DocumentContext documentContext);
    private static AstNode CreateExpressionNode(Context operatorContext, AstNode operand1, AstNode operand2);
    private bool ConvertNumericLiteralToDouble(string str, bool isInteger, Double& doubleValue);
    private void AppendImportantComments(Block block);
    private void GetNextToken();
    private static Boolean[] InitializeSkippableTokens();
    private Context ScanNextToken();
    private JSToken PeekToken();
    private bool PeekCanBeModule();
    private void ExpectSemicolon(AstNode node);
    private void ReportError(JSError errorId, Context context, bool forceToError);
    private void CCTooComplicated(Context context);
    [CompilerGeneratedAttribute]
private static int <RemoveDuplicateDefines>b__9(AstNodeList args);
    [CompilerGeneratedAttribute]
private static void <ParseExpressionStatement>b__11(Context c);
    [CompilerGeneratedAttribute]
private Context <ParseExpressionStatement>b__12(AstNode s);
    [CompilerGeneratedAttribute]
private static Context <ParseFunction>b__3f(AstNodeList p);
    [CompilerGeneratedAttribute]
private Context <ParseFormalParameters>b__43(ParameterDeclaration p);
    [CompilerGeneratedAttribute]
private static Context <ParseClassNode>b__49(AstNode b);
    [CompilerGeneratedAttribute]
private Context <ParseObjectLiteralProperty>b__84(ObjectLiteralProperty p);
    [CompilerGeneratedAttribute]
private void <SetDocumentContext>b__92(object sender, GlobalDefineEventArgs ea);
    [CompilerGeneratedAttribute]
private void <SetDocumentContext>b__93(object sender, NewModuleEventArgs ea);
    [CompilerGeneratedAttribute]
private static Context <CreateExpressionNode>b__95(AstNode operand);
    [CompilerGeneratedAttribute]
private static Context <CreateExpressionNode>b__96(AstNode operand);
    [CompilerGeneratedAttribute]
private static Context <ExpectSemicolon>b__99(Context c);
    [CompilerGeneratedAttribute]
private static Context <ExpectSemicolon>b__9a(Context c);
}
public class Microsoft.Ajax.Utilities.JSScanner : object {
    private static JSKeyword[] s_Keywords;
    private static OperatorPrecedence[] s_OperatorsPrec;
    private static Boolean[] ValidIdentifierPartMap;
    private string m_strSourceCode;
    private int m_endPos;
    private StringBuilder m_identifier;
    private bool m_literalIssues;
    private Dictionary`2<string, string> m_defines;
    private int m_startLinePosition;
    private int m_currentPosition;
    private int m_currentLine;
    private int m_lastPosOnBuilder;
    private int m_ifDirectiveLevel;
    private int m_conditionalCompilationIfLevel;
    private bool m_conditionalCompilationOn;
    private bool m_inConditionalComment;
    private bool m_inSingleLineComment;
    private bool m_inMultipleLineComment;
    private bool m_mightBeKeyword;
    private string m_decodedString;
    private Context m_currentToken;
    private JSScanner m_peekClone;
    private EventHandler`1<GlobalDefineEventArgs> GlobalDefine;
    private EventHandler`1<NewModuleEventArgs> NewModule;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <DebugLookupCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePreprocessorDefines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConditionalCompilation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmbeddedAspNetBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripDebugCommentBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressErrors>k__BackingField;
    internal ICollection`1<string> DebugLookupCollection { get; internal set; }
    public bool UsePreprocessorDefines { get; public set; }
    public bool IgnoreConditionalCompilation { get; public set; }
    public bool AllowEmbeddedAspNetBlocks { get; public set; }
    public bool StripDebugCommentBlocks { get; public set; }
    public bool SuppressErrors { get; public set; }
    public int CurrentLine { get; }
    public bool IsEndOfFile { get; }
    public int StartLinePosition { get; }
    public bool LiteralHasIssues { get; }
    public string StringLiteralValue { get; }
    public string Identifier { get; }
    public Context CurrentToken { get; }
    private bool IsAtEndOfLine { get; }
    public JSScanner(DocumentContext sourceContext);
    private JSScanner(IDictionary`2<string, string> defines);
    private static JSScanner();
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_DebugLookupCollection();
    [CompilerGeneratedAttribute]
internal void set_DebugLookupCollection(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_UsePreprocessorDefines();
    [CompilerGeneratedAttribute]
public void set_UsePreprocessorDefines(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConditionalCompilation();
    [CompilerGeneratedAttribute]
public void set_IgnoreConditionalCompilation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmbeddedAspNetBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowEmbeddedAspNetBlocks(bool value);
    [CompilerGeneratedAttribute]
public bool get_StripDebugCommentBlocks();
    [CompilerGeneratedAttribute]
public void set_StripDebugCommentBlocks(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressErrors();
    [CompilerGeneratedAttribute]
public void set_SuppressErrors(bool value);
    public int get_CurrentLine();
    public bool get_IsEndOfFile();
    public int get_StartLinePosition();
    public bool get_LiteralHasIssues();
    public string get_StringLiteralValue();
    public string get_Identifier();
    public Context get_CurrentToken();
    private bool get_IsAtEndOfLine();
    public void add_GlobalDefine(EventHandler`1<GlobalDefineEventArgs> value);
    public void remove_GlobalDefine(EventHandler`1<GlobalDefineEventArgs> value);
    public void add_NewModule(EventHandler`1<NewModuleEventArgs> value);
    public void remove_NewModule(EventHandler`1<NewModuleEventArgs> value);
    internal JSScanner PeekClone();
    public JSScanner Clone();
    public void SetPreprocessorDefines(IDictionary`2<string, string> defines);
    public Context ScanNextToken();
    public Context UpdateToken(UpdateHint updateHint);
    public static bool IsDigit(char character);
    public static bool IsKeyword(string name, bool strictMode);
    public static bool IsValidIdentifier(string name);
    private static bool IsValidIdentifierStart(string text, int index);
    private static bool IsValidIdentifierStart(string name, Int32& startIndex);
    private static bool IsValidIdentifierPart(string text, int index);
    private static bool IsValidIdentifierPart(string name, Int32& startIndex);
    private static bool IsValidIdentifierStart(string text, int index, int length);
    private static bool IsValidIdentifierPart(string text, int index, int length);
    public static bool StartsWithValidIdentifierPart(string text);
    public static bool IsValidIdentifierPart(char letter);
    public static bool IsAssignmentOperator(JSToken token);
    public static bool IsRightAssociativeOperator(JSToken token);
    public static bool IsReplacementToken(string value);
    public static bool IsSafeIdentifier(string name);
    public static bool IsSafeIdentifierStart(char letter);
    public static bool IsSafeIdentifierPart(char letter);
    private void OnGlobalDefine(string name);
    private void OnNewModule(string newModule);
    private JSToken ScanLineTerminator(char ch);
    private JSToken ScanIdentifier(bool possibleTemplateLiteral);
    private JSToken ScanKeyword(JSKeyword keyword);
    private JSToken ScanNumber(char leadChar);
    private JSToken ScanReplacementToken();
    private JSToken ScanRegExp();
    private JSToken ScanAspNetBlock();
    private void ScanString(char delimiter);
    private bool ScanHexEscape(char hexType, String& unescaped);
    private bool ScanHexSequence(int startOfDigits, char hexType, Int32& accumulator);
    private JSToken ScanTemplateLiteral(char ch);
    private void SkipAspNetReplacement();
    private void SkipSingleLineComment();
    private void SkipToEndOfLine();
    private void SkipToEndOfLineOrComment();
    private void SkipOneLineTerminator();
    private void SkipMultilineComment();
    private void SkipBlanks();
    private bool CheckSubstring(int startIndex, string target);
    private bool CheckCaseInsensitiveSubstring(string target);
    private JSToken CheckForNumericBadEnding(JSToken token);
    private char GetChar(int index);
    private static int GetHexValue(char hex);
    private static int DecodeOneUnicodeEscapeSequence(string text, Int32& index);
    private static string PeekUnicodeEscape(string text, Int32& index);
    private static bool IsHexDigit(char c);
    private bool IsLineTerminator(char c, int increment);
    private bool IsEndLineOrEOF(char c, int increment);
    private static bool IsBlankSpace(char c);
    internal static bool IsProcessableOperator(JSToken token);
    private string PPScanIdentifier(bool forceUpper);
    private bool PPScanInteger(Int32& intValue);
    private int PPSkipToDirective(String[] endStrings);
    private bool ScanPreprocessingDirective();
    private bool ScanGlobalsDirective();
    private bool ScanSourceDirective();
    private bool ScanIfDirective();
    private Func`3<string, string, bool> CheckForOperator(SortedDictionary`2<string, Func`3<string, string, bool>> operators);
    private bool ScanElseDirective();
    private bool ScanEndIfDirective();
    private bool ScanDefineDirective();
    private bool ScanUndefineDirective();
    private bool ScanDebugDirective();
    private void HandleError(JSError error);
    private JSToken IllegalCharacter();
    public static JSToken StripAssignment(JSToken assignOp);
    public static OperatorPrecedence GetOperatorPrecedence(Context op);
    private static Boolean[] InitializeValidIdentifierPartMap();
    private static OperatorPrecedence[] InitOperatorsPrec();
}
public enum Microsoft.Ajax.Utilities.JSToken : Enum {
    public int value__;
    public static JSToken None;
    public static JSToken EndOfFile;
    public static JSToken Semicolon;
    public static JSToken RightCurly;
    public static JSToken LeftCurly;
    public static JSToken Debugger;
    public static JSToken Var;
    public static JSToken If;
    public static JSToken For;
    public static JSToken Do;
    public static JSToken While;
    public static JSToken Continue;
    public static JSToken Break;
    public static JSToken Return;
    public static JSToken With;
    public static JSToken Switch;
    public static JSToken Throw;
    public static JSToken Try;
    public static JSToken Function;
    public static JSToken Else;
    public static JSToken ConditionalCommentStart;
    public static JSToken ConditionalCommentEnd;
    public static JSToken ConditionalCompilationOn;
    public static JSToken ConditionalCompilationSet;
    public static JSToken ConditionalCompilationIf;
    public static JSToken ConditionalCompilationElseIf;
    public static JSToken ConditionalCompilationElse;
    public static JSToken ConditionalCompilationEnd;
    public static JSToken ConditionalCompilationVariable;
    public static JSToken Identifier;
    public static JSToken Null;
    public static JSToken True;
    public static JSToken False;
    public static JSToken This;
    public static JSToken StringLiteral;
    public static JSToken IntegerLiteral;
    public static JSToken NumericLiteral;
    public static JSToken TemplateLiteral;
    public static JSToken LeftParenthesis;
    public static JSToken LeftBracket;
    public static JSToken AccessField;
    public static JSToken ArrowFunction;
    public static JSToken RestSpread;
    public static JSToken FirstOperator;
    public static JSToken Delete;
    public static JSToken Increment;
    public static JSToken Decrement;
    public static JSToken Void;
    public static JSToken TypeOf;
    public static JSToken LogicalNot;
    public static JSToken BitwiseNot;
    public static JSToken FirstBinaryOperator;
    public static JSToken Plus;
    public static JSToken Minus;
    public static JSToken Multiply;
    public static JSToken Divide;
    public static JSToken Modulo;
    public static JSToken BitwiseAnd;
    public static JSToken BitwiseOr;
    public static JSToken BitwiseXor;
    public static JSToken LeftShift;
    public static JSToken RightShift;
    public static JSToken UnsignedRightShift;
    public static JSToken Equal;
    public static JSToken NotEqual;
    public static JSToken StrictEqual;
    public static JSToken StrictNotEqual;
    public static JSToken LessThan;
    public static JSToken LessThanEqual;
    public static JSToken GreaterThan;
    public static JSToken GreaterThanEqual;
    public static JSToken LogicalAnd;
    public static JSToken LogicalOr;
    public static JSToken InstanceOf;
    public static JSToken In;
    public static JSToken Comma;
    public static JSToken Assign;
    public static JSToken PlusAssign;
    public static JSToken MinusAssign;
    public static JSToken MultiplyAssign;
    public static JSToken DivideAssign;
    public static JSToken ModuloAssign;
    public static JSToken BitwiseAndAssign;
    public static JSToken BitwiseOrAssign;
    public static JSToken BitwiseXorAssign;
    public static JSToken LeftShiftAssign;
    public static JSToken RightShiftAssign;
    public static JSToken UnsignedRightShiftAssign;
    public static JSToken LastAssign;
    public static JSToken ConditionalIf;
    public static JSToken Colon;
    public static JSToken LastOperator;
    public static JSToken Case;
    public static JSToken Catch;
    public static JSToken Default;
    public static JSToken Finally;
    public static JSToken New;
    public static JSToken RightParenthesis;
    public static JSToken RightBracket;
    public static JSToken SingleLineComment;
    public static JSToken MultipleLineComment;
    public static JSToken UnterminatedComment;
    public static JSToken PreprocessorDirective;
    public static JSToken Enum;
    public static JSToken Extends;
    public static JSToken Super;
    public static JSToken Class;
    public static JSToken Const;
    public static JSToken Export;
    public static JSToken Import;
    public static JSToken Module;
    public static JSToken Let;
    public static JSToken Implements;
    public static JSToken Interface;
    public static JSToken Package;
    public static JSToken Private;
    public static JSToken Protected;
    public static JSToken Public;
    public static JSToken Static;
    public static JSToken Yield;
    public static JSToken Native;
    public static JSToken Get;
    public static JSToken Set;
    public static JSToken AspNetBlock;
    public static JSToken ReplacementToken;
    public static JSToken EndOfLine;
    public static JSToken WhiteSpace;
    public static JSToken Error;
    public static JSToken RegularExpression;
    public static JSToken Limit;
}
public class Microsoft.Ajax.Utilities.JSVariableField : object {
    private ActivationObject m_owningScope;
    private HashSet`1<INameReference> m_referenceTable;
    private HashSet`1<INameDeclaration> m_declarationTable;
    private bool m_canCrunch;
    private bool m_isDeclared;
    private bool m_isGenerated;
    private string m_crunchedName;
    [CompilerGeneratedAttribute]
private Context <OriginalContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAmbiguous>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNoReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitializationOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExported>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <OuterField>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <GhostedField>k__BackingField;
    public Context OriginalContext { get; public set; }
    public string Name { get; private set; }
    public FieldType FieldType { get; public set; }
    public FieldAttributes Attributes { get; public set; }
    public object FieldValue { get; public set; }
    public bool IsFunction { get; internal set; }
    public bool IsAmbiguous { get; public set; }
    public bool IsPlaceholder { get; public set; }
    public bool HasNoReferences { get; public set; }
    public bool InitializationOnly { get; public set; }
    public int Position { get; public set; }
    public bool WasRemoved { get; public set; }
    public bool IsExported { get; public set; }
    public JSVariableField OuterField { get; public set; }
    public ActivationObject OwningScope { get; public set; }
    public JSVariableField GhostedField { get; public set; }
    public int RefCount { get; }
    public ICollection`1<INameReference> References { get; }
    public INameReference OnlyReference { get; }
    public ICollection`1<INameDeclaration> Declarations { get; }
    public INameDeclaration OnlyDeclaration { get; }
    public bool IsLiteral { get; }
    public bool CanCrunch { get; public set; }
    public bool IsDeclared { get; public set; }
    public bool IsGenerated { get; public set; }
    public bool IsOuterReference { get; }
    public string CrunchedName { get; public set; }
    public bool IsReferenced { get; }
    public bool IsReferencedInnerScope { get; }
    public JSVariableField(FieldType fieldType, string name, FieldAttributes fieldAttributes, object value);
    internal JSVariableField(FieldType fieldType, JSVariableField outerField);
    [CompilerGeneratedAttribute]
public Context get_OriginalContext();
    [CompilerGeneratedAttribute]
public void set_OriginalContext(Context value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public FieldType get_FieldType();
    [CompilerGeneratedAttribute]
public void set_FieldType(FieldType value);
    [CompilerGeneratedAttribute]
public FieldAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(FieldAttributes value);
    [CompilerGeneratedAttribute]
public object get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(object value);
    [CompilerGeneratedAttribute]
public bool get_IsFunction();
    [CompilerGeneratedAttribute]
internal void set_IsFunction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAmbiguous();
    [CompilerGeneratedAttribute]
public void set_IsAmbiguous(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPlaceholder();
    [CompilerGeneratedAttribute]
public void set_IsPlaceholder(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasNoReferences();
    [CompilerGeneratedAttribute]
public void set_HasNoReferences(bool value);
    [CompilerGeneratedAttribute]
public bool get_InitializationOnly();
    [CompilerGeneratedAttribute]
public void set_InitializationOnly(bool value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public bool get_WasRemoved();
    [CompilerGeneratedAttribute]
public void set_WasRemoved(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExported();
    [CompilerGeneratedAttribute]
public void set_IsExported(bool value);
    [CompilerGeneratedAttribute]
public JSVariableField get_OuterField();
    [CompilerGeneratedAttribute]
public void set_OuterField(JSVariableField value);
    public ActivationObject get_OwningScope();
    public void set_OwningScope(ActivationObject value);
    [CompilerGeneratedAttribute]
public JSVariableField get_GhostedField();
    [CompilerGeneratedAttribute]
public void set_GhostedField(JSVariableField value);
    public int get_RefCount();
    public ICollection`1<INameReference> get_References();
    public INameReference get_OnlyReference();
    public ICollection`1<INameDeclaration> get_Declarations();
    public INameDeclaration get_OnlyDeclaration();
    public bool get_IsLiteral();
    public bool get_CanCrunch();
    public void set_CanCrunch(bool value);
    public bool get_IsDeclared();
    public void set_IsDeclared(bool value);
    public bool get_IsGenerated();
    public void set_IsGenerated(bool value);
    public bool get_IsOuterReference();
    public string get_CrunchedName();
    public void set_CrunchedName(string value);
    public bool get_IsReferenced();
    public bool get_IsReferencedInnerScope();
    private void SetFieldsBasedOnType(FieldType fieldType);
    public void AddReference(INameReference reference);
    public void AddReferences(IEnumerable`1<INameReference> references);
    public void Detach();
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool IsSameField(JSVariableField otherField);
}
public class Microsoft.Ajax.Utilities.LabeledStatement : AstNode {
    private AstNode m_statement;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <LabelContext>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelInfo <LabelInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public AstNode Statement { get; public set; }
    public string Label { get; public set; }
    public Context LabelContext { get; public set; }
    public LabelInfo LabelInfo { get; public set; }
    public Context ColonContext { get; public set; }
    public AstNode LeftHandSide { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public LabeledStatement(Context context);
    public AstNode get_Statement();
    public void set_Statement(AstNode value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Context get_LabelContext();
    [CompilerGeneratedAttribute]
public void set_LabelContext(Context value);
    [CompilerGeneratedAttribute]
public LabelInfo get_LabelInfo();
    [CompilerGeneratedAttribute]
public void set_LabelInfo(LabelInfo value);
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public virtual AstNode get_LeftHandSide();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.LabelInfo : object {
    [CompilerGeneratedAttribute]
private int <RefCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NestLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIssues>k__BackingField;
    public int RefCount { get; public set; }
    public int NestLevel { get; public set; }
    public string MinLabel { get; public set; }
    public bool HasIssues { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RefCount();
    [CompilerGeneratedAttribute]
public void set_RefCount(int value);
    [CompilerGeneratedAttribute]
public int get_NestLevel();
    [CompilerGeneratedAttribute]
public void set_NestLevel(int value);
    [CompilerGeneratedAttribute]
public string get_MinLabel();
    [CompilerGeneratedAttribute]
public void set_MinLabel(string value);
    [CompilerGeneratedAttribute]
public bool get_HasIssues();
    [CompilerGeneratedAttribute]
public void set_HasIssues(bool value);
}
public class Microsoft.Ajax.Utilities.LexicalDeclaration : Declaration {
    public LexicalDeclaration(Context context);
    public virtual void Accept(IVisitor visitor);
}
public enum Microsoft.Ajax.Utilities.LocalRenaming : Enum {
    public int value__;
    public static LocalRenaming KeepAll;
    public static LocalRenaming KeepLocalizationVars;
    public static LocalRenaming CrunchAll;
}
public class Microsoft.Ajax.Utilities.LogicalNot : TreeVisitor {
    private AstNode m_expression;
    private bool m_measure;
    private int m_delta;
    [CompilerGeneratedAttribute]
private bool <MinifyBooleans>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CodeSettings, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool MinifyBooleans { get; public set; }
    public LogicalNot(AstNode node);
    public LogicalNot(AstNode node, CodeSettings codeSettings);
    [CompilerGeneratedAttribute]
public bool get_MinifyBooleans();
    [CompilerGeneratedAttribute]
public void set_MinifyBooleans(bool value);
    public int Measure();
    public void Apply();
    public static void Apply(AstNode node, CodeSettings codeSettings);
    private static void WrapWithLogicalNot(AstNode operand);
    private void TypicalHandler(AstNode node);
    public virtual void Visit(AstNodeList node);
    public virtual void Visit(ArrayLiteral node);
    public virtual void Visit(BinaryOperator node);
    private void MeasureBinaryOperator(BinaryOperator node);
    private void ConvertBinaryOperator(BinaryOperator node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(Conditional node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(GroupingOperator node);
    public virtual void Visit(Lookup node);
    public virtual void Visit(Member node);
    public virtual void Visit(ObjectLiteral node);
    public virtual void Visit(RegExpLiteral node);
    public virtual void Visit(ThisLiteral node);
    public virtual void Visit(UnaryOperator node);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(CodeSettings settings);
}
public class Microsoft.Ajax.Utilities.Lookup : Expression {
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceType <RefType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public JSVariableField VariableField { get; public set; }
    public bool IsGenerated { get; public set; }
    public ReferenceType RefType { get; public set; }
    public string Name { get; public set; }
    public bool IsAssignment { get; }
    public AstNode AssignmentValue { get; }
    public string OriginalName { get; }
    public bool WasRenamed { get; }
    public ActivationObject VariableScope { get; }
    public Lookup(Context context);
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public void set_VariableField(JSVariableField value);
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
public void set_IsGenerated(bool value);
    [CompilerGeneratedAttribute]
public ReferenceType get_RefType();
    [CompilerGeneratedAttribute]
public void set_RefType(ReferenceType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual bool get_IsAssignment();
    public sealed virtual AstNode get_AssignmentValue();
    public sealed virtual string get_OriginalName();
    public sealed virtual bool get_WasRenamed();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual string ToString();
    public sealed virtual ActivationObject get_VariableScope();
    [CompilerGeneratedAttribute]
private static bool <get_WasRenamed>b__0(JSVariableField f);
}
public class Microsoft.Ajax.Utilities.MatchPropertiesVisitor : object {
    private String[] m_parts;
    private bool m_isMatch;
    private int m_index;
    public bool Match(AstNode node, string identifiers);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(Lookup node);
    public virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
}
public class Microsoft.Ajax.Utilities.Member : Expression {
    private AstNode m_root;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <NameContext>k__BackingField;
    public AstNode Root { get; public set; }
    public string Name { get; public set; }
    public Context NameContext { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public Member(Context context);
    public AstNode get_Root();
    public void set_Root(AstNode value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Context get_NameContext();
    [CompilerGeneratedAttribute]
public void set_NameContext(Context value);
    public virtual OperatorPrecedence get_Precedence();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
}
public class Microsoft.Ajax.Utilities.Minifier : object {
    private List`1<ContextError> m_errorList;
    [CompilerGeneratedAttribute]
private int <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public int WarningLevel { get; public set; }
    public string FileName { get; public set; }
    public ICollection`1<ContextError> ErrorList { get; }
    public ICollection`1<string> Errors { get; }
    [CompilerGeneratedAttribute]
public int get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(int value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public ICollection`1<ContextError> get_ErrorList();
    public ICollection`1<string> get_Errors();
    public string MinifyJavaScript(string source);
    public string MinifyJavaScript(string source, CodeSettings codeSettings);
    public string MinifyStyleSheet(string source);
    public string MinifyStyleSheet(string source, CssSettings settings);
    public string MinifyStyleSheet(string source, CssSettings settings, CodeSettings scriptSettings);
    private void OnCssError(object sender, ContextErrorEventArgs e);
    private void OnJavaScriptError(object sender, ContextErrorEventArgs e);
}
public class Microsoft.Ajax.Utilities.Missing : object {
    private static Missing s_instance;
    public static Missing Value { get; }
    private static Missing();
    public static Missing get_Value();
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.ModuleDeclaration : AstNode {
    private BindingIdentifier m_binding;
    private Block m_body;
    [CompilerGeneratedAttribute]
private Context <FromContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ModuleContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleScope <ReferencedModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImplicit>k__BackingField;
    public BindingIdentifier Binding { get; public set; }
    public Context FromContext { get; public set; }
    public string ModuleName { get; public set; }
    public Context ModuleContext { get; public set; }
    public ModuleScope ReferencedModule { get; public set; }
    public bool IsImplicit { get; public set; }
    public Block Body { get; public set; }
    public bool IsDeclaration { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ModuleDeclaration(Context context);
    public BindingIdentifier get_Binding();
    public void set_Binding(BindingIdentifier value);
    [CompilerGeneratedAttribute]
public Context get_FromContext();
    [CompilerGeneratedAttribute]
public void set_FromContext(Context value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public Context get_ModuleContext();
    [CompilerGeneratedAttribute]
public void set_ModuleContext(Context value);
    [CompilerGeneratedAttribute]
public sealed virtual ModuleScope get_ReferencedModule();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReferencedModule(ModuleScope value);
    [CompilerGeneratedAttribute]
public bool get_IsImplicit();
    [CompilerGeneratedAttribute]
public void set_IsImplicit(bool value);
    public Block get_Body();
    public void set_Body(Block value);
    public virtual bool get_IsDeclaration();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private bool <ReplaceChild>b__0(BindingIdentifier b);
}
public class Microsoft.Ajax.Utilities.ModuleScope : ActivationObject {
    private Dictionary`2<string, JSVariableField> m_knownExports;
    [CompilerGeneratedAttribute]
private bool <HasDefaultExport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotComplete>k__BackingField;
    public bool HasDefaultExport { get; public set; }
    public bool IsNotComplete { get; public set; }
    public ModuleScope(ModuleDeclaration module, ActivationObject parent, CodeSettings settings);
    [CompilerGeneratedAttribute]
public bool get_HasDefaultExport();
    [CompilerGeneratedAttribute]
public void set_HasDefaultExport(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNotComplete();
    [CompilerGeneratedAttribute]
public void set_IsNotComplete(bool value);
    public virtual void DeclareScope();
    internal virtual void AnalyzeScope();
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
public class Microsoft.Ajax.Utilities.NewModuleEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    public string Module { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
}
internal class Microsoft.Ajax.Utilities.NewParensVisitor : object {
    private bool m_needsParens;
    private bool m_outerHasNoArguments;
    private NewParensVisitor(bool outerHasNoArguments);
    public static bool NeedsParens(AstNode expression, bool outerHasNoArguments);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(FunctionObject node);
    public virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
}
public class Microsoft.Ajax.Utilities.ObjectLiteral : Expression {
    private AstNodeList m_properties;
    public AstNodeList Properties { get; public set; }
    public bool IsConstant { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ObjectLiteral(Context context);
    public AstNodeList get_Properties();
    public void set_Properties(AstNodeList value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ObjectLiteralField : ConstantWrapper {
    [CompilerGeneratedAttribute]
private bool <IsIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    public bool IsIdentifier { get; public set; }
    public Context ColonContext { get; public set; }
    public string Name { get; }
    public AstNode Initializer { get; }
    public bool IsParameter { get; }
    public bool RenameNotAllowed { get; }
    public JSVariableField VariableField { get; public set; }
    public ObjectLiteralField(object value, PrimitiveType primitiveType, Context context);
    [CompilerGeneratedAttribute]
public bool get_IsIdentifier();
    [CompilerGeneratedAttribute]
public void set_IsIdentifier(bool value);
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public sealed virtual string get_Name();
    public sealed virtual AstNode get_Initializer();
    public sealed virtual bool get_IsParameter();
    public sealed virtual bool get_RenameNotAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VariableField(JSVariableField value);
}
public class Microsoft.Ajax.Utilities.ObjectLiteralProperty : AstNode {
    private ObjectLiteralField m_propertyName;
    private AstNode m_propertyValue;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectLiteralField, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public ObjectLiteralField Name { get; public set; }
    public AstNode Value { get; public set; }
    public bool IsConstant { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ObjectLiteralProperty(Context context);
    public ObjectLiteralField get_Name();
    public void set_Name(ObjectLiteralField value);
    public AstNode get_Value();
    public void set_Value(AstNode value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual string GetFunctionGuess(AstNode target);
    [CompilerGeneratedAttribute]
private static string <GetFunctionGuess>b__0(ObjectLiteralField n);
}
public enum Microsoft.Ajax.Utilities.OperatorPrecedence : Enum {
    public int value__;
    public static OperatorPrecedence None;
    public static OperatorPrecedence Comma;
    public static OperatorPrecedence Assignment;
    public static OperatorPrecedence Conditional;
    public static OperatorPrecedence LogicalOr;
    public static OperatorPrecedence LogicalAnd;
    public static OperatorPrecedence BitwiseOr;
    public static OperatorPrecedence BitwiseXor;
    public static OperatorPrecedence BitwiseAnd;
    public static OperatorPrecedence Equality;
    public static OperatorPrecedence Relational;
    public static OperatorPrecedence Shift;
    public static OperatorPrecedence Additive;
    public static OperatorPrecedence Multiplicative;
    public static OperatorPrecedence Unary;
    public static OperatorPrecedence FieldAccess;
    public static OperatorPrecedence Primary;
    public static OperatorPrecedence Highest;
}
public enum Microsoft.Ajax.Utilities.OutputMode : Enum {
    public int value__;
    public static OutputMode SingleLine;
    public static OutputMode MultipleLines;
    public static OutputMode None;
}
public class Microsoft.Ajax.Utilities.OutputVisitor : object {
    private TextWriter m_outputStream;
    private char m_lastCharacter;
    private bool m_lastCountOdd;
    private bool m_onNewLine;
    private bool m_startOfStatement;
    private bool m_outputCCOn;
    private bool m_doneWithGlobalDirectives;
    private bool m_needsStrictDirective;
    private bool m_noLineBreaks;
    private int m_indentLevel;
    private int m_lineLength;
    private int m_lineCount;
    private Stack`1<string> m_functionStack;
    private int m_segmentStartLine;
    private int m_segmentStartColumn;
    private Func`2<char, bool> m_addSpaceIfTrue;
    private bool m_noIn;
    private bool m_hasReplacementTokens;
    private CodeSettings m_settings;
    private RequiresSeparatorVisitor m_requiresSeparator;
    private static String[] s_exponents;
    private static Char[] DecimalOrExponentChars;
    private static Char[] LineFeedCharacters;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ActivationObject, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<LabelInfo, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<LabelInfo, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<LabelInfo, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<AstNodeList, int> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<ActivationObject, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate2a;
    private OutputVisitor(TextWriter writer, CodeSettings settings);
    private static OutputVisitor();
    public static void Apply(TextWriter writer, AstNode node, CodeSettings settings);
    public static string Apply(AstNode node, CodeSettings settings);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    private string ReplaceTokens(string text);
    private string GetReplacementToken(Match match);
    private string GetSyntacticReplacementToken(Match match);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    private void OutputFunctionPrefix(FunctionObject node, string functionName);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public virtual void Visit(TemplateLiteral node);
    public virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    private void OutputTryBranch(TryNode node);
    private void OutputCatchBranch(TryNode node);
    private void OutputFinallyBranch(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    private void Output(string text);
    private void Output(char ch);
    private void OutputSpaceOrLineBreak();
    private void InsertSpaceIfNeeded(char ch);
    private void InsertSpaceIfNeeded(string text);
    private void SetLastCharState(char ch);
    private void SetLastCharState(char lastChar, string text);
    private void Indent();
    private void Unindent();
    private void OutputPossibleLineBreak(char ch);
    private bool ReplaceableSemicolon();
    private void BreakLine(bool forceBreak);
    private void NewLine();
    private int WriteToStream(string text);
    private int WriteToStream(char ch);
    public static string OperatorString(JSToken token);
    private void AcceptNodeWithParens(AstNode node, bool needsParens);
    private void OutputFunctionArgsAndBody(FunctionObject node);
    private void OutputBlock(Block block);
    private void OutputBlockWithBraces(Block block);
    private string InlineSafeString(string text);
    public static string NormalizeNumber(double numericValue, Context originalContext);
    private static string GetSmallestRep(string number);
    private static string GetSmallestRepReg(string number);
    private static string NormalOrHexIfSmaller(double doubleValue, string normal);
    public static string EscapeString(string text);
    private static int QuoteFactor(string text);
    private object StartSymbol(AstNode node);
    private void MarkSegment(AstNode node, string name, Context context);
    private void EndSymbol(object symbol);
    private void SetContextOutputPosition(Context context);
    private static void SetContextOutputPosition(Context context, Context fromContext);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__4(AstNode e);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__6(AstNode n);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__8(char c);
    [CompilerGeneratedAttribute]
private void <Visit>b__a(JSVariableField f);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__c(ActivationObject s);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__e(LabelInfo li);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__10(AstNode a);
    [CompilerGeneratedAttribute]
private void <Visit>b__12(AstNodeList e);
    [CompilerGeneratedAttribute]
private void <Visit>b__13(AstNodeList e);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__16(LabelInfo li);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__18(LabelInfo li);
    [CompilerGeneratedAttribute]
private static int <Visit>b__1a(AstNodeList p);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__1c(ActivationObject s);
    [CompilerGeneratedAttribute]
private void <Visit>b__1e(TemplateLiteralExpression expr);
    [CompilerGeneratedAttribute]
private void <OutputCatchBranch>b__20(ParameterDeclaration p);
    [CompilerGeneratedAttribute]
private void <Visit>b__21(AstNode o);
    [CompilerGeneratedAttribute]
private static bool <OutputFunctionArgsAndBody>b__23(ParameterDeclaration d);
    [CompilerGeneratedAttribute]
private static Context <OutputFunctionArgsAndBody>b__24(AstNode p);
    [CompilerGeneratedAttribute]
private static Context <OutputFunctionArgsAndBody>b__25(Block b);
    [CompilerGeneratedAttribute]
private static Context <OutputBlock>b__29(Block b);
}
public class Microsoft.Ajax.Utilities.ParameterDeclaration : AstNode {
    private AstNode m_binding;
    private AstNode m_initializer;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasRest>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <RestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <AssignContext>k__BackingField;
    public int Position { get; public set; }
    public bool HasRest { get; public set; }
    public Context RestContext { get; public set; }
    public AstNode Binding { get; public set; }
    public Context AssignContext { get; public set; }
    public AstNode Initializer { get; public set; }
    public bool IsReferenced { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ParameterDeclaration(Context context);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public bool get_HasRest();
    [CompilerGeneratedAttribute]
public void set_HasRest(bool value);
    [CompilerGeneratedAttribute]
public Context get_RestContext();
    [CompilerGeneratedAttribute]
public void set_RestContext(Context value);
    public AstNode get_Binding();
    public void set_Binding(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_AssignContext();
    [CompilerGeneratedAttribute]
public void set_AssignContext(Context value);
    public AstNode get_Initializer();
    public void set_Initializer(AstNode value);
    public bool get_IsReferenced();
    public virtual void Accept(IVisitor visitor);
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
internal class Microsoft.Ajax.Utilities.Position : object {
    private int m_line;
    private int m_char;
    public int Line { get; }
    public int Char { get; }
    public Position(int line, int character);
    public int get_Line();
    public int get_Char();
    public void NextLine();
    public void NextChar();
    public void PreviousChar();
    public Position Clone();
}
public enum Microsoft.Ajax.Utilities.PrimitiveType : Enum {
    public int value__;
    public static PrimitiveType Null;
    public static PrimitiveType Boolean;
    public static PrimitiveType Number;
    public static PrimitiveType String;
    public static PrimitiveType Other;
}
internal class Microsoft.Ajax.Utilities.ReferenceComparer : object {
    public static IComparer`1<JSVariableField> Instance;
    private static ReferenceComparer();
    public sealed virtual int Compare(JSVariableField left, JSVariableField right);
    private static int CompareContext(Context left, Context right);
}
public class Microsoft.Ajax.Utilities.ReferencesVisitor : TreeVisitor {
    private bool m_hasReference;
    private Lookup m_lookup;
    private ReferencesVisitor(Lookup lookup);
    public static bool References(AstNode node, Lookup lookup);
    public virtual void Visit(Lookup node);
}
public enum Microsoft.Ajax.Utilities.ReferenceType : Enum {
    public int value__;
    public static ReferenceType Variable;
    public static ReferenceType Function;
    public static ReferenceType Constructor;
}
public class Microsoft.Ajax.Utilities.RegExpLiteral : Expression {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatternSwitches>k__BackingField;
    public string Pattern { get; public set; }
    public string PatternSwitches { get; public set; }
    public bool IsConstant { get; }
    public RegExpLiteral(Context context);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public string get_PatternSwitches();
    [CompilerGeneratedAttribute]
public void set_PatternSwitches(string value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
}
internal class Microsoft.Ajax.Utilities.ReorderScopeVisitor : TreeVisitor {
    private List`1<FunctionObject> m_functionDeclarations;
    private List`1<FunctionObject> m_functionExpressions;
    private List`1<ModuleDeclaration> m_moduleDeclarations;
    private List`1<DirectivePrologue> m_moduleDirectives;
    private List`1<Var> m_varStatements;
    private bool m_moveVarStatements;
    private bool m_moveFunctionDecls;
    private bool m_combineAdjacentVars;
    private int m_conditionalCommentLevel;
    private GlobalScope m_globalScope;
    private ReorderScopeVisitor(JSParser parser);
    public static void Apply(Block block, JSParser parser);
    private static int RelocateDirectivePrologue(Block block, int insertAt, DirectivePrologue directivePrologue);
    private static int RelocateFunction(Block block, int insertAt, AstNode funcDecl);
    private static int RelocateVar(Block block, int insertAt, Var varStatement);
    private static int RelocateForInVar(Block block, int insertAt, Var varStatement, ForIn forIn);
    private static void UnnestBlocks(Block node);
    public virtual void Visit(Block node);
    private static JSToken DeclarationType(AstNode node);
    private static ExportNode IfTargetExport(AstNode node);
    public virtual void Visit(ConditionalCompilationComment node);
    public virtual void Visit(ConditionalCompilationIf node);
    public virtual void Visit(ConditionalCompilationEnd node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(DirectivePrologue node);
    public virtual void Visit(FunctionObject node);
    public virtual void Visit(Var node);
    public virtual void Visit(GroupingOperator node);
    public virtual void Visit(ModuleDeclaration node);
    private bool IsMinificationHint(ConstantWrapper node);
}
public class Microsoft.Ajax.Utilities.RequiresSeparatorVisitor : object {
    private CodeSettings m_settings;
    [CompilerGeneratedAttribute]
private bool <DoesRequire>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Block, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool DoesRequire { get; private set; }
    public RequiresSeparatorVisitor(CodeSettings settings);
    [CompilerGeneratedAttribute]
public bool get_DoesRequire();
    [CompilerGeneratedAttribute]
private void set_DoesRequire(bool value);
    public bool Query(AstNode node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__0(Block s);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__2(Block b);
}
public class Microsoft.Ajax.Utilities.ResolutionVisitor : object {
    private long m_orderIndex;
    private bool m_isUnreachable;
    private int m_withDepth;
    private Stack`1<ActivationObject> m_lexicalStack;
    private Stack`1<ActivationObject> m_variableStack;
    private CodeSettings m_settings;
    private ScriptVersion m_scriptVersion;
    private ActivationObject CurrentLexicalScope { get; }
    private ActivationObject CurrentVariableScope { get; }
    private long NextOrderIndex { get; }
    private ResolutionVisitor(ActivationObject rootScope, JSParser parser);
    private ActivationObject get_CurrentLexicalScope();
    private ActivationObject get_CurrentVariableScope();
    private long get_NextOrderIndex();
    public static void Apply(Block block, ActivationObject scope, JSParser parser);
    private static void CollapseBlockScope(ActivationObject blockScope);
    private static void CreateFields(ActivationObject scope);
    private static void ResolveLookups(ActivationObject scope, CodeSettings settings);
    private static void MakeExpectedGlobal(JSVariableField varField);
    private static void ResolveLookup(ActivationObject scope, Lookup lookup, CodeSettings settings);
    private static void ResolvePredefinedGlobal(Lookup lookup, ActivationObject scope, CodeSettings settings);
    private static void ResolveUndefinedGlobal(Lookup lookup);
    private static void AddGhostedFields(ActivationObject scope);
    private static void ResolveGhostedCatchParameter(ActivationObject scope, BindingIdentifier catchBinding);
    private static void ResolveGhostedFunctions(ActivationObject scope, FunctionObject funcObject);
    private static bool IsBindingIdentifierWithName(VariableDeclaration varDecl, string name);
    private static void AddDeclaredNames(AstNode node, ICollection`1<INameDeclaration> collection);
    private static ModuleScope GetModuleScope(AstNode node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.ResourceStrings : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <NameValuePairs>k__BackingField;
    public string Name { get; public set; }
    public IDictionary`2<string, string> NameValuePairs { get; private set; }
    public string Item { get; public set; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_NameValuePairs();
    [CompilerGeneratedAttribute]
private void set_NameValuePairs(IDictionary`2<string, string> value);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public int get_Count();
}
public class Microsoft.Ajax.Utilities.ReturnNode : AstNode {
    private AstNode m_operand;
    public AstNode Operand { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ReturnNode(Context context);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public enum Microsoft.Ajax.Utilities.ScopeType : Enum {
    public int value__;
    public static ScopeType None;
    public static ScopeType Global;
    public static ScopeType Function;
    public static ScopeType Block;
    public static ScopeType With;
    public static ScopeType Catch;
    public static ScopeType Class;
    public static ScopeType Lexical;
    public static ScopeType Module;
}
public class Microsoft.Ajax.Utilities.ScriptSharpSourceMap : object {
    private XmlWriter m_writer;
    private string m_currentPackagePath;
    private string m_mapPath;
    private Dictionary`2<string, int> m_sourceFileIndexMap;
    private int currentIndex;
    private int m_lineOffset;
    private int m_columnOffset;
    [CompilerGeneratedAttribute]
private string <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SafeHeader>k__BackingField;
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public static string ImplementationName { get; }
    public string Name { get; }
    public ScriptSharpSourceMap(TextWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceRoot(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SafeHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SafeHeader(bool value);
    public static string get_ImplementationName();
    public sealed virtual string get_Name();
    public sealed virtual void StartPackage(string sourcePath, string mapPath);
    public sealed virtual void EndPackage();
    public sealed virtual void NewLineInsertedInOutput();
    public sealed virtual void EndOutputRun(int lineNumber, int columnPosition);
    public sealed virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    public sealed virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, Context context);
    public sealed virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public sealed virtual void EndFile(TextWriter writer, string newLine);
    public sealed virtual void Dispose();
    private int GetSourceFileIndex(string fileName);
    private static string MakeRelative(string path, string relativeFrom);
    private static string Normalize(string path);
}
public enum Microsoft.Ajax.Utilities.ScriptVersion : Enum {
    public int value__;
    public static ScriptVersion None;
    public static ScriptVersion EcmaScript5;
    public static ScriptVersion EcmaScript6;
}
public static class Microsoft.Ajax.Utilities.SourceMapFactory : object {
    public static ISourceMap Create(TextWriter writer, string implementationName);
}
public class Microsoft.Ajax.Utilities.StatementStartVisitor : object {
    private bool m_isSafe;
    [CompilerGeneratedAttribute]
private static Func`2<ClassNode, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<FunctionObject, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool IsSafe(AstNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(ClassNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(BindingIdentifier node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ComprehensionNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ExportNode node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(ImportNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(ModuleDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(TemplateLiteral node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(ComprehensionForClause node);
    public sealed virtual void Visit(ComprehensionIfClause node);
    public sealed virtual void Visit(InitializerNode node);
    public sealed virtual void Visit(ImportExportSpecifier node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(TemplateLiteralExpression node);
    public sealed virtual void Visit(VariableDeclaration node);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__0(ClassNode n);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__2(FunctionObject n);
}
[ExtensionAttribute]
public static class Microsoft.Ajax.Utilities.StringBuilderPool : object {
    private static int CountPerThread;
    [ThreadStaticAttribute]
private static StringBuilder[] ts_cachedArray;
    private static int s_BuilderCapacity;
    private static StringBuilderPool();
    private static StringBuilder[] GetList();
    public static StringBuilder Acquire();
    public static StringBuilder Acquire(int capacity);
    [ExtensionAttribute]
public static void Release(StringBuilder builder);
}
public class Microsoft.Ajax.Utilities.StringList : object {
    private String[] m_strings;
    public StringList(object left, object right);
    private void Add(StringList source, Int32& pos);
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.Switch : AstNode {
    private AstNode m_expression;
    private AstNodeList m_cases;
    [CompilerGeneratedAttribute]
private bool <BraceOnNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <BraceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationObject <BlockScope>k__BackingField;
    public AstNode Expression { get; public set; }
    public AstNodeList Cases { get; public set; }
    public bool BraceOnNewLine { get; public set; }
    public Context BraceContext { get; public set; }
    public ActivationObject BlockScope { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public Switch(Context context);
    public AstNode get_Expression();
    public void set_Expression(AstNode value);
    public AstNodeList get_Cases();
    public void set_Cases(AstNodeList value);
    [CompilerGeneratedAttribute]
public bool get_BraceOnNewLine();
    [CompilerGeneratedAttribute]
public void set_BraceOnNewLine(bool value);
    [CompilerGeneratedAttribute]
public Context get_BraceContext();
    [CompilerGeneratedAttribute]
public void set_BraceContext(Context value);
    [CompilerGeneratedAttribute]
public ActivationObject get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(ActivationObject value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.SwitchCase : AstNode {
    private AstNode m_caseValue;
    private Block m_statements;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public AstNode CaseValue { get; public set; }
    public Block Statements { get; public set; }
    internal bool IsDefault { get; }
    public Context ColonContext { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public SwitchCase(Context context);
    public AstNode get_CaseValue();
    public void set_CaseValue(AstNode value);
    public Block get_Statements();
    public void set_Statements(Block value);
    internal bool get_IsDefault();
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.SwitchParser : object {
    private bool m_isMono;
    private bool m_noPretty;
    private EventHandler`1<InvalidSwitchEventArgs> InvalidSwitch;
    private EventHandler`1<UnknownParameterEventArgs> UnknownParameter;
    private EventHandler JSOnlyParameter;
    private EventHandler CssOnlyParameter;
    [CompilerGeneratedAttribute]
private CodeSettings <JSSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private CssSettings <CssSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrettyPrint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ExistingFileTreatment <Clobber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingOutputName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingInputName>k__BackingField;
    public CodeSettings JSSettings { get; private set; }
    public CssSettings CssSettings { get; private set; }
    public bool AnalyzeMode { get; private set; }
    public string ReportFormat { get; private set; }
    public string ReportPath { get; private set; }
    public bool PrettyPrint { get; private set; }
    public int WarningLevel { get; public set; }
    public ExistingFileTreatment Clobber { get; public set; }
    public string EncodingOutputName { get; private set; }
    public string EncodingInputName { get; private set; }
    public SwitchParser(CodeSettings scriptSettings, CssSettings cssSettings);
    [CompilerGeneratedAttribute]
public CodeSettings get_JSSettings();
    [CompilerGeneratedAttribute]
private void set_JSSettings(CodeSettings value);
    [CompilerGeneratedAttribute]
public CssSettings get_CssSettings();
    [CompilerGeneratedAttribute]
private void set_CssSettings(CssSettings value);
    [CompilerGeneratedAttribute]
public bool get_AnalyzeMode();
    [CompilerGeneratedAttribute]
private void set_AnalyzeMode(bool value);
    [CompilerGeneratedAttribute]
public string get_ReportFormat();
    [CompilerGeneratedAttribute]
private void set_ReportFormat(string value);
    [CompilerGeneratedAttribute]
public string get_ReportPath();
    [CompilerGeneratedAttribute]
private void set_ReportPath(string value);
    [CompilerGeneratedAttribute]
public bool get_PrettyPrint();
    [CompilerGeneratedAttribute]
private void set_PrettyPrint(bool value);
    [CompilerGeneratedAttribute]
public int get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(int value);
    [CompilerGeneratedAttribute]
public ExistingFileTreatment get_Clobber();
    [CompilerGeneratedAttribute]
public void set_Clobber(ExistingFileTreatment value);
    [CompilerGeneratedAttribute]
public string get_EncodingOutputName();
    [CompilerGeneratedAttribute]
private void set_EncodingOutputName(string value);
    [CompilerGeneratedAttribute]
public string get_EncodingInputName();
    [CompilerGeneratedAttribute]
private void set_EncodingInputName(string value);
    public void add_InvalidSwitch(EventHandler`1<InvalidSwitchEventArgs> value);
    public void remove_InvalidSwitch(EventHandler`1<InvalidSwitchEventArgs> value);
    public void add_UnknownParameter(EventHandler`1<UnknownParameterEventArgs> value);
    public void remove_UnknownParameter(EventHandler`1<UnknownParameterEventArgs> value);
    public void add_JSOnlyParameter(EventHandler value);
    public void remove_JSOnlyParameter(EventHandler value);
    public void add_CssOnlyParameter(EventHandler value);
    public void remove_CssOnlyParameter(EventHandler value);
    public SwitchParser Clone();
    public static String[] ToArguments(string commandLine);
    public void Parse(string commandLine);
    public void Parse(String[] args);
    protected virtual int OnUnknownParameter(IList`1<string> arguments, int index, string switchPart, string parameterPart);
    protected virtual void OnInvalidSwitch(string switchPart, string parameterPart);
    protected virtual void OnJSOnlyParameter();
    protected virtual void OnCssOnlyParameter();
    private static bool TryCreateCultureInfo(string name, CultureInfo& cultureInfo);
    private static void AlignDebugDefine(bool stripDebugStatements, IDictionary`2<string, string> defines);
    public static bool BooleanSwitch(string booleanText, bool defaultValue, Boolean& booleanValue);
    private void ResetRenamingKill(bool killSpecified);
}
public class Microsoft.Ajax.Utilities.TemplateLiteral : Expression {
    private Lookup m_function;
    private AstNodeList m_expressions;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <TextContext>k__BackingField;
    public Lookup Function { get; public set; }
    public string Text { get; public set; }
    public Context TextContext { get; public set; }
    public AstNodeList Expressions { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public TemplateLiteral(Context context);
    public Lookup get_Function();
    public void set_Function(Lookup value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Context get_TextContext();
    [CompilerGeneratedAttribute]
public void set_TextContext(Context value);
    public AstNodeList get_Expressions();
    public void set_Expressions(AstNodeList value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private bool <ReplaceChild>b__0(Lookup lookup);
    [CompilerGeneratedAttribute]
private bool <ReplaceChild>b__1(AstNodeList list);
}
public class Microsoft.Ajax.Utilities.TemplateLiteralExpression : AstNode {
    private AstNode m_expression;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <TextContext>k__BackingField;
    public AstNode Expression { get; public set; }
    public string Text { get; public set; }
    public Context TextContext { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public TemplateLiteralExpression(Context context);
    public AstNode get_Expression();
    public void set_Expression(AstNode value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Context get_TextContext();
    [CompilerGeneratedAttribute]
public void set_TextContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
public class Microsoft.Ajax.Utilities.ThisLiteral : Expression {
    public ThisLiteral(Context context);
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
}
public class Microsoft.Ajax.Utilities.ThrowNode : AstNode {
    private AstNode m_operand;
    public AstNode Operand { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ThrowNode(Context context);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
}
internal enum Microsoft.Ajax.Utilities.TokenType : Enum {
    public int value__;
    public static TokenType None;
    public static TokenType Space;
    public static TokenType CommentOpen;
    public static TokenType CommentClose;
    public static TokenType Includes;
    public static TokenType DashMatch;
    public static TokenType PrefixMatch;
    public static TokenType SuffixMatch;
    public static TokenType SubstringMatch;
    public static TokenType String;
    public static TokenType Identifier;
    public static TokenType Hash;
    public static TokenType ImportSymbol;
    public static TokenType PageSymbol;
    public static TokenType MediaSymbol;
    public static TokenType FontFaceSymbol;
    public static TokenType CharacterSetSymbol;
    public static TokenType AtKeyword;
    public static TokenType ImportantSymbol;
    public static TokenType NamespaceSymbol;
    public static TokenType KeyFramesSymbol;
    public static TokenType RelativeLength;
    public static TokenType AbsoluteLength;
    public static TokenType Resolution;
    public static TokenType Angle;
    public static TokenType Time;
    public static TokenType Frequency;
    public static TokenType Speech;
    public static TokenType Dimension;
    public static TokenType Percentage;
    public static TokenType Number;
    public static TokenType Uri;
    public static TokenType Function;
    public static TokenType Not;
    public static TokenType Any;
    public static TokenType Matches;
    public static TokenType UnicodeRange;
    public static TokenType ProgId;
    public static TokenType Character;
    public static TokenType Comment;
    public static TokenType TopLeftCornerSymbol;
    public static TokenType TopLeftSymbol;
    public static TokenType TopCenterSymbol;
    public static TokenType TopRightSymbol;
    public static TokenType TopRightCornerSymbol;
    public static TokenType BottomLeftCornerSymbol;
    public static TokenType BottomLeftSymbol;
    public static TokenType BottomCenterSymbol;
    public static TokenType BottomRightSymbol;
    public static TokenType BottomRightCornerSymbol;
    public static TokenType LeftTopSymbol;
    public static TokenType LeftMiddleSymbol;
    public static TokenType LeftBottomSymbol;
    public static TokenType RightTopSymbol;
    public static TokenType RightMiddleSymbol;
    public static TokenType RightBottomSymbol;
    public static TokenType AspNetBlock;
    public static TokenType ReplacementToken;
    public static TokenType Error;
}
[FlagsAttribute]
public enum Microsoft.Ajax.Utilities.TreeModifications : Enum {
    public long value__;
    public static TreeModifications None;
    public static TreeModifications PreserveImportantComments;
    public static TreeModifications BracketMemberToDotMember;
    public static TreeModifications NewObjectToObjectLiteral;
    public static TreeModifications NewArrayToArrayLiteral;
    public static TreeModifications RemoveEmptyDefaultCase;
    public static TreeModifications RemoveEmptyCaseWhenNoDefault;
    public static TreeModifications RemoveBreakFromLastCaseBlock;
    public static TreeModifications RemoveEmptyFinally;
    public static TreeModifications RemoveDuplicateVar;
    public static TreeModifications CombineVarStatements;
    public static TreeModifications MoveVarIntoFor;
    public static TreeModifications VarInitializeReturnToReturnInitializer;
    public static TreeModifications IfEmptyToExpression;
    public static TreeModifications IfConditionCallToConditionAndCall;
    public static TreeModifications IfElseReturnToReturnConditional;
    public static TreeModifications IfConditionReturnToCondition;
    public static TreeModifications IfConditionFalseToIfNotConditionTrue;
    public static TreeModifications CombineAdjacentStringLiterals;
    public static TreeModifications RemoveUnaryPlusOnNumericLiteral;
    public static TreeModifications ApplyUnaryMinusToNumericLiteral;
    public static TreeModifications MinifyStringLiterals;
    public static TreeModifications MinifyNumericLiterals;
    public static TreeModifications RemoveUnusedParameters;
    public static TreeModifications StripDebugStatements;
    public static TreeModifications LocalRenaming;
    public static TreeModifications RemoveFunctionExpressionNames;
    public static TreeModifications RemoveUnnecessaryLabels;
    public static TreeModifications RemoveUnnecessaryCCOnStatements;
    public static TreeModifications DateGetTimeToUnaryPlus;
    public static TreeModifications EvaluateNumericExpressions;
    public static TreeModifications SimplifyStringToNumericConversion;
    public static TreeModifications PropertyRenaming;
    public static TreeModifications RemoveQuotesFromObjectLiteralNames;
    public static TreeModifications BooleanLiteralsToNotOperators;
    public static TreeModifications IfExpressionsToExpression;
    public static TreeModifications CombineAdjacentExpressionStatements;
    public static TreeModifications ReduceStrictOperatorIfTypesAreSame;
    public static TreeModifications ReduceStrictOperatorIfTypesAreDifferent;
    public static TreeModifications MoveFunctionToTopOfScope;
    public static TreeModifications CombineVarStatementsToTopOfScope;
    public static TreeModifications IfNotTrueFalseToIfFalseTrue;
    public static TreeModifications MoveInExpressionsIntoForStatement;
    public static TreeModifications InvertIfReturn;
    public static TreeModifications CombineNestedIfs;
    public static TreeModifications CombineEquivalentIfReturns;
    public static TreeModifications ChangeWhileToFor;
    public static TreeModifications InvertIfContinue;
    public static TreeModifications EvaluateLiteralJoins;
    public static TreeModifications RemoveUnusedVariables;
    public static TreeModifications UnfoldCommaExpressionStatements;
    public static TreeModifications EvaluateLiteralLengths;
    public static TreeModifications RemoveWindowDotFromTypeOf;
    public static TreeModifications CultureInfoTokenReplacement;
}
public class Microsoft.Ajax.Utilities.TreeVisitor : object {
    public virtual void Visit(ArrayLiteral node);
    public virtual void Visit(AspNetBlockNode node);
    public virtual void Visit(AstNodeList node);
    public virtual void Visit(BinaryOperator node);
    public virtual void Visit(BindingIdentifier node);
    public virtual void Visit(Block node);
    public virtual void Visit(Break node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(ClassNode node);
    public virtual void Visit(ComprehensionNode node);
    public virtual void Visit(ComprehensionForClause node);
    public virtual void Visit(ComprehensionIfClause node);
    public virtual void Visit(ConditionalCompilationComment node);
    public virtual void Visit(ConditionalCompilationElse node);
    public virtual void Visit(ConditionalCompilationElseIf node);
    public virtual void Visit(ConditionalCompilationEnd node);
    public virtual void Visit(ConditionalCompilationIf node);
    public virtual void Visit(ConditionalCompilationOn node);
    public virtual void Visit(ConditionalCompilationSet node);
    public virtual void Visit(Conditional node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(ConstantWrapperPP node);
    public virtual void Visit(ConstStatement node);
    public virtual void Visit(ContinueNode node);
    public virtual void Visit(CustomNode node);
    public virtual void Visit(DebuggerNode node);
    public virtual void Visit(DirectivePrologue node);
    public virtual void Visit(DoWhile node);
    public virtual void Visit(EmptyStatement node);
    public virtual void Visit(ExportNode node);
    public virtual void Visit(ForIn node);
    public virtual void Visit(ForNode node);
    public virtual void Visit(FunctionObject node);
    public virtual void Visit(GetterSetter node);
    public virtual void Visit(GroupingOperator node);
    public virtual void Visit(IfNode node);
    public virtual void Visit(ImportantComment node);
    public virtual void Visit(ImportExportSpecifier node);
    public virtual void Visit(ImportNode node);
    public virtual void Visit(InitializerNode node);
    public virtual void Visit(LabeledStatement node);
    public virtual void Visit(LexicalDeclaration node);
    public virtual void Visit(Lookup node);
    public virtual void Visit(Member node);
    public virtual void Visit(ModuleDeclaration node);
    public virtual void Visit(ObjectLiteral node);
    public virtual void Visit(ObjectLiteralField node);
    public virtual void Visit(ObjectLiteralProperty node);
    public virtual void Visit(ParameterDeclaration node);
    public virtual void Visit(RegExpLiteral node);
    public virtual void Visit(ReturnNode node);
    public virtual void Visit(Switch node);
    public virtual void Visit(SwitchCase node);
    public virtual void Visit(TemplateLiteral node);
    public virtual void Visit(TemplateLiteralExpression node);
    public virtual void Visit(ThisLiteral node);
    public virtual void Visit(ThrowNode node);
    public virtual void Visit(TryNode node);
    public virtual void Visit(Var node);
    public virtual void Visit(VariableDeclaration node);
    public virtual void Visit(UnaryOperator node);
    public virtual void Visit(WhileNode node);
    public virtual void Visit(WithNode node);
}
public class Microsoft.Ajax.Utilities.TryNode : AstNode {
    private Block m_tryBlock;
    private Block m_catchBlock;
    private Block m_finallyBlock;
    private ParameterDeclaration m_catchParameter;
    [CompilerGeneratedAttribute]
private Context <CatchContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <FinallyContext>k__BackingField;
    public Block TryBlock { get; public set; }
    public Block CatchBlock { get; public set; }
    public Block FinallyBlock { get; public set; }
    public ParameterDeclaration CatchParameter { get; public set; }
    public Context CatchContext { get; public set; }
    public Context FinallyContext { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public TryNode(Context context);
    public Block get_TryBlock();
    public void set_TryBlock(Block value);
    public Block get_CatchBlock();
    public void set_CatchBlock(Block value);
    public Block get_FinallyBlock();
    public void set_FinallyBlock(Block value);
    public ParameterDeclaration get_CatchParameter();
    public void set_CatchParameter(ParameterDeclaration value);
    [CompilerGeneratedAttribute]
public Context get_CatchContext();
    [CompilerGeneratedAttribute]
public void set_CatchContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_FinallyContext();
    [CompilerGeneratedAttribute]
public void set_FinallyContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private bool <ReplaceChild>b__0(ParameterDeclaration p);
}
public class Microsoft.Ajax.Utilities.UnaryOperator : Expression {
    private AstNode m_operand;
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private JSToken <OperatorToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPostfix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OperatorInConditionalCompilationComment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConditionalCommentContainsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDelegator>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode Operand { get; public set; }
    public Context OperatorContext { get; public set; }
    public JSToken OperatorToken { get; public set; }
    public bool IsPostfix { get; public set; }
    public bool OperatorInConditionalCompilationComment { get; public set; }
    public bool ConditionalCommentContainsOn { get; public set; }
    public bool IsDelegator { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsConstant { get; }
    public UnaryOperator(Context context);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    [CompilerGeneratedAttribute]
public JSToken get_OperatorToken();
    [CompilerGeneratedAttribute]
public void set_OperatorToken(JSToken value);
    [CompilerGeneratedAttribute]
public bool get_IsPostfix();
    [CompilerGeneratedAttribute]
public void set_IsPostfix(bool value);
    [CompilerGeneratedAttribute]
public bool get_OperatorInConditionalCompilationComment();
    [CompilerGeneratedAttribute]
public void set_OperatorInConditionalCompilationComment(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConditionalCommentContainsOn();
    [CompilerGeneratedAttribute]
public void set_ConditionalCommentContainsOn(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDelegator();
    [CompilerGeneratedAttribute]
public void set_IsDelegator(bool value);
    public virtual void Accept(IVisitor visitor);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual OperatorPrecedence get_Precedence();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual bool get_IsConstant();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__0(AstNode o);
}
public class Microsoft.Ajax.Utilities.UndefinedReference : object {
    private Context m_context;
    private Lookup m_lookup;
    private string m_name;
    private ReferenceType m_type;
    public AstNode LookupNode { get; }
    public string Name { get; }
    public ReferenceType ReferenceType { get; }
    public int Column { get; }
    public int Line { get; }
    internal UndefinedReference(Lookup lookup, Context context);
    public AstNode get_LookupNode();
    public string get_Name();
    public ReferenceType get_ReferenceType();
    public int get_Column();
    public int get_Line();
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.UndefinedReferenceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UndefinedReference <Reference>k__BackingField;
    public UndefinedReference Reference { get; private set; }
    public UndefinedReferenceEventArgs(UndefinedReference reference);
    [CompilerGeneratedAttribute]
public UndefinedReference get_Reference();
    [CompilerGeneratedAttribute]
private void set_Reference(UndefinedReference value);
}
public class Microsoft.Ajax.Utilities.UnknownParameterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterPart>k__BackingField;
    public IList`1<string> Arguments { get; private set; }
    public int Index { get; public set; }
    public string SwitchPart { get; public set; }
    public string ParameterPart { get; public set; }
    public UnknownParameterEventArgs(IList`1<string> arguments);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_SwitchPart();
    [CompilerGeneratedAttribute]
public void set_SwitchPart(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterPart();
    [CompilerGeneratedAttribute]
public void set_ParameterPart(string value);
}
public enum Microsoft.Ajax.Utilities.UpdateHint : Enum {
    public int value__;
    public static UpdateHint None;
    public static UpdateHint RegularExpression;
    public static UpdateHint TemplateLiteral;
    public static UpdateHint ReplacementToken;
}
public class Microsoft.Ajax.Utilities.V3SourceMap : object {
    private string m_minifiedPath;
    private string m_mapPath;
    private TextWriter m_writer;
    private int m_maxMinifiedLine;
    private bool m_hasProperty;
    private HashSet`1<string> m_sourceFiles;
    private List`1<string> m_sourceFileList;
    private HashSet`1<string> m_names;
    private List`1<string> m_nameList;
    private List`1<Segment> m_segments;
    private int m_lastDestinationLine;
    private int m_lastDestinationColumn;
    private int m_lastSourceLine;
    private int m_lastSourceColumn;
    private int m_lastFileIndex;
    private int m_lastNameIndex;
    private int m_lineOffset;
    private int m_columnOffset;
    private static string s_base64;
    [CompilerGeneratedAttribute]
private string <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SafeHeader>k__BackingField;
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public static string ImplementationName { get; }
    public string Name { get; }
    public V3SourceMap(TextWriter writer);
    private static V3SourceMap();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceRoot(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SafeHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SafeHeader(bool value);
    public static string get_ImplementationName();
    public sealed virtual string get_Name();
    public sealed virtual void StartPackage(string sourcePath, string mapPath);
    public sealed virtual void EndPackage();
    public sealed virtual void NewLineInsertedInOutput();
    public sealed virtual void EndOutputRun(int lineNumber, int columnPosition);
    public sealed virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    public sealed virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, Context context);
    public sealed virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public sealed virtual void EndFile(TextWriter writer, string newLine);
    public sealed virtual void Dispose();
    private Segment CreateSegment(int destinationLine, int destinationColumn, int sourceLine, int sourceColumn, string fileName, string symbolName);
    private string GenerateMappings(IList`1<string> fileList, IList`1<string> nameList);
    private void EncodeNumbers(StringBuilder sb, Segment segment, IList`1<string> files, IList`1<string> names);
    private static void EncodeNumber(StringBuilder sb, int value);
    private static string MakeRelative(string path, string relativeFrom);
    private static string Normalize(string path);
    private void WriteProperty(string name, int number);
    private void WriteProperty(string name, string text);
    private void WriteProperty(string name, ICollection`1<string> collection);
    private void WritePropertyStart(string name);
    private void OutputEscapedString(string text);
    [CompilerGeneratedAttribute]
private string <MarkSegment>b__0(Context c);
}
public class Microsoft.Ajax.Utilities.Var : Declaration {
    public Var(Context context);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.VariableDeclaration : InitializerNode {
    [CompilerGeneratedAttribute]
private bool <IsCCSpecialCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCCOn>k__BackingField;
    public bool IsCCSpecialCase { get; public set; }
    public bool UseCCOn { get; public set; }
    public bool IsExpression { get; }
    public VariableDeclaration(Context context);
    [CompilerGeneratedAttribute]
public bool get_IsCCSpecialCase();
    [CompilerGeneratedAttribute]
public void set_IsCCSpecialCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCCOn();
    [CompilerGeneratedAttribute]
public void set_UseCCOn(bool value);
    public virtual void Accept(IVisitor visitor);
    public virtual bool get_IsExpression();
}
public class Microsoft.Ajax.Utilities.WhileNode : IterationStatement {
    private AstNode m_condition;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode Condition { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public WhileNode(Context context);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__0(Block b);
}
public class Microsoft.Ajax.Utilities.WithNode : AstNode {
    private AstNode m_withObject;
    private Block m_body;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate1;
    public AstNode WithObject { get; public set; }
    public Block Body { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public WithNode(Context context);
    public AstNode get_WithObject();
    public void set_WithObject(AstNode value);
    public Block get_Body();
    public void set_Body(Block value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__0(Block b);
}
public class Microsoft.Ajax.Utilities.WithScope : BlockScope {
    public WithScope(ActivationObject parent, CodeSettings settings);
    public virtual JSVariableField CreateInnerField(JSVariableField outerField);
    public virtual void DeclareScope();
    public virtual JSVariableField CreateField(JSVariableField outerField);
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
