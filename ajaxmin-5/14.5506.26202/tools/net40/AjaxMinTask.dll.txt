[SecurityCriticalAttribute]
public class Microsoft.Ajax.Minifier.Tasks.AjaxMin : Task {
    private static Regex s_endsInSemicolon;
    private Minifier m_minifier;
    private SwitchParser m_switchParser;
    private string m_symbolsMapName;
    private ICollection`1<string> m_otherInputFiles;
    private string m_switches;
    [CompilerGeneratedAttribute]
private bool <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMapSafeHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <JsSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsTargetExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsSourceExtensionPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsCombinedFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CssSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssTargetExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssSourceExtensionPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssCombinedFileName>k__BackingField;
    public string Switches { get; public set; }
    public int WarningLevel { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public bool Clobber { get; public set; }
    public string IgnoreErrorList { get; public set; }
    public string SourceMapType { get; public set; }
    public string SourceMapRoot { get; public set; }
    public bool SourceMapSafeHeader { get; public set; }
    public ITaskItem[] JsSourceFiles { get; public set; }
    public string JsTargetExtension { get; public set; }
    public string JsSourceExtensionPattern { get; public set; }
    public string JsCombinedFileName { get; public set; }
    public bool JsEnsureFinalSemicolon { get; public set; }
    public bool JsCollapseToLiteral { get; public set; }
    public string JsEvalTreatment { get; public set; }
    public int JsIndentSize { get; public set; }
    public bool JsInlineSafeStrings { get; public set; }
    public string JsLocalRenaming { get; public set; }
    public string JsManualRenamePairs { get; public set; }
    public string JsNoAutoRename { get; public set; }
    public string JsKnownGlobalNames { get; public set; }
    public string JsDebugLookups { get; public set; }
    public bool JsMacSafariQuirks { get; public set; }
    public bool JsIgnoreConditionalCompilation { get; public set; }
    public bool JsMinifyCode { get; public set; }
    public string JsOutputMode { get; public set; }
    public bool JsPreserveFunctionNames { get; public set; }
    public bool JsRemoveFunctionExpressionNames { get; public set; }
    public bool JsRemoveUnneededCode { get; public set; }
    public bool JsStripDebugStatements { get; public set; }
    public bool JsAllowEmbeddedAspNetBlocks { get; public set; }
    public string JsPreprocessorDefines { get; public set; }
    public ITaskItem[] CssSourceFiles { get; public set; }
    public string CssTargetExtension { get; public set; }
    public string CssSourceExtensionPattern { get; public set; }
    public string CssCombinedFileName { get; public set; }
    public string CssColorNames { get; public set; }
    public string CssCommentMode { get; public set; }
    public bool CssExpandOutput { get; public set; }
    public int CssIndentSpaces { get; public set; }
    public bool CssTermSemicolons { get; public set; }
    public bool CssMinifyExpressions { get; public set; }
    public bool CssAllowEmbeddedAspNetBlocks { get; public set; }
    private static AjaxMin();
    public string get_Switches();
    public void set_Switches(string value);
    private void OnUnknownParameter(object sender, UnknownParameterEventArgs ea);
    public int get_WarningLevel();
    public void set_WarningLevel(int value);
    [CompilerGeneratedAttribute]
public bool get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatWarningsAsErrors(bool value);
    public bool get_Clobber();
    public void set_Clobber(bool value);
    public string get_IgnoreErrorList();
    public void set_IgnoreErrorList(string value);
    public string get_SourceMapType();
    public void set_SourceMapType(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMapRoot();
    [CompilerGeneratedAttribute]
public void set_SourceMapRoot(string value);
    [CompilerGeneratedAttribute]
public bool get_SourceMapSafeHeader();
    [CompilerGeneratedAttribute]
public void set_SourceMapSafeHeader(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_JsSourceFiles();
    [CompilerGeneratedAttribute]
public void set_JsSourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_JsTargetExtension();
    [CompilerGeneratedAttribute]
public void set_JsTargetExtension(string value);
    [CompilerGeneratedAttribute]
public string get_JsSourceExtensionPattern();
    [CompilerGeneratedAttribute]
public void set_JsSourceExtensionPattern(string value);
    [CompilerGeneratedAttribute]
public string get_JsCombinedFileName();
    [CompilerGeneratedAttribute]
public void set_JsCombinedFileName(string value);
    public bool get_JsEnsureFinalSemicolon();
    public void set_JsEnsureFinalSemicolon(bool value);
    public bool get_JsCollapseToLiteral();
    public void set_JsCollapseToLiteral(bool value);
    public string get_JsEvalTreatment();
    public void set_JsEvalTreatment(string value);
    public int get_JsIndentSize();
    public void set_JsIndentSize(int value);
    public bool get_JsInlineSafeStrings();
    public void set_JsInlineSafeStrings(bool value);
    public string get_JsLocalRenaming();
    public void set_JsLocalRenaming(string value);
    public string get_JsManualRenamePairs();
    public void set_JsManualRenamePairs(string value);
    public string get_JsNoAutoRename();
    public void set_JsNoAutoRename(string value);
    public string get_JsKnownGlobalNames();
    public void set_JsKnownGlobalNames(string value);
    public string get_JsDebugLookups();
    public void set_JsDebugLookups(string value);
    public bool get_JsMacSafariQuirks();
    public void set_JsMacSafariQuirks(bool value);
    public bool get_JsIgnoreConditionalCompilation();
    public void set_JsIgnoreConditionalCompilation(bool value);
    public bool get_JsMinifyCode();
    public void set_JsMinifyCode(bool value);
    public string get_JsOutputMode();
    public void set_JsOutputMode(string value);
    public bool get_JsPreserveFunctionNames();
    public void set_JsPreserveFunctionNames(bool value);
    public bool get_JsRemoveFunctionExpressionNames();
    public void set_JsRemoveFunctionExpressionNames(bool value);
    public bool get_JsRemoveUnneededCode();
    public void set_JsRemoveUnneededCode(bool value);
    public bool get_JsStripDebugStatements();
    public void set_JsStripDebugStatements(bool value);
    public bool get_JsAllowEmbeddedAspNetBlocks();
    public void set_JsAllowEmbeddedAspNetBlocks(bool value);
    public string get_JsPreprocessorDefines();
    public void set_JsPreprocessorDefines(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CssSourceFiles();
    [CompilerGeneratedAttribute]
public void set_CssSourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_CssTargetExtension();
    [CompilerGeneratedAttribute]
public void set_CssTargetExtension(string value);
    [CompilerGeneratedAttribute]
public string get_CssSourceExtensionPattern();
    [CompilerGeneratedAttribute]
public void set_CssSourceExtensionPattern(string value);
    [CompilerGeneratedAttribute]
public string get_CssCombinedFileName();
    [CompilerGeneratedAttribute]
public void set_CssCombinedFileName(string value);
    public string get_CssColorNames();
    public void set_CssColorNames(string value);
    public string get_CssCommentMode();
    public void set_CssCommentMode(string value);
    public bool get_CssExpandOutput();
    public void set_CssExpandOutput(bool value);
    public int get_CssIndentSpaces();
    public void set_CssIndentSpaces(int value);
    public bool get_CssTermSemicolons();
    public void set_CssTermSemicolons(bool value);
    public bool get_CssMinifyExpressions();
    public void set_CssMinifyExpressions(bool value);
    public bool get_CssAllowEmbeddedAspNetBlocks();
    public void set_CssAllowEmbeddedAspNetBlocks(bool value);
    public virtual bool Execute();
    private void MinifyJavaScript();
    private void MinifyJavaScript(string sourceCode, string sourceName, string outputPath, string mapFilePath);
    private void ConcatenateAndMinifyJavaScript(string mapFilePath);
    private void MinifyStyleSheets();
    private void MinifyStyleSheet(string sourceCode, string sourceName, string outputPath);
    private void ConcatenateAndMinifyStyleSheet();
    private void LogFileError(string path, string message, Object[] messageArguments);
    private void LogContextError(ContextError error);
    private string GetMapFilePath(string outputPath);
    private bool FileIsWritable(string path);
    private T ParseEnumValue(string strValue);
    private Encoding GetEncoding(string encodingName, EncoderFallback fallbackEncoder);
}
public class Microsoft.Ajax.Minifier.Tasks.AjaxMinBundleTask : AjaxMinManifestBaseTask {
    [CompilerGeneratedAttribute]
private static Func`2<SwitchParser, ExistingFileTreatment> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<SwitchParser, ExistingFileTreatment> CS$<>9__CachedAnonymousMethodDelegate14;
    protected virtual void GenerateJavaScript(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    protected virtual void GenerateStyleSheet(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    [CompilerGeneratedAttribute]
private static ExistingFileTreatment <GenerateJavaScript>b__d(SwitchParser p);
    [CompilerGeneratedAttribute]
private static ExistingFileTreatment <GenerateStyleSheet>b__12(SwitchParser p);
}
public abstract class Microsoft.Ajax.Minifier.Tasks.AjaxMinManifestBaseTask : Task {
    [CompilerGeneratedAttribute]
private bool <ThrowInputMissingErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSourceMapOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDefaultSwitches>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Manifests>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<SymbolMap, FileInfo> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<FileInfo, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<SwitchParser, SwitchParser> CS$<>9__CachedAnonymousMethodDelegatec;
    protected bool ThrowInputMissingErrors { get; protected set; }
    protected bool IgnoreSourceMapOutput { get; protected set; }
    public string ProjectDefaultSwitches { get; public set; }
    public string InputFolder { get; public set; }
    public string OutputFolder { get; public set; }
    public ITaskItem[] Manifests { get; public set; }
    public string Configuration { get; public set; }
    [CompilerGeneratedAttribute]
protected bool get_ThrowInputMissingErrors();
    [CompilerGeneratedAttribute]
protected void set_ThrowInputMissingErrors(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IgnoreSourceMapOutput();
    [CompilerGeneratedAttribute]
protected void set_IgnoreSourceMapOutput(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectDefaultSwitches();
    [CompilerGeneratedAttribute]
public void set_ProjectDefaultSwitches(string value);
    [CompilerGeneratedAttribute]
public string get_InputFolder();
    [CompilerGeneratedAttribute]
public void set_InputFolder(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Manifests();
    [CompilerGeneratedAttribute]
public void set_Manifests(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    public virtual bool Execute();
    private void ProcessManifest(ITaskItem taskItem, SwitchParser projectDefaultSettings);
    protected virtual void ProcessOutputGroup(OutputGroup outputGroup, FileInfo outputFileInfo, FileInfo symbolsFileInfo, SwitchParser defaultSettings, DateTime manifestModifiedTime);
    protected abstract virtual void GenerateJavaScript(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    protected abstract virtual void GenerateStyleSheet(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    private void GenerateOutputFiles(OutputGroup outputGroup, FileInfo outputFileInfo, SwitchParser switchParser);
    private bool AnyInputsAreNewerThanOutputs(OutputGroup outputGroup, FileInfo outputFileInfo, FileInfo symbolsFileInfo, DateTime manifestModifiedTime);
    protected static TResult FileWriteOperation(string filePath, ExistingFileTreatment treatment, Func`1<TResult> operation);
    protected static SwitchParser ParseConfigSettings(string arguments, SwitchParser defaults);
    private static bool CheckFolderInputFileTimes(DirectoryInfo folderInfo, string extensions, DateTime outputFileTime);
    private static string ExtensionsFromCodeType(CodeType codeType);
    [CompilerGeneratedAttribute]
private static string <ProcessManifest>b__1(string s);
    [CompilerGeneratedAttribute]
private static FileInfo <ProcessManifest>b__2(SymbolMap sm);
    [CompilerGeneratedAttribute]
private static string <ProcessOutputGroup>b__5(FileInfo fi);
    [CompilerGeneratedAttribute]
private static SwitchParser <ParseConfigSettings>b__b(SwitchParser d);
}
public class Microsoft.Ajax.Minifier.Tasks.AjaxMinManifestCleanTask : AjaxMinManifestBaseTask {
    protected virtual void ProcessOutputGroup(OutputGroup outputGroup, FileInfo outputFileInfo, FileInfo symbolsFileInfo, SwitchParser defaultSettings, DateTime manifestModifiedTime);
    protected virtual void GenerateJavaScript(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    protected virtual void GenerateStyleSheet(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
}
public class Microsoft.Ajax.Minifier.Tasks.AjaxMinManifestTask : AjaxMinManifestBaseTask {
    [CompilerGeneratedAttribute]
private bool <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<Resource>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<OutputGroup, SymbolMap> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool TreatWarningsAsErrors { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatWarningsAsErrors(bool value);
    protected virtual void GenerateJavaScript(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    protected virtual void GenerateStyleSheet(OutputGroup outputGroup, IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding outputEncoding);
    private void ProcessJavaScript(IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, SymbolMap symbolMap, Encoding outputEncoding);
    private void ProcessStylesheet(IList`1<InputGroup> inputGroups, SwitchParser switchParser, string outputPath, Encoding encoding);
    private void LogContextError(ContextError error);
    [CompilerGeneratedAttribute]
private static bool <GenerateJavaScript>b__0(IList`1<Resource> rs);
    [CompilerGeneratedAttribute]
private static SymbolMap <GenerateJavaScript>b__1(OutputGroup og);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Ajax.Minifier.Tasks.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AlreadyDone { get; }
    internal static string CannotUseCombinedAndIndividual { get; }
    internal static string CouldNotDeleteOutputFile { get; }
    internal static string CouldNotWriteOutputFile { get; }
    internal static string DeletingFile { get; }
    internal static string DestinationIsReadOnly { get; }
    internal static string DidNotMinify { get; }
    internal static string DirectorySourceRequiresCodeType { get; }
    internal static string InvalidEncodingName { get; }
    internal static string InvalidInputParameter { get; }
    internal static string InvalidJSONOutput { get; }
    internal static string InvalidSymbolMapName { get; }
    internal static string MapDestinationIsReadOnly { get; }
    internal static string NoJavaScriptToMinify { get; }
    internal static string NoStyleSheetsToMinify { get; }
    internal static string NoWritePermission { get; }
    internal static string RequiredInputDoesntExist { get; }
    internal static string RequiredParameterIsEmpty { get; }
    internal static string SkippedOutputFile { get; }
    internal static string ThereWereErrors { get; }
    internal static string UnknownCodeType { get; }
    internal static string UnsupportedResourceType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AlreadyDone();
    internal static string get_CannotUseCombinedAndIndividual();
    internal static string get_CouldNotDeleteOutputFile();
    internal static string get_CouldNotWriteOutputFile();
    internal static string get_DeletingFile();
    internal static string get_DestinationIsReadOnly();
    internal static string get_DidNotMinify();
    internal static string get_DirectorySourceRequiresCodeType();
    internal static string get_InvalidEncodingName();
    internal static string get_InvalidInputParameter();
    internal static string get_InvalidJSONOutput();
    internal static string get_InvalidSymbolMapName();
    internal static string get_MapDestinationIsReadOnly();
    internal static string get_NoJavaScriptToMinify();
    internal static string get_NoStyleSheetsToMinify();
    internal static string get_NoWritePermission();
    internal static string get_RequiredInputDoesntExist();
    internal static string get_RequiredParameterIsEmpty();
    internal static string get_SkippedOutputFile();
    internal static string get_ThereWereErrors();
    internal static string get_UnknownCodeType();
    internal static string get_UnsupportedResourceType();
}
public class Microsoft.Ajax.Utilities.InputGroup : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSource>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceOrigin <Origin>k__BackingField;
    public string Source { get; public set; }
    public string RawSource { get; public set; }
    public SourceOrigin Origin { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_RawSource();
    [CompilerGeneratedAttribute]
public void set_RawSource(string value);
    [CompilerGeneratedAttribute]
public SourceOrigin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(SourceOrigin value);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Microsoft.Ajax.Utilities.ManifestStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InputFileNotFound { get; }
    internal static string InvalidResourcePath { get; }
    internal static string MissingInputPath { get; }
    internal static string MissingResourcePath { get; }
    internal static string ResourceFileNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InputFileNotFound();
    internal static string get_InvalidResourcePath();
    internal static string get_MissingInputPath();
    internal static string get_MissingResourcePath();
    internal static string get_ResourceFileNotFound();
}
[ExtensionAttribute]
public static class Microsoft.Ajax.Utilities.ManifestUtilities : object {
    private static Regex s_endsInSemicolon;
    [CompilerGeneratedAttribute]
private static Func`2<OutputGroup, CodeType> CS$<>9__CachedAnonymousMethodDelegate7;
    private static ManifestUtilities();
    public static Manifest ReadManifestFile(string xmlPath);
    [ExtensionAttribute]
public static void ValidateAndNormalize(Manifest manifest, string inputFolder, string outputFolder, bool throwInputErrors);
    [ExtensionAttribute]
public static string GetConfigArguments(Manifest manifest, string configuration);
    [ExtensionAttribute]
public static string GetConfigArguments(OutputGroup outputGroup, string configuration);
    [ExtensionAttribute]
public static void ProcessResourceStrings(OutputGroup outputGroup, IList`1<ResourceStrings> resourceStringList, string defaultResourceObjectName);
    [ExtensionAttribute]
public static IList`1<InputGroup> ReadInputGroups(OutputGroup outputGroup, string defaultEncodingName);
    [ExtensionAttribute]
public static Encoding GetEncoding(OutputGroup outputGroup, string defaultEncodingName);
    [ExtensionAttribute]
public static Encoding GetEncoding(InputFile inputFile, string defaultEncodingName);
    private static EncoderFallback GetEncoderFallback(CodeType codeType);
    private static Encoding GetInputEncoding(string encodingName);
    private static CodeType InferCodeType(string path);
    private static CodeType InferFolderCodeType(string path);
    private static string NormalizePath(string outputFolder, string manifestFolder, string path);
    private static string GetConfigArguments(IDictionary`2<string, string> configArguments, string configuration);
    private static void ReadFile(InputFile inputFile, FileReadBuilder fileReadBuilder, CodeType codeType, string defaultEncodingName);
    private static void ReadAllFilesWithContext(FileReadBuilder fileReadBuilder, string folderPath, string searchPattern, CodeType codeType, Encoding encoding);
    private static void ReadFileWithContext(FileReadBuilder fileReadBuilder, string filePath, CodeType codeType, Encoding encoding);
    private static ResourceStrings ProcessResourceFile(string resourcePath);
    private static ResourceStrings ProcessResources(string resourceFileName);
    private static ResourceStrings ProcessResXResources(string resourceFileName);
    [CompilerGeneratedAttribute]
private static CodeType <GetEncoding>b__6(OutputGroup g);
}
