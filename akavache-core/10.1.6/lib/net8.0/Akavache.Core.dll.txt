internal class Akavache.ABCDStruct : ValueType {
    public UInt32 A;
    public UInt32 B;
    public UInt32 C;
    public UInt32 D;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.AkavacheHttpMixin : object {
    private static IAkavacheHttpClientFactory HttpFactoryClient { get; }
    private static IAkavacheHttpClientFactory get_HttpFactoryClient();
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string key, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string key, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string key, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string key, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    private static IObservable`1<HttpResponseMessage> MakeWebRequest(HttpMethod method, Uri uri, IDictionary`2<string, string> headers, int retries, Nullable`1<TimeSpan> timeout);
    private static HttpRequestMessage CreateWebRequest(HttpMethod method, Uri uri, IDictionary`2<string, string> headers);
    private static IObservable`1<Byte[]> ProcessWebResponse(HttpResponseMessage response, string url, Nullable`1<DateTimeOffset> absoluteExpiration);
    private static IObservable`1<Byte[]> ProcessWebResponse(HttpResponseMessage response, Uri url, Nullable`1<DateTimeOffset> absoluteExpiration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Akavache.BlobCache : object {
    [NullableAttribute("2")]
private static string _applicationName;
    [NullableAttribute("2")]
private static IBlobCache _localMachine;
    [NullableAttribute("2")]
private static IBlobCache _userAccount;
    [NullableAttribute("2")]
private static ISecureBlobCache _secure;
    private static bool _shutdownRequested;
    [NullableAttribute("2")]
private static IScheduler _taskPoolOverride;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static IBlobCache _unitTestLocalMachine;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static IBlobCache _unitTestUserAccount;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static ISecureBlobCache _unitTestSecure;
    [CompilerGeneratedAttribute]
private static ISecureBlobCache <InMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private static Nullable`1<DateTimeKind> <ForcedDateTimeKind>k__BackingField;
    public static string ApplicationName { get; public set; }
    public static IBlobCache LocalMachine { get; public set; }
    public static IBlobCache UserAccount { get; public set; }
    public static ISecureBlobCache Secure { get; public set; }
    public static ISecureBlobCache InMemory { get; public set; }
    public static Nullable`1<DateTimeKind> ForcedDateTimeKind { get; public set; }
    public static IScheduler TaskpoolScheduler { get; public set; }
    private static BlobCache();
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    public static IBlobCache get_LocalMachine();
    public static void set_LocalMachine(IBlobCache value);
    public static IBlobCache get_UserAccount();
    public static void set_UserAccount(IBlobCache value);
    public static ISecureBlobCache get_Secure();
    public static void set_Secure(ISecureBlobCache value);
    [CompilerGeneratedAttribute]
public static ISecureBlobCache get_InMemory();
    [CompilerGeneratedAttribute]
public static void set_InMemory(ISecureBlobCache value);
    [CompilerGeneratedAttribute]
public static Nullable`1<DateTimeKind> get_ForcedDateTimeKind();
    [CompilerGeneratedAttribute]
public static void set_ForcedDateTimeKind(Nullable`1<DateTimeKind> value);
    public static IScheduler get_TaskpoolScheduler();
    public static void set_TaskpoolScheduler(IScheduler value);
    public static void EnsureInitialized();
    public static Task Shutdown();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Akavache.BulkOperationsMixin : object {
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<string, Byte[]>> Get(IBlobCache blobCache, IEnumerable`1<string> keys);
    [ExtensionAttribute]
public static IObservable`1<Unit> Insert(IBlobCache blobCache, IDictionary`2<string, Byte[]> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<string, Nullable`1<DateTimeOffset>>> GetCreatedAt(IBlobCache blobCache, IEnumerable`1<string> keys);
    [ExtensionAttribute]
public static IObservable`1<Unit> Invalidate(IBlobCache blobCache, IEnumerable`1<string> keys);
    [ExtensionAttribute]
public static IObservable`1<IDictionary`2<string, T>> GetObjects(IBlobCache blobCache, IEnumerable`1<string> keys);
    [ExtensionAttribute]
public static IObservable`1<Unit> InsertObjects(IBlobCache blobCache, IDictionary`2<string, T> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Unit> InvalidateObjects(IBlobCache blobCache, IEnumerable`1<string> keys);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.CacheEntry : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpiresAt>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> ExpiresAt { get; protected set; }
    [NullableAttribute("2")]
public string TypeName { get; protected set; }
    public Byte[] Value { get; protected set; }
    public CacheEntry(string typeName, Byte[] value, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> expiresAt);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ExpiresAt();
    [CompilerGeneratedAttribute]
protected void set_ExpiresAt(Nullable`1<DateTimeOffset> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
protected void set_Value(Byte[] value);
}
[AttributeUsageAttribute("32767")]
internal class Akavache.Core.PreserveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AllMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Conditional>k__BackingField;
    public bool AllMembers { get; public set; }
    public bool Conditional { get; }
    public PreserveAttribute(bool allMembers, bool conditional);
    [CompilerGeneratedAttribute]
public bool get_AllMembers();
    [CompilerGeneratedAttribute]
public void set_AllMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_Conditional();
}
[PreserveAttribute]
public class Akavache.Core.Registrations : object {
    [NullableContextAttribute("1")]
public sealed virtual void Register(IMutableDependencyResolver resolver, IReadonlyDependencyResolver readonlyDependencyResolver);
}
public enum Akavache.DataProtectionScope : Enum {
    public int value__;
    public static DataProtectionScope CurrentUser;
}
public class Akavache.DefaultAkavacheHttpClientFactory : object {
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<string, HttpClient> _instances;
    private static DefaultAkavacheHttpClientFactory();
    [NullableContextAttribute("1")]
public sealed virtual HttpClient CreateClient(string name);
}
[ExtensionAttribute]
public static class Akavache.DependencyResolverMixin : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void InitializeAkavache(IMutableDependencyResolver resolver, IReadonlyDependencyResolver readonlyDependencyResolver);
}
public class Akavache.EncryptionProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual IObservable`1<Byte[]> EncryptBlock(Byte[] block);
    [NullableContextAttribute("1")]
public sealed virtual IObservable`1<Byte[]> DecryptBlock(Byte[] block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Akavache.ExceptionHelper : object {
    public static IObservable`1<T> ObservableThrowKeyNotFoundException(string key, Exception innerException);
    public static IObservable`1<T> ObservableThrowObjectDisposedException(string obj, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Akavache.HttpMixinExtensions : object {
    private static IAkavacheHttpMixin HttpMixin { get; }
    private static IAkavacheHttpMixin get_HttpMixin();
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string key, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string key, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string key, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string key, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
}
[NullableContextAttribute("1")]
public interface Akavache.IAkavacheHttpClientFactory {
    public abstract virtual HttpClient CreateClient(string name);
}
[NullableContextAttribute("1")]
public interface Akavache.IAkavacheHttpMixin {
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string key, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string key, string url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string key, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, HttpMethod method, string key, Uri url, IDictionary`2<string, string> headers, bool fetchAlways, Nullable`1<DateTimeOffset> absoluteExpiration);
}
[NullableContextAttribute("1")]
public interface Akavache.IBlobCache {
    public IObservable`1<Unit> Shutdown { get; }
    public IScheduler Scheduler { get; }
    public Nullable`1<DateTimeKind> ForcedDateTimeKind { get; public set; }
    public abstract virtual IObservable`1<Unit> get_Shutdown();
    public abstract virtual IScheduler get_Scheduler();
    public abstract virtual Nullable`1<DateTimeKind> get_ForcedDateTimeKind();
    public abstract virtual void set_ForcedDateTimeKind(Nullable`1<DateTimeKind> value);
    public abstract virtual IObservable`1<Unit> Insert(string key, Byte[] data, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<Byte[]> Get(string key);
    public abstract virtual IObservable`1<IEnumerable`1<string>> GetAllKeys();
    public abstract virtual IObservable`1<Nullable`1<DateTimeOffset>> GetCreatedAt(string key);
    public abstract virtual IObservable`1<Unit> Flush();
    public abstract virtual IObservable`1<Unit> Invalidate(string key);
    public abstract virtual IObservable`1<Unit> InvalidateAll();
    public abstract virtual IObservable`1<Unit> Vacuum();
}
[NullableContextAttribute("1")]
public interface Akavache.IBulkBlobCache {
    public abstract virtual IObservable`1<Unit> Insert(IDictionary`2<string, Byte[]> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<IDictionary`2<string, Byte[]>> Get(IEnumerable`1<string> keys);
    public abstract virtual IObservable`1<IDictionary`2<string, Nullable`1<DateTimeOffset>>> GetCreatedAt(IEnumerable`1<string> keys);
    public abstract virtual IObservable`1<Unit> Invalidate(IEnumerable`1<string> keys);
}
[NullableContextAttribute("1")]
public interface Akavache.IEncryptionProvider {
    public abstract virtual IObservable`1<Byte[]> EncryptBlock(Byte[] block);
    public abstract virtual IObservable`1<Byte[]> DecryptBlock(Byte[] block);
}
[NullableContextAttribute("1")]
public interface Akavache.IFilesystemProvider {
    public abstract virtual IObservable`1<Stream> OpenFileForReadAsync(string path, IScheduler scheduler);
    public abstract virtual IObservable`1<Stream> OpenFileForWriteAsync(string path, IScheduler scheduler);
    public abstract virtual IObservable`1<Unit> CreateRecursive(string path);
    public abstract virtual IObservable`1<Unit> Delete(string path);
    [NullableContextAttribute("2")]
public abstract virtual string GetDefaultLocalMachineCacheDirectory();
    [NullableContextAttribute("2")]
public abstract virtual string GetDefaultRoamingCacheDirectory();
    [NullableContextAttribute("2")]
public abstract virtual string GetDefaultSecretCacheDirectory();
}
[NullableContextAttribute("1")]
public interface Akavache.IKeyedOperationQueue {
    public abstract virtual IObservable`1<T> EnqueueObservableOperation(string key, Func`1<IObservable`1<T>> asyncCalculationFunc);
    public abstract virtual IObservable`1<T> EnqueueOperation(string key, Func`1<T> calculationFunc);
    public abstract virtual IObservable`1<Unit> EnqueueOperation(string key, Action action);
    public abstract virtual IObservable`1<Unit> ShutdownQueue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.InMemoryBlobCache : object {
    private AsyncSubject`1<Unit> _shutdown;
    [NullableAttribute("2")]
private IDisposable _inner;
    private Dictionary`2<string, CacheEntry> _cache;
    private JsonDateTimeContractResolver _jsonDateTimeContractResolver;
    private bool _disposed;
    private Nullable`1<DateTimeKind> _dateTimeKind;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    public Nullable`1<DateTimeKind> ForcedDateTimeKind { get; public set; }
    public IScheduler Scheduler { get; protected set; }
    public IObservable`1<Unit> Shutdown { get; }
    public InMemoryBlobCache(IScheduler scheduler);
    public InMemoryBlobCache(IEnumerable`1<KeyValuePair`2<string, Byte[]>> initialContents);
    [NullableContextAttribute("2")]
public InMemoryBlobCache(IScheduler scheduler, IEnumerable`1<KeyValuePair`2<string, Byte[]>> initialContents);
    internal InMemoryBlobCache(Action disposer, IScheduler scheduler, IEnumerable`1<KeyValuePair`2<string, Byte[]>> initialContents);
    public sealed virtual Nullable`1<DateTimeKind> get_ForcedDateTimeKind();
    public sealed virtual void set_ForcedDateTimeKind(Nullable`1<DateTimeKind> value);
    [CompilerGeneratedAttribute]
public sealed virtual IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
protected void set_Scheduler(IScheduler value);
    public sealed virtual IObservable`1<Unit> get_Shutdown();
    public static InMemoryBlobCache OverrideGlobals(IScheduler scheduler, KeyValuePair`2[] initialContents);
    public static InMemoryBlobCache OverrideGlobals(IDictionary`2<string, Byte[]> initialContents, IScheduler scheduler);
    public static InMemoryBlobCache OverrideGlobals(IDictionary`2<string, object> initialContents, IScheduler scheduler);
    public sealed virtual IObservable`1<Unit> Insert(string key, Byte[] data, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Unit> Flush();
    public sealed virtual IObservable`1<Byte[]> Get(string key);
    public sealed virtual IObservable`1<Nullable`1<DateTimeOffset>> GetCreatedAt(string key);
    public sealed virtual IObservable`1<IEnumerable`1<string>> GetAllKeys();
    public sealed virtual IObservable`1<Unit> Invalidate(string key);
    public sealed virtual IObservable`1<Unit> InvalidateAll();
    public sealed virtual IObservable`1<Unit> InsertObject(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<T> GetObject(string key);
    public sealed virtual IObservable`1<Nullable`1<DateTimeOffset>> GetObjectCreatedAt(string key);
    public sealed virtual IObservable`1<IEnumerable`1<T>> GetAllObjects();
    public sealed virtual IObservable`1<Unit> InvalidateObject(string key);
    public sealed virtual IObservable`1<Unit> InvalidateAllObjects();
    public sealed virtual IObservable`1<Unit> Vacuum();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    private Byte[] SerializeObject(T value);
    private T DeserializeObject(Byte[] data);
    private JsonSerializer GetSerializer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetAllKeys>b__27_0(KeyValuePair`2<string, CacheEntry> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetAllObjects>b__33_0(KeyValuePair`2<string, CacheEntry> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <GetAllObjects>b__33_1(KeyValuePair`2<string, CacheEntry> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Vacuum>b__36_0(KeyValuePair`2<string, CacheEntry> x);
}
[FlagsAttribute]
public enum Akavache.Internal.FileAccess : Enum {
    public int value__;
    public static FileAccess Read;
    public static FileAccess Write;
    public static FileAccess ReadWrite;
}
public enum Akavache.Internal.FileMode : Enum {
    public int value__;
    public static FileMode CreateNew;
    public static FileMode Create;
    public static FileMode Open;
    public static FileMode OpenOrCreate;
    public static FileMode Truncate;
    public static FileMode Append;
}
[FlagsAttribute]
public enum Akavache.Internal.FileShare : Enum {
    public int value__;
    public static FileShare None;
    public static FileShare Read;
    public static FileShare Write;
    public static FileShare ReadWrite;
    public static FileShare Delete;
    public static FileShare Inheritable;
}
[NullableContextAttribute("1")]
public interface Akavache.IObjectBlobCache {
    public abstract virtual IObservable`1<Unit> InsertObject(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual IObservable`1<T> GetObject(string key);
    public abstract virtual IObservable`1<IEnumerable`1<T>> GetAllObjects();
    public abstract virtual IObservable`1<Nullable`1<DateTimeOffset>> GetObjectCreatedAt(string key);
    public abstract virtual IObservable`1<Unit> InvalidateObject(string key);
    public abstract virtual IObservable`1<Unit> InvalidateAllObjects();
}
public interface Akavache.IObjectBulkBlobCache {
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<Unit> InsertObjects(IDictionary`2<string, T> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<IDictionary`2<string, T>> GetObjects(IEnumerable`1<string> keys);
    [NullableContextAttribute("1")]
public abstract virtual IObservable`1<Unit> InvalidateObjects(IEnumerable`1<string> keys);
}
internal interface Akavache.IObjectWrapper {
}
public interface Akavache.ISecureBlobCache {
}
[NullableContextAttribute("1")]
internal interface Akavache.IWantsToRegisterStuff {
    public abstract virtual void Register(IMutableDependencyResolver resolver, IReadonlyDependencyResolver readonlyDependencyResolver);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Akavache.JsonDateTimeContractResolver : DefaultContractResolver {
    [CompilerGeneratedAttribute]
private IContractResolver <ExistingContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeKind> <ForceDateTimeKindOverride>k__BackingField;
    public IContractResolver ExistingContractResolver { get; public set; }
    public Nullable`1<DateTimeKind> ForceDateTimeKindOverride { get; public set; }
    public JsonDateTimeContractResolver(IContractResolver contractResolver, Nullable`1<DateTimeKind> forceDateTimeKindOverride);
    [CompilerGeneratedAttribute]
public IContractResolver get_ExistingContractResolver();
    [CompilerGeneratedAttribute]
public void set_ExistingContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeKind> get_ForceDateTimeKindOverride();
    [CompilerGeneratedAttribute]
public void set_ForceDateTimeKindOverride(Nullable`1<DateTimeKind> value);
    [NullableContextAttribute("1")]
public virtual JsonContract ResolveContract(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.JsonDateTimeOffsetTickConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private static JsonDateTimeOffsetTickConverter <Default>k__BackingField;
    public static JsonDateTimeOffsetTickConverter Default { get; }
    private static JsonDateTimeOffsetTickConverter();
    [CompilerGeneratedAttribute]
public static JsonDateTimeOffsetTickConverter get_Default();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.JsonDateTimeTickConverter : JsonConverter {
    private Nullable`1<DateTimeKind> _forceDateTimeKindOverride;
    [CompilerGeneratedAttribute]
private static JsonDateTimeTickConverter <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonDateTimeTickConverter <LocalDateTimeKindDefault>k__BackingField;
    public static JsonDateTimeTickConverter Default { get; }
    public static JsonDateTimeTickConverter LocalDateTimeKindDefault { get; }
    public JsonDateTimeTickConverter(Nullable`1<DateTimeKind> forceDateTimeKindOverride);
    private static JsonDateTimeTickConverter();
    [CompilerGeneratedAttribute]
public static JsonDateTimeTickConverter get_Default();
    [CompilerGeneratedAttribute]
public static JsonDateTimeTickConverter get_LocalDateTimeKindDefault();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Akavache.JsonSerializationMixin : object {
    private static ConcurrentDictionary`2<string, object> _inflightFetchRequests;
    private static JsonSerializationMixin();
    [ExtensionAttribute]
public static IObservable`1<Unit> InsertObject(IBlobCache blobCache, string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Unit> InsertAllObjects(IBlobCache blobCache, IDictionary`2<string, T> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<T> GetObject(IBlobCache blobCache, string key);
    [ExtensionAttribute]
public static IObservable`1<IEnumerable`1<T>> GetAllObjects(IBlobCache blobCache);
    [ExtensionAttribute]
public static IObservable`1<T> GetOrFetchObject(IBlobCache blobCache, string key, Func`1<IObservable`1<T>> fetchFunc, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<T> GetOrFetchObject(IBlobCache blobCache, string key, Func`1<Task`1<T>> fetchFunc, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<T> GetOrCreateObject(IBlobCache blobCache, string key, Func`1<T> fetchFunc, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<Nullable`1<DateTimeOffset>> GetObjectCreatedAt(IBlobCache blobCache, string key);
    [ExtensionAttribute]
public static IObservable`1<T> GetAndFetchLatest(IBlobCache blobCache, string key, Func`1<IObservable`1<T>> fetchFunc, Func`2<DateTimeOffset, bool> fetchPredicate, Nullable`1<DateTimeOffset> absoluteExpiration, bool shouldInvalidateOnError, Func`2<T, bool> cacheValidationPredicate);
    [ExtensionAttribute]
public static IObservable`1<T> GetAndFetchLatest(IBlobCache blobCache, string key, Func`1<Task`1<T>> fetchFunc, Func`2<DateTimeOffset, bool> fetchPredicate, Nullable`1<DateTimeOffset> absoluteExpiration, bool shouldInvalidateOnError, Func`2<T, bool> cacheValidationPredicate);
    [ExtensionAttribute]
public static IObservable`1<Unit> InvalidateObject(IBlobCache blobCache, string key);
    [ExtensionAttribute]
public static IObservable`1<Unit> InvalidateAllObjects(IBlobCache blobCache);
    internal static Byte[] SerializeObject(object value);
    internal static Byte[] SerializeObject(T value);
    internal static IObservable`1<T> DeserializeObject(Byte[] x);
    internal static string GetTypePrefixedKey(string key, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Akavache.KeyedOperation : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public string Key { get; public set; }
    public int Id { get; public set; }
    protected KeyedOperation(string key, int id);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public abstract virtual IObservable`1<Unit> EvaluateFunc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.KeyedOperation`1 : KeyedOperation {
    [CompilerGeneratedAttribute]
private Func`1<IObservable`1<T>> <Func>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplaySubject`1<T> <Result>k__BackingField;
    public Func`1<IObservable`1<T>> Func { get; }
    public ReplaySubject`1<T> Result { get; }
    public KeyedOperation`1(Func`1<IObservable`1<T>> func, string key, int id);
    [CompilerGeneratedAttribute]
public Func`1<IObservable`1<T>> get_Func();
    [CompilerGeneratedAttribute]
public ReplaySubject`1<T> get_Result();
    public virtual IObservable`1<Unit> EvaluateFunc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.KeyedOperationQueue : object {
    private static int _sequenceNumber;
    private IScheduler _scheduler;
    private Subject`1<KeyedOperation> _queuedOps;
    private IConnectableObservable`1<KeyedOperation> _resultObs;
    [NullableAttribute("2")]
private AsyncSubject`1<Unit> _shutdownObs;
    [NullableContextAttribute("2")]
public KeyedOperationQueue(IScheduler scheduler);
    private static KeyedOperationQueue();
    public sealed virtual IObservable`1<Unit> EnqueueOperation(string key, Action action);
    public sealed virtual IObservable`1<T> EnqueueOperation(string key, Func`1<T> calculationFunc);
    public sealed virtual IObservable`1<T> EnqueueObservableOperation(string key, Func`1<IObservable`1<T>> asyncCalculationFunc);
    public sealed virtual IObservable`1<Unit> ShutdownQueue();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static IObservable`1<KeyedOperation> ProcessOperation(KeyedOperation operation);
    private AsyncSubject`1<T> SafeStart(Func`1<T> calculationFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.LoginInfo : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string UserName { get; }
    public string Password { get; }
    public LoginInfo(string username, string password);
    internal LoginInfo(ValueTuple`2<string, string> usernameAndLogin);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public string get_Password();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Akavache.LoginMixin : object {
    [ExtensionAttribute]
public static IObservable`1<Unit> SaveLogin(ISecureBlobCache blobCache, string user, string password, string host, Nullable`1<DateTimeOffset> absoluteExpiration);
    [ExtensionAttribute]
public static IObservable`1<LoginInfo> GetLoginAsync(ISecureBlobCache blobCache, string host);
    [ExtensionAttribute]
public static IObservable`1<Unit> EraseLogin(ISecureBlobCache blobCache, string host);
}
internal class Akavache.MD5Core : object {
    public static Byte[] GetHash(string input, Encoding encoding);
    public static Byte[] GetHash(string input);
    public static string GetHashString(Byte[] input);
    public static string GetHashString(string input, Encoding encoding);
    public static string GetHashString(string input);
    public static Byte[] GetHash(Byte[] input);
    internal static Byte[] GetHashFinalBlock(Byte[] input, int ibStart, int cbSize, ABCDStruct ABCD, long len);
    internal static void GetHashBlock(Byte[] input, ABCDStruct& ABCDValue, int ibStart);
    private static UInt32 r1(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 t);
    private static UInt32 r2(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 t);
    private static UInt32 r3(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 t);
    private static UInt32 r4(UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 t);
    private static UInt32 LSR(UInt32 i, int s);
    private static UInt32[] Converter(IReadOnlyList`1<byte> input, int ibStart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.MD5Managed : MD5 {
    private Byte[] _data;
    private ABCDStruct _abcd;
    private long _totalLength;
    private int _dataSize;
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Akavache.ObjectWrapper`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    [NullableContextAttribute("1")]
public ObjectWrapper`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Akavache.PortableExtensions : object {
    [ExtensionAttribute]
public static T Retry(Func`1<T> block, int retries);
    [ExtensionAttribute]
internal static IObservable`1<T> PermaRef(IConnectableObservable`1<T> observable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Akavache.ProtectedData : object {
    public static Byte[] Protect(Byte[] originalData, Byte[] entropy, DataProtectionScope scope);
    public static Byte[] Unprotect(Byte[] originalData, Byte[] entropy, DataProtectionScope scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Akavache.RelativeTimeMixin : object {
    [ExtensionAttribute]
public static IObservable`1<Unit> Insert(IBlobCache blobCache, string key, Byte[] data, TimeSpan expiration);
    [ExtensionAttribute]
public static IObservable`1<Unit> InsertObject(IBlobCache blobCache, string key, T value, TimeSpan expiration);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, string url, TimeSpan expiration, Dictionary`2<string, string> headers, bool fetchAlways);
    [ExtensionAttribute]
public static IObservable`1<Byte[]> DownloadUrl(IBlobCache blobCache, Uri url, TimeSpan expiration, Dictionary`2<string, string> headers, bool fetchAlways);
    [ExtensionAttribute]
public static IObservable`1<Unit> SaveLogin(ISecureBlobCache blobCache, string user, string password, string host, TimeSpan expiration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.SimpleFilesystemProvider : object {
    public sealed virtual IObservable`1<Stream> OpenFileForReadAsync(string path, IScheduler scheduler);
    public sealed virtual IObservable`1<Stream> OpenFileForWriteAsync(string path, IScheduler scheduler);
    public sealed virtual IObservable`1<Unit> CreateRecursive(string path);
    public sealed virtual IObservable`1<Unit> Delete(string path);
    public sealed virtual string GetDefaultRoamingCacheDirectory();
    public sealed virtual string GetDefaultSecretCacheDirectory();
    public sealed virtual string GetDefaultLocalMachineCacheDirectory();
    protected static string GetAssemblyDirectoryName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Akavache.Utility : object {
    public static string GetMd5Hash(string input);
    public static IObservable`1<Stream> SafeOpenFileAsync(string path, FileMode mode, FileAccess access, FileShare share, IScheduler scheduler);
    [ExtensionAttribute]
public static void CreateRecursive(DirectoryInfo directoryInfo);
    [ExtensionAttribute]
public static IEnumerable`1<string> SplitFullPath(DirectoryInfo directoryInfo);
    [ExtensionAttribute]
public static IObservable`1<T> LogErrors(IObservable`1<T> observable, string message);
    [ExtensionAttribute]
public static IObservable`1<Unit> CopyToAsync(Stream stream, Stream destination, IScheduler scheduler);
}
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[ExtensionAttribute]
public static class System.StreamMixins : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IObservable`1<Unit> WriteAsyncRx(Stream blobCache, Byte[] data, int start, int length);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.143.54359")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
