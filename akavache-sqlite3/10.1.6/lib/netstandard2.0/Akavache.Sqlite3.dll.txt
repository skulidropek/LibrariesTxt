[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.BeginTransactionSqliteOperation : object {
    private sqlite3_stmt _beginOp;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public BeginTransactionSqliteOperation(SQLiteConnection conn);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <PrepareToExecute>b__7_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.BulkInsertSqliteOperation : object {
    private sqlite3_stmt _insertOp;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public BulkInsertSqliteOperation(SQLiteConnection conn);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute(IEnumerable`1<CacheElement> toInsert);
    public sealed virtual void Dispose();
}
internal class Akavache.Sqlite3.BulkInvalidateByTypeSqliteOperation : BulkInvalidateSqliteOperation {
    [NullableContextAttribute("1")]
public BulkInvalidateByTypeSqliteOperation(SQLiteConnection conn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.BulkInvalidateSqliteOperation : object {
    private sqlite3_stmt[] _deleteOps;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public BulkInvalidateSqliteOperation(SQLiteConnection conn, bool useTypeInsteadOfKey);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute(IEnumerable`1<string> toDelete);
    public sealed virtual void Dispose();
}
internal class Akavache.Sqlite3.BulkSelectByTypeSqliteOperation : BulkSelectSqliteOperation {
    [NullableContextAttribute("1")]
public BulkSelectByTypeSqliteOperation(SQLiteConnection conn, IScheduler scheduler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.BulkSelectSqliteOperation : object {
    private sqlite3_stmt[] _selectOps;
    private IScheduler _scheduler;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public BulkSelectSqliteOperation(SQLiteConnection conn, bool useTypeInsteadOfKey, IScheduler scheduler);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Func`1<IEnumerable`1<CacheElement>> PrepareToExecute(IEnumerable`1<string> toSelect);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.CacheElement : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [PrimaryKeyAttribute]
public string Key { get; public set; }
    [NullableAttribute("2")]
[IndexedAttribute]
public string TypeName { get; public set; }
    public Byte[] Value { get; public set; }
    [IndexedAttribute]
public DateTime Expiration { get; public set; }
    public DateTime CreatedAt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public DateTime get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.CommitTransactionSqliteOperation : object {
    private sqlite3_stmt _commitOp;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public CommitTransactionSqliteOperation(SQLiteConnection conn);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <PrepareToExecute>b__7_0();
}
internal static class Akavache.Sqlite3.Constants : object {
    public static int OperationQueueChunkSize;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.DeleteExpiredSqliteOperation : object {
    private sqlite3_stmt _deleteOp;
    private IScheduler _scheduler;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public DeleteExpiredSqliteOperation(SQLiteConnection conn, IScheduler scheduler);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute();
    public sealed virtual void Dispose();
}
internal static class Akavache.Sqlite3.EnumerableEx : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Akavache.Sqlite3.EnumerableEx/<Return>d__0`1")]
public static IEnumerable`1<T> Return(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.GetKeysSqliteOperation : object {
    private sqlite3_stmt _selectOp;
    private IScheduler _scheduler;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public GetKeysSqliteOperation(SQLiteConnection conn, IScheduler scheduler);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Func`1<IEnumerable`1<string>> PrepareToExecute();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PrepareToExecute>b__8_0();
}
public class Akavache.Sqlite3.Internal.AsyncLock : object {
    [NullableAttribute("1")]
private SemaphoreSlim _semaphore;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Task`1<IDisposable> _releaser;
    public Task`1<IDisposable> LockAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.InvalidateAllSqliteOperation : object {
    private SQLiteConnection _connection;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public InvalidateAllSqliteOperation(SQLiteConnection connection);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <PrepareToExecute>b__7_0();
}
internal interface Akavache.Sqlite3.IObjectWrapper {
}
internal interface Akavache.Sqlite3.IPreparedSqliteOperation {
    [NullableAttribute("1")]
public SQLiteConnection Connection { get; }
    [NullableContextAttribute("1")]
public abstract virtual SQLiteConnection get_Connection();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.ObjectWrapper`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    [NullableContextAttribute("1")]
public ObjectWrapper`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.OperationQueueItem : object {
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IEnumerable <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Completion>k__BackingField;
    public OperationType OperationType { get; public set; }
    [NullableAttribute("2")]
public IEnumerable Parameters { get; public set; }
    public object Completion { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<CacheElement> ParametersAsElements { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> ParametersAsKeys { get; }
    public AsyncSubject`1<Unit> CompletionAsUnit { get; }
    public AsyncSubject`1<IEnumerable`1<CacheElement>> CompletionAsElements { get; }
    public AsyncSubject`1<IEnumerable`1<string>> CompletionAsKeys { get; }
    public OperationQueueItem(object completion, IEnumerable parameters);
    [CompilerGeneratedAttribute]
public OperationType get_OperationType();
    [CompilerGeneratedAttribute]
public void set_OperationType(OperationType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IEnumerable get_Parameters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Parameters(IEnumerable value);
    [CompilerGeneratedAttribute]
public object get_Completion();
    [CompilerGeneratedAttribute]
public void set_Completion(object value);
    public IEnumerable`1<CacheElement> get_ParametersAsElements();
    public IEnumerable`1<string> get_ParametersAsKeys();
    public AsyncSubject`1<Unit> get_CompletionAsUnit();
    public AsyncSubject`1<IEnumerable`1<CacheElement>> get_CompletionAsElements();
    public AsyncSubject`1<IEnumerable`1<string>> get_CompletionAsKeys();
    public static OperationQueueItem CreateInsert(OperationType opType, IEnumerable`1<CacheElement> toInsert, AsyncSubject`1<Unit> completion);
    public static OperationQueueItem CreateInvalidate(OperationType opType, IEnumerable`1<string> toInvalidate, AsyncSubject`1<Unit> completion);
    public static OperationQueueItem CreateSelect(OperationType opType, IEnumerable`1<string> toSelect, AsyncSubject`1<IEnumerable`1<CacheElement>> completion);
    public static OperationQueueItem CreateUnit(OperationType opType, AsyncSubject`1<Unit> completion);
    public static OperationQueueItem CreateGetAllKeys();
}
internal enum Akavache.Sqlite3.OperationType : Enum {
    public int value__;
    public static OperationType DoNothing;
    public static OperationType BulkSelectSqliteOperation;
    public static OperationType BulkSelectByTypeSqliteOperation;
    public static OperationType BulkInsertSqliteOperation;
    public static OperationType BulkInvalidateSqliteOperation;
    public static OperationType BulkInvalidateByTypeSqliteOperation;
    public static OperationType InvalidateAllSqliteOperation;
    public static OperationType VacuumSqliteOperation;
    public static OperationType DeleteExpiredSqliteOperation;
    public static OperationType GetKeysSqliteOperation;
}
[PreserveAttribute]
public class Akavache.Sqlite3.Registrations : object {
    [NullableContextAttribute("1")]
public static void Start(string applicationName, Action initSql);
    [NullableContextAttribute("1")]
public sealed virtual void Register(IMutableDependencyResolver resolver, IReadonlyDependencyResolver readonlyDependencyResolver);
}
internal class Akavache.Sqlite3.SchemaInfo : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
public class Akavache.Sqlite3.SQLiteEncryptedBlobCache : SqlRawPersistentBlobCache {
    [NullableAttribute("1")]
private IEncryptionProvider _encryption;
    [NullableContextAttribute("2")]
public SQLiteEncryptedBlobCache(string databaseFile, IEncryptionProvider encryptionProvider, IScheduler scheduler);
    [NullableContextAttribute("1")]
protected virtual IObservable`1<Byte[]> BeforeWriteToDiskFilter(Byte[] data, IScheduler scheduler);
    [NullableContextAttribute("1")]
protected virtual IObservable`1<Byte[]> AfterReadFromDiskFilter(Byte[] data, IScheduler scheduler);
}
[ExtensionAttribute]
internal static class Akavache.Sqlite3.SqliteOperationMixin : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Result Checked(IPreparedSqliteOperation connection, int sqlite3ErrorCode, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.SqliteOperationQueue : object {
    private AsyncLock _flushLock;
    private IScheduler _scheduler;
    private Lazy`1<BulkSelectSqliteOperation> _bulkSelectKey;
    private Lazy`1<BulkSelectByTypeSqliteOperation> _bulkSelectType;
    private Lazy`1<BulkInsertSqliteOperation> _bulkInsertKey;
    private Lazy`1<BulkInvalidateSqliteOperation> _bulkInvalidateKey;
    private Lazy`1<BulkInvalidateByTypeSqliteOperation> _bulkInvalidateType;
    private Lazy`1<InvalidateAllSqliteOperation> _invalidateAll;
    private Lazy`1<VacuumSqliteOperation> _vacuum;
    private Lazy`1<DeleteExpiredSqliteOperation> _deleteExpired;
    private Lazy`1<GetKeysSqliteOperation> _getAllKeys;
    private Lazy`1<BeginTransactionSqliteOperation> _begin;
    private Lazy`1<CommitTransactionSqliteOperation> _commit;
    private BlockingCollection`1<OperationQueueItem> _operationQueue;
    [NullableAttribute("2")]
private IDisposable _start;
    [NullableAttribute("2")]
private CancellationTokenSource _shouldQuit;
    private static string NullKey;
    public SqliteOperationQueue(SQLiteConnection connection, IScheduler scheduler);
    public IDisposable Start();
    public IObservable`1<Unit> Flush();
    public AsyncSubject`1<IEnumerable`1<CacheElement>> Select(IEnumerable`1<string> keys);
    public AsyncSubject`1<IEnumerable`1<CacheElement>> SelectTypes(IEnumerable`1<string> types);
    public AsyncSubject`1<Unit> Insert(IEnumerable`1<CacheElement> items);
    public AsyncSubject`1<Unit> Invalidate(IEnumerable`1<string> keys);
    public AsyncSubject`1<Unit> InvalidateTypes(IEnumerable`1<string> types);
    public AsyncSubject`1<Unit> InvalidateAll();
    public AsyncSubject`1<Unit> Vacuum();
    public AsyncSubject`1<IEnumerable`1<string>> GetAllKeys();
    public sealed virtual void Dispose();
    internal List`1<OperationQueueItem> DumpQueue();
    private static void MarshalCompletion(object completion, Action block, IObservable`1<Unit> commitResult);
    private void FlushInternal();
    private void ProcessItems(List`1<OperationQueueItem> toProcess);
    private void MarshalCompletion(object completion, Func`1<T> block, IObservable`1<Unit> commitResult);
    internal static List`1<OperationQueueItem> CoalesceOperations(List`1<OperationQueueItem> inputItems);
    private static IEnumerable`1<OperationQueueItem> CoalesceUnrelatedItems(IEnumerable`1<OperationQueueItem> items);
    [IteratorStateMachineAttribute("Akavache.Sqlite3.SqliteOperationQueue/<MultipleOpsTurnIntoSingleOp>d__37")]
private static IEnumerable`1<OperationQueueItem> MultipleOpsTurnIntoSingleOp(IEnumerable`1<OperationQueueItem> itemsWithSameKey, OperationType opTypeToDedup);
    private static OperationQueueItem GroupUnrelatedSelects(IEnumerable`1<OperationQueueItem> unrelatedSelects);
    private static OperationQueueItem GroupUnrelatedInserts(IEnumerable`1<OperationQueueItem> unrelatedInserts);
    private static OperationQueueItem GroupUnrelatedDeletes(IEnumerable`1<OperationQueueItem> unrelatedDeletes);
    private static string GetKeyFromTuple(OperationQueueItem item);
    private static object CombineSubjectsByOperation(object source, IEnumerable`1<object> subjects, OperationType opType);
    private static AsyncSubject`1<T> CombineSubjects(AsyncSubject`1<T> source, IEnumerable`1<AsyncSubject`1<T>> subjs);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Akavache.Sqlite3.SqliteOperationQueue/<<Vacuum>b__26_0>d")]
[CompilerGeneratedAttribute]
private Task <Vacuum>b__26_0();
}
public static class Akavache.Sqlite3.SqlLite : object {
    [NullableContextAttribute("1")]
public static void Start(Action bundleRegistration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Akavache.Sqlite3.SqlRawPersistentBlobCache : object {
    private static object DisposeGate;
    private IObservable`1<Unit> _initializer;
    private AsyncSubject`1<Unit> _shutdown;
    private JsonDateTimeContractResolver _jsonDateTimeContractResolver;
    [NullableAttribute("2")]
private SqliteOperationQueue _opQueue;
    [NullableAttribute("2")]
private IDisposable _queueThread;
    private Nullable`1<DateTimeKind> _dateTimeKind;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public Nullable`1<DateTimeKind> ForcedDateTimeKind { get; public set; }
    public IScheduler Scheduler { get; }
    public SQLiteConnection Connection { get; }
    public IObservable`1<Unit> Shutdown { get; }
    public SqlRawPersistentBlobCache(string databaseFile, IScheduler scheduler);
    private static SqlRawPersistentBlobCache();
    public sealed virtual Nullable`1<DateTimeKind> get_ForcedDateTimeKind();
    public sealed virtual void set_ForcedDateTimeKind(Nullable`1<DateTimeKind> value);
    [CompilerGeneratedAttribute]
public sealed virtual IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public SQLiteConnection get_Connection();
    public sealed virtual IObservable`1<Unit> get_Shutdown();
    public sealed virtual IObservable`1<Unit> Insert(string key, Byte[] data, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<Byte[]> Get(string key);
    public sealed virtual IObservable`1<IEnumerable`1<string>> GetAllKeys();
    public sealed virtual IObservable`1<Nullable`1<DateTimeOffset>> GetCreatedAt(string key);
    public sealed virtual IObservable`1<Nullable`1<DateTimeOffset>> GetObjectCreatedAt(string key);
    public sealed virtual IObservable`1<Unit> Flush();
    public sealed virtual IObservable`1<Unit> Invalidate(string key);
    public sealed virtual IObservable`1<Unit> InvalidateAll();
    public sealed virtual IObservable`1<Unit> InsertObject(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<T> GetObject(string key);
    public sealed virtual IObservable`1<IEnumerable`1<T>> GetAllObjects();
    public sealed virtual IObservable`1<Unit> InvalidateObject(string key);
    public sealed virtual IObservable`1<Unit> InvalidateAllObjects();
    public sealed virtual IObservable`1<Unit> Vacuum();
    public sealed virtual IObservable`1<Unit> Insert(IDictionary`2<string, Byte[]> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<IDictionary`2<string, Byte[]>> Get(IEnumerable`1<string> keys);
    public sealed virtual IObservable`1<IDictionary`2<string, Nullable`1<DateTimeOffset>>> GetCreatedAt(IEnumerable`1<string> keys);
    public sealed virtual IObservable`1<Unit> Invalidate(IEnumerable`1<string> keys);
    public sealed virtual IObservable`1<Unit> InsertObjects(IDictionary`2<string, T> keyValuePairs, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual IObservable`1<IDictionary`2<string, T>> GetObjects(IEnumerable`1<string> keys);
    public sealed virtual IObservable`1<Unit> InvalidateObjects(IEnumerable`1<string> keys);
    public sealed virtual void Dispose();
    internal void ReplaceOperationQueue(SqliteOperationQueue queue);
    protected virtual void Dispose(bool isDisposing);
    protected IObservable`1<Unit> Initialize();
    protected int GetSchemaVersion();
    protected virtual IObservable`1<Byte[]> BeforeWriteToDiskFilter(Byte[] data, IScheduler scheduler);
    protected virtual IObservable`1<Byte[]> AfterReadFromDiskFilter(Byte[] data, IScheduler scheduler);
    private Byte[] SerializeObject(T value);
    private IObservable`1<T> DeserializeObject(Byte[] data);
    private JsonSerializer GetSerializer();
    [CompilerGeneratedAttribute]
private IObservable`1<IEnumerable`1<string>> <GetAllKeys>b__22_0(Unit _);
    [CompilerGeneratedAttribute]
private IObservable`1<Unit> <Flush>b__25_0(Unit _);
    [CompilerGeneratedAttribute]
private IObservable`1<Unit> <InvalidateAll>b__27_0(Unit _);
    [CompilerGeneratedAttribute]
private IObservable`1<Unit> <Vacuum>b__33_0(Unit _);
    [CompilerGeneratedAttribute]
private IDisposable <Initialize>b__44_0(IObserver`1<Unit> subj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akavache.Sqlite3.VacuumSqliteOperation : object {
    private sqlite3_stmt _vacuumOp;
    private IScheduler _scheduler;
    private IDisposable _inner;
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    public SQLiteConnection Connection { get; protected set; }
    public VacuumSqliteOperation(SQLiteConnection conn, IScheduler scheduler);
    [CompilerGeneratedAttribute]
public sealed virtual SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(SQLiteConnection value);
    public Action PrepareToExecute();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <PrepareToExecute>b__8_0();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.143.54359")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
