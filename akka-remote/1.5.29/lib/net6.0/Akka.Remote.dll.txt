internal class Akka.Remote.Ack : object {
    [CompilerGeneratedAttribute]
private SeqNo <CumulativeAck>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<SeqNo> <Nacks>k__BackingField;
    public SeqNo CumulativeAck { get; private set; }
    public SortedSet`1<SeqNo> Nacks { get; private set; }
    public Ack(SeqNo cumulativeAck, IEnumerable`1<SeqNo> nacks);
    public Ack(SeqNo cumulativeAck);
    [CompilerGeneratedAttribute]
public SeqNo get_CumulativeAck();
    [CompilerGeneratedAttribute]
private void set_CumulativeAck(SeqNo value);
    [CompilerGeneratedAttribute]
public SortedSet`1<SeqNo> get_Nacks();
    [CompilerGeneratedAttribute]
private void set_Nacks(SortedSet`1<SeqNo> value);
    public virtual string ToString();
}
internal class Akka.Remote.AckedReceiveBuffer`1 : object {
    public static HasSeqNoComparer`1<T> Comparer;
    [CompilerGeneratedAttribute]
private SeqNo <LastDelivered>k__BackingField;
    [CompilerGeneratedAttribute]
private SeqNo <CumulativeAck>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableSortedSet`1<T> <Buf>k__BackingField;
    public SeqNo LastDelivered { get; }
    public SeqNo CumulativeAck { get; }
    public ImmutableSortedSet`1<T> Buf { get; }
    public AckedReceiveBuffer`1(SeqNo lastDelivered, SeqNo cumulativeAck, ImmutableSortedSet`1<T> buffer);
    private static AckedReceiveBuffer`1();
    [CompilerGeneratedAttribute]
public SeqNo get_LastDelivered();
    [CompilerGeneratedAttribute]
public SeqNo get_CumulativeAck();
    [CompilerGeneratedAttribute]
public ImmutableSortedSet`1<T> get_Buf();
    public AckedReceiveBuffer`1<T> Receive(T arrivedMsg);
    public AckReceiveDeliverable`1<T> ExtractDeliverable();
    public AckedReceiveBuffer`1<T> MergeFrom(AckedReceiveBuffer`1<T> other);
    public AckedReceiveBuffer`1<T> Copy(SeqNo lastDelivered, SeqNo cumulativeAck, ImmutableSortedSet`1<T> buffer);
    public sealed virtual bool Equals(AckedReceiveBuffer`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Akka.Remote.AckedSendBuffer`1 : object {
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<T> <NonAcked>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<T> <Nacked>k__BackingField;
    [CompilerGeneratedAttribute]
private SeqNo <MaxSeq>k__BackingField;
    public int Capacity { get; }
    public IImmutableList`1<T> NonAcked { get; }
    public IImmutableList`1<T> Nacked { get; }
    public SeqNo MaxSeq { get; private set; }
    public AckedSendBuffer`1(int capacity, SeqNo maxSeq);
    public AckedSendBuffer`1(int capacity, SeqNo maxSeq, IImmutableList`1<T> nacked, IImmutableList`1<T> nonAcked);
    public AckedSendBuffer`1(int capacity);
    [CompilerGeneratedAttribute]
public int get_Capacity();
    [CompilerGeneratedAttribute]
public IImmutableList`1<T> get_NonAcked();
    [CompilerGeneratedAttribute]
public IImmutableList`1<T> get_Nacked();
    [CompilerGeneratedAttribute]
public SeqNo get_MaxSeq();
    [CompilerGeneratedAttribute]
private void set_MaxSeq(SeqNo value);
    public AckedSendBuffer`1<T> Acknowledge(Ack ack);
    public AckedSendBuffer`1<T> Buffer(T msg);
    public virtual string ToString();
    public AckedSendBuffer`1<T> Copy(IImmutableList`1<T> nonAcked, IImmutableList`1<T> nacked, SeqNo maxSeq);
}
internal class Akka.Remote.AckReceiveDeliverable`1 : object {
    [CompilerGeneratedAttribute]
private AckedReceiveBuffer`1<T> <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<T> <Deliverables>k__BackingField;
    [CompilerGeneratedAttribute]
private Ack <Ack>k__BackingField;
    public AckedReceiveBuffer`1<T> Buffer { get; private set; }
    public IReadOnlyList`1<T> Deliverables { get; private set; }
    public Ack Ack { get; private set; }
    public AckReceiveDeliverable`1(AckedReceiveBuffer`1<T> buffer, IReadOnlyList`1<T> deliverables, Ack ack);
    [CompilerGeneratedAttribute]
public AckedReceiveBuffer`1<T> get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(AckedReceiveBuffer`1<T> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<T> get_Deliverables();
    [CompilerGeneratedAttribute]
private void set_Deliverables(IReadOnlyList`1<T> value);
    [CompilerGeneratedAttribute]
public Ack get_Ack();
    [CompilerGeneratedAttribute]
private void set_Ack(Ack value);
}
public class Akka.Remote.AddressUid : object {
    public int Uid;
}
public class Akka.Remote.AddressUidExtension : ExtensionIdProvider`1<AddressUid> {
    public virtual AddressUid CreateExtension(ExtendedActorSystem system);
    public static int Uid(ActorSystem system);
}
internal static class Akka.Remote.AddressUrlEncoder : object {
    public static string Encode(Address address);
}
public class Akka.Remote.AkkaProtocolSettings : object {
    [CompilerGeneratedAttribute]
private Config <TransportFailureDetectorConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransportFailureDetectorImplementationClass>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TransportHeartBeatInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HandshakeTimeout>k__BackingField;
    public Config TransportFailureDetectorConfig { get; private set; }
    public string TransportFailureDetectorImplementationClass { get; private set; }
    public TimeSpan TransportHeartBeatInterval { get; private set; }
    public TimeSpan HandshakeTimeout { get; private set; }
    public AkkaProtocolSettings(Config config);
    [CompilerGeneratedAttribute]
public Config get_TransportFailureDetectorConfig();
    [CompilerGeneratedAttribute]
private void set_TransportFailureDetectorConfig(Config value);
    [CompilerGeneratedAttribute]
public string get_TransportFailureDetectorImplementationClass();
    [CompilerGeneratedAttribute]
private void set_TransportFailureDetectorImplementationClass(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TransportHeartBeatInterval();
    [CompilerGeneratedAttribute]
private void set_TransportHeartBeatInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HandshakeTimeout();
    [CompilerGeneratedAttribute]
private void set_HandshakeTimeout(TimeSpan value);
}
public class Akka.Remote.AssociatedEvent : AssociationEvent {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInbound>k__BackingField;
    public Address LocalAddress { get; protected set; }
    public Address RemoteAddress { get; protected set; }
    public bool IsInbound { get; protected set; }
    public AssociatedEvent(Address localAddress, Address remoteAddress, bool inbound);
    public virtual LogLevel LogLevel();
    [CompilerGeneratedAttribute]
public virtual Address get_LocalAddress();
    [CompilerGeneratedAttribute]
protected virtual void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public virtual Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
protected virtual void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsInbound();
    [CompilerGeneratedAttribute]
protected virtual void set_IsInbound(bool value);
}
public class Akka.Remote.AssociationErrorEvent : AssociationEvent {
    [CompilerGeneratedAttribute]
private Exception <Cause>k__BackingField;
    private LogLevel _level;
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInbound>k__BackingField;
    public Exception Cause { get; private set; }
    public Address LocalAddress { get; protected set; }
    public Address RemoteAddress { get; protected set; }
    public bool IsInbound { get; protected set; }
    public AssociationErrorEvent(Exception cause, Address localAddress, Address remoteAddress, bool inbound, LogLevel level);
    [CompilerGeneratedAttribute]
public Exception get_Cause();
    [CompilerGeneratedAttribute]
private void set_Cause(Exception value);
    public virtual LogLevel LogLevel();
    [CompilerGeneratedAttribute]
public virtual Address get_LocalAddress();
    [CompilerGeneratedAttribute]
protected virtual void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public virtual Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
protected virtual void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsInbound();
    [CompilerGeneratedAttribute]
protected virtual void set_IsInbound(bool value);
    public virtual string ToString();
}
public abstract class Akka.Remote.AssociationEvent : RemotingLifecycleEvent {
    protected string EventName;
    public Address LocalAddress { get; protected set; }
    public Address RemoteAddress { get; protected set; }
    public bool IsInbound { get; protected set; }
    public abstract virtual Address get_LocalAddress();
    protected abstract virtual void set_LocalAddress(Address value);
    public abstract virtual Address get_RemoteAddress();
    protected abstract virtual void set_RemoteAddress(Address value);
    public abstract virtual bool get_IsInbound();
    protected abstract virtual void set_IsInbound(bool value);
    public virtual string ToString();
}
public class Akka.Remote.Clock : MulticastDelegate {
    public Clock(object object, IntPtr method);
    public virtual long Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual long EndInvoke(IAsyncResult result);
}
internal static class Akka.Remote.Configuration.RemoteConfigFactory : object {
    public static Config Default();
    internal static Config FromResource(string resourceName);
}
internal class Akka.Remote.DaemonMsgCreate : object {
    [CompilerGeneratedAttribute]
private Props <Props>k__BackingField;
    [CompilerGeneratedAttribute]
private Deploy <Deploy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IActorRef <Supervisor>k__BackingField;
    public Props Props { get; private set; }
    public Deploy Deploy { get; private set; }
    public string Path { get; private set; }
    public IActorRef Supervisor { get; private set; }
    public DaemonMsgCreate(Props props, Deploy deploy, string path, IActorRef supervisor);
    [CompilerGeneratedAttribute]
public Props get_Props();
    [CompilerGeneratedAttribute]
private void set_Props(Props value);
    [CompilerGeneratedAttribute]
public Deploy get_Deploy();
    [CompilerGeneratedAttribute]
private void set_Deploy(Deploy value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public IActorRef get_Supervisor();
    [CompilerGeneratedAttribute]
private void set_Supervisor(IActorRef value);
}
public class Akka.Remote.Deadline : object {
    [CompilerGeneratedAttribute]
private DateTime <When>k__BackingField;
    public bool IsOverdue { get; }
    public bool HasTimeLeft { get; }
    public DateTime When { get; private set; }
    public TimeSpan TimeLeft { get; }
    public static Deadline Now { get; }
    public Deadline(DateTime when);
    public bool get_IsOverdue();
    public bool get_HasTimeLeft();
    [CompilerGeneratedAttribute]
public DateTime get_When();
    [CompilerGeneratedAttribute]
private void set_When(DateTime value);
    public TimeSpan get_TimeLeft();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Deadline get_Now();
    public static Deadline op_Addition(Deadline deadline, TimeSpan duration);
    public static Deadline op_Addition(Deadline deadline, Nullable`1<TimeSpan> duration);
}
public class Akka.Remote.DeadlineFailureDetector : FailureDetector {
    private Clock _clock;
    private long _heartbeatTimestamp;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _active;
    private long _deadlineMillis;
    public bool IsAvailable { get; }
    public bool IsMonitoring { get; }
    [ObsoleteAttribute("Use DeadlineFailureDetector(acceptableHeartbeatPause, heartbeatInterval, clock) instead. [1.1.2]")]
public DeadlineFailureDetector(TimeSpan acceptableHeartbeatPause, Clock clock);
    public DeadlineFailureDetector(TimeSpan acceptableHeartbeatPause, TimeSpan heartbeatInterval, Clock clock);
    public DeadlineFailureDetector(Config config, EventStream eventStream);
    public virtual bool get_IsAvailable();
    private bool IsAvailableTicks(long timestamp);
    public virtual bool get_IsMonitoring();
    public virtual void HeartBeat();
}
public class Akka.Remote.DefaultFailureDetectorRegistry`1 : object {
    private Func`1<FailureDetector> _factory;
    private AtomicReference`1<ImmutableDictionary`2<T, FailureDetector>> _resourceToFailureDetector;
    private object _failureDetectorCreationLock;
    private ImmutableDictionary`2<T, FailureDetector> ResourceToFailureDetector { get; private set; }
    public DefaultFailureDetectorRegistry`1(Func`1<FailureDetector> factory);
    private ImmutableDictionary`2<T, FailureDetector> get_ResourceToFailureDetector();
    private void set_ResourceToFailureDetector(ImmutableDictionary`2<T, FailureDetector> value);
    public sealed virtual bool IsAvailable(T resource);
    public sealed virtual bool IsMonitoring(T resource);
    public sealed virtual void Heartbeat(T resource);
    public sealed virtual void Remove(T resource);
    public sealed virtual void Reset();
    internal FailureDetector GetFailureDetector(T resource);
}
internal class Akka.Remote.DefaultMessageDispatcher : object {
    private ExtendedActorSystem _system;
    private IRemoteActorRefProvider _provider;
    private ILoggingAdapter _log;
    private IInternalActorRef _remoteDaemon;
    private RemoteSettings _settings;
    public DefaultMessageDispatcher(ExtendedActorSystem system, IRemoteActorRefProvider provider, ILoggingAdapter log);
    public sealed virtual void Dispatch(IInternalActorRef recipient, Address recipientAddress, Payload message, IActorRef senderOption);
    private static string FormatActorPath(ActorSelectionMessage sel);
}
public class Akka.Remote.DisassociatedEvent : AssociationEvent {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInbound>k__BackingField;
    public Address LocalAddress { get; protected set; }
    public Address RemoteAddress { get; protected set; }
    public bool IsInbound { get; protected set; }
    public DisassociatedEvent(Address localAddress, Address remoteAddress, bool inbound);
    public virtual LogLevel LogLevel();
    [CompilerGeneratedAttribute]
public virtual Address get_LocalAddress();
    [CompilerGeneratedAttribute]
protected virtual void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public virtual Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
protected virtual void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsInbound();
    [CompilerGeneratedAttribute]
protected virtual void set_IsInbound(bool value);
}
internal abstract class Akka.Remote.EndpointActor : ReceiveActor {
    protected Address LocalAddress;
    protected Address RemoteAddress;
    protected RemoteSettings Settings;
    protected AkkaProtocolTransport Transport;
    private ILoggingAdapter _log;
    protected EventPublisher EventPublisher;
    [CompilerGeneratedAttribute]
private bool <Inbound>k__BackingField;
    protected bool Inbound { get; protected set; }
    protected EndpointActor(Address localAddress, Address remoteAddress, AkkaProtocolTransport transport, RemoteSettings settings);
    [CompilerGeneratedAttribute]
protected bool get_Inbound();
    [CompilerGeneratedAttribute]
protected void set_Inbound(bool value);
    protected void PublishError(Exception ex, LogLevel level);
    protected void PublishDisassociated();
    private void TryPublish(RemotingLifecycleEvent ev);
}
internal class Akka.Remote.EndpointAssociationException : EndpointException {
    public EndpointAssociationException(string message);
    public EndpointAssociationException(string message, Exception innerException);
    private EndpointAssociationException(SerializationInfo info, StreamingContext context);
}
internal class Akka.Remote.EndpointDisassociatedException : EndpointException {
    public EndpointDisassociatedException(string message);
    public EndpointDisassociatedException(SerializationInfo info, StreamingContext context);
}
internal class Akka.Remote.EndpointException : AkkaException {
    public EndpointException(string message, Exception cause);
    protected EndpointException(SerializationInfo info, StreamingContext context);
}
internal class Akka.Remote.EndpointManager : ReceiveActor {
    private EndpointRegistry _endpoints;
    private RemoteSettings _settings;
    private Config _conf;
    private AtomicCounterLong _endpointId;
    private ILoggingAdapter _log;
    private EventPublisher _eventPublisher;
    private bool _normalShutdown;
    private Dictionary`2<Address, AkkaProtocolTransport> _transportMapping;
    private ConcurrentDictionary`2<Link, ResendState> _receiveBuffers;
    private ICancelable _pruneTimeCancelable;
    private Dictionary`2<IActorRef, AkkaProtocolHandle> _pendingReadHandoffs;
    private Dictionary`2<IActorRef, List`1<InboundAssociation>> _stashedInbound;
    private Task`1<List`1<ValueTuple`2<ProtocolTransportAddressPair, TaskCompletionSource`1<IAssociationEventListener>>>> _listens;
    private bool RetryGateEnabled { get; }
    private TimeSpan PruneInterval { get; }
    private ICancelable PruneTimerCancelleable { get; }
    private Task`1<List`1<ValueTuple`2<ProtocolTransportAddressPair, TaskCompletionSource`1<IAssociationEventListener>>>> Listens { get; }
    public EndpointManager(Config config, ILoggingAdapter log);
    private bool get_RetryGateEnabled();
    private TimeSpan get_PruneInterval();
    private ICancelable get_PruneTimerCancelleable();
    private void HandleStashedInbound(IActorRef endpoint, bool writerIsIdle);
    private void KeepQuarantinedOr(Address remoteAddress, Action body);
    protected virtual SupervisorStrategy SupervisorStrategy();
    protected virtual void PreStart();
    protected virtual void PostStop();
    private void Receiving();
    private void Accepting();
    private void Flushing();
    private void HandleInboundAssociation(InboundAssociation ia, bool writerIsIdle);
    private Task`1<List`1<ValueTuple`2<ProtocolTransportAddressPair, TaskCompletionSource`1<IAssociationEventListener>>>> get_Listens();
    private void AcceptPendingReader(IActorRef takingOverFrom);
    private void RemovePendingReader(IActorRef takingOverFrom, AkkaProtocolHandle withHandle);
    private void CreateAndRegisterEndpoint(AkkaProtocolHandle handle);
    private IActorRef CreateEndpoint(Address remoteAddress, Address localAddress, AkkaProtocolTransport transport, RemoteSettings endpointSettings, bool writing, AkkaProtocolHandle handleOption);
    [CompilerGeneratedAttribute]
private Directive <SupervisorStrategy>b__38_0(Exception ex);
    [CompilerGeneratedAttribute]
private Directive <SupervisorStrategy>g__Hopeless|38_1(HopelessAssociation e);
    [CompilerGeneratedAttribute]
private void <Receiving>b__41_0(Listen listen);
    [CompilerGeneratedAttribute]
private void <Receiving>b__41_1(ListensResult listens);
    [CompilerGeneratedAttribute]
private ProtocolTransportAddressPair <Receiving>b__41_13(ValueTuple`2<ProtocolTransportAddressPair, TaskCompletionSource`1<IAssociationEventListener>> x);
    [CompilerGeneratedAttribute]
private void <Receiving>b__41_3(InboundAssociation ia);
    [CompilerGeneratedAttribute]
private void <Receiving>b__41_4(ManagementCommand _);
    [CompilerGeneratedAttribute]
private void <Receiving>b__41_5(StartupFinished _);
    [CompilerGeneratedAttribute]
private void <Receiving>b__41_6(ShutdownAndFlush _);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_0(ManagementCommand mc);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_1(Quarantine quarantine);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_2(Send send);
    [CompilerGeneratedAttribute]
private IActorRef <Accepting>g__CreateAndRegisterWritingEndpoint|42_22(<>c__DisplayClass42_2& );
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_3(InboundAssociation ia);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_4(StoppedReading endpoint);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_5(Terminated terminated);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_6(TookOver tookover);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_7(GotUid gotuid);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_8(Idle _);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_9(Prune _);
    [CompilerGeneratedAttribute]
private void <Accepting>b__42_10(ShutdownAndFlush _);
    [CompilerGeneratedAttribute]
private Task`1<bool> <Accepting>b__42_23(IActorRef x);
    [CompilerGeneratedAttribute]
private Task`1<bool> <Accepting>b__42_25(Task`1<bool> tr);
}
internal class Akka.Remote.EndpointReader : EndpointActor {
    private ILoggingAdapter _log;
    private AkkaPduCodec _codec;
    private IActorRef _reliableDeliverySupervisor;
    private ConcurrentDictionary`2<Link, ResendState> _receiveBuffers;
    private int _uid;
    private IInboundMessageDispatcher _msgDispatch;
    private IRemoteActorRefProvider _provider;
    private AckedReceiveBuffer`1<Message> _ackedReceiveBuffer;
    public EndpointReader(Address localAddress, Address remoteAddress, AkkaProtocolTransport transport, RemoteSettings settings, AkkaPduCodec codec, IInboundMessageDispatcher msgDispatch, bool inbound, int uid, ConcurrentDictionary`2<Link, ResendState> receiveBuffers, IActorRef reliableDeliverySupervisor);
    protected virtual void PreStart();
    protected virtual void PostStop();
    private void Reading();
    private void LogTransientSerializationError(Message msg, Exception error);
    private void NotReading();
    private void SaveState();
    private void HandleDisassociated(DisassociateInfo info);
    private void DeliverAndAck();
    private AckAndMessage TryDecodeMessageAndAck(ByteString pdu);
    public static Props ReaderProps(Address localAddress, Address remoteAddress, AkkaProtocolTransport transport, RemoteSettings settings, AkkaPduCodec codec, IInboundMessageDispatcher dispatcher, bool inbound, int uid, ConcurrentDictionary`2<Link, ResendState> receiveBuffers, IActorRef reliableDeliverySupervisor);
    [CompilerGeneratedAttribute]
private void <Reading>b__11_0(InboundPayload inbound);
    [CompilerGeneratedAttribute]
private void <Reading>b__11_1(Disassociated disassociated);
    [CompilerGeneratedAttribute]
private void <Reading>b__11_2(StopReading stop);
    [CompilerGeneratedAttribute]
private void <NotReading>b__13_0(Disassociated disassociated);
    [CompilerGeneratedAttribute]
private void <NotReading>b__13_2(InboundPayload payload);
    [CompilerGeneratedAttribute]
private ResendState <SaveState>g__Merge|14_0(ResendState current, ResendState oldState);
    [CompilerGeneratedAttribute]
private void <SaveState>g__UpdateSavedState|14_1(Link key, ResendState expectedState);
    [CompilerGeneratedAttribute]
private void <DeliverAndAck>b__16_0(Message msg);
}
internal class Akka.Remote.EndpointRegistry : object {
    private Dictionary`2<Address, ValueTuple`2<int, Deadline>> _addressToRefuseUid;
    private Dictionary`2<Address, ValueTuple`2<IActorRef, int>> _addressToReadonly;
    private Dictionary`2<Address, EndpointPolicy> _addressToWritable;
    private Dictionary`2<IActorRef, Address> _readonlyToAddress;
    private Dictionary`2<IActorRef, Address> _writableToAddress;
    public IList`1<IActorRef> AllEndpoints { get; }
    public IActorRef RegisterWritableEndpoint(Address address, IActorRef endpoint, Nullable`1<int> uid);
    public void RegisterWritableEndpointUid(Address remoteAddress, int uid);
    public void RegisterWritableEndpointRefuseUid(Address remoteAddress, int refuseUid, Deadline timeOfRelease);
    public IActorRef RegisterReadOnlyEndpoint(Address address, IActorRef endpoint, int uid);
    public void UnregisterEndpoint(IActorRef endpoint);
    public Address AddressForWriter(IActorRef writer);
    public Nullable`1<ValueTuple`2<IActorRef, int>> ReadOnlyEndpointFor(Address address);
    public bool IsWritable(IActorRef endpoint);
    public bool IsReadOnly(IActorRef endpoint);
    public bool IsQuarantined(Address address, int uid);
    public Nullable`1<int> RefuseUid(Address address);
    public EndpointPolicy WritableEndpointWithPolicyFor(Address address);
    public bool HasWritableEndpointFor(Address address);
    public void MarkAsFailed(IActorRef endpoint, Deadline timeOfRelease);
    public void MarkAsQuarantined(Address address, int uid, Deadline timeOfRelease);
    public void RemovePolicy(Address address);
    public IList`1<IActorRef> get_AllEndpoints();
    public void Prune();
}
internal class Akka.Remote.EndpointWriter : EndpointActor {
    private ILoggingAdapter _log;
    private Nullable`1<int> _refuseUid;
    private AkkaPduCodec _codec;
    private IActorRef _reliableDeliverySupervisor;
    private ExtendedActorSystem _system;
    private IRemoteActorRefProvider _provider;
    private ConcurrentDictionary`2<Link, ResendState> _receiveBuffers;
    private DisassociateInfo _stopReason;
    private IActorRef _reader;
    private AtomicCounter _readerId;
    private IInboundMessageDispatcher _msgDispatcher;
    private Ack _lastAck;
    private Deadline _ackDeadline;
    private AkkaProtocolHandle _handle;
    private ICancelable _ackIdleTimerCancelable;
    private LinkedList`1<object> _buffer;
    private LinkedList`1<Send> _prioBuffer;
    private long _largeBufferLogTimestamp;
    private IRemoteMetrics _remoteMetrics;
    private int _writeCount;
    private int _maxWriteCount;
    private long _adaptiveBackoffNanos;
    private bool _fullBackoff;
    private int _fullBackoffCount;
    private int _smallBackoffCount;
    private int _noBackoffCount;
    private static int SendBufferBatchSize;
    private static long MinAdaptiveBackoffNanos;
    private static long MaxAdaptiveBackoffNanos;
    private static long LogBufferSizeInterval;
    private static int MaxWriteCount;
    private static string AckIdleTimerName;
    public EndpointWriter(AkkaProtocolHandle handleOrActive, Address localAddress, Address remoteAddress, Nullable`1<int> refuseUid, AkkaProtocolTransport transport, RemoteSettings settings, AkkaPduCodec codec, ConcurrentDictionary`2<Link, ResendState> receiveBuffers, IActorRef reliableDeliverySupervisor);
    protected virtual SupervisorStrategy SupervisorStrategy();
    protected virtual void PostRestart(Exception reason);
    protected virtual void PreStart();
    [AsyncStateMachineAttribute("Akka.Remote.EndpointWriter/<AssociateAsync>d__23")]
private Task`1<object> AssociateAsync();
    protected virtual void PostStop();
    private void Initializing();
    private void Buffering();
    private void Writing();
    private void Handoff();
    protected virtual void Unhandled(object message);
    private Deadline NewAckDeadline();
    private void PublishAndThrow(Exception reason, LogLevel level, bool needToThrow);
    private IActorRef StartReadEndpoint(AkkaProtocolHandle handle);
    private Payload SerializeMessage(object msg);
    private void AdjustAdaptiveBackup();
    private void ScheduleBackoffTimer();
    private void DoFlushAndStop();
    private void TrySendPureAck();
    private void EnqueueInBuffer(object message);
    private void BecomeWritingOrSendBufferedMessages();
    internal static string LogPossiblyWrappedMessageType(object failedMsg);
    private bool WriteSend(Send send);
    private void SendBufferedMessages();
    public static Props EndpointWriterProps(AkkaProtocolHandle handleOrActive, Address localAddress, Address remoteAddress, Nullable`1<int> refuseUid, AkkaProtocolTransport transport, RemoteSettings settings, AkkaPduCodec codec, ConcurrentDictionary`2<Link, ResendState> receiveBuffers, IActorRef reliableDeliverySupervisor);
    [CompilerGeneratedAttribute]
private Directive <SupervisorStrategy>b__20_0(Exception ex);
    [CompilerGeneratedAttribute]
private void <Initializing>b__25_0(Send send);
    [CompilerGeneratedAttribute]
private void <Initializing>b__25_1(Failure failure);
    [CompilerGeneratedAttribute]
private void <Initializing>b__25_2(Handle handle);
    [CompilerGeneratedAttribute]
private void <Buffering>b__26_0(Send send);
    [CompilerGeneratedAttribute]
private void <Buffering>b__26_1(BackoffTimer _);
    [CompilerGeneratedAttribute]
private void <Buffering>b__26_2(FlushAndStop stop);
    [CompilerGeneratedAttribute]
private void <Buffering>b__26_3(FlushAndStopTimeout _);
    [CompilerGeneratedAttribute]
private void <Writing>b__27_0(Send s);
    [CompilerGeneratedAttribute]
private void <Writing>b__27_1(FlushAndStop _);
    [CompilerGeneratedAttribute]
private void <Writing>b__27_2(AckIdleCheckTimer _);
    [CompilerGeneratedAttribute]
private void <Handoff>b__28_0(Terminated _);
    [CompilerGeneratedAttribute]
private void <Handoff>b__28_1(Send send);
    [CompilerGeneratedAttribute]
internal static void <LogPossiblyWrappedMessageType>g__LogWrapped|47_0(StringBuilder builder, IWrappedMessage nextMsg);
    [CompilerGeneratedAttribute]
private bool <SendBufferedMessages>g__SendDelegate|49_0(object msg);
    [CompilerGeneratedAttribute]
private bool <SendBufferedMessages>g__WriteLoop|49_1(int count);
    [CompilerGeneratedAttribute]
private bool <SendBufferedMessages>g__WritePrioLoop|49_2();
}
internal class Akka.Remote.EventPublisher : object {
    [CompilerGeneratedAttribute]
private ActorSystem <System>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingAdapter <Log>k__BackingField;
    public LogLevel LogLevel;
    public ActorSystem System { get; private set; }
    public ILoggingAdapter Log { get; private set; }
    public EventPublisher(ActorSystem system, ILoggingAdapter log, LogLevel logLevel);
    [CompilerGeneratedAttribute]
public ActorSystem get_System();
    [CompilerGeneratedAttribute]
private void set_System(ActorSystem value);
    [CompilerGeneratedAttribute]
public ILoggingAdapter get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(ILoggingAdapter value);
    public void NotifyListeners(RemotingLifecycleEvent message);
}
public abstract class Akka.Remote.FailureDetector : object {
    public static Clock DefaultClock;
    public bool IsAvailable { get; }
    public bool IsMonitoring { get; }
    private static FailureDetector();
    public abstract virtual bool get_IsAvailable();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void HeartBeat();
}
[ExtensionAttribute]
[InternalApiAttribute]
public static class Akka.Remote.FailureDetectorLoader : object {
    public static FailureDetector Load(string fqcn, Config config, ActorSystem system);
    [ExtensionAttribute]
public static FailureDetector LoadFailureDetector(IActorContext context, string fqcn, Config config);
}
[IsReadOnlyAttribute]
internal class Akka.Remote.HeartbeatHistory : ValueType {
    private int _maxSampleSize;
    private long _intervalSum;
    private long _squaredIntervalSum;
    [CompilerGeneratedAttribute]
private ImmutableList`1<long> <Intervals>k__BackingField;
    public double Mean { get; }
    public double Variance { get; }
    public double StdDeviation { get; }
    public ImmutableList`1<long> Intervals { get; }
    public HeartbeatHistory(int maxSampleSize, ImmutableList`1<long> intervals, long intervalSum, long squaredIntervalSum);
    public double get_Mean();
    public double get_Variance();
    public double get_StdDeviation();
    [CompilerGeneratedAttribute]
public ImmutableList`1<long> get_Intervals();
    public static HeartbeatHistory op_Addition(HeartbeatHistory history, long interval);
    private static HeartbeatHistory DropOldest(HeartbeatHistory history);
    private static long Pow2(long x);
    public static HeartbeatHistory Apply(int maxSampleSize);
}
internal class Akka.Remote.HopelessAssociation : EndpointException {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Uid>k__BackingField;
    public Address LocalAddress { get; private set; }
    public Address RemoteAddress { get; private set; }
    public Nullable`1<int> Uid { get; private set; }
    public HopelessAssociation(Address localAddress, Address remoteAddress, Nullable`1<int> uid, Exception cause);
    [CompilerGeneratedAttribute]
public Address get_LocalAddress();
    [CompilerGeneratedAttribute]
private void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Uid();
    [CompilerGeneratedAttribute]
private void set_Uid(Nullable`1<int> value);
}
internal interface Akka.Remote.IAssociationProblem {
}
internal interface Akka.Remote.IDaemonMsg {
}
public interface Akka.Remote.IFailureDetectorRegistry`1 {
    public abstract virtual bool IsAvailable(T resource);
    public abstract virtual bool IsMonitoring(T resource);
    public abstract virtual void Heartbeat(T resource);
    public abstract virtual void Remove(T resource);
    public abstract virtual void Reset();
}
internal interface Akka.Remote.IHasSequenceNumber {
    public SeqNo Seq { get; }
    public abstract virtual SeqNo get_Seq();
}
internal interface Akka.Remote.IInboundMessageDispatcher {
    public abstract virtual void Dispatch(IInternalActorRef recipient, Address recipientAddress, Payload message, IActorRef senderOption);
}
internal class Akka.Remote.InvalidAssociation : EndpointException {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DisassociateInfo> <DisassociationInfo>k__BackingField;
    public Address LocalAddress { get; private set; }
    public Address RemoteAddress { get; private set; }
    public Nullable`1<DisassociateInfo> DisassociationInfo { get; private set; }
    public InvalidAssociation(string message, Address localAddress, Address remoteAddress, Exception cause, Nullable`1<DisassociateInfo> disassociateInfo);
    [CompilerGeneratedAttribute]
public Address get_LocalAddress();
    [CompilerGeneratedAttribute]
private void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public Nullable`1<DisassociateInfo> get_DisassociationInfo();
    [CompilerGeneratedAttribute]
private void set_DisassociationInfo(Nullable`1<DisassociateInfo> value);
}
[ExtensionAttribute]
internal static class Akka.Remote.IpExtensions : object {
    internal static object GetInstanceField(Type type, object instance, string fieldName);
    [ExtensionAttribute]
public static IPAddress MapToIPv4(IPAddress ipa);
    [ExtensionAttribute]
public static IPAddress MapToIPv6(IPAddress ipa);
}
internal interface Akka.Remote.IPriorityMessage {
}
[InternalApiAttribute]
public interface Akka.Remote.IRemoteActorRefProvider {
    public IInternalActorRef RemoteDaemon { get; }
    public IActorRef RemoteWatcher { get; }
    public RemoteTransport Transport { get; }
    public RemoteSettings RemoteSettings { get; }
    public abstract virtual IInternalActorRef get_RemoteDaemon();
    public abstract virtual IActorRef get_RemoteWatcher();
    public abstract virtual RemoteTransport get_Transport();
    public abstract virtual RemoteSettings get_RemoteSettings();
    public abstract virtual Deploy LookUpRemotes(IEnumerable`1<string> p);
    public abstract virtual bool HasAddress(Address address);
    public abstract virtual IInternalActorRef ResolveActorRefWithLocalAddress(string path, Address localAddress);
    public abstract virtual IActorRef InternalResolveActorRef(string path);
    public abstract virtual void UseActorOnNode(RemoteActorRef actor, Props props, Deploy deploy, IInternalActorRef supervisor);
    public abstract virtual void Quarantine(Address address, Nullable`1<int> uid);
}
internal interface Akka.Remote.IRemoteMetrics {
    public abstract virtual void LogPayloadBytes(object msg, long payloadBytes);
}
[InternalApiAttribute]
public interface Akka.Remote.IRemoteRef {
}
internal static class Akka.Remote.MessageSerializer : object {
    public static object Deserialize(ExtendedActorSystem system, Payload messageProtocol);
    public static Payload Serialize(ExtendedActorSystem system, Address address, object message);
}
internal class Akka.Remote.OversizedPayloadException : EndpointException {
    public OversizedPayloadException(string message);
    private OversizedPayloadException(SerializationInfo info, StreamingContext context);
}
public class Akka.Remote.PhiAccrualFailureDetector : FailureDetector {
    private double _threshold;
    private int _maxSampleSize;
    private TimeSpan _minStdDeviation;
    private TimeSpan _acceptableHeartbeatPause;
    private TimeSpan _firstHeartbeatEstimate;
    private Clock _clock;
    [CompilerGeneratedAttribute]
private Option`1<EventStream> <EventStream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    private AtomicReference`1<AccrualState> _state;
    private HeartbeatHistory FirstHeartBeat { get; }
    private Option`1<EventStream> EventStream { get; }
    public string Address { get; public set; }
    internal AccrualState State { get; internal set; }
    public bool IsAvailable { get; }
    public bool IsMonitoring { get; }
    internal double CurrentPhi { get; }
    private double MinStdDeviationMillis { get; }
    private double AcceptableHeartbeatPauseMillis { get; }
    public PhiAccrualFailureDetector(double threshold, int maxSampleSize, TimeSpan minStdDeviation, TimeSpan acceptableHeartbeatPause, TimeSpan firstHeartbeatEstimate, Clock clock);
    public PhiAccrualFailureDetector(Config config, EventStream ev);
    protected PhiAccrualFailureDetector(Clock clock);
    private HeartbeatHistory get_FirstHeartBeat();
    [CompilerGeneratedAttribute]
private Option`1<EventStream> get_EventStream();
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    internal AccrualState get_State();
    internal void set_State(AccrualState value);
    public virtual bool get_IsAvailable();
    public virtual bool get_IsMonitoring();
    public virtual void HeartBeat();
    private bool IsTimeStampAvailable(long timestamp);
    internal double get_CurrentPhi();
    internal double Phi(long timestamp);
    internal double Phi(long timeDiff, double mean, double stdDeviation);
    private double get_MinStdDeviationMillis();
    private double get_AcceptableHeartbeatPauseMillis();
    private double EnsureValidStdDeviation(double stdDeviation);
}
public class Akka.Remote.QuarantinedEvent : RemotingLifecycleEvent {
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uid>k__BackingField;
    public Address Address { get; private set; }
    public int Uid { get; private set; }
    public QuarantinedEvent(Address address, int uid);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(Address value);
    [CompilerGeneratedAttribute]
public int get_Uid();
    [CompilerGeneratedAttribute]
private void set_Uid(int value);
    public virtual LogLevel LogLevel();
    public virtual string ToString();
}
internal class Akka.Remote.RARP : ExtensionIdProvider`1<RARP> {
    private IRemoteActorRefProvider _provider;
    public IRemoteActorRefProvider Provider { get; }
    private RARP(IRemoteActorRefProvider provider);
    public Props ConfigureDispatcher(Props props);
    public virtual RARP CreateExtension(ExtendedActorSystem system);
    public IRemoteActorRefProvider get_Provider();
    public static RARP For(ActorSystem system);
}
internal class Akka.Remote.RegisterTransportActor : object {
    [CompilerGeneratedAttribute]
private Props <Props>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Props Props { get; private set; }
    public string Name { get; private set; }
    public RegisterTransportActor(Props props, string name);
    [CompilerGeneratedAttribute]
public Props get_Props();
    [CompilerGeneratedAttribute]
private void set_Props(Props value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal class Akka.Remote.ReliableDeliverySupervisor : ReceiveActor {
    private ILoggingAdapter _log;
    private Address _localAddress;
    private Address _remoteAddress;
    private Nullable`1<int> _refuseUid;
    private AkkaProtocolTransport _transport;
    private RemoteSettings _settings;
    private AkkaPduCodec _codec;
    private AkkaProtocolHandle _currentHandle;
    private ConcurrentDictionary`2<Link, ResendState> _receiveBuffers;
    private ICancelable _autoResendTimer;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UidConfirmed>k__BackingField;
    private Deadline _bailoutAt;
    private ICancelable _maxSilenceTimer;
    private AckedSendBuffer`1<Send> _resendBuffer;
    private long _seqCounter;
    private IActorRef _writer;
    public Nullable`1<int> Uid { get; public set; }
    public bool UidConfirmed { get; private set; }
    public ReliableDeliverySupervisor(AkkaProtocolHandle handleOrActive, Address localAddress, Address remoteAddress, Nullable`1<int> refuseUid, AkkaProtocolTransport transport, RemoteSettings settings, AkkaPduCodec codec, ConcurrentDictionary`2<Link, ResendState> receiveBuffers);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_UidConfirmed();
    [CompilerGeneratedAttribute]
private void set_UidConfirmed(bool value);
    protected virtual SupervisorStrategy SupervisorStrategy();
    private void Reset();
    private SeqNo NextSeq();
    protected virtual void PostStop();
    protected virtual void PostRestart(Exception reason);
    private void Receiving();
    private void GoToIdle();
    private void GoToActive();
    private void Gated(bool writerTerminated, bool earlyUngateRequested);
    private void IdleBehavior();
    private void FlushWait();
    public static Props ReliableDeliverySupervisorProps(AkkaProtocolHandle handleOrActive, Address localAddress, Address remoteAddress, Nullable`1<int> refuseUid, AkkaProtocolTransport transport, RemoteSettings settings, AkkaPduCodec codec, ConcurrentDictionary`2<Link, ResendState> receiveBuffers, string dispatcher);
    private void HandleTooLongIdle();
    private void HandleSend(Send send);
    private void ResendNacked();
    private void ResendAll();
    private void TryBuffer(Send s);
    private IActorRef CreateWriter();
    [CompilerGeneratedAttribute]
private Directive <SupervisorStrategy>b__23_0(Exception ex);
    [CompilerGeneratedAttribute]
private void <SupervisorStrategy>b__23_1();
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_0(FlushAndStop _);
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_2(Send send);
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_3(Ack ack);
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_4(AttemptSysMsgRedelivery _);
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_5(Terminated _);
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_6(GotUid g);
    [CompilerGeneratedAttribute]
private void <Receiving>b__32_7(StopReading stopped);
    [CompilerGeneratedAttribute]
private void <IdleBehavior>b__36_0(IsIdle _);
    [CompilerGeneratedAttribute]
private void <IdleBehavior>b__36_1(Send send);
    [CompilerGeneratedAttribute]
private void <IdleBehavior>b__36_2(AttemptSysMsgRedelivery _);
    [CompilerGeneratedAttribute]
private void <IdleBehavior>b__36_3(TooLongIdle _);
    [CompilerGeneratedAttribute]
private void <IdleBehavior>b__36_4(FlushAndStop _);
    [CompilerGeneratedAttribute]
private void <FlushWait>b__37_1(Terminated _);
    [CompilerGeneratedAttribute]
private void <ResendNacked>b__44_0(Send nacked);
    [CompilerGeneratedAttribute]
private void <ResendAll>b__45_0(Send nonacked);
}
public class Akka.Remote.RemoteActorRef : InternalActorRefBase {
    private Deploy _deploy;
    private ActorPath _path;
    private IInternalActorRef _parent;
    private Props _props;
    [CompilerGeneratedAttribute]
private Address <LocalAddressToUse>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteTransport <Remote>k__BackingField;
    public Address LocalAddressToUse { get; private set; }
    internal RemoteTransport Remote { get; private set; }
    public IInternalActorRef Parent { get; }
    public IActorRefProvider Provider { get; }
    private IRemoteActorRefProvider RemoteProvider { get; }
    [ObsoleteAttribute("Use Context.Watch and Receive<Terminated> [1.1.0]")]
public bool IsTerminated { get; }
    public bool IsLocal { get; }
    public ActorPath Path { get; }
    public RemoteActorRef(RemoteTransport remote, Address localAddressToUse, ActorPath path, IInternalActorRef parent, Props props, Deploy deploy);
    [CompilerGeneratedAttribute]
public Address get_LocalAddressToUse();
    [CompilerGeneratedAttribute]
private void set_LocalAddressToUse(Address value);
    [CompilerGeneratedAttribute]
internal RemoteTransport get_Remote();
    [CompilerGeneratedAttribute]
private void set_Remote(RemoteTransport value);
    public virtual IInternalActorRef get_Parent();
    public virtual IActorRefProvider get_Provider();
    private IRemoteActorRefProvider get_RemoteProvider();
    public virtual bool get_IsTerminated();
    public virtual IActorRef GetChild(IReadOnlyList`1<string> name);
    public virtual void Resume(Exception causedByFailure);
    public virtual void Stop();
    public virtual void Restart(Exception cause);
    public virtual void Suspend();
    public virtual bool get_IsLocal();
    public virtual ActorPath get_Path();
    private void HandleException(Exception ex);
    public virtual void SendSystemMessage(ISystemMessage message);
    protected virtual void TellInternal(object message, IActorRef sender);
    public bool IsWatchIntercepted(IActorRef watchee, IActorRef watcher);
    public virtual void Start();
}
[InternalApiAttribute]
public class Akka.Remote.RemoteActorRefProvider : object {
    private ILoggingAdapter _log;
    private LocalActorRefProvider _local;
    private Internals _internals;
    private ActorSystemImpl _system;
    [CompilerGeneratedAttribute]
private RemoteSettings <RemoteSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Deployer <Deployer>k__BackingField;
    private Information _serializationInformationCache;
    private IActorRef _remotingTerminator;
    private IActorRef _remoteWatcher;
    private ActorRefResolveThreadLocalCache _actorRefResolveThreadLocalCache;
    private ActorPathThreadLocalCache _actorPathThreadLocalCache;
    private IActorRef _remoteDeploymentWatcher;
    private Internals RemoteInternals { get; }
    public IInternalActorRef RemoteDaemon { get; }
    public RemoteTransport Transport { get; }
    public RemoteSettings RemoteSettings { get; private set; }
    public ActorPath RootPath { get; }
    public IInternalActorRef RootGuardian { get; }
    public LocalActorRef Guardian { get; }
    public LocalActorRef SystemGuardian { get; }
    public IInternalActorRef TempContainer { get; }
    public IActorRef DeadLetters { get; }
    public IActorRef IgnoreRef { get; }
    public Deployer Deployer { get; protected set; }
    public Address DefaultAddress { get; }
    public Information SerializationInformation { get; }
    public Settings Settings { get; }
    public Task TerminationTask { get; }
    private IInternalActorRef InternalDeadLetters { get; }
    public IActorRef RemoteWatcher { get; }
    public RemoteActorRefProvider(string systemName, Settings settings, EventStream eventStream);
    private Internals get_RemoteInternals();
    private Internals CreateInternals();
    public sealed virtual IInternalActorRef get_RemoteDaemon();
    public sealed virtual RemoteTransport get_Transport();
    [CompilerGeneratedAttribute]
public sealed virtual RemoteSettings get_RemoteSettings();
    [CompilerGeneratedAttribute]
private void set_RemoteSettings(RemoteSettings value);
    public sealed virtual ActorPath get_RootPath();
    public sealed virtual IInternalActorRef get_RootGuardian();
    public sealed virtual LocalActorRef get_Guardian();
    public sealed virtual LocalActorRef get_SystemGuardian();
    public sealed virtual IInternalActorRef get_TempContainer();
    public sealed virtual IActorRef get_DeadLetters();
    public sealed virtual IActorRef get_IgnoreRef();
    [CompilerGeneratedAttribute]
public sealed virtual Deployer get_Deployer();
    [CompilerGeneratedAttribute]
protected void set_Deployer(Deployer value);
    public sealed virtual Address get_DefaultAddress();
    public sealed virtual Information get_SerializationInformation();
    public sealed virtual Settings get_Settings();
    public sealed virtual Task get_TerminationTask();
    private IInternalActorRef get_InternalDeadLetters();
    public sealed virtual ActorPath TempPath();
    public sealed virtual void RegisterTempActor(IInternalActorRef actorRef, ActorPath path);
    public sealed virtual void UnregisterTempActor(ActorPath path);
    public sealed virtual FutureActorRef`1<T> CreateFutureRef(TaskCompletionSource`1<T> tcs);
    public sealed virtual IActorRef get_RemoteWatcher();
    public virtual void Init(ActorSystemImpl system);
    protected virtual IActorRef CreateRemoteWatcher(ActorSystemImpl system);
    protected virtual IActorRef CreateRemoteDeploymentWatcher(ActorSystemImpl system);
    protected DefaultFailureDetectorRegistry`1<Address> CreateRemoteWatcherFailureDetector(ActorSystem system);
    public sealed virtual IInternalActorRef ActorOf(ActorSystemImpl system, Props props, IInternalActorRef supervisor, ActorPath path, bool systemService, Deploy deploy, bool lookupDeploy, bool async);
    public sealed virtual Deploy LookUpRemotes(IEnumerable`1<string> p);
    public sealed virtual bool HasAddress(Address address);
    public sealed virtual IActorRef RootGuardianAt(Address address);
    private IInternalActorRef LocalActorOf(ActorSystemImpl system, Props props, IInternalActorRef supervisor, ActorPath path, bool systemService, Deploy deploy, bool lookupDeploy, bool async);
    public sealed virtual IInternalActorRef ResolveActorRefWithLocalAddress(string path, Address localAddress);
    protected virtual IInternalActorRef CreateRemoteRef(ActorPath actorPath, Address localAddress);
    protected virtual IInternalActorRef CreateRemoteRef(Props props, IInternalActorRef supervisor, Address localAddress, ActorPath rpath, Deploy deployment);
    public sealed virtual IActorRef ResolveActorRef(string path);
    public sealed virtual IActorRef InternalResolveActorRef(string path);
    public sealed virtual IActorRef ResolveActorRef(ActorPath actorPath);
    public sealed virtual Address GetExternalAddressFor(Address address);
    public sealed virtual void UseActorOnNode(RemoteActorRef actor, Props props, Deploy deploy, IInternalActorRef supervisor);
    public sealed virtual void Quarantine(Address address, Nullable`1<int> uid);
    [CompilerGeneratedAttribute]
private FailureDetector <CreateRemoteWatcherFailureDetector>b__59_0();
}
internal class Akka.Remote.RemoteDeployer : Deployer {
    public RemoteDeployer(Settings settings);
    public virtual Deploy ParseConfig(string key, Config config);
    private static Deploy CheckRemoteRouterConfig(Deploy deploy);
}
internal class Akka.Remote.RemoteDeploymentWatcher : ReceiveActor {
    private IDictionary`2<IActorRef, IInternalActorRef> _supervisors;
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(WatchRemote w);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(Terminated t);
}
internal class Akka.Remote.RemoteMetricsExtension : ExtensionIdProvider`1<IRemoteMetrics> {
    public virtual IRemoteMetrics CreateExtension(ExtendedActorSystem system);
    public static IRemoteMetrics Create(ExtendedActorSystem system);
}
internal class Akka.Remote.RemoteMetricsOff : object {
    public sealed virtual void LogPayloadBytes(object msg, long payloadBytes);
}
internal class Akka.Remote.RemoteMetricsOn : object {
    private ILoggingAdapter _log;
    private Nullable`1<long> _logFrameSizeExceeding;
    private ConcurrentDictionary`2<Type, long> _maxPayloadBytes;
    public RemoteMetricsOn(ExtendedActorSystem system);
    public sealed virtual void LogPayloadBytes(object msg, long payloadBytes);
    private void Check(Type type, long payloadBytes, long newMax);
}
public class Akka.Remote.RemoteSettings : object {
    public static string AkkaScheme;
    [CompilerGeneratedAttribute]
private Config <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <TrustedSelectionPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UntrustedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogSend>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogReceive>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LogBufferSizeExceeding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteLifecycleEventsLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FlushWait>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TransportNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Adapters>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportSettings[] <Transports>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackoffPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryGateClosedFor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePassiveConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SysMsgBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SysResendLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SysResendTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InitialSysMsgDeliveryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QuarantineSilentSystemTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SysMsgAckTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <QuarantineDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartupTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CommandAckTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Config <WatchFailureDetectorConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WatchFailureDetectorImplementationClass>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WatchHeartBeatInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WatchUnreachableReaperInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WatchHeartbeatExpectedResponseAfter>k__BackingField;
    public Config Config { get; private set; }
    public HashSet`1<string> TrustedSelectionPaths { get; public set; }
    public bool UntrustedMode { get; public set; }
    public bool LogSend { get; public set; }
    public bool LogReceive { get; public set; }
    public int LogBufferSizeExceeding { get; public set; }
    public string RemoteLifecycleEventsLogLevel { get; public set; }
    public string Dispatcher { get; public set; }
    public TimeSpan ShutdownTimeout { get; public set; }
    public TimeSpan FlushWait { get; public set; }
    public IList`1<string> TransportNames { get; public set; }
    public IDictionary`2<string, string> Adapters { get; public set; }
    public TransportSettings[] Transports { get; public set; }
    public TimeSpan BackoffPeriod { get; public set; }
    public TimeSpan RetryGateClosedFor { get; public set; }
    public bool UsePassiveConnections { get; public set; }
    public int SysMsgBufferSize { get; public set; }
    public int SysResendLimit { get; public set; }
    public TimeSpan SysResendTimeout { get; public set; }
    public TimeSpan InitialSysMsgDeliveryTimeout { get; public set; }
    public TimeSpan QuarantineSilentSystemTimeout { get; public set; }
    public TimeSpan SysMsgAckTimeout { get; public set; }
    public Nullable`1<TimeSpan> QuarantineDuration { get; public set; }
    public TimeSpan StartupTimeout { get; public set; }
    public TimeSpan CommandAckTimeout { get; public set; }
    public Config WatchFailureDetectorConfig { get; public set; }
    public string WatchFailureDetectorImplementationClass { get; public set; }
    public TimeSpan WatchHeartBeatInterval { get; public set; }
    public TimeSpan WatchUnreachableReaperInterval { get; public set; }
    public TimeSpan WatchHeartbeatExpectedResponseAfter { get; public set; }
    public RemoteSettings(Config config);
    private static RemoteSettings();
    [CompilerGeneratedAttribute]
public Config get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(Config value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_TrustedSelectionPaths();
    [CompilerGeneratedAttribute]
public void set_TrustedSelectionPaths(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_UntrustedMode();
    [CompilerGeneratedAttribute]
public void set_UntrustedMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogSend();
    [CompilerGeneratedAttribute]
public void set_LogSend(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogReceive();
    [CompilerGeneratedAttribute]
public void set_LogReceive(bool value);
    [CompilerGeneratedAttribute]
public int get_LogBufferSizeExceeding();
    [CompilerGeneratedAttribute]
public void set_LogBufferSizeExceeding(int value);
    [CompilerGeneratedAttribute]
public string get_RemoteLifecycleEventsLogLevel();
    [CompilerGeneratedAttribute]
public void set_RemoteLifecycleEventsLogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_Dispatcher();
    [CompilerGeneratedAttribute]
public void set_Dispatcher(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FlushWait();
    [CompilerGeneratedAttribute]
public void set_FlushWait(TimeSpan value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TransportNames();
    [CompilerGeneratedAttribute]
public void set_TransportNames(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Adapters();
    [CompilerGeneratedAttribute]
public void set_Adapters(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TransportSettings[] get_Transports();
    [CompilerGeneratedAttribute]
public void set_Transports(TransportSettings[] value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackoffPeriod();
    [CompilerGeneratedAttribute]
public void set_BackoffPeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryGateClosedFor();
    [CompilerGeneratedAttribute]
public void set_RetryGateClosedFor(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UsePassiveConnections();
    [CompilerGeneratedAttribute]
public void set_UsePassiveConnections(bool value);
    [CompilerGeneratedAttribute]
public int get_SysMsgBufferSize();
    [CompilerGeneratedAttribute]
public void set_SysMsgBufferSize(int value);
    [CompilerGeneratedAttribute]
public int get_SysResendLimit();
    [CompilerGeneratedAttribute]
public void set_SysResendLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SysResendTimeout();
    [CompilerGeneratedAttribute]
public void set_SysResendTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InitialSysMsgDeliveryTimeout();
    [CompilerGeneratedAttribute]
public void set_InitialSysMsgDeliveryTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QuarantineSilentSystemTimeout();
    [CompilerGeneratedAttribute]
public void set_QuarantineSilentSystemTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SysMsgAckTimeout();
    [CompilerGeneratedAttribute]
public void set_SysMsgAckTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_QuarantineDuration();
    [CompilerGeneratedAttribute]
public void set_QuarantineDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartupTimeout();
    [CompilerGeneratedAttribute]
public void set_StartupTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CommandAckTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandAckTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Config get_WatchFailureDetectorConfig();
    [CompilerGeneratedAttribute]
public void set_WatchFailureDetectorConfig(Config value);
    [CompilerGeneratedAttribute]
public string get_WatchFailureDetectorImplementationClass();
    [CompilerGeneratedAttribute]
public void set_WatchFailureDetectorImplementationClass(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WatchHeartBeatInterval();
    [CompilerGeneratedAttribute]
public void set_WatchHeartBeatInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WatchUnreachableReaperInterval();
    [CompilerGeneratedAttribute]
public void set_WatchUnreachableReaperInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WatchHeartbeatExpectedResponseAfter();
    [CompilerGeneratedAttribute]
public void set_WatchHeartbeatExpectedResponseAfter(TimeSpan value);
    private Config TransportConfigFor(string transportName);
    public Props ConfigureDispatcher(Props props);
    private static IDictionary`2<string, string> ConfigToMap(Config cfg);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<string, Config> <.ctor>b__0_0(string transportName);
}
internal class Akka.Remote.RemoteSystemDaemon : VirtualPathContainer {
    private ActorSystemImpl _system;
    private Switch _terminating;
    private ConcurrentDictionary`2<IActorRef, IImmutableSet`1<IActorRef>> _parent2Children;
    private IActorRef _terminator;
    public RemoteSystemDaemon(ActorSystemImpl system, ActorPath path, IInternalActorRef parent, IActorRef terminator, ILoggingAdapter log);
    private void TerminationHookDoneWhenNoChildren();
    protected virtual void TellInternal(object message, IActorRef sender);
    public virtual void SendSystemMessage(ISystemMessage message);
    private void HandleDaemonMsgCreate(DaemonMsgCreate message);
    public virtual IActorRef GetChild(IReadOnlyList`1<string> name);
    private bool AddChildParentNeedsWatch(IActorRef parent, IActorRef child);
    private bool RemoveChildParentNeedsUnwatch(IActorRef parent, IActorRef child);
    [CompilerGeneratedAttribute]
private void <TerminationHookDoneWhenNoChildren>b__5_0();
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<IEnumerable`1<string>, object> <TellInternal>g__Rec|6_0(IImmutableList`1<string> acc, <>c__DisplayClass6_0& , <>c__DisplayClass6_1& );
    [CompilerGeneratedAttribute]
private void <TellInternal>b__6_3();
    [CompilerGeneratedAttribute]
private void <TellInternal>b__6_4(IInternalActorRef c);
}
[InternalApiAttribute]
public abstract class Akka.Remote.RemoteTransport : object {
    [CompilerGeneratedAttribute]
private ExtendedActorSystem <System>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteActorRefProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUntrustedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <logRemoteLifeCycleEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingAdapter <Log>k__BackingField;
    public ExtendedActorSystem System { get; private set; }
    public RemoteActorRefProvider Provider { get; private set; }
    public ISet`1<Address> Addresses { get; }
    public Address DefaultAddress { get; }
    protected bool UseUntrustedMode { get; protected set; }
    public bool logRemoteLifeCycleEvents { get; protected set; }
    public ILoggingAdapter Log { get; protected set; }
    protected RemoteTransport(ExtendedActorSystem system, RemoteActorRefProvider provider);
    [CompilerGeneratedAttribute]
public ExtendedActorSystem get_System();
    [CompilerGeneratedAttribute]
private void set_System(ExtendedActorSystem value);
    [CompilerGeneratedAttribute]
public RemoteActorRefProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(RemoteActorRefProvider value);
    public abstract virtual ISet`1<Address> get_Addresses();
    public abstract virtual Address get_DefaultAddress();
    [CompilerGeneratedAttribute]
protected bool get_UseUntrustedMode();
    [CompilerGeneratedAttribute]
protected void set_UseUntrustedMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_logRemoteLifeCycleEvents();
    [CompilerGeneratedAttribute]
protected void set_logRemoteLifeCycleEvents(bool value);
    [CompilerGeneratedAttribute]
public ILoggingAdapter get_Log();
    [CompilerGeneratedAttribute]
protected void set_Log(ILoggingAdapter value);
    public abstract virtual void Start();
    public abstract virtual Task Shutdown();
    public abstract virtual void Send(object message, IActorRef sender, RemoteActorRef recipient);
    public abstract virtual Task`1<bool> ManagementCommand(object cmd);
    public abstract virtual Task`1<bool> ManagementCommand(object cmd, CancellationToken cancellationToken);
    public abstract virtual Address LocalAddressForRemote(Address remote);
    public abstract virtual void Quarantine(Address address, Nullable`1<int> uid);
}
public class Akka.Remote.RemoteTransportException : AkkaException {
    public RemoteTransportException(string message, Exception cause);
    protected RemoteTransportException(SerializationInfo info, StreamingContext context);
}
public class Akka.Remote.RemoteWatcher : UntypedActor {
    private IFailureDetectorRegistry`1<Address> _failureDetector;
    private TimeSpan _heartbeatExpectedResponseAfter;
    private IScheduler _scheduler;
    private IRemoteActorRefProvider _remoteProvider;
    private HeartbeatRsp _selfHeartbeatRspMsg;
    protected Dictionary`2<IInternalActorRef, HashSet`1<IInternalActorRef>> Watching;
    protected Dictionary`2<Address, HashSet`1<IInternalActorRef>> WatcheeByNodes;
    [CompilerGeneratedAttribute]
private HashSet`1<Address> <Unreachable>k__BackingField;
    private Dictionary`2<Address, int> _addressUids;
    private ICancelable _heartbeatCancelable;
    private ICancelable _failureDetectorReaperCancelable;
    protected ILoggingAdapter Log;
    protected ICollection`1<Address> WatchingNodes { get; }
    protected HashSet`1<Address> Unreachable { get; }
    public RemoteWatcher(IFailureDetectorRegistry`1<Address> failureDetector, TimeSpan heartbeatInterval, TimeSpan unreachableReaperInterval, TimeSpan heartbeatExpectedResponseAfter);
    public static Props Props(IFailureDetectorRegistry`1<Address> failureDetector, TimeSpan heartbeatInterval, TimeSpan unreachableReaperInterval, TimeSpan heartbeatExpectedResponseAfter);
    protected ICollection`1<Address> get_WatchingNodes();
    [CompilerGeneratedAttribute]
protected HashSet`1<Address> get_Unreachable();
    protected virtual void PostStop();
    protected virtual void OnReceive(object message);
    private void ReceiveHeartbeat();
    private void ReceiveHeartbeatRsp(int uid);
    private void ReapUnreachable();
    protected virtual void PublishAddressTerminated(Address address);
    protected virtual void Quarantine(Address address, Nullable`1<int> addressUid);
    protected void AddWatching(IInternalActorRef watchee, IInternalActorRef watcher);
    protected virtual void WatchNode(IInternalActorRef watchee);
    protected void RemoveWatch(IInternalActorRef watchee, IInternalActorRef watcher);
    protected void RemoveWatchee(IInternalActorRef watchee);
    protected void UnwatchNode(Address watcheeAddress);
    private void ProcessTerminated(IInternalActorRef watchee, bool existenceConfirmed, bool addressTerminated);
    private void SendHeartbeat();
    private void TriggerFirstHeartbeat(Address address);
    private void ReWatch(Address address);
}
internal class Akka.Remote.Remoting : RemoteTransport {
    private ILoggingAdapter _log;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _transportMapping;
    private IActorRef modreq(System.Runtime.CompilerServices.IsVolatile) _endpointManager;
    private HashSet`1 modreq(System.Runtime.CompilerServices.IsVolatile) _addresses;
    private Address modreq(System.Runtime.CompilerServices.IsVolatile) _defaultAddress;
    private IActorRef _transportSupervisor;
    private EventPublisher _eventPublisher;
    public static string EndpointManagerName;
    public ISet`1<Address> Addresses { get; }
    public Address DefaultAddress { get; }
    public Remoting(ExtendedActorSystem system, RemoteActorRefProvider provider);
    public virtual ISet`1<Address> get_Addresses();
    public virtual Address get_DefaultAddress();
    public virtual void Start();
    public virtual Task Shutdown();
    public virtual void Send(object message, IActorRef sender, RemoteActorRef recipient);
    [AsyncStateMachineAttribute("Akka.Remote.Remoting/<ManagementCommand>d__15")]
public virtual Task`1<bool> ManagementCommand(object cmd);
    [AsyncStateMachineAttribute("Akka.Remote.Remoting/<ManagementCommand>d__16")]
public virtual Task`1<bool> ManagementCommand(object cmd, CancellationToken cancellationToken);
    public virtual Address LocalAddressForRemote(Address remote);
    public virtual void Quarantine(Address address, Nullable`1<int> uid);
    private void NotifyError(string msg, Exception cause);
    internal static Address LocalAddressForRemote(IDictionary`2<string, HashSet`1<ProtocolTransportAddressPair>> transportMapping, Address remote);
    [CompilerGeneratedAttribute]
private void <Shutdown>g__Action|13_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Shutdown>b__13_1(Task`1<bool> result);
}
public class Akka.Remote.RemotingErrorEvent : RemotingLifecycleEvent {
    [CompilerGeneratedAttribute]
private Exception <Cause>k__BackingField;
    public Exception Cause { get; private set; }
    public RemotingErrorEvent(Exception cause);
    [CompilerGeneratedAttribute]
public Exception get_Cause();
    [CompilerGeneratedAttribute]
private void set_Cause(Exception value);
    public virtual LogLevel LogLevel();
    public virtual string ToString();
}
public abstract class Akka.Remote.RemotingLifecycleEvent : object {
    public abstract virtual LogLevel LogLevel();
}
public class Akka.Remote.RemotingListenEvent : RemotingLifecycleEvent {
    [CompilerGeneratedAttribute]
private IList`1<Address> <ListenAddresses>k__BackingField;
    public IList`1<Address> ListenAddresses { get; private set; }
    public RemotingListenEvent(IList`1<Address> listenAddresses);
    [CompilerGeneratedAttribute]
public IList`1<Address> get_ListenAddresses();
    [CompilerGeneratedAttribute]
private void set_ListenAddresses(IList`1<Address> value);
    public virtual LogLevel LogLevel();
    public virtual string ToString();
}
public class Akka.Remote.RemotingShutdownEvent : RemotingLifecycleEvent {
    public virtual LogLevel LogLevel();
    public virtual string ToString();
}
internal class Akka.Remote.ResendBufferCapacityReachedException : AkkaException {
    public ResendBufferCapacityReachedException(int c);
    protected ResendBufferCapacityReachedException(SerializationInfo info, StreamingContext context);
}
internal class Akka.Remote.ResendUnfulfillableException : AkkaException {
    protected ResendUnfulfillableException(SerializationInfo info, StreamingContext context);
}
public class Akka.Remote.Routing.RemoteRouterConfig : Pool {
    private IEnumerator`1<Address> _nodeAddrEnumerator;
    private AtomicCounter _childNameCounter;
    [CompilerGeneratedAttribute]
private Pool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Address> <Nodes>k__BackingField;
    internal Pool Local { get; }
    internal IList`1<Address> Nodes { get; }
    public SupervisorStrategy SupervisorStrategy { get; }
    public string RouterDispatcher { get; }
    public Resizer Resizer { get; }
    public RemoteRouterConfig(Pool local, IEnumerable`1<Address> nodes);
    [CompilerGeneratedAttribute]
internal Pool get_Local();
    [CompilerGeneratedAttribute]
internal IList`1<Address> get_Nodes();
    public virtual Router CreateRouter(ActorSystem system);
    public virtual int GetNrOfInstances(ActorSystem system);
    internal virtual Routee NewRoutee(Props routeeProps, IActorContext context);
    public virtual ActorBase CreateRouterActor();
    public virtual SupervisorStrategy get_SupervisorStrategy();
    public virtual string get_RouterDispatcher();
    public virtual Resizer get_Resizer();
    public virtual RouterConfig WithFallback(RouterConfig routerConfig);
    private RouterConfig Copy(Pool local, IEnumerable`1<Address> nodes);
    public sealed virtual bool Equals(RouterConfig other);
    public virtual ISurrogate ToSurrogate(ActorSystem system);
}
internal class Akka.Remote.SeqNo : object {
    [CompilerGeneratedAttribute]
private long <RawValue>k__BackingField;
    public static SeqNoComparer Comparer;
    public long RawValue { get; private set; }
    public SeqNo(long rawValue);
    private static SeqNo();
    [CompilerGeneratedAttribute]
public long get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(long value);
    public bool IsSuccessor(SeqNo that);
    public SeqNo Inc();
    public sealed virtual int CompareTo(SeqNo other);
    public static bool op_LessThan(SeqNo left, SeqNo right);
    public static bool op_LessThanOrEqual(SeqNo left, SeqNo right);
    public sealed virtual bool Equals(SeqNo other);
    public static bool op_Equality(SeqNo left, SeqNo right);
    public static bool op_Inequality(SeqNo left, SeqNo right);
    public static bool op_GreaterThan(SeqNo left, SeqNo right);
    public static bool op_GreaterThanOrEqual(SeqNo left, SeqNo right);
    public static SeqNo op_Implicit(long x);
    public static long op_Implicit(SeqNo seqNo);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static int CompareSeq(SeqNo x, SeqNo y);
    public static SeqNo Max(SeqNo x, SeqNo y);
}
internal class Akka.Remote.Serialization.ActorPathCache : LruBoundedCache`2<string, ActorPath> {
    public ActorPathCache(int capacity, int evictAgeThreshold);
    protected virtual ActorPath Compute(string k);
    protected virtual bool IsCacheable(ActorPath v);
}
internal class Akka.Remote.Serialization.ActorPathThreadLocalCache : ExtensionIdProvider`1<ActorPathThreadLocalCache> {
    private ThreadLocal`1<ActorPathCache> _current;
    public ActorPathCache Cache { get; }
    public ActorPathCache get_Cache();
    public virtual ActorPathThreadLocalCache CreateExtension(ExtendedActorSystem system);
    public static ActorPathThreadLocalCache For(ActorSystem system);
}
internal class Akka.Remote.Serialization.ActorRefResolveCache : LruBoundedCache`2<string, IActorRef> {
    private IRemoteActorRefProvider _provider;
    public ActorRefResolveCache(IRemoteActorRefProvider provider, int capacity, int evictAgeThreshold);
    protected virtual IActorRef Compute(string k);
    protected virtual bool IsCacheable(IActorRef v);
}
internal class Akka.Remote.Serialization.ActorRefResolveThreadLocalCache : ExtensionIdProvider`1<ActorRefResolveThreadLocalCache> {
    private IRemoteActorRefProvider _provider;
    private ThreadLocal`1<ActorRefResolveCache> _current;
    public ActorRefResolveCache Cache { get; }
    public ActorRefResolveThreadLocalCache(IRemoteActorRefProvider provider);
    public virtual ActorRefResolveThreadLocalCache CreateExtension(ExtendedActorSystem system);
    public ActorRefResolveCache get_Cache();
    public static ActorRefResolveThreadLocalCache For(ActorSystem system);
    [CompilerGeneratedAttribute]
private ActorRefResolveCache <.ctor>b__2_0();
}
internal class Akka.Remote.Serialization.AddressCache : LruBoundedCache`2<string, Address> {
    public AddressCache(int capacity, int evictAgeThreshold);
    protected virtual Address Compute(string k);
    protected virtual bool IsCacheable(Address v);
}
internal class Akka.Remote.Serialization.AddressThreadLocalCache : ExtensionIdProvider`1<AddressThreadLocalCache> {
    private ThreadLocal`1<AddressCache> _current;
    public AddressCache Cache { get; }
    public virtual AddressThreadLocalCache CreateExtension(ExtendedActorSystem system);
    public AddressCache get_Cache();
    public static AddressThreadLocalCache For(ActorSystem system);
}
internal class Akka.Remote.Serialization.CacheStatistics : object {
    [CompilerGeneratedAttribute]
private int <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxProbeDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <AverageProbeDistance>k__BackingField;
    public int Entries { get; }
    public int MaxProbeDistance { get; }
    public double AverageProbeDistance { get; }
    public CacheStatistics(int entries, int maxProbeDistance, double averageProbeDistance);
    [CompilerGeneratedAttribute]
public int get_Entries();
    [CompilerGeneratedAttribute]
public int get_MaxProbeDistance();
    [CompilerGeneratedAttribute]
public double get_AverageProbeDistance();
}
public class Akka.Remote.Serialization.DaemonMsgCreateSerializer : Serializer {
    public bool IncludeManifest { get; }
    public DaemonMsgCreateSerializer(ExtendedActorSystem system);
    public virtual bool get_IncludeManifest();
    public virtual Byte[] ToBinary(object obj);
    public virtual object FromBinary(Byte[] bytes, Type type);
    private PropsData PropsToProto(Props props);
    private Props PropsFromProto(PropsData protoProps);
    private DeployData DeployToProto(Deploy deploy);
    private Deploy DeployFromProto(DeployData protoDeploy);
    private static ActorRefData SerializeActorRef(IActorRef actorRef);
    private IActorRef DeserializeActorRef(ActorRefData actorRefData);
    private ValueTuple`4<int, bool, string, Byte[]> Serialize(object obj);
}
internal class Akka.Remote.Serialization.ExceptionSupport : object {
    private WrappedPayloadSupport _wrappedPayloadSupport;
    private static BindingFlags All;
    private HashSet`1<string> _defaultProperties;
    private FormatterConverter _defaultFormatterConverter;
    public ExceptionSupport(ExtendedActorSystem system);
    public Byte[] SerializeException(Exception exception);
    internal ExceptionData ExceptionToProto(Exception exception);
    public Exception DeserializeException(Byte[] bytes);
    internal Exception ExceptionFromProto(ExceptionData proto);
    public ExceptionData ExceptionToProtoNet(Exception exception);
    public Exception ExceptionFromProtoNet(ExceptionData proto);
    private static string ValueOrNull(string value);
}
internal static class Akka.Remote.Serialization.FastHash : object {
    public static int OfString(string s);
    public static int OfString(ReadOnlySpan`1<char> s);
    public static int OfStringFast(string s);
}
internal class Akka.Remote.Serialization.FastHashComparer : object {
    public static FastHashComparer Default;
    private static FastHashComparer();
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string s);
}
internal abstract class Akka.Remote.Serialization.LruBoundedCache`2 : object {
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EvictAgeThreshold>k__BackingField;
    private int _mask;
    private int _epoch;
    private IEqualityComparer`1<TKey> _keyComparer;
    private TKey[] _keys;
    private TValue[] _values;
    private Int32[] _hashes;
    private Int32[] _epochs;
    public int Capacity { get; private set; }
    public int EvictAgeThreshold { get; private set; }
    public CacheStatistics Stats { get; }
    protected LruBoundedCache`2(int capacity, int evictAgeThreshold, IEqualityComparer`1<TKey> keyComparer);
    [CompilerGeneratedAttribute]
public int get_Capacity();
    [CompilerGeneratedAttribute]
private void set_Capacity(int value);
    [CompilerGeneratedAttribute]
public int get_EvictAgeThreshold();
    [CompilerGeneratedAttribute]
private void set_EvictAgeThreshold(int value);
    public CacheStatistics get_Stats();
    public TValue Get(TKey k);
    public bool TryGet(TKey k, TValue& value);
    public TValue GetOrCompute(TKey k);
    public bool TryGetOrCompute(TKey k, TValue& value);
    public bool TrySet(TKey key, TValue value);
    private void RemoveAt(int position);
    private void Move(int position, TKey k, int h, TValue value, int elemEpoch, int probeDistance);
    protected int ProbeDistanceOf(int slot);
    protected int ProbeDistanceOf(int idealSlot, int actualSlot);
    protected abstract virtual TValue Compute(TKey k);
    protected abstract virtual bool IsCacheable(TValue v);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private int <ToString>b__29_0(int x);
}
public class Akka.Remote.Serialization.MessageContainerSerializer : Serializer {
    private WrappedPayloadSupport _payloadSupport;
    public bool IncludeManifest { get; }
    public MessageContainerSerializer(ExtendedActorSystem system);
    public virtual bool get_IncludeManifest();
    public virtual Byte[] ToBinary(object obj);
    public virtual object FromBinary(Byte[] bytes, Type type);
    private static Selection BuildPattern(string matcher, PatternType tpe);
}
public class Akka.Remote.Serialization.MiscMessageSerializer : SerializerWithStringManifest {
    private static string IdentifyManifest;
    private static string ActorIdentityManifest;
    private static string ActorRefManifest;
    private static string PoisonPillManifest;
    private static string KillManifest;
    private static string RemoteWatcherHearthbeatManifest;
    private static string RemoteWatcherHearthbeatRspManifest;
    private static string LocalScopeManifest;
    private static string RemoteScopeManifest;
    private static string ConfigManifest;
    private static string FromConfigManifest;
    private static string DefaultResizerManifest;
    private static string RoundRobinPoolManifest;
    private static string BroadcastPoolManifest;
    private static string RandomPoolManifest;
    private static string ScatterGatherPoolManifest;
    private static string TailChoppingPoolManifest;
    private static string ConsistentHashingPoolManifest;
    private static string RemoteRouterConfigManifest;
    private static string StatusFailureManifest;
    private static string StatusSuccessManifest;
    private static Byte[] EmptyBytes;
    private WrappedPayloadSupport _payloadSupport;
    private ExceptionSupport _exceptionSupport;
    public MiscMessageSerializer(ExtendedActorSystem system);
    private static MiscMessageSerializer();
    public virtual Byte[] ToBinary(object obj);
    public virtual string Manifest(object obj);
    public virtual object FromBinary(Byte[] bytes, string manifest);
    private Byte[] IdentifyToProto(Identify identify);
    private Identify IdentifyFromProto(Byte[] bytes);
    private Byte[] ActorIdentityToProto(ActorIdentity actorIdentity);
    private ActorIdentity ActorIdentityFromProto(Byte[] bytes);
    private Byte[] ActorRefToProto(IActorRef actorRef);
    private IActorRef ActorRefFromProto(Byte[] bytes);
    private Byte[] HeartbeatRspToProto(HeartbeatRsp heartbeatRsp);
    private HeartbeatRsp HearthbeatRspFromProto(Byte[] bytes);
    private Byte[] StatusSuccessToProto(Success success);
    private Success StatusSuccessFromProto(Byte[] bytes);
    private Byte[] StatusFailureToProto(Failure failure);
    private Failure StatusFailureFromProto(Byte[] bytes);
    private Byte[] RemoteScopeToProto(RemoteScope remoteScope);
    private RemoteScope RemoteScopeFromProto(Byte[] bytes);
    private Byte[] ConfigToProto(Config config);
    private Config ConfigFromProto(Byte[] bytes);
    private Byte[] FromConfigToProto(FromConfig fromConfig);
    private FromConfig FromConfigFromProto(Byte[] bytes);
    private Byte[] DefaultResizerToProto(DefaultResizer defaultResizer);
    private DefaultResizer DefaultResizerFromProto(Byte[] bytes);
    private GenericRoutingPool GenericRoutingPoolBuilder(Pool pool);
    private Byte[] RoundRobinPoolToProto(RoundRobinPool roundRobinPool);
    private RoundRobinPool RoundRobinPoolFromProto(Byte[] bytes);
    private Byte[] BroadcastPoolToProto(BroadcastPool broadcastPool);
    private BroadcastPool BroadcastPoolFromProto(Byte[] bytes);
    private Byte[] RandomPoolToProto(RandomPool randomPool);
    private RandomPool RandomPoolFromProto(Byte[] bytes);
    private Byte[] ScatterGatherFirstCompletedPoolToProto(ScatterGatherFirstCompletedPool scatterGatherFirstCompletedPool);
    private ScatterGatherFirstCompletedPool ScatterGatherFirstCompletedPoolFromProto(Byte[] bytes);
    private Byte[] TailChoppingPoolToProto(TailChoppingPool tailChoppingPool);
    private TailChoppingPool TailChoppingPoolFromProto(Byte[] bytes);
    private Byte[] ConsistentHashingPoolToProto(ConsistentHashingPool hashingPool);
    private object ConsistentHashingPoolFromProto(Byte[] bytes);
    private Byte[] RemoteRouterConfigToProto(RemoteRouterConfig remoteRouterConfig);
    private RemoteRouterConfig RemoteRouterConfigFromProto(Byte[] bytes);
    private static AddressData AddressMessageBuilder(Address address);
    private static Address AddressFrom(AddressData addressProto);
    private IActorRef ResolveActorRef(string path);
}
public class Akka.Remote.Serialization.PrimitiveSerializers : SerializerWithStringManifest {
    internal static string StringManifest;
    internal static string Int32Manifest;
    internal static string Int64Manifest;
    internal static string StringManifestNetCore;
    internal static string Int32ManifestNetCore;
    internal static string Int64ManifestNetCore;
    internal static string StringManifestNetFx;
    internal static string Int32ManifestNetFx;
    internal static string Int64ManifestNetFx;
    private bool _useLegacyBehavior;
    public PrimitiveSerializers(ExtendedActorSystem system, Config config);
    public virtual Byte[] ToBinary(object obj);
    public virtual object FromBinary(Byte[] bytes, string manifest);
    public virtual string Manifest(object obj);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.AckAndEnvelopeContainer : object {
    private static MessageParser`1<AckAndEnvelopeContainer> _parser;
    private UnknownFieldSet _unknownFields;
    public static int AckFieldNumber;
    private AcknowledgementInfo ack_;
    public static int EnvelopeFieldNumber;
    private RemoteEnvelope envelope_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AckAndEnvelopeContainer> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AcknowledgementInfo Ack { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RemoteEnvelope Envelope { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AckAndEnvelopeContainer(AckAndEnvelopeContainer other);
    private static AckAndEnvelopeContainer();
    public static MessageParser`1<AckAndEnvelopeContainer> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AckAndEnvelopeContainer Clone();
    public AcknowledgementInfo get_Ack();
    public void set_Ack(AcknowledgementInfo value);
    public RemoteEnvelope get_Envelope();
    public void set_Envelope(RemoteEnvelope value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AckAndEnvelopeContainer other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AckAndEnvelopeContainer other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.AcknowledgementInfo : object {
    private static MessageParser`1<AcknowledgementInfo> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CumulativeAckFieldNumber;
    private ulong cumulativeAck_;
    public static int NacksFieldNumber;
    private static FieldCodec`1<ulong> _repeated_nacks_codec;
    private RepeatedField`1<ulong> nacks_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AcknowledgementInfo> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong CumulativeAck { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<ulong> Nacks { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AcknowledgementInfo(AcknowledgementInfo other);
    private static AcknowledgementInfo();
    public static MessageParser`1<AcknowledgementInfo> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AcknowledgementInfo Clone();
    public ulong get_CumulativeAck();
    public void set_CumulativeAck(ulong value);
    public RepeatedField`1<ulong> get_Nacks();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AcknowledgementInfo other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AcknowledgementInfo other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.ActorIdentity : object {
    private static MessageParser`1<ActorIdentity> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CorrelationIdFieldNumber;
    private Payload correlationId_;
    public static int PathFieldNumber;
    private string path_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ActorIdentity> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload CorrelationId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Path { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorIdentity(ActorIdentity other);
    private static ActorIdentity();
    public static MessageParser`1<ActorIdentity> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ActorIdentity Clone();
    public Payload get_CorrelationId();
    public void set_CorrelationId(Payload value);
    public string get_Path();
    public void set_Path(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ActorIdentity other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ActorIdentity other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.ActorRefData : object {
    private static MessageParser`1<ActorRefData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int PathFieldNumber;
    private string path_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ActorRefData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Path { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData(ActorRefData other);
    private static ActorRefData();
    public static MessageParser`1<ActorRefData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ActorRefData Clone();
    public string get_Path();
    public void set_Path(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ActorRefData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ActorRefData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.AddressData : object {
    private static MessageParser`1<AddressData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int SystemFieldNumber;
    private string system_;
    public static int HostnameFieldNumber;
    private string hostname_;
    public static int PortFieldNumber;
    private UInt32 port_;
    public static int ProtocolFieldNumber;
    private string protocol_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AddressData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string System { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Hostname { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Port { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Protocol { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AddressData(AddressData other);
    private static AddressData();
    public static MessageParser`1<AddressData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AddressData Clone();
    public string get_System();
    public void set_System(string value);
    public string get_Hostname();
    public void set_Hostname(string value);
    public UInt32 get_Port();
    public void set_Port(UInt32 value);
    public string get_Protocol();
    public void set_Protocol(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AddressData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AddressData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.AkkaControlMessage : object {
    private static MessageParser`1<AkkaControlMessage> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CommandTypeFieldNumber;
    private CommandType commandType_;
    public static int HandshakeInfoFieldNumber;
    private AkkaHandshakeInfo handshakeInfo_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AkkaControlMessage> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public CommandType CommandType { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AkkaHandshakeInfo HandshakeInfo { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AkkaControlMessage(AkkaControlMessage other);
    private static AkkaControlMessage();
    public static MessageParser`1<AkkaControlMessage> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AkkaControlMessage Clone();
    public CommandType get_CommandType();
    public void set_CommandType(CommandType value);
    public AkkaHandshakeInfo get_HandshakeInfo();
    public void set_HandshakeInfo(AkkaHandshakeInfo value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AkkaControlMessage other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AkkaControlMessage other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.AkkaHandshakeInfo : object {
    private static MessageParser`1<AkkaHandshakeInfo> _parser;
    private UnknownFieldSet _unknownFields;
    public static int OriginFieldNumber;
    private AddressData origin_;
    public static int UidFieldNumber;
    private ulong uid_;
    public static int CookieFieldNumber;
    private string cookie_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AkkaHandshakeInfo> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AddressData Origin { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong Uid { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Cookie { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AkkaHandshakeInfo(AkkaHandshakeInfo other);
    private static AkkaHandshakeInfo();
    public static MessageParser`1<AkkaHandshakeInfo> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AkkaHandshakeInfo Clone();
    public AddressData get_Origin();
    public void set_Origin(AddressData value);
    public ulong get_Uid();
    public void set_Uid(ulong value);
    public string get_Cookie();
    public void set_Cookie(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AkkaHandshakeInfo other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AkkaHandshakeInfo other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.AkkaProtocolMessage : object {
    private static MessageParser`1<AkkaProtocolMessage> _parser;
    private UnknownFieldSet _unknownFields;
    public static int PayloadFieldNumber;
    private ByteString payload_;
    public static int InstructionFieldNumber;
    private AkkaControlMessage instruction_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AkkaProtocolMessage> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Payload { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AkkaControlMessage Instruction { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AkkaProtocolMessage(AkkaProtocolMessage other);
    private static AkkaProtocolMessage();
    public static MessageParser`1<AkkaProtocolMessage> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AkkaProtocolMessage Clone();
    public ByteString get_Payload();
    public void set_Payload(ByteString value);
    public AkkaControlMessage get_Instruction();
    public void set_Instruction(AkkaControlMessage value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AkkaProtocolMessage other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AkkaProtocolMessage other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal enum Akka.Remote.Serialization.Proto.Msg.CommandType : Enum {
    public int value__;
    [OriginalNameAttribute("NONE")]
public static CommandType None;
    [OriginalNameAttribute("ASSOCIATE")]
public static CommandType Associate;
    [OriginalNameAttribute("DISASSOCIATE")]
public static CommandType Disassociate;
    [OriginalNameAttribute("HEARTBEAT")]
public static CommandType Heartbeat;
    [OriginalNameAttribute("DISASSOCIATE_SHUTTING_DOWN")]
public static CommandType DisassociateShuttingDown;
    [OriginalNameAttribute("DISASSOCIATE_QUARANTINED")]
public static CommandType DisassociateQuarantined;
}
internal static class Akka.Remote.Serialization.Proto.Msg.ContainerFormatsReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static ContainerFormatsReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.CreateData : object {
    private static MessageParser`1<CreateData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CauseFieldNumber;
    private ExceptionData cause_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<CreateData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData Cause { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public CreateData(CreateData other);
    private static CreateData();
    public static MessageParser`1<CreateData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual CreateData Clone();
    public ExceptionData get_Cause();
    public void set_Cause(ExceptionData value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(CreateData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CreateData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.DaemonMsgCreateData : object {
    private static MessageParser`1<DaemonMsgCreateData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int PropsFieldNumber;
    private PropsData props_;
    public static int DeployFieldNumber;
    private DeployData deploy_;
    public static int PathFieldNumber;
    private string path_;
    public static int SupervisorFieldNumber;
    private ActorRefData supervisor_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<DaemonMsgCreateData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public PropsData Props { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DeployData Deploy { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Path { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Supervisor { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DaemonMsgCreateData(DaemonMsgCreateData other);
    private static DaemonMsgCreateData();
    public static MessageParser`1<DaemonMsgCreateData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual DaemonMsgCreateData Clone();
    public PropsData get_Props();
    public void set_Props(PropsData value);
    public DeployData get_Deploy();
    public void set_Deploy(DeployData value);
    public string get_Path();
    public void set_Path(string value);
    public ActorRefData get_Supervisor();
    public void set_Supervisor(ActorRefData value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(DaemonMsgCreateData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(DaemonMsgCreateData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.DeathWatchNotificationData : object {
    private static MessageParser`1<DeathWatchNotificationData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ActorFieldNumber;
    private ActorRefData actor_;
    public static int ExistenceConfirmedFieldNumber;
    private bool existenceConfirmed_;
    public static int AddressTerminatedFieldNumber;
    private bool addressTerminated_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<DeathWatchNotificationData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Actor { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool ExistenceConfirmed { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool AddressTerminated { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DeathWatchNotificationData(DeathWatchNotificationData other);
    private static DeathWatchNotificationData();
    public static MessageParser`1<DeathWatchNotificationData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual DeathWatchNotificationData Clone();
    public ActorRefData get_Actor();
    public void set_Actor(ActorRefData value);
    public bool get_ExistenceConfirmed();
    public void set_ExistenceConfirmed(bool value);
    public bool get_AddressTerminated();
    public void set_AddressTerminated(bool value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(DeathWatchNotificationData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(DeathWatchNotificationData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.DefaultResizer : object {
    private static MessageParser`1<DefaultResizer> _parser;
    private UnknownFieldSet _unknownFields;
    public static int LowerBoundFieldNumber;
    private UInt32 lowerBound_;
    public static int UpperBoundFieldNumber;
    private UInt32 upperBound_;
    public static int PressureThresholdFieldNumber;
    private UInt32 pressureThreshold_;
    public static int RampupRateFieldNumber;
    private double rampupRate_;
    public static int BackoffThresholdFieldNumber;
    private double backoffThreshold_;
    public static int BackoffRateFieldNumber;
    private double backoffRate_;
    public static int MessagesPerResizeFieldNumber;
    private UInt32 messagesPerResize_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<DefaultResizer> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 LowerBound { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 UpperBound { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 PressureThreshold { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public double RampupRate { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public double BackoffThreshold { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public double BackoffRate { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 MessagesPerResize { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DefaultResizer(DefaultResizer other);
    private static DefaultResizer();
    public static MessageParser`1<DefaultResizer> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual DefaultResizer Clone();
    public UInt32 get_LowerBound();
    public void set_LowerBound(UInt32 value);
    public UInt32 get_UpperBound();
    public void set_UpperBound(UInt32 value);
    public UInt32 get_PressureThreshold();
    public void set_PressureThreshold(UInt32 value);
    public double get_RampupRate();
    public void set_RampupRate(double value);
    public double get_BackoffThreshold();
    public void set_BackoffThreshold(double value);
    public double get_BackoffRate();
    public void set_BackoffRate(double value);
    public UInt32 get_MessagesPerResize();
    public void set_MessagesPerResize(UInt32 value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(DefaultResizer other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(DefaultResizer other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.DeployData : object {
    private static MessageParser`1<DeployData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int PathFieldNumber;
    private string path_;
    public static int ConfigFieldNumber;
    private ByteString config_;
    public static int RouterConfigFieldNumber;
    private ByteString routerConfig_;
    public static int ScopeFieldNumber;
    private ByteString scope_;
    public static int DispatcherFieldNumber;
    private string dispatcher_;
    public static int ScopeSerializerIdFieldNumber;
    private int scopeSerializerId_;
    public static int ScopeManifestFieldNumber;
    private string scopeManifest_;
    public static int ConfigSerializerIdFieldNumber;
    private int configSerializerId_;
    public static int ConfigManifestFieldNumber;
    private string configManifest_;
    public static int RouterConfigSerializerIdFieldNumber;
    private int routerConfigSerializerId_;
    public static int RouterConfigManifestFieldNumber;
    private string routerConfigManifest_;
    public static int StashCapacityFieldNumber;
    private int stashCapacity_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<DeployData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Path { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Config { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString RouterConfig { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Scope { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Dispatcher { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public int ScopeSerializerId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string ScopeManifest { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public int ConfigSerializerId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string ConfigManifest { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public int RouterConfigSerializerId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string RouterConfigManifest { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public int StashCapacity { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DeployData(DeployData other);
    private static DeployData();
    public static MessageParser`1<DeployData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual DeployData Clone();
    public string get_Path();
    public void set_Path(string value);
    public ByteString get_Config();
    public void set_Config(ByteString value);
    public ByteString get_RouterConfig();
    public void set_RouterConfig(ByteString value);
    public ByteString get_Scope();
    public void set_Scope(ByteString value);
    public string get_Dispatcher();
    public void set_Dispatcher(string value);
    public int get_ScopeSerializerId();
    public void set_ScopeSerializerId(int value);
    public string get_ScopeManifest();
    public void set_ScopeManifest(string value);
    public int get_ConfigSerializerId();
    public void set_ConfigSerializerId(int value);
    public string get_ConfigManifest();
    public void set_ConfigManifest(string value);
    public int get_RouterConfigSerializerId();
    public void set_RouterConfigSerializerId(int value);
    public string get_RouterConfigManifest();
    public void set_RouterConfigManifest(string value);
    public int get_StashCapacity();
    public void set_StashCapacity(int value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(DeployData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(DeployData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.ExceptionData : object {
    private static MessageParser`1<ExceptionData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int TypeNameFieldNumber;
    private string typeName_;
    public static int MessageFieldNumber;
    private string message_;
    public static int StackTraceFieldNumber;
    private string stackTrace_;
    public static int SourceFieldNumber;
    private string source_;
    public static int InnerExceptionFieldNumber;
    private ExceptionData innerException_;
    public static int CustomFieldsFieldNumber;
    private static Codec<string, Payload> _map_customFields_codec;
    private MapField`2<string, Payload> customFields_;
    public static int TypeForwardedFromFieldNumber;
    private string typeForwardedFrom_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ExceptionData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string TypeName { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Message { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string StackTrace { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Source { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData InnerException { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public MapField`2<string, Payload> CustomFields { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string TypeForwardedFrom { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData(ExceptionData other);
    private static ExceptionData();
    public static MessageParser`1<ExceptionData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ExceptionData Clone();
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Message();
    public void set_Message(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public string get_Source();
    public void set_Source(string value);
    public ExceptionData get_InnerException();
    public void set_InnerException(ExceptionData value);
    public MapField`2<string, Payload> get_CustomFields();
    public string get_TypeForwardedFrom();
    public void set_TypeForwardedFrom(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ExceptionData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ExceptionData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.FailedData : object {
    private static MessageParser`1<FailedData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ChildFieldNumber;
    private ActorRefData child_;
    public static int CauseFieldNumber;
    private ExceptionData cause_;
    public static int UidFieldNumber;
    private ulong uid_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FailedData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Child { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData Cause { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong Uid { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FailedData(FailedData other);
    private static FailedData();
    public static MessageParser`1<FailedData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FailedData Clone();
    public ActorRefData get_Child();
    public void set_Child(ActorRefData value);
    public ExceptionData get_Cause();
    public void set_Cause(ExceptionData value);
    public ulong get_Uid();
    public void set_Uid(ulong value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FailedData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FailedData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.FromConfig : object {
    private static MessageParser`1<FromConfig> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ResizerFieldNumber;
    private Payload resizer_;
    public static int RouterDispatcherFieldNumber;
    private string routerDispatcher_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FromConfig> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload Resizer { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string RouterDispatcher { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FromConfig(FromConfig other);
    private static FromConfig();
    public static MessageParser`1<FromConfig> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FromConfig Clone();
    public Payload get_Resizer();
    public void set_Resizer(Payload value);
    public string get_RouterDispatcher();
    public void set_RouterDispatcher(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FromConfig other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FromConfig other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool : object {
    private static MessageParser`1<GenericRoutingPool> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NrOfInstancesFieldNumber;
    private UInt32 nrOfInstances_;
    public static int RouterDispatcherFieldNumber;
    private string routerDispatcher_;
    public static int UsePoolDispatcherFieldNumber;
    private bool usePoolDispatcher_;
    public static int ResizerFieldNumber;
    private Payload resizer_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<GenericRoutingPool> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 NrOfInstances { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string RouterDispatcher { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool UsePoolDispatcher { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload Resizer { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public GenericRoutingPool(GenericRoutingPool other);
    private static GenericRoutingPool();
    public static MessageParser`1<GenericRoutingPool> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual GenericRoutingPool Clone();
    public UInt32 get_NrOfInstances();
    public void set_NrOfInstances(UInt32 value);
    public string get_RouterDispatcher();
    public void set_RouterDispatcher(string value);
    public bool get_UsePoolDispatcher();
    public void set_UsePoolDispatcher(bool value);
    public Payload get_Resizer();
    public void set_Resizer(Payload value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(GenericRoutingPool other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(GenericRoutingPool other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.Identify : object {
    private static MessageParser`1<Identify> _parser;
    private UnknownFieldSet _unknownFields;
    public static int MessageIdFieldNumber;
    private Payload messageId_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Identify> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload MessageId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Identify(Identify other);
    private static Identify();
    public static MessageParser`1<Identify> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Identify Clone();
    public Payload get_MessageId();
    public void set_MessageId(Payload value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Identify other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Identify other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.Payload : object {
    private static MessageParser`1<Payload> _parser;
    private UnknownFieldSet _unknownFields;
    public static int MessageFieldNumber;
    private ByteString message_;
    public static int SerializerIdFieldNumber;
    private int serializerId_;
    public static int MessageManifestFieldNumber;
    private ByteString messageManifest_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Payload> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Message { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public int SerializerId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString MessageManifest { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload(Payload other);
    private static Payload();
    public static MessageParser`1<Payload> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Payload Clone();
    public ByteString get_Message();
    public void set_Message(ByteString value);
    public int get_SerializerId();
    public void set_SerializerId(int value);
    public ByteString get_MessageManifest();
    public void set_MessageManifest(ByteString value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Payload other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Payload other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.PropsData : object {
    private static MessageParser`1<PropsData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int DeployFieldNumber;
    private DeployData deploy_;
    public static int ClazzFieldNumber;
    private string clazz_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<ByteString> _repeated_args_codec;
    private RepeatedField`1<ByteString> args_;
    public static int ManifestsFieldNumber;
    private static FieldCodec`1<string> _repeated_manifests_codec;
    private RepeatedField`1<string> manifests_;
    public static int SerializerIdsFieldNumber;
    private static FieldCodec`1<int> _repeated_serializerIds_codec;
    private RepeatedField`1<int> serializerIds_;
    public static int HasManifestFieldNumber;
    private static FieldCodec`1<bool> _repeated_hasManifest_codec;
    private RepeatedField`1<bool> hasManifest_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<PropsData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DeployData Deploy { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Clazz { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<ByteString> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<string> Manifests { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<int> SerializerIds { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<bool> HasManifest { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public PropsData(PropsData other);
    private static PropsData();
    public static MessageParser`1<PropsData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual PropsData Clone();
    public DeployData get_Deploy();
    public void set_Deploy(DeployData value);
    public string get_Clazz();
    public void set_Clazz(string value);
    public RepeatedField`1<ByteString> get_Args();
    public RepeatedField`1<string> get_Manifests();
    public RepeatedField`1<int> get_SerializerIds();
    public RepeatedField`1<bool> get_HasManifest();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(PropsData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(PropsData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.RecreateData : object {
    private static MessageParser`1<RecreateData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CauseFieldNumber;
    private ExceptionData cause_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<RecreateData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData Cause { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RecreateData(RecreateData other);
    private static RecreateData();
    public static MessageParser`1<RecreateData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual RecreateData Clone();
    public ExceptionData get_Cause();
    public void set_Cause(ExceptionData value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(RecreateData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(RecreateData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.RemoteEnvelope : object {
    private static MessageParser`1<RemoteEnvelope> _parser;
    private UnknownFieldSet _unknownFields;
    public static int RecipientFieldNumber;
    private ActorRefData recipient_;
    public static int MessageFieldNumber;
    private Payload message_;
    public static int SenderFieldNumber;
    private ActorRefData sender_;
    public static int SeqFieldNumber;
    private ulong seq_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<RemoteEnvelope> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Recipient { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload Message { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Sender { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong Seq { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RemoteEnvelope(RemoteEnvelope other);
    private static RemoteEnvelope();
    public static MessageParser`1<RemoteEnvelope> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual RemoteEnvelope Clone();
    public ActorRefData get_Recipient();
    public void set_Recipient(ActorRefData value);
    public Payload get_Message();
    public void set_Message(Payload value);
    public ActorRefData get_Sender();
    public void set_Sender(ActorRefData value);
    public ulong get_Seq();
    public void set_Seq(ulong value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(RemoteEnvelope other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(RemoteEnvelope other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.RemoteRouterConfig : object {
    private static MessageParser`1<RemoteRouterConfig> _parser;
    private UnknownFieldSet _unknownFields;
    public static int LocalFieldNumber;
    private Payload local_;
    public static int NodesFieldNumber;
    private static FieldCodec`1<AddressData> _repeated_nodes_codec;
    private RepeatedField`1<AddressData> nodes_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<RemoteRouterConfig> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload Local { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<AddressData> Nodes { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RemoteRouterConfig(RemoteRouterConfig other);
    private static RemoteRouterConfig();
    public static MessageParser`1<RemoteRouterConfig> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual RemoteRouterConfig Clone();
    public Payload get_Local();
    public void set_Local(Payload value);
    public RepeatedField`1<AddressData> get_Nodes();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(RemoteRouterConfig other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(RemoteRouterConfig other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.RemoteScope : object {
    private static MessageParser`1<RemoteScope> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NodeFieldNumber;
    private AddressData node_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<RemoteScope> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AddressData Node { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RemoteScope(RemoteScope other);
    private static RemoteScope();
    public static MessageParser`1<RemoteScope> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual RemoteScope Clone();
    public AddressData get_Node();
    public void set_Node(AddressData value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(RemoteScope other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(RemoteScope other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.RemoteWatcherHeartbeatResponse : object {
    private static MessageParser`1<RemoteWatcherHeartbeatResponse> _parser;
    private UnknownFieldSet _unknownFields;
    public static int UidFieldNumber;
    private ulong uid_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<RemoteWatcherHeartbeatResponse> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong Uid { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RemoteWatcherHeartbeatResponse(RemoteWatcherHeartbeatResponse other);
    private static RemoteWatcherHeartbeatResponse();
    public static MessageParser`1<RemoteWatcherHeartbeatResponse> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual RemoteWatcherHeartbeatResponse Clone();
    public ulong get_Uid();
    public void set_Uid(ulong value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(RemoteWatcherHeartbeatResponse other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(RemoteWatcherHeartbeatResponse other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.ResumeData : object {
    private static MessageParser`1<ResumeData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CauseFieldNumber;
    private ExceptionData cause_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ResumeData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData Cause { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ResumeData(ResumeData other);
    private static ResumeData();
    public static MessageParser`1<ResumeData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ResumeData Clone();
    public ExceptionData get_Cause();
    public void set_Cause(ExceptionData value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ResumeData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ResumeData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.ScatterGatherPool : object {
    private static MessageParser`1<ScatterGatherPool> _parser;
    private UnknownFieldSet _unknownFields;
    public static int GenericFieldNumber;
    private GenericRoutingPool generic_;
    public static int WithinFieldNumber;
    private Duration within_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ScatterGatherPool> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public GenericRoutingPool Generic { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Duration Within { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ScatterGatherPool(ScatterGatherPool other);
    private static ScatterGatherPool();
    public static MessageParser`1<ScatterGatherPool> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ScatterGatherPool Clone();
    public GenericRoutingPool get_Generic();
    public void set_Generic(GenericRoutingPool value);
    public Duration get_Within();
    public void set_Within(Duration value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ScatterGatherPool other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ScatterGatherPool other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.Selection : object {
    private static MessageParser`1<Selection> _parser;
    private UnknownFieldSet _unknownFields;
    public static int TypeFieldNumber;
    private PatternType type_;
    public static int MatcherFieldNumber;
    private string matcher_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Selection> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public PatternType Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Matcher { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Selection(Selection other);
    private static Selection();
    public static MessageParser`1<Selection> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Selection Clone();
    public PatternType get_Type();
    public void set_Type(PatternType value);
    public string get_Matcher();
    public void set_Matcher(string value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Selection other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Selection other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.SelectionEnvelope : object {
    private static MessageParser`1<SelectionEnvelope> _parser;
    private UnknownFieldSet _unknownFields;
    public static int PayloadFieldNumber;
    private Payload payload_;
    public static int PatternFieldNumber;
    private static FieldCodec`1<Selection> _repeated_pattern_codec;
    private RepeatedField`1<Selection> pattern_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<SelectionEnvelope> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload Payload { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Selection> Pattern { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public SelectionEnvelope(SelectionEnvelope other);
    private static SelectionEnvelope();
    public static MessageParser`1<SelectionEnvelope> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual SelectionEnvelope Clone();
    public Payload get_Payload();
    public void set_Payload(Payload value);
    public RepeatedField`1<Selection> get_Pattern();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(SelectionEnvelope other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(SelectionEnvelope other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.StatusFailure : object {
    private static MessageParser`1<StatusFailure> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CauseFieldNumber;
    private ExceptionData cause_;
    public static int StateFieldNumber;
    private Payload state_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<StatusFailure> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ExceptionData Cause { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload State { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public StatusFailure(StatusFailure other);
    private static StatusFailure();
    public static MessageParser`1<StatusFailure> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual StatusFailure Clone();
    public ExceptionData get_Cause();
    public void set_Cause(ExceptionData value);
    public Payload get_State();
    public void set_State(Payload value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(StatusFailure other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(StatusFailure other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.StatusSuccess : object {
    private static MessageParser`1<StatusSuccess> _parser;
    private UnknownFieldSet _unknownFields;
    public static int StatusFieldNumber;
    private Payload status_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<StatusSuccess> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Payload Status { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public StatusSuccess(StatusSuccess other);
    private static StatusSuccess();
    public static MessageParser`1<StatusSuccess> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual StatusSuccess Clone();
    public Payload get_Status();
    public void set_Status(Payload value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(StatusSuccess other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(StatusSuccess other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.SuperviseData : object {
    private static MessageParser`1<SuperviseData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ChildFieldNumber;
    private ActorRefData child_;
    public static int AsyncFieldNumber;
    private bool async_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<SuperviseData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Child { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool Async { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public SuperviseData(SuperviseData other);
    private static SuperviseData();
    public static MessageParser`1<SuperviseData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual SuperviseData Clone();
    public ActorRefData get_Child();
    public void set_Child(ActorRefData value);
    public bool get_Async();
    public void set_Async(bool value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(SuperviseData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(SuperviseData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal static class Akka.Remote.Serialization.Proto.Msg.SystemMessageFormatsReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static SystemMessageFormatsReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.TailChoppingPool : object {
    private static MessageParser`1<TailChoppingPool> _parser;
    private UnknownFieldSet _unknownFields;
    public static int GenericFieldNumber;
    private GenericRoutingPool generic_;
    public static int WithinFieldNumber;
    private Duration within_;
    public static int IntervalFieldNumber;
    private Duration interval_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<TailChoppingPool> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public GenericRoutingPool Generic { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Duration Within { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Duration Interval { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public TailChoppingPool(TailChoppingPool other);
    private static TailChoppingPool();
    public static MessageParser`1<TailChoppingPool> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual TailChoppingPool Clone();
    public GenericRoutingPool get_Generic();
    public void set_Generic(GenericRoutingPool value);
    public Duration get_Within();
    public void set_Within(Duration value);
    public Duration get_Interval();
    public void set_Interval(Duration value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(TailChoppingPool other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(TailChoppingPool other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
internal class Akka.Remote.Serialization.Proto.Msg.WatchData : object {
    private static MessageParser`1<WatchData> _parser;
    private UnknownFieldSet _unknownFields;
    public static int WatcheeFieldNumber;
    private ActorRefData watchee_;
    public static int WatcherFieldNumber;
    private ActorRefData watcher_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<WatchData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Watchee { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ActorRefData Watcher { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public WatchData(WatchData other);
    private static WatchData();
    public static MessageParser`1<WatchData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual WatchData Clone();
    public ActorRefData get_Watchee();
    public void set_Watchee(ActorRefData value);
    public ActorRefData get_Watcher();
    public void set_Watcher(ActorRefData value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(WatchData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(WatchData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal static class Akka.Remote.Serialization.Proto.Msg.WireFormatsReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static WireFormatsReflection();
    public static FileDescriptor get_Descriptor();
}
public class Akka.Remote.Serialization.ProtobufSerializer : Serializer {
    private static ConcurrentDictionary`2<string, MessageParser> TypeLookup;
    public bool IncludeManifest { get; }
    public ProtobufSerializer(ExtendedActorSystem system);
    private static ProtobufSerializer();
    public virtual bool get_IncludeManifest();
    public virtual Byte[] ToBinary(object obj);
    public virtual object FromBinary(Byte[] bytes, Type type);
}
public class Akka.Remote.Serialization.SystemMessageSerializer : Serializer {
    private WrappedPayloadSupport _payloadSupport;
    private ExceptionSupport _exceptionSupport;
    private static Byte[] EmptyBytes;
    [CompilerGeneratedAttribute]
private bool <IncludeManifest>k__BackingField;
    public bool IncludeManifest { get; }
    public SystemMessageSerializer(ExtendedActorSystem system);
    private static SystemMessageSerializer();
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeManifest();
    public virtual Byte[] ToBinary(object obj);
    public virtual object FromBinary(Byte[] bytes, Type type);
    private Byte[] CreateToProto(Create create);
    private Create CreateFromProto(Byte[] bytes);
    private Byte[] RecreateToProto(Recreate recreate);
    private Recreate RecreateFromProto(Byte[] bytes);
    private Byte[] ResumeToProto(Resume resume);
    private Resume ResumeFromProto(Byte[] bytes);
    private Byte[] SuperviseToProto(Supervise supervise);
    private Supervise SuperviseFromProto(Byte[] bytes);
    private Byte[] WatchToProto(Watch watch);
    private Watch WatchFromProto(Byte[] bytes);
    private Byte[] UnwatchToProto(Unwatch unwatch);
    private Unwatch UnwatchFromProto(Byte[] bytes);
    private Byte[] FailedToProto(Failed failed);
    private Failed FailedFromProto(Byte[] bytes);
    private Byte[] DeathWatchNotificationToProto(DeathWatchNotification deathWatchNotification);
    private DeathWatchNotification DeathWatchNotificationFromProto(Byte[] bytes);
    private IActorRef ResolveActorRef(string path);
}
internal class Akka.Remote.Serialization.WrappedPayloadSupport : object {
    private ExtendedActorSystem _system;
    public WrappedPayloadSupport(ExtendedActorSystem system);
    public Payload PayloadToProto(object payload);
    public object PayloadFrom(Payload payload);
}
internal class Akka.Remote.ShutDownAssociation : EndpointException {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    public Address LocalAddress { get; private set; }
    public Address RemoteAddress { get; private set; }
    public ShutDownAssociation(string message, Address localAddress, Address remoteAddress, Exception cause);
    [CompilerGeneratedAttribute]
public Address get_LocalAddress();
    [CompilerGeneratedAttribute]
private void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
}
public class Akka.Remote.ThisActorSystemQuarantinedEvent : RemotingLifecycleEvent {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    public Address LocalAddress { get; private set; }
    public Address RemoteAddress { get; private set; }
    public ThisActorSystemQuarantinedEvent(Address localAddress, Address remoteAddress);
    [CompilerGeneratedAttribute]
public Address get_LocalAddress();
    [CompilerGeneratedAttribute]
private void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
    public virtual LogLevel LogLevel();
    public virtual string ToString();
}
public abstract class Akka.Remote.Transport.AbstractTransportAdapter : Transport {
    protected Transport WrappedTransport;
    protected SchemeAugmenter SchemeAugmenter { get; }
    public string SchemeIdentifier { get; }
    public long MaximumPayloadBytes { get; }
    protected AbstractTransportAdapter(Transport wrappedTransport);
    protected abstract virtual SchemeAugmenter get_SchemeAugmenter();
    public virtual string get_SchemeIdentifier();
    public virtual long get_MaximumPayloadBytes();
    protected abstract virtual Task`1<IAssociationEventListener> InterceptListen(Address listenAddress, Task`1<IAssociationEventListener> listenerTask);
    protected abstract virtual void InterceptAssociate(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusPromise);
    public virtual bool IsResponsibleFor(Address remote);
    public virtual Task`1<ValueTuple`2<Address, TaskCompletionSource`1<IAssociationEventListener>>> Listen();
    public virtual Task`1<AssociationHandle> Associate(Address remoteAddress);
    public virtual Task`1<bool> Shutdown();
}
public abstract class Akka.Remote.Transport.AbstractTransportAdapterHandle : AssociationHandle {
    [CompilerGeneratedAttribute]
private Address <OriginalLocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <OriginalRemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationHandle <WrappedHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemeAugmenter <SchemeAugmenter>k__BackingField;
    public Address OriginalLocalAddress { get; private set; }
    public Address OriginalRemoteAddress { get; private set; }
    public AssociationHandle WrappedHandle { get; private set; }
    protected SchemeAugmenter SchemeAugmenter { get; private set; }
    protected AbstractTransportAdapterHandle(AssociationHandle wrappedHandle, string addedSchemeIdentifier);
    protected AbstractTransportAdapterHandle(Address originalLocalAddress, Address originalRemoteAddress, AssociationHandle wrappedHandle, string addedSchemeIdentifier);
    [CompilerGeneratedAttribute]
public Address get_OriginalLocalAddress();
    [CompilerGeneratedAttribute]
private void set_OriginalLocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_OriginalRemoteAddress();
    [CompilerGeneratedAttribute]
private void set_OriginalRemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public AssociationHandle get_WrappedHandle();
    [CompilerGeneratedAttribute]
private void set_WrappedHandle(AssociationHandle value);
    [CompilerGeneratedAttribute]
protected SchemeAugmenter get_SchemeAugmenter();
    [CompilerGeneratedAttribute]
private void set_SchemeAugmenter(SchemeAugmenter value);
    protected bool Equals(AbstractTransportAdapterHandle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Akka.Remote.Transport.AckAndMessage : object {
    [CompilerGeneratedAttribute]
private Ack <AckOption>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <MessageOption>k__BackingField;
    public Ack AckOption { get; private set; }
    public Message MessageOption { get; private set; }
    public AckAndMessage(Ack ackOption, Message messageOption);
    [CompilerGeneratedAttribute]
public Ack get_AckOption();
    [CompilerGeneratedAttribute]
private void set_AckOption(Ack value);
    [CompilerGeneratedAttribute]
public Message get_MessageOption();
    [CompilerGeneratedAttribute]
private void set_MessageOption(Message value);
}
public abstract class Akka.Remote.Transport.Activity : object {
}
public class Akka.Remote.Transport.ActorAssociationEventListener : object {
    [CompilerGeneratedAttribute]
private IActorRef <Actor>k__BackingField;
    public IActorRef Actor { get; private set; }
    public ActorAssociationEventListener(IActorRef actor);
    [CompilerGeneratedAttribute]
public IActorRef get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(IActorRef value);
    public sealed virtual void Notify(IAssociationEvent ev);
}
public class Akka.Remote.Transport.ActorHandleEventListener : object {
    public IActorRef Actor;
    public ActorHandleEventListener(IActorRef actor);
    public sealed virtual void Notify(IHandleEvent ev);
}
public abstract class Akka.Remote.Transport.ActorTransportAdapter : AbstractTransportAdapter {
    public static TimeSpan AskTimeout;
    protected IActorRef modreq(System.Runtime.CompilerServices.IsVolatile) manager;
    protected string ManagerName { get; }
    protected Props ManagerProps { get; }
    protected ActorTransportAdapter(Transport wrappedTransport, ActorSystem system);
    private static ActorTransportAdapter();
    protected abstract virtual string get_ManagerName();
    protected abstract virtual Props get_ManagerProps();
    private Task`1<IActorRef> RegisterManager();
    protected virtual Task`1<IAssociationEventListener> InterceptListen(Address listenAddress, Task`1<IAssociationEventListener> listenerTask);
    protected virtual void InterceptAssociate(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusPromise);
    public virtual Task`1<bool> Shutdown();
}
public abstract class Akka.Remote.Transport.ActorTransportAdapterManager : UntypedActor {
    protected Queue`1<object> DelayedEvents;
    protected IAssociationEventListener AssociationListener;
    protected Address LocalAddress;
    protected long UniqueId;
    protected long NextId();
    protected virtual void OnReceive(object message);
    protected abstract virtual void Ready(object message);
}
internal abstract class Akka.Remote.Transport.AkkaPduCodec : object {
    protected ActorSystem System;
    protected ActorPathThreadLocalCache ActorPathCache;
    protected AkkaPduCodec(ActorSystem system);
    public abstract virtual IAkkaPdu DecodePdu(ByteString raw);
    public virtual ByteString EncodePdu(IAkkaPdu pdu);
    public abstract virtual ByteString ConstructPayload(ByteString payload);
    public abstract virtual ByteString ConstructAssociate(HandshakeInfo info);
    public abstract virtual ByteString ConstructDisassociate(DisassociateInfo reason);
    public abstract virtual ByteString ConstructHeartbeat();
    public abstract virtual AckAndMessage DecodeMessage(ByteString raw, IRemoteActorRefProvider provider, Address localAddress);
    public abstract virtual ByteString ConstructMessage(Address localAddress, IActorRef recipient, Payload serializedMessage, IActorRef senderOption, SeqNo seqOption, Ack ackOption);
    public abstract virtual ByteString ConstructPureAck(Ack ack);
}
internal class Akka.Remote.Transport.AkkaPduProtobuffCodec : AkkaPduCodec {
    private static ByteString HeartbeatPdu;
    private static ulong SeqUndefined;
    private ByteString DISASSOCIATE { get; }
    private ByteString DISASSOCIATE_SHUTTING_DOWN { get; }
    private ByteString DISASSOCIATE_QUARANTINED { get; }
    public AkkaPduProtobuffCodec(ActorSystem system);
    private static AkkaPduProtobuffCodec();
    public virtual IAkkaPdu DecodePdu(ByteString raw);
    public virtual ByteString ConstructPayload(ByteString payload);
    public virtual ByteString ConstructAssociate(HandshakeInfo info);
    public virtual ByteString ConstructDisassociate(DisassociateInfo reason);
    public virtual ByteString ConstructHeartbeat();
    public virtual AckAndMessage DecodeMessage(ByteString raw, IRemoteActorRefProvider provider, Address localAddress);
    private AcknowledgementInfo AckBuilder(Ack ack);
    public virtual ByteString ConstructMessage(Address localAddress, IActorRef recipient, Payload serializedMessage, IActorRef senderOption, SeqNo seqOption, Ack ackOption);
    public virtual ByteString ConstructPureAck(Ack ack);
    private IAkkaPdu DecodeControlPdu(AkkaControlMessage controlPdu);
    private ByteString get_DISASSOCIATE();
    private ByteString get_DISASSOCIATE_SHUTTING_DOWN();
    private ByteString get_DISASSOCIATE_QUARANTINED();
    private static ByteString ConstructControlMessagePdu(CommandType code, AkkaHandshakeInfo handshakeInfo);
    private static Address DecodeAddress(AddressData origin);
    private static ActorRefData SerializeActorRef(Address defaultAddress, IActorRef actorRef);
    private static AddressData SerializeAddress(Address address);
}
public class Akka.Remote.Transport.AkkaProtocolException : AkkaException {
    public AkkaProtocolException(string message, Exception cause);
    protected AkkaProtocolException(SerializationInfo info, StreamingContext context);
}
internal class Akka.Remote.Transport.AkkaProtocolHandle : AbstractTransportAdapterHandle {
    public HandshakeInfo HandshakeInfo;
    public IActorRef StateActor;
    public AkkaPduCodec Codec;
    public AkkaProtocolHandle(Address originalLocalAddress, Address originalRemoteAddress, TaskCompletionSource`1<IHandleEventListener> readHandlerCompletionSource, AssociationHandle wrappedHandle, HandshakeInfo handshakeInfo, IActorRef stateActor, AkkaPduCodec codec);
    public virtual bool Write(ByteString payload);
    public virtual void Disassociate();
    public void Disassociate(DisassociateInfo info);
    public virtual bool Equals(object obj);
    private bool Equals(AkkaProtocolHandle other);
    public virtual int GetHashCode();
}
internal class Akka.Remote.Transport.AkkaProtocolManager : ActorTransportAdapterManager {
    private Transport _wrappedTransport;
    private AkkaProtocolSettings _settings;
    private SupervisorStrategy _supervisor;
    public AkkaProtocolManager(Transport wrappedTransport, AkkaProtocolSettings settings);
    protected virtual SupervisorStrategy SupervisorStrategy();
    protected virtual void Ready(object message);
    private string ActorNameFor(Address remoteAddress);
    private void CreateOutboundStateActor(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusPromise, Nullable`1<int> refuseUid);
    private FailureDetector CreateTransportFailureDetector();
}
internal class Akka.Remote.Transport.AkkaProtocolTransport : ActorTransportAdapter {
    [CompilerGeneratedAttribute]
private AkkaProtocolSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private AkkaPduCodec <Codec>k__BackingField;
    private SchemeAugmenter _schemeAugmenter;
    private string _managerName;
    private Props _managerProps;
    public static AtomicCounter UniqueId;
    public AkkaProtocolSettings Settings { get; private set; }
    protected AkkaPduCodec Codec { get; private set; }
    protected SchemeAugmenter SchemeAugmenter { get; }
    protected string ManagerName { get; }
    protected Props ManagerProps { get; }
    public AkkaProtocolTransport(Transport wrappedTransport, ActorSystem system, AkkaProtocolSettings settings, AkkaPduCodec codec);
    private static AkkaProtocolTransport();
    [CompilerGeneratedAttribute]
public AkkaProtocolSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(AkkaProtocolSettings value);
    [CompilerGeneratedAttribute]
protected AkkaPduCodec get_Codec();
    [CompilerGeneratedAttribute]
private void set_Codec(AkkaPduCodec value);
    protected virtual SchemeAugmenter get_SchemeAugmenter();
    protected virtual string get_ManagerName();
    protected virtual Props get_ManagerProps();
    public virtual Task`1<bool> ManagementCommand(object message);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.AkkaProtocolTransport/<Associate>d__19")]
public Task`1<AkkaProtocolHandle> Associate(Address remoteAddress, Nullable`1<int> refuseUid);
}
internal class Akka.Remote.Transport.Associate : object {
    [CompilerGeneratedAttribute]
private HandshakeInfo <Info>k__BackingField;
    public HandshakeInfo Info { get; private set; }
    public Associate(HandshakeInfo info);
    [CompilerGeneratedAttribute]
public HandshakeInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(HandshakeInfo value);
}
public class Akka.Remote.Transport.AssociateAttempt : Activity {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    public Address LocalAddress { get; private set; }
    public Address RemoteAddress { get; private set; }
    public AssociateAttempt(Address localAddress, Address remoteAddress);
    [CompilerGeneratedAttribute]
public Address get_LocalAddress();
    [CompilerGeneratedAttribute]
private void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
}
internal class Akka.Remote.Transport.AssociatedWaitHandler : ProtocolStateData {
    [CompilerGeneratedAttribute]
private Task`1<IHandleEventListener> <HandlerListener>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationHandle <WrappedHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<ByteString> <Queue>k__BackingField;
    public Task`1<IHandleEventListener> HandlerListener { get; private set; }
    public AssociationHandle WrappedHandle { get; private set; }
    public Queue`1<ByteString> Queue { get; private set; }
    public AssociatedWaitHandler(Task`1<IHandleEventListener> handlerListener, AssociationHandle wrappedHandle, Queue`1<ByteString> queue);
    [CompilerGeneratedAttribute]
public Task`1<IHandleEventListener> get_HandlerListener();
    [CompilerGeneratedAttribute]
private void set_HandlerListener(Task`1<IHandleEventListener> value);
    [CompilerGeneratedAttribute]
public AssociationHandle get_WrappedHandle();
    [CompilerGeneratedAttribute]
private void set_WrappedHandle(AssociationHandle value);
    [CompilerGeneratedAttribute]
public Queue`1<ByteString> get_Queue();
    [CompilerGeneratedAttribute]
private void set_Queue(Queue`1<ByteString> value);
}
public class Akka.Remote.Transport.AssociateUnderlying : TransportOperation {
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<AssociationHandle> <StatusPromise>k__BackingField;
    public Address RemoteAddress { get; private set; }
    public TaskCompletionSource`1<AssociationHandle> StatusPromise { get; private set; }
    public AssociateUnderlying(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusPromise);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<AssociationHandle> get_StatusPromise();
    [CompilerGeneratedAttribute]
private void set_StatusPromise(TaskCompletionSource`1<AssociationHandle> value);
}
internal class Akka.Remote.Transport.AssociateUnderlyingRefuseUid : object {
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<AssociationHandle> <StatusCompletionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefuseUid>k__BackingField;
    public Address RemoteAddress { get; private set; }
    public TaskCompletionSource`1<AssociationHandle> StatusCompletionSource { get; private set; }
    public Nullable`1<int> RefuseUid { get; private set; }
    public AssociateUnderlyingRefuseUid(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusCompletionSource, Nullable`1<int> refuseUid);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<AssociationHandle> get_StatusCompletionSource();
    [CompilerGeneratedAttribute]
private void set_StatusCompletionSource(TaskCompletionSource`1<AssociationHandle> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RefuseUid();
    [CompilerGeneratedAttribute]
private void set_RefuseUid(Nullable`1<int> value);
}
public abstract class Akka.Remote.Transport.AssociationHandle : object {
    [CompilerGeneratedAttribute]
private Address <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<IHandleEventListener> <ReadHandlerSource>k__BackingField;
    public Address LocalAddress { get; protected set; }
    public Address RemoteAddress { get; protected set; }
    public TaskCompletionSource`1<IHandleEventListener> ReadHandlerSource { get; protected set; }
    protected AssociationHandle(Address localAddress, Address remoteAddress);
    [CompilerGeneratedAttribute]
public Address get_LocalAddress();
    [CompilerGeneratedAttribute]
protected void set_LocalAddress(Address value);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
protected void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<IHandleEventListener> get_ReadHandlerSource();
    [CompilerGeneratedAttribute]
protected void set_ReadHandlerSource(TaskCompletionSource`1<IHandleEventListener> value);
    public abstract virtual bool Write(ByteString payload);
    [ObsoleteAttribute("Use the method that states reasons to make sure disassociation reasons are logged.")]
public abstract virtual void Disassociate();
    public void Disassociate(string reason, ILoggingAdapter log);
    public virtual bool Equals(object obj);
    protected bool Equals(AssociationHandle other);
    public virtual int GetHashCode();
}
public class Akka.Remote.Transport.AssociationRegistry : object {
    private static ConcurrentDictionary`2<string, AssociationRegistry> registries;
    private ConcurrentStack`1<Activity> _activityLog;
    private ConcurrentDictionary`2<ValueTuple`2<Address, Address>, ValueTuple`2<IHandleEventListener, IHandleEventListener>> _listenersTable;
    private ConcurrentDictionary`2<Address, ValueTuple`2<TestTransport, Task`1<IAssociationEventListener>>> _transportTable;
    private static AssociationRegistry();
    public static AssociationRegistry Get(string key);
    public static void Clear();
    public IHandleEventListener RemoteListenerRelativeTo(TestAssociationHandle handle, ValueTuple`2<IHandleEventListener, IHandleEventListener> listenerPair);
    public void LogActivity(Activity activity);
    public IList`1<Activity> LogSnapshot();
    public void ClearLog();
    public void RegisterTransport(TestTransport transport, Task`1<IAssociationEventListener> associationEventListenerTask);
    public bool TransportsReady(Address[] addresses);
    public void RegisterListenerPair(ValueTuple`2<Address, Address> key, ValueTuple`2<IHandleEventListener, IHandleEventListener> listeners);
    public Option`1<ValueTuple`2<IHandleEventListener, IHandleEventListener>> DeregisterAssociation(ValueTuple`2<Address, Address> key);
    public bool ExistsAssociation(Address initiatorAddress, Address remoteAddress);
    public IHandleEventListener GetRemoteReadHandlerFor(TestAssociationHandle localHandle);
    public Option`1<ValueTuple`2<TestTransport, Task`1<IAssociationEventListener>>> TransportFor(Address address);
    public void Reset();
    [CompilerGeneratedAttribute]
private bool <TransportsReady>b__11_0(Address x);
}
internal enum Akka.Remote.Transport.AssociationState : Enum {
    public int value__;
    public static AssociationState Closed;
    public static AssociationState WaitHandshake;
    public static AssociationState Open;
}
public class Akka.Remote.Transport.Blackhole : ThrottleMode {
    [CompilerGeneratedAttribute]
private static Blackhole <Instance>k__BackingField;
    public static Blackhole Instance { get; }
    private static Blackhole();
    [CompilerGeneratedAttribute]
public static Blackhole get_Instance();
    public virtual ValueTuple`2<ThrottleMode, bool> TryConsumeTokens(long nanoTimeOfSend, int tokens);
    public virtual TimeSpan TimeToAvailable(long currentNanoTime, int tokens);
}
internal class Akka.Remote.Transport.Disassociate : object {
    [CompilerGeneratedAttribute]
private DisassociateInfo <Reason>k__BackingField;
    public DisassociateInfo Reason { get; private set; }
    public Disassociate(DisassociateInfo reason);
    [CompilerGeneratedAttribute]
public DisassociateInfo get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(DisassociateInfo value);
}
public class Akka.Remote.Transport.DisassociateAttempt : Activity {
    [CompilerGeneratedAttribute]
private Address <Requestor>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Remote>k__BackingField;
    public Address Requestor { get; private set; }
    public Address Remote { get; private set; }
    public DisassociateAttempt(Address requestor, Address remote);
    [CompilerGeneratedAttribute]
public Address get_Requestor();
    [CompilerGeneratedAttribute]
private void set_Requestor(Address value);
    [CompilerGeneratedAttribute]
public Address get_Remote();
    [CompilerGeneratedAttribute]
private void set_Remote(Address value);
}
public class Akka.Remote.Transport.Disassociated : object {
    internal DisassociateInfo Info;
    public Disassociated(DisassociateInfo info);
}
public enum Akka.Remote.Transport.DisassociateInfo : Enum {
    public int value__;
    public static DisassociateInfo Unknown;
    public static DisassociateInfo Shutdown;
    public static DisassociateInfo Quarantined;
}
public class Akka.Remote.Transport.DisassociateUnderlying : TransportOperation {
    [CompilerGeneratedAttribute]
private DisassociateInfo <Info>k__BackingField;
    public DisassociateInfo Info { get; private set; }
    public DisassociateUnderlying(DisassociateInfo info);
    [CompilerGeneratedAttribute]
public DisassociateInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(DisassociateInfo value);
}
internal class Akka.Remote.Transport.DotNetty.AkkaLoggingHandler : ChannelHandlerAdapter {
    private ILoggingAdapter _log;
    public AkkaLoggingHandler(ILoggingAdapter log);
    public virtual void ChannelRegistered(IChannelHandlerContext ctx);
    public virtual void ChannelUnregistered(IChannelHandlerContext ctx);
    public virtual void ChannelActive(IChannelHandlerContext ctx);
    public virtual void ChannelInactive(IChannelHandlerContext ctx);
    public virtual void ExceptionCaught(IChannelHandlerContext ctx, Exception cause);
    public virtual void UserEventTriggered(IChannelHandlerContext ctx, object evt);
    public virtual Task BindAsync(IChannelHandlerContext ctx, EndPoint localAddress);
    public virtual Task ConnectAsync(IChannelHandlerContext ctx, EndPoint remoteAddress, EndPoint localAddress);
    public virtual Task DisconnectAsync(IChannelHandlerContext ctx);
    public virtual Task CloseAsync(IChannelHandlerContext ctx);
    public virtual Task DeregisterAsync(IChannelHandlerContext ctx);
    public virtual void ChannelRead(IChannelHandlerContext ctx, object message);
    public virtual Task WriteAsync(IChannelHandlerContext ctx, object message);
    public virtual void Flush(IChannelHandlerContext ctx);
    private string Format(IChannelHandlerContext ctx, string eventName);
    private string Format(IChannelHandlerContext ctx, string eventName, object arg);
    private string Format(IChannelHandlerContext ctx, string eventName, object firstArg, object secondArg);
    private string FormatByteBuffer(IChannelHandlerContext ctx, string eventName, IByteBuffer msg);
    private string FormatByteBufferHolder(IChannelHandlerContext ctx, string eventName, IByteBufferHolder msg);
    private string FormatSimple(IChannelHandlerContext ctx, string eventName, object msg);
}
internal class Akka.Remote.Transport.DotNetty.BatchWriterSettings : object {
    public static int DefaultMaxPendingWrites;
    public static long DefaultMaxPendingBytes;
    public static TimeSpan DefaultFlushInterval;
    [CompilerGeneratedAttribute]
private bool <EnableBatching>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxExplicitFlushes>k__BackingField;
    public bool EnableBatching { get; }
    public int MaxExplicitFlushes { get; }
    public BatchWriterSettings(Config hocon);
    public BatchWriterSettings(Nullable`1<TimeSpan> maxDuration, bool enableBatching, int maxExplicitFlushes, long maxPendingBytes);
    private static BatchWriterSettings();
    [CompilerGeneratedAttribute]
public bool get_EnableBatching();
    [CompilerGeneratedAttribute]
public int get_MaxExplicitFlushes();
}
internal abstract class Akka.Remote.Transport.DotNetty.CommonHandlers : ChannelHandlerAdapter {
    protected DotNettyTransport Transport;
    protected ILoggingAdapter Log;
    protected CommonHandlers(DotNettyTransport transport, ILoggingAdapter log);
    public virtual void ChannelActive(IChannelHandlerContext context);
    public virtual void ChannelInactive(IChannelHandlerContext context);
    public virtual void ExceptionCaught(IChannelHandlerContext context, Exception exception);
    protected abstract virtual AssociationHandle CreateHandle(IChannel channel, Address localAddress, Address remoteAddress);
    protected abstract virtual void RegisterListener(IChannel channel, IHandleEventListener listener, object msg, IPEndPoint remoteAddress);
    protected void Init(IChannel channel, IPEndPoint remoteSocketAddress, Address remoteAddress, object msg, AssociationHandle& op);
}
public class Akka.Remote.Transport.DotNetty.DotNettySslSetup : Setup {
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressValidation>k__BackingField;
    public X509Certificate2 Certificate { get; }
    public bool SuppressValidation { get; }
    internal SslSettings Settings { get; }
    public DotNettySslSetup(X509Certificate2 certificate, bool suppressValidation);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public bool get_SuppressValidation();
    internal SslSettings get_Settings();
}
internal abstract class Akka.Remote.Transport.DotNetty.DotNettyTransport : Transport {
    internal ConcurrentSet`1<IChannel> ConnectionGroup;
    protected TaskCompletionSource`1<IAssociationEventListener> AssociationListenerPromise;
    protected ILoggingAdapter Log;
    protected Address modreq(System.Runtime.CompilerServices.IsVolatile) LocalAddress;
    protected internal IChannel modreq(System.Runtime.CompilerServices.IsVolatile) ServerChannel;
    private IEventLoopGroup _serverEventLoopGroup;
    private IEventLoopGroup _clientEventLoopGroup;
    [CompilerGeneratedAttribute]
private DotNettyTransportSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemeIdentifier>k__BackingField;
    public DotNettyTransportSettings Settings { get; }
    public string SchemeIdentifier { get; protected set; }
    public long MaximumPayloadBytes { get; }
    private TransportMode InternalTransport { get; }
    protected DotNettyTransport(ActorSystem system, Config config);
    [CompilerGeneratedAttribute]
public DotNettyTransportSettings get_Settings();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SchemeIdentifier();
    [CompilerGeneratedAttribute]
protected sealed virtual void set_SchemeIdentifier(string value);
    public virtual long get_MaximumPayloadBytes();
    private TransportMode get_InternalTransport();
    public sealed virtual bool IsResponsibleFor(Address remote);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.DotNettyTransport/<NewServer>d__20")]
protected Task`1<IChannel> NewServer(EndPoint listenAddress);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.DotNettyTransport/<Listen>d__21")]
public virtual Task`1<ValueTuple`2<Address, TaskCompletionSource`1<IAssociationEventListener>>> Listen();
    public virtual Task`1<AssociationHandle> Associate(Address remoteAddress);
    protected abstract virtual Task`1<AssociationHandle> AssociateInternal(Address remoteAddress);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.DotNettyTransport/<Shutdown>d__24")]
public virtual Task`1<bool> Shutdown();
    protected Bootstrap ClientFactory(Address remoteAddress);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.DotNettyTransport/<DnsToIPEndpoint>d__26")]
protected Task`1<IPEndPoint> DnsToIPEndpoint(DnsEndPoint dns);
    private void SetInitialChannelPipeline(IChannel channel);
    private void SetClientPipeline(IChannel channel, Address remoteAddress);
    private void SetServerPipeline(IChannel channel);
    private ServerBootstrap ServerFactory();
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.DotNettyTransport/<ResolveNameAsync>d__31")]
private Task`1<IPEndPoint> ResolveNameAsync(DnsEndPoint address);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.DotNettyTransport/<ResolveNameAsync>d__32")]
private Task`1<IPEndPoint> ResolveNameAsync(DnsEndPoint address, AddressFamily addressFamily);
    public static Address MapSocketToAddress(IPEndPoint socketAddress, string schemeIdentifier, string systemName, string hostName, Nullable`1<int> publicPort);
    private static string SafeMapHostName(string hostName);
    private static string SafeMapIPv6(IPAddress ip);
    public static EndPoint ToEndpoint(Address address);
    public static EndPoint AddressToSocketAddress(Address address);
}
internal class Akka.Remote.Transport.DotNetty.DotNettyTransportException : RemoteTransportException {
    public DotNettyTransportException(string message, Exception cause);
    protected DotNettyTransportException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akka.Remote.Transport.DotNetty.DotNettyTransportSettings : object {
    [CompilerGeneratedAttribute]
private TransportMode <TransportMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicHostname>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PublicPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ServerSocketWorkerPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClientSocketWorkerPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFrameSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SslSettings <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DnsUseIpv6>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TcpReuseAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TcpKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TcpNoDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Backlog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceIpFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReceiveBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SendBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WriteBufferHighWaterMark>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WriteBufferLowWaterMark>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BackwardsCompatibilityModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogTransport>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteOrder <ByteOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBufferPooling>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchWriterSettings <BatchWriterSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public TransportMode TransportMode { get; public set; }
    public bool EnableSsl { get; public set; }
    public TimeSpan ConnectTimeout { get; public set; }
    public string Hostname { get; public set; }
    public string PublicHostname { get; public set; }
    public int Port { get; public set; }
    public Nullable`1<int> PublicPort { get; public set; }
    public int ServerSocketWorkerPoolSize { get; public set; }
    public int ClientSocketWorkerPoolSize { get; public set; }
    public int MaxFrameSize { get; public set; }
    public SslSettings Ssl { get; public set; }
    public bool DnsUseIpv6 { get; public set; }
    public bool TcpReuseAddr { get; public set; }
    public bool TcpKeepAlive { get; public set; }
    public bool TcpNoDelay { get; public set; }
    public int Backlog { get; public set; }
    public bool EnforceIpFamily { get; public set; }
    public Nullable`1<int> ReceiveBufferSize { get; public set; }
    public Nullable`1<int> SendBufferSize { get; public set; }
    public Nullable`1<int> WriteBufferHighWaterMark { get; public set; }
    public Nullable`1<int> WriteBufferLowWaterMark { get; public set; }
    public bool BackwardsCompatibilityModeEnabled { get; public set; }
    public bool LogTransport { get; public set; }
    public ByteOrder ByteOrder { get; public set; }
    public bool EnableBufferPooling { get; public set; }
    public BatchWriterSettings BatchWriterSettings { get; public set; }
    public DotNettyTransportSettings(TransportMode TransportMode, bool EnableSsl, TimeSpan ConnectTimeout, string Hostname, string PublicHostname, int Port, Nullable`1<int> PublicPort, int ServerSocketWorkerPoolSize, int ClientSocketWorkerPoolSize, int MaxFrameSize, SslSettings Ssl, bool DnsUseIpv6, bool TcpReuseAddr, bool TcpKeepAlive, bool TcpNoDelay, int Backlog, bool EnforceIpFamily, Nullable`1<int> ReceiveBufferSize, Nullable`1<int> SendBufferSize, Nullable`1<int> WriteBufferHighWaterMark, Nullable`1<int> WriteBufferLowWaterMark, bool BackwardsCompatibilityModeEnabled, bool LogTransport, ByteOrder ByteOrder, bool EnableBufferPooling, BatchWriterSettings BatchWriterSettings);
    [CompilerGeneratedAttribute]
private DotNettyTransportSettings(DotNettyTransportSettings original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public TransportMode get_TransportMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TransportMode(TransportMode value);
    [CompilerGeneratedAttribute]
public bool get_EnableSsl();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableSsl(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Hostname(string value);
    [CompilerGeneratedAttribute]
public string get_PublicHostname();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PublicHostname(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Port(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PublicPort();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PublicPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_ServerSocketWorkerPoolSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ServerSocketWorkerPoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_ClientSocketWorkerPoolSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClientSocketWorkerPoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxFrameSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxFrameSize(int value);
    [CompilerGeneratedAttribute]
public SslSettings get_Ssl();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Ssl(SslSettings value);
    [CompilerGeneratedAttribute]
public bool get_DnsUseIpv6();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DnsUseIpv6(bool value);
    [CompilerGeneratedAttribute]
public bool get_TcpReuseAddr();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TcpReuseAddr(bool value);
    [CompilerGeneratedAttribute]
public bool get_TcpKeepAlive();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TcpKeepAlive(bool value);
    [CompilerGeneratedAttribute]
public bool get_TcpNoDelay();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TcpNoDelay(bool value);
    [CompilerGeneratedAttribute]
public int get_Backlog();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Backlog(int value);
    [CompilerGeneratedAttribute]
public bool get_EnforceIpFamily();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnforceIpFamily(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReceiveBufferSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SendBufferSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SendBufferSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WriteBufferHighWaterMark();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WriteBufferHighWaterMark(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WriteBufferLowWaterMark();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WriteBufferLowWaterMark(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_BackwardsCompatibilityModeEnabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BackwardsCompatibilityModeEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_LogTransport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogTransport(bool value);
    [CompilerGeneratedAttribute]
public ByteOrder get_ByteOrder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ByteOrder(ByteOrder value);
    [CompilerGeneratedAttribute]
public bool get_EnableBufferPooling();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableBufferPooling(bool value);
    [CompilerGeneratedAttribute]
public BatchWriterSettings get_BatchWriterSettings();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BatchWriterSettings(BatchWriterSettings value);
    public static DotNettyTransportSettings Create(ActorSystem system);
    private static bool ResolveTcpReuseAddrOption(string hoconTcpReuseAddr);
    public static DotNettyTransportSettings Create(Config config, SslSettings sslSettings);
    private static Nullable`1<int> ToNullableInt(Nullable`1<long> value);
    private static int ComputeWorkerPoolSize(Config config);
    internal DotNettyTransportSettings Validate();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DotNettyTransportSettings left, DotNettyTransportSettings right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DotNettyTransportSettings left, DotNettyTransportSettings right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DotNettyTransportSettings other);
    [CompilerGeneratedAttribute]
public DotNettyTransportSettings <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(TransportMode& TransportMode, Boolean& EnableSsl, TimeSpan& ConnectTimeout, String& Hostname, String& PublicHostname, Int32& Port, Nullable`1& PublicPort, Int32& ServerSocketWorkerPoolSize, Int32& ClientSocketWorkerPoolSize, Int32& MaxFrameSize, SslSettings& Ssl, Boolean& DnsUseIpv6, Boolean& TcpReuseAddr, Boolean& TcpKeepAlive, Boolean& TcpNoDelay, Int32& Backlog, Boolean& EnforceIpFamily, Nullable`1& ReceiveBufferSize, Nullable`1& SendBufferSize, Nullable`1& WriteBufferHighWaterMark, Nullable`1& WriteBufferLowWaterMark, Boolean& BackwardsCompatibilityModeEnabled, Boolean& LogTransport, ByteOrder& ByteOrder, Boolean& EnableBufferPooling, BatchWriterSettings& BatchWriterSettings);
}
internal class Akka.Remote.Transport.DotNetty.FlushConsolidationHandler : ChannelDuplexHandler {
    public static int DefaultExplicitFlushAfterFlushes;
    [CompilerGeneratedAttribute]
private int <ExplicitFlushAfterFlushes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConsolidateWhenNoReadInProgress>k__BackingField;
    private int _flushPendingCount;
    private bool _readInProgress;
    private IChannelHandlerContext _context;
    private CancellationTokenSource _nextScheduledFlush;
    private static Func`2<object, bool> FlushOp;
    public int ExplicitFlushAfterFlushes { get; }
    public bool ConsolidateWhenNoReadInProgress { get; }
    public FlushConsolidationHandler(int explicitFlushAfterFlushes);
    public FlushConsolidationHandler(int explicitFlushAfterFlushes, bool consolidateWhenNoReadInProgress);
    private static FlushConsolidationHandler();
    [CompilerGeneratedAttribute]
public int get_ExplicitFlushAfterFlushes();
    [CompilerGeneratedAttribute]
public bool get_ConsolidateWhenNoReadInProgress();
    private static bool TryFlush(FlushConsolidationHandler handler);
    public virtual void HandlerAdded(IChannelHandlerContext context);
    public virtual void Flush(IChannelHandlerContext context);
    public virtual void ChannelReadComplete(IChannelHandlerContext context);
    public virtual void ChannelRead(IChannelHandlerContext context, object message);
    public virtual void ExceptionCaught(IChannelHandlerContext context, Exception exception);
    public virtual Task DisconnectAsync(IChannelHandlerContext context);
    public virtual Task CloseAsync(IChannelHandlerContext context);
    public virtual void ChannelWritabilityChanged(IChannelHandlerContext context);
    public virtual void HandlerRemoved(IChannelHandlerContext context);
    private void ResetReadAndFlushIfNeeded(IChannelHandlerContext ctx);
    private void FlushIfNeeded(IChannelHandlerContext ctx);
    private void FlushNow(IChannelHandlerContext ctx);
    private void ScheduleFlush(IChannelHandlerContext ctx);
    private void CancelScheduledFlush();
}
internal class Akka.Remote.Transport.DotNetty.HeliosBackwardsCompatabilityLengthFramePrepender : LengthFieldPrepender {
    private List`1<object> _temporaryOutput;
    public HeliosBackwardsCompatabilityLengthFramePrepender(int lengthFieldLength, bool lengthFieldIncludesLengthFieldLength);
    protected virtual void Encode(IChannelHandlerContext context, IByteBuffer message, List`1<object> output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Akka.Remote.Transport.DotNetty.SslSettings : object {
    public static SslSettings Empty;
    [NullableAttribute("2")]
public X509Certificate2 Certificate;
    public bool SuppressValidation;
    public SslSettings(X509Certificate2 certificate, bool suppressValidation);
    private SslSettings(string certificateThumbprint, string storeName, StoreLocation storeLocation, bool suppressValidation);
    private SslSettings(string certificatePath, string certificatePassword, X509KeyStorageFlags flags, bool suppressValidation);
    private static SslSettings();
    public static SslSettings CreateOrDefault(Config config, SslSettings default);
    private static SslSettings Create(Config config);
    private static StoreLocation ParseStoreLocationName(string str);
    private static X509KeyStorageFlags ParseKeyStorageFlag(string str);
}
internal class Akka.Remote.Transport.DotNetty.TcpAssociationHandle : AssociationHandle {
    private IChannel _channel;
    public TcpAssociationHandle(Address localAddress, Address remoteAddress, DotNettyTransport transport, IChannel channel);
    public virtual bool Write(ByteString payload);
    private static IByteBuffer ToByteBuffer(IChannel channel, ByteString payload);
    public virtual void Disassociate();
}
internal class Akka.Remote.Transport.DotNetty.TcpClientHandler : TcpHandlers {
    private TaskCompletionSource`1<AssociationHandle> _statusPromise;
    private Address _remoteAddress;
    public Task`1<AssociationHandle> StatusFuture { get; }
    public TcpClientHandler(DotNettyTransport transport, ILoggingAdapter log, Address remoteAddress);
    public Task`1<AssociationHandle> get_StatusFuture();
    public virtual void ChannelActive(IChannelHandlerContext context);
    private void InitOutbound(IChannel channel, IPEndPoint socketAddress, object msg);
}
internal abstract class Akka.Remote.Transport.DotNetty.TcpHandlers : CommonHandlers {
    private IHandleEventListener _listener;
    protected TcpHandlers(DotNettyTransport transport, ILoggingAdapter log);
    protected void NotifyListener(IHandleEvent msg);
    protected virtual void RegisterListener(IChannel channel, IHandleEventListener listener, object msg, IPEndPoint remoteAddress);
    protected virtual AssociationHandle CreateHandle(IChannel channel, Address localAddress, Address remoteAddress);
    public virtual void ChannelInactive(IChannelHandlerContext context);
    public virtual void ChannelRead(IChannelHandlerContext context, object message);
    public virtual void ExceptionCaught(IChannelHandlerContext context, Exception exception);
}
internal class Akka.Remote.Transport.DotNetty.TcpServerHandler : TcpHandlers {
    private Task`1<IAssociationEventListener> _associationEventListener;
    public TcpServerHandler(DotNettyTransport transport, ILoggingAdapter log, Task`1<IAssociationEventListener> associationEventListener);
    public virtual void ChannelActive(IChannelHandlerContext context);
    private void InitInbound(IChannel channel, IPEndPoint socketAddress, object msg);
}
internal class Akka.Remote.Transport.DotNetty.TcpTransport : DotNettyTransport {
    public TcpTransport(ActorSystem system, Config config);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.TcpTransport/<AssociateInternal>d__1")]
protected virtual Task`1<AssociationHandle> AssociateInternal(Address remoteAddress);
    private static Exception HandleConnectException(Address remoteAddress, ConnectException cause, AggregateException e);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.DotNetty.TcpTransport/<MapEndpointAsync>d__3")]
private Task`1<IPEndPoint> MapEndpointAsync(EndPoint socketAddress);
}
internal enum Akka.Remote.Transport.DotNetty.TransportMode : Enum {
    public int value__;
    public static TransportMode Tcp;
    public static TransportMode Udp;
}
public class Akka.Remote.Transport.FailureInjectorException : AkkaException {
    [CompilerGeneratedAttribute]
private string <Msg>k__BackingField;
    public string Msg { get; private set; }
    public FailureInjectorException(string msg);
    private FailureInjectorException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Msg();
    [CompilerGeneratedAttribute]
private void set_Msg(string value);
}
internal class Akka.Remote.Transport.FailureInjectorHandle : AbstractTransportAdapterHandle {
    private FailureInjectorTransportAdapter _gremlinAdapter;
    private IHandleEventListener modreq(System.Runtime.CompilerServices.IsVolatile) _upstreamListener;
    public FailureInjectorHandle(AssociationHandle wrappedHandle, FailureInjectorTransportAdapter gremlinAdapter);
    public virtual bool Write(ByteString payload);
    public virtual void Disassociate();
    public sealed virtual void Notify(IHandleEvent ev);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Task`1<IHandleEventListener> tr);
}
public class Akka.Remote.Transport.FailureInjectorProvider : object {
    public sealed virtual Transport Create(Transport wrappedTransport, ExtendedActorSystem system);
}
public class Akka.Remote.Transport.FailureInjectorTransportAdapter : AbstractTransportAdapter {
    public static string FailureInjectorSchemeIdentifier;
    public ExtendedActorSystem ExtendedActorSystem;
    private ILoggingAdapter _log;
    private bool _shouldDebugLog;
    private IAssociationEventListener modreq(System.Runtime.CompilerServices.IsVolatile) _upstreamListener;
    private ConcurrentDictionary`2<Address, IGremlinMode> addressChaosTable;
    private IGremlinMode modreq(System.Runtime.CompilerServices.IsVolatile) _allMode;
    protected int MaximumOverhead;
    private static SchemeAugmenter _augmenter;
    private Random Rng { get; }
    protected SchemeAugmenter SchemeAugmenter { get; }
    public FailureInjectorTransportAdapter(Transport wrappedTransport, ExtendedActorSystem extendedActorSystem);
    private static FailureInjectorTransportAdapter();
    private Random get_Rng();
    protected virtual SchemeAugmenter get_SchemeAugmenter();
    public virtual Task`1<bool> ManagementCommand(object message);
    protected virtual Task`1<IAssociationEventListener> InterceptListen(Address listenAddress, Task`1<IAssociationEventListener> listenerTask);
    protected virtual void InterceptAssociate(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusPromise);
    public sealed virtual void Notify(IAssociationEvent ev);
    public bool ShouldDropInbound(Address remoteAddress, object instance, string debugMessage);
    public bool ShouldDropOutbound(Address remoteAddress, object instance, string debugMessage);
    private IAssociationEvent InterceptInboundAssociation(IAssociationEvent ev);
    private static Address NakedAddress(Address address);
    private IGremlinMode ChaosMode(Address remoteAddress);
    [CompilerGeneratedAttribute]
private void <InterceptListen>b__21_0(Task`1<IAssociationEventListener> tr);
}
internal class Akka.Remote.Transport.ForbiddenUidReason : object {
}
public class Akka.Remote.Transport.ForceDisassociate : object {
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    public Address Address { get; private set; }
    public ForceDisassociate(Address address);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(Address value);
}
public class Akka.Remote.Transport.ForceDisassociateAck : object {
    [CompilerGeneratedAttribute]
private static ForceDisassociateAck <Instance>k__BackingField;
    public static ForceDisassociateAck Instance { get; }
    private static ForceDisassociateAck();
    [CompilerGeneratedAttribute]
public static ForceDisassociateAck get_Instance();
}
public class Akka.Remote.Transport.ForceDisassociateExplicitly : object {
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private DisassociateInfo <Reason>k__BackingField;
    public Address Address { get; private set; }
    public DisassociateInfo Reason { get; private set; }
    public ForceDisassociateExplicitly(Address address, DisassociateInfo reason);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(Address value);
    [CompilerGeneratedAttribute]
public DisassociateInfo get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(DisassociateInfo value);
}
internal class Akka.Remote.Transport.HandleListenerRegistered : object {
    [CompilerGeneratedAttribute]
private IHandleEventListener <Listener>k__BackingField;
    public IHandleEventListener Listener { get; private set; }
    public HandleListenerRegistered(IHandleEventListener listener);
    [CompilerGeneratedAttribute]
public IHandleEventListener get_Listener();
    [CompilerGeneratedAttribute]
private void set_Listener(IHandleEventListener value);
}
internal class Akka.Remote.Transport.HandleMsg : object {
    [CompilerGeneratedAttribute]
private AssociationHandle <Handle>k__BackingField;
    public AssociationHandle Handle { get; private set; }
    public HandleMsg(AssociationHandle handle);
    [CompilerGeneratedAttribute]
public AssociationHandle get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(AssociationHandle value);
}
internal class Akka.Remote.Transport.HandshakeInfo : object {
    [CompilerGeneratedAttribute]
private Address <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uid>k__BackingField;
    public Address Origin { get; private set; }
    public int Uid { get; private set; }
    public HandshakeInfo(Address origin, int uid);
    [CompilerGeneratedAttribute]
public Address get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(Address value);
    [CompilerGeneratedAttribute]
public int get_Uid();
    [CompilerGeneratedAttribute]
private void set_Uid(int value);
    public virtual bool Equals(object obj);
    private bool Equals(HandshakeInfo other);
    public virtual int GetHashCode();
}
internal class Akka.Remote.Transport.HandshakeTimer : object {
}
internal class Akka.Remote.Transport.Heartbeat : object {
}
internal class Akka.Remote.Transport.HeartbeatTimer : object {
}
internal interface Akka.Remote.Transport.IAkkaPdu {
}
public interface Akka.Remote.Transport.IAssociationEvent {
}
public interface Akka.Remote.Transport.IAssociationEventListener {
    public abstract virtual void Notify(IAssociationEvent ev);
}
public interface Akka.Remote.Transport.IHandleEvent {
}
public interface Akka.Remote.Transport.IHandleEventListener {
    public abstract virtual void Notify(IHandleEvent ev);
}
public class Akka.Remote.Transport.InboundAssociation : object {
    [CompilerGeneratedAttribute]
private AssociationHandle <Association>k__BackingField;
    public AssociationHandle Association { get; private set; }
    public InboundAssociation(AssociationHandle association);
    [CompilerGeneratedAttribute]
public AssociationHandle get_Association();
    [CompilerGeneratedAttribute]
private void set_Association(AssociationHandle value);
}
public class Akka.Remote.Transport.InboundPayload : object {
    [CompilerGeneratedAttribute]
private ByteString <Payload>k__BackingField;
    public ByteString Payload { get; private set; }
    public InboundPayload(ByteString payload);
    [CompilerGeneratedAttribute]
public ByteString get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(ByteString value);
    public virtual string ToString();
}
internal class Akka.Remote.Transport.InboundUnassociated : InitialProtocolStateData {
    [CompilerGeneratedAttribute]
private IAssociationEventListener <AssociationEventListener>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationHandle <WrappedHandle>k__BackingField;
    public IAssociationEventListener AssociationEventListener { get; private set; }
    public AssociationHandle WrappedHandle { get; private set; }
    public InboundUnassociated(IAssociationEventListener associationEventListener, AssociationHandle wrappedHandle);
    [CompilerGeneratedAttribute]
public IAssociationEventListener get_AssociationEventListener();
    [CompilerGeneratedAttribute]
private void set_AssociationEventListener(IAssociationEventListener value);
    [CompilerGeneratedAttribute]
public AssociationHandle get_WrappedHandle();
    [CompilerGeneratedAttribute]
private void set_WrappedHandle(AssociationHandle value);
}
internal abstract class Akka.Remote.Transport.InitialProtocolStateData : ProtocolStateData {
}
public class Akka.Remote.Transport.InvalidAssociationException : AkkaException {
    public InvalidAssociationException(string message, Exception cause);
    protected InvalidAssociationException(SerializationInfo info, StreamingContext context);
}
public interface Akka.Remote.Transport.ITransportAdapterProvider {
    public abstract virtual Transport Create(Transport wrappedTransport, ExtendedActorSystem system);
}
public class Akka.Remote.Transport.ListenAttempt : Activity {
    [CompilerGeneratedAttribute]
private Address <BoundAddress>k__BackingField;
    public Address BoundAddress { get; private set; }
    public ListenAttempt(Address boundAddress);
    [CompilerGeneratedAttribute]
public Address get_BoundAddress();
    [CompilerGeneratedAttribute]
private void set_BoundAddress(Address value);
}
internal class Akka.Remote.Transport.ListenerReady : ProtocolStateData {
    [CompilerGeneratedAttribute]
private IHandleEventListener <Listener>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationHandle <WrappedHandle>k__BackingField;
    public IHandleEventListener Listener { get; private set; }
    public AssociationHandle WrappedHandle { get; private set; }
    public ListenerReady(IHandleEventListener listener, AssociationHandle wrappedHandle);
    [CompilerGeneratedAttribute]
public IHandleEventListener get_Listener();
    [CompilerGeneratedAttribute]
private void set_Listener(IHandleEventListener value);
    [CompilerGeneratedAttribute]
public AssociationHandle get_WrappedHandle();
    [CompilerGeneratedAttribute]
private void set_WrappedHandle(AssociationHandle value);
}
public class Akka.Remote.Transport.ListenerRegistered : TransportOperation {
    [CompilerGeneratedAttribute]
private IAssociationEventListener <Listener>k__BackingField;
    public IAssociationEventListener Listener { get; private set; }
    public ListenerRegistered(IAssociationEventListener listener);
    [CompilerGeneratedAttribute]
public IAssociationEventListener get_Listener();
    [CompilerGeneratedAttribute]
private void set_Listener(IAssociationEventListener value);
}
public class Akka.Remote.Transport.ListenUnderlying : TransportOperation {
    [CompilerGeneratedAttribute]
private Address <ListenAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<IAssociationEventListener> <UpstreamListener>k__BackingField;
    public Address ListenAddress { get; private set; }
    public Task`1<IAssociationEventListener> UpstreamListener { get; private set; }
    public ListenUnderlying(Address listenAddress, Task`1<IAssociationEventListener> upstreamListener);
    [CompilerGeneratedAttribute]
public Address get_ListenAddress();
    [CompilerGeneratedAttribute]
private void set_ListenAddress(Address value);
    [CompilerGeneratedAttribute]
public Task`1<IAssociationEventListener> get_UpstreamListener();
    [CompilerGeneratedAttribute]
private void set_UpstreamListener(Task`1<IAssociationEventListener> value);
}
internal class Akka.Remote.Transport.Message : object {
    [CompilerGeneratedAttribute]
private IInternalActorRef <Recipient>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <RecipientAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Payload <SerializedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IActorRef <SenderOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private SeqNo <Seq>k__BackingField;
    public IInternalActorRef Recipient { get; private set; }
    public Address RecipientAddress { get; private set; }
    public Payload SerializedMessage { get; private set; }
    public IActorRef SenderOptional { get; private set; }
    public bool ReliableDeliveryEnabled { get; }
    public SeqNo Seq { get; private set; }
    public Message(IInternalActorRef recipient, Address recipientAddress, Payload serializedMessage, IActorRef senderOptional, SeqNo seq);
    [CompilerGeneratedAttribute]
public IInternalActorRef get_Recipient();
    [CompilerGeneratedAttribute]
private void set_Recipient(IInternalActorRef value);
    [CompilerGeneratedAttribute]
public Address get_RecipientAddress();
    [CompilerGeneratedAttribute]
private void set_RecipientAddress(Address value);
    [CompilerGeneratedAttribute]
public Payload get_SerializedMessage();
    [CompilerGeneratedAttribute]
private void set_SerializedMessage(Payload value);
    [CompilerGeneratedAttribute]
public IActorRef get_SenderOptional();
    [CompilerGeneratedAttribute]
private void set_SenderOptional(IActorRef value);
    public bool get_ReliableDeliveryEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual SeqNo get_Seq();
    [CompilerGeneratedAttribute]
private void set_Seq(SeqNo value);
}
internal class Akka.Remote.Transport.OutboundUnassociated : InitialProtocolStateData {
    [CompilerGeneratedAttribute]
private Address <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<AssociationHandle> <StatusCompletionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Transport <Transport>k__BackingField;
    public Address RemoteAddress { get; private set; }
    public TaskCompletionSource`1<AssociationHandle> StatusCompletionSource { get; private set; }
    public Transport Transport { get; private set; }
    public OutboundUnassociated(Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusCompletionSource, Transport transport);
    [CompilerGeneratedAttribute]
public Address get_RemoteAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteAddress(Address value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<AssociationHandle> get_StatusCompletionSource();
    [CompilerGeneratedAttribute]
private void set_StatusCompletionSource(TaskCompletionSource`1<AssociationHandle> value);
    [CompilerGeneratedAttribute]
public Transport get_Transport();
    [CompilerGeneratedAttribute]
private void set_Transport(Transport value);
}
internal class Akka.Remote.Transport.OutboundUnderlyingAssociated : ProtocolStateData {
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<AssociationHandle> <StatusCompletionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationHandle <WrappedHandle>k__BackingField;
    public TaskCompletionSource`1<AssociationHandle> StatusCompletionSource { get; private set; }
    public AssociationHandle WrappedHandle { get; private set; }
    public OutboundUnderlyingAssociated(TaskCompletionSource`1<AssociationHandle> statusCompletionSource, AssociationHandle wrappedHandle);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<AssociationHandle> get_StatusCompletionSource();
    [CompilerGeneratedAttribute]
private void set_StatusCompletionSource(TaskCompletionSource`1<AssociationHandle> value);
    [CompilerGeneratedAttribute]
public AssociationHandle get_WrappedHandle();
    [CompilerGeneratedAttribute]
private void set_WrappedHandle(AssociationHandle value);
}
internal class Akka.Remote.Transport.Payload : object {
    [CompilerGeneratedAttribute]
private ByteString <Bytes>k__BackingField;
    public ByteString Bytes { get; private set; }
    public Payload(ByteString bytes);
    [CompilerGeneratedAttribute]
public ByteString get_Bytes();
    [CompilerGeneratedAttribute]
private void set_Bytes(ByteString value);
}
internal class Akka.Remote.Transport.PduCodecException : AkkaException {
    public PduCodecException(string message, Exception cause);
    protected PduCodecException(SerializationInfo info, StreamingContext context);
}
internal class Akka.Remote.Transport.ProtocolStateActor : FSM`2<AssociationState, ProtocolStateData> {
    private ILoggingAdapter _log;
    private InitialProtocolStateData _initialData;
    private HandshakeInfo _localHandshakeInfo;
    private Nullable`1<int> _refuseUid;
    private AkkaProtocolSettings _settings;
    private Address _localAddress;
    private AkkaPduCodec _codec;
    private FailureDetector _failureDetector;
    private static string HandshakeTimerKey;
    public ProtocolStateActor(HandshakeInfo handshakeInfo, Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusCompletionSource, Transport transport, AkkaProtocolSettings settings, AkkaPduCodec codec, FailureDetector failureDetector, Nullable`1<int> refuseUid);
    public ProtocolStateActor(HandshakeInfo handshakeInfo, AssociationHandle wrappedHandle, IAssociationEventListener associationEventListener, AkkaProtocolSettings settings, AkkaPduCodec codec, FailureDetector failureDetector);
    private ProtocolStateActor(InitialProtocolStateData initialData, HandshakeInfo localHandshakeInfo, AkkaProtocolSettings settings, AkkaPduCodec codec, FailureDetector failureDetector, Nullable`1<int> refuseUid);
    private void InitializeFSM();
    private static string DisassociationReason(Reason reason);
    protected virtual void LogTermination(Reason reason);
    protected virtual void PostStop();
    private static Exception DisassociateException(DisassociateInfo info);
    private State`2<AssociationState, ProtocolStateData> HandleTimers(AssociationHandle wrappedHandle);
    private void ListenForListenerRegistration(TaskCompletionSource`1<IHandleEventListener> readHandlerSource);
    private Task`1<IHandleEventListener> NotifyOutboundHandler(AssociationHandle wrappedHandle, HandshakeInfo handshakeInfo, TaskCompletionSource`1<AssociationHandle> statusPromise);
    private Task`1<IHandleEventListener> NotifyInboundHandler(AssociationHandle wrappedHandle, HandshakeInfo handshakeInfo, IAssociationEventListener associationEventListener);
    private IAkkaPdu DecodePdu(ByteString pdu);
    private void InitHeartbeatTimer();
    private void InitHandshakeTimer();
    private bool SendAssociate(AssociationHandle wrappedHandle, HandshakeInfo info);
    private void SendDisassociate(AssociationHandle wrappedHandle, DisassociateInfo info);
    private bool SendHeartBeat(AssociationHandle wrappedHandle);
    private void PublishError(UnderlyingTransportError transportError);
    public static Props OutboundProps(HandshakeInfo handshakeInfo, Address remoteAddress, TaskCompletionSource`1<AssociationHandle> statusCompletionSource, Transport transport, AkkaProtocolSettings settings, AkkaPduCodec codec, FailureDetector failureDetector, Nullable`1<int> refuseUid);
    public static Props InboundProps(HandshakeInfo handshakeInfo, AssociationHandle wrappedHandle, IAssociationEventListener associationEventListener, AkkaProtocolSettings settings, AkkaPduCodec codec, FailureDetector failureDetector);
    [CompilerGeneratedAttribute]
private State`2<AssociationState, ProtocolStateData> <InitializeFSM>b__12_0(Event`1<ProtocolStateData> fsmEvent);
    [CompilerGeneratedAttribute]
private State`2<AssociationState, ProtocolStateData> <InitializeFSM>b__12_1(Event`1<ProtocolStateData> event);
    [CompilerGeneratedAttribute]
private State`2<AssociationState, ProtocolStateData> <InitializeFSM>b__12_2(Event`1<ProtocolStateData> event);
    [CompilerGeneratedAttribute]
internal static AssociationHandle <InitializeFSM>g__GetHandle|12_4(ProtocolStateData data, <>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
private void <InitializeFSM>b__12_3(StopEvent`2<AssociationState, ProtocolStateData> event);
}
internal abstract class Akka.Remote.Transport.ProtocolStateData : object {
}
internal class Akka.Remote.Transport.ProtocolTransportAddressPair : object {
    [CompilerGeneratedAttribute]
private AkkaProtocolTransport <ProtocolTransport>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    public AkkaProtocolTransport ProtocolTransport { get; private set; }
    public Address Address { get; private set; }
    public ProtocolTransportAddressPair(AkkaProtocolTransport protocolTransport, Address address);
    [CompilerGeneratedAttribute]
public AkkaProtocolTransport get_ProtocolTransport();
    [CompilerGeneratedAttribute]
private void set_ProtocolTransport(AkkaProtocolTransport value);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(Address value);
}
public class Akka.Remote.Transport.SchemeAugmenter : object {
    public string AddedSchemeIdentifier;
    public SchemeAugmenter(string addedSchemeIdentifier);
    public string AugmentScheme(string originalScheme);
    public Address AugmentScheme(Address address);
    public string RemoveScheme(string scheme);
    public Address RemoveScheme(Address address);
}
public class Akka.Remote.Transport.SetThrottle : object {
    private Address _address;
    private Direction _direction;
    private ThrottleMode _mode;
    public Address Address { get; }
    public Direction Direction { get; }
    public ThrottleMode Mode { get; }
    public SetThrottle(Address address, Direction direction, ThrottleMode mode);
    public Address get_Address();
    public Direction get_Direction();
    public ThrottleMode get_Mode();
    private bool Equals(SetThrottle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SetThrottle left, SetThrottle right);
    public static bool op_Inequality(SetThrottle left, SetThrottle right);
}
public class Akka.Remote.Transport.SetThrottleAck : object {
    [CompilerGeneratedAttribute]
private static SetThrottleAck <Instance>k__BackingField;
    public static SetThrottleAck Instance { get; }
    private static SetThrottleAck();
    [CompilerGeneratedAttribute]
public static SetThrottleAck get_Instance();
}
public class Akka.Remote.Transport.ShutdownAttempt : Activity {
    [CompilerGeneratedAttribute]
private Address <BoundAddress>k__BackingField;
    public Address BoundAddress { get; private set; }
    public ShutdownAttempt(Address boundAddress);
    [CompilerGeneratedAttribute]
public Address get_BoundAddress();
    [CompilerGeneratedAttribute]
private void set_BoundAddress(Address value);
}
public class Akka.Remote.Transport.SwitchableLoggedBehavior`2 : object {
    private ConcurrentStack`1<Func`2<TIn, Task`1<TOut>>> _behaviorStack;
    [CompilerGeneratedAttribute]
private Func`2<TIn, Task`1<TOut>> <DefaultBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TIn> <LogCallback>k__BackingField;
    public Func`2<TIn, Task`1<TOut>> DefaultBehavior { get; }
    public Action`1<TIn> LogCallback { get; }
    public Func`2<TIn, Task`1<TOut>> CurrentBehavior { get; }
    public SwitchableLoggedBehavior`2(Func`2<TIn, Task`1<TOut>> defaultBehavior, Action`1<TIn> logCallback);
    [CompilerGeneratedAttribute]
public Func`2<TIn, Task`1<TOut>> get_DefaultBehavior();
    [CompilerGeneratedAttribute]
public Action`1<TIn> get_LogCallback();
    public Func`2<TIn, Task`1<TOut>> get_CurrentBehavior();
    public void Push(Func`2<TIn, Task`1<TOut>> behavior);
    public void PushConstant(TOut result);
    public void PushError(Exception e);
    public TaskCompletionSource`1<bool> PushDelayed();
    public void Pop();
    public Task`1<TOut> Apply(TIn param);
}
public class Akka.Remote.Transport.TestAssociationHandle : AssociationHandle {
    private TestTransport _transport;
    public bool Inbound;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) Writeable;
    public ValueTuple`2<Address, Address> Key { get; }
    public TestAssociationHandle(Address localAddress, Address remoteAddress, TestTransport transport, bool inbound);
    public ValueTuple`2<Address, Address> get_Key();
    public virtual bool Write(ByteString payload);
    public virtual void Disassociate();
}
public class Akka.Remote.Transport.TestTransport : Transport {
    private TaskCompletionSource`1<IAssociationEventListener> _associationListenerPromise;
    private AssociationRegistry _registry;
    public SwitchableLoggedBehavior`2<Address, AssociationHandle> AssociateBehavior;
    public SwitchableLoggedBehavior`2<TestAssociationHandle, bool> DisassociateBehavior;
    public SwitchableLoggedBehavior`2<bool, ValueTuple`2<Address, TaskCompletionSource`1<IAssociationEventListener>>> ListenBehavior;
    public Address LocalAddress;
    public SwitchableLoggedBehavior`2<bool, bool> ShutdownBehavior;
    public SwitchableLoggedBehavior`2<ValueTuple`2<TestAssociationHandle, ByteString>, bool> WriteBehavior;
    public TestTransport(ActorSystem system, Config conf);
    public TestTransport(Address localAddress, AssociationRegistry registry, long maximumPayloadBytes, string schemeIdentifier);
    private static string GetConfigString(Config conf, string name);
    public virtual bool IsResponsibleFor(Address remote);
    public virtual Task`1<ValueTuple`2<Address, TaskCompletionSource`1<IAssociationEventListener>>> Listen();
    public Task`1<ValueTuple`2<Address, TaskCompletionSource`1<IAssociationEventListener>>> DefaultListen();
    public virtual Task`1<AssociationHandle> Associate(Address remoteAddress);
    [AsyncStateMachineAttribute("Akka.Remote.Transport.TestTransport/<DefaultAssociate>d__15")]
private Task`1<AssociationHandle> DefaultAssociate(Address remoteAddress);
    private ValueTuple`2<TestAssociationHandle, TestAssociationHandle> CreateHandlePair(TestTransport remoteTransport, Address remoteAddress);
    public Task Disassociate(TestAssociationHandle handle);
    public Task`1<bool> DefaultDisassociate(TestAssociationHandle handle);
    public virtual Task`1<bool> Shutdown();
    private Task`1<bool> DefaultShutdown();
    public Task`1<bool> Write(TestAssociationHandle handle, ByteString payload);
    private Task`1<bool> DefaultWriteBehavior(TestAssociationHandle handle, ByteString payload);
}
internal class Akka.Remote.Transport.ThrottledAssociation : FSM`2<ThrottlerState, IThrottlerData> {
    private static string DequeueTimerName;
    private IActorRef Manager;
    private IAssociationEventListener AssociationHandler;
    private AssociationHandle OriginalHandle;
    private bool Inbound;
    private ThrottleMode InboundThrottleMode;
    private Queue`1<ByteString> ThrottledMessages;
    private IHandleEventListener UpstreamListener;
    private AkkaPduProtobuffCodec _codec;
    public ThrottledAssociation(IActorRef manager, IAssociationEventListener associationHandler, AssociationHandle originalHandle, bool inbound);
    private void InitializeFSM();
    private Address PeekOrigin(ByteString b);
    private void ScheduleDequeue(TimeSpan delay);
    private void ForwardOrDelay(ByteString payload);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_0(Event`1<IThrottlerData> event);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_1(Event`1<IThrottlerData> event);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_2(Event`1<IThrottlerData> event);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_3(Event`1<IThrottlerData> event);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_4(Event`1<IThrottlerData> event);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_5(Event`1<IThrottlerData> event);
    [CompilerGeneratedAttribute]
private State`2<ThrottlerState, IThrottlerData> <InitializeFSM>b__16_6(Event`1<IThrottlerData> event);
}
public abstract class Akka.Remote.Transport.ThrottleMode : object {
    public abstract virtual ValueTuple`2<ThrottleMode, bool> TryConsumeTokens(long nanoTimeOfSend, int tokens);
    public abstract virtual TimeSpan TimeToAvailable(long currentNanoTime, int tokens);
}
internal class Akka.Remote.Transport.ThrottlerHandle : AbstractTransportAdapterHandle {
    internal IActorRef ThrottlerActor;
    internal AtomicReference`1<ThrottleMode> OutboundThrottleMode;
    public ThrottlerHandle(AssociationHandle wrappedHandle, IActorRef throttlerActor);
    public virtual bool Write(ByteString payload);
    public virtual void Disassociate();
    public void DisassociateWithFailure(DisassociateInfo reason);
    [CompilerGeneratedAttribute]
private bool <Write>g__TryConsume|3_0(ThrottleMode currentBucket, <>c__DisplayClass3_0& );
}
internal class Akka.Remote.Transport.ThrottlerManager : ActorTransportAdapterManager {
    private Transport WrappedTransport;
    private Dictionary`2<Address, ValueTuple`2<ThrottleMode, Direction>> _throttlingModes;
    private List`1<ValueTuple`2<Address, ThrottlerHandle>> _handleTable;
    public ThrottlerManager(Transport wrappedTransport);
    protected virtual void Ready(object message);
    private static Address NakedAddress(Address address);
    private ThrottleMode GetInboundMode(Address nakedAddress);
    private ThrottleMode GetOutboundMode(Address nakedAddress);
    private Task`1<SetThrottleAck> SetMode(Address nakedAddress, ThrottlerHandle handle);
    private Task`1<SetThrottleAck> SetMode(ThrottlerHandle handle, ThrottleMode mode, Direction direction);
    private Task`1<SetThrottleAck> AskModeWithDeathCompletion(IActorRef target, ThrottleMode mode, TimeSpan timeout);
    private ThrottlerHandle WrapHandle(AssociationHandle originalHandle, IAssociationEventListener listener, bool inbound);
}
public class Akka.Remote.Transport.ThrottlerProvider : object {
    public sealed virtual Transport Create(Transport wrappedTransport, ExtendedActorSystem system);
}
public class Akka.Remote.Transport.ThrottleTransportAdapter : ActorTransportAdapter {
    public static string Scheme;
    public static AtomicCounter UniqueId;
    private static SchemeAugmenter _schemeAugmenter;
    protected SchemeAugmenter SchemeAugmenter { get; }
    protected string ManagerName { get; }
    protected Props ManagerProps { get; }
    public ThrottleTransportAdapter(Transport wrappedTransport, ActorSystem system);
    private static ThrottleTransportAdapter();
    protected virtual SchemeAugmenter get_SchemeAugmenter();
    protected virtual string get_ManagerName();
    protected virtual Props get_ManagerProps();
    public virtual Task`1<bool> ManagementCommand(object message);
}
internal class Akka.Remote.Transport.TimeoutReason : object {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string ErrorMessage { get; private set; }
    public TimeoutReason(string errorMessage);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    public virtual string ToString();
}
public class Akka.Remote.Transport.TokenBucket : ThrottleMode {
    private int _capacity;
    private double _tokensPerSecond;
    private long _nanoTimeOfLastSend;
    private int _availableTokens;
    public TokenBucket(int capacity, double tokensPerSecond, long nanoTimeOfLastSend, int availableTokens);
    private bool IsAvailable(long nanoTimeOfSend, int tokens);
    public virtual ValueTuple`2<ThrottleMode, bool> TryConsumeTokens(long nanoTimeOfSend, int tokens);
    public virtual TimeSpan TimeToAvailable(long currentNanoTime, int tokens);
    private int TokensGenerated(long nanoTimeOfSend);
    private TokenBucket Copy(Nullable`1<int> capacity, Nullable`1<double> tokensPerSecond, Nullable`1<long> nanoTimeOfLastSend, Nullable`1<int> availableTokens);
    private bool Equals(TokenBucket other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TokenBucket left, TokenBucket right);
    public static bool op_Inequality(TokenBucket left, TokenBucket right);
}
public abstract class Akka.Remote.Transport.Transport : object {
    [CompilerGeneratedAttribute]
private Config <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private ActorSystem <System>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumPayloadBytes>k__BackingField;
    public Config Config { get; protected set; }
    public ActorSystem System { get; protected set; }
    public string SchemeIdentifier { get; protected set; }
    public long MaximumPayloadBytes { get; protected set; }
    [CompilerGeneratedAttribute]
public Config get_Config();
    [CompilerGeneratedAttribute]
protected void set_Config(Config value);
    [CompilerGeneratedAttribute]
public ActorSystem get_System();
    [CompilerGeneratedAttribute]
protected void set_System(ActorSystem value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemeIdentifier();
    [CompilerGeneratedAttribute]
protected virtual void set_SchemeIdentifier(string value);
    [CompilerGeneratedAttribute]
public virtual long get_MaximumPayloadBytes();
    [CompilerGeneratedAttribute]
protected virtual void set_MaximumPayloadBytes(long value);
    public abstract virtual Task`1<ValueTuple`2<Address, TaskCompletionSource`1<IAssociationEventListener>>> Listen();
    public abstract virtual bool IsResponsibleFor(Address remote);
    public abstract virtual Task`1<AssociationHandle> Associate(Address remoteAddress);
    public abstract virtual Task`1<bool> Shutdown();
    public virtual Task`1<bool> ManagementCommand(object message);
}
internal class Akka.Remote.Transport.TransportAdapters : object {
    [CompilerGeneratedAttribute]
private ActorSystem <System>k__BackingField;
    private RemoteSettings Settings;
    private Dictionary`2<string, ITransportAdapterProvider> _adaptersTable;
    public ActorSystem System { get; private set; }
    public TransportAdapters(ExtendedActorSystem system);
    [CompilerGeneratedAttribute]
public ActorSystem get_System();
    [CompilerGeneratedAttribute]
private void set_System(ActorSystem value);
    private Dictionary`2<string, ITransportAdapterProvider> AdaptersTable();
    public ITransportAdapterProvider GetAdapterProvider(string name);
}
internal class Akka.Remote.Transport.TransportAdaptersExtension : ExtensionIdProvider`1<TransportAdapters> {
    public virtual TransportAdapters CreateExtension(ExtendedActorSystem system);
    public static TransportAdapters For(ActorSystem system);
}
public abstract class Akka.Remote.Transport.TransportOperation : object {
    public static TimeSpan AskTimeout;
    private static TransportOperation();
}
public class Akka.Remote.Transport.UnderlyingTransportError : object {
    internal Exception Cause;
    internal string Message;
    public UnderlyingTransportError(Exception cause, string message);
}
public class Akka.Remote.Transport.Unthrottled : ThrottleMode {
    [CompilerGeneratedAttribute]
private static Unthrottled <Instance>k__BackingField;
    public static Unthrottled Instance { get; }
    private static Unthrottled();
    [CompilerGeneratedAttribute]
public static Unthrottled get_Instance();
    public virtual ValueTuple`2<ThrottleMode, bool> TryConsumeTokens(long nanoTimeOfSend, int tokens);
    public virtual TimeSpan TimeToAvailable(long currentNanoTime, int tokens);
}
public class Akka.Remote.Transport.WriteAttempt : Activity {
    [CompilerGeneratedAttribute]
private Address <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Recipient>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteString <Payload>k__BackingField;
    public Address Sender { get; private set; }
    public Address Recipient { get; private set; }
    public ByteString Payload { get; private set; }
    public WriteAttempt(Address sender, Address recipient, ByteString payload);
    [CompilerGeneratedAttribute]
public Address get_Sender();
    [CompilerGeneratedAttribute]
private void set_Sender(Address value);
    [CompilerGeneratedAttribute]
public Address get_Recipient();
    [CompilerGeneratedAttribute]
private void set_Recipient(Address value);
    [CompilerGeneratedAttribute]
public ByteString get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(ByteString value);
}
internal class Akka.Remote.TransportSupervisor : ReceiveActor {
    private SupervisorStrategy _strategy;
    protected virtual SupervisorStrategy SupervisorStrategy();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(RegisterTransportActor r);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
