public class Albedo.AssemblyElement : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public Assembly Assembly { get; private set; }
    public AssemblyElement(Assembly assembly);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal TypeElement[] GetTypeElements();
}
public class Albedo.CompositeReflectionElement : object {
    private IEnumerable`1<IReflectionElement> elements;
    public CompositeReflectionElement(IReflectionElement[] elements);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public sealed virtual IEnumerator`1<IReflectionElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Albedo.ConcreteElementConversions : object {
    [ExtensionAttribute]
public static AssemblyElement ToElement(Assembly assembly);
    [ExtensionAttribute]
public static ConstructorInfoElement ToElement(ConstructorInfo constructorInfo);
    [ExtensionAttribute]
public static EventInfoElement ToElement(EventInfo eventInfo);
    [ExtensionAttribute]
public static FieldInfoElement ToElement(FieldInfo fieldInfo);
    [ExtensionAttribute]
public static LocalVariableInfoElement ToElement(LocalVariableInfo localVariableInfo);
    [ExtensionAttribute]
public static MethodInfoElement ToElement(MethodInfo methodInfo);
    [ExtensionAttribute]
public static ParameterInfoElement ToElement(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static PropertyInfoElement ToElement(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static TypeElement ToElement(Type type);
}
public class Albedo.ConstructorInfoElement : object {
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    public ConstructorInfo ConstructorInfo { get; private set; }
    public ConstructorInfoElement(ConstructorInfo constructorInfo);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
private void set_ConstructorInfo(ConstructorInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal ParameterInfoElement[] GetParameterInfoElements();
    internal LocalVariableInfoElement[] GetLocalVariableInfoElements();
}
public static class Albedo.Constructors : object {
    public static ConstructorInfo Select(Expression`1<Func`1<T>> constructorSelector);
}
public class Albedo.EventInfoElement : object {
    [CompilerGeneratedAttribute]
private EventInfo <EventInfo>k__BackingField;
    public EventInfo EventInfo { get; private set; }
    public EventInfoElement(EventInfo eventInfo);
    [CompilerGeneratedAttribute]
public EventInfo get_EventInfo();
    [CompilerGeneratedAttribute]
private void set_EventInfo(EventInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal MethodInfoElement GetAddMethodInfoElement();
    internal MethodInfoElement GetRemoveMethodInfoElement();
}
public class Albedo.FieldInfoElement : object {
    [CompilerGeneratedAttribute]
private FieldInfo <FieldInfo>k__BackingField;
    public FieldInfo FieldInfo { get; private set; }
    public FieldInfoElement(FieldInfo fieldInfo);
    [CompilerGeneratedAttribute]
public FieldInfo get_FieldInfo();
    [CompilerGeneratedAttribute]
private void set_FieldInfo(FieldInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Albedo.Fields : object {
    public static FieldInfo Select(Expression`1<Func`1<TField>> fieldSelector);
}
public class Albedo.Fields`1 : object {
    public FieldInfo Select(Expression`1<Func`2<T, TField>> fieldSelector);
}
public interface Albedo.IReflectionElement {
    public abstract virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
}
public interface Albedo.IReflectionVisitor`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
    public abstract virtual IReflectionVisitor`1<T> Visit(AssemblyElement[] assemblyElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(AssemblyElement assemblyElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(TypeElement[] typeElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(TypeElement typeElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(FieldInfoElement[] fieldInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(ConstructorInfoElement[] constructorInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(PropertyInfoElement[] propertyInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(MethodInfoElement[] methodInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(EventInfoElement[] eventInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(FieldInfoElement fieldInfoElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(ConstructorInfoElement constructorInfoElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(PropertyInfoElement propertyInfoElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(MethodInfoElement methodInfoElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(EventInfoElement eventInfoElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(ParameterInfoElement[] parameterInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(LocalVariableInfoElement[] localVariableInfoElements);
    public abstract virtual IReflectionVisitor`1<T> Visit(ParameterInfoElement parameterInfoElement);
    public abstract virtual IReflectionVisitor`1<T> Visit(LocalVariableInfoElement localVariableInfoElement);
}
public class Albedo.LocalVariableInfoElement : object {
    [CompilerGeneratedAttribute]
private LocalVariableInfo <LocalVariableInfo>k__BackingField;
    public LocalVariableInfo LocalVariableInfo { get; private set; }
    public LocalVariableInfoElement(LocalVariableInfo localVariableInfo);
    [CompilerGeneratedAttribute]
public LocalVariableInfo get_LocalVariableInfo();
    [CompilerGeneratedAttribute]
private void set_LocalVariableInfo(LocalVariableInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Albedo.MethodInfoElement : object {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; private set; }
    public MethodInfoElement(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal ParameterInfoElement[] GetParameterInfoElements();
    internal LocalVariableInfoElement[] GetLocalVariableInfoElements();
}
public static class Albedo.Methods : object {
    public static MethodInfo Select(Expression`1<Action> methodSelector);
}
public class Albedo.Methods`1 : object {
    public MethodInfo Select(Expression`1<Action`1<T>> methodSelector);
    public MethodInfo Select(Expression`1<Func`2<T, TResult>> methodSelector);
    private static MethodInfo SelectImpl(Expression`1<TFunc> methodSelector);
    private static MethodInfo SelectGenericMethod(MethodInfo method);
    private static MethodInfo SelectNonGenericMethod(MethodInfo method);
}
public class Albedo.NullReflectionElement : object {
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Albedo.ParameterInfoElement : object {
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ParameterInfo ParameterInfo { get; private set; }
    public ParameterInfoElement(ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
private void set_ParameterInfo(ParameterInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Albedo.Properties : object {
    public static PropertyInfo Select(Expression`1<Func`1<TProperty>> propertySelector);
}
public class Albedo.Properties`1 : object {
    public PropertyInfo Select(Expression`1<Func`2<T, TProperty>> propertySelector);
}
public class Albedo.PropertyInfoElement : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; private set; }
    public PropertyInfoElement(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
private void set_PropertyInfo(PropertyInfo value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal MethodInfoElement GetGetMethodInfoElement();
    internal MethodInfoElement GetSetMethodInfoElement();
}
[ExtensionAttribute]
public static class Albedo.ReflectionElementEnvy : object {
    [ExtensionAttribute]
public static IEnumerable`1<IReflectionElement> GetProperMethods(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static IEnumerable`1<IReflectionElement> GetProperMethods(Type type);
    [ExtensionAttribute]
public static IReflectionVisitor`1<T> Accept(IEnumerable`1<IReflectionElement> elements, IReflectionVisitor`1<T> visitor);
    [ExtensionAttribute]
public static IEnumerable`1<IReflectionElement> GetPropertiesAndFields(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static IEnumerable`1<IReflectionElement> GetPublicPropertiesAndFields(Type type);
}
public abstract class Albedo.ReflectionVisitor`1 : object {
    public T Value { get; }
    public abstract virtual T get_Value();
    public virtual IReflectionVisitor`1<T> Visit(AssemblyElement[] assemblyElements);
    public virtual IReflectionVisitor`1<T> Visit(AssemblyElement assemblyElement);
    public virtual IReflectionVisitor`1<T> Visit(TypeElement[] typeElements);
    public virtual IReflectionVisitor`1<T> Visit(TypeElement typeElement);
    public virtual IReflectionVisitor`1<T> Visit(FieldInfoElement[] fieldInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(ConstructorInfoElement[] constructorInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(PropertyInfoElement[] propertyInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(MethodInfoElement[] methodInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(EventInfoElement[] eventInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(FieldInfoElement fieldInfoElement);
    public virtual IReflectionVisitor`1<T> Visit(ConstructorInfoElement constructorInfoElement);
    public virtual IReflectionVisitor`1<T> Visit(PropertyInfoElement propertyInfoElement);
    public virtual IReflectionVisitor`1<T> Visit(MethodInfoElement methodInfoElement);
    public virtual IReflectionVisitor`1<T> Visit(EventInfoElement eventInfoElement);
    public virtual IReflectionVisitor`1<T> Visit(ParameterInfoElement[] parameterInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(LocalVariableInfoElement[] localVariableInfoElements);
    public virtual IReflectionVisitor`1<T> Visit(ParameterInfoElement parameterInfoElement);
    public virtual IReflectionVisitor`1<T> Visit(LocalVariableInfoElement localVariableInfoElement);
}
public class Albedo.Refraction.AssemblyElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.CompositeReflectionElementRefraction`1 : object {
    private IEnumerable`1<IReflectionElementRefraction`1<T>> refractions;
    public CompositeReflectionElementRefraction`1(IReflectionElementRefraction`1[] refractions);
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
    public sealed virtual IEnumerator`1<IReflectionElementRefraction`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Albedo.Refraction.ConstructorInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
[ExtensionAttribute]
public static class Albedo.Refraction.Conversions : object {
    [ExtensionAttribute]
public static IReflectionElement AsReflectionElement(T source);
    [ExtensionAttribute]
public static IReflectionElement ToReflectionElement(T source);
}
public class Albedo.Refraction.EventInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.FieldInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public interface Albedo.Refraction.IReflectionElementRefraction`1 {
    public abstract virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.LocalVariableInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.MethodInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.ParameterInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.PropertyInfoElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.ReflectionElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.Refraction.TypeElementRefraction`1 : object {
    public sealed virtual IEnumerable`1<IReflectionElement> Refract(IEnumerable`1<T> source);
}
public class Albedo.TypeElement : object {
    private static BindingFlags bindingFlags;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; private set; }
    public TypeElement(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public sealed virtual IReflectionVisitor`1<T> Accept(IReflectionVisitor`1<T> visitor);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal FieldInfoElement[] GetFieldInfoElements();
    internal ConstructorInfoElement[] GetConstructorInfoElements();
    internal PropertyInfoElement[] GetPropertyInfoElements();
    internal MethodInfoElement[] GetMethodInfoElements();
    internal EventInfoElement[] GetEventInfoElements();
}
public class Albedo.ValueCollectingVisitor : ReflectionVisitor`1<IEnumerable`1<object>> {
    private object target;
    private Object[] values;
    public IEnumerable`1<object> Value { get; }
    public object Target { get; }
    public ValueCollectingVisitor(object target, Object[] values);
    public virtual IEnumerable`1<object> get_Value();
    public object get_Target();
    public virtual IReflectionVisitor`1<IEnumerable`1<object>> Visit(AssemblyElement assemblyElement);
    public virtual IReflectionVisitor`1<IEnumerable`1<object>> Visit(FieldInfoElement fieldInfoElement);
    public virtual IReflectionVisitor`1<IEnumerable`1<object>> Visit(PropertyInfoElement propertyInfoElement);
    private bool IsIncompatibleWith(PropertyInfoElement propertyInfoElement);
    private string CreateIncompatibilityMessageFor(PropertyInfoElement propertyInfoElement);
}
