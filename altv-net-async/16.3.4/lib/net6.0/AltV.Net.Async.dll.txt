internal class AltV.Net.Async.ActionTickScheduler : object {
    private int runs;
    private ConcurrentQueue`1<Action> actions;
    public sealed virtual void Schedule(Action action);
    public sealed virtual void Schedule(Action`1<object> action, object state);
    public sealed virtual void ScheduleBlocking(Action action, SemaphoreSlim semaphoreSlim);
    public sealed virtual void ScheduleBlockingThrows(Action action, SemaphoreSlim semaphoreSlim);
    public sealed virtual Task ScheduleTask(Action action);
    public sealed virtual Task ScheduleTask(Action`1<object> action, object state);
    public sealed virtual Task`1<TResult> ScheduleTask(Func`1<TResult> action);
    public sealed virtual Task`1<TResult> ScheduleTask(Func`2<object, TResult> action, object value);
    public sealed virtual void Tick();
}
public class AltV.Net.Async.ActionTickSchedulerFactory : object {
    public sealed virtual ITickScheduler Create(Thread mainThread);
}
[ExtensionAttribute]
public static class AltV.Net.Async.AltAsync : object {
    internal static AsyncCore CoreImpl;
    internal static AltVAsync AltVAsync;
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> ExistsAsync(IBaseObject baseObject);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<BaseObjectType> GetTypeAsync(IBaseObject baseObject);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<SetMetaDataAsync>d__2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetMetaDataAsync(IBaseObject baseObject, string key, object value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<T> GetMetaDataAsync(IBaseObject baseObject, string key);
    public static Task`1<IBlip> CreateBlip(bool global, byte type, Position pos, IPlayer[] targets);
    public static Task`1<IBlip> CreateBlip(bool global, byte type, IEntity entityAttach, IPlayer[] targets);
    public static Task`1<IBlip> CreateBlip(bool global, BlipType type, Position pos, IPlayer[] targets);
    public static Task`1<IBlip> CreateBlip(bool global, BlipType type, IEntity entityAttach, IPlayer[] targets);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsGlobalAsync(IBlip blip);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsAttachedAsync(IBlip blip);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<IEntity> AttachedToAsync(IBlip blip);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<BlipType> GetBlipTypeAsync(IBlip blip);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSpriteAsync(IBlip blip, ushort sprite);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetColorAsync(IBlip blip, byte color);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRouteAsync(IBlip blip, bool route);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRouteColorAsync(IBlip blip, Rgba color);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task RemoveAsync(IBlip blip);
    public static Task`1<ICheckpoint> CreateCheckpoint(byte type, Position pos, float radius, float height, Rgba color, UInt32 streamingDistance);
    public static Task`1<ICheckpoint> CreateCheckpoint(CheckpointType type, Position pos, float radius, float height, Rgba color, UInt32 streamingDistance);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<CheckpointType> GetCheckpointTypeAsync(ICheckpoint checkpoint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<float> GetHeightAsync(ICheckpoint checkpoint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<float> GetRadiusAsync(ICheckpoint checkpoint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rgba> GetColorAsync(ICheckpoint checkpoint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Checkpoint.IsEntityIn on async entity instead")]
public static Task`1<bool> IsPlayerInAsync(ICheckpoint checkpoint, IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Checkpoint.IsEntityIn on async entity instead")]
public static Task`1<bool> IsVehicleInAsync(ICheckpoint checkpoint, IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsEntityInAsync(ICheckpoint checkpoint, IEntity entity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DestroyAsync(ICheckpoint checkpoint);
    public static void add_OnCheckpoint(CheckpointAsyncDelegate value);
    public static void remove_OnCheckpoint(CheckpointAsyncDelegate value);
    public static void add_OnBaseObjectCreate(BaseObjectCreateAsyncDelegate value);
    public static void remove_OnBaseObjectCreate(BaseObjectCreateAsyncDelegate value);
    public static void add_OnBaseObjectRemove(BaseObjectRemoveAsyncDelegate value);
    public static void remove_OnBaseObjectRemove(BaseObjectRemoveAsyncDelegate value);
    public static void add_OnPlayerConnect(PlayerConnectAsyncDelegate value);
    public static void remove_OnPlayerConnect(PlayerConnectAsyncDelegate value);
    public static void add_OnPlayerDamage(PlayerDamageAsyncDelegate value);
    public static void remove_OnPlayerDamage(PlayerDamageAsyncDelegate value);
    public static void add_OnPlayerDead(PlayerDeadAsyncDelegate value);
    public static void remove_OnPlayerDead(PlayerDeadAsyncDelegate value);
    public static void add_OnPlayerHeal(PlayerHealAsyncDelegate value);
    public static void remove_OnPlayerHeal(PlayerHealAsyncDelegate value);
    public static void add_OnExplosion(ExplosionAsyncDelegate value);
    public static void remove_OnExplosion(ExplosionAsyncDelegate value);
    public static void add_OnWeaponDamage(WeaponDamageAsyncDelegate value);
    public static void remove_OnWeaponDamage(WeaponDamageAsyncDelegate value);
    public static void add_OnPlayerChangeVehicleSeat(PlayerChangeVehicleSeatAsyncDelegate value);
    public static void remove_OnPlayerChangeVehicleSeat(PlayerChangeVehicleSeatAsyncDelegate value);
    public static void add_OnPlayerEnterVehicle(PlayerEnterVehicleAsyncDelegate value);
    public static void remove_OnPlayerEnterVehicle(PlayerEnterVehicleAsyncDelegate value);
    public static void add_OnPlayerEnteringVehicle(PlayerEnteringVehicleAsyncDelegate value);
    public static void remove_OnPlayerEnteringVehicle(PlayerEnteringVehicleAsyncDelegate value);
    public static void add_OnPlayerLeaveVehicle(PlayerLeaveVehicleAsyncDelegate value);
    public static void remove_OnPlayerLeaveVehicle(PlayerLeaveVehicleAsyncDelegate value);
    public static void add_OnPlayerDisconnect(PlayerDisconnectAsyncDelegate value);
    public static void remove_OnPlayerDisconnect(PlayerDisconnectAsyncDelegate value);
    public static void add_OnPlayerRemove(PlayerRemoveAsyncDelegate value);
    public static void remove_OnPlayerRemove(PlayerRemoveAsyncDelegate value);
    public static void add_OnVehicleRemove(VehicleRemoveAsyncDelegate value);
    public static void remove_OnVehicleRemove(VehicleRemoveAsyncDelegate value);
    public static void add_OnPedRemove(PedRemoveAsyncDelegate value);
    public static void remove_OnPedRemove(PedRemoveAsyncDelegate value);
    public static void add_OnPlayerEvent(PlayerClientEventAsyncDelegate value);
    public static void remove_OnPlayerEvent(PlayerClientEventAsyncDelegate value);
    public static void add_OnConsoleCommand(ConsoleCommandAsyncDelegate value);
    public static void remove_OnConsoleCommand(ConsoleCommandAsyncDelegate value);
    public static void add_OnMetaDataChange(MetaDataChangeAsyncDelegate value);
    public static void remove_OnMetaDataChange(MetaDataChangeAsyncDelegate value);
    public static void add_OnSyncedMetaDataChange(MetaDataChangeAsyncDelegate value);
    public static void remove_OnSyncedMetaDataChange(MetaDataChangeAsyncDelegate value);
    public static void add_OnColShape(ColShapeAsyncDelegate value);
    public static void remove_OnColShape(ColShapeAsyncDelegate value);
    public static void add_OnVehicleDestroy(VehicleDestroyAsyncDelegate value);
    public static void remove_OnVehicleDestroy(VehicleDestroyAsyncDelegate value);
    public static void add_OnFire(FireAsyncDelegate value);
    public static void remove_OnFire(FireAsyncDelegate value);
    public static void add_OnStartProjectile(StartProjectileAsyncDelegate value);
    public static void remove_OnStartProjectile(StartProjectileAsyncDelegate value);
    public static void add_OnPlayerWeaponChange(PlayerWeaponChangeAsyncDelegate value);
    public static void remove_OnPlayerWeaponChange(PlayerWeaponChangeAsyncDelegate value);
    public static void add_OnNetworkOwnerChange(NetOwnerChangeAsyncDelegate value);
    public static void remove_OnNetworkOwnerChange(NetOwnerChangeAsyncDelegate value);
    public static void add_OnVehicleAttach(VehicleAttachAsyncDelegate value);
    public static void remove_OnVehicleAttach(VehicleAttachAsyncDelegate value);
    public static void add_OnVehicleDetach(VehicleDetachAsyncDelegate value);
    public static void remove_OnVehicleDetach(VehicleDetachAsyncDelegate value);
    public static void add_OnVehicleDamage(VehicleDamageAsyncDelegate value);
    public static void remove_OnVehicleDamage(VehicleDamageAsyncDelegate value);
    public static void add_OnVehicleHorn(VehicleHornAsyncDelegate value);
    public static void remove_OnVehicleHorn(VehicleHornAsyncDelegate value);
    public static void add_OnConnectionQueueAdd(ConnectionQueueAddAsyncDelegate value);
    public static void remove_OnConnectionQueueAdd(ConnectionQueueAddAsyncDelegate value);
    public static void add_OnConnectionQueueRemove(ConnectionQueueRemoveAsyncDelegate value);
    public static void remove_OnConnectionQueueRemove(ConnectionQueueRemoveAsyncDelegate value);
    public static void add_OnServerStarted(ServerStartedAsyncDelegate value);
    public static void remove_OnServerStarted(ServerStartedAsyncDelegate value);
    public static void add_OnPlayerRequestControl(PlayerRequestControlAsyncDelegate value);
    public static void remove_OnPlayerRequestControl(PlayerRequestControlAsyncDelegate value);
    public static void add_OnPlayerChangeAnimation(PlayerChangeAnimationAsyncDelegate value);
    public static void remove_OnPlayerChangeAnimation(PlayerChangeAnimationAsyncDelegate value);
    public static void add_OnPlayerChangeInterior(PlayerChangeInteriorAsyncDelegate value);
    public static void remove_OnPlayerChangeInterior(PlayerChangeInteriorAsyncDelegate value);
    public static void add_OnPlayerDimensionChange(PlayerDimensionChangeAsyncDelegate value);
    public static void remove_OnPlayerDimensionChange(PlayerDimensionChangeAsyncDelegate value);
    public static void add_OnVehicleSiren(VehicleSirenAsyncDelegate value);
    public static void remove_OnVehicleSiren(VehicleSirenAsyncDelegate value);
    public static void add_OnPlayerSpawn(PlayerSpawnAsyncDelegate value);
    public static void remove_OnPlayerSpawn(PlayerSpawnAsyncDelegate value);
    public static void add_OnRequestSyncedScene(RequestSyncedSceneAsyncEventDelegate value);
    public static void remove_OnRequestSyncedScene(RequestSyncedSceneAsyncEventDelegate value);
    public static void add_OnStartSyncedScene(StartSyncedSceneAsyncEventDelegate value);
    public static void remove_OnStartSyncedScene(StartSyncedSceneAsyncEventDelegate value);
    public static void add_OnStopSyncedScene(StopSyncedSceneAsyncEventDelegate value);
    public static void remove_OnStopSyncedScene(StopSyncedSceneAsyncEventDelegate value);
    public static void add_OnUpdateSyncedScene(UpdateSyncedSceneAsyncEventDelegate value);
    public static void remove_OnUpdateSyncedScene(UpdateSyncedSceneAsyncEventDelegate value);
    public static void add_OnClientRequestObject(ClientRequestObjectAsyncEventDelegate value);
    public static void remove_OnClientRequestObject(ClientRequestObjectAsyncEventDelegate value);
    public static void add_OnClientDeleteObject(ClientDeleteObjectAsyncEventDelegate value);
    public static void remove_OnClientDeleteObject(ClientDeleteObjectAsyncEventDelegate value);
    public static void add_OnGivePedScriptedTask(GivePedScriptedTaskAsyncDelegate value);
    public static void remove_OnGivePedScriptedTask(GivePedScriptedTaskAsyncDelegate value);
    public static void add_OnPedDamage(PedDamageAsyncDelegate value);
    public static void remove_OnPedDamage(PedDamageAsyncDelegate value);
    public static void add_OnPedDead(PedDeadAsyncDelegate value);
    public static void remove_OnPedDead(PedDeadAsyncDelegate value);
    public static void add_OnPedHeal(PedHealAsyncDelegate value);
    public static void remove_OnPedHeal(PedHealAsyncDelegate value);
    public static void add_OnPlayerStartTalking(PlayerStartTalkingAsyncDelegate value);
    public static void remove_OnPlayerStartTalking(PlayerStartTalkingAsyncDelegate value);
    public static void add_OnPlayerStopTalking(PlayerStopTalkingAsyncDelegate value);
    public static void remove_OnPlayerStopTalking(PlayerStopTalkingAsyncDelegate value);
    public static void add_OnScriptRpc(ScriptRpcAsyncDelegate value);
    public static void remove_OnScriptRpc(ScriptRpcAsyncDelegate value);
    public static void add_OnScriptRpcAnswer(ScriptRpcAnswerAsyncDelegate value);
    public static void remove_OnScriptRpcAnswer(ScriptRpcAnswerAsyncDelegate value);
    public static void add_OnPlayerConnectDenied(PlayerConnectDeniedAsyncDelegate value);
    public static void remove_OnPlayerConnectDenied(PlayerConnectDeniedAsyncDelegate value);
    public static void add_OnResourceStart(ResourceEventAsyncDelegate value);
    public static void remove_OnResourceStart(ResourceEventAsyncDelegate value);
    public static void add_OnResourceStop(ResourceEventAsyncDelegate value);
    public static void remove_OnResourceStop(ResourceEventAsyncDelegate value);
    public static void add_OnResourceError(ResourceEventAsyncDelegate value);
    public static void remove_OnResourceError(ResourceEventAsyncDelegate value);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<Log>d__203")]
public static void Log(string message);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<Emit>d__204")]
public static void Emit(string eventName, Object[] args);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<EmitAllClients>d__205")]
public static void EmitAllClients(string eventName, Object[] args);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<EmitUnreliableAllClients>d__206")]
public static void EmitUnreliableAllClients(string eventName, Object[] args);
    [ConditionalAttribute("DEBUG")]
private static void CheckIfAsyncResource();
    internal static void Setup(AltVAsync altVAsync);
    internal static void Setup(AsyncCore core);
    public static Task Do(Action action);
    public static Task Do(Task task);
    public static Task Do(Func`1<Task> task);
    public static void RunOnMainThreadBlocking(Action action, SemaphoreSlim semaphoreSlim);
    public static void RunOnMainThreadBlockingThrows(Action action, SemaphoreSlim semaphoreSlim);
    public static Task Do(Action`1<object> action, object value);
    public static Task`1<TResult> Do(Func`1<TResult> action);
    public static Task`1<TResult> Do(Func`2<object, TResult> action, object value);
    public static void RunOnMainThread(Action action);
    public static void RunOnMainThread(Action`1<object> action, object value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetModelAsync(IEntity entity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRotationAsync(IEntity entity, Rotation rotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rotation> GetRotationAsync(IEntity entity);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<SetSyncedMetaDataAsync>d__223")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSyncedMetaDataAsync(IEntity entity, string key, object value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<T> GetSyncedMetaDataAsync(IEntity entity, string key);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<SetStreamSyncedMetaDataAsync>d__225")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetStreamSyncedMetaDataAsync(IEntity entity, string key, object value);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<T> GetStreamSyncedMetaDataAsync(IEntity entity, string key);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DeleteSyncedMetaDataAsync(IEntity entity, string key);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DeleteStreamSyncedMetaDataAsync(IEntity entity, string key);
    public static Task`1<IMarker> CreateMarker(MarkerType type, Position pos, Rgba color);
    public static Task`1<IMarker> CreateMarker(IPlayer player, MarkerType type, Position pos, Rgba color);
    public static Task`1<IObject> CreateObject(UInt32 model, Position position, Rotation rotation, byte alpha, byte textureVariation, ushort lodDistance);
    public static Task`1<IObject> CreateObject(string model, Position position, Rotation rotation, byte alpha, byte textureVariation, ushort lodDistance);
    public static void OffServer(string eventName, Function function);
    public static void OffClient(string eventName, Function function);
    public static Function OnServer(string eventName, Action action);
    public static Function OnServer(string eventName, Action`1<T1> action);
    public static Function OnServer(string eventName, Action`2<T1, T2> action);
    public static Function OnServer(string eventName, Action`3<T1, T2, T3> action);
    public static Function OnServer(string eventName, Action`4<T1, T2, T3, T4> action);
    public static Function OnServer(string eventName, Action`5<T1, T2, T3, T4, T5> action);
    public static Function OnServer(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnServer(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnServer(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnServer(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnServer(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnServer(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnServer(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnServer(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnServer(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnServer(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnServer(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnServer(string eventName, Func`1<T1> action);
    public static Function OnServer(string eventName, Func`2<T1, T2> action);
    public static Function OnServer(string eventName, Func`3<T1, T2, T3> action);
    public static Function OnServer(string eventName, Func`4<T1, T2, T3, T4> action);
    public static Function OnServer(string eventName, Func`5<T1, T2, T3, T4, T5> action);
    public static Function OnServer(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnServer(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnServer(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnServer(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnServer(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnServer(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnServer(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnServer(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnServer(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnServer(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnServer(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnServer(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action);
    public static Function OnClient(string eventName, Action action);
    public static Function OnClient(string eventName, Action`1<T1> action);
    public static Function OnClient(string eventName, Action`2<T1, T2> action);
    public static Function OnClient(string eventName, Action`3<T1, T2, T3> action);
    public static Function OnClient(string eventName, Action`4<T1, T2, T3, T4> action);
    public static Function OnClient(string eventName, Action`5<T1, T2, T3, T4, T5> action);
    public static Function OnClient(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnClient(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnClient(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnClient(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnClient(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnClient(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnClient(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnClient(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnClient(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnClient(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnClient(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnClient(string eventName, Func`1<T1> action);
    public static Function OnClient(string eventName, Func`2<T1, T2> action);
    public static Function OnClient(string eventName, Func`3<T1, T2, T3> action);
    public static Function OnClient(string eventName, Func`4<T1, T2, T3, T4> action);
    public static Function OnClient(string eventName, Func`5<T1, T2, T3, T4, T5> action);
    public static Function OnClient(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnClient(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnClient(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnClient(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnClient(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnClient(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnClient(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnClient(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnClient(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnClient(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnClient(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnClient(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action);
    public static Task`1<IPed> CreatePed(UInt32 model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static Task`1<IPed> CreatePed(PedModel model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static Task`1<IPed> CreatePed(string model, Position pos, Rotation rot, UInt32 streamingDistance);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsConnectedAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetModelAsync(IPlayer player, UInt32 model);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<GetNameAsync>d__308")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetNameAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ushort> GetHealthAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetHealthAsync(IPlayer player, ushort health);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsDeadAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsJumpingAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsInRagdollAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsAimingAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsShootingAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsReloadingAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ushort> GetArmorAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetArmorAsync(IPlayer player, ushort armor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<float> GetMoveSpeedAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Position> GetAimPositionAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rotation> GetHeadRotationAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsInVehicleAsync(IPlayer player);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<GetVehicleAsync>d__323")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<IVehicle> GetVehicleAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetSeatAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetPingAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SpawnAsync(IPlayer player, Position position, UInt32 delayMs);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DespawnAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDateTimeAsync(IPlayer player, int day, int month, int year, int hour, int minute, int second);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDateTimeAsync(IPlayer player, DateTime dateTime);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWeatherAsync(IPlayer player, UInt32 weather);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task GiveWeaponAsync(IPlayer player, UInt32 weapon, int ammo, bool selectWeapon);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task RemoveWeaponAsync(IPlayer player, UInt32 weapon);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task RemoveAllWeaponsAsync(IPlayer player, bool removeAllAmmo);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetMaxHealthAsync(IPlayer player, ushort maxhealth);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetMaxArmorAsync(IPlayer player, ushort maxarmor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetCurrentWeaponAsync(IPlayer player, UInt32 weapon);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<KickAsync>d__337")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task KickAsync(IPlayer player, string reason);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<EmitAsync>d__338")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task EmitAsync(IPlayer player, string eventName, Object[] args);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> GetVisibleAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetVisibleAsync(IPlayer player, bool visibility);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> GetStreamedAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetStreamedAsync(IPlayer player, bool isStreamed);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetAuthTokenAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetCurrentWeaponAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<IEntity> GetEntityAimingAtAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Position> GetEntityAimOffsetAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ulong> GetHardwareIdHashAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ulong> GetHardwareIdExHashAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetIpAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsFlashlightActiveAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ushort> GetMaxArmorAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ushort> GetMaxHealthAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ulong> GetSocialClubIdAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task AddWeaponComponentAsync(IPlayer player, UInt32 weapon, UInt32 weaponComponent);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task AddWeaponComponentAsync(IPlayer player, WeaponModel weaponModel, UInt32 weaponComponent);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task AttachToEntityAsync(IPlayer player, IEntity entity, ushort otherBoneId, ushort ownBoneId, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task ClearBloodDamageAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task ClearPropsAsync(IPlayer player, byte component);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DetachAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Cloth> GetClothesAsync(IPlayer player, byte component);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetCurrentWeaponTintIndexAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<DlcCloth> GetDlcClothesAsync(IPlayer player, byte component);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<DlcProp> GetDlcPropsAsync(IPlayer player, byte component);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Prop> GetPropsAsync(IPlayer player, byte component);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetWeaponTintIndexAsync(IPlayer player, UInt32 weapon);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsEntityInStreamingRangeAsync(IPlayer player, IEntity entity);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task RemoveWeaponComponentAsync(IPlayer player, UInt32 weapon, UInt32 weaponComponent);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> SetClothesAsync(IPlayer player, byte component, ushort drawable, byte texture, byte palette);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> SetDlcClothesAsync(IPlayer player, byte component, ushort drawable, byte texture, byte palette, UInt32 dlc);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> SetPropsAsync(IPlayer player, byte component, ushort drawable, byte texture);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> SetDlcPropsAsync(IPlayer player, byte component, ushort drawable, byte texture, UInt32 dlc);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWeaponTintIndexAsync(IPlayer player, UInt32 weapon, byte tintIndex);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWeaponTintIndexAsync(IPlayer player, WeaponModel weaponModel, byte tintIndex);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> GetInvincibleAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetInvincibleAsync(IPlayer player, bool isInvincible);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetIntoVehicleAsync(IPlayer player, IVehicle vehicle, byte seat);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsSuperJumpEnabledAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsCrouchingAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsStealthyAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task PlayAmbientSpeechAsync(IPlayer player, string speechName, string speechParam, UInt32 speechDictHash);
    public static void RegisterEvents(object target);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IPlayer ToAsync(IPlayer player, IAsyncContext asyncContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IVehicle ToAsync(IVehicle vehicle, IAsyncContext asyncContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static ICheckpoint ToAsync(ICheckpoint checkpoint, IAsyncContext asyncContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IColShape ToAsync(IColShape colShape, IAsyncContext asyncContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IBlip ToAsync(IBlip blip, IAsyncContext asyncContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IVoiceChannel ToAsync(IVoiceChannel voiceChannel, IAsyncContext asyncContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IPlayer ToAsync(IPlayer player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IVehicle ToAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static ICheckpoint ToAsync(ICheckpoint checkpoint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IColShape ToAsync(IColShape colShape);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IBlip ToAsync(IBlip blip);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static IVoiceChannel ToAsync(IVoiceChannel voiceChannel);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static bool TryToAsync(IPlayer thisValue, IAsyncContext asyncContext, IPlayer& player);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static bool TryToAsync(IVehicle thisValue, IAsyncContext asyncContext, IVehicle& vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static bool TryToAsync(ICheckpoint thisValue, IAsyncContext asyncContext, ICheckpoint& checkpoint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static bool TryToAsync(IColShape thisValue, IAsyncContext asyncContext, IColShape& colShape);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static bool TryToAsync(IBlip thisValue, IAsyncContext asyncContext, IBlip& blip);
    [ExtensionAttribute]
[ObsoleteAttribute("Use new async API instead")]
public static bool TryToAsync(IVoiceChannel thisValue, IAsyncContext asyncContext, IVoiceChannel& voiceChannel);
    public static Task`1<IVehicle> CreateVehicle(UInt32 model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static Task`1<IVehicle> CreateVehicle(VehicleModel model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static Task`1<IVehicle> CreateVehicle(string model, Position pos, Rotation rot, UInt32 streamingDistance);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<IPlayer> GetDriverAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetModKitAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetModKitAsync(IVehicle vehicle, byte modKit);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsPrimaryColorRgbAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetPrimaryColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPrimaryColorAsync(IVehicle vehicle, byte primaryColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rgba> GetPrimaryColorRgbAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPrimaryColorRgbAsync(IVehicle vehicle, Rgba primaryColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsSecondaryColorRgbAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetSecondaryColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSecondaryColorAsync(IVehicle vehicle, byte secondaryColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rgba> GetSecondaryColorRgbAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSecondaryColorRgbAsync(IVehicle vehicle, Rgba secondaryColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsTireSmokeColorCustomAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetPearlColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPearlColorAsync(IVehicle vehicle, byte pearlColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetWheelColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelColorAsync(IVehicle vehicle, byte wheelColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetInteriorColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetInteriorColorAsync(IVehicle vehicle, byte interiorColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetDashboardColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDashboardColorAsync(IVehicle vehicle, byte dashboardColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rgba> GetTireSmokeColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetTireSmokeColorAsync(IVehicle vehicle, Rgba tireSmokeColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetWheelTypeAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetWheelVariationAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> HasCustomTiresAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetCustomTiresAsync(IVehicle vehicle, bool customTires);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetSpecialDarknessAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSpecialDarknessAsync(IVehicle vehicle, byte specialDarkness);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetNumberplateIndexAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetNumberplateIndexAsync(IVehicle vehicle, UInt32 numberPlateIndex);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<GetNumberplateTextAsync>d__435")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetNumberplateTextAsync(IVehicle vehicle);
    [AsyncStateMachineAttribute("AltV.Net.Async.AltAsync/<SetNumberplateTextAsync>d__436")]
[ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetNumberplateTextAsync(IVehicle vehicle, string numberPlateText);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetWindowTintAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWindowTintAsync(IVehicle vehicle, byte windowTint);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetDirtLevelAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDirtLevelAsync(IVehicle vehicle, byte dirtLevel);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Rgba> GetNeonColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetNeonColorAsync(IVehicle vehicle, Rgba neonColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetHealthDataAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetHealthDataAsync(IVehicle vehicle, string healthData);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsEngineOnAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetEngineOnAsync(IVehicle vehicle, bool engineOn);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetBodyAdditionalHealthAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetBodyAdditionalHealthAsync(IVehicle vehicle, UInt32 bodyAdditionalHealth);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetBodyHealthAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetBodyHealthAsync(IVehicle vehicle, UInt32 bodyHealth);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetRepairsCountAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetWheelsCountAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<int> GetPetrolTankHealthAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPetrolTankHealthAsync(IVehicle vehicle, int petrolTankHealth);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<int> GetEngineHealthAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetEngineHealthAsync(IVehicle vehicle, int engineHealth);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsNeonActiveAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetStateAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetStateAsync(IVehicle vehicle, string state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsRoofClosedAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRoofClosedAsync(IVehicle vehicle, bool roofState);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetDoorStateAsync(IVehicle vehicle, byte doorId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDoorStateAsync(IVehicle vehicle, byte doorId, byte state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<VehicleDoorState> GetDoorStateAsync(IVehicle vehicle, VehicleDoor door);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDoorStateAsync(IVehicle vehicle, VehicleDoor door, VehicleDoorState state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsWindowOpenedAsync(IVehicle vehicle, byte windowId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWindowOpenedAsync(IVehicle vehicle, byte windowId, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsNightlightOnAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsDaylightOnAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<VehicleLockState> GetLockStateAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetLockStateAsync(IVehicle vehicle, VehicleLockState lockState);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsSirenActiveAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSirenActiveAsync(IVehicle vehicle, bool sirenActive);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetHeadlightColorAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetHeadlightColorAsync(IVehicle vehicle, byte headlightColor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsHandbrakeActiveAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsFlamethrowerActiveAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> HasArmoredWindowsAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetSpecialLightDamagedAsync(IVehicle vehicle, byte specialLightId, bool isDamaged);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsSpecialLightDamagedAsync(IVehicle vehicle, byte specialLightId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWindowDamagedAsync(IVehicle vehicle, byte windowId, bool isDamaged);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsWindowDamagedAsync(IVehicle vehicle, byte windowId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsLightDamagedAsync(IVehicle vehicle, byte lightId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetLightDamagedAsync(IVehicle vehicle, byte lightId, bool isDamaged);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetPartBulletHolesAsync(IVehicle vehicle, byte partId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPartBulletHolesAsync(IVehicle vehicle, byte partId, byte shootsCount);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetPartBulletHolesExtAsync(IVehicle vehicle, VehiclePart part);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPartBulletHolesExtAsync(IVehicle vehicle, VehiclePart part, byte shootsCount);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetPartDamageLevelAsync(IVehicle vehicle, byte partId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPartDamageLevelAsync(IVehicle vehicle, byte partId, byte damage);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<VehiclePartDamage> GetPartDamageLevelExtAsync(IVehicle vehicle, VehiclePart part);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPartDamageLevelExtAsync(IVehicle vehicle, VehiclePart part, byte damage);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<float> GetArmoredWindowHealthAsync(IVehicle vehicle, byte windowId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetArmoredWindowHealthAsync(IVehicle vehicle, byte windowId, float health);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetArmoredWindowShootCountAsync(IVehicle vehicle, byte windowId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetArmoredWindowShootCountAsync(IVehicle vehicle, byte windowId, byte count);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetBumperDamageLevelAsync(IVehicle vehicle, byte bumperId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetBumperDamageLevelAsync(IVehicle vehicle, byte bumperId, byte damageLevel);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<VehicleBumperDamage> GetBumperDamageLevelExtAsync(IVehicle vehicle, VehicleBumper bumper);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetBumperDamageLevelExtAsync(IVehicle vehicle, VehicleBumper bumper, VehicleBumperDamage bumperDamage);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetDamageDataAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDamageDataAsync(IVehicle vehicle, string damageData);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetModAsync(IVehicle vehicle, byte category);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetModsCountAsync(IVehicle vehicle, byte category);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> SetModAsync(IVehicle vehicle, byte category, byte id);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetModKitsCountAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelsAsync(IVehicle vehicle, byte type, byte variation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRearWheelAsync(IVehicle vehicle, byte variation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetRearWheelAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetLiveryAsync(IVehicle vehicle, byte livery);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetLiveryAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRoofLiveryAsync(IVehicle vehicle, byte roofLivery);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<byte> GetRoofLiveryAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetLightsMultiplierAsync(IVehicle vehicle, float multiplier);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<float> GetLightsMultiplierAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsExtraOnAsync(IVehicle vehicle, byte extraId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task ToggleExtraAsync(IVehicle vehicle, byte extraId, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Tuple`4<bool, bool, bool, bool>> GetNeonActiveAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetNeonActiveAsync(IVehicle vehicle, bool left, bool right, bool front, bool back);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetAppearanceDataAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetAppearanceDataAsync(IVehicle vehicle, string text);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<UInt32> GetRadioStationAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetRadioStationAsync(IVehicle vehicle, UInt32 radioStation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> GetManualEngineControlAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetManualEngineControlAsync(IVehicle vehicle, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<string> GetScriptDataAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetScriptDataAsync(IVehicle vehicle, string text);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DestroyAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> GetVisibleAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetVisibleAsync(IVehicle vehicle, bool visibility);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> GetStreamedAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetStreamedAsync(IVehicle vehicle, bool isStreamed);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task IsDestroyedAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<IVehicle> AttachedAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<IVehicle> AttachedToAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task AttachToEntityAsync(IVehicle vehicle, IEntity entity, ushort otherBoneId, ushort ownBoneId, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task DetachAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> DoesWheelHasTireAsync(IVehicle vehicle, byte wheelId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<float> GetWheelHealthAsync(IVehicle vehicle, byte wheelId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelHealthAsync(IVehicle vehicle, byte wheelId, float health);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task RepairAsync(IVehicle vehicle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsWheelBurstAsync(IVehicle vehicle, byte wheelId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelBurstAsync(IVehicle vehicle, byte wheelId, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsWheelDetachedAsync(IVehicle vehicle, byte wheelId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelDetachedAsync(IVehicle vehicle, byte wheelId, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<bool> IsWheelOnFireAsync(IVehicle vehicle, byte wheelId);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelOnFireAsync(IVehicle vehicle, byte wheelId, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetWheelHasTireAsync(IVehicle vehicle, byte wheelId, bool state);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Position> GetVelocityAsync(IVehicle vehicle);
    public static Task`1<IVirtualEntityGroup> CreateVirtualEntityGroup(UInt32 streamingDistance);
    public static Task`1<IVirtualEntity> CreateVirtualEntity(IVirtualEntityGroup group, Position position, UInt32 streamingDistance, Dictionary`2<string, object> dataDict);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPositionAsync(IWorldObject worldObject, Position position);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPositionAsync(IWorldObject worldObject, float x, float y, float z);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetPositionAsync(IWorldObject worldObject, ValueTuple`3<float, float, float> position);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<Position> GetPositionAsync(IWorldObject worldObject);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<ValueTuple`3<float, float, float>> GetPositionTupleAsync(IWorldObject worldObject);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task SetDimensionAsync(IWorldObject worldObject, int dimension);
    [ExtensionAttribute]
[ObsoleteAttribute("Use async entities instead")]
public static Task`1<int> GetDimensionAsync(IWorldObject worldObject);
    [ExtensionAttribute]
public static bool ExecuteLocked(IBaseObject player, Action action);
    [ExtensionAttribute]
public static bool ExecuteLocked(IBaseObject player, Action`1<T> action, T param);
    [ExtensionAttribute]
public static bool ExecuteLocked(IBaseObject player, Action`3<T1, T2, T3> action, T1 param1, T2 param2, T3 param3);
    [ExtensionAttribute]
public static bool ExecuteLocked(IBaseObject player, Action`4<T1, T2, T3, T4> action, T1 param1, T2 param2, T3 param3, T4 param4);
    [ExtensionAttribute]
public static bool SetPositionLocked(IPlayer player, Position position);
    [ExtensionAttribute]
public static bool GetPositionLocked(IPlayer player, Position& position);
    [ExtensionAttribute]
public static bool EmitLockedWithContext(IPlayer player, string eventName, Object[] args);
    [ExtensionAttribute]
public static bool EmitUnreliableLockedWithContext(IPlayer player, string eventName, Object[] args);
    [ExtensionAttribute]
public static bool EmitLocked(IPlayer player, string eventName, Object[] args);
    [ExtensionAttribute]
public static bool EmitUnreliableLocked(IPlayer player, string eventName, Object[] args);
}
internal class AltV.Net.Async.AltVAsync : object {
    private ITickScheduler scheduler;
    private Thread mainThread;
    internal Thread TickThread;
    public Action TickDelegate;
    public AltVAsync(ITickSchedulerFactory tickSchedulerFactory);
    private void FirstTick();
    internal Task Schedule(Action action);
    internal void ScheduleBlocking(Action action, SemaphoreSlim semaphoreSlim);
    internal void ScheduleBlockingThrows(Action action, SemaphoreSlim semaphoreSlim);
    internal Task Schedule(Action`1<object> action, object value);
    internal Task`1<TResult> Schedule(Func`1<TResult> action);
    internal Task`1<TResult> Schedule(Func`2<object, TResult> action, object value);
    internal void ScheduleNoneTask(Action action);
    internal void ScheduleNoneTask(Action`1<object> action, object value);
}
public abstract class AltV.Net.Async.AsyncBaseObjectPool`1 : object {
    private ConcurrentDictionary`2<IntPtr, TBaseObject> entities;
    private IBaseObjectFactory`1<TBaseObject> entityFactory;
    private bool forceAsync;
    protected AsyncBaseObjectPool`1(IBaseObjectFactory`1<TBaseObject> entityFactory, bool forceAsync);
    public abstract virtual UInt32 GetId(IntPtr entityPointer);
    public sealed virtual TBaseObject Create(ICore core, IntPtr entityPointer, UInt32 id);
    public sealed virtual void Add(TBaseObject entity);
    public sealed virtual bool Remove(TBaseObject entity);
    public sealed virtual bool Remove(IntPtr entityPointer);
    public sealed virtual TBaseObject GetOrCreate(ICore core, IntPtr entityPointer, UInt32 entityId);
    public sealed virtual TBaseObject Get(IntPtr entityPointer);
    public sealed virtual TBaseObject GetOrCreate(ICore core, IntPtr entityPointer);
    public sealed virtual IReadOnlyCollection`1<TBaseObject> GetAllObjects();
    public sealed virtual KeyValuePair`2[] GetObjectsArray();
    public abstract virtual void ForEach(IBaseObjectCallback`1<TBaseObject> baseObjectCallback);
    public abstract virtual Task ForEach(IAsyncBaseObjectCallback`1<TBaseObject> asyncBaseObjectCallback);
    public virtual void OnAdd(TBaseObject entity);
    public virtual void OnRemove(TBaseObject entity);
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("64")]
public class AltV.Net.Async.AsyncClientEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public AsyncClientEventAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class AltV.Net.Async.AsyncContext : object {
    private LinkedList`1<Action> actions;
    private LinkedList`1<IBaseObject> baseObjectRefs;
    private SemaphoreSlim semaphoreSlim;
    private bool throwOnExistsCheck;
    private bool createRefAutomatically;
    private AsyncContext(bool throwOnExistsCheck, bool createRefAutomatically);
    public static IAsyncContext Create(bool throwOnExistsCheck, bool createRefAutomatically);
    public sealed virtual void Enqueue(Action action);
    public sealed virtual void RunOnMainThreadBlocking(Action action);
    public sealed virtual void RunOnMainThreadBlockingAndRunAll(Action action);
    public sealed virtual bool CheckIfExists(IBaseObject baseObject);
    public sealed virtual bool CheckIfExists(IWorldObject worldObject);
    public sealed virtual bool CheckIfExists(IEntity entity);
    public sealed virtual bool CheckIfExistsOrCached(IBaseObject baseObject);
    public sealed virtual bool CheckIfExistsOrCached(IWorldObject worldObject);
    public sealed virtual bool CheckIfExistsOrCached(IEntity entity);
    public sealed virtual void RunAll();
    public void RunAll(bool dispose);
    public sealed virtual ValueTask DisposeAsync();
}
[ExtensionAttribute]
public static class AltV.Net.Async.AsyncContextExtensions : object {
    private static bool CheckIfExists(IBaseObject baseObject);
    private static bool CheckIfExistsOrCached(IBaseObject baseObject);
    [ExtensionAttribute]
public static bool CheckIfExistsNullable(IAsyncContext context, IBaseObject baseObject);
    [ExtensionAttribute]
public static bool CheckIfExistsNullable(IAsyncContext context, IWorldObject worldObject);
    [ExtensionAttribute]
public static bool CheckIfExistsNullable(IAsyncContext context, IEntity entity);
    [ExtensionAttribute]
public static bool CheckIfExistsOrCachedNullable(IAsyncContext context, IBaseObject baseObject);
    [ExtensionAttribute]
public static bool CheckIfExistsOrCachedNullable(IAsyncContext context, IWorldObject worldObject);
    [ExtensionAttribute]
public static bool CheckIfExistsOrCachedNullable(IAsyncContext context, IEntity entity);
    [ExtensionAttribute]
public static void RunOnMainThreadBlockingNullable(IAsyncContext context, Action action);
}
public class AltV.Net.Async.AsyncCore : Core {
    private Dictionary`2<string, List`1<Function>> asyncEventBusClient;
    private Dictionary`2<string, List`1<Function>> asyncEventBusServer;
    internal AsyncEventHandler`1<CheckpointAsyncDelegate> CheckpointAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerConnectAsyncDelegate> PlayerConnectAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerConnectDeniedAsyncDelegate> PlayerConnectDeniedAsyncEventHandler;
    internal AsyncEventHandler`1<ResourceEventAsyncDelegate> ResourceStartAsyncEventHandler;
    internal AsyncEventHandler`1<ResourceEventAsyncDelegate> ResourceStopAsyncEventHandler;
    internal AsyncEventHandler`1<ResourceEventAsyncDelegate> ResourceErrorAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerDamageAsyncDelegate> PlayerDamageAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerDeadAsyncDelegate> PlayerDeadAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerHealAsyncDelegate> PlayerHealAsyncEventHandler;
    internal AsyncEventHandler`1<ExplosionAsyncDelegate> ExplosionAsyncEventHandler;
    internal AsyncEventHandler`1<WeaponDamageAsyncDelegate> WeaponDamageAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerChangeVehicleSeatAsyncDelegate> PlayerChangeVehicleSeatAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerEnterVehicleAsyncDelegate> PlayerEnterVehicleAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerEnteringVehicleAsyncDelegate> PlayerEnteringVehicleAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerLeaveVehicleAsyncDelegate> PlayerLeaveVehicleAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerDisconnectAsyncDelegate> PlayerDisconnectAsyncEventHandler;
    internal AsyncEventHandler`1<BaseObjectCreateAsyncDelegate> BaseObjectCreateAsyncEventHandler;
    internal AsyncEventHandler`1<BaseObjectRemoveAsyncDelegate> BaseObjectRemoveAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerRemoveAsyncDelegate> PlayerRemoveAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleRemoveAsyncDelegate> VehicleRemoveAsyncEventHandler;
    internal AsyncEventHandler`1<PedRemoveAsyncDelegate> PedRemoveAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerClientEventAsyncDelegate> PlayerClientEventAsyncEventHandler;
    internal AsyncEventHandler`1<ConsoleCommandAsyncDelegate> ConsoleCommandAsyncEventHandler;
    internal AsyncEventHandler`1<MetaDataChangeAsyncDelegate> MetaDataChangeAsyncEventHandler;
    internal AsyncEventHandler`1<MetaDataChangeAsyncDelegate> SyncedMetaDataChangeAsyncEventHandler;
    internal AsyncEventHandler`1<ColShapeAsyncDelegate> ColShapeAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleDestroyAsyncDelegate> VehicleDestroyAsyncEventHandler;
    internal AsyncEventHandler`1<FireAsyncDelegate> FireAsyncEventHandler;
    internal AsyncEventHandler`1<StartProjectileAsyncDelegate> StartProjectileAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerWeaponChangeAsyncDelegate> PlayerWeaponChangeAsyncEventHandler;
    internal AsyncEventHandler`1<NetOwnerChangeAsyncDelegate> NetOwnerChangeAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleAttachAsyncDelegate> VehicleAttachAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleDetachAsyncDelegate> VehicleDetachAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleDamageAsyncDelegate> VehicleDamageAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleHornAsyncDelegate> VehicleHornAsyncEventHandler;
    internal AsyncEventHandler`1<ConnectionQueueAddAsyncDelegate> ConnectionQueueAddAsyncEventHandler;
    internal AsyncEventHandler`1<ConnectionQueueRemoveAsyncDelegate> ConnectionQueueRemoveAsyncEventHandler;
    internal AsyncEventHandler`1<ServerStartedAsyncDelegate> ServerStartedAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerRequestControlAsyncDelegate> PlayerRequestControlAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerChangeAnimationAsyncDelegate> PlayerChangeAnimationAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerChangeInteriorAsyncDelegate> PlayerChangeInteriorAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerDimensionChangeAsyncDelegate> PlayerDimensionChangeAsyncEventHandler;
    internal AsyncEventHandler`1<VehicleSirenAsyncDelegate> VehicleSirenAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerSpawnAsyncDelegate> PlayerSpawnAsyncEventHandler;
    internal AsyncEventHandler`1<RequestSyncedSceneAsyncEventDelegate> RequestSyncedSceneAsyncEventHandler;
    internal AsyncEventHandler`1<StartSyncedSceneAsyncEventDelegate> StartSyncedSceneAsyncEventHandler;
    internal AsyncEventHandler`1<StopSyncedSceneAsyncEventDelegate> StopSyncedSceneAsyncEventHandler;
    internal AsyncEventHandler`1<UpdateSyncedSceneAsyncEventDelegate> UpdateSyncedSceneAsyncEventHandler;
    internal AsyncEventHandler`1<ClientRequestObjectAsyncEventDelegate> ClientRequestObjectAsyncEventHandler;
    internal AsyncEventHandler`1<ClientDeleteObjectAsyncEventDelegate> ClientDeleteObjectAsyncEventHandler;
    internal AsyncEventHandler`1<GivePedScriptedTaskAsyncDelegate> GivePedScriptedTaskAsyncEventHandler;
    internal AsyncEventHandler`1<PedDamageAsyncDelegate> PedDamageAsyncEventHandler;
    internal AsyncEventHandler`1<PedDeadAsyncDelegate> PedDeadAsyncEventHandler;
    internal AsyncEventHandler`1<PedHealAsyncDelegate> PedHealAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerStartTalkingAsyncDelegate> PlayerStartTalkingAsyncEventHandler;
    internal AsyncEventHandler`1<PlayerStopTalkingAsyncDelegate> PlayerStopTalkingAsyncEventHandler;
    internal AsyncEventHandler`1<ScriptRpcAsyncDelegate> ScriptRpcAsyncEventHandler;
    internal AsyncEventHandler`1<ScriptRpcAnswerAsyncDelegate> ScriptRpcAnswerAsyncEventHandler;
    public AsyncCore(IntPtr nativePointer, IntPtr resourcePointer, AssemblyLoadContext assemblyLoadContext, ILibrary library, IPoolManager poolManager, INativeResourcePool nativeResourcePool);
    public virtual IEnumerable`1<string> GetRegisteredClientEvents();
    public virtual IEnumerable`1<string> GetRegisteredServerEvents();
    public virtual bool IsMainThread();
    public virtual void OnCheckPointEvent(ICheckpoint checkpoint, IWorldObject entity, bool state);
    public virtual void OnPlayerDeathEvent(IPlayer player, IEntity killer, UInt32 weapon);
    public virtual void OnPlayerHealEvent(IPlayer player, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual void OnPlayerConnectEvent(IPlayer player, string reason);
    public virtual void OnPlayerDamageEvent(IPlayer player, IEntity entity, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual void OnExplosionEvent(IntPtr eventPointer, IPlayer sourcePlayer, ExplosionType explosionType, Position position, UInt32 explosionFx, IEntity targetEntity);
    public virtual void OnWeaponDamageEvent(IntPtr eventPointer, IPlayer sourcePlayer, IEntity targetEntity, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart);
    public virtual void OnPlayerChangeVehicleSeatEvent(IVehicle vehicle, IPlayer player, byte oldSeat, byte newSeat);
    public virtual void OnPlayerEnterVehicleEvent(IVehicle vehicle, IPlayer player, byte seat);
    public virtual void OnPlayerEnteringVehicleEvent(IVehicle vehicle, IPlayer player, byte seat);
    public virtual void OnPlayerLeaveVehicleEvent(IVehicle vehicle, IPlayer player, byte seat);
    public virtual void OnPlayerDisconnectEvent(IPlayer player, string reason);
    public virtual void OnCreateBaseObjectEvent(IBaseObject baseObject);
    public virtual void OnRemoveBaseObjectEvent(IBaseObject baseObject);
    public virtual void OnPlayerRemoveEvent(IPlayer player);
    public virtual void OnVehicleRemoveEvent(IVehicle vehicle);
    public virtual void OnPedRemoveEvent(IPed ped);
    public virtual void OnClientEventEvent(IPlayer player, string name, IntPtr[] args, MValueConst[] mValues, Object[] objects);
    public virtual void OnServerEventEvent(string name, IntPtr[] args, MValueConst[] mValues, Object[] objects);
    public virtual void OnConsoleCommandEvent(string name, String[] args);
    public virtual void OnMetaDataChangeEvent(IEntity entity, string key, object value);
    public virtual void OnSyncedMetaDataChangeEvent(IEntity entity, string key, object value);
    public virtual void OnColShapeEvent(IColShape colShape, IWorldObject entity, bool state);
    public virtual void OnVehicleDestroyEvent(IVehicle vehicle);
    public virtual void OnFireEvent(IntPtr eventPointer, IPlayer player, FireInfo[] fires);
    public virtual void OnStartProjectileEvent(IntPtr eventPointer, IPlayer player, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash);
    public virtual void OnPlayerWeaponChangeEvent(IntPtr eventPointer, IPlayer player, UInt32 oldWeapon, UInt32 newWeapon);
    public virtual void OnNetOwnerChangeEvent(IEntity targetEntity, IPlayer oldPlayer, IPlayer newPlayer);
    public virtual void OnVehicleAttachEvent(IVehicle targetVehicle, IVehicle attachedVehicle);
    public virtual void OnVehicleDetachEvent(IVehicle targetVehicle, IVehicle detachedVehicle);
    public virtual void OnVehicleDamageEvent(IVehicle targetVehicle, IEntity sourceEntity, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash);
    public virtual void OnVehicleHornEvent(IntPtr eventPointer, IVehicle targetVehicle, IPlayer reporterPlayer, bool state);
    public virtual void OnConnectionQueueAddEvent(IConnectionInfo connectionInfo);
    public virtual void OnConnectionQueueRemoveEvent(IConnectionInfo connectionInfo);
    public virtual void OnServerStartedEvent();
    public virtual void OnPlayerRequestControlEvent(IntPtr eventPtr, IEntity target, IPlayer player);
    public virtual void OnPlayerChangeAnimationEvent(IPlayer player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName);
    public virtual void OnPlayerChangeInteriorEvent(IPlayer player, UInt32 oldIntLoc, UInt32 newIntLoc);
    public virtual void OnPlayerDimensionChangeEvent(IPlayer player, int oldDimension, int newDimension);
    public virtual void OnVehicleSirenEvent(IVehicle targetVehicle, bool state);
    public virtual void OnPlayerSpawnEvent(IPlayer player);
    public virtual void OnRequestSyncedSceneEvent(IntPtr eventPointer, IPlayer sourcePlayer, int sceneid);
    public virtual void OnStartSyncedSceneEvent(IPlayer sourcePlayer, int sceneid, Position position, Rotation rotation, UInt32 animDictHash, Dictionary`2<IEntity, UInt32> entityAndAnimHash);
    public virtual void OnStopSyncedSceneEvent(IPlayer sourcePlayer, int sceneid);
    public virtual void OnUpdateSyncedSceneEvent(IPlayer sourcePlayer, float startRate, int sceneid);
    public virtual void OnClientRequestObjectEvent(IntPtr eventPointer, IPlayer sourcePlayer, UInt32 model, Position position);
    public virtual void OnClientDeleteObjectEvent(IntPtr eventPointer, IPlayer sourcePlayer);
    public virtual void OnGivePedScriptedTaskEvent(IntPtr eventPointer, IPlayer sourcePlayer, IPed sourcePed, UInt32 taskType);
    public virtual void OnPlayerConnectDeniedEvent(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId);
    public virtual void OnResourceStartEvent(INativeResource resource);
    public virtual void OnResourceStopEvent(INativeResource resource);
    public virtual void OnResourceErrorEvent(INativeResource resource);
    public virtual void OnPedDamageEvent(IPed ped, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual void OnPedDeathEvent(IPed ped, IEntity killer, UInt32 weapon);
    public virtual void OnPedHealEvent(IPed ped, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual void OnPlayerStartTalkingEvent(IPlayer player);
    public virtual void OnPlayerStopTalkingEvent(IPlayer player);
    public virtual void OnScriptRPCEvent(IntPtr eventpointer, IPlayer target, string name, Object[] objects, ushort answerId, bool async);
    public virtual void OnScriptAnswerRPCEvent(IPlayer target, ushort answerid, IntPtr mValue, string answererror);
    public Function OnClient(string eventName, Function function);
    public void OffClient(string eventName, Function function);
    public Function OnServer(string eventName, Function function);
    public void OffServer(string eventName, Function function);
    public virtual void OnScriptLoaded(IScript script);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("AltV.Net.Async.AsyncCore/<<OnServerStartedEvent>b__98_0>d")]
[CompilerGeneratedAttribute]
private Task <OnServerStartedEvent>b__98_0();
}
public abstract class AltV.Net.Async.AsyncEntityPool`1 : object {
    private ConcurrentDictionary`2<IntPtr, TEntity> entities;
    private IEntityFactory`1<TEntity> entityFactory;
    private Dictionary`2<IntPtr, WeakReference`1<TEntity>> cache;
    private bool forceAsync;
    public AsyncEntityPool`1(IEntityFactory`1<TEntity> entityFactory, bool forceAsync);
    public abstract virtual UInt32 GetId(IntPtr entityPointer);
    public sealed virtual TEntity Create(ICore core, IntPtr entityPointer, UInt32 id);
    public sealed virtual TEntity Create(ICore core, IntPtr entityPointer);
    public sealed virtual void Add(TEntity entity);
    public sealed virtual bool Remove(TEntity entity);
    public sealed virtual bool Remove(IntPtr entityPointer);
    public sealed virtual TEntity Get(IntPtr entityPointer);
    public sealed virtual TEntity GetOrCreate(ICore core, IntPtr entityPointer);
    public sealed virtual TEntity GetOrCreate(ICore core, IntPtr entityPointer, UInt32 id);
    public sealed virtual IReadOnlyCollection`1<TEntity> GetAllEntities();
    public sealed virtual KeyValuePair`2[] GetEntitiesArray();
    public abstract virtual void ForEach(IBaseObjectCallback`1<TEntity> baseObjectCallback);
    public abstract virtual Task ForEach(IAsyncBaseObjectCallback`1<TEntity> asyncBaseObjectCallback);
    public virtual void OnAdd(TEntity entity);
    public virtual void OnRemove(TEntity entity);
    public sealed virtual void Dispose();
}
internal class AltV.Net.Async.AsyncEventHandler`1 : HashSetEventHandler`1<TEvent> {
    public AsyncEventHandler`1(EventType type);
    [AsyncStateMachineAttribute("AltV.Net.Async.AsyncEventHandler`1/<CallAsync>d__2")]
public Task CallAsync(Func`2<TEvent, Task> func);
    [AsyncStateMachineAttribute("AltV.Net.Async.AsyncEventHandler`1/<CallAsyncWithoutTask>d__3")]
public void CallAsyncWithoutTask(Func`2<TEvent, Task> callback);
    [AsyncStateMachineAttribute("AltV.Net.Async.AsyncEventHandler`1/<ExecuteEventAsync>d__4")]
public static Task ExecuteEventAsync(TEvent subscription, Func`2<TEvent, Task> callback);
    [AsyncStateMachineAttribute("AltV.Net.Async.AsyncEventHandler`1/<ExecuteEventAsyncWithoutTask>d__5")]
public static void ExecuteEventAsyncWithoutTask(TEvent subscription, Func`2<TEvent, Task> callback);
}
public abstract class AltV.Net.Async.AsyncResource : Resource {
    private AltVAsync altVAsync;
    private bool forceAsync;
    public AsyncResource(bool forceAsyncBaseObjects);
    public AsyncResource(ITickSchedulerFactory tickSchedulerFactory, bool forceAsyncBaseObjects);
    public virtual void OnTick();
    public virtual IEntityPool`1<IPlayer> GetPlayerPool(IEntityFactory`1<IPlayer> playerFactory);
    public virtual IEntityPool`1<IVehicle> GetVehiclePool(IEntityFactory`1<IVehicle> vehicleFactory);
    public virtual IEntityPool`1<IPed> GetPedPool(IEntityFactory`1<IPed> pedFactory);
    public virtual IBaseObjectPool`1<IBlip> GetBlipPool(IBaseObjectFactory`1<IBlip> blipFactory);
    public virtual IBaseObjectPool`1<IVirtualEntity> GetVirtualEntityPool(IBaseObjectFactory`1<IVirtualEntity> virtualEntityFactory);
    public virtual IBaseObjectPool`1<IVirtualEntityGroup> GetVirtualEntityGroupPool(IBaseObjectFactory`1<IVirtualEntityGroup> virtualEntityGroupFactory);
    public virtual IBaseObjectPool`1<ICheckpoint> GetCheckpointPool(IBaseObjectFactory`1<ICheckpoint> checkpointFactory);
    public virtual IBaseObjectPool`1<IVoiceChannel> GetVoiceChannelPool(IBaseObjectFactory`1<IVoiceChannel> voiceChannelFactory);
    public virtual IBaseObjectPool`1<IColShape> GetColShapePool(IBaseObjectFactory`1<IColShape> colShapeFactory);
    public virtual IBaseObjectPool`1<IMarker> GetMarkerPool(IBaseObjectFactory`1<IMarker> factory);
    public virtual Core GetCore(IntPtr nativePointer, IntPtr resourcePointer, AssemblyLoadContext assemblyLoadContext, ILibrary library, IPoolManager poolManager, INativeResourcePool nativeResourcePool);
    public virtual IBaseObjectFactory`1<IBlip> GetBlipFactory();
    public virtual IBaseObjectFactory`1<ICheckpoint> GetCheckpointFactory();
    public virtual IEntityFactory`1<IPlayer> GetPlayerFactory();
    public virtual IEntityFactory`1<IVehicle> GetVehicleFactory();
    public virtual IBaseObjectFactory`1<IColShape> GetColShapeFactory();
    public virtual IEntityFactory`1<IPed> GetPedFactory();
    public virtual IBaseObjectFactory`1<IVoiceChannel> GetVoiceChannelFactory();
    public virtual IBaseObjectFactory`1<IVirtualEntity> GetVirtualEntityFactory();
    public virtual IBaseObjectFactory`1<IVirtualEntityGroup> GetVirtualEntityGroupFactory();
    public virtual IBaseObjectFactory`1<IMarker> GetMarkerFactory();
    public virtual IEntityFactory`1<IObject> GetObjectFactory();
    public virtual IBaseObjectFactory`1<IConnectionInfo> GetConnectionInfoFactory();
}
[AttributeUsageAttribute("64")]
public class AltV.Net.Async.AsyncScriptEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ScriptEventType <EventType>k__BackingField;
    public ScriptEventType EventType { get; }
    public AsyncScriptEventAttribute(ScriptEventType eventType);
    [CompilerGeneratedAttribute]
public ScriptEventType get_EventType();
}
public class AltV.Net.Async.AsyncScriptRpcEvent : object {
    private IPlayer _target;
    private ushort _answerId;
    [CompilerGeneratedAttribute]
private IntPtr <ScriptRPCNativePointer>k__BackingField;
    public IntPtr ScriptRPCNativePointer { get; }
    public AsyncScriptRpcEvent(IPlayer target, ushort answerId);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_ScriptRPCNativePointer();
    public sealed virtual bool WillAnswer();
    public sealed virtual bool Answer(object answer);
    public sealed virtual bool AnswerWithError(string error);
}
[AttributeUsageAttribute("64")]
public class AltV.Net.Async.AsyncServerEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public AsyncServerEventAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
internal class AltV.Net.Async.ChannelTickScheduler : TaskScheduler {
    private Thread mainThread;
    [CompilerGeneratedAttribute]
private int <MaximumConcurrencyLevel>k__BackingField;
    private Channel`1<Task> tasks;
    private Task currentTask;
    private ChannelReader`1<Task> reader;
    private ChannelWriter`1<Task> writer;
    private TaskFactory taskFactory;
    public int MaximumConcurrencyLevel { get; }
    public ChannelTickScheduler(Thread mainThread);
    [CompilerGeneratedAttribute]
public virtual int get_MaximumConcurrencyLevel();
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    public sealed virtual void Schedule(Action action);
    public sealed virtual void ScheduleBlocking(Action action, SemaphoreSlim semaphoreSlim);
    public sealed virtual void ScheduleBlockingThrows(Action action, SemaphoreSlim semaphoreSlim);
    public sealed virtual void Schedule(Action`1<object> action, object state);
    public sealed virtual Task ScheduleTask(Action action);
    public sealed virtual Task ScheduleTask(Action`1<object> action, object state);
    public sealed virtual Task`1<TResult> ScheduleTask(Func`1<TResult> action);
    public sealed virtual Task`1<TResult> ScheduleTask(Func`2<object, TResult> action, object value);
    public sealed virtual void Tick();
}
public class AltV.Net.Async.ChannelTickSchedulerFactory : object {
    public sealed virtual ITickScheduler Create(Thread mainThread);
}
public class AltV.Net.Async.DefaultAsyncResource : AsyncResource {
    public virtual void OnStart();
    public virtual void OnStop();
}
public class AltV.Net.Async.DefaultTickSchedulerFactory : object {
    public sealed virtual ITickScheduler Create(Thread mainThread);
}
public class AltV.Net.Async.Elements.Entities.AsyncBaseObject : object {
    protected IBaseObject BaseObject;
    protected IAsyncContext AsyncContext;
    public IntPtr NativePointer { get; }
    public IntPtr BaseObjectNativePointer { get; }
    public UInt32 Id { get; }
    public ICore Core { get; }
    public bool Cached { get; }
    private ISharedCore AltV.Net.Shared.Elements.Entities.ISharedBaseObject.Core { get; }
    public bool Exists { get; public set; }
    public BaseObjectType Type { get; }
    public AsyncBaseObject(IBaseObject baseObject, IAsyncContext asyncContext);
    public sealed virtual IntPtr get_NativePointer();
    public sealed virtual IntPtr get_BaseObjectNativePointer();
    public sealed virtual UInt32 get_Id();
    public sealed virtual ICore get_Core();
    public sealed virtual bool get_Cached();
    private sealed virtual override ISharedCore AltV.Net.Shared.Elements.Entities.ISharedBaseObject.get_Core();
    public sealed virtual bool get_Exists();
    public sealed virtual void set_Exists(bool value);
    public sealed virtual BaseObjectType get_Type();
    public sealed virtual void SetMetaData(string key, object value);
    public sealed virtual void SetMetaData(Dictionary`2<string, object> metaData);
    public sealed virtual bool GetMetaData(string key, T& result);
    public void SetMetaData(string key, MValueConst& value);
    public sealed virtual void GetMetaData(string key, MValueConst& value);
    public sealed virtual void SetData(string key, object value);
    public sealed virtual bool GetData(string key, T& result);
    public sealed virtual bool HasData(string key);
    public sealed virtual IEnumerable`1<string> GetAllDataKeys();
    public sealed virtual void DeleteData(string key);
    public sealed virtual void ClearData();
    public sealed virtual void SetCached(IntPtr pointer);
    public sealed virtual bool HasMetaData(string key);
    public sealed virtual void DeleteMetaData(string key);
    public sealed virtual void CheckIfEntityExists();
    public sealed virtual void CheckIfEntityExistsOrCached();
    public sealed virtual void OnDestroy();
    public sealed virtual void Destroy();
    public sealed virtual bool HasSyncedMetaData(string key);
    public sealed virtual void DeleteSyncedMetaData(string key);
    public sealed virtual bool GetSyncedMetaData(string key, T1& result);
    public sealed virtual void SetSyncedMetaData(string key, object value);
    public sealed virtual void SetSyncedMetaData(Dictionary`2<string, object> metaData);
    public void SetSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void GetSyncedMetaData(string key, MValueConst& value);
    public bool GetSyncedMetaData(string key, Int32& value);
    public bool GetSyncedMetaData(string key, UInt32& value);
    public bool GetSyncedMetaData(string key, Single& value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    [CompilerGeneratedAttribute]
private void <Destroy>b__37_0();
}
public class AltV.Net.Async.Elements.Entities.AsyncBlip : AsyncWorldObject {
    protected IBlip Blip;
    public IntPtr BlipNativePointer { get; }
    public bool IsGlobal { get; public set; }
    public bool IsAttached { get; }
    public IEntity AttachedTo { get; }
    public byte BlipType { get; public set; }
    public UInt32 Sprite { get; public set; }
    public UInt32 Color { get; public set; }
    public bool Route { get; public set; }
    public Rgba RouteColor { get; public set; }
    public Vector2 ScaleXY { get; public set; }
    public UInt32 Display { get; public set; }
    public Rgba SecondaryColor { get; public set; }
    public UInt32 Alpha { get; public set; }
    public ushort FlashTimer { get; public set; }
    public ushort FlashInterval { get; public set; }
    public bool Friendly { get; public set; }
    public bool Bright { get; public set; }
    public ushort Number { get; public set; }
    public bool ShowCone { get; public set; }
    public bool Flashes { get; public set; }
    public bool FlashesAlternate { get; public set; }
    public bool ShortRange { get; public set; }
    public UInt32 Priority { get; public set; }
    public float Rotation { get; public set; }
    public string GxtName { get; public set; }
    public string Name { get; public set; }
    public bool Pulse { get; public set; }
    public bool MissionCreator { get; public set; }
    public bool TickVisible { get; public set; }
    public bool HeadingIndicatorVisible { get; public set; }
    public bool OutlineIndicatorVisible { get; public set; }
    public bool CrewIndicatorVisible { get; public set; }
    public UInt32 Category { get; public set; }
    public bool HighDetail { get; public set; }
    public bool Shrinked { get; public set; }
    public bool Visible { get; public set; }
    public bool IsHiddenOnLegend { get; public set; }
    public bool IsMinimalOnEdge { get; public set; }
    public bool IsUseHeightIndicatorOnEdge { get; public set; }
    public bool IsShortHeightThreshold { get; public set; }
    public AsyncBlip(IBlip blip, IAsyncContext asyncContext);
    public AsyncBlip(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_BlipNativePointer();
    public sealed virtual void AddTargetPlayer(IPlayer player);
    public sealed virtual void RemoveTargetPlayer(IPlayer player);
    public sealed virtual IReadOnlyCollection`1<IPlayer> GetTargets();
    public sealed virtual bool get_IsGlobal();
    public sealed virtual void set_IsGlobal(bool value);
    public sealed virtual bool get_IsAttached();
    public sealed virtual IEntity get_AttachedTo();
    public sealed virtual byte get_BlipType();
    public sealed virtual void set_BlipType(byte value);
    public sealed virtual UInt32 get_Sprite();
    public sealed virtual void set_Sprite(UInt32 value);
    public sealed virtual UInt32 get_Color();
    public sealed virtual void set_Color(UInt32 value);
    public sealed virtual bool get_Route();
    public sealed virtual void set_Route(bool value);
    public sealed virtual Rgba get_RouteColor();
    public sealed virtual void set_RouteColor(Rgba value);
    public sealed virtual Vector2 get_ScaleXY();
    public sealed virtual void set_ScaleXY(Vector2 value);
    public sealed virtual UInt32 get_Display();
    public sealed virtual void set_Display(UInt32 value);
    public sealed virtual Rgba get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(Rgba value);
    public sealed virtual UInt32 get_Alpha();
    public sealed virtual void set_Alpha(UInt32 value);
    public sealed virtual ushort get_FlashTimer();
    public sealed virtual void set_FlashTimer(ushort value);
    public sealed virtual ushort get_FlashInterval();
    public sealed virtual void set_FlashInterval(ushort value);
    public sealed virtual bool get_Friendly();
    public sealed virtual void set_Friendly(bool value);
    public sealed virtual bool get_Bright();
    public sealed virtual void set_Bright(bool value);
    public sealed virtual ushort get_Number();
    public sealed virtual void set_Number(ushort value);
    public sealed virtual bool get_ShowCone();
    public sealed virtual void set_ShowCone(bool value);
    public sealed virtual bool get_Flashes();
    public sealed virtual void set_Flashes(bool value);
    public sealed virtual bool get_FlashesAlternate();
    public sealed virtual void set_FlashesAlternate(bool value);
    public sealed virtual bool get_ShortRange();
    public sealed virtual void set_ShortRange(bool value);
    public sealed virtual UInt32 get_Priority();
    public sealed virtual void set_Priority(UInt32 value);
    public sealed virtual float get_Rotation();
    public sealed virtual void set_Rotation(float value);
    public sealed virtual string get_GxtName();
    public sealed virtual void set_GxtName(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_Pulse();
    public sealed virtual void set_Pulse(bool value);
    public sealed virtual bool get_MissionCreator();
    public sealed virtual void set_MissionCreator(bool value);
    public sealed virtual bool get_TickVisible();
    public sealed virtual void set_TickVisible(bool value);
    public sealed virtual bool get_HeadingIndicatorVisible();
    public sealed virtual void set_HeadingIndicatorVisible(bool value);
    public sealed virtual bool get_OutlineIndicatorVisible();
    public sealed virtual void set_OutlineIndicatorVisible(bool value);
    public sealed virtual bool get_CrewIndicatorVisible();
    public sealed virtual void set_CrewIndicatorVisible(bool value);
    public sealed virtual UInt32 get_Category();
    public sealed virtual void set_Category(UInt32 value);
    public sealed virtual bool get_HighDetail();
    public sealed virtual void set_HighDetail(bool value);
    public sealed virtual bool get_Shrinked();
    public sealed virtual void set_Shrinked(bool value);
    public sealed virtual void Fade(UInt32 opacity, UInt32 duration);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual bool get_IsHiddenOnLegend();
    public sealed virtual void set_IsHiddenOnLegend(bool value);
    public sealed virtual bool get_IsMinimalOnEdge();
    public sealed virtual void set_IsMinimalOnEdge(bool value);
    public sealed virtual bool get_IsUseHeightIndicatorOnEdge();
    public sealed virtual void set_IsUseHeightIndicatorOnEdge(bool value);
    public sealed virtual bool get_IsShortHeightThreshold();
    public sealed virtual void set_IsShortHeightThreshold(bool value);
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IBlip ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncCheckpoint : AsyncColShape {
    protected ICheckpoint Checkpoint;
    public IntPtr CheckpointNativePointer { get; }
    public byte CheckpointType { get; public set; }
    public float Height { get; public set; }
    public float Radius { get; public set; }
    public Rgba Color { get; public set; }
    public Position NextPosition { get; public set; }
    public bool Visible { get; public set; }
    public UInt32 StreamingDistance { get; }
    public AsyncCheckpoint(ICheckpoint checkpoint, IAsyncContext asyncContext);
    public AsyncCheckpoint(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_CheckpointNativePointer();
    public sealed virtual byte get_CheckpointType();
    public sealed virtual void set_CheckpointType(byte value);
    public sealed virtual float get_Height();
    public sealed virtual void set_Height(float value);
    public sealed virtual float get_Radius();
    public sealed virtual void set_Radius(float value);
    public sealed virtual Rgba get_Color();
    public sealed virtual void set_Color(Rgba value);
    public sealed virtual Position get_NextPosition();
    public sealed virtual void set_NextPosition(Position value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual UInt32 get_StreamingDistance();
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual ICheckpoint ToAsync(IAsyncContext asyncContext);
    public sealed virtual void SetStreamSyncedMetaData(string key, object value);
    public sealed virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public void SetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void DeleteStreamSyncedMetaData(string key);
    public sealed virtual bool HasStreamSyncedMetaData(string key);
    public bool GetStreamSyncedMetaData(string key, Int32& value);
    public bool GetStreamSyncedMetaData(string key, UInt32& value);
    public bool GetStreamSyncedMetaData(string key, Single& value);
    public sealed virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual bool GetStreamSyncedMetaData(string key, T& value);
    private sealed virtual override void AltV.Net.Elements.Entities.ICheckpoint.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncColShape : AsyncWorldObject {
    protected IColShape ColShape;
    public IntPtr ColShapeNativePointer { get; }
    public ColShapeType ColShapeType { get; }
    public bool IsPlayersOnly { get; public set; }
    public AsyncColShape(IColShape colShape, IAsyncContext asyncContext);
    public AsyncColShape(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_ColShapeNativePointer();
    public sealed virtual ColShapeType get_ColShapeType();
    public sealed virtual bool get_IsPlayersOnly();
    public sealed virtual void set_IsPlayersOnly(bool value);
    public sealed virtual bool IsEntityIdIn(UInt32 id);
    public sealed virtual bool IsPointIn(Vector3 point);
    public sealed virtual bool IsEntityIn(ISharedEntity entity);
    public sealed virtual bool IsEntityIn(IEntity entity);
    [ObsoleteAttribute("Use IsEntityIn instead")]
public sealed virtual bool IsPlayerIn(IPlayer entity);
    [ObsoleteAttribute("Use IsEntityIn instead")]
public sealed virtual bool IsVehicleIn(IVehicle entity);
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IColShape ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncConnectionInfo : AsyncBaseObject {
    protected IConnectionInfo ConnectionInfo;
    public IntPtr ConnectionInfoNativePointer { get; }
    public string Name { get; }
    public ulong SocialId { get; }
    public ulong HardwareIdHash { get; }
    public ulong HardwareIdExHash { get; }
    public string AuthToken { get; }
    public bool IsDebug { get; }
    public string Branch { get; }
    public ushort VersionMajor { get; }
    public ushort VersionMinor { get; }
    public string CdnUrl { get; }
    public ulong PasswordHash { get; }
    public string Ip { get; }
    public long DiscordUserId { get; }
    public string SocialName { get; }
    public string Text { get; public set; }
    public bool IsAccepted { get; }
    public string CloudId { get; }
    public CloudAuthResult CloudAuthResult { get; }
    public AsyncConnectionInfo(IConnectionInfo connectionInfo, IAsyncContext asyncContext);
    public AsyncConnectionInfo(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_ConnectionInfoNativePointer();
    public sealed virtual string get_Name();
    public sealed virtual ulong get_SocialId();
    public sealed virtual ulong get_HardwareIdHash();
    public sealed virtual ulong get_HardwareIdExHash();
    public sealed virtual string get_AuthToken();
    public sealed virtual bool get_IsDebug();
    public sealed virtual string get_Branch();
    public sealed virtual ushort get_VersionMajor();
    public sealed virtual ushort get_VersionMinor();
    public sealed virtual string get_CdnUrl();
    public sealed virtual ulong get_PasswordHash();
    public sealed virtual string get_Ip();
    public sealed virtual long get_DiscordUserId();
    public sealed virtual string get_SocialName();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual bool get_IsAccepted();
    public sealed virtual void Accept(bool sendNames);
    public sealed virtual void Decline(string reason);
    public sealed virtual string get_CloudId();
    public sealed virtual CloudAuthResult get_CloudAuthResult();
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IConnectionInfo ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncEntity : AsyncWorldObject {
    protected IEntity Entity;
    public IntPtr EntityNativePointer { get; }
    public IPlayer NetworkOwner { get; }
    private ISharedPlayer AltV.Net.Shared.Elements.Entities.ISharedEntity.NetworkOwner { get; }
    public Rotation Rotation { get; public set; }
    public UInt32 Model { get; }
    public bool Visible { get; public set; }
    public bool Streamed { get; public set; }
    public UInt32 Timestamp { get; }
    public UInt32 StreamingDistance { get; public set; }
    public bool Frozen { get; public set; }
    public bool Collision { get; public set; }
    public AsyncEntity(IEntity entity, IAsyncContext asyncContext);
    public sealed virtual IntPtr get_EntityNativePointer();
    public sealed virtual IPlayer get_NetworkOwner();
    private sealed virtual override ISharedPlayer AltV.Net.Shared.Elements.Entities.ISharedEntity.get_NetworkOwner();
    public sealed virtual Rotation get_Rotation();
    public sealed virtual void set_Rotation(Rotation value);
    public virtual UInt32 get_Model();
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual bool get_Streamed();
    public sealed virtual void set_Streamed(bool value);
    public sealed virtual void SetNetworkOwner(IPlayer player, bool disableMigration);
    public sealed virtual void ResetNetworkOwner();
    public sealed virtual void SetStreamSyncedMetaData(string key, object value);
    public sealed virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public sealed virtual bool GetStreamSyncedMetaData(string key, T1& result);
    public void SetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    public bool GetStreamSyncedMetaData(string key, Int32& value);
    public bool GetStreamSyncedMetaData(string key, UInt32& value);
    public bool GetStreamSyncedMetaData(string key, Single& value);
    public sealed virtual bool HasStreamSyncedMetaData(string key);
    public sealed virtual void DeleteStreamSyncedMetaData(string key);
    public sealed virtual void AttachToEntity(IEntity entity, ushort otherBoneId, ushort ownBoneId, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    public sealed virtual void AttachToEntity(IEntity entity, string otherBone, string ownBone, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    public sealed virtual void Detach();
    public sealed virtual UInt32 get_Timestamp();
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual void set_StreamingDistance(UInt32 value);
    public sealed virtual bool get_Frozen();
    public sealed virtual void set_Frozen(bool value);
    public sealed virtual bool get_Collision();
    public sealed virtual void set_Collision(bool value);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncMarker : AsyncWorldObject {
    protected IMarker Marker;
    public IntPtr MarkerNativePointer { get; }
    public UInt32 Id { get; }
    public bool IsGlobal { get; }
    public ISharedPlayer Target { get; }
    public Rgba Color { get; public set; }
    public bool Visible { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public Position Scale { get; public set; }
    public Rotation Rotation { get; public set; }
    public Position Direction { get; public set; }
    public UInt32 StreamingDistance { get; }
    public bool IsFaceCamera { get; public set; }
    public bool IsRotating { get; public set; }
    public bool IsBobUpDown { get; public set; }
    public AsyncMarker(IMarker marker, IAsyncContext asyncContext);
    public AsyncMarker(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_MarkerNativePointer();
    public sealed virtual UInt32 get_Id();
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IMarker ToAsync(IAsyncContext asyncContext);
    public sealed virtual bool get_IsGlobal();
    public sealed virtual ISharedPlayer get_Target();
    public sealed virtual Rgba get_Color();
    public sealed virtual void set_Color(Rgba value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual MarkerType get_MarkerType();
    public sealed virtual void set_MarkerType(MarkerType value);
    public sealed virtual Position get_Scale();
    public sealed virtual void set_Scale(Position value);
    public sealed virtual Rotation get_Rotation();
    public sealed virtual void set_Rotation(Rotation value);
    public sealed virtual Position get_Direction();
    public sealed virtual void set_Direction(Position value);
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual bool get_IsFaceCamera();
    public sealed virtual void set_IsFaceCamera(bool value);
    public sealed virtual bool get_IsRotating();
    public sealed virtual void set_IsRotating(bool value);
    public sealed virtual bool get_IsBobUpDown();
    public sealed virtual void set_IsBobUpDown(bool value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncObject : AsyncEntity {
    protected IObject Object;
    public IntPtr ObjectNativePointer { get; }
    public byte Alpha { get; public set; }
    public ushort LodDistance { get; public set; }
    public byte TextureVariation { get; public set; }
    public AsyncObject(IObject object, IAsyncContext asyncContext);
    public AsyncObject(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_ObjectNativePointer();
    public sealed virtual byte get_Alpha();
    public sealed virtual void set_Alpha(byte value);
    public sealed virtual ushort get_LodDistance();
    public sealed virtual void set_LodDistance(ushort value);
    public sealed virtual void PlaceOnGroundProperly();
    public sealed virtual void ActivatePhysics();
    public sealed virtual byte get_TextureVariation();
    public sealed virtual void set_TextureVariation(byte value);
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IObject ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncPed : AsyncEntity {
    protected IPed Ped;
    public IntPtr PedNativePointer { get; }
    public ushort Armour { get; public set; }
    public ushort Health { get; public set; }
    public ushort MaxHealth { get; public set; }
    public UInt32 CurrentWeapon { get; public set; }
    public AsyncPed(IPed ped, IAsyncContext asyncContext);
    public AsyncPed(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_PedNativePointer();
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IPed ToAsync(IAsyncContext asyncContext);
    public sealed virtual ushort get_Armour();
    public sealed virtual void set_Armour(ushort value);
    public sealed virtual ushort get_Health();
    public sealed virtual void set_Health(ushort value);
    public sealed virtual ushort get_MaxHealth();
    public sealed virtual void set_MaxHealth(ushort value);
    public sealed virtual UInt32 get_CurrentWeapon();
    public sealed virtual void set_CurrentWeapon(UInt32 value);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncPlayer : AsyncEntity {
    protected IPlayer Player;
    public IntPtr PlayerNativePointer { get; }
    public UInt32 Model { get; public set; }
    public bool IsConnected { get; }
    public string Name { get; }
    public ulong SocialClubId { get; }
    public ulong HardwareIdHash { get; }
    public ulong HardwareIdExHash { get; }
    public string AuthToken { get; }
    public long DiscordId { get; }
    public ushort Health { get; public set; }
    public ushort MaxHealth { get; public set; }
    public bool IsDead { get; }
    public bool IsJumping { get; }
    public bool IsInRagdoll { get; }
    public bool IsAiming { get; }
    public bool IsShooting { get; }
    public bool IsReloading { get; }
    public bool IsEnteringVehicle { get; }
    public bool IsLeavingVehicle { get; }
    public bool IsOnLadder { get; }
    public bool IsInMelee { get; }
    public bool IsInCover { get; }
    public ushort Armor { get; public set; }
    public ushort MaxArmor { get; public set; }
    public float MoveSpeed { get; }
    public float ForwardSpeed { get; }
    public float StrafeSpeed { get; }
    public Position AimPosition { get; }
    public Rotation HeadRotation { get; }
    public bool IsInVehicle { get; }
    public IVehicle Vehicle { get; }
    private ISharedVehicle AltV.Net.Shared.Elements.Entities.ISharedPlayer.Vehicle { get; }
    public UInt32 CurrentWeapon { get; public set; }
    public IEntity EntityAimingAt { get; }
    public UInt32 InteriorLocation { get; }
    private ISharedEntity AltV.Net.Shared.Elements.Entities.ISharedPlayer.EntityAimingAt { get; }
    public Position EntityAimOffset { get; }
    public bool IsFlashlightActive { get; }
    public byte Seat { get; }
    public UInt32 Ping { get; }
    public string Ip { get; }
    public bool IsSpawned { get; }
    public UInt32 CurrentAnimationDict { get; }
    public UInt32 CurrentAnimationName { get; }
    public bool IsParachuting { get; }
    public bool Invincible { get; public set; }
    public UInt32 LastDamagedBodyPart { get; public set; }
    public bool IsSuperJumpEnabled { get; }
    public bool IsCrouching { get; }
    public bool IsStealthy { get; }
    public HeadBlendData HeadBlendData { get; }
    public ushort EyeColor { get; }
    public byte HairColor { get; public set; }
    public byte HairHighlightColor { get; public set; }
    public bool SendNames { get; public set; }
    public string SocialClubName { get; }
    public string CloudId { get; }
    public CloudAuthResult CloudAuthResult { get; }
    public string BloodDamage { get; public set; }
    public AsyncPlayer(IPlayer player, IAsyncContext asyncContext);
    public AsyncPlayer(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_PlayerNativePointer();
    public sealed virtual UInt32 get_Model();
    public sealed virtual void set_Model(UInt32 value);
    public sealed virtual bool get_IsConnected();
    public sealed virtual string get_Name();
    public sealed virtual ulong get_SocialClubId();
    public sealed virtual ulong get_HardwareIdHash();
    public sealed virtual ulong get_HardwareIdExHash();
    public sealed virtual string get_AuthToken();
    public sealed virtual long get_DiscordId();
    public sealed virtual ushort get_Health();
    public sealed virtual void set_Health(ushort value);
    public sealed virtual ushort get_MaxHealth();
    public sealed virtual void set_MaxHealth(ushort value);
    public sealed virtual bool get_IsDead();
    public sealed virtual bool get_IsJumping();
    public sealed virtual bool get_IsInRagdoll();
    public sealed virtual bool get_IsAiming();
    public sealed virtual bool get_IsShooting();
    public sealed virtual bool get_IsReloading();
    public sealed virtual bool get_IsEnteringVehicle();
    public sealed virtual bool get_IsLeavingVehicle();
    public sealed virtual bool get_IsOnLadder();
    public sealed virtual bool get_IsInMelee();
    public sealed virtual bool get_IsInCover();
    public sealed virtual ushort get_Armor();
    public sealed virtual void set_Armor(ushort value);
    public sealed virtual ushort get_MaxArmor();
    public sealed virtual void set_MaxArmor(ushort value);
    public sealed virtual float get_MoveSpeed();
    public sealed virtual float get_ForwardSpeed();
    public sealed virtual float get_StrafeSpeed();
    public sealed virtual Position get_AimPosition();
    public sealed virtual Rotation get_HeadRotation();
    public sealed virtual bool get_IsInVehicle();
    public sealed virtual IVehicle get_Vehicle();
    private sealed virtual override ISharedVehicle AltV.Net.Shared.Elements.Entities.ISharedPlayer.get_Vehicle();
    public sealed virtual UInt32 get_CurrentWeapon();
    public sealed virtual void set_CurrentWeapon(UInt32 value);
    public sealed virtual IEntity get_EntityAimingAt();
    public sealed virtual UInt32 get_InteriorLocation();
    private sealed virtual override ISharedEntity AltV.Net.Shared.Elements.Entities.ISharedPlayer.get_EntityAimingAt();
    public sealed virtual Position get_EntityAimOffset();
    public sealed virtual bool get_IsFlashlightActive();
    public sealed virtual byte get_Seat();
    public sealed virtual UInt32 get_Ping();
    public sealed virtual string get_Ip();
    public sealed virtual bool get_IsSpawned();
    public sealed virtual UInt32 get_CurrentAnimationDict();
    public sealed virtual UInt32 get_CurrentAnimationName();
    public sealed virtual void Spawn(Position position, UInt32 delayMs);
    public sealed virtual void Spawn(UInt32 model, Position position, UInt32 delayMs);
    public sealed virtual void Spawn(PedModel model, Position position, UInt32 delayMs);
    public sealed virtual void Despawn();
    public sealed virtual void SetDateTime(int day, int month, int year, int hour, int minute, int second);
    public sealed virtual void SetDateTime(DateTime dateTime);
    public sealed virtual void SetWeather(UInt32 weather);
    public sealed virtual void SetWeather(WeatherType weatherType);
    public sealed virtual void GiveWeapon(UInt32 weapon, int ammo, bool selectWeapon);
    public sealed virtual void GiveWeapon(WeaponModel weaponModel, int ammo, bool selectWeapon);
    public sealed virtual bool RemoveWeapon(UInt32 weapon);
    public sealed virtual bool RemoveWeapon(WeaponModel weaponModel);
    public sealed virtual void RemoveAllWeapons(bool removeAllAmmo);
    public sealed virtual bool HasWeapon(UInt32 weapon);
    public sealed virtual bool HasWeapon(WeaponModel weapon);
    public sealed virtual void Kick(string reason);
    public sealed virtual void Emit(string eventName, Object[] args);
    public sealed virtual ushort EmitRPC(string name, Object[] args);
    public sealed virtual void EmitRPCAnswer(ushort answerId, object answer, string error);
    public sealed virtual void EmitUnreliable(string eventName, Object[] args);
    public sealed virtual void AddWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public sealed virtual void AddWeaponComponent(WeaponModel weaponModel, UInt32 weaponComponent);
    public sealed virtual void RemoveWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public sealed virtual void RemoveWeaponComponent(WeaponModel weaponModel, UInt32 weaponComponent);
    public sealed virtual bool HasWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public sealed virtual bool HasWeaponComponent(WeaponModel weapon, UInt32 weaponComponent);
    public sealed virtual void GetCurrentWeaponComponents(UInt32[]& weaponComponents);
    public sealed virtual bool get_IsParachuting();
    public sealed virtual void SetWeaponTintIndex(UInt32 weapon, byte tintIndex);
    public sealed virtual void SetWeaponTintIndex(WeaponModel weaponModel, byte tintIndex);
    public sealed virtual byte GetWeaponTintIndex(UInt32 weapon);
    public sealed virtual byte GetWeaponTintIndex(WeaponModel weapon);
    public sealed virtual byte GetCurrentWeaponTintIndex();
    public sealed virtual WeaponData[] GetWeapons();
    public sealed virtual void ClearBloodDamage();
    public sealed virtual Cloth GetClothes(byte component);
    public sealed virtual void GetClothes(byte component, Cloth& cloth);
    public sealed virtual bool SetClothes(byte component, ushort drawable, byte texture, byte palette);
    public sealed virtual DlcCloth GetDlcClothes(byte component);
    public sealed virtual void GetDlcClothes(byte component, DlcCloth& cloth);
    public sealed virtual bool SetDlcClothes(byte component, ushort drawable, byte texture, byte palette, UInt32 dlc);
    public sealed virtual bool ClearClothes(byte component);
    public sealed virtual Prop GetProps(byte component);
    public sealed virtual void GetProps(byte component, Prop& prop);
    public sealed virtual bool SetProps(byte component, ushort drawable, byte texture);
    public sealed virtual DlcProp GetDlcProps(byte component);
    public sealed virtual void GetDlcProps(byte component, DlcProp& prop);
    public sealed virtual bool SetDlcProps(byte component, ushort drawable, byte texture, UInt32 dlc);
    public sealed virtual void ClearProps(byte component);
    public sealed virtual bool IsEntityInStreamingRange(IEntity entity);
    public sealed virtual bool get_Invincible();
    public sealed virtual void set_Invincible(bool value);
    public sealed virtual UInt32 get_LastDamagedBodyPart();
    public sealed virtual void set_LastDamagedBodyPart(UInt32 value);
    public sealed virtual void SetIntoVehicle(IVehicle vehicle, byte seat);
    public sealed virtual bool get_IsSuperJumpEnabled();
    public sealed virtual bool get_IsCrouching();
    public sealed virtual bool get_IsStealthy();
    public sealed virtual void PlayAmbientSpeech(string speechName, string speechParam, UInt32 speechHash);
    public sealed virtual HeadBlendData get_HeadBlendData();
    public sealed virtual ushort get_EyeColor();
    public sealed virtual byte get_HairColor();
    public sealed virtual void set_HairColor(byte value);
    public sealed virtual byte get_HairHighlightColor();
    public sealed virtual void set_HairHighlightColor(byte value);
    public sealed virtual bool SetHeadOverlay(byte overlayId, byte index, float opacity);
    public sealed virtual bool RemoveHeadOverlay(byte overlayId);
    public sealed virtual bool SetHeadOverlayColor(byte overlayId, byte colorType, byte colorIndex, byte secondColorIndex);
    public sealed virtual HeadOverlay GetHeadOverlay(byte overlayID);
    public sealed virtual bool SetFaceFeature(byte index, float scale);
    public sealed virtual float GetFaceFeatureScale(byte index);
    public sealed virtual bool RemoveFaceFeature(byte index);
    public sealed virtual bool SetHeadBlendPaletteColor(byte id, Rgba rgba);
    public sealed virtual Rgba GetHeadBlendPaletteColor(byte id);
    public sealed virtual void RemoveHeadBlendPaletteColor();
    public sealed virtual void SetHeadBlendData(UInt32 shapeFirstID, UInt32 shapeSecondID, UInt32 shapeThirdID, UInt32 skinFirstID, UInt32 skinSecondID, UInt32 skinThirdID, float shapeMix, float skinMix, float thirdMix);
    public sealed virtual void RemoveHeadBlendData();
    public sealed virtual bool SetEyeColor(ushort eyeColor);
    public sealed virtual void GetLocalMetaData(string key, MValueConst& value);
    public sealed virtual bool GetLocalMetaData(string key, T& result);
    public sealed virtual void SetLocalMetaData(string key, object value);
    public void SetLocalMetaData(string key, MValueConst& value);
    public sealed virtual bool HasLocalMetaData(string key);
    public sealed virtual void DeleteLocalMetaData(string key);
    public sealed virtual bool get_SendNames();
    public sealed virtual void set_SendNames(bool value);
    public sealed virtual void PlayAnimation(string animDict, string animName, float blendInSpeed, float blendOutSpeed, int duration, int flags, float playbackRate, bool lockX, bool lockY, bool lockZ);
    public sealed virtual void ClearTasks();
    public sealed virtual string get_SocialClubName();
    public sealed virtual void SetAmmo(UInt32 ammoHash, ushort ammo);
    public sealed virtual ushort GetAmmo(UInt32 ammoHash);
    public sealed virtual void SetWeaponAmmo(UInt32 weaponHash, ushort ammo);
    public sealed virtual ushort GetWeaponAmmo(UInt32 weaponHash);
    public sealed virtual void SetAmmoSpecialType(UInt32 ammoHash, AmmoSpecialType ammoSpecialType);
    public sealed virtual AmmoSpecialType GetAmmoSpecialType(UInt32 ammoHash);
    public sealed virtual void SetAmmoFlags(UInt32 ammoHash, AmmoFlags ammoFlags);
    public sealed virtual AmmoFlags GetAmmoFlags(UInt32 ammoHash);
    public sealed virtual void SetAmmoMax(UInt32 ammoHash, int ammoMax);
    public sealed virtual int GetAmmoMax(UInt32 ammoHash);
    public sealed virtual void SetAmmoMax50(UInt32 ammoHash, int ammoMax);
    public sealed virtual int GetAmmoMax50(UInt32 ammoHash);
    public sealed virtual void SetAmmoMax100(UInt32 ammoHash, int ammoMax);
    public sealed virtual int GetAmmoMax100(UInt32 ammoHash);
    public sealed virtual void AddDecoration(UInt32 collection, UInt32 overlay, byte count);
    public sealed virtual void RemoveDecoration(UInt32 collection, UInt32 overlay);
    public sealed virtual void ClearDecorations();
    public sealed virtual Decoration[] GetDecorations();
    public sealed virtual void PlayScenario(string name);
    public sealed virtual string get_CloudId();
    public sealed virtual CloudAuthResult get_CloudAuthResult();
    public sealed virtual string get_BloodDamage();
    public sealed virtual void set_BloodDamage(string value);
    public sealed virtual Vector3 GetForwardVector();
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IPlayer ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IPlayer.SetLocalMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncVehicle : AsyncEntity {
    protected IVehicle Vehicle;
    public IntPtr VehicleNativePointer { get; }
    public IPlayer Driver { get; }
    public bool IsDestroyed { get; }
    public byte ModKit { get; public set; }
    public byte ModKitsCount { get; }
    public bool IsPrimaryColorRgb { get; }
    public byte PrimaryColor { get; public set; }
    public Rgba PrimaryColorRgb { get; public set; }
    public bool IsSecondaryColorRgb { get; }
    public byte SecondaryColor { get; public set; }
    public Rgba SecondaryColorRgb { get; public set; }
    public byte PearlColor { get; public set; }
    public byte WheelColor { get; public set; }
    public byte InteriorColor { get; public set; }
    public byte DashboardColor { get; public set; }
    public bool IsTireSmokeColorCustom { get; }
    public Rgba TireSmokeColor { get; public set; }
    public byte WheelType { get; }
    public byte WheelVariation { get; }
    public byte RearWheel { get; public set; }
    public bool CustomTires { get; public set; }
    public byte SpecialDarkness { get; public set; }
    public UInt32 NumberplateIndex { get; public set; }
    public string NumberplateText { get; public set; }
    public byte WindowTint { get; public set; }
    public byte DirtLevel { get; public set; }
    public Rgba NeonColor { get; public set; }
    public byte Livery { get; public set; }
    public byte LightState { get; public set; }
    public byte RoofLivery { get; public set; }
    public string AppearanceData { get; public set; }
    public IVehicle Attached { get; }
    public IVehicle AttachedTo { get; }
    public bool IsNeonActive { get; }
    public bool EngineOn { get; public set; }
    public bool IsHandbrakeActive { get; }
    public byte HeadlightColor { get; public set; }
    public UInt32 RadioStation { get; public set; }
    public IPlayer TimedExplosionCulprit { get; }
    public UInt32 TimedExplosionTime { get; }
    public bool SirenActive { get; public set; }
    public VehicleLockState LockState { get; public set; }
    public bool IsDaylightOn { get; }
    public bool IsNightlightOn { get; }
    public bool IsRoofClosed { get; public set; }
    public bool IsFlamethrowerActive { get; }
    public float LightsMultiplier { get; public set; }
    public string State { get; public set; }
    public int EngineHealth { get; public set; }
    public int PetrolTankHealth { get; public set; }
    public float SteeringAngle { get; }
    public byte WheelsCount { get; }
    public byte RepairsCount { get; }
    public UInt32 BodyHealth { get; public set; }
    public UInt32 BodyAdditionalHealth { get; public set; }
    public string HealthData { get; public set; }
    public bool HasArmoredWindows { get; }
    public bool TimedExplosion { get; }
    public string DamageData { get; public set; }
    public bool ManualEngineControl { get; public set; }
    public string ScriptData { get; public set; }
    public Position Velocity { get; }
    public bool DriftMode { get; public set; }
    public bool BoatAnchor { get; public set; }
    public bool IsMissionTrain { get; public set; }
    public sbyte TrainTrackId { get; public set; }
    public IVehicle TrainEngine { get; public set; }
    public sbyte TrainConfigIndex { get; public set; }
    public float TrainDistanceFromEngine { get; public set; }
    public bool IsTrainEngine { get; public set; }
    public bool IsTrainCaboose { get; public set; }
    public bool TrainDirection { get; public set; }
    public bool TrainPassengerCarriages { get; public set; }
    public bool TrainRenderDerailed { get; public set; }
    public bool TrainForceDoorsOpen { get; public set; }
    public float TrainCruiseSpeed { get; public set; }
    public sbyte TrainCarriageConfigIndex { get; public set; }
    public IVehicle TrainLinkedToBackward { get; public set; }
    public IVehicle TrainLinkedToForward { get; public set; }
    public UInt32 CounterMeasureCount { get; public set; }
    public bool HybridExtraActive { get; public set; }
    public byte HybridExtraState { get; public set; }
    public float RocketRefuelSpeed { get; public set; }
    public float ScriptMaxSpeed { get; public set; }
    public bool IsTowingDisabled { get; public set; }
    public Quaternion Quaternion { get; public set; }
    public bool IsHornActive { get; }
    public float AccelerationLevel { get; }
    public float BrakeLevel { get; }
    public List`1<PlayerSeat> Passengers { get; }
    public AsyncVehicle(IVehicle vehicle, IAsyncContext asyncContext);
    public AsyncVehicle(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_VehicleNativePointer();
    public sealed virtual IPlayer get_Driver();
    public sealed virtual bool get_IsDestroyed();
    public sealed virtual byte get_ModKit();
    public sealed virtual void set_ModKit(byte value);
    public sealed virtual byte get_ModKitsCount();
    public sealed virtual bool get_IsPrimaryColorRgb();
    public sealed virtual byte get_PrimaryColor();
    public sealed virtual void set_PrimaryColor(byte value);
    public sealed virtual Rgba get_PrimaryColorRgb();
    public sealed virtual void set_PrimaryColorRgb(Rgba value);
    public sealed virtual bool get_IsSecondaryColorRgb();
    public sealed virtual byte get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(byte value);
    public sealed virtual Rgba get_SecondaryColorRgb();
    public sealed virtual void set_SecondaryColorRgb(Rgba value);
    public sealed virtual byte get_PearlColor();
    public sealed virtual void set_PearlColor(byte value);
    public sealed virtual byte get_WheelColor();
    public sealed virtual void set_WheelColor(byte value);
    public sealed virtual byte get_InteriorColor();
    public sealed virtual void set_InteriorColor(byte value);
    public sealed virtual byte get_DashboardColor();
    public sealed virtual void set_DashboardColor(byte value);
    public sealed virtual bool get_IsTireSmokeColorCustom();
    public sealed virtual Rgba get_TireSmokeColor();
    public sealed virtual void set_TireSmokeColor(Rgba value);
    public sealed virtual byte get_WheelType();
    public sealed virtual byte get_WheelVariation();
    public sealed virtual byte get_RearWheel();
    public sealed virtual void set_RearWheel(byte value);
    public sealed virtual bool get_CustomTires();
    public sealed virtual void set_CustomTires(bool value);
    public sealed virtual byte get_SpecialDarkness();
    public sealed virtual void set_SpecialDarkness(byte value);
    public sealed virtual UInt32 get_NumberplateIndex();
    public sealed virtual void set_NumberplateIndex(UInt32 value);
    public sealed virtual string get_NumberplateText();
    public sealed virtual void set_NumberplateText(string value);
    public sealed virtual byte get_WindowTint();
    public sealed virtual void set_WindowTint(byte value);
    public sealed virtual byte get_DirtLevel();
    public sealed virtual void set_DirtLevel(byte value);
    public sealed virtual Rgba get_NeonColor();
    public sealed virtual void set_NeonColor(Rgba value);
    public sealed virtual byte get_Livery();
    public sealed virtual void set_Livery(byte value);
    public sealed virtual byte get_LightState();
    public sealed virtual void set_LightState(byte value);
    public sealed virtual byte get_RoofLivery();
    public sealed virtual void set_RoofLivery(byte value);
    public sealed virtual string get_AppearanceData();
    public sealed virtual void set_AppearanceData(string value);
    public sealed virtual IVehicle get_Attached();
    public sealed virtual IVehicle get_AttachedTo();
    public sealed virtual byte GetMod(byte category);
    public sealed virtual byte GetModsCount(byte category);
    public sealed virtual bool SetMod(byte category, byte id);
    public sealed virtual void SetWheels(byte type, byte variation);
    public sealed virtual bool IsExtraOn(byte extraId);
    public sealed virtual void ToggleExtra(byte extraId, bool state);
    public sealed virtual bool get_IsNeonActive();
    public sealed virtual void GetNeonActive(Boolean& left, Boolean& right, Boolean& top, Boolean& back);
    public sealed virtual void SetNeonActive(bool left, bool right, bool top, bool back);
    public sealed virtual bool get_EngineOn();
    public sealed virtual void set_EngineOn(bool value);
    public sealed virtual bool get_IsHandbrakeActive();
    public sealed virtual byte get_HeadlightColor();
    public sealed virtual void set_HeadlightColor(byte value);
    public sealed virtual UInt32 get_RadioStation();
    public sealed virtual void set_RadioStation(UInt32 value);
    public sealed virtual IPlayer get_TimedExplosionCulprit();
    public sealed virtual UInt32 get_TimedExplosionTime();
    public sealed virtual bool get_SirenActive();
    public sealed virtual void set_SirenActive(bool value);
    public sealed virtual VehicleLockState get_LockState();
    public sealed virtual void set_LockState(VehicleLockState value);
    public sealed virtual byte GetDoorState(byte doorId);
    public sealed virtual void SetDoorState(byte doorId, byte state);
    public sealed virtual bool IsWindowOpened(byte windowId);
    public sealed virtual void SetWindowOpened(byte windowId, bool state);
    public sealed virtual bool get_IsDaylightOn();
    public sealed virtual bool get_IsNightlightOn();
    public sealed virtual bool get_IsRoofClosed();
    public sealed virtual void set_IsRoofClosed(bool value);
    public sealed virtual bool get_IsFlamethrowerActive();
    public sealed virtual float get_LightsMultiplier();
    public sealed virtual void set_LightsMultiplier(float value);
    public sealed virtual string get_State();
    public sealed virtual void set_State(string value);
    public sealed virtual int get_EngineHealth();
    public sealed virtual void set_EngineHealth(int value);
    public sealed virtual int get_PetrolTankHealth();
    public sealed virtual void set_PetrolTankHealth(int value);
    public sealed virtual float get_SteeringAngle();
    public sealed virtual byte get_WheelsCount();
    public sealed virtual bool IsWheelBurst(byte wheelId);
    public sealed virtual void SetWheelBurst(byte wheelId, bool state);
    public sealed virtual bool DoesWheelHasTire(byte wheelId);
    public sealed virtual void SetWheelHasTire(byte wheelId, bool state);
    public sealed virtual bool IsWheelDetached(byte wheelId);
    public sealed virtual void SetWheelDetached(byte wheelId, bool state);
    public sealed virtual bool IsWheelOnFire(byte wheelId);
    public sealed virtual void SetWheelOnFire(byte wheelId, bool state);
    public sealed virtual float GetWheelHealth(byte wheelId);
    public sealed virtual void SetWheelHealth(byte wheelId, float health);
    public sealed virtual void SetWheelFixed(byte wheelId);
    public sealed virtual byte get_RepairsCount();
    public sealed virtual UInt32 get_BodyHealth();
    public sealed virtual void set_BodyHealth(UInt32 value);
    public sealed virtual UInt32 get_BodyAdditionalHealth();
    public sealed virtual void set_BodyAdditionalHealth(UInt32 value);
    public sealed virtual string get_HealthData();
    public sealed virtual void set_HealthData(string value);
    public sealed virtual byte GetPartDamageLevel(byte partId);
    public sealed virtual void SetPartDamageLevel(byte partId, byte damage);
    public sealed virtual byte GetPartBulletHoles(byte partId);
    public sealed virtual void SetPartBulletHoles(byte partId, byte shootsCount);
    public sealed virtual bool IsLightDamaged(byte lightId);
    public sealed virtual void SetLightDamaged(byte lightId, bool isDamaged);
    public sealed virtual bool IsWindowDamaged(byte windowId);
    public sealed virtual void SetWindowDamaged(byte windowId, bool isDamaged);
    public sealed virtual bool IsSpecialLightDamaged(byte specialLightId);
    public sealed virtual void SetSpecialLightDamaged(byte specialLightId, bool isDamaged);
    public sealed virtual bool get_HasArmoredWindows();
    public sealed virtual bool get_TimedExplosion();
    public sealed virtual float GetArmoredWindowHealth(byte windowId);
    public sealed virtual void SetArmoredWindowHealth(byte windowId, float health);
    public sealed virtual byte GetArmoredWindowShootCount(byte windowId);
    public sealed virtual void SetArmoredWindowShootCount(byte windowId, byte count);
    public sealed virtual byte GetBumperDamageLevel(byte bumperId);
    public sealed virtual void SetBumperDamageLevel(byte bumperId, byte damageLevel);
    public sealed virtual string get_DamageData();
    public sealed virtual void set_DamageData(string value);
    public sealed virtual bool get_ManualEngineControl();
    public sealed virtual void set_ManualEngineControl(bool value);
    public sealed virtual string get_ScriptData();
    public sealed virtual void set_ScriptData(string value);
    public sealed virtual void Repair();
    public sealed virtual void SetTimedExplosion(bool state, IPlayer culprit, UInt32 time);
    public sealed virtual Position get_Velocity();
    public sealed virtual bool get_DriftMode();
    public sealed virtual void set_DriftMode(bool value);
    public sealed virtual bool get_BoatAnchor();
    public sealed virtual void set_BoatAnchor(bool value);
    public sealed virtual bool SetSearchLight(bool state, IEntity spottedEntity);
    public sealed virtual bool get_IsMissionTrain();
    public sealed virtual void set_IsMissionTrain(bool value);
    public sealed virtual sbyte get_TrainTrackId();
    public sealed virtual void set_TrainTrackId(sbyte value);
    public sealed virtual IVehicle get_TrainEngine();
    public sealed virtual void set_TrainEngine(IVehicle value);
    public sealed virtual sbyte get_TrainConfigIndex();
    public sealed virtual void set_TrainConfigIndex(sbyte value);
    public sealed virtual float get_TrainDistanceFromEngine();
    public sealed virtual void set_TrainDistanceFromEngine(float value);
    public sealed virtual bool get_IsTrainEngine();
    public sealed virtual void set_IsTrainEngine(bool value);
    public sealed virtual bool get_IsTrainCaboose();
    public sealed virtual void set_IsTrainCaboose(bool value);
    public sealed virtual bool get_TrainDirection();
    public sealed virtual void set_TrainDirection(bool value);
    public sealed virtual bool get_TrainPassengerCarriages();
    public sealed virtual void set_TrainPassengerCarriages(bool value);
    public sealed virtual bool get_TrainRenderDerailed();
    public sealed virtual void set_TrainRenderDerailed(bool value);
    public sealed virtual bool get_TrainForceDoorsOpen();
    public sealed virtual void set_TrainForceDoorsOpen(bool value);
    public sealed virtual float get_TrainCruiseSpeed();
    public sealed virtual void set_TrainCruiseSpeed(float value);
    public sealed virtual sbyte get_TrainCarriageConfigIndex();
    public sealed virtual void set_TrainCarriageConfigIndex(sbyte value);
    public sealed virtual IVehicle get_TrainLinkedToBackward();
    public sealed virtual void set_TrainLinkedToBackward(IVehicle value);
    public sealed virtual IVehicle get_TrainLinkedToForward();
    public sealed virtual void set_TrainLinkedToForward(IVehicle value);
    public sealed virtual UInt32 get_CounterMeasureCount();
    public sealed virtual void set_CounterMeasureCount(UInt32 value);
    public sealed virtual bool get_HybridExtraActive();
    public sealed virtual void set_HybridExtraActive(bool value);
    public sealed virtual byte get_HybridExtraState();
    public sealed virtual void set_HybridExtraState(byte value);
    public sealed virtual float get_RocketRefuelSpeed();
    public sealed virtual void set_RocketRefuelSpeed(float value);
    public sealed virtual float get_ScriptMaxSpeed();
    public sealed virtual void set_ScriptMaxSpeed(float value);
    public sealed virtual bool get_IsTowingDisabled();
    public sealed virtual void set_IsTowingDisabled(bool value);
    public sealed virtual void SetWeaponCapacity(byte index, int capacity);
    public sealed virtual int GetWeaponCapacity(byte index);
    public sealed virtual Quaternion get_Quaternion();
    public sealed virtual void set_Quaternion(Quaternion value);
    public sealed virtual bool get_IsHornActive();
    public sealed virtual float get_AccelerationLevel();
    public sealed virtual float get_BrakeLevel();
    public sealed virtual List`1<PlayerSeat> get_Passengers();
    public sealed virtual void SetBadge(string textureDictionary, string texture, VehicleBadgePosition[] vehicleBadgePosition);
    public sealed virtual void SetBadge(UInt32 textureDictionary, UInt32 texture, VehicleBadgePosition[] vehicleBadgePosition);
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IVehicle ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncVirtualEntity : AsyncWorldObject {
    protected IVirtualEntity VirtualEntity;
    public IntPtr VirtualEntityNativePointer { get; }
    public UInt32 Id { get; }
    public ISharedVirtualEntityGroup Group { get; }
    public UInt32 StreamingDistance { get; }
    public bool Visible { get; public set; }
    public AsyncVirtualEntity(IVirtualEntity virtualEntity, IAsyncContext asyncContext);
    public AsyncVirtualEntity(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_VirtualEntityNativePointer();
    public sealed virtual UInt32 get_Id();
    public sealed virtual ISharedVirtualEntityGroup get_Group();
    public sealed virtual bool HasStreamSyncedMetaData(string key);
    public sealed virtual bool GetStreamSyncedMetaData(string key, T& result);
    public sealed virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual void SetStreamSyncedMetaData(string key, object value);
    public sealed virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public void SetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void DeleteStreamSyncedMetaData(string key);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IVirtualEntity ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IVirtualEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncVirtualEntityGroup : AsyncBaseObject {
    protected IVirtualEntityGroup VirtualEntityGroup;
    public IntPtr VirtualEntityGroupNativePointer { get; }
    public UInt32 Id { get; }
    public UInt32 MaxEntitiesInStream { get; }
    public AsyncVirtualEntityGroup(IVirtualEntityGroup virtualEntityGroup, IAsyncContext asyncContext);
    public AsyncVirtualEntityGroup(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_VirtualEntityGroupNativePointer();
    public sealed virtual UInt32 get_Id();
    public sealed virtual UInt32 get_MaxEntitiesInStream();
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IVirtualEntityGroup ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncVoiceChannel : AsyncBaseObject {
    protected IVoiceChannel VoiceChannel;
    public IntPtr VoiceChannelNativePointer { get; }
    public bool IsSpatial { get; }
    public float MaxDistance { get; }
    public UInt32 Filter { get; public set; }
    public int Priority { get; public set; }
    public IReadOnlyCollection`1<IPlayer> Players { get; }
    public ulong PlayerCount { get; }
    public AsyncVoiceChannel(IVoiceChannel voiceChannel, IAsyncContext asyncContext);
    public AsyncVoiceChannel(ICore core, IntPtr nativePointer, UInt32 id);
    public sealed virtual IntPtr get_VoiceChannelNativePointer();
    public sealed virtual bool get_IsSpatial();
    public sealed virtual float get_MaxDistance();
    public sealed virtual UInt32 get_Filter();
    public sealed virtual void set_Filter(UInt32 value);
    public sealed virtual int get_Priority();
    public sealed virtual void set_Priority(int value);
    public sealed virtual IReadOnlyCollection`1<IPlayer> get_Players();
    public sealed virtual ulong get_PlayerCount();
    public sealed virtual void AddPlayer(IPlayer player);
    public sealed virtual void RemovePlayer(IPlayer player);
    public sealed virtual void MutePlayer(IPlayer player);
    public sealed virtual void UnmutePlayer(IPlayer player);
    public sealed virtual bool HasPlayer(IPlayer player);
    public sealed virtual bool IsPlayerMuted(IPlayer player);
    [ObsoleteAttribute("Use new async API instead")]
public sealed virtual IVoiceChannel ToAsync(IAsyncContext asyncContext);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Entities.AsyncWorldObject : AsyncBaseObject {
    protected IWorldObject WorldObject;
    public IntPtr WorldObjectNativePointer { get; }
    public Position Position { get; public set; }
    public int Dimension { get; public set; }
    public AsyncWorldObject(IWorldObject worldObject, IAsyncContext asyncContext);
    public sealed virtual IntPtr get_WorldObjectNativePointer();
    public sealed virtual Position get_Position();
    public sealed virtual void set_Position(Position value);
    public sealed virtual int get_Dimension();
    public sealed virtual void set_Dimension(int value);
    public sealed virtual void SetPosition(ValueTuple`3<float, float, float> position);
    public sealed virtual void SetPosition(float x, float y, float z);
    public sealed virtual ValueTuple`3<float, float, float> GetPosition();
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Shared.Elements.Entities.ISharedBaseObject.SetMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Async.Elements.Factories.AsyncBlipFactory : object {
    public sealed virtual IBlip Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncCheckpointFactory : object {
    public sealed virtual ICheckpoint Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncColShapeFactory : object {
    public sealed virtual IColShape Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncConnectionInfoFactory : object {
    public sealed virtual IConnectionInfo Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncMarkerFactory : object {
    public sealed virtual IMarker Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncObjectFactory : object {
    public sealed virtual IObject Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncPedFactory : object {
    public sealed virtual IPed Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncPlayerFactory : object {
    public sealed virtual IPlayer Create(ICore core, IntPtr entityPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncVehicleFactory : object {
    public sealed virtual IVehicle Create(ICore core, IntPtr entityPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncVirtualEntityFactory : object {
    public sealed virtual IVirtualEntity Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncVirtualEntityGroupFactory : object {
    public sealed virtual IVirtualEntityGroup Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Factories.AsyncVoiceChannelFactory : object {
    public sealed virtual IVoiceChannel Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public class AltV.Net.Async.Elements.Pools.AsyncBlipPool : AsyncBaseObjectPool`1<IBlip> {
    public AsyncBlipPool(IBaseObjectFactory`1<IBlip> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncBlipPool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IBlip> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IBlip> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncCheckpointPool : AsyncBaseObjectPool`1<ICheckpoint> {
    public AsyncCheckpointPool(IBaseObjectFactory`1<ICheckpoint> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncCheckpointPool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<ICheckpoint> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<ICheckpoint> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncColShapePool : AsyncBaseObjectPool`1<IColShape> {
    public AsyncColShapePool(IBaseObjectFactory`1<IColShape> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncColShapePool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IColShape> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IColShape> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncMarkerPool : AsyncBaseObjectPool`1<IMarker> {
    public AsyncMarkerPool(IBaseObjectFactory`1<IMarker> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncMarkerPool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IMarker> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IMarker> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncPedPool : AsyncEntityPool`1<IPed> {
    public AsyncPedPool(IEntityFactory`1<IPed> entityFactory, bool forceAsync);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IPed> baseObjectCallback);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncPedPool/<ForEach>d__3")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IPed> asyncBaseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncPlayerPool : AsyncEntityPool`1<IPlayer> {
    public AsyncPlayerPool(IEntityFactory`1<IPlayer> entityFactory, bool forceAsync);
    public virtual UInt32 GetId(IntPtr entityPointer);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncPlayerPool/<ForEach>d__2")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IPlayer> asyncBaseObjectCallback);
    public virtual void ForEach(IBaseObjectCallback`1<IPlayer> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncVehiclePool : AsyncEntityPool`1<IVehicle> {
    public AsyncVehiclePool(IEntityFactory`1<IVehicle> entityFactory, bool forceAsync);
    public virtual UInt32 GetId(IntPtr entityPointer);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncVehiclePool/<ForEach>d__2")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IVehicle> asyncBaseObjectCallback);
    public virtual void ForEach(IBaseObjectCallback`1<IVehicle> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncVirtualEntityGroupPool : AsyncBaseObjectPool`1<IVirtualEntityGroup> {
    public AsyncVirtualEntityGroupPool(IBaseObjectFactory`1<IVirtualEntityGroup> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncVirtualEntityGroupPool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IVirtualEntityGroup> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IVirtualEntityGroup> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncVirtualEntityPool : AsyncBaseObjectPool`1<IVirtualEntity> {
    public AsyncVirtualEntityPool(IBaseObjectFactory`1<IVirtualEntity> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncVirtualEntityPool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IVirtualEntity> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IVirtualEntity> baseObjectCallback);
}
public class AltV.Net.Async.Elements.Pools.AsyncVoiceChannelPool : AsyncBaseObjectPool`1<IVoiceChannel> {
    public AsyncVoiceChannelPool(IBaseObjectFactory`1<IVoiceChannel> entityFactory, bool forceAsync);
    [AsyncStateMachineAttribute("AltV.Net.Async.Elements.Pools.AsyncVoiceChannelPool/<ForEach>d__1")]
public virtual Task ForEach(IAsyncBaseObjectCallback`1<IVoiceChannel> asyncBaseObjectCallback);
    public virtual UInt32 GetId(IntPtr entityPointer);
    public virtual void ForEach(IBaseObjectCallback`1<IVoiceChannel> baseObjectCallback);
}
public class AltV.Net.Async.Events.BaseObjectCreateAsyncDelegate : MulticastDelegate {
    public BaseObjectCreateAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IBaseObject baseObject);
    public virtual IAsyncResult BeginInvoke(IBaseObject baseObject, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.BaseObjectRemoveAsyncDelegate : MulticastDelegate {
    public BaseObjectRemoveAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IBaseObject baseObject);
    public virtual IAsyncResult BeginInvoke(IBaseObject baseObject, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.CheckpointAsyncDelegate : MulticastDelegate {
    public CheckpointAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(ICheckpoint checkpoint, IWorldObject entity, bool state);
    public virtual IAsyncResult BeginInvoke(ICheckpoint checkpoint, IWorldObject entity, bool state, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ClientDeleteObjectAsyncEventDelegate : MulticastDelegate {
    public ClientDeleteObjectAsyncEventDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer target);
    public virtual IAsyncResult BeginInvoke(IPlayer target, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ClientEventAsyncDelegate : MulticastDelegate {
    public ClientEventAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, Object[] args);
    public virtual IAsyncResult BeginInvoke(IPlayer player, Object[] args, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ClientRequestObjectAsyncEventDelegate : MulticastDelegate {
    public ClientRequestObjectAsyncEventDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer target, UInt32 model, Position position);
    public virtual IAsyncResult BeginInvoke(IPlayer target, UInt32 model, Position position, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ColShapeAsyncDelegate : MulticastDelegate {
    public ColShapeAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IColShape colShape, IWorldObject targetEntity, bool state);
    public virtual IAsyncResult BeginInvoke(IColShape colShape, IWorldObject targetEntity, bool state, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ConnectionQueueAddAsyncDelegate : MulticastDelegate {
    public ConnectionQueueAddAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IConnectionInfo connectionInfo);
    public virtual IAsyncResult BeginInvoke(IConnectionInfo connectionInfo, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ConnectionQueueRemoveAsyncDelegate : MulticastDelegate {
    public ConnectionQueueRemoveAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IConnectionInfo connectionInfo);
    public virtual IAsyncResult BeginInvoke(IConnectionInfo connectionInfo, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ConsoleCommandAsyncDelegate : MulticastDelegate {
    public ConsoleCommandAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(string name, String[] args);
    public virtual IAsyncResult BeginInvoke(string name, String[] args, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ExplosionAsyncDelegate : MulticastDelegate {
    public ExplosionAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, ExplosionType explosionType, Position position, UInt32 explosionFx, IEntity target);
    public virtual IAsyncResult BeginInvoke(IPlayer player, ExplosionType explosionType, Position position, UInt32 explosionFx, IEntity target, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.FireAsyncDelegate : MulticastDelegate {
    public FireAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, FireInfo[] fireInfos);
    public virtual IAsyncResult BeginInvoke(IPlayer player, FireInfo[] fireInfos, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.GivePedScriptedTaskAsyncDelegate : MulticastDelegate {
    public GivePedScriptedTaskAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer source, IPed target, UInt32 taskType);
    public virtual IAsyncResult BeginInvoke(IPlayer source, IPed target, UInt32 taskType, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.MetaDataChangeAsyncDelegate : MulticastDelegate {
    public MetaDataChangeAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IEntity entity, string key, object value);
    public virtual IAsyncResult BeginInvoke(IEntity entity, string key, object value, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.NetOwnerChangeAsyncDelegate : MulticastDelegate {
    public NetOwnerChangeAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IEntity target, IPlayer oldNetOwner, IPlayer newNetOwner);
    public virtual IAsyncResult BeginInvoke(IEntity target, IPlayer oldNetOwner, IPlayer newNetOwner, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PedDamageAsyncDelegate : MulticastDelegate {
    public PedDamageAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPed ped, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual IAsyncResult BeginInvoke(IPed ped, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PedDeadAsyncDelegate : MulticastDelegate {
    public PedDeadAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPed ped, IEntity killer, UInt32 weapon);
    public virtual IAsyncResult BeginInvoke(IPed ped, IEntity killer, UInt32 weapon, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PedHealAsyncDelegate : MulticastDelegate {
    public PedHealAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPed ped, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual IAsyncResult BeginInvoke(IPed ped, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PedRemoveAsyncDelegate : MulticastDelegate {
    public PedRemoveAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPed ped);
    public virtual IAsyncResult BeginInvoke(IPed ped, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerChangeAnimationAsyncDelegate : MulticastDelegate {
    public PlayerChangeAnimationAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName);
    public virtual IAsyncResult BeginInvoke(IPlayer player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerChangeInteriorAsyncDelegate : MulticastDelegate {
    public PlayerChangeInteriorAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, UInt32 oldIntLoc, UInt32 newIntLoc);
    public virtual IAsyncResult BeginInvoke(IPlayer player, UInt32 oldIntLoc, UInt32 newIntLoc, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerChangeVehicleSeatAsyncDelegate : MulticastDelegate {
    public PlayerChangeVehicleSeatAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle, IPlayer player, byte oldSeat, byte newSeat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte oldSeat, byte newSeat, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerClientEventAsyncDelegate : MulticastDelegate {
    public PlayerClientEventAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, string eventName, Object[] args);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string eventName, Object[] args, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerConnectAsyncDelegate : MulticastDelegate {
    public PlayerConnectAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, string reason);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string reason, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerConnectDeniedAsyncDelegate : MulticastDelegate {
    public PlayerConnectDeniedAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId);
    public virtual IAsyncResult BeginInvoke(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerDamageAsyncDelegate : MulticastDelegate {
    public PlayerDamageAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, IEntity attacker, ushort oldHealth, ushort oldArmor, ushort oldMaxHealth, ushort oldMaxArmor, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual IAsyncResult BeginInvoke(IPlayer player, IEntity attacker, ushort oldHealth, ushort oldArmor, ushort oldMaxHealth, ushort oldMaxArmor, UInt32 weapon, ushort healthDamage, ushort armourDamage, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerDeadAsyncDelegate : MulticastDelegate {
    public PlayerDeadAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, IEntity killer, UInt32 weapon);
    public virtual IAsyncResult BeginInvoke(IPlayer player, IEntity killer, UInt32 weapon, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerDimensionChangeAsyncDelegate : MulticastDelegate {
    public PlayerDimensionChangeAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, int oldDimension, int newDimension);
    public virtual IAsyncResult BeginInvoke(IPlayer player, int oldDimension, int newDimension, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerDisconnectAsyncDelegate : MulticastDelegate {
    public PlayerDisconnectAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, string reason);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string reason, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerEnteringVehicleAsyncDelegate : MulticastDelegate {
    public PlayerEnteringVehicleAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle, IPlayer player, byte seat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte seat, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerEnterVehicleAsyncDelegate : MulticastDelegate {
    public PlayerEnterVehicleAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle, IPlayer player, byte seat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte seat, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerHealAsyncDelegate : MulticastDelegate {
    public PlayerHealAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer target, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual IAsyncResult BeginInvoke(IPlayer target, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerLeaveVehicleAsyncDelegate : MulticastDelegate {
    public PlayerLeaveVehicleAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle, IPlayer player, byte seat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte seat, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerRemoveAsyncDelegate : MulticastDelegate {
    public PlayerRemoveAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player);
    public virtual IAsyncResult BeginInvoke(IPlayer player, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerRequestControlAsyncDelegate : MulticastDelegate {
    public PlayerRequestControlAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IEntity target, IPlayer player);
    public virtual IAsyncResult BeginInvoke(IEntity target, IPlayer player, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerSpawnAsyncDelegate : MulticastDelegate {
    public PlayerSpawnAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player);
    public virtual IAsyncResult BeginInvoke(IPlayer player, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerStartTalkingAsyncDelegate : MulticastDelegate {
    public PlayerStartTalkingAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer Player);
    public virtual IAsyncResult BeginInvoke(IPlayer Player, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerStopTalkingAsyncDelegate : MulticastDelegate {
    public PlayerStopTalkingAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer Player);
    public virtual IAsyncResult BeginInvoke(IPlayer Player, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.PlayerWeaponChangeAsyncDelegate : MulticastDelegate {
    public PlayerWeaponChangeAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, UInt32 oldWeapon, UInt32 newWeapon);
    public virtual IAsyncResult BeginInvoke(IPlayer player, UInt32 oldWeapon, UInt32 newWeapon, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.RequestSyncedSceneAsyncEventDelegate : MulticastDelegate {
    public RequestSyncedSceneAsyncEventDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer source, int sceneId);
    public virtual IAsyncResult BeginInvoke(IPlayer source, int sceneId, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ResourceEventAsyncDelegate : MulticastDelegate {
    public ResourceEventAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(INativeResource resource);
    public virtual IAsyncResult BeginInvoke(INativeResource resource, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ScriptRpcAnswerAsyncDelegate : MulticastDelegate {
    public ScriptRpcAnswerAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer target, ushort answerId, object answer, string answerError);
    public virtual IAsyncResult BeginInvoke(IPlayer target, ushort answerId, object answer, string answerError, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ScriptRpcAsyncDelegate : MulticastDelegate {
    public ScriptRpcAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IScriptRPCEvent scriptRpcEvent, IPlayer target, string name, Object[] args, ushort answerId);
    public virtual IAsyncResult BeginInvoke(IScriptRPCEvent scriptRpcEvent, IPlayer target, string name, Object[] args, ushort answerId, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ServerEventAsyncDelegate : MulticastDelegate {
    public ServerEventAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.ServerStartedAsyncDelegate : MulticastDelegate {
    public ServerStartedAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.StartProjectileAsyncDelegate : MulticastDelegate {
    public StartProjectileAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash);
    public virtual IAsyncResult BeginInvoke(IPlayer player, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.StartSyncedSceneAsyncEventDelegate : MulticastDelegate {
    public StartSyncedSceneAsyncEventDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer source, int sceneId, Position position, Rotation rotation, UInt32 animDictHash, Dictionary`2<IEntity, UInt32> entityAndAnimHash);
    public virtual IAsyncResult BeginInvoke(IPlayer source, int sceneId, Position position, Rotation rotation, UInt32 animDictHash, Dictionary`2<IEntity, UInt32> entityAndAnimHash, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.StopSyncedSceneAsyncEventDelegate : MulticastDelegate {
    public StopSyncedSceneAsyncEventDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer source, int sceneId);
    public virtual IAsyncResult BeginInvoke(IPlayer source, int sceneId, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.UpdateSyncedSceneAsyncEventDelegate : MulticastDelegate {
    public UpdateSyncedSceneAsyncEventDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer source, float startRate, int sceneId);
    public virtual IAsyncResult BeginInvoke(IPlayer source, float startRate, int sceneId, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleAttachAsyncDelegate : MulticastDelegate {
    public VehicleAttachAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle target, IVehicle attachedVehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IVehicle attachedVehicle, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleDamageAsyncDelegate : MulticastDelegate {
    public VehicleDamageAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle target, IEntity attacker, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IEntity attacker, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleDestroyAsyncDelegate : MulticastDelegate {
    public VehicleDestroyAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleDetachAsyncDelegate : MulticastDelegate {
    public VehicleDetachAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle target, IVehicle detachedVehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IVehicle detachedVehicle, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleHornAsyncDelegate : MulticastDelegate {
    public VehicleHornAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle target, IPlayer reporter, bool state);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IPlayer reporter, bool state, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleRemoveAsyncDelegate : MulticastDelegate {
    public VehicleRemoveAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.VehicleSirenAsyncDelegate : MulticastDelegate {
    public VehicleSirenAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IVehicle vehicle, bool state);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, bool state, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AltV.Net.Async.Events.WeaponDamageAsyncDelegate : MulticastDelegate {
    public WeaponDamageAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(IPlayer player, IEntity target, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart);
    public virtual IAsyncResult BeginInvoke(IPlayer player, IEntity target, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public interface AltV.Net.Async.IAsyncContext {
    public abstract virtual void Enqueue(Action action);
    public abstract virtual void RunOnMainThreadBlocking(Action action);
    public abstract virtual void RunOnMainThreadBlockingAndRunAll(Action action);
    public abstract virtual void RunAll();
    public abstract virtual bool CheckIfExists(IBaseObject baseObject);
    public abstract virtual bool CheckIfExists(IWorldObject worldObject);
    public abstract virtual bool CheckIfExists(IEntity entity);
    public abstract virtual bool CheckIfExistsOrCached(IBaseObject baseObject);
    public abstract virtual bool CheckIfExistsOrCached(IWorldObject worldObject);
    public abstract virtual bool CheckIfExistsOrCached(IEntity entity);
}
public interface AltV.Net.Async.IAsyncConvertible`1 {
    [ObsoleteAttribute("Use new async API instead")]
public abstract virtual TBaseObject ToAsync(IAsyncContext asyncContext);
    [ObsoleteAttribute("Use new async API instead")]
public virtual bool TryToAsync(IAsyncContext asyncContext, TBaseObject& player);
    [ObsoleteAttribute("Use new async API instead")]
public virtual TBaseObject ToAsync();
}
public interface AltV.Net.Async.ITickScheduler {
    public abstract virtual void Tick();
    public abstract virtual Task ScheduleTask(Action`1<object> action, object state);
    public abstract virtual Task ScheduleTask(Action action);
    public abstract virtual Task`1<TResult> ScheduleTask(Func`2<object, TResult> action, object value);
    public abstract virtual Task`1<TResult> ScheduleTask(Func`1<TResult> action);
    public abstract virtual void Schedule(Action action);
    public abstract virtual void Schedule(Action`1<object> action, object state);
    public abstract virtual void ScheduleBlocking(Action action, SemaphoreSlim semaphoreSlim);
    public abstract virtual void ScheduleBlockingThrows(Action action, SemaphoreSlim semaphoreSlim);
}
public interface AltV.Net.Async.ITickSchedulerFactory {
    public abstract virtual ITickScheduler Create(Thread mainThread);
}
public interface AltV.Net.Async.IVehicleBuilder {
    public abstract virtual IVehicleBuilder ModKit(byte value);
    public abstract virtual IVehicleBuilder PrimaryColor(byte value);
    public abstract virtual IVehicleBuilder PrimaryColorRgb(Rgba value);
    public abstract virtual IVehicleBuilder SecondaryColor(byte value);
    public abstract virtual IVehicleBuilder SecondaryColorRgb(Rgba value);
    public abstract virtual IVehicleBuilder PearlColor(byte value);
    public abstract virtual IVehicleBuilder WheelColor(byte value);
    public abstract virtual IVehicleBuilder InteriorColor(byte value);
    public abstract virtual IVehicleBuilder DashboardColor(byte value);
    public abstract virtual IVehicleBuilder TireSmokeColor(Rgba value);
    public abstract virtual IVehicleBuilder CustomTires(bool value);
    public abstract virtual IVehicleBuilder SpecialDarkness(byte value);
    public abstract virtual IVehicleBuilder NumberplateIndex(UInt32 value);
    public abstract virtual IVehicleBuilder NumberplateText(string value);
    public abstract virtual IVehicleBuilder WindowTint(byte value);
    public abstract virtual IVehicleBuilder DirtLevel(byte value);
    public abstract virtual IVehicleBuilder NeonColor(Rgba value);
    public abstract virtual IVehicleBuilder EngineOn(bool value);
    public abstract virtual IVehicleBuilder HeadlightColor(byte value);
    public abstract virtual IVehicleBuilder SirenActive(bool value);
    public abstract virtual IVehicleBuilder LockState(VehicleLockState value);
    public abstract virtual IVehicleBuilder IsRoofClosed(bool state);
    public abstract virtual IVehicleBuilder State(string value);
    public abstract virtual IVehicleBuilder EngineHealth(int value);
    public abstract virtual IVehicleBuilder PetrolTankHealth(int value);
    public abstract virtual IVehicleBuilder BodyHealth(UInt32 value);
    public abstract virtual IVehicleBuilder BodyAdditionalHealth(UInt32 value);
    public abstract virtual IVehicleBuilder HealthData(string value);
    public abstract virtual IVehicleBuilder DamageData(string value);
    public abstract virtual IVehicleBuilder Appearance(string value);
    public abstract virtual IVehicleBuilder ScriptData(string value);
    public abstract virtual Task`1<IVehicle> Build();
}
public static class AltV.Net.Async.MValueConstLocked : object {
    public static void CreateLocked(ISharedBaseObject baseObject, MValueConst& mValue);
    public static void CreateFromObjectLocked(object obj, MValueConst& mValue);
    internal static void CreateFromObjectsLocked(Object[] objects, MValueConst[] mValues);
}
public static class AltV.Net.Async.MValueConstLockedNoRefs : object {
    public static void CreateLocked(IPlayer player, MValueConst& mValue);
    public static void CreateLocked(IVehicle vehicle, MValueConst& mValue);
    public static void CreateLocked(IBlip blip, MValueConst& mValue);
    public static void CreateLocked(IPed ped, MValueConst& mValue);
    public static void CreateLocked(ICheckpoint checkpoint, MValueConst& mValue);
    public static void CreateFromObjectLocked(object obj, MValueConst& mValue);
    internal static void CreateFromObjectsLocked(Object[] objects, MValueConst[] mValues);
}
internal class AltV.Net.Async.QueueTickScheduler : TaskScheduler {
    private Thread mainThread;
    [CompilerGeneratedAttribute]
private int <MaximumConcurrencyLevel>k__BackingField;
    private ConcurrentQueue`1<Task> tasks;
    private Task currentTask;
    private int runs;
    private TaskFactory taskFactory;
    public int MaximumConcurrencyLevel { get; }
    public QueueTickScheduler(Thread mainThread);
    [CompilerGeneratedAttribute]
public virtual int get_MaximumConcurrencyLevel();
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    public sealed virtual void Schedule(Action action);
    public sealed virtual void ScheduleBlocking(Action action, SemaphoreSlim semaphoreSlim);
    public sealed virtual void ScheduleBlockingThrows(Action action, SemaphoreSlim semaphoreSlim);
    public sealed virtual void Schedule(Action`1<object> action, object state);
    public sealed virtual Task ScheduleTask(Action action);
    public sealed virtual Task ScheduleTask(Action`1<object> action, object state);
    public sealed virtual Task`1<TResult> ScheduleTask(Func`1<TResult> action);
    public sealed virtual Task`1<TResult> ScheduleTask(Func`2<object, TResult> action, object value);
    public sealed virtual void Tick();
}
public class AltV.Net.Async.QueueTickSchedulerFactory : object {
    public sealed virtual ITickScheduler Create(Thread mainThread);
}
internal class AltV.Net.Async.TickSynchronizationContext : SynchronizationContext {
    private static ConcurrentQueue`1<Action> Tasks;
    private static int _runs;
    private static Action _currentTask;
    private static TickSynchronizationContext();
    public virtual void Post(SendOrPostCallback d, object state);
    public static void Tick();
    public virtual SynchronizationContext CreateCopy();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
