public static class AltV.Net.Alt : object {
    internal static ICore CoreImpl;
    public static bool ThrowIfEntityDoesNotExist;
    private static string HourWithZero;
    private static string HourWithoutZero;
    private static string NumberWithZero;
    private static string NumberWithoutZero;
    private static string Ending;
    public static IEnumerable`1<Assembly> Assemblies { get; }
    public static WeakReference`1<AssemblyLoadContext> AssemblyLoadContext { get; }
    public static bool CacheEntities { get; public set; }
    public static bool IsDebug { get; }
    public static int NetTime { get; }
    public static ushort MaxStreamingPeds { get; public set; }
    public static ushort MaxStreamingObjects { get; public set; }
    public static ushort MaxStreamingVehicles { get; public set; }
    public static byte StreamerThreadCount { get; public set; }
    public static UInt32 StreamingTickRate { get; public set; }
    public static UInt32 StreamingDistance { get; public set; }
    public static UInt32 ColShapeTickRate { get; public set; }
    public static UInt32 MigrationDistance { get; public set; }
    public static byte MigrationThreadCount { get; public set; }
    public static UInt32 MigrationTickRate { get; public set; }
    public static byte SyncReceiveThreadCount { get; public set; }
    public static byte SyncSendThreadCount { get; public set; }
    public static string Branch { get; }
    public static string Version { get; }
    public static bool IsMainThread { get; }
    public static UInt32[] LoadedVehicleModels { get; }
    public static INativeResource Resource { get; }
    public static IEnumerable`1<Assembly> get_Assemblies();
    public static WeakReference`1<AssemblyLoadContext> get_AssemblyLoadContext();
    public static Assembly LoadAssemblyFromName(AssemblyName assemblyName);
    public static Assembly LoadAssemblyFromStream(Stream stream);
    public static Assembly LoadAssemblyFromStream(Stream stream, Stream assemblySymbols);
    public static Assembly LoadAssemblyFromPath(string path);
    public static Assembly LoadAssemblyFromNativeImagePath(string nativeImagePath, string assemblyPath);
    public static IBlip CreateBlip(bool global, byte type, Position pos, IPlayer[] targets);
    public static IBlip CreateBlip(bool global, byte type, IEntity entityAttach, IPlayer[] targets);
    public static IBlip CreateBlip(bool global, BlipType type, Position pos, IPlayer[] targets);
    public static IBlip CreateBlip(bool global, BlipType type, IEntity entityAttach, IPlayer[] targets);
    public static ICheckpoint CreateCheckpoint(byte type, Position pos, float radius, float height, Rgba color, UInt32 streamingDistance);
    public static ICheckpoint CreateCheckpoint(CheckpointType type, Position pos, float radius, float height, Rgba color, UInt32 streamingDistance);
    public static IColShape CreateColShapeCylinder(Position pos, float radius, float height);
    public static IColShape CreateColShapeSphere(Position pos, float radius);
    public static IColShape CreateColShapeCircle(Position pos, float radius);
    public static IColShape CreateColShapeCube(Position pos, Position pos2);
    public static IColShape CreateColShapeRectangle(float x1, float y1, float x2, float y2, float z);
    public static IColShape CreateColShapePolygon(float minZ, float maxZ, Vector2[] points);
    public static bool get_CacheEntities();
    public static void set_CacheEntities(bool value);
    public static bool get_IsDebug();
    public static void Emit(string eventName, Object[] args);
    public static void EmitAllClients(string eventName, Object[] args);
    public static void EmitClients(IPlayer[] clients, string eventName, Object[] args);
    public static void EmitEventUnreliableAllClients(string eventName, Object[] args);
    public static void EmitUnreliableClients(IPlayer[] clients, string eventName, Object[] args);
    public static IEnumerable`1<string> GetRegisteredClientEvents();
    public static IEnumerable`1<string> GetRegisteredServerEvents();
    public static void Log(string message);
    public static VehicleModelInfo GetVehicleModelInfo(UInt32 hash);
    public static VehicleModelInfo GetVehicleModelInfo(string name);
    public static Nullable`1<PedModelInfo> GetPedModelInfo(UInt32 hash);
    public static Nullable`1<PedModelInfo> GetPedModelInfo(string name);
    public static UInt32 Hash(string stringToHash);
    public static ulong HashPassword(string password);
    public static bool FileExists(string path);
    public static string ReadFile(string path);
    public static Byte[] ReadFileBinary(string path);
    public static IConfig GetServerConfig();
    public static IBaseObject GetBaseObjectById(BaseObjectType type, UInt32 id);
    public static IMetric RegisterMetric(string name, MetricType type, Dictionary`2<string, string> dataDict);
    public static void UnregisterMetric(IMetric metric);
    public static IReadOnlyCollection`1<IMetric> GetAllMetrics();
    public static VoiceConnectionState GetVoiceConnectionState();
    public static void SetWorldProfiler(bool state);
    public static IBaseObject[] GetClosestEntities(Position position, int range, int dimension, int limit, EntityType allowedTypes, Order order);
    public static IBaseObject[] GetEntitiesInDimension(int dimension, EntityType allowedTypes);
    public static IBaseObject[] GetEntitiesInRange(Position position, int range, int dimension, EntityType allowedTypes);
    public static int get_NetTime();
    public static void AddClientConfigKey(string key);
    public static ushort get_MaxStreamingPeds();
    public static void set_MaxStreamingPeds(ushort value);
    public static ushort get_MaxStreamingObjects();
    public static void set_MaxStreamingObjects(ushort value);
    public static ushort get_MaxStreamingVehicles();
    public static void set_MaxStreamingVehicles(ushort value);
    public static byte get_StreamerThreadCount();
    public static void set_StreamerThreadCount(byte value);
    public static UInt32 get_StreamingTickRate();
    public static void set_StreamingTickRate(UInt32 value);
    public static UInt32 get_StreamingDistance();
    public static void set_StreamingDistance(UInt32 value);
    public static UInt32 get_ColShapeTickRate();
    public static void set_ColShapeTickRate(UInt32 value);
    public static UInt32 get_MigrationDistance();
    public static void set_MigrationDistance(UInt32 value);
    public static byte get_MigrationThreadCount();
    public static void set_MigrationThreadCount(byte value);
    public static UInt32 get_MigrationTickRate();
    public static void set_MigrationTickRate(UInt32 value);
    public static byte get_SyncReceiveThreadCount();
    public static void set_SyncReceiveThreadCount(byte value);
    public static byte get_SyncSendThreadCount();
    public static void set_SyncSendThreadCount(byte value);
    public static bool HasBenefit(Benefit benefit);
    public static void StopServer();
    public static Nullable`1<WeaponModelInfo> GetWeaponModelInfo(UInt32 hash);
    public static void SetPassword(string password);
    public static void SetVoiceExternal(string host, ushort port);
    public static void SetVoiceExternalPublic(string host, ushort port);
    public static string get_Branch();
    public static string get_Version();
    public static bool get_IsMainThread();
    public static UInt32[] get_LoadedVehicleModels();
    public static void OnClient(string eventName, Action action, ClientEventParser`1<Action> parser);
    public static void OnClient(string eventName, Action`1<T1> action, ClientEventParser`1<Action`1<T1>> parser);
    public static void OnClient(string eventName, Action`2<T1, T2> action, ClientEventParser`1<Action`2<T1, T2>> parser);
    public static void OnClient(string eventName, Action`3<T1, T2, T3> action, ClientEventParser`1<Action`3<T1, T2, T3>> parser);
    public static void OnClient(string eventName, Action`4<T1, T2, T3, T4> action, ClientEventParser`1<Action`4<T1, T2, T3, T4>> parser);
    public static void OnClient(string eventName, Action`5<T1, T2, T3, T4, T5> action, ClientEventParser`1<Action`5<T1, T2, T3, T4, T5>> parser);
    public static void OnClient(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action, ClientEventParser`1<Action`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OnClient(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action, ClientEventParser`1<Action`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OnClient(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ClientEventParser`1<Action`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OnClient(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ClientEventParser`1<Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OnClient(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ClientEventParser`1<Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OnClient(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ClientEventParser`1<Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OnClient(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ClientEventParser`1<Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OnClient(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ClientEventParser`1<Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OnClient(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ClientEventParser`1<Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OnClient(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ClientEventParser`1<Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OnClient(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ClientEventParser`1<Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OnClient(string eventName, Func`1<T1> action, ClientEventParser`1<Func`1<T1>> parser);
    public static void OnClient(string eventName, Func`2<T1, T2> action, ClientEventParser`1<Func`2<T1, T2>> parser);
    public static void OnClient(string eventName, Func`3<T1, T2, T3> action, ClientEventParser`1<Func`3<T1, T2, T3>> parser);
    public static void OnClient(string eventName, Func`4<T1, T2, T3, T4> action, ClientEventParser`1<Func`4<T1, T2, T3, T4>> parser);
    public static void OnClient(string eventName, Func`5<T1, T2, T3, T4, T5> action, ClientEventParser`1<Func`5<T1, T2, T3, T4, T5>> parser);
    public static void OnClient(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action, ClientEventParser`1<Func`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OnClient(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action, ClientEventParser`1<Func`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OnClient(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ClientEventParser`1<Func`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OnClient(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ClientEventParser`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OnClient(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ClientEventParser`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OnClient(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ClientEventParser`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OnClient(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ClientEventParser`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OnClient(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ClientEventParser`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OnClient(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ClientEventParser`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OnClient(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ClientEventParser`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OnClient(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ClientEventParser`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OnClient(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action, ClientEventParser`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> parser);
    public static void OffClient(string eventName, Action action, ClientEventParser`1<Action> parser);
    public static void OffClient(string eventName, Action`1<T1> action, ClientEventParser`1<Action`1<T1>> parser);
    public static void OffClient(string eventName, Action`2<T1, T2> action, ClientEventParser`1<Action`2<T1, T2>> parser);
    public static void OffClient(string eventName, Action`3<T1, T2, T3> action, ClientEventParser`1<Action`3<T1, T2, T3>> parser);
    public static void OffClient(string eventName, Action`4<T1, T2, T3, T4> action, ClientEventParser`1<Action`4<T1, T2, T3, T4>> parser);
    public static void OffClient(string eventName, Action`5<T1, T2, T3, T4, T5> action, ClientEventParser`1<Action`5<T1, T2, T3, T4, T5>> parser);
    public static void OffClient(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action, ClientEventParser`1<Action`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OffClient(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action, ClientEventParser`1<Action`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OffClient(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ClientEventParser`1<Action`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OffClient(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ClientEventParser`1<Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OffClient(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ClientEventParser`1<Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OffClient(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ClientEventParser`1<Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OffClient(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ClientEventParser`1<Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OffClient(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ClientEventParser`1<Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OffClient(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ClientEventParser`1<Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OffClient(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ClientEventParser`1<Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OffClient(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ClientEventParser`1<Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OffClient(string eventName, Func`1<T1> action, ClientEventParser`1<Func`1<T1>> parser);
    public static void OffClient(string eventName, Func`2<T1, T2> action, ClientEventParser`1<Func`2<T1, T2>> parser);
    public static void OffClient(string eventName, Func`3<T1, T2, T3> action, ClientEventParser`1<Func`3<T1, T2, T3>> parser);
    public static void OffClient(string eventName, Func`4<T1, T2, T3, T4> action, ClientEventParser`1<Func`4<T1, T2, T3, T4>> parser);
    public static void OffClient(string eventName, Func`5<T1, T2, T3, T4, T5> action, ClientEventParser`1<Func`5<T1, T2, T3, T4, T5>> parser);
    public static void OffClient(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action, ClientEventParser`1<Func`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OffClient(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action, ClientEventParser`1<Func`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OffClient(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ClientEventParser`1<Func`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OffClient(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ClientEventParser`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OffClient(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ClientEventParser`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OffClient(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ClientEventParser`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OffClient(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ClientEventParser`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OffClient(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ClientEventParser`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OffClient(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ClientEventParser`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OffClient(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ClientEventParser`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OffClient(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ClientEventParser`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OffClient(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action, ClientEventParser`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> parser);
    public static void OnServer(string eventName, Action action, ServerEventParser`1<Action> parser);
    public static void OnServer(string eventName, Action`1<T1> action, ServerEventParser`1<Action`1<T1>> parser);
    public static void OnServer(string eventName, Action`2<T1, T2> action, ServerEventParser`1<Action`2<T1, T2>> parser);
    public static void OnServer(string eventName, Action`3<T1, T2, T3> action, ServerEventParser`1<Action`3<T1, T2, T3>> parser);
    public static void OnServer(string eventName, Action`4<T1, T2, T3, T4> action, ServerEventParser`1<Action`4<T1, T2, T3, T4>> parser);
    public static void OnServer(string eventName, Action`5<T1, T2, T3, T4, T5> action, ServerEventParser`1<Action`5<T1, T2, T3, T4, T5>> parser);
    public static void OnServer(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action, ServerEventParser`1<Action`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OnServer(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action, ServerEventParser`1<Action`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OnServer(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ServerEventParser`1<Action`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OnServer(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ServerEventParser`1<Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OnServer(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ServerEventParser`1<Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OnServer(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ServerEventParser`1<Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OnServer(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ServerEventParser`1<Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OnServer(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ServerEventParser`1<Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OnServer(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ServerEventParser`1<Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OnServer(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ServerEventParser`1<Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OnServer(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ServerEventParser`1<Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OnServer(string eventName, Func`1<T1> action, ServerEventParser`1<Func`1<T1>> parser);
    public static void OnServer(string eventName, Func`2<T1, T2> action, ServerEventParser`1<Func`2<T1, T2>> parser);
    public static void OnServer(string eventName, Func`3<T1, T2, T3> action, ServerEventParser`1<Func`3<T1, T2, T3>> parser);
    public static void OnServer(string eventName, Func`4<T1, T2, T3, T4> action, ServerEventParser`1<Func`4<T1, T2, T3, T4>> parser);
    public static void OnServer(string eventName, Func`5<T1, T2, T3, T4, T5> action, ServerEventParser`1<Func`5<T1, T2, T3, T4, T5>> parser);
    public static void OnServer(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action, ServerEventParser`1<Func`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OnServer(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action, ServerEventParser`1<Func`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OnServer(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ServerEventParser`1<Func`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OnServer(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ServerEventParser`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OnServer(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ServerEventParser`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OnServer(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ServerEventParser`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OnServer(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ServerEventParser`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OnServer(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ServerEventParser`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OnServer(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ServerEventParser`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OnServer(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ServerEventParser`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OnServer(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ServerEventParser`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OnServer(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action, ServerEventParser`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> parser);
    public static void OffServer(string eventName, Action action, ClientEventParser`1<Action> parser);
    public static void OffServer(string eventName, Action`1<T1> action, ClientEventParser`1<Action`1<T1>> parser);
    public static void OffServer(string eventName, Action`2<T1, T2> action, ClientEventParser`1<Action`2<T1, T2>> parser);
    public static void OffServer(string eventName, Action`3<T1, T2, T3> action, ClientEventParser`1<Action`3<T1, T2, T3>> parser);
    public static void OffServer(string eventName, Action`4<T1, T2, T3, T4> action, ClientEventParser`1<Action`4<T1, T2, T3, T4>> parser);
    public static void OffServer(string eventName, Action`5<T1, T2, T3, T4, T5> action, ClientEventParser`1<Action`5<T1, T2, T3, T4, T5>> parser);
    public static void OffServer(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action, ClientEventParser`1<Action`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OffServer(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action, ClientEventParser`1<Action`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OffServer(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ClientEventParser`1<Action`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OffServer(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ClientEventParser`1<Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OffServer(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ClientEventParser`1<Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OffServer(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ClientEventParser`1<Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OffServer(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ClientEventParser`1<Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OffServer(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ClientEventParser`1<Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OffServer(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ClientEventParser`1<Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OffServer(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ClientEventParser`1<Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OffServer(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ClientEventParser`1<Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OffServer(string eventName, Func`1<T1> action, ClientEventParser`1<Func`1<T1>> parser);
    public static void OffServer(string eventName, Func`2<T1, T2> action, ClientEventParser`1<Func`2<T1, T2>> parser);
    public static void OffServer(string eventName, Func`3<T1, T2, T3> action, ClientEventParser`1<Func`3<T1, T2, T3>> parser);
    public static void OffServer(string eventName, Func`4<T1, T2, T3, T4> action, ClientEventParser`1<Func`4<T1, T2, T3, T4>> parser);
    public static void OffServer(string eventName, Func`5<T1, T2, T3, T4, T5> action, ClientEventParser`1<Func`5<T1, T2, T3, T4, T5>> parser);
    public static void OffServer(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action, ClientEventParser`1<Func`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OffServer(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action, ClientEventParser`1<Func`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OffServer(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ClientEventParser`1<Func`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OffServer(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ClientEventParser`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OffServer(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ClientEventParser`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OffServer(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ClientEventParser`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OffServer(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ClientEventParser`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OffServer(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ClientEventParser`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OffServer(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ClientEventParser`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OffServer(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ClientEventParser`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OffServer(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ClientEventParser`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OffServer(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action, ClientEventParser`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> parser);
    public static void OffServer(string eventName, Action action, ServerEventParser`1<Action> parser);
    public static void OffServer(string eventName, Action`1<T1> action, ServerEventParser`1<Action`1<T1>> parser);
    public static void OffServer(string eventName, Action`2<T1, T2> action, ServerEventParser`1<Action`2<T1, T2>> parser);
    public static void OffServer(string eventName, Action`3<T1, T2, T3> action, ServerEventParser`1<Action`3<T1, T2, T3>> parser);
    public static void OffServer(string eventName, Action`4<T1, T2, T3, T4> action, ServerEventParser`1<Action`4<T1, T2, T3, T4>> parser);
    public static void OffServer(string eventName, Action`5<T1, T2, T3, T4, T5> action, ServerEventParser`1<Action`5<T1, T2, T3, T4, T5>> parser);
    public static void OffServer(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action, ServerEventParser`1<Action`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OffServer(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action, ServerEventParser`1<Action`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OffServer(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ServerEventParser`1<Action`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OffServer(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ServerEventParser`1<Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OffServer(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ServerEventParser`1<Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OffServer(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ServerEventParser`1<Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OffServer(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ServerEventParser`1<Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OffServer(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ServerEventParser`1<Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OffServer(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ServerEventParser`1<Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OffServer(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ServerEventParser`1<Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OffServer(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ServerEventParser`1<Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OffServer(string eventName, Func`1<T1> action, ServerEventParser`1<Func`1<T1>> parser);
    public static void OffServer(string eventName, Func`2<T1, T2> action, ServerEventParser`1<Func`2<T1, T2>> parser);
    public static void OffServer(string eventName, Func`3<T1, T2, T3> action, ServerEventParser`1<Func`3<T1, T2, T3>> parser);
    public static void OffServer(string eventName, Func`4<T1, T2, T3, T4> action, ServerEventParser`1<Func`4<T1, T2, T3, T4>> parser);
    public static void OffServer(string eventName, Func`5<T1, T2, T3, T4, T5> action, ServerEventParser`1<Func`5<T1, T2, T3, T4, T5>> parser);
    public static void OffServer(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action, ServerEventParser`1<Func`6<T1, T2, T3, T4, T5, T6>> parser);
    public static void OffServer(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action, ServerEventParser`1<Func`7<T1, T2, T3, T4, T5, T6, T7>> parser);
    public static void OffServer(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action, ServerEventParser`1<Func`8<T1, T2, T3, T4, T5, T6, T7, T8>> parser);
    public static void OffServer(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, ServerEventParser`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> parser);
    public static void OffServer(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, ServerEventParser`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> parser);
    public static void OffServer(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, ServerEventParser`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> parser);
    public static void OffServer(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, ServerEventParser`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> parser);
    public static void OffServer(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, ServerEventParser`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> parser);
    public static void OffServer(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, ServerEventParser`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> parser);
    public static void OffServer(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, ServerEventParser`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> parser);
    public static void OffServer(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, ServerEventParser`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> parser);
    public static void OffServer(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action, ServerEventParser`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> parser);
    public static void add_OnCheckpoint(CheckpointDelegate value);
    public static void remove_OnCheckpoint(CheckpointDelegate value);
    public static void add_OnPlayerConnect(PlayerConnectDelegate value);
    public static void remove_OnPlayerConnect(PlayerConnectDelegate value);
    public static void add_OnBaseObjectCreate(BaseObjectCreateDelegate value);
    public static void remove_OnBaseObjectCreate(BaseObjectCreateDelegate value);
    public static void add_OnBaseObjectRemove(BaseObjectRemoveDelegate value);
    public static void remove_OnBaseObjectRemove(BaseObjectRemoveDelegate value);
    public static void add_OnPlayerConnectDenied(PlayerConnectDeniedDelegate value);
    public static void remove_OnPlayerConnectDenied(PlayerConnectDeniedDelegate value);
    public static void add_OnAnyResourceStart(ResourceEventDelegate value);
    public static void remove_OnAnyResourceStart(ResourceEventDelegate value);
    public static void add_OnAnyResourceStop(ResourceEventDelegate value);
    public static void remove_OnAnyResourceStop(ResourceEventDelegate value);
    public static void add_OnAnyResourceError(ResourceEventDelegate value);
    public static void remove_OnAnyResourceError(ResourceEventDelegate value);
    public static void add_OnPlayerDamage(PlayerDamageDelegate value);
    public static void remove_OnPlayerDamage(PlayerDamageDelegate value);
    public static void add_OnPlayerDead(PlayerDeadDelegate value);
    public static void remove_OnPlayerDead(PlayerDeadDelegate value);
    public static void add_OnPlayerHeal(PlayerHealDelegate value);
    public static void remove_OnPlayerHeal(PlayerHealDelegate value);
    public static void add_OnExplosion(ExplosionDelegate value);
    public static void remove_OnExplosion(ExplosionDelegate value);
    public static void add_OnWeaponDamage(WeaponDamageDelegate value);
    public static void remove_OnWeaponDamage(WeaponDamageDelegate value);
    public static void add_OnPlayerDisconnect(PlayerDisconnectDelegate value);
    public static void remove_OnPlayerDisconnect(PlayerDisconnectDelegate value);
    public static void add_OnPlayerRemove(PlayerRemoveDelegate value);
    public static void remove_OnPlayerRemove(PlayerRemoveDelegate value);
    public static void add_OnVehicleRemove(VehicleRemoveDelegate value);
    public static void remove_OnVehicleRemove(VehicleRemoveDelegate value);
    public static void add_OnPedRemove(PedRemoveDelegate value);
    public static void remove_OnPedRemove(PedRemoveDelegate value);
    public static void add_OnPlayerChangeVehicleSeat(PlayerChangeVehicleSeatDelegate value);
    public static void remove_OnPlayerChangeVehicleSeat(PlayerChangeVehicleSeatDelegate value);
    public static void add_OnPlayerEnterVehicle(PlayerEnterVehicleDelegate value);
    public static void remove_OnPlayerEnterVehicle(PlayerEnterVehicleDelegate value);
    public static void add_OnPlayerEnteringVehicle(PlayerEnteringVehicleDelegate value);
    public static void remove_OnPlayerEnteringVehicle(PlayerEnteringVehicleDelegate value);
    public static void add_OnPlayerLeaveVehicle(PlayerLeaveVehicleDelegate value);
    public static void remove_OnPlayerLeaveVehicle(PlayerLeaveVehicleDelegate value);
    public static void add_OnPlayerEvent(PlayerClientEventDelegate value);
    public static void remove_OnPlayerEvent(PlayerClientEventDelegate value);
    public static void add_OnPlayerCustomEvent(PlayerClientCustomEventDelegate value);
    public static void remove_OnPlayerCustomEvent(PlayerClientCustomEventDelegate value);
    public static void add_OnServerEvent(ServerEventEventDelegate value);
    public static void remove_OnServerEvent(ServerEventEventDelegate value);
    public static void add_OnServerCustomEvent(ServerCustomEventEventDelegate value);
    public static void remove_OnServerCustomEvent(ServerCustomEventEventDelegate value);
    public static void add_OnConsoleCommand(ConsoleCommandDelegate value);
    public static void remove_OnConsoleCommand(ConsoleCommandDelegate value);
    public static void add_OnMetaDataChange(MetaDataChangeDelegate value);
    public static void remove_OnMetaDataChange(MetaDataChangeDelegate value);
    public static void add_OnSyncedMetaDataChange(MetaDataChangeDelegate value);
    public static void remove_OnSyncedMetaDataChange(MetaDataChangeDelegate value);
    public static void add_OnColShape(ColShapeDelegate value);
    public static void remove_OnColShape(ColShapeDelegate value);
    public static void add_OnVehicleDestroy(VehicleDestroyDelegate value);
    public static void remove_OnVehicleDestroy(VehicleDestroyDelegate value);
    public static void add_OnFire(FireDelegate value);
    public static void remove_OnFire(FireDelegate value);
    public static void add_OnStartProjectile(StartProjectileDelegate value);
    public static void remove_OnStartProjectile(StartProjectileDelegate value);
    public static void add_OnPlayerWeaponChange(PlayerWeaponChangeDelegate value);
    public static void remove_OnPlayerWeaponChange(PlayerWeaponChangeDelegate value);
    public static void add_OnNetworkOwnerChange(NetOwnerChangeDelegate value);
    public static void remove_OnNetworkOwnerChange(NetOwnerChangeDelegate value);
    public static void add_OnVehicleAttach(VehicleAttachDelegate value);
    public static void remove_OnVehicleAttach(VehicleAttachDelegate value);
    public static void add_OnVehicleDetach(VehicleDetachDelegate value);
    public static void remove_OnVehicleDetach(VehicleDetachDelegate value);
    public static void add_OnVehicleDamage(VehicleDamageDelegate value);
    public static void remove_OnVehicleDamage(VehicleDamageDelegate value);
    public static void add_OnVehicleHorn(VehicleHornDelegate value);
    public static void remove_OnVehicleHorn(VehicleHornDelegate value);
    public static void add_OnConnectionQueueAdd(ConnectionQueueAddDelegate value);
    public static void remove_OnConnectionQueueAdd(ConnectionQueueAddDelegate value);
    public static void add_OnConnectionQueueRemove(ConnectionQueueRemoveDelegate value);
    public static void remove_OnConnectionQueueRemove(ConnectionQueueRemoveDelegate value);
    public static void add_OnServerStarted(ServerStartedDelegate value);
    public static void remove_OnServerStarted(ServerStartedDelegate value);
    public static void add_OnPlayerRequestControl(PlayerRequestControlDelegate value);
    public static void remove_OnPlayerRequestControl(PlayerRequestControlDelegate value);
    public static void add_OnPlayerChangeAnimation(PlayerChangeAnimationDelegate value);
    public static void remove_OnPlayerChangeAnimation(PlayerChangeAnimationDelegate value);
    public static void add_OnPlayerChangeInterior(PlayerChangeInteriorDelegate value);
    public static void remove_OnPlayerChangeInterior(PlayerChangeInteriorDelegate value);
    public static void add_OnPlayerDimensionChange(PlayerDimensionChangeDelegate value);
    public static void remove_OnPlayerDimensionChange(PlayerDimensionChangeDelegate value);
    public static void add_OnVehicleSiren(VehicleSirenDelegate value);
    public static void remove_OnVehicleSiren(VehicleSirenDelegate value);
    public static void add_OnPlayerSpawn(PlayerSpawnDelegate value);
    public static void remove_OnPlayerSpawn(PlayerSpawnDelegate value);
    public static void add_OnRequestSyncScene(RequestSyncedSceneDelegate value);
    public static void remove_OnRequestSyncScene(RequestSyncedSceneDelegate value);
    public static void add_OnStartSyncedScene(StartSyncedSceneDelegate value);
    public static void remove_OnStartSyncedScene(StartSyncedSceneDelegate value);
    public static void add_OnStopSyncedScene(StopSyncedSceneDelegate value);
    public static void remove_OnStopSyncedScene(StopSyncedSceneDelegate value);
    public static void add_OnUpdateSyncedScene(UpdateSyncedSceneDelegate value);
    public static void remove_OnUpdateSyncedScene(UpdateSyncedSceneDelegate value);
    public static void add_OnClientRequestObject(ClientRequestObjectDelegate value);
    public static void remove_OnClientRequestObject(ClientRequestObjectDelegate value);
    public static void add_OnClientDeleteObject(ClientDeleteObjectDelegate value);
    public static void remove_OnClientDeleteObject(ClientDeleteObjectDelegate value);
    public static void add_OnGivePedScriptedTask(GivePedScriptedTaskDelegate value);
    public static void remove_OnGivePedScriptedTask(GivePedScriptedTaskDelegate value);
    public static void add_OnPedDamage(PedDamageDelegate value);
    public static void remove_OnPedDamage(PedDamageDelegate value);
    public static void add_OnPedDead(PedDeadDelegate value);
    public static void remove_OnPedDead(PedDeadDelegate value);
    public static void add_OnPedHeal(PedHealDelegate value);
    public static void remove_OnPedHeal(PedHealDelegate value);
    public static void add_OnPlayerStartTalking(PlayerStartTalkingDelegate value);
    public static void remove_OnPlayerStartTalking(PlayerStartTalkingDelegate value);
    public static void add_OnPlayerStopTalking(PlayerStopTalkingDelegate value);
    public static void remove_OnPlayerStopTalking(PlayerStopTalkingDelegate value);
    public static void add_OnScriptRPC(ScriptRpcDelegate value);
    public static void remove_OnScriptRPC(ScriptRpcDelegate value);
    public static void add_OnScriptRPCAnswer(ScriptRpcAnswerDelegate value);
    public static void remove_OnScriptRPCAnswer(ScriptRpcAnswerDelegate value);
    public static void Export(string key, object value);
    public static void Export(string key, bool value);
    public static void Export(string key, int value);
    public static void Export(string key, long value);
    public static void Export(string key, UInt32 value);
    public static void Export(string key, ulong value);
    public static void Export(string key, double value);
    public static void Export(string key, string value);
    public static void Export(string key, Delegate value);
    public static void Export(string key, Action value);
    public static void Export(string key, Action`1<T1> value);
    public static void Export(string key, Action`2<T1, T2> value);
    public static void Export(string key, Action`3<T1, T2, T3> value);
    public static void Export(string key, Action`4<T1, T2, T3, T4> value);
    public static void Export(string key, Action`5<T1, T2, T3, T4, T5> value);
    public static void Export(string key, Action`6<T1, T2, T3, T4, T5, T6> value);
    public static void Export(string key, Action`7<T1, T2, T3, T4, T5, T6, T7> value);
    public static void Export(string key, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> value);
    public static void Export(string key, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> value);
    public static void Export(string key, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value);
    public static void Export(string key, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value);
    public static void Export(string key, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value);
    public static void Export(string key, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value);
    public static void Export(string key, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value);
    public static void Export(string key, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value);
    public static void Export(string key, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value);
    public static void Export(string key, Func`1<T1> value);
    public static void Export(string key, Func`2<T1, T2> value);
    public static void Export(string key, Func`3<T1, T2, T3> value);
    public static void Export(string key, Func`4<T1, T2, T3, T4> value);
    public static void Export(string key, Func`5<T1, T2, T3, T4, T5> value);
    public static void Export(string key, Func`6<T1, T2, T3, T4, T5, T6> value);
    public static void Export(string key, Func`7<T1, T2, T3, T4, T5, T6, T7> value);
    public static void Export(string key, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> value);
    public static void Export(string key, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> value);
    public static void Export(string key, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value);
    public static void Export(string key, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value);
    public static void Export(string key, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value);
    public static void Export(string key, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value);
    public static void Export(string key, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value);
    public static void Export(string key, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value);
    public static void Export(string key, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value);
    public static void Export(string key, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> value);
    public static void ExportNativeNative(string key, object value);
    public static void ExportNative(string key, bool value);
    public static void ExportNative(string key, int value);
    public static void ExportNative(string key, long value);
    public static void ExportNative(string key, UInt32 value);
    public static void ExportNative(string key, ulong value);
    public static void ExportNative(string key, double value);
    public static void ExportNative(string key, string value);
    public static void ExportNative(string key, Delegate value);
    public static void ExportNative(string key, Action value);
    public static void ExportNative(string key, Action`1<T1> value);
    public static void ExportNative(string key, Action`2<T1, T2> value);
    public static void ExportNative(string key, Action`3<T1, T2, T3> value);
    public static void ExportNative(string key, Action`4<T1, T2, T3, T4> value);
    public static void ExportNative(string key, Action`5<T1, T2, T3, T4, T5> value);
    public static void ExportNative(string key, Action`6<T1, T2, T3, T4, T5, T6> value);
    public static void ExportNative(string key, Action`7<T1, T2, T3, T4, T5, T6, T7> value);
    public static void ExportNative(string key, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> value);
    public static void ExportNative(string key, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> value);
    public static void ExportNative(string key, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value);
    public static void ExportNative(string key, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value);
    public static void ExportNative(string key, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value);
    public static void ExportNative(string key, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value);
    public static void ExportNative(string key, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value);
    public static void ExportNative(string key, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value);
    public static void ExportNative(string key, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value);
    public static void ExportNative(string key, Func`1<T1> value);
    public static void ExportNative(string key, Func`2<T1, T2> value);
    public static void ExportNative(string key, Func`3<T1, T2, T3> value);
    public static void ExportNative(string key, Func`4<T1, T2, T3, T4> value);
    public static void ExportNative(string key, Func`5<T1, T2, T3, T4, T5> value);
    public static void ExportNative(string key, Func`6<T1, T2, T3, T4, T5, T6> value);
    public static void ExportNative(string key, Func`7<T1, T2, T3, T4, T5, T6, T7> value);
    public static void ExportNative(string key, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> value);
    public static void ExportNative(string key, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> value);
    public static void ExportNative(string key, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value);
    public static void ExportNative(string key, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value);
    public static void ExportNative(string key, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value);
    public static void ExportNative(string key, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value);
    public static void ExportNative(string key, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value);
    public static void ExportNative(string key, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value);
    public static void ExportNative(string key, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value);
    public static void ExportNative(string key, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> value);
    public static Function CreateFunction(T func);
    public static Function CreateFunction(Action function);
    public static Function CreateFunction(Action`1<T1> function);
    public static Function CreateFunction(Action`2<T1, T2> function);
    public static Function CreateFunction(Action`3<T1, T2, T3> function);
    public static Function CreateFunction(Action`4<T1, T2, T3, T4> function);
    public static Function CreateFunction(Action`5<T1, T2, T3, T4, T5> function);
    public static Function CreateFunction(Action`6<T1, T2, T3, T4, T5, T6> function);
    public static Function CreateFunction(Action`7<T1, T2, T3, T4, T5, T6, T7> function);
    public static Function CreateFunction(Action`8<T1, T2, T3, T4, T5, T6, T7, T8> function);
    public static Function CreateFunction(Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> function);
    public static Function CreateFunction(Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> function);
    public static Function CreateFunction(Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> function);
    public static Function CreateFunction(Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> function);
    public static Function CreateFunction(Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> function);
    public static Function CreateFunction(Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> function);
    public static Function CreateFunction(Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> function);
    public static Function CreateFunction(Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> function);
    public static Function CreateFunction(Func`1<T1> function);
    public static Function CreateFunction(Func`2<T1, T2> function);
    public static Function CreateFunction(Func`3<T1, T2, T3> function);
    public static Function CreateFunction(Func`4<T1, T2, T3, T4> function);
    public static Function CreateFunction(Func`5<T1, T2, T3, T4, T5> function);
    public static Function CreateFunction(Func`6<T1, T2, T3, T4, T5, T6> function);
    public static Function CreateFunction(Func`7<T1, T2, T3, T4, T5, T6, T7> function);
    public static Function CreateFunction(Func`8<T1, T2, T3, T4, T5, T6, T7, T8> function);
    public static Function CreateFunction(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> function);
    public static Function CreateFunction(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> function);
    public static Function CreateFunction(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> function);
    public static Function CreateFunction(Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> function);
    public static Function CreateFunction(Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> function);
    public static Function CreateFunction(Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> function);
    public static Function CreateFunction(Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> function);
    public static Function CreateFunction(Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> function);
    public static Function CreateFunction(Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function);
    public static IPlayer GetPlayerById(UInt32 id);
    public static IVehicle GetVehicleById(UInt32 id);
    public static IPed GetPedById(UInt32 id);
    public static IBlip GetBlipById(UInt32 id);
    public static IVoiceChannel GetVoiceChannelById(UInt32 id);
    public static IColShape GetColShapeById(UInt32 id);
    public static ICheckpoint GetCheckpointById(UInt32 id);
    public static IVirtualEntity GetVirtualEntityById(UInt32 id);
    public static IVirtualEntityGroup GetVirtualEntityGroupById(UInt32 id);
    public static IMarker GetMarkerById(UInt32 id);
    public static void SetMetaData(string key, object value);
    public static bool HasMetaData(string key);
    public static void DeleteMetaData(string key);
    public static bool GetMetaData(string key, T& result);
    public static void SetSyncedMetaData(string key, object value);
    public static bool HasSyncedMetaData(string key);
    public static void DeleteSyncedMetaData(string key);
    public static bool GetSyncedMetaData(string key, T& result);
    private static bool HostImport(string resourceName, string key, T& value);
    public static bool Import(string resourceName, string key, Boolean& value);
    public static bool Import(string resourceName, string key, Int32& value);
    public static bool Import(string resourceName, string key, Int64& value);
    public static bool Import(string resourceName, string key, UInt32& value);
    public static bool Import(string resourceName, string key, UInt64& value);
    public static bool Import(string resourceName, string key, Double& value);
    public static bool Import(string resourceName, string key, Object& value);
    public static bool Import(string resourceName, string key, String& value);
    public static bool Import(string resourceName, string key, MValueConst& mValue);
    public static bool Import(string resourceName, string key, Type type, MValueConst& mValue);
    private static object ImportCall(MValueConst& mValue, Object[] args);
    private static object ImportCall(MValueConst& mValue, Object[] args);
    public static bool Import(string resourceName, string key, Action& value);
    public static bool Import(string resourceName, string key, Action`1& value);
    public static bool Import(string resourceName, string key, Action`2& value);
    public static bool Import(string resourceName, string key, Action`3& value);
    public static bool Import(string resourceName, string key, Action`4& value);
    public static bool Import(string resourceName, string key, Action`5& value);
    public static bool Import(string resourceName, string key, Action`6& value);
    public static bool Import(string resourceName, string key, Action`7& value);
    public static bool Import(string resourceName, string key, Action`8& value);
    public static bool Import(string resourceName, string key, Action`9& value);
    public static bool Import(string resourceName, string key, Action`10& value);
    public static bool Import(string resourceName, string key, Action`11& value);
    public static bool Import(string resourceName, string key, Action`12& value);
    public static bool Import(string resourceName, string key, Action`13& value);
    public static bool Import(string resourceName, string key, Action`14& value);
    public static bool Import(string resourceName, string key, Action`15& value);
    public static bool Import(string resourceName, string key, Action`16& value);
    public static bool Import(string resourceName, string key, Func`1& value);
    public static bool Import(string resourceName, string key, Func`2& value);
    public static bool Import(string resourceName, string key, Func`3& value);
    public static bool Import(string resourceName, string key, Func`4& value);
    public static bool Import(string resourceName, string key, Func`5& value);
    public static bool Import(string resourceName, string key, Func`6& value);
    public static bool Import(string resourceName, string key, Func`7& value);
    public static bool Import(string resourceName, string key, Func`8& value);
    public static bool Import(string resourceName, string key, Func`9& value);
    public static bool Import(string resourceName, string key, Func`10& value);
    public static bool Import(string resourceName, string key, Func`11& value);
    public static bool Import(string resourceName, string key, Func`12& value);
    public static bool Import(string resourceName, string key, Func`13& value);
    public static bool Import(string resourceName, string key, Func`14& value);
    public static bool Import(string resourceName, string key, Func`15& value);
    public static bool Import(string resourceName, string key, Func`16& value);
    public static bool Import(string resourceName, string key, Func`17& value);
    public static void LogColored(string message);
    public static void LogColored(ColoredMessage message);
    public static void LogFast(string message);
    public static void LogInfo(string message);
    public static void LogDebug(string message);
    public static void LogWarning(string message);
    public static void LogError(string message);
    public static IMarker CreateMarker(MarkerType type, Position pos, Rgba color);
    public static IMarker CreateMarker(IPlayer player, MarkerType type, Position pos, Rgba color);
    public static void RegisterMValueAdapter(IMValueAdapter`1<T> adapter);
    public static bool ToMValue(object obj, Type type, MValueConst& mValue);
    public static bool FromMValue(MValueConst& mValue, Type type, Object& obj);
    public static bool MValueFromObject(object obj, Type type, Object& result);
    public static bool IsMValueConvertible(Type type);
    public static MValueWriter2 CreateMValueWriter();
    public static MValueBuffer2 CreateMValueBuffer(MValueConst[] values);
    public static void CreateMValueNil(MValueConst& mValue);
    public static void CreateMValueBool(MValueConst& mValue, bool value);
    public static void CreateMValueInt(MValueConst& mValue, long value);
    public static void CreateMValueUInt(MValueConst& mValue, ulong value);
    public static void CreateMValueDouble(MValueConst& mValue, double value);
    public static void CreateMValueString(MValueConst& mValue, string value);
    public static void CreateMValueList(MValueConst& mValue, MValueConst[] val, ulong size);
    public static void CreateMValueDict(MValueConst& mValue, String[] keys, MValueConst[] val, ulong size);
    public static void CreateMValueBaseObject(MValueConst& mValue, IBaseObject value);
    public static void CreateMValueFunction(MValueConst& mValue, IntPtr value);
    public static void CreateMValueVector3(MValueConst& mValue, Position value);
    public static void CreateMValueVector2(MValueConst& mValue, Vector2 value);
    public static void CreateMValueRgba(MValueConst& mValue, Rgba value);
    public static void CreateMValueByteArray(MValueConst& mValue, Byte[] value);
    public static void CreateMValue(MValueConst& mValue, object obj);
    public static void CreateMValues(MValueConst[] mValues, Object[] objects);
    public static IObject CreateObject(UInt32 model, Position position, Rotation rotation, byte alpha, byte textureVariation, ushort lodDistance, UInt32 streamingDistance);
    public static IObject CreateObject(string model, Position position, Rotation rotation, byte alpha, byte textureVariation, ushort lodDistance, UInt32 streamingDistance);
    public static void OffServer(string eventName, Function function);
    public static void OffClient(string eventName, Function function);
    public static Function OnServer(string eventName, Action action);
    public static Function OnServer(string eventName, Action`1<T1> action);
    public static Function OnServer(string eventName, Action`2<T1, T2> action);
    public static Function OnServer(string eventName, Action`3<T1, T2, T3> action);
    public static Function OnServer(string eventName, Action`4<T1, T2, T3, T4> action);
    public static Function OnServer(string eventName, Action`5<T1, T2, T3, T4, T5> action);
    public static Function OnServer(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnServer(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnServer(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnServer(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnServer(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnServer(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnServer(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnServer(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnServer(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnServer(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnServer(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnServer(string eventName, Func`1<T1> action);
    public static Function OnServer(string eventName, Func`2<T1, T2> action);
    public static Function OnServer(string eventName, Func`3<T1, T2, T3> action);
    public static Function OnServer(string eventName, Func`4<T1, T2, T3, T4> action);
    public static Function OnServer(string eventName, Func`5<T1, T2, T3, T4, T5> action);
    public static Function OnServer(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnServer(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnServer(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnServer(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnServer(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnServer(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnServer(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnServer(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnServer(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnServer(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnServer(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnServer(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action);
    public static Function OnClient(string eventName, Action action);
    public static Function OnClient(string eventName, Action`1<T1> action);
    public static Function OnClient(string eventName, Action`2<T1, T2> action);
    public static Function OnClient(string eventName, Action`3<T1, T2, T3> action);
    public static Function OnClient(string eventName, Action`4<T1, T2, T3, T4> action);
    public static Function OnClient(string eventName, Action`5<T1, T2, T3, T4, T5> action);
    public static Function OnClient(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnClient(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnClient(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnClient(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnClient(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnClient(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnClient(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnClient(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnClient(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnClient(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnClient(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnClient(string eventName, Func`1<T1> action);
    public static Function OnClient(string eventName, Func`2<T1, T2> action);
    public static Function OnClient(string eventName, Func`3<T1, T2, T3> action);
    public static Function OnClient(string eventName, Func`4<T1, T2, T3, T4> action);
    public static Function OnClient(string eventName, Func`5<T1, T2, T3, T4, T5> action);
    public static Function OnClient(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnClient(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnClient(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnClient(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnClient(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnClient(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnClient(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnClient(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnClient(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnClient(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnClient(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnClient(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action);
    public static Function OnClient(string eventName, Action`1<IPlayer> action);
    public static Function OnClient(string eventName, Action`2<IPlayer, T1> action);
    public static Function OnClient(string eventName, Action`3<IPlayer, T1, T2> action);
    public static Function OnClient(string eventName, Action`4<IPlayer, T1, T2, T3> action);
    public static Function OnClient(string eventName, Action`5<IPlayer, T1, T2, T3, T4> action);
    public static Function OnClient(string eventName, Action`6<IPlayer, T1, T2, T3, T4, T5> action);
    public static Function OnClient(string eventName, Action`7<IPlayer, T1, T2, T3, T4, T5, T6> action);
    public static Function OnClient(string eventName, Action`8<IPlayer, T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnClient(string eventName, Action`9<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnClient(string eventName, Action`10<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnClient(string eventName, Action`11<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnClient(string eventName, Action`12<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnClient(string eventName, Action`13<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnClient(string eventName, Action`14<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnClient(string eventName, Action`15<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnClient(string eventName, Action`16<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnClient(string eventName, Func`2<IPlayer, T1> action);
    public static Function OnClient(string eventName, Func`3<IPlayer, T1, T2> action);
    public static Function OnClient(string eventName, Func`4<IPlayer, T1, T2, T3> action);
    public static Function OnClient(string eventName, Func`5<IPlayer, T1, T2, T3, T4> action);
    public static Function OnClient(string eventName, Func`6<IPlayer, T1, T2, T3, T4, T5> action);
    public static Function OnClient(string eventName, Func`7<IPlayer, T1, T2, T3, T4, T5, T6> action);
    public static Function OnClient(string eventName, Func`8<IPlayer, T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnClient(string eventName, Func`9<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnClient(string eventName, Func`10<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnClient(string eventName, Func`11<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnClient(string eventName, Func`12<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnClient(string eventName, Func`13<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnClient(string eventName, Func`14<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnClient(string eventName, Func`15<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnClient(string eventName, Func`16<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnClient(string eventName, Func`17<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnceServer(string eventName, Action action);
    public static Function OnceServer(string eventName, Action`1<T1> action);
    public static Function OnceServer(string eventName, Action`2<T1, T2> action);
    public static Function OnceServer(string eventName, Action`3<T1, T2, T3> action);
    public static Function OnceServer(string eventName, Action`4<T1, T2, T3, T4> action);
    public static Function OnceServer(string eventName, Action`5<T1, T2, T3, T4, T5> action);
    public static Function OnceServer(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnceServer(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnceServer(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnceServer(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnceServer(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnceServer(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnceServer(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnceServer(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnceServer(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnceServer(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnceServer(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnceServer(string eventName, Func`1<T1> action);
    public static Function OnceServer(string eventName, Func`2<T1, T2> action);
    public static Function OnceServer(string eventName, Func`3<T1, T2, T3> action);
    public static Function OnceServer(string eventName, Func`4<T1, T2, T3, T4> action);
    public static Function OnceServer(string eventName, Func`5<T1, T2, T3, T4, T5> action);
    public static Function OnceServer(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnceServer(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnceServer(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnceServer(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnceServer(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnceServer(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnceServer(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnceServer(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnceServer(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnceServer(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnceServer(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnceServer(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action);
    public static Function OnceClient(string eventName, Action action);
    public static Function OnceClient(string eventName, Action`1<T1> action);
    public static Function OnceClient(string eventName, Action`2<T1, T2> action);
    public static Function OnceClient(string eventName, Action`3<T1, T2, T3> action);
    public static Function OnceClient(string eventName, Action`4<T1, T2, T3, T4> action);
    public static Function OnceClient(string eventName, Action`5<T1, T2, T3, T4, T5> action);
    public static Function OnceClient(string eventName, Action`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnceClient(string eventName, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnceClient(string eventName, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnceClient(string eventName, Action`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnceClient(string eventName, Action`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnceClient(string eventName, Action`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnceClient(string eventName, Action`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnceClient(string eventName, Action`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnceClient(string eventName, Action`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnceClient(string eventName, Action`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnceClient(string eventName, Action`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnceClient(string eventName, Func`1<T1> action);
    public static Function OnceClient(string eventName, Func`2<T1, T2> action);
    public static Function OnceClient(string eventName, Func`3<T1, T2, T3> action);
    public static Function OnceClient(string eventName, Func`4<T1, T2, T3, T4> action);
    public static Function OnceClient(string eventName, Func`5<T1, T2, T3, T4, T5> action);
    public static Function OnceClient(string eventName, Func`6<T1, T2, T3, T4, T5, T6> action);
    public static Function OnceClient(string eventName, Func`7<T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnceClient(string eventName, Func`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnceClient(string eventName, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnceClient(string eventName, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnceClient(string eventName, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnceClient(string eventName, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnceClient(string eventName, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnceClient(string eventName, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnceClient(string eventName, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnceClient(string eventName, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static Function OnceClient(string eventName, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> action);
    public static Function OnceClient(string eventName, Action`1<IPlayer> action);
    public static Function OnceClient(string eventName, Action`2<IPlayer, T1> action);
    public static Function OnceClient(string eventName, Action`3<IPlayer, T1, T2> action);
    public static Function OnceClient(string eventName, Action`4<IPlayer, T1, T2, T3> action);
    public static Function OnceClient(string eventName, Action`5<IPlayer, T1, T2, T3, T4> action);
    public static Function OnceClient(string eventName, Action`6<IPlayer, T1, T2, T3, T4, T5> action);
    public static Function OnceClient(string eventName, Action`7<IPlayer, T1, T2, T3, T4, T5, T6> action);
    public static Function OnceClient(string eventName, Action`8<IPlayer, T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnceClient(string eventName, Action`9<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnceClient(string eventName, Action`10<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnceClient(string eventName, Action`11<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnceClient(string eventName, Action`12<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnceClient(string eventName, Action`13<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnceClient(string eventName, Action`14<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnceClient(string eventName, Action`15<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnceClient(string eventName, Action`16<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnceClient(string eventName, Func`2<IPlayer, T1> action);
    public static Function OnceClient(string eventName, Func`3<IPlayer, T1, T2> action);
    public static Function OnceClient(string eventName, Func`4<IPlayer, T1, T2, T3> action);
    public static Function OnceClient(string eventName, Func`5<IPlayer, T1, T2, T3, T4> action);
    public static Function OnceClient(string eventName, Func`6<IPlayer, T1, T2, T3, T4, T5> action);
    public static Function OnceClient(string eventName, Func`7<IPlayer, T1, T2, T3, T4, T5, T6> action);
    public static Function OnceClient(string eventName, Func`8<IPlayer, T1, T2, T3, T4, T5, T6, T7> action);
    public static Function OnceClient(string eventName, Func`9<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8> action);
    public static Function OnceClient(string eventName, Func`10<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9> action);
    public static Function OnceClient(string eventName, Func`11<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action);
    public static Function OnceClient(string eventName, Func`12<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action);
    public static Function OnceClient(string eventName, Func`13<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action);
    public static Function OnceClient(string eventName, Func`14<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action);
    public static Function OnceClient(string eventName, Func`15<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action);
    public static Function OnceClient(string eventName, Func`16<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action);
    public static Function OnceClient(string eventName, Func`17<IPlayer, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action);
    public static IPed CreatePed(UInt32 model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static IPed CreatePed(PedModel model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static IPed CreatePed(string model, Position pos, Rotation rot, UInt32 streamingDistance);
    public static void AddToPool(IBaseObject baseObject);
    public static IReadOnlyCollection`1<IPlayer> GetAllPlayers();
    public static IReadOnlyCollection`1<IVehicle> GetAllVehicles();
    public static IReadOnlyCollection`1<IPed> GetAllPeds();
    public static IReadOnlyCollection`1<IBlip> GetAllBlips();
    public static IReadOnlyCollection`1<IObject> GetAllNetworkObjects();
    public static IReadOnlyCollection`1<ICheckpoint> GetAllCheckpoints();
    public static IReadOnlyCollection`1<IVoiceChannel> GetAllVoiceChannels();
    public static IReadOnlyCollection`1<IColShape> GetAllColShapes();
    public static IReadOnlyCollection`1<IMarker> GetAllMarkers();
    public static IReadOnlyCollection`1<IConnectionInfo> GetAllConnectionInfos();
    public static IReadOnlyCollection`1<IVirtualEntity> GetAllVirtualEntities();
    public static IReadOnlyCollection`1<IVirtualEntityGroup> GetAllVirtualEntityGroups();
    public static KeyValuePair`2[] GetPlayersArray();
    public static KeyValuePair`2[] GetVehiclesArray();
    public static KeyValuePair`2[] GetPedsArray();
    public static KeyValuePair`2[] GetBlipsArray();
    public static KeyValuePair`2[] GetCheckpointsArray();
    public static KeyValuePair`2[] GetVoiceChannelsArray();
    public static KeyValuePair`2[] GetColShapesArray();
    public static KeyValuePair`2[] GetConnectionInfoArray();
    public static void ForEachPlayers(IBaseObjectCallback`1<IPlayer> baseObjectCallback);
    public static Task ForEachPlayers(IAsyncBaseObjectCallback`1<IPlayer> baseObjectCallback);
    public static void ForEachVehicles(IBaseObjectCallback`1<IVehicle> baseObjectCallback);
    public static Task ForEachVehicles(IAsyncBaseObjectCallback`1<IVehicle> baseObjectCallback);
    public static void ForEachPeds(IBaseObjectCallback`1<IPed> baseObjectCallback);
    public static Task ForEachPeds(IAsyncBaseObjectCallback`1<IPed> baseObjectCallback);
    public static void ForEachBlips(IBaseObjectCallback`1<IBlip> baseObjectCallback);
    public static Task ForEachBlips(IAsyncBaseObjectCallback`1<IBlip> baseObjectCallback);
    public static void ForEachCheckpoints(IBaseObjectCallback`1<ICheckpoint> baseObjectCallback);
    public static Task ForEachCheckpoints(IAsyncBaseObjectCallback`1<ICheckpoint> baseObjectCallback);
    public static void ForEachVoiceChannels(IBaseObjectCallback`1<IVoiceChannel> baseObjectCallback);
    public static Task ForEachVoiceChannels(IAsyncBaseObjectCallback`1<IVoiceChannel> baseObjectCallback);
    public static void ForEachColShapes(IBaseObjectCallback`1<IColShape> baseObjectCallback);
    public static Task ForEachColShapes(IAsyncBaseObjectCallback`1<IColShape> baseObjectCallback);
    public static void RegisterEvents(object target);
    public static void StartResource(string name);
    public static void StopResource(string name);
    public static void RestartResource(string name);
    public static INativeResource GetResource(string name);
    public static INativeResource[] GetAllResources();
    public static INativeResource get_Resource();
    public static IVehicle CreateVehicle(UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public static IVehicle CreateVehicle(VehicleModel model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public static IVehicle CreateVehicle(string model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public static IVirtualEntityGroup CreateVirtualEntityGroup(UInt32 maxEntitiesInStream);
    public static IVirtualEntity CreateVirtualEntity(IVirtualEntityGroup group, Position position, UInt32 streamingDistance, Dictionary`2<string, object> dataDict);
    public static IVoiceChannel CreateVoiceChannel(bool spatial, float maxDistance);
}
public static class AltV.Net.AltTrace : object {
    public static void add_OnTraceFileSizeChange(Action`1<long> value);
    public static void remove_OnTraceFileSizeChange(Action`1<long> value);
    public static void Start(string traceFileName, TraceFileFormat traceFileFormat);
    public static void Stop();
}
[AttributeUsageAttribute("64")]
public class AltV.Net.ClientEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ClientEventAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class AltV.Net.CloudIDRequestException : Exception {
    internal CloudIDRequestException(string message);
}
public class AltV.Net.ColoredConsole.ColoredMessage : ValueType {
    private StringBuilder stringBuilder;
    private void CheckStringBuilder();
    public static ColoredMessage op_Addition(ColoredMessage a, string b);
    public static ColoredMessage op_Addition(ColoredMessage a, TextColor b);
    public virtual string ToString();
}
public enum AltV.Net.ColoredConsole.TextColor : Enum {
    public int value__;
    public static TextColor Black;
    public static TextColor Red;
    public static TextColor Green;
    public static TextColor Blue;
    public static TextColor Yellow;
    public static TextColor Magenta;
    public static TextColor Cyan;
    public static TextColor White;
}
public class AltV.Net.Core : SharedCore {
    [CompilerGeneratedAttribute]
private IPoolManager <PoolManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IntPtr, List`1<InternalPlayerSeat>> <VehiclePassengers>k__BackingField;
    [CompilerGeneratedAttribute]
private INativeResourcePool <NativeResourcePool>k__BackingField;
    private ConcurrentDictionary`2<UInt32, VehicleModelInfo> vehicleModelInfoCache;
    private ConcurrentDictionary`2<UInt32, Nullable`1<PedModelInfo>> pedModelInfoCache;
    private ConcurrentDictionary`2<UInt32, Nullable`1<WeaponModelInfo>> weaponModelInfoCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, Metric> metricCache;
    private string rootDirectory;
    [CompilerGeneratedAttribute]
private INativeResource <Resource>k__BackingField;
    internal IDictionary`2<string, Function> functionExports;
    internal LinkedList`1<GCHandle> functionExportHandles;
    private WeakReference`1<AssemblyLoadContext> assemblyLoadContext;
    internal IEventHandler`1<CheckpointDelegate> CheckpointEventHandler;
    internal IEventHandler`1<PlayerConnectDelegate> PlayerConnectEventHandler;
    internal IEventHandler`1<PlayerConnectDeniedDelegate> PlayerConnectDeniedEventHandler;
    internal IEventHandler`1<ResourceEventDelegate> ResourceStartEventHandler;
    internal IEventHandler`1<ResourceEventDelegate> ResourceStopEventHandler;
    internal IEventHandler`1<ResourceEventDelegate> ResourceErrorEventHandler;
    internal IEventHandler`1<PlayerDamageDelegate> PlayerDamageEventHandler;
    internal IEventHandler`1<PlayerDeadDelegate> PlayerDeadEventHandler;
    internal IEventHandler`1<PlayerHealDelegate> PlayerHealEventHandler;
    internal IEventHandler`1<ExplosionDelegate> ExplosionEventHandler;
    internal IEventHandler`1<WeaponDamageDelegate> WeaponDamageEventHandler;
    internal IEventHandler`1<PlayerChangeVehicleSeatDelegate> PlayerChangeVehicleSeatEventHandler;
    internal IEventHandler`1<PlayerEnterVehicleDelegate> PlayerEnterVehicleEventHandler;
    internal IEventHandler`1<PlayerEnteringVehicleDelegate> PlayerEnteringVehicleEventHandler;
    internal IEventHandler`1<PlayerLeaveVehicleDelegate> PlayerLeaveVehicleEventHandler;
    internal IEventHandler`1<PlayerDisconnectDelegate> PlayerDisconnectEventHandler;
    internal IEventHandler`1<BaseObjectCreateDelegate> BaseObjectCreateEventHandler;
    internal IEventHandler`1<BaseObjectRemoveDelegate> BaseObjectRemoveEventHandler;
    internal IEventHandler`1<PlayerRemoveDelegate> PlayerRemoveEventHandler;
    internal IEventHandler`1<VehicleRemoveDelegate> VehicleRemoveEventHandler;
    internal IEventHandler`1<PedRemoveDelegate> PedRemoveEventHandler;
    internal IEventHandler`1<ConsoleCommandDelegate> ConsoleCommandEventHandler;
    internal IEventHandler`1<MetaDataChangeDelegate> MetaDataChangeEventHandler;
    internal IEventHandler`1<MetaDataChangeDelegate> SyncedMetaDataChangeEventHandler;
    internal IEventHandler`1<ColShapeDelegate> ColShapeEventHandler;
    internal IEventHandler`1<VehicleDestroyDelegate> VehicleDestroyEventHandler;
    internal IEventHandler`1<FireDelegate> FireEventHandler;
    internal IEventHandler`1<StartProjectileDelegate> StartProjectileEventHandler;
    internal IEventHandler`1<PlayerWeaponChangeDelegate> PlayerWeaponChangeEventHandler;
    internal IEventHandler`1<NetOwnerChangeDelegate> NetOwnerChangeEventHandler;
    internal IEventHandler`1<VehicleAttachDelegate> VehicleAttachEventHandler;
    internal IEventHandler`1<VehicleDetachDelegate> VehicleDetachEventHandler;
    internal IEventHandler`1<VehicleDamageDelegate> VehicleDamageEventHandler;
    internal IEventHandler`1<VehicleHornDelegate> VehicleHornEventHandler;
    internal IEventHandler`1<ConnectionQueueAddDelegate> ConnectionQueueAddHandler;
    internal IEventHandler`1<ConnectionQueueRemoveDelegate> ConnectionQueueRemoveHandler;
    internal IEventHandler`1<ServerStartedDelegate> ServerStartedHandler;
    internal IEventHandler`1<PlayerRequestControlDelegate> PlayerRequestControlHandler;
    internal IEventHandler`1<PlayerChangeAnimationDelegate> PlayerChangeAnimationHandler;
    internal IEventHandler`1<PlayerChangeInteriorDelegate> PlayerChangeInteriorHandler;
    internal IEventHandler`1<PlayerDimensionChangeDelegate> PlayerDimensionChangeHandler;
    internal IEventHandler`1<VehicleSirenDelegate> VehicleSirenHandler;
    internal IEventHandler`1<PlayerSpawnDelegate> PlayerSpawnHandler;
    internal IEventHandler`1<RequestSyncedSceneDelegate> RequestSyncedSceneHandler;
    internal IEventHandler`1<StartSyncedSceneDelegate> StartSyncedSceneHandler;
    internal IEventHandler`1<StopSyncedSceneDelegate> StopSyncedSceneHandler;
    internal IEventHandler`1<UpdateSyncedSceneDelegate> UpdateSyncedSceneHandler;
    internal IEventHandler`1<ClientRequestObjectDelegate> ClientRequestObjectHandler;
    internal IEventHandler`1<ClientDeleteObjectDelegate> ClientDeleteObjectHandler;
    internal IEventHandler`1<GivePedScriptedTaskDelegate> GivePedScriptedTaskHandler;
    internal IEventHandler`1<PedDamageDelegate> PedDamageEventHandler;
    internal IEventHandler`1<PedDeadDelegate> PedDeadEventHandler;
    internal IEventHandler`1<PedHealDelegate> PedHealEventHandler;
    internal IEventHandler`1<PlayerStartTalkingDelegate> PlayerStartTalkingHandler;
    internal IEventHandler`1<PlayerStopTalkingDelegate> PlayerStopTalkingHandler;
    internal IEventHandler`1<ScriptRpcDelegate> ScriptRpcHandler;
    internal IEventHandler`1<ScriptRpcAnswerDelegate> ScriptRpcAnswerHandler;
    private Dictionary`2<string, List`1<FunctionCall>> eventBusClient;
    private Dictionary`2<string, List`1<FunctionCall>> eventBusServer;
    private Dictionary`2<string, HashSet`1<IParserClientEventHandler>> eventBusClientParser;
    private Dictionary`2<string, HashSet`1<IParserServerEventHandler>> eventBusServerParser;
    internal IEventHandler`1<ServerEventEventDelegate> ServerEventEventHandler;
    internal IEventHandler`1<ServerCustomEventEventDelegate> ServerCustomEventEventHandler;
    internal IEventHandler`1<PlayerClientEventDelegate> PlayerClientEventEventHandler;
    internal IEventHandler`1<PlayerClientCustomEventDelegate> PlayerClientCustomEventEventHandler;
    public IPoolManager PoolManager { get; }
    public Dictionary`2<IntPtr, List`1<InternalPlayerSeat>> VehiclePassengers { get; }
    private ISharedPoolManager AltV.Net.Shared.ISharedCore.PoolManager { get; }
    public INativeResourcePool NativeResourcePool { get; }
    public string RootDirectory { get; }
    public INativeResource Resource { get; }
    public IEnumerable`1<Assembly> Assemblies { get; }
    public ushort MaxStreamingPeds { get; public set; }
    public ushort MaxStreamingObjects { get; public set; }
    public ushort MaxStreamingVehicles { get; public set; }
    public byte StreamerThreadCount { get; public set; }
    public UInt32 StreamingTickRate { get; public set; }
    public UInt32 StreamingDistance { get; public set; }
    public UInt32 ColShapeTickRate { get; public set; }
    public UInt32 MigrationDistance { get; public set; }
    public byte MigrationThreadCount { get; public set; }
    public UInt32 MigrationTickRate { get; public set; }
    public byte SyncReceiveThreadCount { get; public set; }
    public byte SyncSendThreadCount { get; public set; }
    public UInt32[] LoadedVehicleModels { get; }
    public Core(IntPtr nativePointer, IntPtr resourcePointer, AssemblyLoadContext assemblyLoadContext, ILibrary library, IPoolManager poolManager, INativeResourcePool nativeResourcePool);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override IPoolManager get_PoolManager();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<IntPtr, List`1<InternalPlayerSeat>> get_VehiclePassengers();
    private sealed virtual override ISharedPoolManager AltV.Net.Shared.ISharedCore.get_PoolManager();
    [CompilerGeneratedAttribute]
public sealed virtual INativeResourcePool get_NativeResourcePool();
    public sealed virtual string get_RootDirectory();
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override INativeResource get_Resource();
    private sealed virtual override void AltV.Net.IInternalCore.InitResource(INativeResource resource);
    public virtual void CheckIfCallIsValid(string callerName);
    [ConditionalAttribute("DEBUG")]
public void CheckIfThreadIsValid(string callerName);
    public sealed virtual ulong HashPassword(string password);
    public sealed virtual void SetPassword(string password);
    public sealed virtual VehicleModelInfo GetVehicleModelInfo(UInt32 hash);
    public sealed virtual Nullable`1<PedModelInfo> GetPedModelInfo(UInt32 hash);
    public sealed virtual Nullable`1<WeaponModelInfo> GetWeaponModelInfo(UInt32 hash);
    public sealed virtual void StopServer();
    public sealed virtual void TriggerClientEvent(IPlayer player, IntPtr eventNamePtr, MValueConst[] args);
    public sealed virtual void TriggerClientEvent(IPlayer player, string eventName, MValueConst[] args);
    public sealed virtual void TriggerClientEvent(IPlayer player, IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual void TriggerClientEvent(IPlayer player, string eventName, IntPtr[] args);
    public sealed virtual void TriggerClientEvent(IPlayer player, IntPtr eventNamePtr, Object[] args);
    public sealed virtual void TriggerClientEvent(IPlayer player, string eventName, Object[] args);
    public sealed virtual void TriggerClientEventForAll(IntPtr eventNamePtr, MValueConst[] args);
    public sealed virtual void TriggerClientEventForAll(string eventName, MValueConst[] args);
    public sealed virtual void TriggerClientEventForAll(IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual void TriggerClientEventForAll(string eventName, IntPtr[] args);
    public sealed virtual void TriggerClientEventForAll(IntPtr eventNamePtr, Object[] args);
    public sealed virtual void TriggerClientEventForAll(string eventName, Object[] args);
    public sealed virtual void TriggerClientEventForSome(IPlayer[] clients, IntPtr eventNamePtr, MValueConst[] args);
    public sealed virtual void TriggerClientEventForSome(IPlayer[] clients, string eventName, MValueConst[] args);
    public sealed virtual void TriggerClientEventForSome(IPlayer[] clients, IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual void TriggerClientEventForSome(IPlayer[] clients, string eventName, IntPtr[] args);
    public sealed virtual void TriggerClientEventForSome(IPlayer[] clients, IntPtr eventNamePtr, Object[] args);
    public sealed virtual void TriggerClientEventForSome(IPlayer[] clients, string eventName, Object[] args);
    public sealed virtual void TriggerClientEventUnreliable(IPlayer player, IntPtr eventNamePtr, MValueConst[] args);
    public sealed virtual void TriggerClientEventUnreliable(IPlayer player, string eventName, MValueConst[] args);
    public sealed virtual void TriggerClientEventUnreliable(IPlayer player, IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual void TriggerClientEventUnreliable(IPlayer player, string eventName, IntPtr[] args);
    public sealed virtual void TriggerClientEventUnreliable(IPlayer player, IntPtr eventNamePtr, Object[] args);
    public sealed virtual void TriggerClientEventUnreliable(IPlayer player, string eventName, Object[] args);
    public sealed virtual void TriggerClientEventUnreliableForAll(IntPtr eventNamePtr, MValueConst[] args);
    public sealed virtual void TriggerClientEventUnreliableForAll(string eventName, MValueConst[] args);
    public sealed virtual void TriggerClientEventUnreliableForAll(IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual void TriggerClientEventUnreliableForAll(string eventName, IntPtr[] args);
    public sealed virtual void TriggerClientEventUnreliableForAll(IntPtr eventNamePtr, Object[] args);
    public sealed virtual void TriggerClientEventUnreliableForAll(string eventName, Object[] args);
    public sealed virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, IntPtr eventNamePtr, MValueConst[] args);
    public sealed virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, string eventName, MValueConst[] args);
    public sealed virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, string eventName, IntPtr[] args);
    public sealed virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, IntPtr eventNamePtr, Object[] args);
    public sealed virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, string eventName, Object[] args);
    public sealed virtual void TriggerClientRPCAnswer(IPlayer target, ushort answerId, object answer, string error);
    public sealed virtual void TriggerClientRPCAnswer(IPlayer target, ushort answerId, MValueConst answer, IntPtr errorPtr);
    public sealed virtual void TriggerClientRPCAnswer(IPlayer target, ushort answerId, MValueConst answer, string error);
    public sealed virtual ushort TriggerClientRPC(IPlayer target, string name, Object[] args);
    public sealed virtual ushort TriggerClientRPC(IPlayer target, string eventName, MValueConst[] args);
    public sealed virtual ushort TriggerClientRPC(IPlayer target, IntPtr eventNamePtr, MValueConst[] args);
    public ushort TriggerClientRPC(IntPtr targetPtr, IntPtr eventNamePtr, IntPtr[] args);
    public sealed virtual IVehicle CreateVehicle(UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public sealed virtual IntPtr CreateVehicleEntity(UInt32& id, UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public sealed virtual IPed CreatePed(UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public sealed virtual ICheckpoint CreateCheckpoint(byte type, Position pos, float radius, float height, Rgba color, UInt32 streamingDistance);
    public sealed virtual IBlip CreateBlip(bool global, byte type, Position pos, IPlayer[] targets);
    public sealed virtual IBlip CreateBlip(bool global, byte type, IEntity entityAttach, IPlayer[] targets);
    public sealed virtual IVoiceChannel CreateVoiceChannel(bool spatial, float maxDistance);
    public sealed virtual IColShape CreateColShapeCylinder(Position pos, float radius, float height);
    public sealed virtual IColShape CreateColShapeSphere(Position pos, float radius);
    public sealed virtual IColShape CreateColShapeCircle(Position pos, float radius);
    public sealed virtual IColShape CreateColShapeCube(Position pos, Position pos2);
    public sealed virtual IColShape CreateColShapeRectangle(float x1, float y1, float x2, float y2, float z);
    public sealed virtual IColShape CreateColShapePolygon(float minZ, float maxZ, Vector2[] points);
    public sealed virtual INativeResource GetResource(string name);
    public sealed virtual INativeResource GetResource(IntPtr resourcePointer);
    public sealed virtual INativeResource[] GetAllResources();
    public sealed virtual IReadOnlyCollection`1<IPlayer> GetAllPlayers();
    public sealed virtual IReadOnlyCollection`1<IConnectionInfo> GetAllConnectionInfos();
    public sealed virtual IReadOnlyCollection`1<IVehicle> GetAllVehicles();
    public sealed virtual IReadOnlyCollection`1<IBlip> GetAllBlips();
    public sealed virtual IReadOnlyCollection`1<ICheckpoint> GetAllCheckpoints();
    public sealed virtual IReadOnlyCollection`1<IVirtualEntity> GetAllVirtualEntities();
    public sealed virtual IReadOnlyCollection`1<IVirtualEntityGroup> GetAllVirtualEntityGroups();
    public sealed virtual IReadOnlyCollection`1<IPed> GetAllPeds();
    public sealed virtual IReadOnlyCollection`1<IObject> GetAllNetworkObjects();
    public sealed virtual IReadOnlyCollection`1<IColShape> GetAllColShapes();
    public sealed virtual IReadOnlyCollection`1<IMarker> GetAllMarkers();
    public sealed virtual IBaseObject GetBaseObjectById(BaseObjectType type, UInt32 id);
    public sealed virtual void StartResource(string name);
    public sealed virtual void StopResource(string name);
    public sealed virtual void RestartResource(string name);
    public sealed virtual void AddClientConfigKey(string key);
    public sealed virtual void SetSyncedMetaData(string key, object value);
    public sealed virtual void DeleteSyncedMetaData(string key);
    public void OnScriptsLoaded(IScript[] scripts);
    public virtual void OnScriptLoaded(IScript script);
    public sealed virtual void SetExport(string key, Function function);
    public sealed virtual IEnumerable`1<Assembly> get_Assemblies();
    public sealed virtual Assembly LoadAssemblyFromName(AssemblyName assemblyName);
    public sealed virtual Assembly LoadAssemblyFromStream(Stream stream);
    public sealed virtual Assembly LoadAssemblyFromStream(Stream stream, Stream assemblySymbols);
    public sealed virtual Assembly LoadAssemblyFromPath(string path);
    public sealed virtual Assembly LoadAssemblyFromNativeImagePath(string nativeImagePath, string assemblyPath);
    public sealed virtual WeakReference`1<AssemblyLoadContext> GetAssemblyLoadContext();
    public virtual void Dispose();
    public sealed virtual bool FileExists(string path);
    public sealed virtual string FileRead(string path);
    public sealed virtual Byte[] FileReadBinary(string path);
    public sealed virtual IConfig GetServerConfig();
    public sealed virtual void SetWorldProfiler(bool state);
    public sealed virtual IBaseObject[] GetClosestEntities(Position position, int range, int dimension, int limit, EntityType allowedTypes, Order order);
    public sealed virtual IBaseObject[] GetEntitiesInDimension(int dimension, EntityType allowedTypes);
    public sealed virtual IBaseObject[] GetEntitiesInRange(Position position, int range, int dimension, EntityType allowedTypes);
    public sealed virtual IBaseObject GetBaseObject(BaseObjectType type, UInt32 id);
    public sealed virtual IMetric RegisterMetric(string name, MetricType type, Dictionary`2<string, string> dataDict);
    public sealed virtual void UnregisterMetric(IMetric metric);
    public sealed virtual IMarker CreateMarker(IPlayer player, MarkerType type, Position pos, Rgba color);
    public sealed virtual IObject CreateObject(UInt32 hash, Position position, Rotation rotation, byte alpha, byte textureVariation, ushort lodDistance, UInt32 streamingDistance);
    public sealed virtual IVirtualEntityGroup CreateVirtualEntityGroup(UInt32 streamingDistance);
    public sealed virtual IVirtualEntity CreateVirtualEntity(IVirtualEntityGroup group, Position position, UInt32 streamingDistance, Dictionary`2<string, object> dataDict);
    public sealed virtual void SetVoiceExternalPublic(string host, ushort port);
    public sealed virtual void SetVoiceExternal(string host, ushort port);
    public sealed virtual ushort get_MaxStreamingPeds();
    public sealed virtual void set_MaxStreamingPeds(ushort value);
    public sealed virtual ushort get_MaxStreamingObjects();
    public sealed virtual void set_MaxStreamingObjects(ushort value);
    public sealed virtual ushort get_MaxStreamingVehicles();
    public sealed virtual void set_MaxStreamingVehicles(ushort value);
    public sealed virtual byte get_StreamerThreadCount();
    public sealed virtual void set_StreamerThreadCount(byte value);
    public sealed virtual UInt32 get_StreamingTickRate();
    public sealed virtual void set_StreamingTickRate(UInt32 value);
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual void set_StreamingDistance(UInt32 value);
    public sealed virtual UInt32 get_ColShapeTickRate();
    public sealed virtual void set_ColShapeTickRate(UInt32 value);
    public sealed virtual UInt32 get_MigrationDistance();
    public sealed virtual void set_MigrationDistance(UInt32 value);
    public sealed virtual bool HasBenefit(Benefit benefit);
    public sealed virtual byte get_MigrationThreadCount();
    public sealed virtual void set_MigrationThreadCount(byte value);
    public sealed virtual UInt32 get_MigrationTickRate();
    public sealed virtual void set_MigrationTickRate(UInt32 value);
    public sealed virtual byte get_SyncReceiveThreadCount();
    public sealed virtual void set_SyncReceiveThreadCount(byte value);
    public sealed virtual byte get_SyncSendThreadCount();
    public sealed virtual void set_SyncSendThreadCount(byte value);
    public sealed virtual UInt32[] get_LoadedVehicleModels();
    public sealed virtual IReadOnlyCollection`1<IMetric> GetAllMetrics();
    public void OnCheckpoint(IntPtr checkpointPointer, IntPtr entityPointer, BaseObjectType baseObjectType, bool state);
    public virtual void OnCheckPointEvent(ICheckpoint checkpoint, IWorldObject entity, bool state);
    public void OnPlayerConnect(IntPtr playerPointer, string reason);
    public virtual void OnPlayerConnectEvent(IPlayer player, string reason);
    public void OnPlayerConnectDenied(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId);
    public virtual void OnPlayerConnectDeniedEvent(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId);
    public void OnResourceStart(IntPtr resourcePointer);
    public virtual void OnResourceStartEvent(INativeResource resource);
    public void OnResourceStop(IntPtr resourcePointer);
    public virtual void OnResourceStopEvent(INativeResource resource);
    public void OnResourceError(IntPtr resourcePointer);
    public virtual void OnResourceErrorEvent(INativeResource resource);
    public void OnPlayerDamage(IntPtr playerPointer, IntPtr attackerEntityPointer, BaseObjectType attackerBaseObjectType, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual void OnPlayerDamageEvent(IPlayer player, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public void OnPlayerDeath(IntPtr playerPointer, IntPtr killerEntityPointer, BaseObjectType killerBaseObjectType, UInt32 weapon);
    public virtual void OnPlayerDeathEvent(IPlayer player, IEntity killer, UInt32 weapon);
    public void OnPlayerHeal(IntPtr playerPointer, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual void OnPlayerHealEvent(IPlayer player, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public void OnExplosion(IntPtr eventPointer, IntPtr playerPointer, ExplosionType explosionType, Position position, UInt32 explosionFx, IntPtr targetEntityPointer, BaseObjectType targetEntityType);
    public virtual void OnExplosionEvent(IntPtr eventPointer, IPlayer sourcePlayer, ExplosionType explosionType, Position position, UInt32 explosionFx, IEntity targetEntity);
    public void OnWeaponDamage(IntPtr eventPointer, IntPtr playerPointer, IntPtr entityPointer, BaseObjectType entityType, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart);
    public virtual void OnWeaponDamageEvent(IntPtr eventPointer, IPlayer sourcePlayer, IEntity targetEntity, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart);
    public void OnPlayerChangeVehicleSeat(IntPtr vehiclePointer, IntPtr playerPointer, byte oldSeat, byte newSeat);
    public virtual void OnPlayerChangeVehicleSeatEvent(IVehicle vehicle, IPlayer player, byte oldSeat, byte newSeat);
    public void OnPlayerEnterVehicle(IntPtr vehiclePointer, IntPtr playerPointer, byte seat);
    public virtual void OnPlayerEnterVehicleEvent(IVehicle vehicle, IPlayer player, byte seat);
    public void OnPlayerEnteringVehicle(IntPtr vehiclePointer, IntPtr playerPointer, byte seat);
    public virtual void OnPlayerEnteringVehicleEvent(IVehicle vehicle, IPlayer player, byte seat);
    public void OnPlayerLeaveVehicle(IntPtr vehiclePointer, IntPtr playerPointer, byte seat);
    public virtual void OnPlayerLeaveVehicleEvent(IVehicle vehicle, IPlayer player, byte seat);
    public void OnPlayerDisconnect(IntPtr playerPointer, string reason);
    public virtual void OnPlayerDisconnectEvent(IPlayer player, string reason);
    public void OnConsoleCommand(string name, String[] args);
    public virtual void OnConsoleCommandEvent(string name, String[] args);
    public void OnMetaDataChange(IntPtr entityPointer, BaseObjectType entityType, string key, IntPtr value);
    public virtual void OnMetaDataChangeEvent(IEntity entity, string key, object value);
    public void OnSyncedMetaDataChange(IntPtr entityPointer, BaseObjectType entityType, string key, IntPtr value);
    public virtual void OnSyncedMetaDataChangeEvent(IEntity entity, string key, object value);
    public void OnColShape(IntPtr colShapePointer, IntPtr targetEntityPointer, BaseObjectType entityType, bool state);
    public virtual void OnColShapeEvent(IColShape colShape, IWorldObject entity, bool state);
    public void OnVehicleDestroy(IntPtr vehiclePointer);
    public virtual void OnVehicleDestroyEvent(IVehicle vehicle);
    public void OnFire(IntPtr eventPointer, IntPtr playerPointer, FireInfo[] fires);
    public virtual void OnFireEvent(IntPtr eventPointer, IPlayer player, FireInfo[] fires);
    public void OnStartProjectile(IntPtr eventPointer, IntPtr sourcePlayerPointer, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash);
    public virtual void OnStartProjectileEvent(IntPtr eventPointer, IPlayer player, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash);
    public void OnPlayerWeaponChange(IntPtr eventPointer, IntPtr targetPlayerPointer, UInt32 oldWeapon, UInt32 newWeapon);
    public virtual void OnPlayerWeaponChangeEvent(IntPtr eventPointer, IPlayer player, UInt32 oldWeapon, UInt32 newWeapon);
    public void OnNetOwnerChange(IntPtr eventPointer, IntPtr targetEntityPointer, BaseObjectType targetEntityType, IntPtr oldNetOwnerPointer, IntPtr newNetOwnerPointer);
    public virtual void OnNetOwnerChangeEvent(IEntity targetEntity, IPlayer oldPlayer, IPlayer newPlayer);
    public void OnVehicleAttach(IntPtr eventPointer, IntPtr targetPointer, IntPtr attachedPointer);
    public virtual void OnVehicleAttachEvent(IVehicle targetVehicle, IVehicle attachedVehicle);
    public void OnVehicleDetach(IntPtr eventPointer, IntPtr targetPointer, IntPtr detachedPointer);
    public virtual void OnVehicleDetachEvent(IVehicle targetVehicle, IVehicle detachedVehicle);
    public void OnVehicleDamage(IntPtr eventPointer, IntPtr vehiclePointer, IntPtr entityPointer, BaseObjectType entityType, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash);
    public virtual void OnVehicleDamageEvent(IVehicle targetVehicle, IEntity sourceEntity, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash);
    public void OnVehicleHorn(IntPtr eventPointer, IntPtr targetPointer, IntPtr reporterPointer, bool state);
    public virtual void OnVehicleHornEvent(IntPtr eventPointer, IVehicle targetVehicle, IPlayer reporterPlayer, bool state);
    public virtual void OnConnectionQueueAdd(IntPtr connectionInfoPtr);
    public virtual void OnConnectionQueueAddEvent(IConnectionInfo connectionInfo);
    public virtual void OnConnectionQueueRemove(IntPtr connectionInfoPtr);
    public virtual void OnConnectionQueueRemoveEvent(IConnectionInfo connectionInfo);
    public virtual void OnServerStarted();
    public virtual void OnServerStartedEvent();
    public virtual void OnPlayerRequestControl(IntPtr eventPtr, IntPtr targetPtr, BaseObjectType targetType, IntPtr playerPtr);
    public virtual void OnPlayerRequestControlEvent(IntPtr eventPtr, IEntity target, IPlayer player);
    public virtual void OnPlayerChangeAnimation(IntPtr playerPtr, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName);
    public virtual void OnPlayerChangeAnimationEvent(IPlayer player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName);
    public virtual void OnPlayerChangeInterior(IntPtr playerPtr, UInt32 oldIntLoc, UInt32 newIntLoc);
    public virtual void OnPlayerChangeInteriorEvent(IPlayer player, UInt32 oldIntLoc, UInt32 newIntLoc);
    public virtual void OnPlayerDimensionChange(IntPtr playerPtr, int oldDimension, int newDimension);
    public virtual void OnPlayerDimensionChangeEvent(IPlayer player, int oldDimension, int newDimension);
    public void OnVehicleSiren(IntPtr targetVehiclePointer, bool state);
    public virtual void OnVehicleSirenEvent(IVehicle targetVehicle, bool state);
    public void OnPlayerSpawn(IntPtr playerPointer);
    public virtual void OnPlayerSpawnEvent(IPlayer player);
    public virtual IEnumerable`1<string> GetRegisteredClientEvents();
    public virtual IEnumerable`1<string> GetRegisteredServerEvents();
    public sealed virtual Function OnClient(string eventName, Function function, bool isOnce);
    public sealed virtual void OffClient(string eventName, Function function);
    public sealed virtual Function OnServer(string eventName, Function function, bool isOnce);
    public sealed virtual void OffServer(string eventName, Function function);
    public sealed virtual void On(string eventName, TFunc func, ClientEventParser`1<TFunc> parser);
    public sealed virtual void Off(string eventName, TFunc func, ClientEventParser`1<TFunc> parser);
    public sealed virtual void On(string eventName, TFunc func, ServerEventParser`1<TFunc> parser);
    public sealed virtual void Off(string eventName, TFunc func, ServerEventParser`1<TFunc> parser);
    public void OnClientEvent(IntPtr playerPointer, string name, IntPtr[] args);
    public virtual void OnClientEventEvent(IPlayer player, string name, IntPtr[] args, MValueConst[] mValues, Object[] objects);
    public void OnServerEvent(string name, IntPtr[] args);
    public virtual void OnServerEventEvent(string name, IntPtr[] args, MValueConst[] mValues, Object[] objects);
    public void OnModulesLoaded(IModule[] modules);
    public virtual void OnModuleLoaded(IModule module);
    public void OnCreateBaseObject(IntPtr baseObjectPtr, BaseObjectType type, UInt32 id);
    public virtual void OnCreateBaseObjectEvent(IBaseObject baseObject);
    public void OnRemoveBaseObject(IntPtr baseObjectPtr, BaseObjectType type);
    public virtual void OnRemoveBaseObjectEvent(IBaseObject baseObject);
    public void OnPlayerRemove(IntPtr playerPointer);
    public virtual void OnPlayerRemoveEvent(IPlayer player);
    public void OnVehicleRemove(IntPtr vehiclePointer);
    public virtual void OnVehicleRemoveEvent(IVehicle vehicle);
    public void OnPedRemove(IntPtr pedPointer);
    public virtual void OnPedRemoveEvent(IPed ped);
    public virtual void OnRequestSyncedScene(IntPtr eventPointer, IntPtr source, int sceneid);
    public virtual void OnRequestSyncedSceneEvent(IntPtr eventPointer, IPlayer sourcePlayer, int sceneid);
    public virtual void OnStartSyncedScene(IntPtr source, int sceneid, Position position, Rotation rotation, UInt32 animDictHash, IntPtr[] entites, BaseObjectType[] types, UInt32[] animHashes, ulong size);
    public virtual void OnStartSyncedSceneEvent(IPlayer sourcePlayer, int sceneid, Position position, Rotation rotation, UInt32 animDictHash, Dictionary`2<IEntity, UInt32> entityAndAnimHash);
    public virtual void OnStopSyncedScene(IntPtr source, int sceneid);
    public virtual void OnStopSyncedSceneEvent(IPlayer sourcePlayer, int sceneid);
    public virtual void OnUpdateSyncedScene(IntPtr source, float startRate, int sceneid);
    public virtual void OnUpdateSyncedSceneEvent(IPlayer sourcePlayer, float startRate, int sceneid);
    public virtual void OnClientRequestObject(IntPtr eventPointer, IntPtr source, UInt32 model, Position position);
    public virtual void OnClientRequestObjectEvent(IntPtr eventPointer, IPlayer sourcePlayer, UInt32 model, Position position);
    public virtual void OnClientDeleteObject(IntPtr eventPointer, IntPtr source);
    public virtual void OnClientDeleteObjectEvent(IntPtr eventPointer, IPlayer sourcePlayer);
    public virtual void OnGivePedScriptedTask(IntPtr eventPointer, IntPtr source, IntPtr target, UInt32 taskType);
    public virtual void OnGivePedScriptedTaskEvent(IntPtr eventPointer, IPlayer source, IPed target, UInt32 taskType);
    public void OnPedDamage(IntPtr pedpointer, IntPtr attackerentitypointer, BaseObjectType attackerbaseobjecttype, UInt32 weapon, ushort healthdamage, ushort armourdamage);
    public virtual void OnPedDamageEvent(IPed ped, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public void OnPedDeath(IntPtr pedpointer, IntPtr killerentitypointer, BaseObjectType killerbaseobjecttype, UInt32 weapon);
    public virtual void OnPedDeathEvent(IPed ped, IEntity killer, UInt32 weapon);
    public void OnPedHeal(IntPtr pedpointer, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual void OnPedHealEvent(IPed ped, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public void OnPlayerStartTalking(IntPtr playerpointer);
    public virtual void OnPlayerStartTalkingEvent(IPlayer player);
    public void OnPlayerStopTalking(IntPtr playerpointer);
    public virtual void OnPlayerStopTalkingEvent(IPlayer player);
    public void OnScriptRPC(IntPtr eventpointer, IntPtr targetpointer, string name, IntPtr[] args, ushort answerId);
    public virtual void OnScriptRPCEvent(IntPtr eventpointer, IPlayer target, string name, Object[] objects, ushort answerId, bool async);
    public void OnScriptAnswerRPC(IntPtr targetpointer, ushort answerid, IntPtr answer, string answererror);
    public virtual void OnScriptAnswerRPCEvent(IPlayer target, ushort answerid, IntPtr mValue, string answererror);
    [CompilerGeneratedAttribute]
private VehicleModelInfo <GetVehicleModelInfo>b__27_0(UInt32 u);
    [CompilerGeneratedAttribute]
private Nullable`1<PedModelInfo> <GetPedModelInfo>b__28_0(UInt32 u);
    [CompilerGeneratedAttribute]
private Nullable`1<WeaponModelInfo> <GetWeaponModelInfo>b__29_0(UInt32 u);
    [CompilerGeneratedAttribute]
private INativeResource <GetAllResources>b__89_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IPlayer <GetAllPlayers>b__90_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IConnectionInfo <GetAllConnectionInfos>b__91_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IVehicle <GetAllVehicles>b__92_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IBlip <GetAllBlips>b__93_0(IntPtr e);
    [CompilerGeneratedAttribute]
private ICheckpoint <GetAllCheckpoints>b__94_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IVirtualEntity <GetAllVirtualEntities>b__95_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IVirtualEntityGroup <GetAllVirtualEntityGroups>b__96_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IPed <GetAllPeds>b__97_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IObject <GetAllNetworkObjects>b__98_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IColShape <GetAllColShapes>b__99_0(IntPtr e);
    [CompilerGeneratedAttribute]
private IMarker <GetAllMarkers>b__100_0(IntPtr e);
}
public class AltV.Net.CSharpResourceImpl : SharedCSharpResourceImpl {
    private LinkedList`1<GCHandle> handles;
    internal CSharpResourceImpl(ISharedCore core, IntPtr nativePointer);
    internal void SetDelegates(MainDelegate onStart);
    public sealed virtual void Dispose();
}
public class AltV.Net.Data.AmmoFlags : ValueType {
    public bool InfiniteAmmo;
    public bool AddSmokeOnExplosion;
    public bool Fuse;
    public bool FixedAfterExplosion;
}
[IsReadOnlyAttribute]
internal class AltV.Net.Data.AmmoFlagsInternal : ValueType {
    private bool InfiniteAmmo;
    private bool AddSmokeOnExplosion;
    private bool Fuse;
    private bool FixedAfterExplosion;
    public AmmoFlags ToPublic();
}
public enum AltV.Net.Data.Benefit : Enum {
    public byte value__;
    public static Benefit None;
    public static Benefit CloudAuth;
}
public class AltV.Net.Data.BoneInfo : ValueType {
    public ushort Id;
    public ushort Index;
    public string Name;
}
public enum AltV.Net.Data.CloudAuthResult : Enum {
    public byte value__;
    public static CloudAuthResult Success;
    public static CloudAuthResult NoBenefit;
    public static CloudAuthResult VerifyFailed;
}
public class AltV.Net.Data.Decoration : ValueType {
    public UInt32 Collection;
    public UInt32 Overlay;
    public byte Count;
}
[IsReadOnlyAttribute]
internal class AltV.Net.Data.DecorationInternal : ValueType {
    private UInt32 Collection;
    private UInt32 Overlay;
    private byte Count;
    public Decoration ToPublic();
}
[FlagsAttribute]
public enum AltV.Net.Data.EntityType : Enum {
    public int value__;
    public static EntityType Player;
    public static EntityType Vehicle;
    public static EntityType Ped;
    public static EntityType Object;
}
public class AltV.Net.Data.InternalPlayerSeat : ValueType {
    [CompilerGeneratedAttribute]
private IntPtr <PlayerPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Seat>k__BackingField;
    public IntPtr PlayerPointer { get; public set; }
    public byte Seat { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IntPtr get_PlayerPointer();
    [CompilerGeneratedAttribute]
public void set_PlayerPointer(IntPtr value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Seat();
    [CompilerGeneratedAttribute]
public void set_Seat(byte value);
}
public class AltV.Net.Data.Metric : object {
    [CompilerGeneratedAttribute]
private IntPtr <MetricNativePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICore <Core>k__BackingField;
    public IntPtr MetricNativePointer { get; }
    public ICore Core { get; }
    public string Name { get; }
    public ulong Value { get; public set; }
    public Metric(ICore core, IntPtr metricNativePointer);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_MetricNativePointer();
    [CompilerGeneratedAttribute]
public sealed virtual ICore get_Core();
    public sealed virtual string get_Name();
    public sealed virtual ulong get_Value();
    public sealed virtual void set_Value(ulong value);
    public sealed virtual void Begin();
    [ObsoleteAttribute("Deprecated old behavior, remove in future. Use End2")]
public sealed virtual void End();
    public sealed virtual void Add(ulong value);
    public sealed virtual void Inc();
    public sealed virtual void End2();
}
public enum AltV.Net.Data.MetricType : Enum {
    public byte value__;
    public static MetricType MetricTypeGauge;
    public static MetricType MetricTypeCounter;
    public static MetricType MetricTypeSize;
}
public enum AltV.Net.Data.Order : Enum {
    public int value__;
    public static Order Default;
    public static Order Asc;
    public static Order Desc;
}
public class AltV.Net.Data.PedModelInfo : ValueType {
    public string Name;
    public UInt32 Hash;
    public string Type;
    public string DlcName;
    public string DefaultUnarmedWeapon;
    public string MovementClipSet;
    public BoneInfo[] Bones;
}
[IsReadOnlyAttribute]
internal class AltV.Net.Data.PedModelInfoInternal : ValueType {
    private string Name;
    private UInt32 Hash;
    private string Type;
    private string DlcName;
    private string DefaultUnarmedWeapon;
    private string MovementClipSet;
    private IntPtr BonesPtr;
    private UInt32 BonesSize;
    public PedModelInfo ToPublic();
}
public class AltV.Net.Data.PlayerConnectionInfo : ValueType {
    public string Name;
    public ulong SocialId;
    public ulong HwidHash;
    public ulong HwidExHash;
    public string AuthToken;
    public bool IsDebug;
    public string Branch;
    public UInt32 Build;
    public string CdnUrl;
    public ulong PasswordHash;
}
public class AltV.Net.Data.PlayerSeat : ValueType {
    [CompilerGeneratedAttribute]
private IPlayer <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Seat>k__BackingField;
    public IPlayer Player { get; public set; }
    public byte Seat { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPlayer get_Player();
    [CompilerGeneratedAttribute]
public void set_Player(IPlayer value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Seat();
    [CompilerGeneratedAttribute]
public void set_Seat(byte value);
}
public class AltV.Net.Data.VehicleModelInfo : ValueType {
    public UInt32 ModelHash;
    public string Title;
    public VehicleModelType Type;
    public byte WheelsCount;
    public bool HasArmoredWindows;
    public byte PrimaryColor;
    public byte SecondaryColor;
    public byte PearlColor;
    public byte WheelsColor;
    public byte InteriorColor;
    public byte DashboardColor;
    public ushort Extras;
    public ushort DefaultExtras;
    public Boolean[] ModKits;
    public bool HasAutoAttachTrailer;
    public BoneInfo[] Bones;
    public bool CanAttachCars;
    public UInt32 HandlingNameHash;
    public bool HasExtra(byte extraId);
    public bool HasDefaultExtra(byte extraId);
}
[IsReadOnlyAttribute]
internal class AltV.Net.Data.VehicleModelInfoInternal : ValueType {
    private UInt32 ModelHash;
    private string Title;
    private VehicleModelType Type;
    private byte WheelsCount;
    private bool HasArmoredWindows;
    private byte PrimaryColor;
    private byte SecondaryColor;
    private byte PearlColor;
    private byte WheelsColor;
    private byte InteriorColor;
    private byte DashboardColor;
    private ushort Extras;
    private ushort DefaultExtras;
    private Boolean[] ModKits;
    private bool HasAutoAttachTrailer;
    private IntPtr BonesPtr;
    private UInt32 BonesSize;
    private bool CanAttachCars;
    private UInt32 HandlingNameHash;
    public VehicleModelInfo ToPublic();
}
public enum AltV.Net.Data.VehicleModelType : Enum {
    public byte value__;
    public static VehicleModelType INVALID;
    public static VehicleModelType PED;
    public static VehicleModelType AUTOMOBILE;
    public static VehicleModelType PLANE;
    public static VehicleModelType TRAILER;
    public static VehicleModelType QUAD_BIKE;
    public static VehicleModelType SUBMARINE_CAR;
    public static VehicleModelType AMPHIBIOUS_AUTOMOBILE;
    public static VehicleModelType AMPHIBIOUS_QUAD_BIKE;
    public static VehicleModelType HELI;
    public static VehicleModelType BLIMP;
    public static VehicleModelType AUTOGYRO;
    public static VehicleModelType BIKE;
    public static VehicleModelType BMX;
    public static VehicleModelType BOAT;
    public static VehicleModelType TRAIN;
    public static VehicleModelType SUBMARINE;
    public static VehicleModelType OBJECT;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AltV.Net.Data.WeaponDamageResponse : object {
    [CompilerGeneratedAttribute]
private bool <notCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <Damage>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool notCancel { get; public set; }
    public Nullable`1<UInt32> Damage { get; public set; }
    public WeaponDamageResponse(bool notCancel, Nullable`1<UInt32> Damage);
    [CompilerGeneratedAttribute]
protected WeaponDamageResponse(WeaponDamageResponse original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_notCancel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_notCancel(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_Damage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Damage(Nullable`1<UInt32> value);
    [NullableContextAttribute("0")]
public static WeaponDamageResponse op_Implicit(bool val);
    [NullableContextAttribute("0")]
public static WeaponDamageResponse op_Implicit(UInt32 val);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(WeaponDamageResponse left, WeaponDamageResponse right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(WeaponDamageResponse left, WeaponDamageResponse right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(WeaponDamageResponse other);
    [CompilerGeneratedAttribute]
public virtual WeaponDamageResponse <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& notCancel, Nullable`1& Damage);
}
public class AltV.Net.Data.WeaponModelInfo : ValueType {
    public UInt32 Hash;
    public string Name;
    public string ModelName;
    public UInt32 ModelHash;
    public UInt32 AmmoTypeHash;
    public string AmmoType;
    public string AmmoModelName;
    public UInt32 AmmoModelHash;
    public int DefaultMaxAmmoMp;
    public int SkillAbove50MaxAmmoMp;
    public int MaxSkillMaxAmmoMp;
    public int BonusMaxAmmoMp;
}
[IsReadOnlyAttribute]
internal class AltV.Net.Data.WeaponModelInfoInternal : ValueType {
    private UInt32 Hash;
    private string Name;
    private string ModelName;
    private UInt32 ModelHash;
    private UInt32 AmmoTypeHash;
    private string AmmoType;
    private string AmmoModelName;
    private UInt32 AmmoModelHash;
    private int DefaultMaxAmmoMp;
    private int SkillAbove50MaxAmmoMp;
    private int MaxSkillMaxAmmoMp;
    private int BonusMaxAmmoMp;
    public WeaponModelInfo ToPublic();
}
public class AltV.Net.DefaultResource : Resource {
    public virtual void OnStart();
    public virtual void OnStop();
}
public static class AltV.Net.Elements.Args.MValueAdapters : object {
    [ObsoleteAttribute("Use Alt.RegisterMValueAdapter instead")]
public static void Register(IMValueAdapter`1<T> adapter);
    [ObsoleteAttribute("Use Alt.ToMValue instead")]
public static bool ToMValue(object obj, Type type, MValueConst& mValue);
    [ObsoleteAttribute("Use Alt.FromMValue instead")]
public static bool FromMValue(MValueConst& mValue, Type type, Object& obj);
    [ObsoleteAttribute("Use Alt.MValueFromObject instead")]
public static bool FromObject(object obj, Type type, Object& result);
    [ObsoleteAttribute("Use Alt.IsMValueConvertible instead")]
public static bool IsConvertible(Type type);
}
public abstract class AltV.Net.Elements.Entities.BaseObject : SharedBaseObject {
    [CompilerGeneratedAttribute]
private IntPtr <BaseObjectNativePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICore <Core>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseObjectType <Type>k__BackingField;
    public IntPtr BaseObjectNativePointer { get; protected set; }
    public ICore Core { get; }
    public UInt32 Id { get; }
    public BaseObjectType Type { get; }
    protected BaseObject(ICore core, IntPtr nativePointer, BaseObjectType type, UInt32 id);
    [CompilerGeneratedAttribute]
public virtual IntPtr get_BaseObjectNativePointer();
    [CompilerGeneratedAttribute]
protected virtual void set_BaseObjectNativePointer(IntPtr value);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override ICore get_Core();
    [CompilerGeneratedAttribute]
public virtual UInt32 get_Id();
    [CompilerGeneratedAttribute]
public virtual BaseObjectType get_Type();
    public virtual void CheckIfEntityExists();
    public virtual void CheckIfCallIsValid();
    [ObsoleteAttribute]
public sealed virtual void SetSyncedMetaData(string key, object value);
    [ObsoleteAttribute]
public sealed virtual void SetSyncedMetaData(Dictionary`2<string, object> metaData);
    [ObsoleteAttribute]
public void SetSyncedMetaData(string key, MValueConst& value);
    [ObsoleteAttribute]
public sealed virtual void DeleteSyncedMetaData(string key);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.Blip : WorldObject {
    [CompilerGeneratedAttribute]
private IntPtr <BlipNativePointer>k__BackingField;
    public IntPtr BlipNativePointer { get; }
    public IntPtr NativePointer { get; }
    public bool IsGlobal { get; public set; }
    public bool IsAttached { get; }
    public IEntity AttachedTo { get; }
    public byte BlipType { get; public set; }
    public UInt32 Sprite { get; public set; }
    public UInt32 Color { get; public set; }
    public bool Route { get; public set; }
    public Rgba RouteColor { get; public set; }
    public Vector2 ScaleXY { get; public set; }
    public UInt32 Display { get; public set; }
    public Rgba SecondaryColor { get; public set; }
    public UInt32 Alpha { get; public set; }
    public ushort FlashTimer { get; public set; }
    public ushort FlashInterval { get; public set; }
    public bool Friendly { get; public set; }
    public bool Bright { get; public set; }
    public ushort Number { get; public set; }
    public bool ShowCone { get; public set; }
    public bool Flashes { get; public set; }
    public bool FlashesAlternate { get; public set; }
    public bool ShortRange { get; public set; }
    public UInt32 Priority { get; public set; }
    public float Rotation { get; public set; }
    public string GxtName { get; public set; }
    public string Name { get; public set; }
    public bool Pulse { get; public set; }
    public bool MissionCreator { get; public set; }
    public bool TickVisible { get; public set; }
    public bool HeadingIndicatorVisible { get; public set; }
    public bool OutlineIndicatorVisible { get; public set; }
    public bool CrewIndicatorVisible { get; public set; }
    public UInt32 Category { get; public set; }
    public bool HighDetail { get; public set; }
    public bool Shrinked { get; public set; }
    public bool Visible { get; public set; }
    public bool IsHiddenOnLegend { get; public set; }
    public bool IsMinimalOnEdge { get; public set; }
    public bool IsUseHeightIndicatorOnEdge { get; public set; }
    public bool IsShortHeightThreshold { get; public set; }
    public Blip(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_BlipNativePointer();
    public sealed virtual void AddTargetPlayer(IPlayer player);
    public sealed virtual void RemoveTargetPlayer(IPlayer player);
    public sealed virtual IReadOnlyCollection`1<IPlayer> GetTargets();
    public virtual IntPtr get_NativePointer();
    public static UInt32 GetId(IntPtr pedPointer);
    private static IntPtr GetWorldObjectPointer(ICore core, IntPtr nativePointer);
    public sealed virtual bool get_IsGlobal();
    public sealed virtual void set_IsGlobal(bool value);
    public sealed virtual bool get_IsAttached();
    public sealed virtual IEntity get_AttachedTo();
    public sealed virtual byte get_BlipType();
    public sealed virtual void set_BlipType(byte value);
    public sealed virtual UInt32 get_Sprite();
    public sealed virtual void set_Sprite(UInt32 value);
    public sealed virtual UInt32 get_Color();
    public sealed virtual void set_Color(UInt32 value);
    public sealed virtual bool get_Route();
    public sealed virtual void set_Route(bool value);
    public sealed virtual Rgba get_RouteColor();
    public sealed virtual void set_RouteColor(Rgba value);
    public sealed virtual Vector2 get_ScaleXY();
    public sealed virtual void set_ScaleXY(Vector2 value);
    public sealed virtual UInt32 get_Display();
    public sealed virtual void set_Display(UInt32 value);
    public sealed virtual Rgba get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(Rgba value);
    public sealed virtual UInt32 get_Alpha();
    public sealed virtual void set_Alpha(UInt32 value);
    public sealed virtual ushort get_FlashTimer();
    public sealed virtual void set_FlashTimer(ushort value);
    public sealed virtual ushort get_FlashInterval();
    public sealed virtual void set_FlashInterval(ushort value);
    public sealed virtual bool get_Friendly();
    public sealed virtual void set_Friendly(bool value);
    public sealed virtual bool get_Bright();
    public sealed virtual void set_Bright(bool value);
    public sealed virtual ushort get_Number();
    public sealed virtual void set_Number(ushort value);
    public sealed virtual bool get_ShowCone();
    public sealed virtual void set_ShowCone(bool value);
    public sealed virtual bool get_Flashes();
    public sealed virtual void set_Flashes(bool value);
    public sealed virtual bool get_FlashesAlternate();
    public sealed virtual void set_FlashesAlternate(bool value);
    public sealed virtual bool get_ShortRange();
    public sealed virtual void set_ShortRange(bool value);
    public sealed virtual UInt32 get_Priority();
    public sealed virtual void set_Priority(UInt32 value);
    public sealed virtual float get_Rotation();
    public sealed virtual void set_Rotation(float value);
    public sealed virtual string get_GxtName();
    public sealed virtual void set_GxtName(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_Pulse();
    public sealed virtual void set_Pulse(bool value);
    public sealed virtual bool get_MissionCreator();
    public sealed virtual void set_MissionCreator(bool value);
    public sealed virtual bool get_TickVisible();
    public sealed virtual void set_TickVisible(bool value);
    public sealed virtual bool get_HeadingIndicatorVisible();
    public sealed virtual void set_HeadingIndicatorVisible(bool value);
    public sealed virtual bool get_OutlineIndicatorVisible();
    public sealed virtual void set_OutlineIndicatorVisible(bool value);
    public sealed virtual bool get_CrewIndicatorVisible();
    public sealed virtual void set_CrewIndicatorVisible(bool value);
    public sealed virtual UInt32 get_Category();
    public sealed virtual void set_Category(UInt32 value);
    public sealed virtual bool get_HighDetail();
    public sealed virtual void set_HighDetail(bool value);
    public sealed virtual bool get_Shrinked();
    public sealed virtual void set_Shrinked(bool value);
    public sealed virtual void Fade(UInt32 opacity, UInt32 duration);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual bool get_IsHiddenOnLegend();
    public sealed virtual void set_IsHiddenOnLegend(bool value);
    public sealed virtual bool get_IsMinimalOnEdge();
    public sealed virtual void set_IsMinimalOnEdge(bool value);
    public sealed virtual bool get_IsUseHeightIndicatorOnEdge();
    public sealed virtual void set_IsUseHeightIndicatorOnEdge(bool value);
    public sealed virtual bool get_IsShortHeightThreshold();
    public sealed virtual void set_IsShortHeightThreshold(bool value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    [CompilerGeneratedAttribute]
private IPlayer <GetTargets>b__5_0(IntPtr e);
}
public class AltV.Net.Elements.Entities.Checkpoint : ColShape {
    [CompilerGeneratedAttribute]
private IntPtr <CheckpointNativePointer>k__BackingField;
    public IntPtr CheckpointNativePointer { get; }
    public IntPtr NativePointer { get; }
    public byte CheckpointType { get; public set; }
    public float Height { get; public set; }
    public float Radius { get; public set; }
    public Rgba Color { get; public set; }
    public Position NextPosition { get; public set; }
    public UInt32 StreamingDistance { get; }
    public bool Visible { get; public set; }
    public Checkpoint(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_CheckpointNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetColShapePointer(ICore core, IntPtr nativePointer);
    public static UInt32 GetId(IntPtr pedPointer);
    public sealed virtual byte get_CheckpointType();
    public sealed virtual void set_CheckpointType(byte value);
    public sealed virtual float get_Height();
    public sealed virtual void set_Height(float value);
    public sealed virtual float get_Radius();
    public sealed virtual void set_Radius(float value);
    public sealed virtual Rgba get_Color();
    public sealed virtual void set_Color(Rgba value);
    public sealed virtual Position get_NextPosition();
    public sealed virtual void set_NextPosition(Position value);
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public void SetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void DeleteStreamSyncedMetaData(string key);
    public sealed virtual void SetStreamSyncedMetaData(string key, object value);
    public sealed virtual bool HasStreamSyncedMetaData(string key);
    public sealed virtual bool GetStreamSyncedMetaData(string key, T& result);
    public sealed virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    private sealed virtual override void AltV.Net.Elements.Entities.ICheckpoint.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.ColShape : WorldObject {
    [CompilerGeneratedAttribute]
private IntPtr <ColShapeNativePointer>k__BackingField;
    public IntPtr ColShapeNativePointer { get; }
    public IntPtr NativePointer { get; }
    public bool IsPlayersOnly { get; public set; }
    public ColShapeType ColShapeType { get; }
    public ColShape(ICore core, IntPtr nativePointer, UInt32 id);
    public ColShape(ICore core, IntPtr nativePointer, BaseObjectType baseObjectType, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_ColShapeNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetWorldObjectPointer(ICore core, IntPtr nativePointer);
    public static UInt32 GetId(IntPtr pedPointer);
    public sealed virtual bool get_IsPlayersOnly();
    public sealed virtual void set_IsPlayersOnly(bool value);
    public sealed virtual ColShapeType get_ColShapeType();
    public sealed virtual bool IsEntityIdIn(UInt32 id);
    public sealed virtual bool IsPointIn(Vector3 point);
    public sealed virtual bool IsEntityIn(ISharedEntity entity);
    public sealed virtual bool IsEntityIn(IEntity entity);
    [ObsoleteAttribute("Use IsEntityIn instead")]
public sealed virtual bool IsPlayerIn(IPlayer player);
    [ObsoleteAttribute("Use IsEntityIn instead")]
public sealed virtual bool IsVehicleIn(IVehicle vehicle);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.ConnectionInfo : BaseObject {
    [CompilerGeneratedAttribute]
private IntPtr <ConnectionInfoNativePointer>k__BackingField;
    public IntPtr ConnectionInfoNativePointer { get; }
    public IntPtr NativePointer { get; }
    public string Name { get; }
    public ulong SocialId { get; }
    public ulong HardwareIdHash { get; }
    public ulong HardwareIdExHash { get; }
    public string AuthToken { get; }
    public bool IsDebug { get; }
    public string Branch { get; }
    public ushort VersionMajor { get; }
    public ushort VersionMinor { get; }
    public string CdnUrl { get; }
    public ulong PasswordHash { get; }
    public string Ip { get; }
    public long DiscordUserId { get; }
    public string SocialName { get; }
    public string Text { get; public set; }
    public bool IsAccepted { get; }
    public string CloudId { get; }
    public CloudAuthResult CloudAuthResult { get; }
    public ConnectionInfo(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_ConnectionInfoNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetBaseObjectPointer(ICore core, IntPtr virtualEntityGroupNativePointer);
    public static UInt32 GetId(IntPtr pointer);
    public sealed virtual string get_Name();
    public sealed virtual ulong get_SocialId();
    public sealed virtual ulong get_HardwareIdHash();
    public sealed virtual ulong get_HardwareIdExHash();
    public sealed virtual string get_AuthToken();
    public sealed virtual bool get_IsDebug();
    public sealed virtual string get_Branch();
    public sealed virtual ushort get_VersionMajor();
    public sealed virtual ushort get_VersionMinor();
    public sealed virtual string get_CdnUrl();
    public sealed virtual ulong get_PasswordHash();
    public sealed virtual string get_Ip();
    public sealed virtual long get_DiscordUserId();
    public sealed virtual string get_SocialName();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual bool get_IsAccepted();
    public sealed virtual void Accept(bool sendNames);
    public sealed virtual void Decline(string reason);
    public sealed virtual string get_CloudId();
    public sealed virtual CloudAuthResult get_CloudAuthResult();
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public abstract class AltV.Net.Elements.Entities.Entity : WorldObject {
    [CompilerGeneratedAttribute]
private IntPtr <EntityNativePointer>k__BackingField;
    public IntPtr EntityNativePointer { get; private set; }
    public IntPtr NativePointer { get; }
    public IPlayer NetworkOwner { get; }
    private ISharedPlayer AltV.Net.Shared.Elements.Entities.ISharedEntity.NetworkOwner { get; }
    public Rotation Rotation { get; public set; }
    public UInt32 Model { get; public set; }
    public bool Visible { get; public set; }
    public bool Streamed { get; public set; }
    public UInt32 Timestamp { get; }
    public UInt32 StreamingDistance { get; public set; }
    public bool Frozen { get; public set; }
    public bool Collision { get; public set; }
    protected Entity(ICore core, IntPtr nativePointer, BaseObjectType type, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_EntityNativePointer();
    [CompilerGeneratedAttribute]
private void set_EntityNativePointer(IntPtr value);
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetWorldObjectNativePointer(ICore core, IntPtr nativePointer);
    public sealed virtual IPlayer get_NetworkOwner();
    private sealed virtual override ISharedPlayer AltV.Net.Shared.Elements.Entities.ISharedEntity.get_NetworkOwner();
    public sealed virtual Rotation get_Rotation();
    public sealed virtual void set_Rotation(Rotation value);
    public abstract virtual UInt32 get_Model();
    public abstract virtual void set_Model(UInt32 value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual bool get_Streamed();
    public sealed virtual void set_Streamed(bool value);
    public sealed virtual void SetNetworkOwner(IPlayer player, bool disableMigration);
    public sealed virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public void SetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual bool HasStreamSyncedMetaData(string key);
    public sealed virtual void DeleteStreamSyncedMetaData(string key);
    public sealed virtual void SetStreamSyncedMetaData(string key, object value);
    public sealed virtual bool GetStreamSyncedMetaData(string key, T& result);
    public sealed virtual void ResetNetworkOwner();
    public sealed virtual void AttachToEntity(IEntity entity, ushort otherBoneId, ushort ownBoneId, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    public sealed virtual void AttachToEntity(IEntity entity, string otherBone, string ownBone, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    public sealed virtual void Detach();
    public sealed virtual UInt32 get_Timestamp();
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual void set_StreamingDistance(UInt32 value);
    public sealed virtual bool get_Frozen();
    public sealed virtual void set_Frozen(bool value);
    public sealed virtual bool get_Collision();
    public sealed virtual void set_Collision(bool value);
    public virtual void CheckIfEntityExists();
    public virtual void SetCached(IntPtr cachedEntity);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public interface AltV.Net.Elements.Entities.IBaseObject {
    public ICore Core { get; }
    public abstract virtual ICore get_Core();
    [ObsoleteAttribute]
public abstract virtual void SetSyncedMetaData(string key, object value);
    [ObsoleteAttribute]
public abstract virtual void SetSyncedMetaData(Dictionary`2<string, object> metaData);
    [ObsoleteAttribute]
public abstract virtual void SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    [ObsoleteAttribute]
public abstract virtual void DeleteSyncedMetaData(string key);
}
public interface AltV.Net.Elements.Entities.IBlip {
    public bool IsAttached { get; }
    public IEntity AttachedTo { get; }
    public byte BlipType { get; public set; }
    public bool IsGlobal { get; public set; }
    public abstract virtual bool get_IsAttached();
    public abstract virtual IEntity get_AttachedTo();
    public abstract virtual byte get_BlipType();
    public abstract virtual void set_BlipType(byte value);
    public abstract virtual bool get_IsGlobal();
    public abstract virtual void set_IsGlobal(bool value);
    public abstract virtual void AddTargetPlayer(IPlayer player);
    public abstract virtual void RemoveTargetPlayer(IPlayer player);
    public abstract virtual IReadOnlyCollection`1<IPlayer> GetTargets();
}
public interface AltV.Net.Elements.Entities.ICheckpoint {
    public abstract virtual void SetStreamSyncedMetaData(string key, object value);
    public abstract virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public abstract virtual void SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual void DeleteStreamSyncedMetaData(string key);
    public abstract virtual bool HasStreamSyncedMetaData(string key);
    public abstract virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    public abstract virtual bool GetStreamSyncedMetaData(string key, T& result);
}
public interface AltV.Net.Elements.Entities.IColShape {
    public ColShapeType ColShapeType { get; }
    public bool IsPlayersOnly { get; public set; }
    public abstract virtual ColShapeType get_ColShapeType();
    public abstract virtual bool get_IsPlayersOnly();
    public abstract virtual void set_IsPlayersOnly(bool value);
    public abstract virtual bool IsEntityIn(IEntity entity);
    [ObsoleteAttribute("Use IsEntityIn instead")]
public abstract virtual bool IsPlayerIn(IPlayer entity);
    [ObsoleteAttribute("Use IsEntityIn instead")]
public abstract virtual bool IsVehicleIn(IVehicle entity);
}
public interface AltV.Net.Elements.Entities.IConnectionInfo {
    public IntPtr ConnectionInfoNativePointer { get; }
    public string Name { get; }
    public ulong SocialId { get; }
    public ulong HardwareIdHash { get; }
    public ulong HardwareIdExHash { get; }
    public string AuthToken { get; }
    public bool IsDebug { get; }
    public string Branch { get; }
    public ushort VersionMajor { get; }
    public ushort VersionMinor { get; }
    public string CdnUrl { get; }
    public ulong PasswordHash { get; }
    public string Ip { get; }
    public long DiscordUserId { get; }
    public string SocialName { get; }
    public string Text { get; public set; }
    public bool IsAccepted { get; }
    public string CloudId { get; }
    public CloudAuthResult CloudAuthResult { get; }
    public abstract virtual IntPtr get_ConnectionInfoNativePointer();
    public abstract virtual string get_Name();
    public abstract virtual ulong get_SocialId();
    public abstract virtual ulong get_HardwareIdHash();
    public abstract virtual ulong get_HardwareIdExHash();
    public abstract virtual string get_AuthToken();
    public abstract virtual bool get_IsDebug();
    public abstract virtual string get_Branch();
    public abstract virtual ushort get_VersionMajor();
    public abstract virtual ushort get_VersionMinor();
    public abstract virtual string get_CdnUrl();
    public abstract virtual ulong get_PasswordHash();
    public abstract virtual string get_Ip();
    public abstract virtual long get_DiscordUserId();
    public abstract virtual string get_SocialName();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual bool get_IsAccepted();
    public abstract virtual void Accept(bool sendNames);
    public abstract virtual void Decline(string reason);
    public abstract virtual string get_CloudId();
    public abstract virtual CloudAuthResult get_CloudAuthResult();
}
public interface AltV.Net.Elements.Entities.IEntity {
    public IPlayer NetworkOwner { get; }
    public Rotation Rotation { get; public set; }
    public bool Visible { get; public set; }
    public bool Streamed { get; public set; }
    public bool Collision { get; public set; }
    public UInt32 Timestamp { get; }
    public UInt32 StreamingDistance { get; public set; }
    public abstract virtual IPlayer get_NetworkOwner();
    public abstract virtual Rotation get_Rotation();
    public abstract virtual void set_Rotation(Rotation value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual bool get_Streamed();
    public abstract virtual void set_Streamed(bool value);
    public abstract virtual void SetNetworkOwner(IPlayer player, bool disableMigration);
    public abstract virtual void ResetNetworkOwner();
    public abstract virtual void SetStreamSyncedMetaData(string key, object value);
    public abstract virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public abstract virtual void SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual void DeleteStreamSyncedMetaData(string key);
    public abstract virtual void AttachToEntity(IEntity entity, ushort otherBoneId, ushort ownBoneId, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    public abstract virtual void AttachToEntity(IEntity entity, string otherBone, string ownBone, Position position, Rotation rotation, bool collision, bool noFixedRotation);
    public abstract virtual bool get_Collision();
    public abstract virtual void set_Collision(bool value);
    public abstract virtual void Detach();
    public abstract virtual UInt32 get_Timestamp();
    public abstract virtual UInt32 get_StreamingDistance();
    public abstract virtual void set_StreamingDistance(UInt32 value);
}
public interface AltV.Net.Elements.Entities.IMarker {
}
public interface AltV.Net.Elements.Entities.IMetric {
    public IntPtr MetricNativePointer { get; }
    public ICore Core { get; }
    public string Name { get; }
    public ulong Value { get; public set; }
    public abstract virtual IntPtr get_MetricNativePointer();
    public abstract virtual ICore get_Core();
    public abstract virtual string get_Name();
    public abstract virtual ulong get_Value();
    public abstract virtual void set_Value(ulong value);
    public abstract virtual void Begin();
    [ObsoleteAttribute("Deprecated old behavior, remove in future. Use End2")]
public abstract virtual void End();
    public abstract virtual void Add(ulong value);
    public abstract virtual void Inc();
    public abstract virtual void End2();
}
public interface AltV.Net.Elements.Entities.IObject {
    public byte Alpha { get; public set; }
    public byte TextureVariation { get; public set; }
    public ushort LodDistance { get; public set; }
    public abstract virtual byte get_Alpha();
    public abstract virtual void set_Alpha(byte value);
    public abstract virtual byte get_TextureVariation();
    public abstract virtual void set_TextureVariation(byte value);
    public abstract virtual ushort get_LodDistance();
    public abstract virtual void set_LodDistance(ushort value);
    public abstract virtual void PlaceOnGroundProperly();
    public abstract virtual void ActivatePhysics();
}
public interface AltV.Net.Elements.Entities.IPed {
    public ushort Armour { get; public set; }
    public ushort Health { get; public set; }
    public ushort MaxHealth { get; public set; }
    public UInt32 CurrentWeapon { get; public set; }
    public abstract virtual ushort get_Armour();
    public abstract virtual void set_Armour(ushort value);
    public abstract virtual ushort get_Health();
    public abstract virtual void set_Health(ushort value);
    public abstract virtual ushort get_MaxHealth();
    public abstract virtual void set_MaxHealth(ushort value);
    public abstract virtual UInt32 get_CurrentWeapon();
    public abstract virtual void set_CurrentWeapon(UInt32 value);
}
public interface AltV.Net.Elements.Entities.IPlayer {
    public IVehicle Vehicle { get; }
    public UInt32 Model { get; public set; }
    public bool IsConnected { get; }
    public ulong SocialClubId { get; }
    public ulong HardwareIdHash { get; }
    public ulong HardwareIdExHash { get; }
    public string AuthToken { get; }
    public long DiscordId { get; }
    public ushort Health { get; public set; }
    public ushort MaxHealth { get; public set; }
    public bool IsJumping { get; }
    public bool IsShooting { get; }
    public ushort Armor { get; public set; }
    public ushort MaxArmor { get; public set; }
    public UInt32 CurrentWeapon { get; public set; }
    public IEntity EntityAimingAt { get; }
    public UInt32 Ping { get; }
    public string Ip { get; }
    public UInt32 InteriorLocation { get; }
    public bool Invincible { get; public set; }
    public UInt32 LastDamagedBodyPart { get; public set; }
    public bool IsSuperJumpEnabled { get; }
    public bool IsCrouching { get; }
    public bool IsStealthy { get; }
    public HeadBlendData HeadBlendData { get; }
    public ushort EyeColor { get; }
    public byte HairColor { get; public set; }
    public byte HairHighlightColor { get; public set; }
    public bool SendNames { get; public set; }
    public string SocialClubName { get; }
    public string CloudId { get; }
    public CloudAuthResult CloudAuthResult { get; }
    public string BloodDamage { get; public set; }
    public abstract virtual IVehicle get_Vehicle();
    public abstract virtual UInt32 get_Model();
    public abstract virtual void set_Model(UInt32 value);
    public abstract virtual bool get_IsConnected();
    public abstract virtual ulong get_SocialClubId();
    public abstract virtual ulong get_HardwareIdHash();
    public abstract virtual ulong get_HardwareIdExHash();
    public abstract virtual string get_AuthToken();
    public abstract virtual long get_DiscordId();
    public abstract virtual ushort get_Health();
    public abstract virtual void set_Health(ushort value);
    public abstract virtual ushort get_MaxHealth();
    public abstract virtual void set_MaxHealth(ushort value);
    public abstract virtual bool get_IsJumping();
    public abstract virtual bool get_IsShooting();
    public abstract virtual ushort get_Armor();
    public abstract virtual void set_Armor(ushort value);
    public abstract virtual ushort get_MaxArmor();
    public abstract virtual void set_MaxArmor(ushort value);
    public abstract virtual UInt32 get_CurrentWeapon();
    public abstract virtual void set_CurrentWeapon(UInt32 value);
    public abstract virtual IEntity get_EntityAimingAt();
    public abstract virtual UInt32 get_Ping();
    public abstract virtual string get_Ip();
    public abstract virtual UInt32 get_InteriorLocation();
    public abstract virtual void Spawn(Position position, UInt32 delayMs);
    public abstract virtual void Spawn(UInt32 model, Position position, UInt32 delayMs);
    public abstract virtual void Spawn(PedModel model, Position position, UInt32 delayMs);
    public abstract virtual void Despawn();
    public abstract virtual void SetDateTime(int day, int month, int year, int hour, int minute, int second);
    public abstract virtual void SetDateTime(DateTime dateTime);
    public abstract virtual void SetWeather(UInt32 weather);
    public abstract virtual void SetWeather(WeatherType weatherType);
    public abstract virtual void GiveWeapon(UInt32 weapon, int ammo, bool selectWeapon);
    public abstract virtual void GiveWeapon(WeaponModel weaponModel, int ammo, bool selectWeapon);
    public abstract virtual bool RemoveWeapon(UInt32 weapon);
    public abstract virtual bool RemoveWeapon(WeaponModel weaponModel);
    public abstract virtual void RemoveAllWeapons(bool removeAllAmmo);
    public abstract virtual bool HasWeapon(UInt32 weapon);
    public abstract virtual bool HasWeapon(WeaponModel weapon);
    public abstract virtual void Kick(string reason);
    public abstract virtual void Emit(string eventName, Object[] args);
    public abstract virtual ushort EmitRPC(string name, Object[] args);
    public abstract virtual void EmitRPCAnswer(ushort answerId, object answer, string error);
    public abstract virtual void EmitUnreliable(string eventName, Object[] args);
    public abstract virtual void AddWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public abstract virtual void AddWeaponComponent(WeaponModel weaponModel, UInt32 weaponComponent);
    public abstract virtual void RemoveWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public abstract virtual void RemoveWeaponComponent(WeaponModel weaponModel, UInt32 weaponComponent);
    public abstract virtual bool HasWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public abstract virtual bool HasWeaponComponent(WeaponModel weapon, UInt32 weaponComponent);
    public abstract virtual void SetWeaponTintIndex(UInt32 weapon, byte tintIndex);
    public abstract virtual void SetWeaponTintIndex(WeaponModel weaponModel, byte tintIndex);
    public abstract virtual byte GetWeaponTintIndex(UInt32 weapon);
    public abstract virtual byte GetWeaponTintIndex(WeaponModel weapon);
    public abstract virtual byte GetCurrentWeaponTintIndex();
    public abstract virtual WeaponData[] GetWeapons();
    public abstract virtual void ClearBloodDamage();
    public abstract virtual Cloth GetClothes(byte component);
    public abstract virtual void GetClothes(byte component, Cloth& cloth);
    public abstract virtual bool SetClothes(byte component, ushort drawable, byte texture, byte palette);
    public abstract virtual DlcCloth GetDlcClothes(byte component);
    public abstract virtual void GetDlcClothes(byte component, DlcCloth& cloth);
    public abstract virtual bool SetDlcClothes(byte component, ushort drawable, byte texture, byte palette, UInt32 dlc);
    public abstract virtual bool ClearClothes(byte component);
    public abstract virtual Prop GetProps(byte component);
    public abstract virtual void GetProps(byte component, Prop& prop);
    public abstract virtual bool SetProps(byte component, ushort drawable, byte texture);
    public abstract virtual DlcProp GetDlcProps(byte component);
    public abstract virtual void GetDlcProps(byte component, DlcProp& prop);
    public abstract virtual bool SetDlcProps(byte component, ushort drawable, byte texture, UInt32 dlc);
    public abstract virtual void ClearProps(byte component);
    public abstract virtual bool IsEntityInStreamingRange(IEntity entity);
    public abstract virtual bool get_Invincible();
    public abstract virtual void set_Invincible(bool value);
    public abstract virtual UInt32 get_LastDamagedBodyPart();
    public abstract virtual void set_LastDamagedBodyPart(UInt32 value);
    public abstract virtual void SetIntoVehicle(IVehicle vehicle, byte seat);
    public abstract virtual bool get_IsSuperJumpEnabled();
    public abstract virtual bool get_IsCrouching();
    public abstract virtual bool get_IsStealthy();
    public abstract virtual void PlayAmbientSpeech(string speechName, string speechParam, UInt32 speechHash);
    public abstract virtual HeadBlendData get_HeadBlendData();
    public abstract virtual ushort get_EyeColor();
    public abstract virtual byte get_HairColor();
    public abstract virtual void set_HairColor(byte value);
    public abstract virtual byte get_HairHighlightColor();
    public abstract virtual void set_HairHighlightColor(byte value);
    public abstract virtual bool SetHeadOverlay(byte overlayId, byte index, float opacity);
    public abstract virtual bool RemoveHeadOverlay(byte overlayId);
    public abstract virtual bool SetHeadOverlayColor(byte overlayId, byte colorType, byte colorIndex, byte secondColorIndex);
    public abstract virtual HeadOverlay GetHeadOverlay(byte overlayID);
    public abstract virtual bool SetFaceFeature(byte index, float scale);
    public abstract virtual float GetFaceFeatureScale(byte index);
    public abstract virtual bool RemoveFaceFeature(byte index);
    public abstract virtual bool SetHeadBlendPaletteColor(byte id, Rgba rgba);
    public abstract virtual Rgba GetHeadBlendPaletteColor(byte id);
    public abstract virtual void RemoveHeadBlendPaletteColor();
    public abstract virtual void SetHeadBlendData(UInt32 shapeFirstID, UInt32 shapeSecondID, UInt32 shapeThirdID, UInt32 skinFirstID, UInt32 skinSecondID, UInt32 skinThirdID, float shapeMix, float skinMix, float thirdMix);
    public abstract virtual void RemoveHeadBlendData();
    public abstract virtual bool SetEyeColor(ushort eyeColor);
    public abstract virtual void GetLocalMetaData(string key, MValueConst& value);
    public abstract virtual bool GetLocalMetaData(string key, T& result);
    public abstract virtual void SetLocalMetaData(string key, object value);
    public abstract virtual void SetLocalMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual bool HasLocalMetaData(string key);
    public abstract virtual void DeleteLocalMetaData(string key);
    public abstract virtual bool get_SendNames();
    public abstract virtual void set_SendNames(bool value);
    public abstract virtual void PlayAnimation(string animDict, string animName, float blendInSpeed, float blendOutSpeed, int duration, int flags, float playbackRate, bool lockX, bool lockY, bool lockZ);
    public abstract virtual void ClearTasks();
    public abstract virtual string get_SocialClubName();
    public abstract virtual void SetAmmo(UInt32 ammoHash, ushort ammo);
    public abstract virtual ushort GetAmmo(UInt32 ammoHash);
    public abstract virtual void SetWeaponAmmo(UInt32 weaponHash, ushort ammo);
    public abstract virtual ushort GetWeaponAmmo(UInt32 weaponHash);
    public abstract virtual void SetAmmoSpecialType(UInt32 ammoHash, AmmoSpecialType ammoSpecialType);
    public abstract virtual AmmoSpecialType GetAmmoSpecialType(UInt32 ammoHash);
    public abstract virtual void SetAmmoFlags(UInt32 ammoHash, AmmoFlags ammoFlags);
    public abstract virtual AmmoFlags GetAmmoFlags(UInt32 ammoHash);
    public abstract virtual void SetAmmoMax(UInt32 ammoHash, int ammoMax);
    public abstract virtual int GetAmmoMax(UInt32 ammoHash);
    public abstract virtual void SetAmmoMax50(UInt32 ammoHash, int ammoMax);
    public abstract virtual int GetAmmoMax50(UInt32 ammoHash);
    public abstract virtual void SetAmmoMax100(UInt32 ammoHash, int ammoMax);
    public abstract virtual int GetAmmoMax100(UInt32 ammoHash);
    public abstract virtual void AddDecoration(UInt32 collection, UInt32 overlay, byte count);
    public abstract virtual void RemoveDecoration(UInt32 collection, UInt32 overlay);
    public abstract virtual void ClearDecorations();
    public abstract virtual Decoration[] GetDecorations();
    public abstract virtual void PlayScenario(string name);
    public abstract virtual string get_CloudId();
    public abstract virtual CloudAuthResult get_CloudAuthResult();
    public abstract virtual string get_BloodDamage();
    public abstract virtual void set_BloodDamage(string value);
    public abstract virtual Vector3 GetForwardVector();
}
public interface AltV.Net.Elements.Entities.IVehicle {
    public IPlayer Driver { get; }
    public bool IsDestroyed { get; }
    public byte ModKit { get; public set; }
    public byte ModKitsCount { get; }
    public bool IsPrimaryColorRgb { get; }
    public byte PrimaryColor { get; public set; }
    public Rgba PrimaryColorRgb { get; public set; }
    public bool IsSecondaryColorRgb { get; }
    public byte SecondaryColor { get; public set; }
    public Rgba SecondaryColorRgb { get; public set; }
    public byte PearlColor { get; public set; }
    public byte WheelColor { get; public set; }
    public byte InteriorColor { get; public set; }
    public byte DashboardColor { get; public set; }
    public bool IsTireSmokeColorCustom { get; }
    public Rgba TireSmokeColor { get; public set; }
    public byte WheelType { get; }
    public byte WheelVariation { get; }
    public byte RearWheel { get; public set; }
    public bool CustomTires { get; public set; }
    public byte SpecialDarkness { get; public set; }
    public UInt32 NumberplateIndex { get; public set; }
    public string NumberplateText { get; public set; }
    public byte WindowTint { get; public set; }
    public byte DirtLevel { get; public set; }
    public Rgba NeonColor { get; public set; }
    public byte Livery { get; public set; }
    public byte LightState { get; public set; }
    public byte RoofLivery { get; public set; }
    public string AppearanceData { get; public set; }
    public IVehicle Attached { get; }
    public IVehicle AttachedTo { get; }
    public bool IsNeonActive { get; }
    public bool EngineOn { get; public set; }
    public bool IsHandbrakeActive { get; }
    public byte HeadlightColor { get; public set; }
    public UInt32 RadioStation { get; public set; }
    public IPlayer TimedExplosionCulprit { get; }
    public UInt32 TimedExplosionTime { get; }
    public bool SirenActive { get; public set; }
    public VehicleLockState LockState { get; public set; }
    public bool IsDaylightOn { get; }
    public bool IsNightlightOn { get; }
    public bool IsRoofClosed { get; public set; }
    public bool IsFlamethrowerActive { get; }
    public float LightsMultiplier { get; public set; }
    public string State { get; public set; }
    public int EngineHealth { get; public set; }
    public int PetrolTankHealth { get; public set; }
    public byte RepairsCount { get; }
    public UInt32 BodyHealth { get; public set; }
    public UInt32 BodyAdditionalHealth { get; public set; }
    public string HealthData { get; public set; }
    public bool HasArmoredWindows { get; }
    public bool TimedExplosion { get; }
    public string DamageData { get; public set; }
    public bool ManualEngineControl { get; public set; }
    public string ScriptData { get; public set; }
    public Position Velocity { get; }
    public bool DriftMode { get; public set; }
    public bool BoatAnchor { get; public set; }
    public bool IsMissionTrain { get; public set; }
    public sbyte TrainTrackId { get; public set; }
    public IVehicle TrainEngine { get; public set; }
    public sbyte TrainConfigIndex { get; public set; }
    public float TrainDistanceFromEngine { get; public set; }
    public bool IsTrainEngine { get; public set; }
    public bool IsTrainCaboose { get; public set; }
    public bool TrainDirection { get; public set; }
    public bool TrainPassengerCarriages { get; public set; }
    public bool TrainRenderDerailed { get; public set; }
    public bool TrainForceDoorsOpen { get; public set; }
    public float TrainCruiseSpeed { get; public set; }
    public sbyte TrainCarriageConfigIndex { get; public set; }
    public IVehicle TrainLinkedToBackward { get; public set; }
    public IVehicle TrainLinkedToForward { get; public set; }
    public UInt32 CounterMeasureCount { get; public set; }
    public bool HybridExtraActive { get; public set; }
    public byte HybridExtraState { get; public set; }
    public float RocketRefuelSpeed { get; public set; }
    public float ScriptMaxSpeed { get; public set; }
    public bool IsTowingDisabled { get; public set; }
    public Quaternion Quaternion { get; public set; }
    public bool IsHornActive { get; }
    public float AccelerationLevel { get; }
    public float BrakeLevel { get; }
    public List`1<PlayerSeat> Passengers { get; }
    public abstract virtual IPlayer get_Driver();
    public abstract virtual bool get_IsDestroyed();
    public abstract virtual byte get_ModKit();
    public abstract virtual void set_ModKit(byte value);
    public abstract virtual byte get_ModKitsCount();
    public abstract virtual bool get_IsPrimaryColorRgb();
    public abstract virtual byte get_PrimaryColor();
    public abstract virtual void set_PrimaryColor(byte value);
    public abstract virtual Rgba get_PrimaryColorRgb();
    public abstract virtual void set_PrimaryColorRgb(Rgba value);
    public abstract virtual bool get_IsSecondaryColorRgb();
    public abstract virtual byte get_SecondaryColor();
    public abstract virtual void set_SecondaryColor(byte value);
    public abstract virtual Rgba get_SecondaryColorRgb();
    public abstract virtual void set_SecondaryColorRgb(Rgba value);
    public abstract virtual byte get_PearlColor();
    public abstract virtual void set_PearlColor(byte value);
    public abstract virtual byte get_WheelColor();
    public abstract virtual void set_WheelColor(byte value);
    public abstract virtual byte get_InteriorColor();
    public abstract virtual void set_InteriorColor(byte value);
    public abstract virtual byte get_DashboardColor();
    public abstract virtual void set_DashboardColor(byte value);
    public abstract virtual bool get_IsTireSmokeColorCustom();
    public abstract virtual Rgba get_TireSmokeColor();
    public abstract virtual void set_TireSmokeColor(Rgba value);
    public abstract virtual byte get_WheelType();
    public abstract virtual byte get_WheelVariation();
    public abstract virtual byte get_RearWheel();
    public abstract virtual void set_RearWheel(byte value);
    public abstract virtual bool get_CustomTires();
    public abstract virtual void set_CustomTires(bool value);
    public abstract virtual byte get_SpecialDarkness();
    public abstract virtual void set_SpecialDarkness(byte value);
    public abstract virtual UInt32 get_NumberplateIndex();
    public abstract virtual void set_NumberplateIndex(UInt32 value);
    public abstract virtual string get_NumberplateText();
    public abstract virtual void set_NumberplateText(string value);
    public abstract virtual byte get_WindowTint();
    public abstract virtual void set_WindowTint(byte value);
    public abstract virtual byte get_DirtLevel();
    public abstract virtual void set_DirtLevel(byte value);
    public abstract virtual Rgba get_NeonColor();
    public abstract virtual void set_NeonColor(Rgba value);
    public abstract virtual byte get_Livery();
    public abstract virtual void set_Livery(byte value);
    public abstract virtual byte get_LightState();
    public abstract virtual void set_LightState(byte value);
    public abstract virtual byte get_RoofLivery();
    public abstract virtual void set_RoofLivery(byte value);
    public abstract virtual string get_AppearanceData();
    public abstract virtual void set_AppearanceData(string value);
    public abstract virtual IVehicle get_Attached();
    public abstract virtual IVehicle get_AttachedTo();
    public abstract virtual byte GetMod(byte category);
    public abstract virtual byte GetModsCount(byte category);
    public abstract virtual bool SetMod(byte category, byte id);
    public abstract virtual void SetWheels(byte type, byte variation);
    public abstract virtual bool IsExtraOn(byte extraId);
    public abstract virtual void ToggleExtra(byte extraId, bool state);
    public abstract virtual bool get_IsNeonActive();
    public abstract virtual void GetNeonActive(Boolean& left, Boolean& right, Boolean& top, Boolean& back);
    public abstract virtual void SetNeonActive(bool left, bool right, bool top, bool back);
    public abstract virtual bool get_EngineOn();
    public abstract virtual void set_EngineOn(bool value);
    public abstract virtual bool get_IsHandbrakeActive();
    public abstract virtual byte get_HeadlightColor();
    public abstract virtual void set_HeadlightColor(byte value);
    public abstract virtual UInt32 get_RadioStation();
    public abstract virtual void set_RadioStation(UInt32 value);
    public abstract virtual IPlayer get_TimedExplosionCulprit();
    public abstract virtual UInt32 get_TimedExplosionTime();
    public abstract virtual bool get_SirenActive();
    public abstract virtual void set_SirenActive(bool value);
    public abstract virtual VehicleLockState get_LockState();
    public abstract virtual void set_LockState(VehicleLockState value);
    public abstract virtual byte GetDoorState(byte doorId);
    public abstract virtual void SetDoorState(byte doorId, byte state);
    public abstract virtual bool IsWindowOpened(byte windowId);
    public abstract virtual void SetWindowOpened(byte windowId, bool state);
    public abstract virtual bool get_IsDaylightOn();
    public abstract virtual bool get_IsNightlightOn();
    public abstract virtual bool get_IsRoofClosed();
    public abstract virtual void set_IsRoofClosed(bool value);
    public abstract virtual bool get_IsFlamethrowerActive();
    public abstract virtual float get_LightsMultiplier();
    public abstract virtual void set_LightsMultiplier(float value);
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual int get_EngineHealth();
    public abstract virtual void set_EngineHealth(int value);
    public abstract virtual int get_PetrolTankHealth();
    public abstract virtual void set_PetrolTankHealth(int value);
    public abstract virtual bool IsWheelBurst(byte wheelId);
    public abstract virtual void SetWheelBurst(byte wheelId, bool state);
    public abstract virtual bool DoesWheelHasTire(byte wheelId);
    public abstract virtual void SetWheelHasTire(byte wheelId, bool state);
    public abstract virtual bool IsWheelDetached(byte wheelId);
    public abstract virtual void SetWheelDetached(byte wheelId, bool state);
    public abstract virtual bool IsWheelOnFire(byte wheelId);
    public abstract virtual void SetWheelOnFire(byte wheelId, bool state);
    public abstract virtual float GetWheelHealth(byte wheelId);
    public abstract virtual void SetWheelHealth(byte wheelId, float health);
    public abstract virtual void SetWheelFixed(byte wheelId);
    public abstract virtual byte get_RepairsCount();
    public abstract virtual UInt32 get_BodyHealth();
    public abstract virtual void set_BodyHealth(UInt32 value);
    public abstract virtual UInt32 get_BodyAdditionalHealth();
    public abstract virtual void set_BodyAdditionalHealth(UInt32 value);
    public abstract virtual string get_HealthData();
    public abstract virtual void set_HealthData(string value);
    public abstract virtual byte GetPartDamageLevel(byte partId);
    public abstract virtual void SetPartDamageLevel(byte partId, byte damage);
    public abstract virtual byte GetPartBulletHoles(byte partId);
    public abstract virtual void SetPartBulletHoles(byte partId, byte shootsCount);
    public abstract virtual bool IsLightDamaged(byte lightId);
    public abstract virtual void SetLightDamaged(byte lightId, bool isDamaged);
    public abstract virtual bool IsWindowDamaged(byte windowId);
    public abstract virtual void SetWindowDamaged(byte windowId, bool isDamaged);
    public abstract virtual bool IsSpecialLightDamaged(byte specialLightId);
    public abstract virtual void SetSpecialLightDamaged(byte specialLightId, bool isDamaged);
    public abstract virtual bool get_HasArmoredWindows();
    public abstract virtual bool get_TimedExplosion();
    public abstract virtual float GetArmoredWindowHealth(byte windowId);
    public abstract virtual void SetArmoredWindowHealth(byte windowId, float health);
    public abstract virtual byte GetArmoredWindowShootCount(byte windowId);
    public abstract virtual void SetArmoredWindowShootCount(byte windowId, byte count);
    public abstract virtual byte GetBumperDamageLevel(byte bumperId);
    public abstract virtual void SetBumperDamageLevel(byte bumperId, byte damageLevel);
    public abstract virtual string get_DamageData();
    public abstract virtual void set_DamageData(string value);
    public abstract virtual bool get_ManualEngineControl();
    public abstract virtual void set_ManualEngineControl(bool value);
    public abstract virtual string get_ScriptData();
    public abstract virtual void set_ScriptData(string value);
    public abstract virtual void Repair();
    public abstract virtual void SetTimedExplosion(bool state, IPlayer culprit, UInt32 time);
    public virtual byte GetModExt(VehicleModType category);
    public virtual byte GetModsCountExt(VehicleModType category);
    public virtual bool SetModExt(VehicleModType category, byte id);
    public virtual void SetPartDamageLevelExt(VehiclePart part, byte damage);
    public virtual VehiclePartDamage GetPartDamageLevelExt(VehiclePart part);
    public virtual byte GetPartBulletHolesExt(VehiclePart part);
    public virtual void SetPartBulletHolesExt(VehiclePart part, byte shootsCount);
    public virtual VehicleBumperDamage GetBumperDamageLevelExt(VehicleBumper bumper);
    public virtual void SetBumperDamageLevelExt(VehicleBumper bumper, VehicleBumperDamage damageLevel);
    public virtual void SetPartDamageLevelExt(VehiclePart part, VehiclePartDamage damage);
    public virtual VehicleDoorState GetDoorStateExt(VehicleDoor door);
    public virtual void SetDoorStateExt(VehicleDoor door, VehicleDoorState state);
    public virtual void SetRadioStationExt(RadioStation radioStation);
    public virtual RadioStation GetRadioStationExt();
    public virtual void SetWindowTintExt(WindowTint windowTint);
    public virtual WindowTint GetWindowTintExt();
    public virtual void SetNumberPlateStyleExt(NumberPlateStyle numberPlateStyle);
    public virtual NumberPlateStyle GetNumberPlateStyleExt();
    public abstract virtual Position get_Velocity();
    public abstract virtual bool get_DriftMode();
    public abstract virtual void set_DriftMode(bool value);
    public abstract virtual bool get_BoatAnchor();
    public abstract virtual void set_BoatAnchor(bool value);
    public abstract virtual bool SetSearchLight(bool state, IEntity spottedEntity);
    public abstract virtual bool get_IsMissionTrain();
    public abstract virtual void set_IsMissionTrain(bool value);
    public abstract virtual sbyte get_TrainTrackId();
    public abstract virtual void set_TrainTrackId(sbyte value);
    public abstract virtual IVehicle get_TrainEngine();
    public abstract virtual void set_TrainEngine(IVehicle value);
    public abstract virtual sbyte get_TrainConfigIndex();
    public abstract virtual void set_TrainConfigIndex(sbyte value);
    public abstract virtual float get_TrainDistanceFromEngine();
    public abstract virtual void set_TrainDistanceFromEngine(float value);
    public abstract virtual bool get_IsTrainEngine();
    public abstract virtual void set_IsTrainEngine(bool value);
    public abstract virtual bool get_IsTrainCaboose();
    public abstract virtual void set_IsTrainCaboose(bool value);
    public abstract virtual bool get_TrainDirection();
    public abstract virtual void set_TrainDirection(bool value);
    public abstract virtual bool get_TrainPassengerCarriages();
    public abstract virtual void set_TrainPassengerCarriages(bool value);
    public abstract virtual bool get_TrainRenderDerailed();
    public abstract virtual void set_TrainRenderDerailed(bool value);
    public abstract virtual bool get_TrainForceDoorsOpen();
    public abstract virtual void set_TrainForceDoorsOpen(bool value);
    public abstract virtual float get_TrainCruiseSpeed();
    public abstract virtual void set_TrainCruiseSpeed(float value);
    public abstract virtual sbyte get_TrainCarriageConfigIndex();
    public abstract virtual void set_TrainCarriageConfigIndex(sbyte value);
    public abstract virtual IVehicle get_TrainLinkedToBackward();
    public abstract virtual void set_TrainLinkedToBackward(IVehicle value);
    public abstract virtual IVehicle get_TrainLinkedToForward();
    public abstract virtual void set_TrainLinkedToForward(IVehicle value);
    public abstract virtual UInt32 get_CounterMeasureCount();
    public abstract virtual void set_CounterMeasureCount(UInt32 value);
    public abstract virtual bool get_HybridExtraActive();
    public abstract virtual void set_HybridExtraActive(bool value);
    public abstract virtual byte get_HybridExtraState();
    public abstract virtual void set_HybridExtraState(byte value);
    public abstract virtual float get_RocketRefuelSpeed();
    public abstract virtual void set_RocketRefuelSpeed(float value);
    public abstract virtual float get_ScriptMaxSpeed();
    public abstract virtual void set_ScriptMaxSpeed(float value);
    public abstract virtual bool get_IsTowingDisabled();
    public abstract virtual void set_IsTowingDisabled(bool value);
    public abstract virtual void SetWeaponCapacity(byte index, int capacity);
    public abstract virtual int GetWeaponCapacity(byte index);
    public abstract virtual Quaternion get_Quaternion();
    public abstract virtual void set_Quaternion(Quaternion value);
    public abstract virtual bool get_IsHornActive();
    public abstract virtual float get_AccelerationLevel();
    public abstract virtual float get_BrakeLevel();
    public abstract virtual List`1<PlayerSeat> get_Passengers();
    public abstract virtual void SetBadge(string textureDictionary, string texture, VehicleBadgePosition[] vehicleBadgePosition);
    public abstract virtual void SetBadge(UInt32 textureDictionary, UInt32 texture, VehicleBadgePosition[] vehicleBadgePosition);
}
public interface AltV.Net.Elements.Entities.IVirtualEntity {
    public abstract virtual void SetStreamSyncedMetaData(string key, object value);
    public abstract virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public abstract virtual void SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    public abstract virtual void DeleteStreamSyncedMetaData(string key);
}
public interface AltV.Net.Elements.Entities.IVirtualEntityGroup {
}
public interface AltV.Net.Elements.Entities.IVoiceChannel {
    public IntPtr VoiceChannelNativePointer { get; }
    public bool IsSpatial { get; }
    public float MaxDistance { get; }
    public UInt32 Filter { get; public set; }
    public int Priority { get; public set; }
    public IReadOnlyCollection`1<IPlayer> Players { get; }
    public ulong PlayerCount { get; }
    public abstract virtual IntPtr get_VoiceChannelNativePointer();
    public abstract virtual void AddPlayer(IPlayer player);
    public abstract virtual void RemovePlayer(IPlayer player);
    public abstract virtual void MutePlayer(IPlayer player);
    public abstract virtual void UnmutePlayer(IPlayer player);
    public abstract virtual bool HasPlayer(IPlayer player);
    public abstract virtual bool IsPlayerMuted(IPlayer player);
    public abstract virtual bool get_IsSpatial();
    public abstract virtual float get_MaxDistance();
    public abstract virtual UInt32 get_Filter();
    public abstract virtual void set_Filter(UInt32 value);
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual IReadOnlyCollection`1<IPlayer> get_Players();
    public abstract virtual ulong get_PlayerCount();
}
public interface AltV.Net.Elements.Entities.IWorldObject {
    public abstract virtual void SetPosition(ValueTuple`3<float, float, float> position);
    public abstract virtual void SetPosition(float x, float y, float z);
    public abstract virtual ValueTuple`3<float, float, float> GetPosition();
}
public class AltV.Net.Elements.Entities.Marker : WorldObject {
    [CompilerGeneratedAttribute]
private IntPtr <MarkerNativePointer>k__BackingField;
    public IntPtr MarkerNativePointer { get; }
    public IntPtr NativePointer { get; }
    public bool IsGlobal { get; }
    public ISharedPlayer Target { get; }
    public Rgba Color { get; public set; }
    public bool Visible { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public Position Scale { get; public set; }
    public Rotation Rotation { get; public set; }
    public Position Direction { get; public set; }
    public UInt32 StreamingDistance { get; }
    public bool IsFaceCamera { get; public set; }
    public bool IsRotating { get; public set; }
    public bool IsBobUpDown { get; public set; }
    public Marker(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_MarkerNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetWorldObjectPointer(ICore core, IntPtr nativePointer);
    public static UInt32 GetId(IntPtr nativePointer);
    public sealed virtual bool get_IsGlobal();
    public sealed virtual ISharedPlayer get_Target();
    public sealed virtual Rgba get_Color();
    public sealed virtual void set_Color(Rgba value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual MarkerType get_MarkerType();
    public sealed virtual void set_MarkerType(MarkerType value);
    public sealed virtual Position get_Scale();
    public sealed virtual void set_Scale(Position value);
    public sealed virtual Rotation get_Rotation();
    public sealed virtual void set_Rotation(Rotation value);
    public sealed virtual Position get_Direction();
    public sealed virtual void set_Direction(Position value);
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual bool get_IsFaceCamera();
    public sealed virtual void set_IsFaceCamera(bool value);
    public sealed virtual bool get_IsRotating();
    public sealed virtual void set_IsRotating(bool value);
    public sealed virtual bool get_IsBobUpDown();
    public sealed virtual void set_IsBobUpDown(bool value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.Object : Entity {
    [CompilerGeneratedAttribute]
private IntPtr <ObjectNativePointer>k__BackingField;
    public IntPtr ObjectNativePointer { get; private set; }
    public IntPtr NativePointer { get; }
    public UInt32 Model { get; public set; }
    public byte Alpha { get; public set; }
    public ushort LodDistance { get; public set; }
    public byte TextureVariation { get; public set; }
    public Object(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_ObjectNativePointer();
    [CompilerGeneratedAttribute]
private void set_ObjectNativePointer(IntPtr value);
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetEntityPointer(ICore core, IntPtr pointer);
    public static UInt32 GetId(IntPtr pointer);
    public virtual UInt32 get_Model();
    public virtual void set_Model(UInt32 value);
    public sealed virtual byte get_Alpha();
    public sealed virtual void set_Alpha(byte value);
    public sealed virtual ushort get_LodDistance();
    public sealed virtual void set_LodDistance(ushort value);
    public sealed virtual void PlaceOnGroundProperly();
    public sealed virtual void ActivatePhysics();
    public sealed virtual byte get_TextureVariation();
    public sealed virtual void set_TextureVariation(byte value);
    public virtual void SetCached(IntPtr cachedNetworkObject);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.Ped : Entity {
    [CompilerGeneratedAttribute]
private IntPtr <PedNativePointer>k__BackingField;
    public IntPtr PedNativePointer { get; private set; }
    public IntPtr NativePointer { get; }
    public UInt32 Model { get; public set; }
    public ushort Armour { get; public set; }
    public ushort Health { get; public set; }
    public ushort MaxHealth { get; public set; }
    public UInt32 CurrentWeapon { get; public set; }
    public Ped(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_PedNativePointer();
    [CompilerGeneratedAttribute]
private void set_PedNativePointer(IntPtr value);
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetEntityPointer(ICore core, IntPtr pedPointer);
    public static UInt32 GetId(IntPtr pedPointer);
    public virtual UInt32 get_Model();
    public virtual void set_Model(UInt32 value);
    public sealed virtual ushort get_Armour();
    public sealed virtual void set_Armour(ushort value);
    public sealed virtual ushort get_Health();
    public sealed virtual void set_Health(ushort value);
    public sealed virtual ushort get_MaxHealth();
    public sealed virtual void set_MaxHealth(ushort value);
    public sealed virtual UInt32 get_CurrentWeapon();
    public sealed virtual void set_CurrentWeapon(UInt32 value);
    public virtual void SetCached(IntPtr cachedPed);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.Player : Entity {
    [CompilerGeneratedAttribute]
private IntPtr <PlayerNativePointer>k__BackingField;
    public IntPtr PlayerNativePointer { get; private set; }
    public IntPtr NativePointer { get; }
    public UInt32 Model { get; public set; }
    public UInt32 Ping { get; }
    public string Ip { get; }
    public bool SendNames { get; public set; }
    public string SocialClubName { get; }
    public string CloudId { get; }
    public CloudAuthResult CloudAuthResult { get; }
    public string BloodDamage { get; public set; }
    public bool IsConnected { get; }
    public string Name { get; }
    public ulong SocialClubId { get; }
    public ulong HardwareIdHash { get; }
    public ulong HardwareIdExHash { get; }
    public string AuthToken { get; }
    public long DiscordId { get; }
    public ushort Health { get; public set; }
    public ushort MaxHealth { get; public set; }
    public bool IsDead { get; }
    public bool IsJumping { get; }
    public bool IsInRagdoll { get; }
    public bool IsAiming { get; }
    public bool IsShooting { get; }
    public bool IsReloading { get; }
    public bool IsEnteringVehicle { get; }
    public bool IsLeavingVehicle { get; }
    public bool IsOnLadder { get; }
    public bool IsInMelee { get; }
    public bool IsInCover { get; }
    public ushort Armor { get; public set; }
    public ushort MaxArmor { get; public set; }
    public float MoveSpeed { get; }
    public float ForwardSpeed { get; }
    public float StrafeSpeed { get; }
    public Position AimPosition { get; }
    public Rotation HeadRotation { get; }
    public bool IsInVehicle { get; }
    public IVehicle Vehicle { get; }
    private ISharedVehicle AltV.Net.Shared.Elements.Entities.ISharedPlayer.Vehicle { get; }
    public UInt32 CurrentWeapon { get; public set; }
    public IEntity EntityAimingAt { get; }
    public UInt32 InteriorLocation { get; }
    private ISharedEntity AltV.Net.Shared.Elements.Entities.ISharedPlayer.EntityAimingAt { get; }
    public Position EntityAimOffset { get; }
    public bool IsFlashlightActive { get; }
    public byte Seat { get; }
    public bool IsSpawned { get; }
    public UInt32 CurrentAnimationDict { get; }
    public UInt32 CurrentAnimationName { get; }
    public bool Invincible { get; public set; }
    public UInt32 LastDamagedBodyPart { get; public set; }
    public bool IsSuperJumpEnabled { get; }
    public bool IsCrouching { get; }
    public bool IsStealthy { get; }
    public HeadBlendData HeadBlendData { get; }
    public ushort EyeColor { get; }
    public byte HairColor { get; public set; }
    public byte HairHighlightColor { get; public set; }
    public bool IsParachuting { get; }
    public Player(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_PlayerNativePointer();
    [CompilerGeneratedAttribute]
private void set_PlayerNativePointer(IntPtr value);
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetEntityPointer(ICore core, IntPtr nativePointer);
    public static UInt32 GetId(IntPtr playerPointer);
    public virtual UInt32 get_Model();
    public virtual void set_Model(UInt32 value);
    public sealed virtual UInt32 get_Ping();
    public sealed virtual string get_Ip();
    public sealed virtual bool GetLocalMetaData(string key, T& result);
    public sealed virtual void GetLocalMetaData(string key, MValueConst& value);
    public sealed virtual void SetLocalMetaData(string key, object value);
    public void SetLocalMetaData(string key, MValueConst& value);
    public sealed virtual bool HasLocalMetaData(string key);
    public sealed virtual void DeleteLocalMetaData(string key);
    public sealed virtual bool get_SendNames();
    public sealed virtual void set_SendNames(bool value);
    public sealed virtual void PlayAnimation(string animDict, string animName, float blendInSpeed, float blendOutSpeed, int duration, int flags, float playbackRate, bool lockX, bool lockY, bool lockZ);
    public sealed virtual void ClearTasks();
    public sealed virtual string get_SocialClubName();
    public sealed virtual void SetAmmo(UInt32 ammoHash, ushort ammo);
    public sealed virtual ushort GetAmmo(UInt32 ammoHash);
    public sealed virtual void SetWeaponAmmo(UInt32 weaponHash, ushort ammo);
    public sealed virtual ushort GetWeaponAmmo(UInt32 weaponHash);
    public sealed virtual void SetAmmoSpecialType(UInt32 ammoHash, AmmoSpecialType ammoSpecialType);
    public sealed virtual AmmoSpecialType GetAmmoSpecialType(UInt32 ammoHash);
    public sealed virtual void SetAmmoFlags(UInt32 ammoHash, AmmoFlags ammoFlags);
    public sealed virtual AmmoFlags GetAmmoFlags(UInt32 ammoHash);
    public sealed virtual void SetAmmoMax(UInt32 ammoHash, int ammoMax);
    public sealed virtual int GetAmmoMax(UInt32 ammoHash);
    public sealed virtual void SetAmmoMax50(UInt32 ammoHash, int ammoMax);
    public sealed virtual int GetAmmoMax50(UInt32 ammoHash);
    public sealed virtual void SetAmmoMax100(UInt32 ammoHash, int ammoMax);
    public sealed virtual int GetAmmoMax100(UInt32 ammoHash);
    public sealed virtual void AddDecoration(UInt32 collection, UInt32 overlay, byte count);
    public sealed virtual void RemoveDecoration(UInt32 collection, UInt32 overlay);
    public sealed virtual void ClearDecorations();
    public sealed virtual Decoration[] GetDecorations();
    public sealed virtual void PlayScenario(string name);
    public sealed virtual string get_CloudId();
    public sealed virtual CloudAuthResult get_CloudAuthResult();
    public sealed virtual string get_BloodDamage();
    public sealed virtual void set_BloodDamage(string value);
    public sealed virtual Vector3 GetForwardVector();
    public sealed virtual bool get_IsConnected();
    public sealed virtual string get_Name();
    public sealed virtual ulong get_SocialClubId();
    public sealed virtual ulong get_HardwareIdHash();
    public sealed virtual ulong get_HardwareIdExHash();
    public sealed virtual string get_AuthToken();
    public sealed virtual long get_DiscordId();
    public sealed virtual ushort get_Health();
    public sealed virtual void set_Health(ushort value);
    public sealed virtual ushort get_MaxHealth();
    public sealed virtual void set_MaxHealth(ushort value);
    public sealed virtual bool get_IsDead();
    public sealed virtual bool get_IsJumping();
    public sealed virtual bool get_IsInRagdoll();
    public sealed virtual bool get_IsAiming();
    public sealed virtual bool get_IsShooting();
    public sealed virtual bool get_IsReloading();
    public sealed virtual bool get_IsEnteringVehicle();
    public sealed virtual bool get_IsLeavingVehicle();
    public sealed virtual bool get_IsOnLadder();
    public sealed virtual bool get_IsInMelee();
    public sealed virtual bool get_IsInCover();
    public sealed virtual ushort get_Armor();
    public sealed virtual void set_Armor(ushort value);
    public sealed virtual ushort get_MaxArmor();
    public sealed virtual void set_MaxArmor(ushort value);
    public sealed virtual float get_MoveSpeed();
    public sealed virtual float get_ForwardSpeed();
    public sealed virtual float get_StrafeSpeed();
    public sealed virtual Position get_AimPosition();
    public sealed virtual Rotation get_HeadRotation();
    public sealed virtual bool get_IsInVehicle();
    public sealed virtual IVehicle get_Vehicle();
    private sealed virtual override ISharedVehicle AltV.Net.Shared.Elements.Entities.ISharedPlayer.get_Vehicle();
    public sealed virtual UInt32 get_CurrentWeapon();
    public sealed virtual void set_CurrentWeapon(UInt32 value);
    public sealed virtual IEntity get_EntityAimingAt();
    public sealed virtual UInt32 get_InteriorLocation();
    private sealed virtual override ISharedEntity AltV.Net.Shared.Elements.Entities.ISharedPlayer.get_EntityAimingAt();
    public sealed virtual Position get_EntityAimOffset();
    public sealed virtual bool get_IsFlashlightActive();
    public sealed virtual byte get_Seat();
    public sealed virtual bool get_IsSpawned();
    public sealed virtual UInt32 get_CurrentAnimationDict();
    public sealed virtual UInt32 get_CurrentAnimationName();
    public sealed virtual void Spawn(Position position, UInt32 delayMs);
    public sealed virtual void Spawn(UInt32 model, Position position, UInt32 delayMs);
    public sealed virtual void Spawn(PedModel model, Position position, UInt32 delayMs);
    public sealed virtual void Despawn();
    public sealed virtual void SetDateTime(int day, int month, int year, int hour, int minute, int second);
    public sealed virtual void SetDateTime(DateTime dateTime);
    public sealed virtual void SetWeather(UInt32 weather);
    public sealed virtual void SetWeather(WeatherType weatherType);
    public sealed virtual void GiveWeapon(UInt32 weapon, int ammo, bool selectWeapon);
    public sealed virtual void GiveWeapon(WeaponModel weaponModel, int ammo, bool selectWeapon);
    public sealed virtual bool RemoveWeapon(UInt32 weapon);
    public sealed virtual bool RemoveWeapon(WeaponModel weaponModel);
    public sealed virtual void RemoveAllWeapons(bool removeAllAmmo);
    public sealed virtual bool HasWeapon(UInt32 weapon);
    public sealed virtual bool HasWeapon(WeaponModel weapon);
    public sealed virtual void AddWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public sealed virtual void AddWeaponComponent(WeaponModel weaponModel, UInt32 weaponComponent);
    public sealed virtual void RemoveWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public sealed virtual void RemoveWeaponComponent(WeaponModel weaponModel, UInt32 weaponComponent);
    public sealed virtual bool HasWeaponComponent(UInt32 weapon, UInt32 weaponComponent);
    public sealed virtual bool HasWeaponComponent(WeaponModel weapon, UInt32 weaponComponent);
    public sealed virtual void GetCurrentWeaponComponents(UInt32[]& weaponComponents);
    public sealed virtual void SetWeaponTintIndex(UInt32 weapon, byte tintIndex);
    public sealed virtual void SetWeaponTintIndex(WeaponModel weaponModel, byte tintIndex);
    public sealed virtual byte GetWeaponTintIndex(UInt32 weapon);
    public sealed virtual byte GetWeaponTintIndex(WeaponModel weapon);
    public sealed virtual byte GetCurrentWeaponTintIndex();
    public sealed virtual WeaponData[] GetWeapons();
    public sealed virtual void Kick(string reason);
    public sealed virtual void Emit(string eventName, Object[] args);
    public sealed virtual ushort EmitRPC(string name, Object[] args);
    public sealed virtual void EmitRPCAnswer(ushort answerId, object answer, string error);
    public sealed virtual void EmitUnreliable(string eventName, Object[] args);
    public sealed virtual void ClearBloodDamage();
    public sealed virtual Cloth GetClothes(byte component);
    public sealed virtual void GetClothes(byte component, Cloth& cloth);
    public sealed virtual bool SetClothes(byte component, ushort drawable, byte texture, byte palette);
    public sealed virtual DlcCloth GetDlcClothes(byte component);
    public sealed virtual void GetDlcClothes(byte component, DlcCloth& cloth);
    public sealed virtual bool SetDlcClothes(byte component, ushort drawable, byte texture, byte palette, UInt32 dlc);
    public sealed virtual bool ClearClothes(byte component);
    public sealed virtual Prop GetProps(byte component);
    public sealed virtual void GetProps(byte component, Prop& prop);
    public sealed virtual bool SetProps(byte component, ushort drawable, byte texture);
    public sealed virtual DlcProp GetDlcProps(byte component);
    public sealed virtual void GetDlcProps(byte component, DlcProp& prop);
    public sealed virtual bool SetDlcProps(byte component, ushort drawable, byte texture, UInt32 dlc);
    public sealed virtual void ClearProps(byte component);
    public sealed virtual bool IsEntityInStreamingRange(IEntity entity);
    public sealed virtual bool get_Invincible();
    public sealed virtual void set_Invincible(bool value);
    public sealed virtual UInt32 get_LastDamagedBodyPart();
    public sealed virtual void set_LastDamagedBodyPart(UInt32 value);
    public sealed virtual void SetIntoVehicle(IVehicle vehicle, byte seat);
    public sealed virtual bool get_IsSuperJumpEnabled();
    public sealed virtual bool get_IsCrouching();
    public sealed virtual bool get_IsStealthy();
    public sealed virtual void PlayAmbientSpeech(string speechName, string speechParam, UInt32 speechDictHash);
    public sealed virtual HeadBlendData get_HeadBlendData();
    public sealed virtual ushort get_EyeColor();
    public sealed virtual byte get_HairColor();
    public sealed virtual void set_HairColor(byte value);
    public sealed virtual byte get_HairHighlightColor();
    public sealed virtual void set_HairHighlightColor(byte value);
    public sealed virtual bool SetHeadOverlay(byte overlayId, byte index, float opacity);
    public sealed virtual bool RemoveHeadOverlay(byte overlayId);
    public sealed virtual bool SetHeadOverlayColor(byte overlayId, byte colorType, byte colorIndex, byte secondColorIndex);
    public sealed virtual bool SetFaceFeature(byte index, float scale);
    public sealed virtual float GetFaceFeatureScale(byte index);
    public sealed virtual bool RemoveFaceFeature(byte index);
    public sealed virtual bool SetHeadBlendPaletteColor(byte id, Rgba rgba);
    public sealed virtual Rgba GetHeadBlendPaletteColor(byte id);
    public sealed virtual void RemoveHeadBlendPaletteColor();
    public sealed virtual void SetHeadBlendData(UInt32 shapeFirstID, UInt32 shapeSecondID, UInt32 shapeThirdID, UInt32 skinFirstID, UInt32 skinSecondID, UInt32 skinThirdID, float shapeMix, float skinMix, float thirdMix);
    public sealed virtual void RemoveHeadBlendData();
    public sealed virtual bool SetEyeColor(ushort eyeColor);
    public sealed virtual HeadOverlay GetHeadOverlay(byte overlayID);
    public virtual void SetCached(IntPtr cachedPlayer);
    public sealed virtual bool get_IsParachuting();
    private sealed virtual override void AltV.Net.Elements.Entities.IPlayer.SetLocalMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.Vehicle : Entity {
    [CompilerGeneratedAttribute]
private IntPtr <VehicleNativePointer>k__BackingField;
    public IntPtr VehicleNativePointer { get; private set; }
    public IntPtr NativePointer { get; }
    public UInt32 Model { get; public set; }
    public IPlayer Driver { get; }
    public bool IsDestroyed { get; }
    public byte ModKit { get; public set; }
    public byte ModKitsCount { get; }
    public bool IsPrimaryColorRgb { get; }
    public byte PrimaryColor { get; public set; }
    public Rgba PrimaryColorRgb { get; public set; }
    public bool IsSecondaryColorRgb { get; }
    public byte SecondaryColor { get; public set; }
    public Rgba SecondaryColorRgb { get; public set; }
    public byte PearlColor { get; public set; }
    public byte WheelColor { get; public set; }
    public byte InteriorColor { get; public set; }
    public byte DashboardColor { get; public set; }
    public bool IsTireSmokeColorCustom { get; }
    public Rgba TireSmokeColor { get; public set; }
    public byte WheelType { get; }
    public byte WheelVariation { get; }
    public byte RearWheel { get; public set; }
    public bool CustomTires { get; public set; }
    public byte SpecialDarkness { get; public set; }
    public UInt32 NumberplateIndex { get; public set; }
    public string NumberplateText { get; public set; }
    public byte WindowTint { get; public set; }
    public byte DirtLevel { get; public set; }
    public Rgba NeonColor { get; public set; }
    public byte Livery { get; public set; }
    public byte LightState { get; public set; }
    public byte RoofLivery { get; public set; }
    public string AppearanceData { get; public set; }
    public bool EngineOn { get; public set; }
    public bool IsHandbrakeActive { get; }
    public byte HeadlightColor { get; public set; }
    public UInt32 RadioStation { get; public set; }
    public IPlayer TimedExplosionCulprit { get; }
    public UInt32 TimedExplosionTime { get; }
    public bool SirenActive { get; public set; }
    public VehicleLockState LockState { get; public set; }
    public bool IsDaylightOn { get; }
    public bool IsNightlightOn { get; }
    public bool IsRoofClosed { get; public set; }
    public bool IsFlamethrowerActive { get; }
    public float LightsMultiplier { get; public set; }
    public string State { get; public set; }
    public int EngineHealth { get; public set; }
    public int PetrolTankHealth { get; public set; }
    public float SteeringAngle { get; }
    public byte WheelsCount { get; }
    public byte RepairsCount { get; }
    public UInt32 BodyHealth { get; public set; }
    public UInt32 BodyAdditionalHealth { get; public set; }
    public string HealthData { get; public set; }
    public bool HasArmoredWindows { get; }
    public bool TimedExplosion { get; }
    public string DamageData { get; public set; }
    public bool ManualEngineControl { get; public set; }
    public string ScriptData { get; public set; }
    public IVehicle Attached { get; }
    public IVehicle AttachedTo { get; }
    public bool IsNeonActive { get; }
    public Position Velocity { get; }
    public bool DriftMode { get; public set; }
    public bool BoatAnchor { get; public set; }
    public bool IsMissionTrain { get; public set; }
    public sbyte TrainTrackId { get; public set; }
    public IVehicle TrainEngine { get; public set; }
    public sbyte TrainConfigIndex { get; public set; }
    public float TrainDistanceFromEngine { get; public set; }
    public bool IsTrainEngine { get; public set; }
    public bool IsTrainCaboose { get; public set; }
    public bool TrainDirection { get; public set; }
    public bool TrainPassengerCarriages { get; public set; }
    public bool TrainRenderDerailed { get; public set; }
    public bool TrainForceDoorsOpen { get; public set; }
    public float TrainCruiseSpeed { get; public set; }
    public sbyte TrainCarriageConfigIndex { get; public set; }
    public IVehicle TrainLinkedToBackward { get; public set; }
    public IVehicle TrainLinkedToForward { get; public set; }
    public UInt32 CounterMeasureCount { get; public set; }
    public bool HybridExtraActive { get; public set; }
    public byte HybridExtraState { get; public set; }
    public float RocketRefuelSpeed { get; public set; }
    public float ScriptMaxSpeed { get; public set; }
    public bool IsTowingDisabled { get; public set; }
    public Quaternion Quaternion { get; public set; }
    public bool IsHornActive { get; }
    public float AccelerationLevel { get; }
    public float BrakeLevel { get; }
    public List`1<PlayerSeat> Passengers { get; }
    public Vehicle(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_VehicleNativePointer();
    [CompilerGeneratedAttribute]
private void set_VehicleNativePointer(IntPtr value);
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetEntityPointer(ICore core, IntPtr nativePointer);
    public static UInt32 GetId(IntPtr vehiclePointer);
    public virtual UInt32 get_Model();
    public virtual void set_Model(UInt32 value);
    public sealed virtual IPlayer get_Driver();
    public sealed virtual bool get_IsDestroyed();
    public sealed virtual byte get_ModKit();
    public sealed virtual void set_ModKit(byte value);
    public sealed virtual byte get_ModKitsCount();
    public sealed virtual bool get_IsPrimaryColorRgb();
    public sealed virtual byte get_PrimaryColor();
    public sealed virtual void set_PrimaryColor(byte value);
    public sealed virtual Rgba get_PrimaryColorRgb();
    public sealed virtual void set_PrimaryColorRgb(Rgba value);
    public sealed virtual bool get_IsSecondaryColorRgb();
    public sealed virtual byte get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(byte value);
    public sealed virtual Rgba get_SecondaryColorRgb();
    public sealed virtual void set_SecondaryColorRgb(Rgba value);
    public sealed virtual byte get_PearlColor();
    public sealed virtual void set_PearlColor(byte value);
    public sealed virtual byte get_WheelColor();
    public sealed virtual void set_WheelColor(byte value);
    public sealed virtual byte get_InteriorColor();
    public sealed virtual void set_InteriorColor(byte value);
    public sealed virtual byte get_DashboardColor();
    public sealed virtual void set_DashboardColor(byte value);
    public sealed virtual bool get_IsTireSmokeColorCustom();
    public sealed virtual Rgba get_TireSmokeColor();
    public sealed virtual void set_TireSmokeColor(Rgba value);
    public sealed virtual byte get_WheelType();
    public sealed virtual byte get_WheelVariation();
    public sealed virtual byte get_RearWheel();
    public sealed virtual void set_RearWheel(byte value);
    public sealed virtual bool get_CustomTires();
    public sealed virtual void set_CustomTires(bool value);
    public sealed virtual byte get_SpecialDarkness();
    public sealed virtual void set_SpecialDarkness(byte value);
    public sealed virtual UInt32 get_NumberplateIndex();
    public sealed virtual void set_NumberplateIndex(UInt32 value);
    public sealed virtual string get_NumberplateText();
    public sealed virtual void set_NumberplateText(string value);
    public sealed virtual byte get_WindowTint();
    public sealed virtual void set_WindowTint(byte value);
    public sealed virtual byte get_DirtLevel();
    public sealed virtual void set_DirtLevel(byte value);
    public sealed virtual Rgba get_NeonColor();
    public sealed virtual void set_NeonColor(Rgba value);
    public sealed virtual byte get_Livery();
    public sealed virtual void set_Livery(byte value);
    public sealed virtual byte get_LightState();
    public sealed virtual void set_LightState(byte value);
    public sealed virtual byte get_RoofLivery();
    public sealed virtual void set_RoofLivery(byte value);
    public sealed virtual string get_AppearanceData();
    public sealed virtual void set_AppearanceData(string value);
    public sealed virtual bool get_EngineOn();
    public sealed virtual void set_EngineOn(bool value);
    public sealed virtual bool get_IsHandbrakeActive();
    public sealed virtual byte get_HeadlightColor();
    public sealed virtual void set_HeadlightColor(byte value);
    public sealed virtual UInt32 get_RadioStation();
    public sealed virtual void set_RadioStation(UInt32 value);
    public sealed virtual IPlayer get_TimedExplosionCulprit();
    public sealed virtual UInt32 get_TimedExplosionTime();
    public sealed virtual bool get_SirenActive();
    public sealed virtual void set_SirenActive(bool value);
    public sealed virtual VehicleLockState get_LockState();
    public sealed virtual void set_LockState(VehicleLockState value);
    public sealed virtual byte GetDoorState(byte doorId);
    public sealed virtual void SetDoorState(byte doorId, byte state);
    public sealed virtual bool IsWindowOpened(byte windowId);
    public sealed virtual void SetWindowOpened(byte windowId, bool state);
    public sealed virtual bool get_IsDaylightOn();
    public sealed virtual bool get_IsNightlightOn();
    public sealed virtual bool get_IsRoofClosed();
    public sealed virtual void set_IsRoofClosed(bool value);
    public sealed virtual bool get_IsFlamethrowerActive();
    public sealed virtual float get_LightsMultiplier();
    public sealed virtual void set_LightsMultiplier(float value);
    public sealed virtual string get_State();
    public sealed virtual void set_State(string value);
    public sealed virtual int get_EngineHealth();
    public sealed virtual void set_EngineHealth(int value);
    public sealed virtual int get_PetrolTankHealth();
    public sealed virtual void set_PetrolTankHealth(int value);
    public sealed virtual float get_SteeringAngle();
    public sealed virtual byte get_WheelsCount();
    public sealed virtual bool IsWheelBurst(byte wheelId);
    public sealed virtual void SetWheelBurst(byte wheelId, bool state);
    public sealed virtual bool DoesWheelHasTire(byte wheelId);
    public sealed virtual void SetWheelHasTire(byte wheelId, bool state);
    public sealed virtual bool IsWheelDetached(byte wheelId);
    public sealed virtual void SetWheelDetached(byte wheelId, bool state);
    public sealed virtual bool IsWheelOnFire(byte wheelId);
    public sealed virtual void SetWheelOnFire(byte wheelId, bool state);
    public sealed virtual float GetWheelHealth(byte wheelId);
    public sealed virtual void SetWheelHealth(byte wheelId, float health);
    public sealed virtual void SetWheelFixed(byte wheelId);
    public sealed virtual byte get_RepairsCount();
    public sealed virtual UInt32 get_BodyHealth();
    public sealed virtual void set_BodyHealth(UInt32 value);
    public sealed virtual UInt32 get_BodyAdditionalHealth();
    public sealed virtual void set_BodyAdditionalHealth(UInt32 value);
    public sealed virtual string get_HealthData();
    public sealed virtual void set_HealthData(string value);
    public sealed virtual byte GetPartDamageLevel(byte partId);
    public sealed virtual void SetPartDamageLevel(byte partId, byte damage);
    public sealed virtual byte GetPartBulletHoles(byte partId);
    public sealed virtual void SetPartBulletHoles(byte partId, byte shootsCount);
    public sealed virtual bool IsLightDamaged(byte lightId);
    public sealed virtual void SetLightDamaged(byte lightId, bool isDamaged);
    public sealed virtual bool IsWindowDamaged(byte windowId);
    public sealed virtual void SetWindowDamaged(byte windowId, bool isDamaged);
    public sealed virtual bool IsSpecialLightDamaged(byte specialLightId);
    private sealed virtual override void AltV.Net.Elements.Entities.IVehicle.SetSpecialLightDamaged(byte specialLightId, bool isDamaged);
    public sealed virtual bool get_HasArmoredWindows();
    public sealed virtual bool get_TimedExplosion();
    public sealed virtual float GetArmoredWindowHealth(byte windowId);
    public sealed virtual void SetArmoredWindowHealth(byte windowId, float health);
    public sealed virtual byte GetArmoredWindowShootCount(byte windowId);
    public sealed virtual void SetArmoredWindowShootCount(byte windowId, byte count);
    public sealed virtual byte GetBumperDamageLevel(byte bumperId);
    public sealed virtual void SetBumperDamageLevel(byte bumperId, byte damageLevel);
    public sealed virtual string get_DamageData();
    public sealed virtual void set_DamageData(string value);
    public sealed virtual bool get_ManualEngineControl();
    public sealed virtual void set_ManualEngineControl(bool value);
    public sealed virtual string get_ScriptData();
    public sealed virtual void set_ScriptData(string value);
    public sealed virtual IVehicle get_Attached();
    public sealed virtual IVehicle get_AttachedTo();
    public sealed virtual byte GetMod(byte category);
    public sealed virtual byte GetModsCount(byte category);
    public sealed virtual bool SetMod(byte category, byte id);
    public sealed virtual void SetWheels(byte type, byte variation);
    public sealed virtual bool IsExtraOn(byte extraId);
    public sealed virtual void ToggleExtra(byte extraId, bool state);
    public sealed virtual bool get_IsNeonActive();
    public sealed virtual void SetNeonActive(bool left, bool right, bool front, bool back);
    public sealed virtual void GetNeonActive(Boolean& left, Boolean& right, Boolean& front, Boolean& back);
    public sealed virtual void Repair();
    public sealed virtual void SetTimedExplosion(bool state, IPlayer culprit, UInt32 time);
    public sealed virtual Position get_Velocity();
    public sealed virtual bool get_DriftMode();
    public sealed virtual void set_DriftMode(bool value);
    public sealed virtual bool get_BoatAnchor();
    public sealed virtual void set_BoatAnchor(bool value);
    public sealed virtual bool SetSearchLight(bool state, IEntity spottedEntity);
    public sealed virtual bool get_IsMissionTrain();
    public sealed virtual void set_IsMissionTrain(bool value);
    public sealed virtual sbyte get_TrainTrackId();
    public sealed virtual void set_TrainTrackId(sbyte value);
    public sealed virtual IVehicle get_TrainEngine();
    public sealed virtual void set_TrainEngine(IVehicle value);
    public sealed virtual sbyte get_TrainConfigIndex();
    public sealed virtual void set_TrainConfigIndex(sbyte value);
    public sealed virtual float get_TrainDistanceFromEngine();
    public sealed virtual void set_TrainDistanceFromEngine(float value);
    public sealed virtual bool get_IsTrainEngine();
    public sealed virtual void set_IsTrainEngine(bool value);
    public sealed virtual bool get_IsTrainCaboose();
    public sealed virtual void set_IsTrainCaboose(bool value);
    public sealed virtual bool get_TrainDirection();
    public sealed virtual void set_TrainDirection(bool value);
    public sealed virtual bool get_TrainPassengerCarriages();
    public sealed virtual void set_TrainPassengerCarriages(bool value);
    public sealed virtual bool get_TrainRenderDerailed();
    public sealed virtual void set_TrainRenderDerailed(bool value);
    public sealed virtual bool get_TrainForceDoorsOpen();
    public sealed virtual void set_TrainForceDoorsOpen(bool value);
    public sealed virtual float get_TrainCruiseSpeed();
    public sealed virtual void set_TrainCruiseSpeed(float value);
    public sealed virtual sbyte get_TrainCarriageConfigIndex();
    public sealed virtual void set_TrainCarriageConfigIndex(sbyte value);
    public sealed virtual IVehicle get_TrainLinkedToBackward();
    public sealed virtual void set_TrainLinkedToBackward(IVehicle value);
    public sealed virtual IVehicle get_TrainLinkedToForward();
    public sealed virtual void set_TrainLinkedToForward(IVehicle value);
    public sealed virtual UInt32 get_CounterMeasureCount();
    public sealed virtual void set_CounterMeasureCount(UInt32 value);
    public sealed virtual bool get_HybridExtraActive();
    public sealed virtual void set_HybridExtraActive(bool value);
    public sealed virtual byte get_HybridExtraState();
    public sealed virtual void set_HybridExtraState(byte value);
    public sealed virtual float get_RocketRefuelSpeed();
    public sealed virtual void set_RocketRefuelSpeed(float value);
    public sealed virtual float get_ScriptMaxSpeed();
    public sealed virtual void set_ScriptMaxSpeed(float value);
    public sealed virtual bool get_IsTowingDisabled();
    public sealed virtual void set_IsTowingDisabled(bool value);
    public sealed virtual void SetWeaponCapacity(byte index, int capacity);
    public sealed virtual int GetWeaponCapacity(byte index);
    public sealed virtual Quaternion get_Quaternion();
    public sealed virtual void set_Quaternion(Quaternion value);
    public sealed virtual bool get_IsHornActive();
    public sealed virtual float get_AccelerationLevel();
    public sealed virtual float get_BrakeLevel();
    public sealed virtual List`1<PlayerSeat> get_Passengers();
    public sealed virtual void SetBadge(string textureDictionary, string texture, VehicleBadgePosition[] vehicleBadgePosition);
    public sealed virtual void SetBadge(UInt32 textureDictionary, UInt32 texture, VehicleBadgePosition[] vehicleBadgePosition);
    public virtual void SetCached(IntPtr cachedVehicle);
    private sealed virtual override void AltV.Net.Elements.Entities.IEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.VirtualEntity : WorldObject {
    [CompilerGeneratedAttribute]
private IntPtr <VirtualEntityNativePointer>k__BackingField;
    public IntPtr VirtualEntityNativePointer { get; }
    public IntPtr NativePointer { get; }
    public ISharedVirtualEntityGroup Group { get; }
    public UInt32 StreamingDistance { get; }
    public bool Visible { get; public set; }
    public VirtualEntity(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_VirtualEntityNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetWorldObjectPointer(ICore core, IntPtr virtualEntityNativePointer);
    public static UInt32 GetId(IntPtr pedPointer);
    public sealed virtual ISharedVirtualEntityGroup get_Group();
    public sealed virtual bool HasStreamSyncedMetaData(string key);
    public sealed virtual bool GetStreamSyncedMetaData(string key, T& result);
    public sealed virtual void GetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual UInt32 get_StreamingDistance();
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual void SetStreamSyncedMetaData(string key, object value);
    public sealed virtual void SetStreamSyncedMetaData(Dictionary`2<string, object> metaData);
    public void SetStreamSyncedMetaData(string key, MValueConst& value);
    public sealed virtual void DeleteStreamSyncedMetaData(string key);
    private sealed virtual override void AltV.Net.Elements.Entities.IVirtualEntity.SetStreamSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.VirtualEntityGroup : BaseObject {
    [CompilerGeneratedAttribute]
private IntPtr <VirtualEntityGroupNativePointer>k__BackingField;
    public IntPtr VirtualEntityGroupNativePointer { get; }
    public IntPtr NativePointer { get; }
    public UInt32 MaxEntitiesInStream { get; }
    public VirtualEntityGroup(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_VirtualEntityGroupNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetBaseObjectPointer(ICore core, IntPtr virtualEntityGroupNativePointer);
    public static UInt32 GetId(IntPtr pedPointer);
    public sealed virtual UInt32 get_MaxEntitiesInStream();
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Entities.VoiceChannel : BaseObject {
    [CompilerGeneratedAttribute]
private IntPtr <VoiceChannelNativePointer>k__BackingField;
    public IntPtr VoiceChannelNativePointer { get; }
    public IntPtr NativePointer { get; }
    public bool IsSpatial { get; }
    public float MaxDistance { get; }
    public UInt32 Filter { get; public set; }
    public int Priority { get; public set; }
    public IReadOnlyCollection`1<IPlayer> Players { get; }
    public ulong PlayerCount { get; }
    public VoiceChannel(ICore core, IntPtr nativePointer, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_VoiceChannelNativePointer();
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetBaseObjectPointer(ICore core, IntPtr nativePointer);
    public static UInt32 GetId(IntPtr pedPointer);
    public sealed virtual void AddPlayer(IPlayer player);
    public sealed virtual void RemovePlayer(IPlayer player);
    public sealed virtual void MutePlayer(IPlayer player);
    public sealed virtual void UnmutePlayer(IPlayer player);
    public sealed virtual bool HasPlayer(IPlayer player);
    public sealed virtual bool IsPlayerMuted(IPlayer player);
    public sealed virtual bool get_IsSpatial();
    public sealed virtual float get_MaxDistance();
    public sealed virtual UInt32 get_Filter();
    public sealed virtual void set_Filter(UInt32 value);
    public sealed virtual int get_Priority();
    public sealed virtual void set_Priority(int value);
    public sealed virtual IReadOnlyCollection`1<IPlayer> get_Players();
    public sealed virtual ulong get_PlayerCount();
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
    [CompilerGeneratedAttribute]
private IPlayer <get_Players>b__24_0(IntPtr e);
}
public abstract class AltV.Net.Elements.Entities.WorldObject : BaseObject {
    [CompilerGeneratedAttribute]
private IntPtr <WorldObjectNativePointer>k__BackingField;
    public IntPtr WorldObjectNativePointer { get; private set; }
    public IntPtr NativePointer { get; }
    public Position Position { get; public set; }
    public int Dimension { get; public set; }
    protected WorldObject(ICore core, IntPtr nativePointer, BaseObjectType type, UInt32 id);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_WorldObjectNativePointer();
    [CompilerGeneratedAttribute]
private void set_WorldObjectNativePointer(IntPtr value);
    public virtual IntPtr get_NativePointer();
    private static IntPtr GetBaseObjectPointer(ICore core, IntPtr nativePointer);
    public sealed virtual Position get_Position();
    public sealed virtual void set_Position(Position value);
    public sealed virtual int get_Dimension();
    public sealed virtual void set_Dimension(int value);
    public virtual void CheckIfEntityExists();
    public virtual void SetCached(IntPtr cachedWorldObject);
    public sealed virtual void SetPosition(ValueTuple`3<float, float, float> position);
    public sealed virtual void SetPosition(float x, float y, float z);
    public sealed virtual ValueTuple`3<float, float, float> GetPosition();
    private sealed virtual override void AltV.Net.Elements.Entities.IBaseObject.SetSyncedMetaData(string key, MValueConst& modreq(System.Runtime.InteropServices.InAttribute) value);
}
public class AltV.Net.Elements.Factories.BlipFactory : object {
    public sealed virtual IBlip Create(ICore core, IntPtr blipPointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.CheckpointFactory : object {
    public sealed virtual ICheckpoint Create(ICore core, IntPtr checkpointFactory, UInt32 id);
}
public class AltV.Net.Elements.Factories.ColShapeFactory : object {
    public sealed virtual IColShape Create(ICore core, IntPtr entityPointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.ConnectionInfoFactory : object {
    public sealed virtual IConnectionInfo Create(ICore core, IntPtr pointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.MarkerFactory : object {
    public sealed virtual IMarker Create(ICore core, IntPtr markerPointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.NativeResourceFactory : object {
    public sealed virtual INativeResource Create(ICore core, IntPtr resourcePointer);
}
public class AltV.Net.Elements.Factories.ObjectFactory : object {
    public sealed virtual IObject Create(ICore core, IntPtr pointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.PedFactory : object {
    public sealed virtual IPed Create(ICore core, IntPtr pedPointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.PlayerFactory : object {
    public sealed virtual IPlayer Create(ICore core, IntPtr playerPointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.VehicleFactory : object {
    public sealed virtual IVehicle Create(ICore core, IntPtr vehiclePointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.VirtualEntityFactory : object {
    public sealed virtual IVirtualEntity Create(ICore core, IntPtr pointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.VirtualEntityGroupFactory : object {
    public sealed virtual IVirtualEntityGroup Create(ICore core, IntPtr pointer, UInt32 id);
}
public class AltV.Net.Elements.Factories.VoiceChannelFactory : object {
    public sealed virtual IVoiceChannel Create(ICore core, IntPtr channelPointer, UInt32 id);
}
[ExtensionAttribute]
public static class AltV.Net.Elements.MValueBufferExtensions : object {
    [ExtensionAttribute]
public static MValueBuffer2 Reader(MValueConst[] array);
}
public abstract class AltV.Net.Elements.Pools.BaseObjectPool`1 : object {
    private Dictionary`2<IntPtr, TBaseObject> entities;
    private IBaseObjectFactory`1<TBaseObject> entityFactory;
    protected BaseObjectPool`1(IBaseObjectFactory`1<TBaseObject> entityFactory);
    public abstract virtual UInt32 GetId(IntPtr entityPointer);
    public static void SetEntityNoLongerExists(TBaseObject entity);
    public sealed virtual TBaseObject Create(ICore core, IntPtr entityPointer, UInt32 id);
    public sealed virtual void Add(TBaseObject entity);
    public sealed virtual bool Remove(TBaseObject entity);
    public sealed virtual bool Remove(IntPtr entityPointer);
    public sealed virtual TBaseObject GetOrCreate(ICore core, IntPtr entityPointer, UInt32 entityId);
    public sealed virtual TBaseObject Get(IntPtr entityPointer);
    public sealed virtual TBaseObject GetOrCreate(ICore core, IntPtr entityPointer);
    public sealed virtual IReadOnlyCollection`1<TBaseObject> GetAllObjects();
    public sealed virtual KeyValuePair`2[] GetObjectsArray();
    public sealed virtual void ForEach(IBaseObjectCallback`1<TBaseObject> baseObjectCallback);
    [AsyncStateMachineAttribute("AltV.Net.Elements.Pools.BaseObjectPool`1/<ForEach>d__15")]
public sealed virtual Task ForEach(IAsyncBaseObjectCallback`1<TBaseObject> asyncBaseObjectCallback);
    public virtual void OnAdd(TBaseObject entity);
    public virtual void OnRemove(TBaseObject entity);
    public sealed virtual void Dispose();
}
public class AltV.Net.Elements.Pools.BlipPool : BaseObjectPool`1<IBlip> {
    public BlipPool(IBaseObjectFactory`1<IBlip> blipFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.CheckpointPool : BaseObjectPool`1<ICheckpoint> {
    public CheckpointPool(IBaseObjectFactory`1<ICheckpoint> checkpointPool);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.ColShapePool : BaseObjectPool`1<IColShape> {
    public ColShapePool(IBaseObjectFactory`1<IColShape> colShapeFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.ConnectionInfoPool : BaseObjectPool`1<IConnectionInfo> {
    public ConnectionInfoPool(IBaseObjectFactory`1<IConnectionInfo> factory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public abstract class AltV.Net.Elements.Pools.EntityPool`1 : object {
    private Dictionary`2<IntPtr, TEntity> entities;
    private Dictionary`2<IntPtr, WeakReference`1<TEntity>> cache;
    private IEntityFactory`1<TEntity> entityFactory;
    protected EntityPool`1(IEntityFactory`1<TEntity> entityFactory);
    public abstract virtual UInt32 GetId(IntPtr entityPointer);
    public sealed virtual TEntity Create(ICore core, IntPtr entityPointer, UInt32 id);
    public sealed virtual TEntity Create(ICore core, IntPtr entityPointer);
    public sealed virtual void Add(TEntity entity);
    public sealed virtual bool Remove(TEntity entity);
    public sealed virtual bool Remove(IntPtr entityPointer);
    public sealed virtual TEntity Get(IntPtr entityPointer);
    public sealed virtual TEntity GetOrCreate(ICore core, IntPtr entityPointer);
    public sealed virtual TEntity GetOrCreate(ICore core, IntPtr entityPointer, UInt32 entityId);
    public sealed virtual IReadOnlyCollection`1<TEntity> GetAllEntities();
    public sealed virtual KeyValuePair`2[] GetEntitiesArray();
    public sealed virtual void ForEach(IBaseObjectCallback`1<TEntity> baseObjectCallback);
    [AsyncStateMachineAttribute("AltV.Net.Elements.Pools.EntityPool`1/<ForEach>d__16")]
public sealed virtual Task ForEach(IAsyncBaseObjectCallback`1<TEntity> asyncBaseObjectCallback);
    public virtual void OnAdd(TEntity entity);
    public virtual void OnRemove(TEntity entity);
    public sealed virtual void Dispose();
}
public interface AltV.Net.Elements.Pools.IAsyncBaseObjectCallback`1 {
    public abstract virtual Task OnBaseObject(TBaseObject baseObject);
}
public interface AltV.Net.Elements.Pools.IBaseObjectCallback`1 {
    public abstract virtual void OnBaseObject(TBaseObject baseObject);
}
public class AltV.Net.Elements.Pools.MarkerPool : BaseObjectPool`1<IMarker> {
    public MarkerPool(IBaseObjectFactory`1<IMarker> factory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.NativeResourcePool : object {
    private Dictionary`2<IntPtr, INativeResource> resources;
    private INativeResourceFactory resourceFactory;
    public NativeResourcePool(INativeResourceFactory resourceFactory);
    public sealed virtual bool GetOrCreate(ICore core, IntPtr resourcePointer, INativeResource& resource);
}
public class AltV.Net.Elements.Pools.ObjectPool : EntityPool`1<IObject> {
    public ObjectPool(IEntityFactory`1<IObject> factory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.PedPool : EntityPool`1<IPed> {
    public PedPool(IEntityFactory`1<IPed> pedFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.PlayerPool : EntityPool`1<IPlayer> {
    public PlayerPool(IEntityFactory`1<IPlayer> playerFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.PoolManager : object {
    [CompilerGeneratedAttribute]
private IEntityPool`1<IPlayer> <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityPool`1<IVehicle> <Vehicle>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityPool`1<IPed> <Ped>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityPool`1<IObject> <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IBlip> <Blip>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<ICheckpoint> <Checkpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IVoiceChannel> <VoiceChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IConnectionInfo> <ConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IColShape> <ColShape>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IVirtualEntity> <VirtualEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IVirtualEntityGroup> <VirtualEntityGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseObjectPool`1<IMarker> <Marker>k__BackingField;
    public IEntityPool`1<IPlayer> Player { get; }
    private IReadOnlyEntityPool`1<ISharedPlayer> AltV.Net.Shared.ISharedPoolManager.Player { get; }
    public IEntityPool`1<IVehicle> Vehicle { get; }
    private IReadOnlyEntityPool`1<ISharedVehicle> AltV.Net.Shared.ISharedPoolManager.Vehicle { get; }
    public IEntityPool`1<IPed> Ped { get; }
    private IReadOnlyEntityPool`1<ISharedPed> AltV.Net.Shared.ISharedPoolManager.Ped { get; }
    public IEntityPool`1<IObject> Object { get; }
    private IReadOnlyEntityPool`1<ISharedObject> AltV.Net.Shared.ISharedPoolManager.Object { get; }
    public IBaseObjectPool`1<IBlip> Blip { get; }
    private IReadOnlyBaseObjectPool`1<ISharedBlip> AltV.Net.Shared.ISharedPoolManager.Blip { get; }
    public IBaseObjectPool`1<ICheckpoint> Checkpoint { get; }
    private IReadOnlyBaseObjectPool`1<ISharedCheckpoint> AltV.Net.Shared.ISharedPoolManager.Checkpoint { get; }
    public IBaseObjectPool`1<IVoiceChannel> VoiceChannel { get; }
    public IBaseObjectPool`1<IConnectionInfo> ConnectionInfo { get; }
    public IBaseObjectPool`1<IColShape> ColShape { get; }
    private IReadOnlyBaseObjectPool`1<ISharedColShape> AltV.Net.Shared.ISharedPoolManager.ColShape { get; }
    public IBaseObjectPool`1<IVirtualEntity> VirtualEntity { get; }
    private IReadOnlyBaseObjectPool`1<ISharedVirtualEntity> AltV.Net.Shared.ISharedPoolManager.VirtualEntity { get; }
    public IBaseObjectPool`1<IVirtualEntityGroup> VirtualEntityGroup { get; }
    private IReadOnlyBaseObjectPool`1<ISharedVirtualEntityGroup> AltV.Net.Shared.ISharedPoolManager.VirtualEntityGroup { get; }
    public IBaseObjectPool`1<IMarker> Marker { get; }
    private IReadOnlyBaseObjectPool`1<ISharedMarker> AltV.Net.Shared.ISharedPoolManager.Marker { get; }
    public PoolManager(IEntityPool`1<IPlayer> playerPool, IEntityPool`1<IVehicle> vehiclePool, IEntityPool`1<IPed> pedPool, IEntityPool`1<IObject> objectPool, IBaseObjectPool`1<IBlip> blipPool, IBaseObjectPool`1<ICheckpoint> checkpointPool, IBaseObjectPool`1<IVoiceChannel> voiceChannelPool, IBaseObjectPool`1<IColShape> colShapePool, IBaseObjectPool`1<IVirtualEntity> virtualEntityPool, IBaseObjectPool`1<IVirtualEntityGroup> virtualEntityGroupPool, IBaseObjectPool`1<IMarker> markerPool, IBaseObjectPool`1<IConnectionInfo> connectionInfoPool);
    [CompilerGeneratedAttribute]
public sealed virtual IEntityPool`1<IPlayer> get_Player();
    private sealed virtual override IReadOnlyEntityPool`1<ISharedPlayer> AltV.Net.Shared.ISharedPoolManager.get_Player();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityPool`1<IVehicle> get_Vehicle();
    private sealed virtual override IReadOnlyEntityPool`1<ISharedVehicle> AltV.Net.Shared.ISharedPoolManager.get_Vehicle();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityPool`1<IPed> get_Ped();
    private sealed virtual override IReadOnlyEntityPool`1<ISharedPed> AltV.Net.Shared.ISharedPoolManager.get_Ped();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityPool`1<IObject> get_Object();
    private sealed virtual override IReadOnlyEntityPool`1<ISharedObject> AltV.Net.Shared.ISharedPoolManager.get_Object();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IBlip> get_Blip();
    private sealed virtual override IReadOnlyBaseObjectPool`1<ISharedBlip> AltV.Net.Shared.ISharedPoolManager.get_Blip();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<ICheckpoint> get_Checkpoint();
    private sealed virtual override IReadOnlyBaseObjectPool`1<ISharedCheckpoint> AltV.Net.Shared.ISharedPoolManager.get_Checkpoint();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IVoiceChannel> get_VoiceChannel();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IConnectionInfo> get_ConnectionInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IColShape> get_ColShape();
    private sealed virtual override IReadOnlyBaseObjectPool`1<ISharedColShape> AltV.Net.Shared.ISharedPoolManager.get_ColShape();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IVirtualEntity> get_VirtualEntity();
    private sealed virtual override IReadOnlyBaseObjectPool`1<ISharedVirtualEntity> AltV.Net.Shared.ISharedPoolManager.get_VirtualEntity();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IVirtualEntityGroup> get_VirtualEntityGroup();
    private sealed virtual override IReadOnlyBaseObjectPool`1<ISharedVirtualEntityGroup> AltV.Net.Shared.ISharedPoolManager.get_VirtualEntityGroup();
    [CompilerGeneratedAttribute]
public sealed virtual IBaseObjectPool`1<IMarker> get_Marker();
    private sealed virtual override IReadOnlyBaseObjectPool`1<ISharedMarker> AltV.Net.Shared.ISharedPoolManager.get_Marker();
    public sealed virtual IBaseObject GetOrCreate(ICore core, IntPtr entityPointer, BaseObjectType baseObjectType, UInt32 entityId);
    public sealed virtual IBaseObject GetOrCreate(ICore core, IntPtr entityPointer, BaseObjectType baseObjectType);
    public sealed virtual IBaseObject Get(IntPtr entityPointer, BaseObjectType baseObjectType);
    public sealed virtual void Add(IBaseObject baseObject);
    public sealed virtual void Dispose();
    public sealed virtual bool Remove(IBaseObject entity);
    public sealed virtual bool Remove(IntPtr entityPointer, BaseObjectType baseObjectType);
    private sealed virtual override ISharedBaseObject AltV.Net.Shared.ISharedPoolManager.GetOrCreate(ISharedCore core, IntPtr entityPointer, BaseObjectType baseObjectType, UInt32 entityId);
    private sealed virtual override ISharedBaseObject AltV.Net.Shared.ISharedPoolManager.GetOrCreate(ISharedCore core, IntPtr entityPointer, BaseObjectType baseObjectType);
    private sealed virtual override ISharedBaseObject AltV.Net.Shared.ISharedPoolManager.Get(IntPtr entityPointer, BaseObjectType baseObjectType);
}
public class AltV.Net.Elements.Pools.VehiclePool : EntityPool`1<IVehicle> {
    public VehiclePool(IEntityFactory`1<IVehicle> vehicleFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.VirtualEntityGroupPool : BaseObjectPool`1<IVirtualEntityGroup> {
    public VirtualEntityGroupPool(IBaseObjectFactory`1<IVirtualEntityGroup> entityFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.VirtualEntityPool : BaseObjectPool`1<IVirtualEntity> {
    public VirtualEntityPool(IBaseObjectFactory`1<IVirtualEntity> entityFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
public class AltV.Net.Elements.Pools.VoiceChannelPool : BaseObjectPool`1<IVoiceChannel> {
    public VoiceChannelPool(IBaseObjectFactory`1<IVoiceChannel> voiceChannelFactory);
    public virtual UInt32 GetId(IntPtr entityPointer);
}
[AttributeUsageAttribute("4")]
public class AltV.Net.EntityFactoryAttribute : Attribute {
    private BaseObjectType baseObjectType;
    public EntityFactoryAttribute(BaseObjectType baseObjectType);
}
public class AltV.Net.Events.BaseObjectCreateDelegate : MulticastDelegate {
    public BaseObjectCreateDelegate(object object, IntPtr method);
    public virtual void Invoke(IBaseObject baseObject);
    public virtual IAsyncResult BeginInvoke(IBaseObject baseObject, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.BaseObjectRemoveDelegate : MulticastDelegate {
    public BaseObjectRemoveDelegate(object object, IntPtr method);
    public virtual void Invoke(IBaseObject baseObject);
    public virtual IAsyncResult BeginInvoke(IBaseObject baseObject, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.CheckpointDelegate : MulticastDelegate {
    public CheckpointDelegate(object object, IntPtr method);
    public virtual void Invoke(ICheckpoint checkpoint, IWorldObject entity, bool state);
    public virtual IAsyncResult BeginInvoke(ICheckpoint checkpoint, IWorldObject entity, bool state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ClientDeleteObjectDelegate : MulticastDelegate {
    public ClientDeleteObjectDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer target);
    public virtual IAsyncResult BeginInvoke(IPlayer target, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ClientEventDelegate : MulticastDelegate {
    public ClientEventDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, Object[] args);
    public virtual IAsyncResult BeginInvoke(IPlayer player, Object[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ClientRequestObjectDelegate : MulticastDelegate {
    public ClientRequestObjectDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer target, UInt32 model, Position position);
    public virtual IAsyncResult BeginInvoke(IPlayer target, UInt32 model, Position position, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ColShapeDelegate : MulticastDelegate {
    public ColShapeDelegate(object object, IntPtr method);
    public virtual void Invoke(IColShape colShape, IWorldObject targetEntity, bool state);
    public virtual IAsyncResult BeginInvoke(IColShape colShape, IWorldObject targetEntity, bool state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ConnectionQueueAddDelegate : MulticastDelegate {
    public ConnectionQueueAddDelegate(object object, IntPtr method);
    public virtual void Invoke(IConnectionInfo connectionInfo);
    public virtual IAsyncResult BeginInvoke(IConnectionInfo connectionInfo, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ConnectionQueueRemoveDelegate : MulticastDelegate {
    public ConnectionQueueRemoveDelegate(object object, IntPtr method);
    public virtual void Invoke(IConnectionInfo connectionInfo);
    public virtual IAsyncResult BeginInvoke(IConnectionInfo connectionInfo, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ConsoleCommandDelegate : MulticastDelegate {
    public ConsoleCommandDelegate(object object, IntPtr method);
    public virtual void Invoke(string name, String[] args);
    public virtual IAsyncResult BeginInvoke(string name, String[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ExplosionDelegate : MulticastDelegate {
    public ExplosionDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer player, ExplosionType explosionType, Position position, UInt32 explosionFx, IEntity targetEntity);
    public virtual IAsyncResult BeginInvoke(IPlayer player, ExplosionType explosionType, Position position, UInt32 explosionFx, IEntity targetEntity, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.FireDelegate : MulticastDelegate {
    public FireDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer player, FireInfo[] fireInfos);
    public virtual IAsyncResult BeginInvoke(IPlayer player, FireInfo[] fireInfos, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.GivePedScriptedTaskDelegate : MulticastDelegate {
    public GivePedScriptedTaskDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer source, IPed target, UInt32 taskType);
    public virtual IAsyncResult BeginInvoke(IPlayer source, IPed target, UInt32 taskType, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.MetaDataChangeDelegate : MulticastDelegate {
    public MetaDataChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IEntity entity, string key, object value);
    public virtual IAsyncResult BeginInvoke(IEntity entity, string key, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.NetOwnerChangeDelegate : MulticastDelegate {
    public NetOwnerChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IEntity target, IPlayer oldNetOwner, IPlayer newNetOwner);
    public virtual IAsyncResult BeginInvoke(IEntity target, IPlayer oldNetOwner, IPlayer newNetOwner, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PedDamageDelegate : MulticastDelegate {
    public PedDamageDelegate(object object, IntPtr method);
    public virtual void Invoke(IPed ped, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual IAsyncResult BeginInvoke(IPed ped, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PedDeadDelegate : MulticastDelegate {
    public PedDeadDelegate(object object, IntPtr method);
    public virtual void Invoke(IPed ped, IEntity killer, UInt32 weapon);
    public virtual IAsyncResult BeginInvoke(IPed ped, IEntity killer, UInt32 weapon, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PedHealDelegate : MulticastDelegate {
    public PedHealDelegate(object object, IntPtr method);
    public virtual void Invoke(IPed ped, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual IAsyncResult BeginInvoke(IPed ped, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PedRemoveDelegate : MulticastDelegate {
    public PedRemoveDelegate(object object, IntPtr method);
    public virtual void Invoke(IPed ped);
    public virtual IAsyncResult BeginInvoke(IPed ped, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerChangeAnimationDelegate : MulticastDelegate {
    public PlayerChangeAnimationDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName);
    public virtual IAsyncResult BeginInvoke(IPlayer player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerChangeInteriorDelegate : MulticastDelegate {
    public PlayerChangeInteriorDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, UInt32 oldIntLoc, UInt32 newIntLoc);
    public virtual IAsyncResult BeginInvoke(IPlayer player, UInt32 oldIntLoc, UInt32 newIntLoc, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerChangeVehicleSeatDelegate : MulticastDelegate {
    public PlayerChangeVehicleSeatDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle vehicle, IPlayer player, byte oldSeat, byte newSeat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte oldSeat, byte newSeat, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerClientCustomEventDelegate : MulticastDelegate {
    public PlayerClientCustomEventDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, string eventName, MValueConst[] mValueArray);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string eventName, MValueConst[] mValueArray, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerClientEventDelegate : MulticastDelegate {
    public PlayerClientEventDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, string eventName, Object[] args);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string eventName, Object[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerConnectDelegate : MulticastDelegate {
    public PlayerConnectDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, string reason);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string reason, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerConnectDeniedDelegate : MulticastDelegate {
    public PlayerConnectDeniedDelegate(object object, IntPtr method);
    public virtual void Invoke(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId);
    public virtual IAsyncResult BeginInvoke(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, bool isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerDamageDelegate : MulticastDelegate {
    public PlayerDamageDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public virtual IAsyncResult BeginInvoke(IPlayer player, IEntity attacker, UInt32 weapon, ushort healthDamage, ushort armourDamage, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerDeadDelegate : MulticastDelegate {
    public PlayerDeadDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, IEntity killer, UInt32 weapon);
    public virtual IAsyncResult BeginInvoke(IPlayer player, IEntity killer, UInt32 weapon, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerDimensionChangeDelegate : MulticastDelegate {
    public PlayerDimensionChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, int oldDimension, int newDimension);
    public virtual IAsyncResult BeginInvoke(IPlayer player, int oldDimension, int newDimension, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerDisconnectDelegate : MulticastDelegate {
    public PlayerDisconnectDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, string reason);
    public virtual IAsyncResult BeginInvoke(IPlayer player, string reason, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerEnteringVehicleDelegate : MulticastDelegate {
    public PlayerEnteringVehicleDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle vehicle, IPlayer player, byte seat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte seat, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerEnterVehicleDelegate : MulticastDelegate {
    public PlayerEnterVehicleDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle vehicle, IPlayer player, byte seat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte seat, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerHealDelegate : MulticastDelegate {
    public PlayerHealDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer target, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public virtual IAsyncResult BeginInvoke(IPlayer target, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerLeaveVehicleDelegate : MulticastDelegate {
    public PlayerLeaveVehicleDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle vehicle, IPlayer player, byte seat);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, IPlayer player, byte seat, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerRemoveDelegate : MulticastDelegate {
    public PlayerRemoveDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player);
    public virtual IAsyncResult BeginInvoke(IPlayer player, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerRequestControlDelegate : MulticastDelegate {
    public PlayerRequestControlDelegate(object object, IntPtr method);
    public virtual bool Invoke(IEntity target, IPlayer player);
    public virtual IAsyncResult BeginInvoke(IEntity target, IPlayer player, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerSpawnDelegate : MulticastDelegate {
    public PlayerSpawnDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player);
    public virtual IAsyncResult BeginInvoke(IPlayer player, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerStartTalkingDelegate : MulticastDelegate {
    public PlayerStartTalkingDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer Player);
    public virtual IAsyncResult BeginInvoke(IPlayer Player, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerStopTalkingDelegate : MulticastDelegate {
    public PlayerStopTalkingDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer Player);
    public virtual IAsyncResult BeginInvoke(IPlayer Player, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.PlayerWeaponChangeDelegate : MulticastDelegate {
    public PlayerWeaponChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, UInt32 oldWeapon, UInt32 newWeapon);
    public virtual IAsyncResult BeginInvoke(IPlayer player, UInt32 oldWeapon, UInt32 newWeapon, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.RequestSyncedSceneDelegate : MulticastDelegate {
    public RequestSyncedSceneDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer source, int sceneId);
    public virtual IAsyncResult BeginInvoke(IPlayer source, int sceneId, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ResourceEventDelegate : MulticastDelegate {
    public ResourceEventDelegate(object object, IntPtr method);
    public virtual void Invoke(INativeResource resource);
    public virtual IAsyncResult BeginInvoke(INativeResource resource, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ScriptRpcAnswerDelegate : MulticastDelegate {
    public ScriptRpcAnswerDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer target, ushort answerId, object answer, string answerError);
    public virtual IAsyncResult BeginInvoke(IPlayer target, ushort answerId, object answer, string answerError, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ScriptRpcDelegate : MulticastDelegate {
    public ScriptRpcDelegate(object object, IntPtr method);
    public virtual void Invoke(IScriptRPCEvent scriptRpcEvent, IPlayer target, string name, Object[] args, ushort answerId);
    public virtual IAsyncResult BeginInvoke(IScriptRPCEvent scriptRpcEvent, IPlayer target, string name, Object[] args, ushort answerId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ServerCustomEventEventDelegate : MulticastDelegate {
    public ServerCustomEventEventDelegate(object object, IntPtr method);
    public virtual void Invoke(string eventName, MValueConst[] mValueArray);
    public virtual IAsyncResult BeginInvoke(string eventName, MValueConst[] mValueArray, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ServerEventDelegate : MulticastDelegate {
    public ServerEventDelegate(object object, IntPtr method);
    public virtual void Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ServerEventEventDelegate : MulticastDelegate {
    public ServerEventEventDelegate(object object, IntPtr method);
    public virtual void Invoke(string eventName, Object[] args);
    public virtual IAsyncResult BeginInvoke(string eventName, Object[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.ServerStartedDelegate : MulticastDelegate {
    public ServerStartedDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.StartProjectileDelegate : MulticastDelegate {
    public StartProjectileDelegate(object object, IntPtr method);
    public virtual bool Invoke(IPlayer player, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash);
    public virtual IAsyncResult BeginInvoke(IPlayer player, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.StartSyncedSceneDelegate : MulticastDelegate {
    public StartSyncedSceneDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer source, int sceneId, Position position, Rotation rotation, UInt32 animDictHash, Dictionary`2<IEntity, UInt32> entityAndAnimHash);
    public virtual IAsyncResult BeginInvoke(IPlayer source, int sceneId, Position position, Rotation rotation, UInt32 animDictHash, Dictionary`2<IEntity, UInt32> entityAndAnimHash, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.StopSyncedSceneDelegate : MulticastDelegate {
    public StopSyncedSceneDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer source, int sceneId);
    public virtual IAsyncResult BeginInvoke(IPlayer source, int sceneId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.UpdateSyncedSceneDelegate : MulticastDelegate {
    public UpdateSyncedSceneDelegate(object object, IntPtr method);
    public virtual void Invoke(IPlayer source, float startRate, int sceneId);
    public virtual IAsyncResult BeginInvoke(IPlayer source, float startRate, int sceneId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleAttachDelegate : MulticastDelegate {
    public VehicleAttachDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle target, IVehicle attachedVehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IVehicle attachedVehicle, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleDamageDelegate : MulticastDelegate {
    public VehicleDamageDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle target, IEntity attacker, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IEntity attacker, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleDestroyDelegate : MulticastDelegate {
    public VehicleDestroyDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle vehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleDetachDelegate : MulticastDelegate {
    public VehicleDetachDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle target, IVehicle detachedVehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IVehicle detachedVehicle, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleHornDelegate : MulticastDelegate {
    public VehicleHornDelegate(object object, IntPtr method);
    public virtual bool Invoke(IVehicle target, IPlayer reporter, bool state);
    public virtual IAsyncResult BeginInvoke(IVehicle target, IPlayer reporter, bool state, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleRemoveDelegate : MulticastDelegate {
    public VehicleRemoveDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle vehicle);
    public virtual IAsyncResult BeginInvoke(IVehicle vehicle, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.VehicleSirenDelegate : MulticastDelegate {
    public VehicleSirenDelegate(object object, IntPtr method);
    public virtual void Invoke(IVehicle targetVehicle, bool state);
    public virtual IAsyncResult BeginInvoke(IVehicle targetVehicle, bool state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class AltV.Net.Events.WeaponDamageDelegate : MulticastDelegate {
    public WeaponDamageDelegate(object object, IntPtr method);
    public virtual WeaponDamageResponse Invoke(IPlayer player, IEntity target, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart);
    public virtual IAsyncResult BeginInvoke(IPlayer player, IEntity target, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart, AsyncCallback callback, object object);
    public virtual WeaponDamageResponse EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class AltV.Net.FunctionExtensions : object {
    [ExtensionAttribute]
public static object Call(Function function, IPlayer player, String[] values);
    [ExtensionAttribute]
public static object Call(Function function, IPlayer player, MValueConst[] values);
    [ExtensionAttribute]
internal static Object[] CalculateInvokeValues(Function function, IPlayer player, MValueConst[] values);
    [ExtensionAttribute]
internal static Object[] CalculateInvokeValues(Function function, IPlayer player, Object[] values);
    [ExtensionAttribute]
public static Object[] CalculateInvokeValues(Function function, IPlayer player, String[] values);
}
public class AltV.Net.FunctionParser.ClientEventParser`1 : MulticastDelegate {
    public ClientEventParser`1(object object, IntPtr method);
    public virtual void Invoke(IPlayer player, MValueConst[] mValueArray, TFunc func);
    public virtual IAsyncResult BeginInvoke(IPlayer player, MValueConst[] mValueArray, TFunc func, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface AltV.Net.FunctionParser.IParserClientEventHandler {
    public abstract virtual void Call(IPlayer player, MValueConst[] mValueArray);
}
internal class AltV.Net.FunctionParser.ParserClientEventHandler`1 : object {
    private TFunc delegate;
    private ClientEventParser`1<TFunc> clientEventParser;
    public ParserClientEventHandler`1(TFunc delegate, ClientEventParser`1<TFunc> clientEventParser);
    public sealed virtual void Call(IPlayer player, MValueConst[] mValueArray);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class AltV.Net.HostWrapper : object {
    private static Action`2<string, string> _startTracing;
    private static Action _stopTracing;
    private static ImportDelegate _import;
    private static Action`2<string, object> _export;
    private static Action`1<long> OnTraceSizeChange;
    internal static HashSet`1<Action`1<long>> OnTraceFileSizeChangeEventHandlers;
    private static HostWrapper();
    private static void OnTraceSizeChangeDelegate(long size);
    public static Action`1<long> GetTraceSizeChangeDelegate();
    public static void SetStartTracingDelegate(Action`2<string, string> startTracing);
    public static void SetStopTracingDelegate(Action stopTracing);
    public static void SetImportDelegate(Delegate import);
    public static void SetExportDelegate(Action`2<string, object> export);
    public static void StartTracing(string traceFileName, string traceFileFormatName);
    public static void StopTracing();
    public static bool Import(string resourceName, string key, Object& value);
    public static void Export(string key, object value);
}
public interface AltV.Net.IBaseObjectFactory`1 {
    public abstract virtual TBaseObject Create(ICore core, IntPtr baseObjectPointer, UInt32 id);
}
public interface AltV.Net.IBaseObjectPool`1 {
    public abstract virtual TBaseObject Create(ICore core, IntPtr entityPointer, UInt32 id);
    public abstract virtual void Add(TBaseObject entity);
    public abstract virtual bool Remove(TBaseObject entity);
    public abstract virtual bool Remove(IntPtr entityPointer);
    public abstract virtual TBaseObject GetOrCreate(ICore core, IntPtr entityPointer, UInt32 entityId);
    public abstract virtual TBaseObject GetOrCreate(ICore core, IntPtr entityPointer);
    public abstract virtual KeyValuePair`2[] GetObjectsArray();
    public abstract virtual void ForEach(IBaseObjectCallback`1<TBaseObject> baseObjectCallback);
    public abstract virtual Task ForEach(IAsyncBaseObjectCallback`1<TBaseObject> asyncBaseObjectCallback);
    public abstract virtual void Dispose();
}
public interface AltV.Net.ICore {
    public IPoolManager PoolManager { get; }
    public Dictionary`2<IntPtr, List`1<InternalPlayerSeat>> VehiclePassengers { get; }
    public INativeResourcePool NativeResourcePool { get; }
    public string RootDirectory { get; }
    public INativeResource Resource { get; }
    public ushort MaxStreamingPeds { get; public set; }
    public ushort MaxStreamingObjects { get; public set; }
    public ushort MaxStreamingVehicles { get; public set; }
    public byte StreamerThreadCount { get; public set; }
    public UInt32 StreamingTickRate { get; public set; }
    public UInt32 StreamingDistance { get; public set; }
    public UInt32 ColShapeTickRate { get; public set; }
    public UInt32 MigrationDistance { get; public set; }
    public byte MigrationThreadCount { get; public set; }
    public UInt32 MigrationTickRate { get; public set; }
    public byte SyncReceiveThreadCount { get; public set; }
    public byte SyncSendThreadCount { get; public set; }
    public UInt32[] LoadedVehicleModels { get; }
    public IEnumerable`1<Assembly> Assemblies { get; }
    public abstract virtual IPoolManager get_PoolManager();
    public abstract virtual Dictionary`2<IntPtr, List`1<InternalPlayerSeat>> get_VehiclePassengers();
    public abstract virtual INativeResourcePool get_NativeResourcePool();
    public abstract virtual string get_RootDirectory();
    public abstract virtual INativeResource get_Resource();
    public abstract virtual ulong HashPassword(string password);
    public abstract virtual void SetPassword(string password);
    public abstract virtual VehicleModelInfo GetVehicleModelInfo(UInt32 hash);
    public abstract virtual Nullable`1<PedModelInfo> GetPedModelInfo(UInt32 hash);
    public abstract virtual Nullable`1<WeaponModelInfo> GetWeaponModelInfo(UInt32 hash);
    public abstract virtual void StopServer();
    public abstract virtual void TriggerClientEvent(IPlayer player, IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual void TriggerClientEvent(IPlayer player, string eventName, MValueConst[] args);
    public abstract virtual void TriggerClientEvent(IPlayer player, IntPtr eventNamePtr, IntPtr[] args);
    public abstract virtual void TriggerClientEvent(IPlayer player, string eventName, IntPtr[] args);
    public abstract virtual void TriggerClientEvent(IPlayer player, IntPtr eventNamePtr, Object[] args);
    public abstract virtual void TriggerClientEvent(IPlayer player, string eventName, Object[] args);
    public abstract virtual void TriggerClientEventForAll(IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual void TriggerClientEventForAll(string eventName, MValueConst[] args);
    public abstract virtual void TriggerClientEventForAll(IntPtr eventNamePtr, IntPtr[] args);
    public abstract virtual void TriggerClientEventForAll(string eventName, IntPtr[] args);
    public abstract virtual void TriggerClientEventForAll(IntPtr eventNamePtr, Object[] args);
    public abstract virtual void TriggerClientEventForAll(string eventName, Object[] args);
    public abstract virtual void TriggerClientEventForSome(IPlayer[] clients, IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual void TriggerClientEventForSome(IPlayer[] clients, string eventName, MValueConst[] args);
    public abstract virtual void TriggerClientEventForSome(IPlayer[] clients, IntPtr eventNamePtr, IntPtr[] args);
    public abstract virtual void TriggerClientEventForSome(IPlayer[] clients, string eventName, IntPtr[] args);
    public abstract virtual void TriggerClientEventForSome(IPlayer[] clients, IntPtr eventNamePtr, Object[] args);
    public abstract virtual void TriggerClientEventForSome(IPlayer[] clients, string eventName, Object[] args);
    public abstract virtual void TriggerClientEventUnreliable(IPlayer player, IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual void TriggerClientEventUnreliable(IPlayer player, string eventName, MValueConst[] args);
    public abstract virtual void TriggerClientEventUnreliable(IPlayer player, IntPtr eventNamePtr, IntPtr[] args);
    public abstract virtual void TriggerClientEventUnreliable(IPlayer player, string eventName, IntPtr[] args);
    public abstract virtual void TriggerClientEventUnreliable(IPlayer player, IntPtr eventNamePtr, Object[] args);
    public abstract virtual void TriggerClientEventUnreliable(IPlayer player, string eventName, Object[] args);
    public abstract virtual void TriggerClientEventUnreliableForAll(IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual void TriggerClientEventUnreliableForAll(string eventName, MValueConst[] args);
    public abstract virtual void TriggerClientEventUnreliableForAll(IntPtr eventNamePtr, IntPtr[] args);
    public abstract virtual void TriggerClientEventUnreliableForAll(string eventName, IntPtr[] args);
    public abstract virtual void TriggerClientEventUnreliableForAll(IntPtr eventNamePtr, Object[] args);
    public abstract virtual void TriggerClientEventUnreliableForAll(string eventName, Object[] args);
    public abstract virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, string eventName, MValueConst[] args);
    public abstract virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, IntPtr eventNamePtr, IntPtr[] args);
    public abstract virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, string eventName, IntPtr[] args);
    public abstract virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, IntPtr eventNamePtr, Object[] args);
    public abstract virtual void TriggerClientEventUnreliableForSome(IPlayer[] clients, string eventName, Object[] args);
    public abstract virtual void TriggerClientRPCAnswer(IPlayer target, ushort answerId, object answer, string error);
    public abstract virtual void TriggerClientRPCAnswer(IPlayer player, ushort answerId, MValueConst answer, IntPtr errorPtr);
    public abstract virtual void TriggerClientRPCAnswer(IPlayer target, ushort answerId, MValueConst answer, string error);
    public abstract virtual ushort TriggerClientRPC(IPlayer target, string name, Object[] args);
    public abstract virtual ushort TriggerClientRPC(IPlayer target, string eventName, MValueConst[] args);
    public abstract virtual ushort TriggerClientRPC(IPlayer target, IntPtr eventNamePtr, MValueConst[] args);
    public abstract virtual IVehicle CreateVehicle(UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public abstract virtual IPed CreatePed(UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public abstract virtual ICheckpoint CreateCheckpoint(byte type, Position pos, float radius, float height, Rgba color, UInt32 streamingDistance);
    public abstract virtual IBlip CreateBlip(bool global, byte type, Position pos, IPlayer[] targets);
    public abstract virtual IBlip CreateBlip(bool global, byte type, IEntity entityAttach, IPlayer[] targets);
    public abstract virtual IVoiceChannel CreateVoiceChannel(bool spatial, float maxDistance);
    public abstract virtual IColShape CreateColShapeCylinder(Position pos, float radius, float height);
    public abstract virtual IColShape CreateColShapeSphere(Position pos, float radius);
    public abstract virtual IColShape CreateColShapeCircle(Position pos, float radius);
    public abstract virtual IColShape CreateColShapeCube(Position pos, Position pos2);
    public abstract virtual IColShape CreateColShapeRectangle(float x1, float y1, float x2, float y2, float z);
    public abstract virtual IColShape CreateColShapePolygon(float minZ, float maxZ, Vector2[] points);
    public abstract virtual INativeResource GetResource(string name);
    public abstract virtual INativeResource GetResource(IntPtr resourcePointer);
    public abstract virtual INativeResource[] GetAllResources();
    public abstract virtual IntPtr CreateVehicleEntity(UInt32& id, UInt32 model, Position pos, Rotation rotation, UInt32 streamingDistance);
    public abstract virtual IReadOnlyCollection`1<IPlayer> GetAllPlayers();
    public abstract virtual IReadOnlyCollection`1<IVehicle> GetAllVehicles();
    public abstract virtual IReadOnlyCollection`1<IBlip> GetAllBlips();
    public abstract virtual IReadOnlyCollection`1<ICheckpoint> GetAllCheckpoints();
    public abstract virtual IReadOnlyCollection`1<IVirtualEntity> GetAllVirtualEntities();
    public abstract virtual IReadOnlyCollection`1<IVirtualEntityGroup> GetAllVirtualEntityGroups();
    public abstract virtual IReadOnlyCollection`1<IPed> GetAllPeds();
    public abstract virtual IReadOnlyCollection`1<IObject> GetAllNetworkObjects();
    public abstract virtual IReadOnlyCollection`1<IColShape> GetAllColShapes();
    public abstract virtual IReadOnlyCollection`1<IMarker> GetAllMarkers();
    public abstract virtual IReadOnlyCollection`1<IConnectionInfo> GetAllConnectionInfos();
    public abstract virtual IReadOnlyCollection`1<IMetric> GetAllMetrics();
    public abstract virtual IBaseObject GetBaseObjectById(BaseObjectType type, UInt32 id);
    public abstract virtual void StartResource(string name);
    public abstract virtual void StopResource(string name);
    public abstract virtual void RestartResource(string name);
    public abstract virtual void SetSyncedMetaData(string key, object value);
    public abstract virtual void DeleteSyncedMetaData(string key);
    public abstract virtual bool FileExists(string path);
    public abstract virtual string FileRead(string path);
    public abstract virtual Byte[] FileReadBinary(string path);
    public abstract virtual IConfig GetServerConfig();
    public abstract virtual void SetWorldProfiler(bool state);
    public abstract virtual IEnumerable`1<string> GetRegisteredClientEvents();
    public abstract virtual IEnumerable`1<string> GetRegisteredServerEvents();
    public abstract virtual IBaseObject[] GetClosestEntities(Position position, int range, int dimension, int limit, EntityType allowedTypes, Order order);
    public abstract virtual IBaseObject[] GetEntitiesInDimension(int dimension, EntityType allowedTypes);
    public abstract virtual IBaseObject[] GetEntitiesInRange(Position position, int range, int dimension, EntityType allowedTypes);
    public abstract virtual IBaseObject GetBaseObject(BaseObjectType type, UInt32 id);
    public abstract virtual IMetric RegisterMetric(string name, MetricType type, Dictionary`2<string, string> dataDict);
    public abstract virtual void UnregisterMetric(IMetric metric);
    public abstract virtual IMarker CreateMarker(IPlayer player, MarkerType type, Position pos, Rgba color);
    public abstract virtual IObject CreateObject(UInt32 hash, Position position, Rotation rotation, byte alpha, byte textureVariation, ushort lodDistance, UInt32 streamingDistance);
    public abstract virtual IVirtualEntityGroup CreateVirtualEntityGroup(UInt32 streamingDistance);
    public abstract virtual IVirtualEntity CreateVirtualEntity(IVirtualEntityGroup group, Position position, UInt32 streamingDistance, Dictionary`2<string, object> dataDict);
    public abstract virtual void SetVoiceExternalPublic(string host, ushort port);
    public abstract virtual void SetVoiceExternal(string host, ushort port);
    public abstract virtual ushort get_MaxStreamingPeds();
    public abstract virtual void set_MaxStreamingPeds(ushort value);
    public abstract virtual ushort get_MaxStreamingObjects();
    public abstract virtual void set_MaxStreamingObjects(ushort value);
    public abstract virtual ushort get_MaxStreamingVehicles();
    public abstract virtual void set_MaxStreamingVehicles(ushort value);
    public abstract virtual byte get_StreamerThreadCount();
    public abstract virtual void set_StreamerThreadCount(byte value);
    public abstract virtual UInt32 get_StreamingTickRate();
    public abstract virtual void set_StreamingTickRate(UInt32 value);
    public abstract virtual UInt32 get_StreamingDistance();
    public abstract virtual void set_StreamingDistance(UInt32 value);
    public abstract virtual UInt32 get_ColShapeTickRate();
    public abstract virtual void set_ColShapeTickRate(UInt32 value);
    public abstract virtual UInt32 get_MigrationDistance();
    public abstract virtual void set_MigrationDistance(UInt32 value);
    public abstract virtual byte get_MigrationThreadCount();
    public abstract virtual void set_MigrationThreadCount(byte value);
    public abstract virtual UInt32 get_MigrationTickRate();
    public abstract virtual void set_MigrationTickRate(UInt32 value);
    public abstract virtual byte get_SyncReceiveThreadCount();
    public abstract virtual void set_SyncReceiveThreadCount(byte value);
    public abstract virtual byte get_SyncSendThreadCount();
    public abstract virtual void set_SyncSendThreadCount(byte value);
    public abstract virtual UInt32[] get_LoadedVehicleModels();
    public abstract virtual void AddClientConfigKey(string key);
    public abstract virtual bool HasBenefit(Benefit benefit);
    public abstract virtual Function OnClient(string clientEventName, Function create, bool isOnce);
    public abstract virtual Function OnServer(string clientEventName, Function create, bool isOnce);
    public abstract virtual void On(string eventName, TFunc func, ClientEventParser`1<TFunc> parser);
    public abstract virtual void Off(string eventName, TFunc func, ClientEventParser`1<TFunc> parser);
    public abstract virtual void On(string eventName, TFunc func, ServerEventParser`1<TFunc> parser);
    public abstract virtual void Off(string eventName, TFunc func, ServerEventParser`1<TFunc> parser);
    public abstract virtual IEnumerable`1<Assembly> get_Assemblies();
    public abstract virtual Assembly LoadAssemblyFromName(AssemblyName assemblyName);
    public abstract virtual Assembly LoadAssemblyFromStream(Stream stream);
    public abstract virtual Assembly LoadAssemblyFromStream(Stream stream, Stream assemblySymbols);
    public abstract virtual WeakReference`1<AssemblyLoadContext> GetAssemblyLoadContext();
    public abstract virtual Assembly LoadAssemblyFromPath(string path);
    public abstract virtual Assembly LoadAssemblyFromNativeImagePath(string nativeImagePath, string assemblyPath);
    public abstract virtual void SetExport(string key, Function function);
    public abstract virtual void OffServer(string eventName, Function function);
    public abstract virtual void OffClient(string eventName, Function function);
}
public interface AltV.Net.IEntityFactory`1 {
    public abstract virtual TEntity Create(ICore core, IntPtr entityPointer, UInt32 id);
}
public interface AltV.Net.IEntityPool`1 {
    public abstract virtual TEntity Create(ICore core, IntPtr entityPointer, UInt32 id);
    public abstract virtual TEntity Create(ICore core, IntPtr entityPointer);
    public abstract virtual void Add(TEntity entity);
    public abstract virtual bool Remove(TEntity entity);
    public abstract virtual bool Remove(IntPtr entityPointer);
    public abstract virtual TEntity GetOrCreate(ICore core, IntPtr entityPointer, UInt32 entityId);
    public abstract virtual TEntity GetOrCreate(ICore core, IntPtr entityPointer);
    public abstract virtual KeyValuePair`2[] GetEntitiesArray();
    public abstract virtual void ForEach(IBaseObjectCallback`1<TEntity> baseObjectCallback);
    public abstract virtual Task ForEach(IAsyncBaseObjectCallback`1<TEntity> asyncBaseObjectCallback);
    public abstract virtual void OnAdd(TEntity entity);
    public abstract virtual void OnRemove(TEntity entity);
    public abstract virtual void Dispose();
}
internal interface AltV.Net.IInternalCore {
    public abstract virtual void InitResource(INativeResource resource);
}
public interface AltV.Net.IModule {
    public abstract virtual void OnScriptsStarted(IScript[] scripts);
    public abstract virtual void OnStop();
}
public interface AltV.Net.INativeResource {
    public CSharpResourceImpl CSharpResourceImpl { get; }
    public string Path { get; }
    public string Main { get; }
    public abstract virtual CSharpResourceImpl get_CSharpResourceImpl();
    public abstract virtual string get_Path();
    public abstract virtual string get_Main();
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public interface AltV.Net.INativeResourceFactory {
    public abstract virtual INativeResource Create(ICore core, IntPtr resourcePointer);
}
public interface AltV.Net.INativeResourcePool {
    public abstract virtual bool GetOrCreate(ICore core, IntPtr resourcePointer, INativeResource& resource);
}
public class AltV.Net.InvalidImportException : Exception {
    internal InvalidImportException(string message);
}
public interface AltV.Net.IPoolManager {
    public IEntityPool`1<IPlayer> Player { get; }
    public IEntityPool`1<IVehicle> Vehicle { get; }
    public IEntityPool`1<IPed> Ped { get; }
    public IEntityPool`1<IObject> Object { get; }
    public IBaseObjectPool`1<IBlip> Blip { get; }
    public IBaseObjectPool`1<ICheckpoint> Checkpoint { get; }
    public IBaseObjectPool`1<IColShape> ColShape { get; }
    public IBaseObjectPool`1<IVirtualEntity> VirtualEntity { get; }
    public IBaseObjectPool`1<IVirtualEntityGroup> VirtualEntityGroup { get; }
    public IBaseObjectPool`1<IMarker> Marker { get; }
    public IBaseObjectPool`1<IVoiceChannel> VoiceChannel { get; }
    public IBaseObjectPool`1<IConnectionInfo> ConnectionInfo { get; }
    public abstract virtual IEntityPool`1<IPlayer> get_Player();
    public abstract virtual IEntityPool`1<IVehicle> get_Vehicle();
    public abstract virtual IEntityPool`1<IPed> get_Ped();
    public abstract virtual IEntityPool`1<IObject> get_Object();
    public abstract virtual IBaseObjectPool`1<IBlip> get_Blip();
    public abstract virtual IBaseObjectPool`1<ICheckpoint> get_Checkpoint();
    public abstract virtual IBaseObjectPool`1<IColShape> get_ColShape();
    public abstract virtual IBaseObjectPool`1<IVirtualEntity> get_VirtualEntity();
    public abstract virtual IBaseObjectPool`1<IVirtualEntityGroup> get_VirtualEntityGroup();
    public abstract virtual IBaseObjectPool`1<IMarker> get_Marker();
    public abstract virtual IBaseObjectPool`1<IVoiceChannel> get_VoiceChannel();
    public abstract virtual IBaseObjectPool`1<IConnectionInfo> get_ConnectionInfo();
    public abstract virtual IBaseObject GetOrCreate(ICore core, IntPtr entityPointer, BaseObjectType baseObjectType, UInt32 entityId);
    public abstract virtual IBaseObject GetOrCreate(ICore core, IntPtr entityPointer, BaseObjectType baseObjectType);
    public abstract virtual IBaseObject Get(IntPtr entityPointer, BaseObjectType baseObjectType);
    public abstract virtual void Add(IBaseObject baseObject);
    public abstract virtual bool Remove(IBaseObject baseObject);
    public abstract virtual bool Remove(IntPtr entityPointer, BaseObjectType baseObjectType);
}
public interface AltV.Net.IResource {
    public abstract virtual void OnStart(IntPtr serverPointer, IntPtr resourcePointer, string resourceName, string entryPoint);
    public abstract virtual void OnStart();
    public abstract virtual void OnStop();
    public abstract virtual void OnTick();
    public abstract virtual IPoolManager GetBaseBaseObjectPool(IEntityPool`1<IPlayer> playerPool, IEntityPool`1<IVehicle> vehiclePool, IEntityPool`1<IPed> pedPool, IEntityPool`1<IObject> networkObjectPool, IBaseObjectPool`1<IBlip> blipPool, IBaseObjectPool`1<ICheckpoint> checkpointPool, IBaseObjectPool`1<IVoiceChannel> voiceChannelPool, IBaseObjectPool`1<IColShape> colShapePool, IBaseObjectPool`1<IVirtualEntity> virtualEntityPool, IBaseObjectPool`1<IVirtualEntityGroup> virtualEntityGroupPool, IBaseObjectPool`1<IMarker> markerPool, IBaseObjectPool`1<IConnectionInfo> connectionInfoPool);
    public abstract virtual IEntityPool`1<IPlayer> GetPlayerPool(IEntityFactory`1<IPlayer> playerFactory);
    public abstract virtual IEntityPool`1<IVehicle> GetVehiclePool(IEntityFactory`1<IVehicle> vehicleFactory);
    public abstract virtual IEntityPool`1<IPed> GetPedPool(IEntityFactory`1<IPed> pedFactory);
    public abstract virtual IEntityPool`1<IObject> GetObjectPool(IEntityFactory`1<IObject> objectFactory);
    public abstract virtual IBaseObjectPool`1<IBlip> GetBlipPool(IBaseObjectFactory`1<IBlip> blipFactory);
    public abstract virtual IBaseObjectPool`1<ICheckpoint> GetCheckpointPool(IBaseObjectFactory`1<ICheckpoint> checkpointFactory);
    public abstract virtual IBaseObjectPool`1<IVoiceChannel> GetVoiceChannelPool(IBaseObjectFactory`1<IVoiceChannel> voiceChannelFactory);
    public abstract virtual IBaseObjectPool`1<IColShape> GetColShapePool(IBaseObjectFactory`1<IColShape> colShapeFactory);
    public abstract virtual INativeResourcePool GetNativeResourcePool(INativeResourceFactory nativeResourceFactory);
    public abstract virtual IBaseObjectPool`1<IVirtualEntity> GetVirtualEntityPool(IBaseObjectFactory`1<IVirtualEntity> virtualEntityFactory);
    public abstract virtual IBaseObjectPool`1<IVirtualEntityGroup> GetVirtualEntityGroupPool(IBaseObjectFactory`1<IVirtualEntityGroup> virtualEntityGroupFactory);
    public abstract virtual IBaseObjectPool`1<IMarker> GetMarkerPool(IBaseObjectFactory`1<IMarker> markerFactory);
    public abstract virtual IBaseObjectPool`1<IConnectionInfo> GetConnectionInfoPool(IBaseObjectFactory`1<IConnectionInfo> connectionInfoFactory);
    public abstract virtual IEntityFactory`1<IPlayer> GetPlayerFactory();
    public abstract virtual IEntityFactory`1<IVehicle> GetVehicleFactory();
    public abstract virtual IEntityFactory`1<IPed> GetPedFactory();
    public abstract virtual IEntityFactory`1<IObject> GetObjectFactory();
    public abstract virtual IBaseObjectFactory`1<IBlip> GetBlipFactory();
    public abstract virtual IBaseObjectFactory`1<ICheckpoint> GetCheckpointFactory();
    public abstract virtual IBaseObjectFactory`1<IVoiceChannel> GetVoiceChannelFactory();
    public abstract virtual IBaseObjectFactory`1<IColShape> GetColShapeFactory();
    public abstract virtual INativeResourceFactory GetNativeResourceFactory();
    public abstract virtual IBaseObjectFactory`1<IVirtualEntity> GetVirtualEntityFactory();
    public abstract virtual IBaseObjectFactory`1<IVirtualEntityGroup> GetVirtualEntityGroupFactory();
    public abstract virtual IBaseObjectFactory`1<IMarker> GetMarkerFactory();
    public abstract virtual IBaseObjectFactory`1<IConnectionInfo> GetConnectionInfoFactory();
    public abstract virtual ILibrary GetLibrary();
    public abstract virtual Core GetCore(IntPtr nativePointer, IntPtr resourcePointer, AssemblyLoadContext assemblyLoadContext, ILibrary library, IPoolManager poolManager, INativeResourcePool nativeResourcePool);
    public abstract virtual IScript[] GetScripts();
    public abstract virtual IModule[] GetModules();
}
internal static class AltV.Net.ModuleWrapper : object {
    private static Core _core;
    private static IResource _resource;
    private static IScript[] _scripts;
    private static IModule[] _modules;
    private static void OnStartResource(IntPtr serverPointer, IntPtr resourcePointer, string resourceName, string entryPoint);
    public static void MainWithAssembly(IntPtr serverPointer, IntPtr resourcePointer, AssemblyLoadContext assemblyLoadContext, Dictionary`2<ulong, IntPtr> cApiFuncTable);
    private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e);
    public static void OnStop();
    public static void OnTick();
    public static void OnCheckpoint(IntPtr checkpointPointer, IntPtr entityPointer, BaseObjectType baseObjectType, byte state);
    public static void OnPlayerConnect(IntPtr playerPointer, string reason);
    public static void OnResourceStart(IntPtr resourcePointer);
    public static void OnResourceStop(IntPtr resourcePointer);
    public static void OnResourceError(IntPtr resourcePointer);
    public static void OnPlayerDamage(IntPtr playerPointer, IntPtr attackerEntityPointer, BaseObjectType attackerBaseObjectType, UInt32 weapon, ushort healthDamage, ushort armourDamage);
    public static void OnPlayerDeath(IntPtr playerPointer, IntPtr killerEntityPointer, BaseObjectType killerBaseObjectType, UInt32 weapon);
    public static void OnPlayerHeal(IntPtr playerPointer, ushort oldHealth, ushort newHealth, ushort oldArmour, ushort newArmour);
    public static void OnExplosion(IntPtr eventPointer, IntPtr playerPointer, ExplosionType explosionType, Position position, UInt32 explosionFx, IntPtr targetEntityPointer, BaseObjectType targetEntityType);
    public static void OnWeaponDamage(IntPtr eventPointer, IntPtr playerPointer, IntPtr entityPointer, BaseObjectType entityType, UInt32 weapon, ushort damage, Position shotOffset, BodyPart bodyPart);
    public static void OnPlayerChangeVehicleSeat(IntPtr vehiclePointer, IntPtr playerPointer, byte oldSeat, byte newSeat);
    public static void OnPlayerEnterVehicle(IntPtr vehiclePointer, IntPtr playerPointer, byte seat);
    public static void OnPlayerEnteringVehicle(IntPtr vehiclePointer, IntPtr playerPointer, byte seat);
    public static void OnPlayerLeaveVehicle(IntPtr vehiclePointer, IntPtr playerPointer, byte seat);
    public static void OnPlayerDisconnect(IntPtr playerPointer, string reason);
    public static void OnClientEvent(IntPtr playerPointer, string name, IntPtr pointer, ulong size);
    public static void OnServerEvent(string name, IntPtr pointer, ulong size);
    public static void OnConsoleCommand(string name, String[] args, int argsSize);
    public static void OnMetaDataChange(IntPtr entityPointer, BaseObjectType entityType, string key, IntPtr value);
    public static void OnSyncedMetaDataChange(IntPtr entityPointer, BaseObjectType entityType, string key, IntPtr value);
    public static void OnColShape(IntPtr colShapePointer, IntPtr targetEntityPointer, BaseObjectType entityType, byte state);
    public static void OnVehicleDestroy(IntPtr vehiclePointer);
    public static void OnFire(IntPtr eventPointer, IntPtr playerPointer, FireInfo[] fires, int length);
    public static void OnStartProjectile(IntPtr eventPointer, IntPtr sourcePlayerPointer, Position startPosition, Position direction, UInt32 ammoHash, UInt32 weaponHash);
    public static void OnPlayerWeaponChange(IntPtr eventPointer, IntPtr targetPlayerPointer, UInt32 oldWeapon, UInt32 newWeapon);
    public static void OnNetOwnerChange(IntPtr eventPointer, IntPtr targetEntityPointer, BaseObjectType targetEntityType, IntPtr oldNetOwnerPointer, IntPtr newNetOwnerPointer);
    public static void OnVehicleAttach(IntPtr eventPointer, IntPtr targetPointer, IntPtr attachedPointer);
    public static void OnVehicleDetach(IntPtr eventPointer, IntPtr targetPointer, IntPtr detachedPointer);
    public static void OnVehicleDamage(IntPtr eventPointer, IntPtr vehiclePointer, IntPtr entityPointer, BaseObjectType entityType, UInt32 bodyHealthDamage, UInt32 additionalBodyHealthDamage, UInt32 engineHealthDamage, UInt32 petrolTankDamage, UInt32 weaponHash);
    public static void OnVehicleHorn(IntPtr eventPointer, IntPtr targetPointer, IntPtr reporterPointer, byte state);
    public static void OnConnectionQueueAdd(IntPtr connectionInfo);
    public static void OnConnectionQueueRemove(IntPtr connectionInfo);
    public static void OnServerStarted();
    public static void OnPlayerRequestControl(IntPtr eventPtr, IntPtr target, BaseObjectType targetType, IntPtr player);
    public static void OnPlayerChangeAnimation(IntPtr player, UInt32 oldDict, UInt32 newDict, UInt32 oldName, UInt32 newName);
    public static void OnPlayerChangeInterior(IntPtr player, UInt32 oldIntLoc, UInt32 newIntLoc);
    public static void OnPlayerDimensionChange(IntPtr player, int oldDimension, int newDimension);
    public static void OnPlayerConnectDenied(PlayerConnectDeniedReason reason, string name, string ip, ulong passwordHash, byte isDebug, string branch, ushort versionMajor, ushort versionMinor, string cdnUrl, long discordId);
    public static void OnVehicleSiren(IntPtr targetVehiclePointer, byte state);
    public static void OnPlayerSpawn(IntPtr playerPointer);
    public static void OnCreateBaseObject(IntPtr baseObject, BaseObjectType type, UInt32 id);
    public static void OnRemoveBaseObject(IntPtr baseObject, BaseObjectType type);
    public static void OnRequestSyncedScene(IntPtr eventPointer, IntPtr source, int sceneid);
    public static void OnStartSyncedScene(IntPtr source, int sceneid, Position position, Rotation rotation, UInt32 animDictHash, IntPtr[] entites, BaseObjectType[] types, UInt32[] animHashes, ulong size);
    public static void OnStopSyncedScene(IntPtr source, int sceneid);
    public static void OnUpdateSyncedScene(IntPtr source, float startRate, int sceneid);
    public static void OnClientRequestObject(IntPtr eventPointer, IntPtr source, UInt32 model, Position position);
    public static void OnClientDeleteObject(IntPtr eventPointer, IntPtr source);
    public static void OnGivePedScriptedTask(IntPtr eventPointer, IntPtr source, IntPtr target, UInt32 taskType);
    public static void OnPedDamage(IntPtr pedpointer, IntPtr attackerentitypointer, BaseObjectType attackerbaseobjecttype, UInt32 weapon, ushort healthdamage, ushort armourdamage);
    public static void OnPedDeath(IntPtr pedpointer, IntPtr killerentitypointer, BaseObjectType killerbaseobjecttype, UInt32 weapon);
    public static void OnPedHeal(IntPtr pedpointer, ushort oldhealth, ushort newhealth, ushort oldarmour, ushort newarmour);
    public static void OnPlayerStartTalking(IntPtr playerpointer);
    public static void OnPlayerStopTalking(IntPtr playerpointer);
    public static void OnScriptRPC(IntPtr eventpointer, IntPtr targetpointer, string name, IntPtr pointer, ulong size, ushort answerId);
    public static void OnScriptRPCAnswer(IntPtr targetpointer, ushort answerid, IntPtr answer, string answererror);
}
public class AltV.Net.NativeResource : SharedNativeResource {
    private CSharpResourceImpl cSharpResourceImpl;
    public CSharpResourceImpl CSharpResourceImpl { get; }
    public string Path { get; }
    public string Main { get; }
    internal NativeResource(ISharedCore core, IntPtr nativePointer);
    [PreserveBaseOverridesAttribute]
public virtual override CSharpResourceImpl get_CSharpResourceImpl();
    public sealed virtual string get_Path();
    public sealed virtual string get_Main();
    public sealed virtual void Start();
    public sealed virtual void Stop();
}
public abstract class AltV.Net.Resource : object {
    public abstract virtual void OnStart();
    public abstract virtual void OnStop();
    public virtual void OnTick();
    public sealed virtual void OnStart(IntPtr serverPointer, IntPtr resourcePointer, string resourceName, string entryPoint);
    public virtual IPoolManager GetBaseBaseObjectPool(IEntityPool`1<IPlayer> playerPool, IEntityPool`1<IVehicle> vehiclePool, IEntityPool`1<IPed> pedPool, IEntityPool`1<IObject> objectPool, IBaseObjectPool`1<IBlip> blipPool, IBaseObjectPool`1<ICheckpoint> checkpointPool, IBaseObjectPool`1<IVoiceChannel> voiceChannelPool, IBaseObjectPool`1<IColShape> colShapePool, IBaseObjectPool`1<IVirtualEntity> virtualEntityPool, IBaseObjectPool`1<IVirtualEntityGroup> virtualEntityGroupPool, IBaseObjectPool`1<IMarker> markerPool, IBaseObjectPool`1<IConnectionInfo> connectionInfoPool);
    public virtual IEntityPool`1<IPlayer> GetPlayerPool(IEntityFactory`1<IPlayer> playerFactory);
    public virtual IEntityPool`1<IVehicle> GetVehiclePool(IEntityFactory`1<IVehicle> vehicleFactory);
    public virtual IEntityPool`1<IPed> GetPedPool(IEntityFactory`1<IPed> pedFactory);
    public sealed virtual IEntityPool`1<IObject> GetObjectPool(IEntityFactory`1<IObject> networkObjectFactory);
    public virtual IBaseObjectPool`1<IBlip> GetBlipPool(IBaseObjectFactory`1<IBlip> blipFactory);
    public virtual IBaseObjectPool`1<ICheckpoint> GetCheckpointPool(IBaseObjectFactory`1<ICheckpoint> checkpointFactory);
    public virtual IBaseObjectPool`1<IVoiceChannel> GetVoiceChannelPool(IBaseObjectFactory`1<IVoiceChannel> voiceChannelFactory);
    public virtual IBaseObjectPool`1<IColShape> GetColShapePool(IBaseObjectFactory`1<IColShape> colShapeFactory);
    public virtual INativeResourcePool GetNativeResourcePool(INativeResourceFactory nativeResourceFactory);
    public virtual IBaseObjectPool`1<IVirtualEntity> GetVirtualEntityPool(IBaseObjectFactory`1<IVirtualEntity> virtualEntityFactory);
    public virtual IBaseObjectPool`1<IVirtualEntityGroup> GetVirtualEntityGroupPool(IBaseObjectFactory`1<IVirtualEntityGroup> virtualEntityGroupFactory);
    public virtual IBaseObjectPool`1<IMarker> GetMarkerPool(IBaseObjectFactory`1<IMarker> markerFactory);
    public sealed virtual IBaseObjectPool`1<IConnectionInfo> GetConnectionInfoPool(IBaseObjectFactory`1<IConnectionInfo> connectionInfoFactory);
    public virtual IEntityFactory`1<IPlayer> GetPlayerFactory();
    public virtual IEntityFactory`1<IVehicle> GetVehicleFactory();
    public virtual IEntityFactory`1<IPed> GetPedFactory();
    public virtual IEntityFactory`1<IObject> GetObjectFactory();
    public virtual IBaseObjectFactory`1<IBlip> GetBlipFactory();
    public virtual IBaseObjectFactory`1<ICheckpoint> GetCheckpointFactory();
    public virtual IBaseObjectFactory`1<IVoiceChannel> GetVoiceChannelFactory();
    public virtual IBaseObjectFactory`1<IColShape> GetColShapeFactory();
    public virtual INativeResourceFactory GetNativeResourceFactory();
    public virtual IBaseObjectFactory`1<IVirtualEntity> GetVirtualEntityFactory();
    public virtual IBaseObjectFactory`1<IVirtualEntityGroup> GetVirtualEntityGroupFactory();
    public virtual IBaseObjectFactory`1<IMarker> GetMarkerFactory();
    public virtual IBaseObjectFactory`1<IConnectionInfo> GetConnectionInfoFactory();
    public sealed virtual ILibrary GetLibrary();
    public virtual Core GetCore(IntPtr nativePointer, IntPtr resourcePointer, AssemblyLoadContext assemblyLoadContext, ILibrary library, IPoolManager poolManager, INativeResourcePool nativeResourcePool);
    public sealed virtual IScript[] GetScripts();
    public sealed virtual IModule[] GetModules();
}
public class AltV.Net.ResourceLoaders.AssemblyLoader : object {
    public static T[] FindAllTypes(IEnumerable`1<Assembly> assemblies);
    public static ValueTuple`2[] FindAllTypesWithAttribute(IEnumerable`1<Assembly> assemblies);
    public static bool FindType(IEnumerable`1<Assembly> assemblies, T& t);
}
[AttributeUsageAttribute("1")]
public class AltV.Net.ResourceSharedAssembliesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    private String[] Values { get; private set; }
    public ResourceSharedAssembliesAttribute(String[] values);
    [CompilerGeneratedAttribute]
private String[] get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(String[] value);
}
[AttributeUsageAttribute("64")]
public class AltV.Net.ScriptEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ScriptEventType <EventType>k__BackingField;
    public ScriptEventType EventType { get; }
    public ScriptEventAttribute(ScriptEventType eventType);
    [CompilerGeneratedAttribute]
public ScriptEventType get_EventType();
}
public enum AltV.Net.ScriptEventType : Enum {
    public int value__;
    public static ScriptEventType Checkpoint;
    public static ScriptEventType PlayerConnect;
    public static ScriptEventType PlayerDamage;
    public static ScriptEventType PlayerDead;
    public static ScriptEventType PlayerHeal;
    public static ScriptEventType PlayerDisconnect;
    public static ScriptEventType PlayerRemove;
    public static ScriptEventType VehicleRemove;
    public static ScriptEventType PedRemove;
    public static ScriptEventType PlayerChangeVehicleSeat;
    public static ScriptEventType PlayerEnterVehicle;
    public static ScriptEventType PlayerStartEnterVehicle;
    public static ScriptEventType PlayerEnteringVehicle;
    public static ScriptEventType PlayerLeaveVehicle;
    public static ScriptEventType PlayerStartLeaveVehicle;
    public static ScriptEventType PlayerEvent;
    public static ScriptEventType PlayerCustomEvent;
    public static ScriptEventType ServerEvent;
    public static ScriptEventType ServerCustomEvent;
    public static ScriptEventType ConsoleCommand;
    public static ScriptEventType MetaDataChange;
    public static ScriptEventType SyncedMetaDataChange;
    public static ScriptEventType ColShape;
    public static ScriptEventType WeaponDamage;
    public static ScriptEventType VehicleDestroy;
    public static ScriptEventType Explosion;
    public static ScriptEventType Fire;
    public static ScriptEventType StartProjectile;
    public static ScriptEventType PlayerWeaponChange;
    public static ScriptEventType NetOwnerChange;
    public static ScriptEventType VehicleAttach;
    public static ScriptEventType VehicleDetach;
    public static ScriptEventType VehicleDamage;
    public static ScriptEventType ConnectionQueueAdd;
    public static ScriptEventType ConnectionQueueRemove;
    public static ScriptEventType ServerStarted;
    public static ScriptEventType PlayerRequestControl;
    public static ScriptEventType PlayerChangeAnimation;
    public static ScriptEventType PlayerChangeInterior;
    public static ScriptEventType PlayerDimensionChange;
    public static ScriptEventType VehicleHorn;
    public static ScriptEventType VehicleSiren;
    public static ScriptEventType PlayerSpawn;
    public static ScriptEventType RequestSyncedScene;
    public static ScriptEventType BaseObjectCreate;
    public static ScriptEventType BaseObjectRemove;
}
[AttributeUsageAttribute("64")]
public class AltV.Net.ServerEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ServerEventAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum AltV.Net.TraceFileFormat : Enum {
    public int value__;
    public static TraceFileFormat NetTrace;
    public static TraceFileFormat Speedscope;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
