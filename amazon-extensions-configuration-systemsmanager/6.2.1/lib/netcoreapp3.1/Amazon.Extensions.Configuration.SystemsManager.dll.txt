public class Amazon.Extensions.Configuration.SystemsManager.AppConfig.AppConfigConfigurationSource : object {
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigProfileId>k__BackingField;
    [CompilerGeneratedAttribute]
private AWSOptions <AwsOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ReloadAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLambdaExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <CustomHttpClientForLambdaExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SystemsManagerExceptionContext> <OnLoadException>k__BackingField;
    public string ApplicationId { get; public set; }
    public string EnvironmentId { get; public set; }
    public string ConfigProfileId { get; public set; }
    public AWSOptions AwsOptions { get; public set; }
    public bool Optional { get; public set; }
    public Nullable`1<TimeSpan> ReloadAfter { get; public set; }
    internal bool UseLambdaExtension { get; internal set; }
    public HttpClient CustomHttpClientForLambdaExtension { get; public set; }
    public Action`1<SystemsManagerExceptionContext> OnLoadException { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
public void set_ApplicationId(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentId();
    [CompilerGeneratedAttribute]
public void set_EnvironmentId(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigProfileId();
    [CompilerGeneratedAttribute]
public void set_ConfigProfileId(string value);
    [CompilerGeneratedAttribute]
public AWSOptions get_AwsOptions();
    [CompilerGeneratedAttribute]
public void set_AwsOptions(AWSOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Optional();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Optional(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_ReloadAfter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReloadAfter(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal bool get_UseLambdaExtension();
    [CompilerGeneratedAttribute]
internal void set_UseLambdaExtension(bool value);
    [CompilerGeneratedAttribute]
public HttpClient get_CustomHttpClientForLambdaExtension();
    [CompilerGeneratedAttribute]
public void set_CustomHttpClientForLambdaExtension(HttpClient value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<SystemsManagerExceptionContext> get_OnLoadException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnLoadException(Action`1<SystemsManagerExceptionContext> value);
    public sealed virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
public class Amazon.Extensions.Configuration.SystemsManager.AppConfig.AppConfigProcessor : object {
    [CompilerGeneratedAttribute]
private AppConfigConfigurationSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <LastConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PollConfigurationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextAllowedPollTime>k__BackingField;
    private SemaphoreSlim _lastConfigLock;
    private static int _lastConfigLockTimeout;
    private Uri _lambdaExtensionUri;
    private HttpClient _lambdaExtensionClient;
    private IAmazonAppConfigData _appConfigDataClient;
    private AppConfigConfigurationSource Source { get; }
    private IDictionary`2<string, string> LastConfig { get; private set; }
    private string PollConfigurationToken { get; private set; }
    private DateTime NextAllowedPollTime { get; private set; }
    public AppConfigProcessor(AppConfigConfigurationSource source);
    [CompilerGeneratedAttribute]
private AppConfigConfigurationSource get_Source();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> get_LastConfig();
    [CompilerGeneratedAttribute]
private void set_LastConfig(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
private string get_PollConfigurationToken();
    [CompilerGeneratedAttribute]
private void set_PollConfigurationToken(string value);
    [CompilerGeneratedAttribute]
private DateTime get_NextAllowedPollTime();
    [CompilerGeneratedAttribute]
private void set_NextAllowedPollTime(DateTime value);
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.AppConfig.AppConfigProcessor/<GetDataAsync>d__21")]
public sealed virtual Task`1<IDictionary`2<string, string>> GetDataAsync();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.AppConfig.AppConfigProcessor/<GetDataFromLambdaExtensionAsync>d__22")]
private Task`1<IDictionary`2<string, string>> GetDataFromLambdaExtensionAsync();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.AppConfig.AppConfigProcessor/<GetDataFromServiceAsync>d__23")]
private Task`1<IDictionary`2<string, string>> GetDataFromServiceAsync();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.AppConfig.AppConfigProcessor/<GetInitialConfigurationTokenAsync>d__24")]
private Task`1<string> GetInitialConfigurationTokenAsync(IAmazonAppConfigData appConfigClient);
    private static IDictionary`2<string, string> ParseConfig(string contentType, Stream configuration);
}
[ExtensionAttribute]
public static class Amazon.Extensions.Configuration.SystemsManager.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static void WaitForSystemsManagerReloadToComplete(IConfiguration configuration, TimeSpan timeout);
}
public class Amazon.Extensions.Configuration.SystemsManager.DefaultParameterProcessor : object {
    public static string KeyDelimiter;
    private static DefaultParameterProcessor();
    public virtual bool IncludeParameter(Parameter parameter, string path);
    public virtual string GetKey(Parameter parameter, string path);
    public virtual string GetValue(Parameter parameter, string path);
    private IEnumerable`1<KeyValuePair`2<string, string>> ParseStringList(Parameter parameter, string path);
    public virtual IDictionary`2<string, string> ProcessParameters(IEnumerable`1<Parameter> parameters, string path);
}
public class Amazon.Extensions.Configuration.SystemsManager.DuplicateParameterException : ArgumentException {
    public DuplicateParameterException(string message);
    public DuplicateParameterException(string message, Exception innerException);
}
public static class Amazon.Extensions.Configuration.SystemsManager.Internal.AwsOptionsProvider : object {
    private static string AwsOptionsConfigurationKey;
    public static AWSOptions GetAwsOptions(IConfigurationBuilder builder);
}
[ExtensionAttribute]
public static class Amazon.Extensions.Configuration.SystemsManager.Internal.DictionaryExtensions : object {
    [ExtensionAttribute]
public static bool EquivalentTo(IDictionary`2<TKey, TValue> first, IDictionary`2<TKey, TValue> second);
    [ExtensionAttribute]
public static bool EquivalentTo(IDictionary`2<TKey, TValue> first, IDictionary`2<TKey, TValue> second, IEqualityComparer`1<TValue> valueComparer);
}
public interface Amazon.Extensions.Configuration.SystemsManager.Internal.ISystemsManagerProcessor {
    public abstract virtual Task`1<IDictionary`2<string, string>> GetDataAsync();
}
public class Amazon.Extensions.Configuration.SystemsManager.Internal.JsonConfigurationParser : object {
    private IDictionary`2<string, string> _data;
    private Stack`1<string> _context;
    private string _currentPath;
    public static IDictionary`2<string, string> Parse(Stream input);
    public static IDictionary`2<string, string> Parse(string input);
    private void VisitElement(JsonElement element);
    private void VisitArray(JsonElement array);
    private void VisitNull(JsonElement data);
    private void VisitPrimitive(JsonElement data);
    private void EnterContext(string context);
    private void ExitContext();
}
public static class Amazon.Extensions.Configuration.SystemsManager.Internal.ServiceClientAppender : object {
    private static string UserAgentHeader;
    private static string AssemblyVersion;
    private static string UserAgentSuffix;
    private static ServiceClientAppender();
    public static void ServiceClientBeforeRequestEvent(object sender, RequestEventArgs e);
}
public class Amazon.Extensions.Configuration.SystemsManager.Internal.SystemsManagerProcessor : object {
    private static string SecretsManagerPath;
    [CompilerGeneratedAttribute]
private SystemsManagerConfigurationSource <Source>k__BackingField;
    private SystemsManagerConfigurationSource Source { get; }
    public SystemsManagerProcessor(SystemsManagerConfigurationSource source);
    [CompilerGeneratedAttribute]
private SystemsManagerConfigurationSource get_Source();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.Internal.SystemsManagerProcessor/<GetDataAsync>d__5")]
public sealed virtual Task`1<IDictionary`2<string, string>> GetDataAsync();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.Internal.SystemsManagerProcessor/<GetParametersByPathAsync>d__6")]
private Task`1<IDictionary`2<string, string>> GetParametersByPathAsync();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.Internal.SystemsManagerProcessor/<GetParameterAsync>d__7")]
private Task`1<IDictionary`2<string, string>> GetParameterAsync();
    public static bool IsSecretsManagerPath(string path);
    public static IDictionary`2<string, string> AddPrefix(IDictionary`2<string, string> input, string prefix);
}
public interface Amazon.Extensions.Configuration.SystemsManager.IParameterProcessor {
    public abstract virtual IDictionary`2<string, string> ProcessParameters(IEnumerable`1<Parameter> parameters, string path);
}
public interface Amazon.Extensions.Configuration.SystemsManager.ISystemsManagerConfigurationSource {
    public bool Optional { get; public set; }
    public Nullable`1<TimeSpan> ReloadAfter { get; public set; }
    public Action`1<SystemsManagerExceptionContext> OnLoadException { get; public set; }
    public abstract virtual bool get_Optional();
    public abstract virtual void set_Optional(bool value);
    public abstract virtual Nullable`1<TimeSpan> get_ReloadAfter();
    public abstract virtual void set_ReloadAfter(Nullable`1<TimeSpan> value);
    public abstract virtual Action`1<SystemsManagerExceptionContext> get_OnLoadException();
    public abstract virtual void set_OnLoadException(Action`1<SystemsManagerExceptionContext> value);
}
public class Amazon.Extensions.Configuration.SystemsManager.JsonParameterProcessor : DefaultParameterProcessor {
    public virtual IDictionary`2<string, string> ProcessParameters(IEnumerable`1<Parameter> parameters, string path);
}
public class Amazon.Extensions.Configuration.SystemsManager.SystemsManagerConfigurationProvider : ConfigurationProvider {
    [CompilerGeneratedAttribute]
private ISystemsManagerConfigurationSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemsManagerProcessor <SystemsManagerProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <ReloadTaskEvent>k__BackingField;
    private ISystemsManagerConfigurationSource Source { get; }
    private ISystemsManagerProcessor SystemsManagerProcessor { get; }
    private ManualResetEvent ReloadTaskEvent { get; }
    public SystemsManagerConfigurationProvider(SystemsManagerConfigurationSource source);
    public SystemsManagerConfigurationProvider(AppConfigConfigurationSource source);
    public SystemsManagerConfigurationProvider(ISystemsManagerConfigurationSource source, ISystemsManagerProcessor systemsManagerProcessor);
    [CompilerGeneratedAttribute]
private ISystemsManagerConfigurationSource get_Source();
    [CompilerGeneratedAttribute]
private ISystemsManagerProcessor get_SystemsManagerProcessor();
    [CompilerGeneratedAttribute]
private ManualResetEvent get_ReloadTaskEvent();
    public void WaitForReloadToComplete(TimeSpan timeout);
    public virtual void Load();
    [AsyncStateMachineAttribute("Amazon.Extensions.Configuration.SystemsManager.SystemsManagerConfigurationProvider/<LoadAsync>d__14")]
private Task LoadAsync(bool reload);
}
public class Amazon.Extensions.Configuration.SystemsManager.SystemsManagerConfigurationSource : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private AWSOptions <AwsOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ReloadAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SystemsManagerExceptionContext> <OnLoadException>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterProcessor <ParameterProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ParameterStringFilter> <Filters>k__BackingField;
    public string Path { get; public set; }
    public AWSOptions AwsOptions { get; public set; }
    public bool Optional { get; public set; }
    public Nullable`1<TimeSpan> ReloadAfter { get; public set; }
    public string Prefix { get; public set; }
    public Action`1<SystemsManagerExceptionContext> OnLoadException { get; public set; }
    public IParameterProcessor ParameterProcessor { get; public set; }
    public List`1<ParameterStringFilter> Filters { get; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public AWSOptions get_AwsOptions();
    [CompilerGeneratedAttribute]
public void set_AwsOptions(AWSOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Optional();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Optional(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_ReloadAfter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReloadAfter(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<SystemsManagerExceptionContext> get_OnLoadException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnLoadException(Action`1<SystemsManagerExceptionContext> value);
    [CompilerGeneratedAttribute]
public IParameterProcessor get_ParameterProcessor();
    [CompilerGeneratedAttribute]
public void set_ParameterProcessor(IParameterProcessor value);
    [CompilerGeneratedAttribute]
public List`1<ParameterStringFilter> get_Filters();
    public sealed virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
public class Amazon.Extensions.Configuration.SystemsManager.SystemsManagerExceptionContext : object {
    [CompilerGeneratedAttribute]
private IConfigurationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reload>k__BackingField;
    public IConfigurationProvider Provider { get; public set; }
    public Exception Exception { get; public set; }
    public bool Ignore { get; public set; }
    public bool Reload { get; public set; }
    [CompilerGeneratedAttribute]
public IConfigurationProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(IConfigurationProvider value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reload();
    [CompilerGeneratedAttribute]
public void set_Reload(bool value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.AppConfigExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, AWSOptions awsOptions, bool optional, Nullable`1<TimeSpan> reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, AWSOptions awsOptions, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, AWSOptions awsOptions, Nullable`1<TimeSpan> reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, AWSOptions awsOptions);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, bool optional, Nullable`1<TimeSpan> reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, Nullable`1<TimeSpan> reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfig(IConfigurationBuilder builder, AppConfigConfigurationSource source);
    private static AppConfigConfigurationSource ConfigureSource(string applicationId, string environmentId, string configProfileId, AWSOptions awsOptions, bool optional, Nullable`1<TimeSpan> reloadAfter);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.AppConfigForLambdaExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfigUsingLambdaExtension(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfigUsingLambdaExtension(IConfigurationBuilder builder, string applicationId, string environmentId, string configProfileId);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAppConfigUsingLambdaExtension(IConfigurationBuilder builder, AppConfigConfigurationSource source);
    private static AppConfigConfigurationSource ConfigureSource(string applicationId, string environmentId, string configProfileId, bool optional);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.SystemsManagerExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, AWSOptions awsOptions, bool optional, TimeSpan reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, AWSOptions awsOptions, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, AWSOptions awsOptions, TimeSpan reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, AWSOptions awsOptions);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, bool optional, TimeSpan reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path, TimeSpan reloadAfter);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, string path);
    [ExtensionAttribute]
public static IConfigurationBuilder AddSystemsManager(IConfigurationBuilder builder, Action`1<SystemsManagerConfigurationSource> configureSource);
    private static Action`1<SystemsManagerConfigurationSource> ConfigureSource(string path, AWSOptions awsOptions, bool optional, Nullable`1<TimeSpan> reloadAfter);
}
