public abstract class Amazon.Lambda.AspNetCoreServer.AbstractAspNetCoreFunction : object {
    public static string LAMBDA_CONTEXT;
    public static string LAMBDA_REQUEST_OBJECT;
}
public abstract class Amazon.Lambda.AspNetCoreServer.AbstractAspNetCoreFunction`2 : AbstractAspNetCoreFunction {
    private protected IServiceProvider _hostServices;
    private protected LambdaServer _server;
    private protected ILogger _logger;
    private protected StartupMode _startupMode;
    private Dictionary`2<string, ResponseContentEncoding> _responseContentEncodingForContentType;
    private Dictionary`2<string, ResponseContentEncoding> _responseContentEncodingForContentEncoding;
    [CompilerGeneratedAttribute]
private ResponseContentEncoding <DefaultResponseContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeUnhandledExceptionDetailInResponse>k__BackingField;
    public ResponseContentEncoding DefaultResponseContentEncoding { get; public set; }
    public bool IncludeUnhandledExceptionDetailInResponse { get; public set; }
    private protected bool IsStarted { get; }
    protected AbstractAspNetCoreFunction`2(StartupMode startupMode);
    protected AbstractAspNetCoreFunction`2(IServiceProvider hostedServices);
    [CompilerGeneratedAttribute]
public ResponseContentEncoding get_DefaultResponseContentEncoding();
    [CompilerGeneratedAttribute]
public void set_DefaultResponseContentEncoding(ResponseContentEncoding value);
    public void RegisterResponseContentEncodingForContentType(string contentType, ResponseContentEncoding encoding);
    public void RegisterResponseContentEncodingForContentEncoding(string contentEncoding, ResponseContentEncoding encoding);
    [CompilerGeneratedAttribute]
public bool get_IncludeUnhandledExceptionDetailInResponse();
    [CompilerGeneratedAttribute]
public void set_IncludeUnhandledExceptionDetailInResponse(bool value);
    protected virtual void Init(IWebHostBuilder builder);
    protected virtual void Init(IHostBuilder builder);
    protected virtual IHostBuilder CreateHostBuilder();
    private protected bool get_IsStarted();
    protected void Start();
    protected object CreateContext(IFeatureCollection features);
    public ResponseContentEncoding GetResponseContentEncodingForContentType(string contentType);
    public ResponseContentEncoding GetResponseContentEncodingForContentEncoding(string contentEncoding);
    protected string ErrorReport(Exception e);
    [AsyncStateMachineAttribute("Amazon.Lambda.AspNetCoreServer.AbstractAspNetCoreFunction`2/<FunctionHandlerAsync>d__29")]
[LambdaSerializerAttribute("Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer")]
public virtual Task`1<TRESPONSE> FunctionHandlerAsync(TREQUEST request, ILambdaContext lambdaContext);
    [AsyncStateMachineAttribute("Amazon.Lambda.AspNetCoreServer.AbstractAspNetCoreFunction`2/<ProcessRequest>d__30")]
protected Task`1<TRESPONSE> ProcessRequest(ILambdaContext lambdaContext, object context, InvokeFeatures features, bool rethrowUnhandledError);
    private protected virtual void InternalCustomResponseExceptionHandling(TRESPONSE lambdaReponse, ILambdaContext lambdaContext, Exception ex);
    protected virtual void PostCreateWebHost(IWebHost webHost);
    protected virtual void PostCreateHost(IHost webHost);
    protected virtual void PostMarshallItemsFeatureFeature(IItemsFeature aspNetCoreItemFeature, TREQUEST lambdaRequest, ILambdaContext lambdaContext);
    protected virtual void PostMarshallHttpAuthenticationFeature(IHttpAuthenticationFeature aspNetCoreHttpAuthenticationFeature, TREQUEST lambdaRequest, ILambdaContext lambdaContext);
    protected virtual void PostMarshallRequestFeature(IHttpRequestFeature aspNetCoreRequestFeature, TREQUEST lambdaRequest, ILambdaContext lambdaContext);
    protected virtual void PostMarshallConnectionFeature(IHttpConnectionFeature aspNetCoreConnectionFeature, TREQUEST lambdaRequest, ILambdaContext lambdaContext);
    protected virtual void PostMarshallTlsConnectionFeature(ITlsConnectionFeature aspNetCoreConnectionFeature, TREQUEST lambdaRequest, ILambdaContext lambdaContext);
    protected virtual void PostMarshallResponseFeature(IHttpResponseFeature aspNetCoreResponseFeature, TRESPONSE lambdaResponse, ILambdaContext lambdaContext);
    protected abstract virtual void MarshallRequest(InvokeFeatures features, TREQUEST lambdaRequest, ILambdaContext lambdaContext);
    protected abstract virtual TRESPONSE MarshallResponse(IHttpResponseFeature responseFeatures, ILambdaContext lambdaContext, int statusCodeIfNotSet);
    [CompilerGeneratedAttribute]
private void <CreateHostBuilder>b__21_0(IWebHostBuilder webBuilder);
}
public abstract class Amazon.Lambda.AspNetCoreServer.APIGatewayHttpApiV2ProxyFunction : AbstractAspNetCoreFunction`2<APIGatewayHttpApiV2ProxyRequest, APIGatewayHttpApiV2ProxyResponse> {
    protected APIGatewayHttpApiV2ProxyFunction(StartupMode startupMode);
    protected APIGatewayHttpApiV2ProxyFunction(IServiceProvider hostedServices);
    private protected virtual void InternalCustomResponseExceptionHandling(APIGatewayHttpApiV2ProxyResponse apiGatewayResponse, ILambdaContext lambdaContext, Exception ex);
    protected virtual void MarshallRequest(InvokeFeatures features, APIGatewayHttpApiV2ProxyRequest apiGatewayRequest, ILambdaContext lambdaContext);
    protected virtual APIGatewayHttpApiV2ProxyResponse MarshallResponse(IHttpResponseFeature responseFeatures, ILambdaContext lambdaContext, int statusCodeIfNotSet);
}
public abstract class Amazon.Lambda.AspNetCoreServer.APIGatewayHttpApiV2ProxyFunction`1 : APIGatewayHttpApiV2ProxyFunction {
    protected APIGatewayHttpApiV2ProxyFunction`1(StartupMode startupMode);
    protected virtual void Init(IWebHostBuilder builder);
}
public abstract class Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction : AbstractAspNetCoreFunction`2<APIGatewayProxyRequest, APIGatewayProxyResponse> {
    [ObsoleteAttribute("References should be updated to Amazon.Lambda.AspNetCoreServer.AbstractAspNetCoreFunction.LAMBDA_CONTEXT")]
public static string LAMBDA_CONTEXT;
    [ObsoleteAttribute("References should be updated to Amazon.Lambda.AspNetCoreServer.AbstractAspNetCoreFunction.LAMBDA_REQUEST_OBJECT")]
public static string APIGATEWAY_REQUEST;
    [ObsoleteAttribute("Calls to the constructor should be replaced with the constructor that takes a Amazon.Lambda.AspNetCoreServer.StartupMode as the parameter.")]
protected APIGatewayProxyFunction(AspNetCoreStartupMode startupMode);
    protected APIGatewayProxyFunction(StartupMode startupMode);
    protected APIGatewayProxyFunction(IServiceProvider hostedServices);
    private protected virtual void InternalCustomResponseExceptionHandling(APIGatewayProxyResponse apiGatewayResponse, ILambdaContext lambdaContext, Exception ex);
    protected virtual void MarshallRequest(InvokeFeatures features, APIGatewayProxyRequest apiGatewayRequest, ILambdaContext lambdaContext);
    protected virtual APIGatewayProxyResponse MarshallResponse(IHttpResponseFeature responseFeatures, ILambdaContext lambdaContext, int statusCodeIfNotSet);
}
public abstract class Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction`1 : APIGatewayProxyFunction {
    protected APIGatewayProxyFunction`1(StartupMode startupMode);
    protected virtual void Init(IWebHostBuilder builder);
}
public abstract class Amazon.Lambda.AspNetCoreServer.ApplicationLoadBalancerFunction : AbstractAspNetCoreFunction`2<ApplicationLoadBalancerRequest, ApplicationLoadBalancerResponse> {
    private bool _multiHeaderValuesEnabled;
    protected ApplicationLoadBalancerFunction(StartupMode startupMode);
    protected ApplicationLoadBalancerFunction(IServiceProvider hostedServices);
    protected virtual void MarshallRequest(InvokeFeatures features, ApplicationLoadBalancerRequest lambdaRequest, ILambdaContext lambdaContext);
    protected virtual ApplicationLoadBalancerResponse MarshallResponse(IHttpResponseFeature responseFeatures, ILambdaContext lambdaContext, int statusCodeIfNotSet);
    private protected virtual void InternalCustomResponseExceptionHandling(ApplicationLoadBalancerResponse lambdaResponse, ILambdaContext lambdaContext, Exception ex);
    private string GetSingleHeaderValue(ApplicationLoadBalancerRequest request, string headerName);
}
public abstract class Amazon.Lambda.AspNetCoreServer.ApplicationLoadBalancerFunction`1 : ApplicationLoadBalancerFunction {
    protected ApplicationLoadBalancerFunction`1(StartupMode startupMode);
    protected virtual void Init(IWebHostBuilder builder);
}
[DefaultMemberAttribute("Item")]
public class Amazon.Lambda.AspNetCoreServer.Internal.InvokeFeatures : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _containerRevision;
    private IDictionary`2<Type, object> _features;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Microsoft.AspNetCore.Http.Features.IItemsFeature.Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.RawTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Body>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.ReasonPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.HasStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Body>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallbacks <ResponseStartingEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallbacks <ResponseCompletedEvents>k__BackingField;
    private PipeWriter _pipeWriter;
    [CompilerGeneratedAttribute]
private string <Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.RequestServices>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    private string _traceIdentifier;
    [CompilerGeneratedAttribute]
private Activity <Microsoft.AspNetCore.Http.Features.IHttpActivityFeature.Activity>k__BackingField;
    public bool IsReadOnly { get; }
    public int Revision { get; }
    public object Item { get; public set; }
    private IDictionary`2<object, object> Microsoft.AspNetCore.Http.Features.IItemsFeature.Items { get; private set; }
    private ClaimsPrincipal Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.User { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Protocol { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Scheme { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Method { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.PathBase { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Path { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.QueryString { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.RawTarget { get; private set; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Headers { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Body { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.StatusCode { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.ReasonPhrase { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.HasStarted { get; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Headers { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Body { get; private set; }
    internal EventCallbacks ResponseStartingEvents { get; private set; }
    internal EventCallbacks ResponseCompletedEvents { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.Stream { get; }
    private PipeWriter Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.Writer { get; }
    private string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId { get; private set; }
    private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress { get; private set; }
    private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort { get; private set; }
    private IServiceProvider Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.RequestServices { get; private set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.TraceIdentifier { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature.CanHaveBody { get; }
    private Activity Microsoft.AspNetCore.Http.Features.IHttpActivityFeature.Activity { get; private set; }
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Revision();
    public sealed virtual object get_Item(Type key);
    public sealed virtual void set_Item(Type key, object value);
    public sealed virtual TFeature Get();
    public sealed virtual IEnumerator`1<KeyValuePair`2<Type, object>> GetEnumerator();
    public sealed virtual void Set(TFeature instance);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Http.Features.IItemsFeature.get_Items();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IItemsFeature.set_Items(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
private sealed virtual override ClaimsPrincipal Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.get_User();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Protocol();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Protocol(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Scheme();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Scheme(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Method();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Method(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_PathBase();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_PathBase(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Path();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Path(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_QueryString();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_QueryString(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_RawTarget();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_RawTarget(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Headers();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Body();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Body(Stream value);
    [CompilerGeneratedAttribute]
private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_StatusCode();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_StatusCode(int value);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_ReasonPhrase();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_HasStarted();
    [CompilerGeneratedAttribute]
private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Headers();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Body();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Body(Stream value);
    [CompilerGeneratedAttribute]
internal EventCallbacks get_ResponseStartingEvents();
    [CompilerGeneratedAttribute]
private void set_ResponseStartingEvents(EventCallbacks value);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnStarting(Func`2<object, Task> callback, object state);
    [CompilerGeneratedAttribute]
internal EventCallbacks get_ResponseCompletedEvents();
    [CompilerGeneratedAttribute]
private void set_ResponseCompletedEvents(EventCallbacks value);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnCompleted(Func`2<object, Task> callback, object state);
    private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.get_Stream();
    private sealed virtual override PipeWriter Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.get_Writer();
    private sealed virtual override Task Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.CompleteAsync();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.DisableBuffering();
    [AsyncStateMachineAttribute("Amazon.Lambda.AspNetCoreServer.Internal.InvokeFeatures/<Microsoft-AspNetCore-Http-Features-IHttpResponseBodyFeature-SendFileAsync>d__95")]
private sealed virtual override Task Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.SendFileAsync(string filePath, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.StartAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_ConnectionId();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemoteIpAddress();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemoteIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalIpAddress();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemotePort();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemotePort(int value);
    [CompilerGeneratedAttribute]
private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalPort();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalPort(int value);
    [CompilerGeneratedAttribute]
private sealed virtual override IServiceProvider Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.get_RequestServices();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.set_RequestServices(IServiceProvider value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.get_TraceIdentifier();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.set_TraceIdentifier(string value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature.get_CanHaveBody();
    [CompilerGeneratedAttribute]
private sealed virtual override Activity Microsoft.AspNetCore.Http.Features.IHttpActivityFeature.get_Activity();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpActivityFeature.set_Activity(Activity value);
}
internal class Amazon.Lambda.AspNetCoreServer.Internal.ItemsDictionary : object {
    private IDictionary`2<object, object> _items;
    public IDictionary`2<object, object> Items { get; }
    private object System.Collections.Generic.IDictionary<System.Object,System.Object>.Item { get; private set; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly { get; }
    public ItemsDictionary(IDictionary`2<object, object> items);
    public IDictionary`2<object, object> get_Items();
    private sealed virtual override object System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Item(object key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Object,System.Object>.set_Item(object key, object value);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(object key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(object key);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(object key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(object key, Object& value);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(KeyValuePair`2<object, object> item);
    private void EnsureDictionary();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<object, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Amazon.Lambda.AspNetCoreServer.Internal.LambdaServer : object {
    [CompilerGeneratedAttribute]
private ApplicationWrapper <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    public ApplicationWrapper Application { get; public set; }
    public IFeatureCollection Features { get; }
    [CompilerGeneratedAttribute]
public ApplicationWrapper get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(ApplicationWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_Features();
    public sealed virtual void Dispose();
    public virtual Task StartAsync(IHttpApplication`1<TContext> application, CancellationToken cancellationToken);
    public virtual Task StopAsync(CancellationToken cancellationToken);
}
public static class Amazon.Lambda.AspNetCoreServer.Internal.Utilities : object {
    public static void EnsureLambdaServerRegistered(IServiceCollection services);
    public static void EnsureLambdaServerRegistered(IServiceCollection services, Type serverType);
    internal static Stream ConvertLambdaRequestBodyToAspNetCoreBody(string body, bool isBase64Encoded);
    internal static ValueTuple`2<string, bool> ConvertAspNetCoreBodyToLambdaBody(Stream aspNetCoreBody, ResponseContentEncoding rcEncoding);
    public static string CreateQueryStringParametersFromHttpApiV2(string queryString);
    internal static string CreateQueryStringParameters(IDictionary`2<string, string> singleValues, IDictionary`2<string, IList`1<string>> multiValues, bool urlEncodeValue);
    internal static void SetHeadersCollection(IHeaderDictionary headers, IDictionary`2<string, string> singleValues, IDictionary`2<string, IList`1<string>> multiValues);
    [AsyncStateMachineAttribute("Amazon.Lambda.AspNetCoreServer.Internal.Utilities/<CopyToAsync>d__7")]
internal static Task CopyToAsync(Stream source, Stream destination, Nullable`1<long> count, int bufferSize, CancellationToken cancel);
    internal static string DecodeResourcePath(string resourcePath);
    internal static X509Certificate2 GetX509Certificate2FromPem(string clientCertPem);
}
public enum Amazon.Lambda.AspNetCoreServer.ResponseContentEncoding : Enum {
    public int value__;
    public static ResponseContentEncoding Default;
    public static ResponseContentEncoding Base64;
}
public enum Amazon.Lambda.AspNetCoreServer.StartupMode : Enum {
    public int value__;
    public static StartupMode Constructor;
    public static StartupMode FirstRequest;
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Calls should be replaced with UseLambdaServer")]
public static IWebHostBuilder UseApiGateway(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseLambdaServer(IWebHostBuilder hostBuilder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebHostLambdaDefaults(IHostBuilder builder, Action`1<IWebHostBuilder> configure);
}
