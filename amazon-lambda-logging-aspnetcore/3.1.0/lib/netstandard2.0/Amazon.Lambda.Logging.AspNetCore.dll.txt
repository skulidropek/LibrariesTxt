internal class Amazon.Lambda.Logging.AspNetCore.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.IConfigurationExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static LambdaLoggerOptions GetLambdaLoggerOptions(IConfiguration configuration);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static LambdaLoggerOptions GetLambdaLoggerOptions(IConfiguration configuration, string loggingSectionName);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ILoggerBuilderExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggingBuilder AddLambdaLogger(ILoggingBuilder builder);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggingBuilder AddLambdaLogger(ILoggingBuilder builder, LambdaLoggerOptions options);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggingBuilder AddLambdaLogger(ILoggingBuilder builder, IConfiguration configuration, string loggingSectionName);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ILoggerFactoryExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggerFactory AddLambdaLogger(ILoggerFactory factory);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggerFactory AddLambdaLogger(ILoggerFactory factory, LambdaLoggerOptions options);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggerFactory AddLambdaLogger(ILoggerFactory factory, IConfiguration configuration);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ILoggerFactory AddLambdaLogger(ILoggerFactory factory, IConfiguration configuration, string loggingSectionName);
}
internal class Microsoft.Extensions.Logging.LambdaILogger : object {
    private string _categoryName;
    private LambdaLoggerOptions _options;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ScopeProvider>k__BackingField;
    internal IExternalScopeProvider ScopeProvider { get; internal set; }
    public LambdaILogger(string categoryName, LambdaLoggerOptions options);
    [CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ScopeProvider();
    [CompilerGeneratedAttribute]
internal void set_ScopeProvider(IExternalScopeProvider value);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private void GetScopeInformation(List`1<string> logMessageComponents);
}
internal class Microsoft.Extensions.Logging.LambdaILoggerProvider : object {
    private LambdaLoggerOptions _options;
    private IExternalScopeProvider _scopeProvider;
    private ConcurrentDictionary`2<string, LambdaILogger> _loggers;
    private static string DEFAULT_CATEGORY_NAME;
    public LambdaILoggerProvider(LambdaLoggerOptions options);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.LambdaLoggerOptions : object {
    internal static string DEFAULT_SECTION_NAME;
    private static string INCLUDE_LOG_LEVEL_KEY;
    private static string INCLUDE_CATEGORY_KEY;
    private static string INCLUDE_NEWLINE_KEY;
    private static string INCLUDE_EXCEPTION_KEY;
    private static string INCLUDE_EVENT_ID_KEY;
    private static string INCLUDE_SCOPES_KEY;
    private static string LOG_LEVEL_KEY;
    private static string DEFAULT_CATEGORY;
    [CompilerGeneratedAttribute]
private bool <IncludeLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeNewline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, LogLevel, bool> <Filter>k__BackingField;
    public bool IncludeLogLevel { get; public set; }
    public bool IncludeCategory { get; public set; }
    public bool IncludeNewline { get; public set; }
    public bool IncludeException { get; public set; }
    public bool IncludeEventId { get; public set; }
    public bool IncludeScopes { get; public set; }
    [CLSCompliantAttribute("False")]
public Func`3<string, LogLevel, bool> Filter { get; public set; }
    [CLSCompliantAttribute("False")]
public LambdaLoggerOptions(IConfiguration configuration);
    [CLSCompliantAttribute("False")]
public LambdaLoggerOptions(IConfiguration configuration, string loggingSectionName);
    [CompilerGeneratedAttribute]
public bool get_IncludeLogLevel();
    [CompilerGeneratedAttribute]
public void set_IncludeLogLevel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCategory();
    [CompilerGeneratedAttribute]
public void set_IncludeCategory(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeNewline();
    [CompilerGeneratedAttribute]
public void set_IncludeNewline(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeException();
    [CompilerGeneratedAttribute]
public void set_IncludeException(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeEventId();
    [CompilerGeneratedAttribute]
public void set_IncludeEventId(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public Func`3<string, LogLevel, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`3<string, LogLevel, bool> value);
    private static bool TryGetString(IConfiguration configuration, string key, String& value);
    private static bool TryGetSection(IConfiguration configuration, string key, IConfiguration& value);
    private static Func`3<string, LogLevel, bool> CreateFilter(IConfiguration logLevelsSection);
}
