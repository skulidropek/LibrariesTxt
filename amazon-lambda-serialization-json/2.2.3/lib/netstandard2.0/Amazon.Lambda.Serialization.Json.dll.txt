internal class Amazon.Lambda.Serialization.Json.AwsResolver : DefaultContractResolver {
    private JsonToMemoryStreamDataConverter jsonToMemoryStreamDataConverter;
    private JsonNumberToDateTimeDataConverter jsonNumberToDateTimeDataConverter;
    private JsonToMemoryStreamListDataConverter jsonToMemoryStreamListDataConverter;
    private JsonToMemoryStreamDataConverter StreamDataConverter { get; }
    private JsonToMemoryStreamListDataConverter StreamListDataConverter { get; }
    private JsonNumberToDateTimeDataConverter DateTimeConverter { get; }
    private JsonToMemoryStreamDataConverter get_StreamDataConverter();
    private JsonToMemoryStreamListDataConverter get_StreamListDataConverter();
    private JsonNumberToDateTimeDataConverter get_DateTimeConverter();
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
}
internal static class Amazon.Lambda.Serialization.Json.Common : object {
    public static MemoryStream Base64ToMemoryStream(string dataBase64);
}
public class Amazon.Lambda.Serialization.Json.JsonIncludeNullValueSerializer : JsonSerializer {
    private static Action`1<JsonSerializerSettings> CreateCustomizer();
}
internal class Amazon.Lambda.Serialization.Json.JsonNumberToDateTimeDataConverter : JsonConverter {
    private static long YEAR_5000_IN_SECONDS;
    private static TypeInfo DATETIME_TYPEINFO;
    private static DateTime EPOCH_DATETIME;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    private static JsonNumberToDateTimeDataConverter();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Amazon.Lambda.Serialization.Json.JsonSerializer : object {
    private static string DEBUG_ENVIRONMENT_VARIABLE_NAME;
    private JsonSerializer serializer;
    private bool debug;
    public JsonSerializer(Action`1<JsonSerializerSettings> customizeSerializerSettings);
    public JsonSerializer(Action`1<JsonSerializerSettings> customizeSerializerSettings, NamingStrategy namingStrategy);
    public JsonSerializer(IEnumerable`1<JsonConverter> converters);
    public sealed virtual void Serialize(T response, Stream responseStream);
    public sealed virtual T Deserialize(Stream requestStream);
}
public class Amazon.Lambda.Serialization.Json.JsonSerializerException : Exception {
    public JsonSerializerException(string message);
    public JsonSerializerException(string message, Exception exception);
}
internal class Amazon.Lambda.Serialization.Json.JsonToMemoryStreamDataConverter : JsonConverter {
    private static TypeInfo MEMORYSTREAM_TYPEINFO;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    private static JsonToMemoryStreamDataConverter();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Amazon.Lambda.Serialization.Json.JsonToMemoryStreamListDataConverter : JsonConverter {
    private static TypeInfo MEMORYSTREAM_LIST_TYPEINFO;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    private static JsonToMemoryStreamListDataConverter();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
