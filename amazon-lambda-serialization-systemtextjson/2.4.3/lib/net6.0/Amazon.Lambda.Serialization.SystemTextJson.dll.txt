public abstract class Amazon.Lambda.Serialization.SystemTextJson.AbstractLambdaJsonSerializer : object {
    private static string DEBUG_ENVIRONMENT_VARIABLE_NAME;
    private bool _debug;
    [CompilerGeneratedAttribute]
private JsonWriterOptions <WriterOptions>k__BackingField;
    protected JsonWriterOptions WriterOptions { get; }
    protected AbstractLambdaJsonSerializer(Action`1<JsonWriterOptions> jsonWriterCustomizer);
    [CompilerGeneratedAttribute]
protected JsonWriterOptions get_WriterOptions();
    public sealed virtual void Serialize(T response, Stream responseStream);
    public sealed virtual T Deserialize(Stream requestStream);
    protected virtual JsonSerializerOptions CreateDefaultJsonSerializationOptions();
    protected abstract virtual void InternalSerialize(Utf8JsonWriter writer, T response);
    protected abstract virtual T InternalDeserialize(Byte[] utf8Json);
}
public class Amazon.Lambda.Serialization.SystemTextJson.AwsNamingPolicy : JsonNamingPolicy {
    private IDictionary`2<string, string> _customNameMappings;
    private JsonNamingPolicy _fallbackNamingPolicy;
    public AwsNamingPolicy(JsonNamingPolicy fallbackNamingPolicy);
    public virtual string ConvertName(string name);
}
public class Amazon.Lambda.Serialization.SystemTextJson.CamelCaseLambdaJsonSerializer : DefaultLambdaJsonSerializer {
    private static void ConfigureJsonSerializerOptions(JsonSerializerOptions options);
}
public class Amazon.Lambda.Serialization.SystemTextJson.Converters.ByteArrayConverter : JsonConverter`1<Byte[]> {
    public virtual Byte[] Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Byte[] values, JsonSerializerOptions options);
}
public class Amazon.Lambda.Serialization.SystemTextJson.Converters.ConstantClassConverter : JsonConverter`1<object> {
    private static string CONSTANT_CLASS_NAME;
    private static HashSet`1<string> ConstantClassNames;
    private static ConstantClassConverter();
    public virtual bool CanConvert(Type typeToConvert);
    public virtual object Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options);
}
public class Amazon.Lambda.Serialization.SystemTextJson.Converters.DateTimeConverter : JsonConverter`1<DateTime> {
    private static long YEAR_5000_IN_SECONDS;
    public virtual DateTime Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options);
}
public class Amazon.Lambda.Serialization.SystemTextJson.Converters.MemoryStreamConverter : JsonConverter`1<MemoryStream> {
    public virtual MemoryStream Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, MemoryStream value, JsonSerializerOptions options);
}
public class Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer : AbstractLambdaJsonSerializer {
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <SerializerOptions>k__BackingField;
    protected JsonSerializerOptions SerializerOptions { get; }
    public DefaultLambdaJsonSerializer(Action`1<JsonSerializerOptions> customizer);
    public DefaultLambdaJsonSerializer(Action`1<JsonSerializerOptions> customizer, Action`1<JsonWriterOptions> jsonWriterCustomizer);
    [CompilerGeneratedAttribute]
protected JsonSerializerOptions get_SerializerOptions();
    protected virtual void InternalSerialize(Utf8JsonWriter writer, T response);
    protected virtual T InternalDeserialize(Byte[] utf8Json);
}
public class Amazon.Lambda.Serialization.SystemTextJson.JsonSerializerException : Exception {
    public JsonSerializerException(string message);
    public JsonSerializerException(string message, Exception exception);
}
[ObsoleteAttribute("This serializer is obsolete because it uses inconsistent name casing when serializing to JSON. Lambda functions should use the DefaultLambdaJsonSerializer type.")]
public class Amazon.Lambda.Serialization.SystemTextJson.LambdaJsonSerializer : object {
    private static string DEBUG_ENVIRONMENT_VARIABLE_NAME;
    private JsonSerializerOptions _options;
    private JsonWriterOptions WriterOptions;
    private bool _debug;
    public LambdaJsonSerializer(Action`1<JsonSerializerOptions> customizer);
    public LambdaJsonSerializer(Action`1<JsonSerializerOptions> customizer, Action`1<JsonWriterOptions> jsonWriterCustomizer);
    public sealed virtual void Serialize(T response, Stream responseStream);
    public sealed virtual T Deserialize(Stream requestStream);
}
public class Amazon.Lambda.Serialization.SystemTextJson.SourceGeneratorLambdaJsonSerializer`1 : AbstractLambdaJsonSerializer {
    private TSGContext _jsonSerializerContext;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <SerializerOptions>k__BackingField;
    protected JsonSerializerOptions SerializerOptions { get; }
    public SourceGeneratorLambdaJsonSerializer`1(Action`1<JsonSerializerOptions> customizer);
    public SourceGeneratorLambdaJsonSerializer`1(Action`1<JsonWriterOptions> jsonWriterCustomizer);
    public SourceGeneratorLambdaJsonSerializer`1(Action`1<JsonSerializerOptions> customizer, Action`1<JsonWriterOptions> jsonWriterCustomizer);
    [ObsoleteAttribute("The method is marked obsolete because the jsonSerializerContext parameter is unlikely to be created with the required JsonSerializerOptions for Lambda serialization. This will trigger confusing NullReferenceException. The constructors that don't take an instance of jsonSerializerContext can be used for Native AOT because the reflection calls have been annotated to make them Native AOT compatible.")]
public SourceGeneratorLambdaJsonSerializer`1(TSGContext jsonSerializerContext, Action`1<JsonSerializerOptions> customizer, Action`1<JsonWriterOptions> jsonWriterCustomizer);
    [CompilerGeneratedAttribute]
protected JsonSerializerOptions get_SerializerOptions();
    protected virtual void InternalSerialize(Utf8JsonWriter writer, T response);
    protected virtual T InternalDeserialize(Byte[] utf8Json);
}
