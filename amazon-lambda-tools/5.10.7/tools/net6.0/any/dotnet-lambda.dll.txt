public class Amazon.Lambda.Tools.Commands.DeleteFunctionCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> DeleteCommandOptions;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    public string FunctionName { get; public set; }
    public DeleteFunctionCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static DeleteFunctionCommand();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeleteFunctionCommand/<PerformActionAsync>d__10")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.DeleteLayerVersionCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> CommandOptions;
    [CompilerGeneratedAttribute]
private string <LayerVersionArn>k__BackingField;
    public string LayerVersionArn { get; public set; }
    public DeleteLayerVersionCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static DeleteLayerVersionCommand();
    [CompilerGeneratedAttribute]
public string get_LayerVersionArn();
    [CompilerGeneratedAttribute]
public void set_LayerVersionArn(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeleteLayerVersionCommand/<PerformActionAsync>d__10")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.DeleteServerlessCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> DeleteCommandOptions;
    [CompilerGeneratedAttribute]
private string <StackName>k__BackingField;
    public string StackName { get; public set; }
    public DeleteServerlessCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static DeleteServerlessCommand();
    [CompilerGeneratedAttribute]
public string get_StackName();
    [CompilerGeneratedAttribute]
public void set_StackName(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeleteServerlessCommand/<PerformActionAsync>d__10")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.DeployFunctionCommand : UpdateFunctionConfigCommand {
    public static string COMMAND_DEPLOY_NAME;
    public static string COMMAND_DEPLOY_DESCRIPTION;
    public static string COMMAND_DEPLOY_ARGUMENTS;
    public static IList`1<CommandOption> DeployCommandOptions;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ResolveS3>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableVersionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerBuildOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerBuildWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerImageTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostBuildOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDockerImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseContainerForBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerImageForBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeMountDirectory>k__BackingField;
    public string Architecture { get; public set; }
    public string Configuration { get; public set; }
    public string TargetFramework { get; public set; }
    public string Package { get; public set; }
    public string MSBuildParameters { get; public set; }
    public Nullable`1<bool> ResolveS3 { get; public set; }
    public string S3Bucket { get; public set; }
    public string S3Prefix { get; public set; }
    public Nullable`1<bool> DisableVersionCheck { get; public set; }
    public string DockerFile { get; public set; }
    public string DockerBuildOptions { get; public set; }
    public string DockerBuildWorkingDirectory { get; public set; }
    public string DockerImageTag { get; public set; }
    public string HostBuildOutput { get; public set; }
    public string LocalDockerImage { get; public set; }
    public Nullable`1<bool> UseContainerForBuild { get; public set; }
    public string ContainerImageForBuild { get; public set; }
    public string CodeMountDirectory { get; public set; }
    public DeployFunctionCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static DeployFunctionCommand();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildParameters();
    [CompilerGeneratedAttribute]
public void set_MSBuildParameters(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ResolveS3();
    [CompilerGeneratedAttribute]
public void set_ResolveS3(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_S3Bucket();
    [CompilerGeneratedAttribute]
public void set_S3Bucket(string value);
    [CompilerGeneratedAttribute]
public string get_S3Prefix();
    [CompilerGeneratedAttribute]
public void set_S3Prefix(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableVersionCheck();
    [CompilerGeneratedAttribute]
public void set_DisableVersionCheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DockerFile();
    [CompilerGeneratedAttribute]
public void set_DockerFile(string value);
    [CompilerGeneratedAttribute]
public string get_DockerBuildOptions();
    [CompilerGeneratedAttribute]
public void set_DockerBuildOptions(string value);
    [CompilerGeneratedAttribute]
public string get_DockerBuildWorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_DockerBuildWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DockerImageTag();
    [CompilerGeneratedAttribute]
public void set_DockerImageTag(string value);
    [CompilerGeneratedAttribute]
public string get_HostBuildOutput();
    [CompilerGeneratedAttribute]
public void set_HostBuildOutput(string value);
    [CompilerGeneratedAttribute]
public string get_LocalDockerImage();
    [CompilerGeneratedAttribute]
public void set_LocalDockerImage(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseContainerForBuild();
    [CompilerGeneratedAttribute]
public void set_UseContainerForBuild(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ContainerImageForBuild();
    [CompilerGeneratedAttribute]
public void set_ContainerImageForBuild(string value);
    [CompilerGeneratedAttribute]
public string get_CodeMountDirectory();
    [CompilerGeneratedAttribute]
public void set_CodeMountDirectory(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployFunctionCommand/<PerformActionAsync>d__78")]
protected virtual Task`1<bool> PerformActionAsync();
    private PackageType DeterminePackageType();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployFunctionCommand/<PushLambdaImageAsync>d__80")]
private Task`1<PushLambdaImageResult> PushLambdaImageAsync();
    private void ValidateTargetFrameworkAndLambdaRuntime(string targetFramework);
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.DeployServerlessCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    private static string IN_PROGRESS_SUFFIX;
    public static IList`1<CommandOption> DeployServerlessCommandOptions;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ResolveS3>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudFormationTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WaitForStackToComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StackPollingDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudFormationRole>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TemplateParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TemplateSubstitutions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableVersionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DisabledCapabilities>k__BackingField;
    public string Configuration { get; public set; }
    public string TargetFramework { get; public set; }
    public string Package { get; public set; }
    public string MSBuildParameters { get; public set; }
    public Nullable`1<bool> ResolveS3 { get; public set; }
    public string S3Bucket { get; public set; }
    public string S3Prefix { get; public set; }
    public string CloudFormationTemplate { get; public set; }
    public string StackName { get; public set; }
    public Nullable`1<bool> WaitForStackToComplete { get; public set; }
    public TimeSpan StackPollingDelay { get; public set; }
    public string CloudFormationRole { get; public set; }
    public Dictionary`2<string, string> TemplateParameters { get; public set; }
    public Dictionary`2<string, string> TemplateSubstitutions { get; public set; }
    public Dictionary`2<string, string> Tags { get; public set; }
    public Nullable`1<bool> DisableVersionCheck { get; public set; }
    public String[] DisabledCapabilities { get; public set; }
    public DeployServerlessCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static DeployServerlessCommand();
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildParameters();
    [CompilerGeneratedAttribute]
public void set_MSBuildParameters(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ResolveS3();
    [CompilerGeneratedAttribute]
public void set_ResolveS3(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_S3Bucket();
    [CompilerGeneratedAttribute]
public void set_S3Bucket(string value);
    [CompilerGeneratedAttribute]
public string get_S3Prefix();
    [CompilerGeneratedAttribute]
public void set_S3Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_CloudFormationTemplate();
    [CompilerGeneratedAttribute]
public void set_CloudFormationTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_StackName();
    [CompilerGeneratedAttribute]
public void set_StackName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitForStackToComplete();
    [CompilerGeneratedAttribute]
public void set_WaitForStackToComplete(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StackPollingDelay();
    [CompilerGeneratedAttribute]
public void set_StackPollingDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_CloudFormationRole();
    [CompilerGeneratedAttribute]
public void set_CloudFormationRole(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TemplateParameters();
    [CompilerGeneratedAttribute]
public void set_TemplateParameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TemplateSubstitutions();
    [CompilerGeneratedAttribute]
public void set_TemplateSubstitutions(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableVersionCheck();
    [CompilerGeneratedAttribute]
public void set_DisableVersionCheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_DisabledCapabilities();
    [CompilerGeneratedAttribute]
public void set_DisabledCapabilities(String[] value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<PerformActionAsync>d__75")]
protected virtual Task`1<bool> PerformActionAsync();
    private void DisplayOutputs(Stack stack);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<WaitStackToCompleteAsync>d__77")]
private Task`1<Stack> WaitStackToCompleteAsync(string stackName, DateTime mintimeStampForEvents);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<GetLatestEventsAsync>d__78")]
private Task`1<List`1<StackEvent>> GetLatestEventsAsync(string stackName, DateTime mintimeStampForEvents, string mostRecentEventId);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<DeleteRollbackCompleteStackAsync>d__79")]
private Task DeleteRollbackCompleteStackAsync(Stack stack);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<WaitForNoLongerInProgress>d__80")]
private Task`1<Stack> WaitForNoLongerInProgress(string stackName);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<WaitForChangeSetBeingAvailableAsync>d__81")]
private Task WaitForChangeSetBeingAvailableAsync(string changeSetId);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<GetExistingStackAsync>d__82")]
public Task`1<Stack> GetExistingStackAsync(string stackName);
    private List`1<Parameter> GetTemplateParameters(Stack stack, List`1<Tuple`2<string, bool>> definedParameters);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.DeployServerlessCommand/<DetermineS3Bucket>d__84")]
private Task`1<string> DetermineS3Bucket();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.GetFunctionConfigCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> GetConfigCommandOptions;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    public string FunctionName { get; public set; }
    public GetFunctionConfigCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static GetFunctionConfigCommand();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.GetFunctionConfigCommand/<PerformActionAsync>d__10")]
protected virtual Task`1<bool> PerformActionAsync();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.GetFunctionConfigCommand/<GetFunctionUrlConfigAsync>d__11")]
private Task`1<GetFunctionUrlConfigResponse> GetFunctionUrlConfigAsync(string functionName);
    private static string FormatAsJsonStringArray(IList`1<string> items);
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.GetLayerVersionDetailsCommand : LambdaBaseCommand {
    private static int PAD_SIZE;
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> CommandOptions;
    [CompilerGeneratedAttribute]
private string <LayerVersionArn>k__BackingField;
    public string LayerVersionArn { get; public set; }
    public GetLayerVersionDetailsCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static GetLayerVersionDetailsCommand();
    [CompilerGeneratedAttribute]
public string get_LayerVersionArn();
    [CompilerGeneratedAttribute]
public void set_LayerVersionArn(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.GetLayerVersionDetailsCommand/<PerformActionAsync>d__11")]
protected virtual Task`1<bool> PerformActionAsync();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.GetLayerVersionDetailsCommand/<GetRuntimePackageManifest>d__12")]
private Task GetRuntimePackageManifest(LayerDescriptionManifest manifest);
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.InvokeFunctionCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> InvokeCommandOptions;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public string FunctionName { get; public set; }
    public string Payload { get; public set; }
    public InvokeFunctionCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static InvokeFunctionCommand();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.InvokeFunctionCommand/<PerformActionAsync>d__14")]
protected virtual Task`1<bool> PerformActionAsync();
    private void PrintPayload(InvokeResponse response);
    protected virtual void SaveConfigFile(JsonData data);
}
public abstract class Amazon.Lambda.Tools.Commands.LambdaBaseCommand : BaseCommand`1<LambdaToolsDefaults> {
    private IAmazonLambda _lambdaClient;
    private IAmazonCloudFormation _cloudFormationClient;
    protected string ToolName { get; }
    public IAmazonLambda LambdaClient { get; public set; }
    public IAmazonCloudFormation CloudFormationClient { get; public set; }
    public LambdaBaseCommand(IToolLogger logger, string workingDirectory);
    public LambdaBaseCommand(IToolLogger logger, string workingDirectory, IList`1<CommandOption> possibleOptions, String[] args);
    protected virtual string get_ToolName();
    public IAmazonLambda get_LambdaClient();
    public void set_LambdaClient(IAmazonLambda value);
    public IAmazonCloudFormation get_CloudFormationClient();
    public void set_CloudFormationClient(IAmazonCloudFormation value);
}
public class Amazon.Lambda.Tools.Commands.ListFunctionCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static IList`1<CommandOption> ListCommandOptions;
    public ListFunctionCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static ListFunctionCommand();
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.ListFunctionCommand/<PerformActionAsync>d__5")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.ListLayersCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    private static int TIMESTAMP_WIDTH;
    private static int LAYER_NAME_WIDTH;
    private static int LAYER_ARN_WIDTH;
    private static int LAYER_COMPATIBLE_RUNTIMES_WIDTH;
    private static int LAYER_DESCRIPTION_WIDTH;
    public static IList`1<CommandOption> ListCommandOptions;
    public ListLayersCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static ListLayersCommand();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.ListLayersCommand/<PerformActionAsync>d__9")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.ListLayerVersionsCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    private static int TIMESTAMP_WIDTH;
    private static int LAYER_ARN_WIDTH;
    private static int LAYER_COMPATIBLE_RUNTIMES_WIDTH;
    private static int LAYER_DESCRIPTION_WIDTH;
    public static IList`1<CommandOption> ListCommandOptions;
    [CompilerGeneratedAttribute]
private string <LayerName>k__BackingField;
    public string LayerName { get; public set; }
    public ListLayerVersionsCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static ListLayerVersionsCommand();
    [CompilerGeneratedAttribute]
public string get_LayerName();
    [CompilerGeneratedAttribute]
public void set_LayerName(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.ListLayerVersionsCommand/<PerformActionAsync>d__14")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.ListServerlessCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static IList`1<CommandOption> ListCommandOptions;
    public ListServerlessCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static ListServerlessCommand();
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.ListServerlessCommand/<PerformActionAsync>d__5")]
protected virtual Task`1<bool> PerformActionAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.PackageCICommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_SYNOPSIS;
    public static string COMMAND_DESCRIPTION;
    public static IList`1<CommandOption> PackageCICommandOptions;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ResolveS3>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudFormationTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TemplateSubstitutions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableVersionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudFormationOutputTemplate>k__BackingField;
    public string Configuration { get; public set; }
    public string TargetFramework { get; public set; }
    public string MSBuildParameters { get; public set; }
    public Nullable`1<bool> ResolveS3 { get; public set; }
    public string S3Bucket { get; public set; }
    public string S3Prefix { get; public set; }
    public string CloudFormationTemplate { get; public set; }
    public Dictionary`2<string, string> TemplateSubstitutions { get; public set; }
    public Nullable`1<bool> DisableVersionCheck { get; public set; }
    public string CloudFormationOutputTemplate { get; public set; }
    public PackageCICommand(IToolLogger logger, string workingDirectory, String[] args);
    private static PackageCICommand();
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildParameters();
    [CompilerGeneratedAttribute]
public void set_MSBuildParameters(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ResolveS3();
    [CompilerGeneratedAttribute]
public void set_ResolveS3(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_S3Bucket();
    [CompilerGeneratedAttribute]
public void set_S3Bucket(string value);
    [CompilerGeneratedAttribute]
public string get_S3Prefix();
    [CompilerGeneratedAttribute]
public void set_S3Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_CloudFormationTemplate();
    [CompilerGeneratedAttribute]
public void set_CloudFormationTemplate(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TemplateSubstitutions();
    [CompilerGeneratedAttribute]
public void set_TemplateSubstitutions(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableVersionCheck();
    [CompilerGeneratedAttribute]
public void set_DisableVersionCheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_CloudFormationOutputTemplate();
    [CompilerGeneratedAttribute]
public void set_CloudFormationOutputTemplate(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PackageCICommand/<PerformActionAsync>d__46")]
protected virtual Task`1<bool> PerformActionAsync();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PackageCICommand/<DetermineS3Bucket>d__47")]
private Task`1<string> DetermineS3Bucket();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.PackageCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> PackageCommandOptions;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPackageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LayerVersionArns>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableVersionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerBuildOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerBuildWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerImageTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostBuildOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseContainerForBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerImageForBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeMountDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRegionAndCredentialsCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewDotnetSharedStoreValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public string Architecture { get; public set; }
    public string Configuration { get; public set; }
    public string TargetFramework { get; public set; }
    public string OutputPackageFileName { get; public set; }
    public string MSBuildParameters { get; public set; }
    public String[] LayerVersionArns { get; public set; }
    public Nullable`1<bool> DisableVersionCheck { get; public set; }
    public string PackageType { get; public set; }
    public string DockerFile { get; public set; }
    public string DockerBuildOptions { get; public set; }
    public string DockerBuildWorkingDirectory { get; public set; }
    public string DockerImageTag { get; public set; }
    public string HostBuildOutput { get; public set; }
    public Nullable`1<bool> UseContainerForBuild { get; public set; }
    public string ContainerImageForBuild { get; public set; }
    public string CodeMountDirectory { get; private set; }
    public bool DisableRegionAndCredentialsCheck { get; public set; }
    public string NewDotnetSharedStoreValue { get; private set; }
    public string Payload { get; public set; }
    public PackageCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static PackageCommand();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPackageFileName();
    [CompilerGeneratedAttribute]
public void set_OutputPackageFileName(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildParameters();
    [CompilerGeneratedAttribute]
public void set_MSBuildParameters(string value);
    [CompilerGeneratedAttribute]
public String[] get_LayerVersionArns();
    [CompilerGeneratedAttribute]
public void set_LayerVersionArns(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableVersionCheck();
    [CompilerGeneratedAttribute]
public void set_DisableVersionCheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_PackageType();
    [CompilerGeneratedAttribute]
public void set_PackageType(string value);
    [CompilerGeneratedAttribute]
public string get_DockerFile();
    [CompilerGeneratedAttribute]
public void set_DockerFile(string value);
    [CompilerGeneratedAttribute]
public string get_DockerBuildOptions();
    [CompilerGeneratedAttribute]
public void set_DockerBuildOptions(string value);
    [CompilerGeneratedAttribute]
public string get_DockerBuildWorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_DockerBuildWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DockerImageTag();
    [CompilerGeneratedAttribute]
public void set_DockerImageTag(string value);
    [CompilerGeneratedAttribute]
public string get_HostBuildOutput();
    [CompilerGeneratedAttribute]
public void set_HostBuildOutput(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseContainerForBuild();
    [CompilerGeneratedAttribute]
public void set_UseContainerForBuild(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ContainerImageForBuild();
    [CompilerGeneratedAttribute]
public void set_ContainerImageForBuild(string value);
    [CompilerGeneratedAttribute]
public string get_CodeMountDirectory();
    [CompilerGeneratedAttribute]
private void set_CodeMountDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableRegionAndCredentialsCheck();
    [CompilerGeneratedAttribute]
public void set_DisableRegionAndCredentialsCheck(bool value);
    [CompilerGeneratedAttribute]
public string get_NewDotnetSharedStoreValue();
    [CompilerGeneratedAttribute]
private void set_NewDotnetSharedStoreValue(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PackageCommand/<PerformActionAsync>d__82")]
protected virtual Task`1<bool> PerformActionAsync();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PackageCommand/<PushLambdaImageAsync>d__83")]
private Task`1<PushLambdaImageResult> PushLambdaImageAsync();
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.PublishLayerCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> PublishLayerCommandOptions;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayerLicenseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnablePackageOptimization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLayerArn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NewLayerVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLayerVersionArn>k__BackingField;
    public string Architecture { get; public set; }
    public string TargetFramework { get; public set; }
    public string S3Bucket { get; public set; }
    public string S3Prefix { get; public set; }
    public string LayerName { get; public set; }
    public string LayerType { get; public set; }
    public string LayerLicenseInfo { get; public set; }
    public string PackageManifest { get; public set; }
    public string OptDirectory { get; public set; }
    public Nullable`1<bool> EnablePackageOptimization { get; public set; }
    public string NewLayerArn { get; public set; }
    public long NewLayerVersionNumber { get; public set; }
    public string NewLayerVersionArn { get; public set; }
    public PublishLayerCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static PublishLayerCommand();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_S3Bucket();
    [CompilerGeneratedAttribute]
public void set_S3Bucket(string value);
    [CompilerGeneratedAttribute]
public string get_S3Prefix();
    [CompilerGeneratedAttribute]
public void set_S3Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_LayerName();
    [CompilerGeneratedAttribute]
public void set_LayerName(string value);
    [CompilerGeneratedAttribute]
public string get_LayerType();
    [CompilerGeneratedAttribute]
public void set_LayerType(string value);
    [CompilerGeneratedAttribute]
public string get_LayerLicenseInfo();
    [CompilerGeneratedAttribute]
public void set_LayerLicenseInfo(string value);
    [CompilerGeneratedAttribute]
public string get_PackageManifest();
    [CompilerGeneratedAttribute]
public void set_PackageManifest(string value);
    [CompilerGeneratedAttribute]
public string get_OptDirectory();
    [CompilerGeneratedAttribute]
public void set_OptDirectory(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnablePackageOptimization();
    [CompilerGeneratedAttribute]
public void set_EnablePackageOptimization(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_NewLayerArn();
    [CompilerGeneratedAttribute]
public void set_NewLayerArn(string value);
    [CompilerGeneratedAttribute]
public long get_NewLayerVersionNumber();
    [CompilerGeneratedAttribute]
public void set_NewLayerVersionNumber(long value);
    [CompilerGeneratedAttribute]
public string get_NewLayerVersionArn();
    [CompilerGeneratedAttribute]
public void set_NewLayerVersionArn(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PublishLayerCommand/<PerformActionAsync>d__58")]
protected virtual Task`1<bool> PerformActionAsync();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PublishLayerCommand/<CreateRuntimePackageStoreLayerZipFile>d__59")]
private Task`1<CreateLayerZipFileResult> CreateRuntimePackageStoreLayerZipFile(string layerName, string s3Prefix);
    public static string GeneratorRuntimePackageManifestLayerDescription(string directory, string s3Bucket, string s3Key, bool enableOptimization);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.PublishLayerCommand/<UploadFile>d__61")]
private Task`1<string> UploadFile(string filePath, string s3Key);
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.PushDockerImageCommand : BasePushDockerImageCommand`1<LambdaToolsDefaults> {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static IList`1<CommandOption> LambdaPushCommandOptions;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    protected string ToolName { get; }
    public string Architecture { get; public set; }
    public PushDockerImageCommand(IToolLogger logger, string workingDirectory, String[] args);
    private static PushDockerImageCommand();
    protected virtual string get_ToolName();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    internal Task`1<bool> PushImageAsync();
    protected virtual void BuildProject(string projectLocation, string configuration, string targetFramework, string publishOptions, string publishLocation);
    protected virtual int ExecuteDockerBuild(DockerCLIWrapper dockerCli, string dockerBuildWorkingDirectory, string fullDockerfilePath, string dockerImageTag, string dockerBuildOptions);
    protected virtual void SaveConfigFile(JsonData data);
}
public class Amazon.Lambda.Tools.Commands.PushLambdaImageResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUri>k__BackingField;
    public bool Success { get; public set; }
    public Exception LastException { get; public set; }
    public string ImageUri { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
public void set_LastException(Exception value);
    [CompilerGeneratedAttribute]
public string get_ImageUri();
    [CompilerGeneratedAttribute]
public void set_ImageUri(string value);
}
public class Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand : LambdaBaseCommand {
    public static string COMMAND_NAME;
    public static string COMMAND_DESCRIPTION;
    public static string COMMAND_ARGUMENTS;
    public static IList`1<CommandOption> UpdateCommandOptions;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Publish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LayerVersionArns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SubnetIds>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SecurityGroupIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Runtime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AppendEnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KMSKeyArn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeadLetterTargetArn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TracingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ImageEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ImageCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EphemeralStorageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FunctionUrlEnable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionUrlAuthType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionUrlLink>k__BackingField;
    public string FunctionName { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> Publish { get; public set; }
    public string Handler { get; public set; }
    public Nullable`1<int> MemorySize { get; public set; }
    public string Role { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public String[] LayerVersionArns { get; public set; }
    public String[] SubnetIds { get; public set; }
    public String[] SecurityGroupIds { get; public set; }
    public Runtime Runtime { get; public set; }
    public Dictionary`2<string, string> EnvironmentVariables { get; public set; }
    public Dictionary`2<string, string> AppendEnvironmentVariables { get; public set; }
    public Dictionary`2<string, string> Tags { get; public set; }
    public string KMSKeyArn { get; public set; }
    public string DeadLetterTargetArn { get; public set; }
    public string TracingMode { get; public set; }
    public String[] ImageEntryPoint { get; public set; }
    public String[] ImageCommand { get; public set; }
    public string ImageWorkingDirectory { get; public set; }
    public string PackageType { get; public set; }
    public Nullable`1<int> EphemeralStorageSize { get; public set; }
    public Nullable`1<bool> FunctionUrlEnable { get; public set; }
    public string FunctionUrlAuthType { get; public set; }
    public string FunctionUrlLink { get; private set; }
    public UpdateFunctionConfigCommand(IToolLogger logger, string workingDirectory, String[] args);
    protected UpdateFunctionConfigCommand(IToolLogger logger, string workingDirectory, IList`1<CommandOption> possibleOptions, String[] args);
    private static UpdateFunctionConfigCommand();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Publish();
    [CompilerGeneratedAttribute]
public void set_Publish(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MemorySize();
    [CompilerGeneratedAttribute]
public void set_MemorySize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_LayerVersionArns();
    [CompilerGeneratedAttribute]
public void set_LayerVersionArns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_SubnetIds();
    [CompilerGeneratedAttribute]
public void set_SubnetIds(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_SecurityGroupIds();
    [CompilerGeneratedAttribute]
public void set_SecurityGroupIds(String[] value);
    [CompilerGeneratedAttribute]
public Runtime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(Runtime value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AppendEnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_AppendEnvironmentVariables(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_KMSKeyArn();
    [CompilerGeneratedAttribute]
public void set_KMSKeyArn(string value);
    [CompilerGeneratedAttribute]
public string get_DeadLetterTargetArn();
    [CompilerGeneratedAttribute]
public void set_DeadLetterTargetArn(string value);
    [CompilerGeneratedAttribute]
public string get_TracingMode();
    [CompilerGeneratedAttribute]
public void set_TracingMode(string value);
    [CompilerGeneratedAttribute]
public String[] get_ImageEntryPoint();
    [CompilerGeneratedAttribute]
public void set_ImageEntryPoint(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ImageCommand();
    [CompilerGeneratedAttribute]
public void set_ImageCommand(String[] value);
    [CompilerGeneratedAttribute]
public string get_ImageWorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_ImageWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_PackageType();
    [CompilerGeneratedAttribute]
public void set_PackageType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EphemeralStorageSize();
    [CompilerGeneratedAttribute]
public void set_EphemeralStorageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FunctionUrlEnable();
    [CompilerGeneratedAttribute]
public void set_FunctionUrlEnable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_FunctionUrlAuthType();
    [CompilerGeneratedAttribute]
public void set_FunctionUrlAuthType(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionUrlLink();
    [CompilerGeneratedAttribute]
private void set_FunctionUrlLink(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<PerformActionAsync>d__107")]
protected virtual Task`1<bool> PerformActionAsync();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<PublishFunctionAsync>d__108")]
protected Task PublishFunctionAsync(string functionName);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<ApplyTags>d__109")]
protected Task ApplyTags(string functionArn);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<AttemptRevertConfigAsync>d__110")]
protected Task AttemptRevertConfigAsync(GetFunctionConfigurationResponse existingConfiguration);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<UpdateConfigAsync>d__111")]
protected Task`1<bool> UpdateConfigAsync(GetFunctionConfigurationResponse existingConfiguration, string dotnetSharedStoreValue);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<GetFunctionConfigurationAsync>d__112")]
public Task`1<GetFunctionConfigurationResponse> GetFunctionConfigurationAsync();
    private UpdateFunctionConfigurationRequest CreateRevertConfigurationRequest(GetFunctionConfigurationResponse existingConfiguration);
    private UpdateFunctionConfigurationRequest CreateConfigurationRequestIfDifferent(GetFunctionConfigurationResponse existingConfiguration, string dotnetSharedStoreValue);
    public Dictionary`2<string, string> GetEnvironmentVariables(Dictionary`2<string, string> existingEnvironmentVariables);
    private bool AreDifferent(IDictionary`2<string, string> source, IDictionary`2<string, string> target);
    private bool AreDifferent(IEnumerable`1<string> source, IEnumerable`1<string> target);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<GetFunctionUrlConfig>d__118")]
protected Task`1<GetFunctionUrlConfigResponse> GetFunctionUrlConfig(string functionName);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<CreateFunctionUrlConfig>d__119")]
protected Task CreateFunctionUrlConfig(string functionName, FunctionUrlAuthType authType);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<UpdateFunctionUrlConfig>d__120")]
protected Task UpdateFunctionUrlConfig(string functionName, FunctionUrlAuthType oldAuthType, FunctionUrlAuthType newAuthType);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<DeleteFunctionUrlConfig>d__121")]
protected Task DeleteFunctionUrlConfig(string functionName, FunctionUrlAuthType oldAuthType);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<AddFunctionUrlPublicPermissionStatement>d__122")]
private Task AddFunctionUrlPublicPermissionStatement(string functionName);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.Commands.UpdateFunctionConfigCommand/<RemoveFunctionUrlPublicPermissionStatement>d__123")]
private Task RemoveFunctionUrlPublicPermissionStatement(string functionName);
    protected virtual void SaveConfigFile(JsonData data);
}
public static class Amazon.Lambda.Tools.LambdaConstants : object {
    public static string TOOLNAME;
    public static string ENV_DOTNET_SHARED_STORE;
    public static string LAYER_TYPE_RUNTIME_PACKAGE_STORE_DISPLAY_NAME;
    public static string LAYER_TYPE_RUNTIME_PACKAGE_STORE;
    public static string LAYER_TYPE_ALLOWED_VALUES;
    public static string DEFAULT_LAYER_OPT_DIRECTORY;
    public static Version MINIMUM_DOTNET_SDK_VERSION_FOR_ASPNET_LAYERS;
    public static string ENV_DOTNET_LAMBDA_CLI_LOCAL_MANIFEST_OVERRIDE;
    public static string IAM_ARN_PREFIX;
    public static string AWS_MANAGED_POLICY_ARN_PREFIX;
    public static string SERVERLESS_TAG_NAME;
    public static int MAX_TEMPLATE_BODY_IN_REQUEST_SIZE;
    public static string DEFAULT_BUILD_CONFIGURATION;
    internal static string RUNTIME_HIERARCHY;
    internal static string PRUNE_LIST_SDK_XML;
    internal static string PRUNE_LIST_SDKWEB_XML;
    internal static string LEGACY_RUNTIME_HIERARCHY_STARTING_POINT;
    public static string RUNTIME_LINUX_X64;
    public static string RUNTIME_LINUX_ARM64;
    public static string ARCHITECTURE_X86_64;
    public static string ARCHITECTURE_ARM64;
    public static string DEFAULT_BUCKET_NAME_PREFIX;
    public static string FUNCTION_URL_PUBLIC_PERMISSION_STATEMENT_ID;
    public static string AWS_LAMBDA_MANAGED_POLICY_PREFIX;
    public static Dictionary`2<string, string> KNOWN_MANAGED_POLICY_DESCRIPTIONS;
    public static string CF_LAMBDA_PACKAGE_TYPE;
    public static string CF_SERVERLESS_METADATA;
    public static string CF_SERVERLESS_DOCKERCONTEXT;
    public static string CF_LAMBDA_IMAGEURI;
    public static string CF_LAMBDA_CODEURI;
    public static string CF_LAMBDA_CODE;
    public static string CF_LAMBDA_S3BUCKET;
    public static string CF_LAMBDA_S3KEY;
    private static LambdaConstants();
}
public static class Amazon.Lambda.Tools.LambdaDefinedCommandOptions : object {
    public static CommandOption ARGUMENT_DISABLE_VERSION_CHECK;
    public static CommandOption ARGUMENT_PACKAGE;
    public static CommandOption ARGUMENT_FUNCTION_NAME;
    public static CommandOption ARGUMENT_FUNCTION_DESCRIPTION;
    public static CommandOption ARGUMENT_FUNCTION_PUBLISH;
    public static CommandOption ARGUMENT_FUNCTION_HANDLER;
    public static CommandOption ARGUMENT_PACKAGE_TYPE;
    public static CommandOption ARGUMENT_FUNCTION_MEMORY_SIZE;
    public static CommandOption ARGUMENT_FUNCTION_ROLE;
    public static CommandOption ARGUMENT_FUNCTION_TIMEOUT;
    public static CommandOption ARGUMENT_FUNCTION_RUNTIME;
    public static CommandOption ARGUMENT_FUNCTION_ARCHITECTURE;
    public static CommandOption ARGUMENT_FUNCTION_SUBNETS;
    public static CommandOption ARGUMENT_FUNCTION_SECURITY_GROUPS;
    public static CommandOption ARGUMENT_FUNCTION_LAYERS;
    public static CommandOption ARGUMENT_OPT_DIRECTORY;
    public static CommandOption ARGUMENT_DEADLETTER_TARGET_ARN;
    public static CommandOption ARGUMENT_TRACING_MODE;
    public static CommandOption ARGUMENT_ENVIRONMENT_VARIABLES;
    public static CommandOption ARGUMENT_APPEND_ENVIRONMENT_VARIABLES;
    public static CommandOption ARGUMENT_FUNCTION_TAGS;
    public static CommandOption ARGUMENT_KMS_KEY_ARN;
    public static CommandOption ARGUMENT_RESOLVE_S3;
    public static CommandOption ARGUMENT_S3_BUCKET;
    public static CommandOption ARGUMENT_S3_PREFIX;
    public static CommandOption ARGUMENT_STACK_NAME;
    public static CommandOption ARGUMENT_CLOUDFORMATION_TEMPLATE;
    public static CommandOption ARGUMENT_CLOUDFORMATION_TEMPLATE_PARAMETER;
    public static CommandOption ARGUMENT_CLOUDFORMATION_TEMPLATE_SUBSTITUTIONS;
    public static CommandOption ARGUMENT_CLOUDFORMATION_DISABLE_CAPABILITIES;
    public static CommandOption ARGUMENT_STACK_WAIT;
    public static CommandOption ARGUMENT_STACK_POLLING_DELAY;
    public static CommandOption ARGUMENT_CLOUDFORMATION_ROLE;
    public static CommandOption ARGUMENT_PAYLOAD;
    public static CommandOption ARGUMENT_OUTPUT_PACKAGE;
    public static CommandOption ARGUMENT_OUTPUT_CLOUDFORMATION_TEMPLATE;
    public static CommandOption ARGUMENT_APPLY_DEFAULTS_FOR_UPDATE_OBSOLETE;
    public static CommandOption ARGUMENT_LAYER_NAME;
    public static CommandOption ARGUMENT_LAYER_VERSION_ARN;
    public static CommandOption ARGUMENT_LAYER_TYPE;
    public static CommandOption ARGUMENT_LAYER_LICENSE_INFO;
    public static CommandOption ARGUMENT_PACKAGE_MANIFEST;
    public static CommandOption ARGUMENT_ENABLE_PACKAGE_OPTIMIZATION;
    public static CommandOption ARGUMENT_IMAGE_ENTRYPOINT;
    public static CommandOption ARGUMENT_IMAGE_COMMAND;
    public static CommandOption ARGUMENT_IMAGE_WORKING_DIRECTORY;
    public static CommandOption ARGUMENT_IMAGE_TAG;
    public static CommandOption ARGUMENT_EPHEMERAL_STORAGE_SIZE;
    public static CommandOption ARGUMENT_FUNCTION_URL_ENABLE;
    public static CommandOption ARGUMENT_FUNCTION_URL_AUTH;
    public static CommandOption ARGUMENT_USE_CONTAINER_FOR_BUILD;
    public static CommandOption ARGUMENT_CONTAINER_IMAGE_FOR_BUILD;
    public static CommandOption ARGUMENT_CODE_MOUNT_DIRECTORY;
    private static LambdaDefinedCommandOptions();
}
public class Amazon.Lambda.Tools.LambdaDotNetCLIWrapper : object {
    private string _workingDirectory;
    private IToolLogger _logger;
    private static IDictionary`2<string, string> KNOWN_LOCATIONS;
    public LambdaDotNetCLIWrapper(IToolLogger logger, string workingDirectory);
    private static LambdaDotNetCLIWrapper();
    public int Store(LambdaToolsDefaults defaults, string projectLocation, string outputLocation, string targetFramework, string packageManifest, string architecture, bool enableOptimization);
    public int Publish(LambdaToolsDefaults defaults, string projectLocation, string outputLocation, string targetFramework, string configuration, string msbuildParameters, string architecture, IList`1<string> publishManifests);
    public string GetPublishArguments(string projectLocation, string outputLocation, string targetFramework, string configuration, string msbuildParameters, string architecture, IList`1<string> publishManifests, bool isNativeAot, string projectLocationInsideContainer);
    private void ProcessAdditionalFiles(LambdaToolsDefaults defaults, string publishLocation);
    public static string FindExecutableInPath(string command);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Store>b__3_0(object o, DataReceivedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Publish>b__4_0(object o, DataReceivedEventArgs e);
}
public class Amazon.Lambda.Tools.LambdaImageTagData : object {
    [CompilerGeneratedAttribute]
private string <Repo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public string Repo { get; public set; }
    public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Repo();
    [CompilerGeneratedAttribute]
public void set_Repo(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    public static bool TryParse(string text, LambdaImageTagData& data);
}
public static class Amazon.Lambda.Tools.LambdaPackager : object {
    private static string Shebang;
    private static char LinuxLineEnding;
    private static string BootstrapFilename;
    private static string LinuxOSReleaseFile;
    private static string AmazonLinuxNameInOSReleaseFile;
    private static string AmazonLinux2InOSReleaseFile;
    private static string AmazonLinux2023InOSReleaseFile;
    private static string BuildLambdaZipCliPath;
    private static IDictionary`2<string, Version> NETSTANDARD_LIBRARY_VERSIONS;
    private static LambdaPackager();
    private static bool IsAmazonLinux(IToolLogger logger);
    public static bool CreateApplicationBundle(LambdaToolsDefaults defaults, IToolLogger logger, string workingDirectory, string projectLocation, string configuration, string targetFramework, string msbuildParameters, string architecture, bool disableVersionCheck, LayerPackageInfo layerPackageInfo, bool isNativeAot, Nullable`1<bool> useContainerForBuild, string containerImageForBuild, string codeMountDirectory, String& publishLocation, String& zipArchivePath);
    public static void BundleDirectory(string zipArchivePath, string sourceDirectory, bool flattenRuntime, IToolLogger logger);
    public static void BundleFiles(string zipArchivePath, string rootDirectory, String[] files, IToolLogger logger);
    public static IDictionary`2<string, string> ConvertToMapOfFiles(string rootDirectory, String[] files);
    private static JsonData GetDepsJsonTargetNode(IToolLogger logger, string publishLocation);
    private static bool ValidateDependencies(IToolLogger logger, string targetFramework, JsonData depsJsonTargetNode, bool disableVersionCheck);
    private static void FlattenPowerShellRuntimeModules(IToolLogger logger, string publishLocation, string targetFramework);
    private static bool FlattenRuntimeFolder(IToolLogger logger, string publishLocation, JsonData depsJsonTargetNode);
    private static IList`1<string> CalculateRuntimeHierarchy();
    private static IDictionary`2<string, string> GetFilesToIncludeInArchive(string publishLocation, bool flattenRuntime);
    private static void BundleWithBuildLambdaZip(string zipArchivePath, string publishLocation, bool flattenRuntime, IToolLogger logger);
    private static void BundleWithBuildLambdaZip(string zipArchivePath, string rootDirectory, IDictionary`2<string, string> includedFiles, IToolLogger logger);
    private static void EnsureBootstrapLinuxLineEndings(string rootDirectory, IDictionary`2<string, string> includedFiles);
    private static bool FileIsLinuxShellScript(string filePath);
    private static void BundleWithZipCLI(string zipCLI, string zipArchivePath, string publishLocation, bool flattenRuntime, IToolLogger logger);
    private static void BundleWithZipCLI(string zipCLI, string zipArchivePath, string rootDirectory, IDictionary`2<string, string> includedFiles, IToolLogger logger);
    internal static void LogDeprecationMessagesIfNecessary(IToolLogger logger, string targetFramework);
}
public class Amazon.Lambda.Tools.LambdaToolsDefaults : DefaultConfigFile {
    public static string DEFAULT_FILE_NAME;
    public string DefaultConfigFileName { get; }
    public string Profile { get; }
    public string Region { get; }
    public string FunctionHandler { get; }
    public string FunctionName { get; }
    public string FunctionRuntime { get; }
    public string FunctionArchitecture { get; }
    public string FunctionRole { get; }
    public Nullable`1<int> FunctionMemory { get; }
    public Nullable`1<int> FunctionTimeout { get; }
    public string CloudFormationTemplate { get; }
    public IDictionary`2<string, string> CloudFormationTemplateParameters { get; }
    public IDictionary`2<string, string> EnvironmentVariables { get; }
    public String[] FunctionSubnets { get; }
    public String[] FunctionSecurityGroups { get; }
    public string KMSKeyArn { get; }
    public string StackName { get; }
    public string S3Bucket { get; }
    public string S3Prefix { get; }
    public string Configuration { get; }
    public string Framework { get; }
    public string DeadLetterTargetArn { get; }
    public string TracingMode { get; }
    public string ImageRepo { get; }
    public string ImageTag { get; }
    public string ImageCommand { get; }
    public string PackageType { get; }
    public LambdaToolsDefaults(string sourceFile);
    public LambdaToolsDefaults(JsonData data, string sourceFile);
    public virtual string get_DefaultConfigFileName();
    public string get_Profile();
    public string get_Region();
    public string get_FunctionHandler();
    public string get_FunctionName();
    public string get_FunctionRuntime();
    public string get_FunctionArchitecture();
    public string get_FunctionRole();
    public Nullable`1<int> get_FunctionMemory();
    public Nullable`1<int> get_FunctionTimeout();
    public string get_CloudFormationTemplate();
    public IDictionary`2<string, string> get_CloudFormationTemplateParameters();
    public IDictionary`2<string, string> get_EnvironmentVariables();
    public String[] get_FunctionSubnets();
    public String[] get_FunctionSecurityGroups();
    public string get_KMSKeyArn();
    public string get_StackName();
    public string get_S3Bucket();
    public string get_S3Prefix();
    public string get_Configuration();
    public string get_Framework();
    public string get_DeadLetterTargetArn();
    public string get_TracingMode();
    public string get_ImageRepo();
    public string get_ImageTag();
    public string get_ImageCommand();
    public string get_PackageType();
}
public class Amazon.Lambda.Tools.LambdaToolsException : ToolsException {
    public LambdaToolsException(string message, LambdaErrorCode code);
    public LambdaToolsException(string message, CommonErrorCode code);
    public LambdaToolsException(string message, LambdaErrorCode code, Exception e);
    public LambdaToolsException(string message, CommonErrorCode code, Exception e);
}
public static class Amazon.Lambda.Tools.LambdaUtilities : object {
    public static IList`1<string> ValidProjectExtensions;
    public static IReadOnlyDictionary`2<string, string> _lambdaRuntimeToDotnetFramework;
    private static LambdaUtilities();
    public static string DetermineTargetFrameworkFromLambdaRuntime(string lambdaRuntime, string projectLocation);
    public static string DetermineLambdaRuntimeFromTargetFramework(string targetFramework);
    public static void ValidateTargetFramework(string projectLocation, string targetFramework, bool isNativeAot);
    public static string GetDefaultBuildImage(string targetFramework, string architecture, IToolLogger logger);
    public static PackageType DeterminePackageType(string packageType);
    public static void ValidateTargetFrameworkAndLambdaRuntime(string lambdaRuntime, string targetFramework);
    public static string LoadPackageStoreManifest(IToolLogger logger, string targetFramework);
    public static string ProcessTemplateSubstitions(IToolLogger logger, string templateBody, IDictionary`2<string, string> substitutions, string workingDirectory);
    public static string UpdateCodeLocationInTemplate(string templateBody, string s3Bucket, string s3Key);
    public static string UpdateCodeLocationInJsonTemplate(string templateBody, string s3Bucket, string s3Key);
    public static string UpdateCodeLocationInYamlTemplate(string templateBody, string s3Bucket, string s3Key);
    internal static TemplateFormat DetermineTemplateFormat(string templateBody);
    internal static List`1<Tuple`2<string, bool>> GetTemplateDefinedParameters(string templateBody);
    private static List`1<Tuple`2<string, bool>> GetJsonTemplateDefinedParameters(string templateBody);
    private static List`1<Tuple`2<string, bool>> GetYamlTemplateDefinedParameters(string templateBody);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.LambdaUtilities/<LoadLayerPackageInfos>d__17")]
public static Task`1<LayerPackageInfo> LoadLayerPackageInfos(IToolLogger logger, IAmazonLambda lambdaClient, IAmazonS3 s3Client, IEnumerable`1<string> layerVersionArns);
    internal static bool AttemptToParseLayerDescriptionManifest(string json, LayerDescriptionManifest& manifest);
    internal static ParseLayerVersionArnResult ParseLayerVersionArn(string layerVersionArn);
    public static string DetermineListDisplayLayerDescription(string description, int maxDescriptionLength);
    public static ConvertManifestToSdkManifestResult ConvertManifestToSdkManifest(string targetFramework, string packageManifest);
    public static ConvertManifestContentToSdkManifestResult ConvertManifestContentToSdkManifest(string targetFramework, string packageManifestContent);
    public static string DetermineRuntimeParameter(string targetFramework, string architecture);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.LambdaUtilities/<WaitTillFunctionAvailableAsync>d__27")]
public static Task WaitTillFunctionAvailableAsync(IToolLogger logger, IAmazonLambda lambdaClient, string functionName);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.LambdaUtilities/<ResolveDefaultS3Bucket>d__28")]
public static Task`1<string> ResolveDefaultS3Bucket(IToolLogger logger, IAmazonS3 s3Client, IAmazonSecurityTokenService stsClient);
    public static void ValidateNativeAotArchitecture(string architecture, bool isNativeAot);
    [CompilerGeneratedAttribute]
internal static string <LoadLayerPackageInfos>g__GetLastArnComponent|17_0(string input);
}
public class Amazon.Lambda.Tools.LayerDescriptionManifest : object {
    [CompilerGeneratedAttribute]
private ManifestType <Nlt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dir>k__BackingField;
    [CompilerGeneratedAttribute]
private OptimizedState <Op>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Buc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public ManifestType Nlt { get; public set; }
    public string Dir { get; public set; }
    public OptimizedState Op { get; public set; }
    public string Buc { get; public set; }
    public string Key { get; public set; }
    public LayerDescriptionManifest(ManifestType type);
    [CompilerGeneratedAttribute]
public ManifestType get_Nlt();
    [CompilerGeneratedAttribute]
public void set_Nlt(ManifestType value);
    [CompilerGeneratedAttribute]
public string get_Dir();
    [CompilerGeneratedAttribute]
public void set_Dir(string value);
    [CompilerGeneratedAttribute]
public OptimizedState get_Op();
    [CompilerGeneratedAttribute]
public void set_Op(OptimizedState value);
    [CompilerGeneratedAttribute]
public string get_Buc();
    [CompilerGeneratedAttribute]
public void set_Buc(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
}
public class Amazon.Lambda.Tools.LayerPackageInfo : object {
    [CompilerGeneratedAttribute]
private IList`1<LayerPackageInfoItem> <Items>k__BackingField;
    public IList`1<LayerPackageInfoItem> Items { get; }
    [CompilerGeneratedAttribute]
public IList`1<LayerPackageInfoItem> get_Items();
    public string GenerateDotnetSharedStoreValue();
}
public class Amazon.Lambda.Tools.Program : object {
    private static void Main(String[] args);
}
public static class Amazon.Lambda.Tools.TargetFrameworkMonikers : object {
    public static string net80;
    public static string net70;
    public static string net60;
    public static string net50;
    public static string netcoreapp31;
    public static string netcoreapp30;
    public static string netcoreapp21;
    public static string netcoreapp20;
    public static string netcoreapp10;
    public static List`1<string> OrderedTargetFrameworkMonikers;
    private static TargetFrameworkMonikers();
}
internal enum Amazon.Lambda.Tools.TemplateFormat : Enum {
    public int value__;
    public static TemplateFormat Json;
    public static TemplateFormat Yaml;
}
public enum Amazon.Lambda.Tools.TemplateProcessor.CodeUploadType : Enum {
    public int value__;
    public static CodeUploadType Zip;
    public static CodeUploadType Image;
}
public class Amazon.Lambda.Tools.TemplateProcessor.DefaultLocationOption : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableVersionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    public string Configuration { get; public set; }
    public string TargetFramework { get; public set; }
    public string MSBuildParameters { get; public set; }
    public bool DisableVersionCheck { get; public set; }
    public string Package { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildParameters();
    [CompilerGeneratedAttribute]
public void set_MSBuildParameters(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableVersionCheck();
    [CompilerGeneratedAttribute]
public void set_DisableVersionCheck(bool value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
}
public interface Amazon.Lambda.Tools.TemplateProcessor.ITemplateParser {
    public abstract virtual IEnumerable`1<IUpdatableResource> UpdatableResources();
    public abstract virtual string GetUpdatedTemplate();
}
public interface Amazon.Lambda.Tools.TemplateProcessor.IUpdatableResource {
    public string Name { get; }
    public string ResourceType { get; }
    public string LambdaRuntime { get; }
    public string LambdaArchitecture { get; }
    public String[] LambdaLayers { get; }
    public IList`1<IUpdateResourceField> Fields { get; }
    public CodeUploadType UploadType { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_ResourceType();
    public abstract virtual string get_LambdaRuntime();
    public abstract virtual string get_LambdaArchitecture();
    public abstract virtual String[] get_LambdaLayers();
    public abstract virtual IList`1<IUpdateResourceField> get_Fields();
    public abstract virtual void SetEnvironmentVariable(string key, string value);
    public abstract virtual CodeUploadType get_UploadType();
}
public interface Amazon.Lambda.Tools.TemplateProcessor.IUpdatableResourceDataSource {
    public abstract virtual string GetValueFromRoot(String[] keyPath);
    public abstract virtual String[] GetValueListFromRoot(String[] keyPath);
    public abstract virtual string GetValueFromResource(String[] keyPath);
    public abstract virtual string GetValue(String[] keyPath);
    public abstract virtual void SetValue(string value, String[] keyPath);
    public abstract virtual String[] GetValueList(String[] keyPath);
    public abstract virtual Dictionary`2<string, string> GetValueDictionaryFromResource(String[] keyPath);
}
public interface Amazon.Lambda.Tools.TemplateProcessor.IUpdateResourceField {
    public string Name { get; }
    public bool IsCode { get; }
    public bool IsImagePushed { get; }
    public IUpdatableResource Resource { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsCode();
    public abstract virtual bool get_IsImagePushed();
    public abstract virtual IUpdatableResource get_Resource();
    public abstract virtual string GetLocalPath();
    public abstract virtual void SetS3Location(string s3Bucket, string s3Key);
    public abstract virtual void SetImageUri(string imageUri);
    public abstract virtual string GetMetadataDockerfile();
    public abstract virtual string GetMetadataDockerTag();
    public abstract virtual Dictionary`2<string, string> GetMetadataDockerBuildArgs();
}
public class Amazon.Lambda.Tools.TemplateProcessor.JsonTemplateParser : object {
    [CompilerGeneratedAttribute]
private JsonData <Root>k__BackingField;
    private JsonData Root { get; }
    public JsonTemplateParser(string templateBody);
    [CompilerGeneratedAttribute]
private JsonData get_Root();
    public sealed virtual string GetUpdatedTemplate();
    [IteratorStateMachineAttribute("Amazon.Lambda.Tools.TemplateProcessor.JsonTemplateParser/<UpdatableResources>d__5")]
public sealed virtual IEnumerable`1<IUpdatableResource> UpdatableResources();
}
public class Amazon.Lambda.Tools.TemplateProcessor.TemplateProcessorManager : object {
    [CompilerGeneratedAttribute]
private IToolLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmazonS3 <S3Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S3Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaBaseCommand <OriginatingCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultLocationOption <DefaultOptions>k__BackingField;
    private IToolLogger Logger { get; }
    private IAmazonS3 S3Client { get; }
    private string S3Bucket { get; }
    private string S3Prefix { get; }
    public LambdaBaseCommand OriginatingCommand { get; }
    private DefaultLocationOption DefaultOptions { get; }
    public TemplateProcessorManager(LambdaBaseCommand originatingCommand, string s3Bucket, string s3Prefix, DefaultLocationOption defaultOptions);
    [CompilerGeneratedAttribute]
private IToolLogger get_Logger();
    [CompilerGeneratedAttribute]
private IAmazonS3 get_S3Client();
    [CompilerGeneratedAttribute]
private string get_S3Bucket();
    [CompilerGeneratedAttribute]
private string get_S3Prefix();
    [CompilerGeneratedAttribute]
public LambdaBaseCommand get_OriginatingCommand();
    [CompilerGeneratedAttribute]
private DefaultLocationOption get_DefaultOptions();
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.TemplateProcessor.TemplateProcessorManager/<TransformTemplateAsync>d__19")]
public Task`1<string> TransformTemplateAsync(string templateDirectory, string templateBody, String[] args);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.TemplateProcessor.TemplateProcessorManager/<ProcessUpdatableResourceAsync>d__20")]
private Task`1<UpdateResourceResults> ProcessUpdatableResourceAsync(string templateDirectory, IUpdateResourceField field, String[] args);
    [AsyncStateMachineAttribute("Amazon.Lambda.Tools.TemplateProcessor.TemplateProcessorManager/<PackageDotnetProjectAsync>d__21")]
private Task`1<UpdateResourceResults> PackageDotnetProjectAsync(IUpdateResourceField field, string location, String[] args);
    private String[] RemoveProjectLocationArgument(String[] args);
    private static string GenerateOutputZipFilename(IUpdateResourceField field);
    private bool IsDotnetProjectDirectory(string localPath);
    private bool IsCurrentDirectory(string localPath);
    public static ITemplateParser CreateTemplateParser(string templateBody);
}
public class Amazon.Lambda.Tools.TemplateProcessor.UpdatableResource : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IUpdateResourceField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdatableResourceDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdatableResourceDataSource <DataSource>k__BackingField;
    public string Name { get; }
    public string ResourceType { get; }
    public IList`1<IUpdateResourceField> Fields { get; }
    private UpdatableResourceDefinition Definition { get; }
    private IUpdatableResourceDataSource DataSource { get; }
    public string LambdaRuntime { get; }
    public string LambdaArchitecture { get; }
    public String[] LambdaLayers { get; }
    public CodeUploadType UploadType { get; }
    public UpdatableResource(string name, UpdatableResourceDefinition definition, IUpdatableResourceDataSource dataSource);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceType();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IUpdateResourceField> get_Fields();
    [CompilerGeneratedAttribute]
private UpdatableResourceDefinition get_Definition();
    [CompilerGeneratedAttribute]
private IUpdatableResourceDataSource get_DataSource();
    public sealed virtual string get_LambdaRuntime();
    public sealed virtual string get_LambdaArchitecture();
    public sealed virtual String[] get_LambdaLayers();
    public sealed virtual CodeUploadType get_UploadType();
    public sealed virtual void SetEnvironmentVariable(string key, string value);
}
public class Amazon.Lambda.Tools.TemplateProcessor.UpdatableResourceDefinition : object {
    public static UpdatableResourceDefinition DEF_LAMBDA_FUNCTION;
    public static UpdatableResourceDefinition DEF_SERVERLESS_FUNCTION;
    public static UpdatableResourceDefinition DEF_APIGATEWAY_RESTAPI;
    public static UpdatableResourceDefinition DEF_APPSYNC_GRAPHQLSCHEMA;
    public static UpdatableResourceDefinition DEF_APPSYNC_RESOLVER;
    public static UpdatableResourceDefinition DEF_SERVERLESS_API;
    public static UpdatableResourceDefinition DEF_ELASTICBEANSTALK_APPLICATIONVERSION;
    public static UpdatableResourceDefinition DEF_CLOUDFORMATION_STACK;
    public static IDictionary`2<string, UpdatableResourceDefinition> ValidUpdatableResourceDefinitions;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDefinition[] <Fields>k__BackingField;
    public string Name { get; }
    public FieldDefinition[] Fields { get; }
    public UpdatableResourceDefinition(string name, FieldDefinition[] fields);
    private static UpdatableResourceDefinition();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public FieldDefinition[] get_Fields();
}
public class Amazon.Lambda.Tools.TemplateProcessor.YamlTemplateParser : object {
    [CompilerGeneratedAttribute]
private YamlStream <Yaml>k__BackingField;
    private YamlStream Yaml { get; }
    public YamlTemplateParser(string templateBody);
    [CompilerGeneratedAttribute]
private YamlStream get_Yaml();
    public sealed virtual string GetUpdatedTemplate();
    [IteratorStateMachineAttribute("Amazon.Lambda.Tools.TemplateProcessor.YamlTemplateParser/<UpdatableResources>d__5")]
public sealed virtual IEnumerable`1<IUpdatableResource> UpdatableResources();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
