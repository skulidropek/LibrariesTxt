public class Amazon.ECR.AmazonECRClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IECRPaginatorFactory _paginators;
    public IECRPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonECRClient(RegionEndpoint region);
    public AmazonECRClient(AmazonECRConfig config);
    public AmazonECRClient(AWSCredentials credentials);
    public AmazonECRClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonECRClient(AWSCredentials credentials, AmazonECRConfig clientConfig);
    public AmazonECRClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonECRClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonECRClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonECRConfig clientConfig);
    public AmazonECRClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonECRClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonECRClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonECRConfig clientConfig);
    private static AmazonECRClient();
    public sealed virtual IECRPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual BatchCheckLayerAvailabilityResponse BatchCheckLayerAvailability(BatchCheckLayerAvailabilityRequest request);
    public virtual Task`1<BatchCheckLayerAvailabilityResponse> BatchCheckLayerAvailabilityAsync(BatchCheckLayerAvailabilityRequest request, CancellationToken cancellationToken);
    internal virtual BatchDeleteImageResponse BatchDeleteImage(BatchDeleteImageRequest request);
    public virtual Task`1<BatchDeleteImageResponse> BatchDeleteImageAsync(BatchDeleteImageRequest request, CancellationToken cancellationToken);
    internal virtual BatchGetImageResponse BatchGetImage(BatchGetImageRequest request);
    public virtual Task`1<BatchGetImageResponse> BatchGetImageAsync(BatchGetImageRequest request, CancellationToken cancellationToken);
    internal virtual BatchGetRepositoryScanningConfigurationResponse BatchGetRepositoryScanningConfiguration(BatchGetRepositoryScanningConfigurationRequest request);
    public virtual Task`1<BatchGetRepositoryScanningConfigurationResponse> BatchGetRepositoryScanningConfigurationAsync(BatchGetRepositoryScanningConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual CompleteLayerUploadResponse CompleteLayerUpload(CompleteLayerUploadRequest request);
    public virtual Task`1<CompleteLayerUploadResponse> CompleteLayerUploadAsync(CompleteLayerUploadRequest request, CancellationToken cancellationToken);
    internal virtual CreatePullThroughCacheRuleResponse CreatePullThroughCacheRule(CreatePullThroughCacheRuleRequest request);
    public virtual Task`1<CreatePullThroughCacheRuleResponse> CreatePullThroughCacheRuleAsync(CreatePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    internal virtual CreateRepositoryResponse CreateRepository(CreateRepositoryRequest request);
    public virtual Task`1<CreateRepositoryResponse> CreateRepositoryAsync(CreateRepositoryRequest request, CancellationToken cancellationToken);
    internal virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request);
    public virtual Task`1<DeleteLifecyclePolicyResponse> DeleteLifecyclePolicyAsync(DeleteLifecyclePolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeletePullThroughCacheRuleResponse DeletePullThroughCacheRule(DeletePullThroughCacheRuleRequest request);
    public virtual Task`1<DeletePullThroughCacheRuleResponse> DeletePullThroughCacheRuleAsync(DeletePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRegistryPolicyResponse DeleteRegistryPolicy(DeleteRegistryPolicyRequest request);
    public virtual Task`1<DeleteRegistryPolicyResponse> DeleteRegistryPolicyAsync(DeleteRegistryPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRepositoryResponse DeleteRepository(DeleteRepositoryRequest request);
    public virtual Task`1<DeleteRepositoryResponse> DeleteRepositoryAsync(DeleteRepositoryRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRepositoryPolicyResponse DeleteRepositoryPolicy(DeleteRepositoryPolicyRequest request);
    public virtual Task`1<DeleteRepositoryPolicyResponse> DeleteRepositoryPolicyAsync(DeleteRepositoryPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DescribeImageReplicationStatusResponse DescribeImageReplicationStatus(DescribeImageReplicationStatusRequest request);
    public virtual Task`1<DescribeImageReplicationStatusResponse> DescribeImageReplicationStatusAsync(DescribeImageReplicationStatusRequest request, CancellationToken cancellationToken);
    internal virtual DescribeImagesResponse DescribeImages(DescribeImagesRequest request);
    public virtual Task`1<DescribeImagesResponse> DescribeImagesAsync(DescribeImagesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeImageScanFindingsResponse DescribeImageScanFindings(DescribeImageScanFindingsRequest request);
    public virtual Task`1<DescribeImageScanFindingsResponse> DescribeImageScanFindingsAsync(DescribeImageScanFindingsRequest request, CancellationToken cancellationToken);
    internal virtual DescribePullThroughCacheRulesResponse DescribePullThroughCacheRules(DescribePullThroughCacheRulesRequest request);
    public virtual Task`1<DescribePullThroughCacheRulesResponse> DescribePullThroughCacheRulesAsync(DescribePullThroughCacheRulesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeRegistryResponse DescribeRegistry(DescribeRegistryRequest request);
    public virtual Task`1<DescribeRegistryResponse> DescribeRegistryAsync(DescribeRegistryRequest request, CancellationToken cancellationToken);
    internal virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request);
    public virtual Task`1<DescribeRepositoriesResponse> DescribeRepositoriesAsync(DescribeRepositoriesRequest request, CancellationToken cancellationToken);
    internal virtual GetAuthorizationTokenResponse GetAuthorizationToken(GetAuthorizationTokenRequest request);
    public virtual Task`1<GetAuthorizationTokenResponse> GetAuthorizationTokenAsync(GetAuthorizationTokenRequest request, CancellationToken cancellationToken);
    internal virtual GetDownloadUrlForLayerResponse GetDownloadUrlForLayer(GetDownloadUrlForLayerRequest request);
    public virtual Task`1<GetDownloadUrlForLayerResponse> GetDownloadUrlForLayerAsync(GetDownloadUrlForLayerRequest request, CancellationToken cancellationToken);
    internal virtual GetLifecyclePolicyResponse GetLifecyclePolicy(GetLifecyclePolicyRequest request);
    public virtual Task`1<GetLifecyclePolicyResponse> GetLifecyclePolicyAsync(GetLifecyclePolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request);
    public virtual Task`1<GetLifecyclePolicyPreviewResponse> GetLifecyclePolicyPreviewAsync(GetLifecyclePolicyPreviewRequest request, CancellationToken cancellationToken);
    internal virtual GetRegistryPolicyResponse GetRegistryPolicy(GetRegistryPolicyRequest request);
    public virtual Task`1<GetRegistryPolicyResponse> GetRegistryPolicyAsync(GetRegistryPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetRegistryScanningConfigurationResponse GetRegistryScanningConfiguration(GetRegistryScanningConfigurationRequest request);
    public virtual Task`1<GetRegistryScanningConfigurationResponse> GetRegistryScanningConfigurationAsync(GetRegistryScanningConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetRepositoryPolicyResponse GetRepositoryPolicy(GetRepositoryPolicyRequest request);
    public virtual Task`1<GetRepositoryPolicyResponse> GetRepositoryPolicyAsync(GetRepositoryPolicyRequest request, CancellationToken cancellationToken);
    internal virtual InitiateLayerUploadResponse InitiateLayerUpload(InitiateLayerUploadRequest request);
    public virtual Task`1<InitiateLayerUploadResponse> InitiateLayerUploadAsync(InitiateLayerUploadRequest request, CancellationToken cancellationToken);
    internal virtual ListImagesResponse ListImages(ListImagesRequest request);
    public virtual Task`1<ListImagesResponse> ListImagesAsync(ListImagesRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual PutImageResponse PutImage(PutImageRequest request);
    public virtual Task`1<PutImageResponse> PutImageAsync(PutImageRequest request, CancellationToken cancellationToken);
    internal virtual PutImageScanningConfigurationResponse PutImageScanningConfiguration(PutImageScanningConfigurationRequest request);
    public virtual Task`1<PutImageScanningConfigurationResponse> PutImageScanningConfigurationAsync(PutImageScanningConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutImageTagMutabilityResponse PutImageTagMutability(PutImageTagMutabilityRequest request);
    public virtual Task`1<PutImageTagMutabilityResponse> PutImageTagMutabilityAsync(PutImageTagMutabilityRequest request, CancellationToken cancellationToken);
    internal virtual PutLifecyclePolicyResponse PutLifecyclePolicy(PutLifecyclePolicyRequest request);
    public virtual Task`1<PutLifecyclePolicyResponse> PutLifecyclePolicyAsync(PutLifecyclePolicyRequest request, CancellationToken cancellationToken);
    internal virtual PutRegistryPolicyResponse PutRegistryPolicy(PutRegistryPolicyRequest request);
    public virtual Task`1<PutRegistryPolicyResponse> PutRegistryPolicyAsync(PutRegistryPolicyRequest request, CancellationToken cancellationToken);
    internal virtual PutRegistryScanningConfigurationResponse PutRegistryScanningConfiguration(PutRegistryScanningConfigurationRequest request);
    public virtual Task`1<PutRegistryScanningConfigurationResponse> PutRegistryScanningConfigurationAsync(PutRegistryScanningConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutReplicationConfigurationResponse PutReplicationConfiguration(PutReplicationConfigurationRequest request);
    public virtual Task`1<PutReplicationConfigurationResponse> PutReplicationConfigurationAsync(PutReplicationConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual SetRepositoryPolicyResponse SetRepositoryPolicy(SetRepositoryPolicyRequest request);
    public virtual Task`1<SetRepositoryPolicyResponse> SetRepositoryPolicyAsync(SetRepositoryPolicyRequest request, CancellationToken cancellationToken);
    internal virtual StartImageScanResponse StartImageScan(StartImageScanRequest request);
    public virtual Task`1<StartImageScanResponse> StartImageScanAsync(StartImageScanRequest request, CancellationToken cancellationToken);
    internal virtual StartLifecyclePolicyPreviewResponse StartLifecyclePolicyPreview(StartLifecyclePolicyPreviewRequest request);
    public virtual Task`1<StartLifecyclePolicyPreviewResponse> StartLifecyclePolicyPreviewAsync(StartLifecyclePolicyPreviewRequest request, CancellationToken cancellationToken);
    internal virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UpdatePullThroughCacheRuleResponse UpdatePullThroughCacheRule(UpdatePullThroughCacheRuleRequest request);
    public virtual Task`1<UpdatePullThroughCacheRuleResponse> UpdatePullThroughCacheRuleAsync(UpdatePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    internal virtual UploadLayerPartResponse UploadLayerPart(UploadLayerPartRequest request);
    public virtual Task`1<UploadLayerPartResponse> UploadLayerPartAsync(UploadLayerPartRequest request, CancellationToken cancellationToken);
    internal virtual ValidatePullThroughCacheRuleResponse ValidatePullThroughCacheRule(ValidatePullThroughCacheRuleRequest request);
    public virtual Task`1<ValidatePullThroughCacheRuleResponse> ValidatePullThroughCacheRuleAsync(ValidatePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.ECR.AmazonECRConfig : ClientConfig {
    private static string UserAgentString;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonECRConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
}
public static class Amazon.ECR.AmazonECRDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Legacy>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    public static IDefaultConfiguration Legacy { get; }
    private static AmazonECRDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Legacy();
}
public class Amazon.ECR.AmazonECRException : AmazonServiceException {
    public AmazonECRException(string message);
    public AmazonECRException(string message, Exception innerException);
    public AmazonECRException(Exception innerException);
    public AmazonECRException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonECRException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.AmazonECRRequest : AmazonWebServiceRequest {
}
public class Amazon.ECR.EncryptionType : ConstantClass {
    public static EncryptionType AES256;
    public static EncryptionType KMS;
    public EncryptionType(string value);
    private static EncryptionType();
    public static EncryptionType FindValue(string value);
    public static EncryptionType op_Implicit(string value);
}
public class Amazon.ECR.Endpoints.ECREndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.ECR.FindingSeverity : ConstantClass {
    public static FindingSeverity CRITICAL;
    public static FindingSeverity HIGH;
    public static FindingSeverity INFORMATIONAL;
    public static FindingSeverity LOW;
    public static FindingSeverity MEDIUM;
    public static FindingSeverity UNDEFINED;
    public FindingSeverity(string value);
    private static FindingSeverity();
    public static FindingSeverity FindValue(string value);
    public static FindingSeverity op_Implicit(string value);
}
public interface Amazon.ECR.IAmazonECR {
    public IECRPaginatorFactory Paginators { get; }
    public abstract virtual IECRPaginatorFactory get_Paginators();
    public abstract virtual Task`1<BatchCheckLayerAvailabilityResponse> BatchCheckLayerAvailabilityAsync(BatchCheckLayerAvailabilityRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchDeleteImageResponse> BatchDeleteImageAsync(BatchDeleteImageRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchGetImageResponse> BatchGetImageAsync(BatchGetImageRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchGetRepositoryScanningConfigurationResponse> BatchGetRepositoryScanningConfigurationAsync(BatchGetRepositoryScanningConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CompleteLayerUploadResponse> CompleteLayerUploadAsync(CompleteLayerUploadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreatePullThroughCacheRuleResponse> CreatePullThroughCacheRuleAsync(CreatePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateRepositoryResponse> CreateRepositoryAsync(CreateRepositoryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLifecyclePolicyResponse> DeleteLifecyclePolicyAsync(DeleteLifecyclePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeletePullThroughCacheRuleResponse> DeletePullThroughCacheRuleAsync(DeletePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRegistryPolicyResponse> DeleteRegistryPolicyAsync(DeleteRegistryPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRepositoryResponse> DeleteRepositoryAsync(DeleteRepositoryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRepositoryPolicyResponse> DeleteRepositoryPolicyAsync(DeleteRepositoryPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeImageReplicationStatusResponse> DescribeImageReplicationStatusAsync(DescribeImageReplicationStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeImagesResponse> DescribeImagesAsync(DescribeImagesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeImageScanFindingsResponse> DescribeImageScanFindingsAsync(DescribeImageScanFindingsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribePullThroughCacheRulesResponse> DescribePullThroughCacheRulesAsync(DescribePullThroughCacheRulesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeRegistryResponse> DescribeRegistryAsync(DescribeRegistryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeRepositoriesResponse> DescribeRepositoriesAsync(DescribeRepositoriesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAuthorizationTokenResponse> GetAuthorizationTokenAsync(GetAuthorizationTokenRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetDownloadUrlForLayerResponse> GetDownloadUrlForLayerAsync(GetDownloadUrlForLayerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetLifecyclePolicyResponse> GetLifecyclePolicyAsync(GetLifecyclePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetLifecyclePolicyPreviewResponse> GetLifecyclePolicyPreviewAsync(GetLifecyclePolicyPreviewRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetRegistryPolicyResponse> GetRegistryPolicyAsync(GetRegistryPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetRegistryScanningConfigurationResponse> GetRegistryScanningConfigurationAsync(GetRegistryScanningConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetRepositoryPolicyResponse> GetRepositoryPolicyAsync(GetRepositoryPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<InitiateLayerUploadResponse> InitiateLayerUploadAsync(InitiateLayerUploadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListImagesResponse> ListImagesAsync(ListImagesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutImageResponse> PutImageAsync(PutImageRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutImageScanningConfigurationResponse> PutImageScanningConfigurationAsync(PutImageScanningConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutImageTagMutabilityResponse> PutImageTagMutabilityAsync(PutImageTagMutabilityRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutLifecyclePolicyResponse> PutLifecyclePolicyAsync(PutLifecyclePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutRegistryPolicyResponse> PutRegistryPolicyAsync(PutRegistryPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutRegistryScanningConfigurationResponse> PutRegistryScanningConfigurationAsync(PutRegistryScanningConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutReplicationConfigurationResponse> PutReplicationConfigurationAsync(PutReplicationConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SetRepositoryPolicyResponse> SetRepositoryPolicyAsync(SetRepositoryPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartImageScanResponse> StartImageScanAsync(StartImageScanRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartLifecyclePolicyPreviewResponse> StartLifecyclePolicyPreviewAsync(StartLifecyclePolicyPreviewRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdatePullThroughCacheRuleResponse> UpdatePullThroughCacheRuleAsync(UpdatePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UploadLayerPartResponse> UploadLayerPartAsync(UploadLayerPartRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ValidatePullThroughCacheRuleResponse> ValidatePullThroughCacheRuleAsync(ValidatePullThroughCacheRuleRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.ECR.ImageActionType : ConstantClass {
    public static ImageActionType EXPIRE;
    public ImageActionType(string value);
    private static ImageActionType();
    public static ImageActionType FindValue(string value);
    public static ImageActionType op_Implicit(string value);
}
public class Amazon.ECR.ImageFailureCode : ConstantClass {
    public static ImageFailureCode ImageNotFound;
    public static ImageFailureCode ImageReferencedByManifestList;
    public static ImageFailureCode ImageTagDoesNotMatchDigest;
    public static ImageFailureCode InvalidImageDigest;
    public static ImageFailureCode InvalidImageTag;
    public static ImageFailureCode KmsError;
    public static ImageFailureCode MissingDigestAndTag;
    public static ImageFailureCode UpstreamAccessDenied;
    public static ImageFailureCode UpstreamTooManyRequests;
    public static ImageFailureCode UpstreamUnavailable;
    public ImageFailureCode(string value);
    private static ImageFailureCode();
    public static ImageFailureCode FindValue(string value);
    public static ImageFailureCode op_Implicit(string value);
}
public class Amazon.ECR.ImageTagMutability : ConstantClass {
    public static ImageTagMutability IMMUTABLE;
    public static ImageTagMutability MUTABLE;
    public ImageTagMutability(string value);
    private static ImageTagMutability();
    public static ImageTagMutability FindValue(string value);
    public static ImageTagMutability op_Implicit(string value);
}
public class Amazon.ECR.Internal.AmazonECREndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.ECR.Internal.AmazonECREndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.ECR.Internal.AmazonECRMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.ECR.LayerAvailability : ConstantClass {
    public static LayerAvailability AVAILABLE;
    public static LayerAvailability UNAVAILABLE;
    public LayerAvailability(string value);
    private static LayerAvailability();
    public static LayerAvailability FindValue(string value);
    public static LayerAvailability op_Implicit(string value);
}
public class Amazon.ECR.LayerFailureCode : ConstantClass {
    public static LayerFailureCode InvalidLayerDigest;
    public static LayerFailureCode MissingLayerDigest;
    public LayerFailureCode(string value);
    private static LayerFailureCode();
    public static LayerFailureCode FindValue(string value);
    public static LayerFailureCode op_Implicit(string value);
}
public class Amazon.ECR.LifecyclePolicyPreviewStatus : ConstantClass {
    public static LifecyclePolicyPreviewStatus COMPLETE;
    public static LifecyclePolicyPreviewStatus EXPIRED;
    public static LifecyclePolicyPreviewStatus FAILED;
    public static LifecyclePolicyPreviewStatus IN_PROGRESS;
    public LifecyclePolicyPreviewStatus(string value);
    private static LifecyclePolicyPreviewStatus();
    public static LifecyclePolicyPreviewStatus FindValue(string value);
    public static LifecyclePolicyPreviewStatus op_Implicit(string value);
}
public class Amazon.ECR.Model.Attribute : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECR.Model.AuthorizationData : object {
    private string _authorizationToken;
    private Nullable`1<DateTime> _expiresAt;
    private string _proxyEndpoint;
    public string AuthorizationToken { get; public set; }
    public DateTime ExpiresAt { get; public set; }
    public string ProxyEndpoint { get; public set; }
    public string get_AuthorizationToken();
    public void set_AuthorizationToken(string value);
    internal bool IsSetAuthorizationToken();
    public DateTime get_ExpiresAt();
    public void set_ExpiresAt(DateTime value);
    internal bool IsSetExpiresAt();
    public string get_ProxyEndpoint();
    public void set_ProxyEndpoint(string value);
    internal bool IsSetProxyEndpoint();
}
public class Amazon.ECR.Model.AwsEcrContainerImageDetails : object {
    private string _architecture;
    private string _author;
    private string _imageHash;
    private List`1<string> _imageTags;
    private string _platform;
    private Nullable`1<DateTime> _pushedAt;
    private string _registry;
    private string _repositoryName;
    public string Architecture { get; public set; }
    public string Author { get; public set; }
    public string ImageHash { get; public set; }
    public List`1<string> ImageTags { get; public set; }
    public string Platform { get; public set; }
    public DateTime PushedAt { get; public set; }
    public string Registry { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_Architecture();
    public void set_Architecture(string value);
    internal bool IsSetArchitecture();
    public string get_Author();
    public void set_Author(string value);
    internal bool IsSetAuthor();
    public string get_ImageHash();
    public void set_ImageHash(string value);
    internal bool IsSetImageHash();
    public List`1<string> get_ImageTags();
    public void set_ImageTags(List`1<string> value);
    internal bool IsSetImageTags();
    public string get_Platform();
    public void set_Platform(string value);
    internal bool IsSetPlatform();
    public DateTime get_PushedAt();
    public void set_PushedAt(DateTime value);
    internal bool IsSetPushedAt();
    public string get_Registry();
    public void set_Registry(string value);
    internal bool IsSetRegistry();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest : AmazonECRRequest {
    private List`1<string> _layerDigests;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public List`1<string> LayerDigests { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public List`1<string> get_LayerDigests();
    public void set_LayerDigests(List`1<string> value);
    internal bool IsSetLayerDigests();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse : AmazonWebServiceResponse {
    private List`1<LayerFailure> _failures;
    private List`1<Layer> _layers;
    public List`1<LayerFailure> Failures { get; public set; }
    public List`1<Layer> Layers { get; public set; }
    public List`1<LayerFailure> get_Failures();
    public void set_Failures(List`1<LayerFailure> value);
    internal bool IsSetFailures();
    public List`1<Layer> get_Layers();
    public void set_Layers(List`1<Layer> value);
    internal bool IsSetLayers();
}
public class Amazon.ECR.Model.BatchDeleteImageRequest : AmazonECRRequest {
    private List`1<ImageIdentifier> _imageIds;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public List`1<ImageIdentifier> ImageIds { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public List`1<ImageIdentifier> get_ImageIds();
    public void set_ImageIds(List`1<ImageIdentifier> value);
    internal bool IsSetImageIds();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.BatchDeleteImageResponse : AmazonWebServiceResponse {
    private List`1<ImageFailure> _failures;
    private List`1<ImageIdentifier> _imageIds;
    public List`1<ImageFailure> Failures { get; public set; }
    [AWSPropertyAttribute]
public List`1<ImageIdentifier> ImageIds { get; public set; }
    public List`1<ImageFailure> get_Failures();
    public void set_Failures(List`1<ImageFailure> value);
    internal bool IsSetFailures();
    public List`1<ImageIdentifier> get_ImageIds();
    public void set_ImageIds(List`1<ImageIdentifier> value);
    internal bool IsSetImageIds();
}
public class Amazon.ECR.Model.BatchGetImageRequest : AmazonECRRequest {
    private List`1<string> _acceptedMediaTypes;
    private List`1<ImageIdentifier> _imageIds;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public List`1<string> AcceptedMediaTypes { get; public set; }
    [AWSPropertyAttribute]
public List`1<ImageIdentifier> ImageIds { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public List`1<string> get_AcceptedMediaTypes();
    public void set_AcceptedMediaTypes(List`1<string> value);
    internal bool IsSetAcceptedMediaTypes();
    public List`1<ImageIdentifier> get_ImageIds();
    public void set_ImageIds(List`1<ImageIdentifier> value);
    internal bool IsSetImageIds();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.BatchGetImageResponse : AmazonWebServiceResponse {
    private List`1<ImageFailure> _failures;
    private List`1<Image> _images;
    public List`1<ImageFailure> Failures { get; public set; }
    public List`1<Image> Images { get; public set; }
    public List`1<ImageFailure> get_Failures();
    public void set_Failures(List`1<ImageFailure> value);
    internal bool IsSetFailures();
    public List`1<Image> get_Images();
    public void set_Images(List`1<Image> value);
    internal bool IsSetImages();
}
public class Amazon.ECR.Model.BatchGetRepositoryScanningConfigurationRequest : AmazonECRRequest {
    private List`1<string> _repositoryNames;
    [AWSPropertyAttribute]
public List`1<string> RepositoryNames { get; public set; }
    public List`1<string> get_RepositoryNames();
    public void set_RepositoryNames(List`1<string> value);
    internal bool IsSetRepositoryNames();
}
public class Amazon.ECR.Model.BatchGetRepositoryScanningConfigurationResponse : AmazonWebServiceResponse {
    private List`1<RepositoryScanningConfigurationFailure> _failures;
    private List`1<RepositoryScanningConfiguration> _scanningConfigurations;
    public List`1<RepositoryScanningConfigurationFailure> Failures { get; public set; }
    public List`1<RepositoryScanningConfiguration> ScanningConfigurations { get; public set; }
    public List`1<RepositoryScanningConfigurationFailure> get_Failures();
    public void set_Failures(List`1<RepositoryScanningConfigurationFailure> value);
    internal bool IsSetFailures();
    public List`1<RepositoryScanningConfiguration> get_ScanningConfigurations();
    public void set_ScanningConfigurations(List`1<RepositoryScanningConfiguration> value);
    internal bool IsSetScanningConfigurations();
}
public class Amazon.ECR.Model.CompleteLayerUploadRequest : AmazonECRRequest {
    private List`1<string> _layerDigests;
    private string _registryId;
    private string _repositoryName;
    private string _uploadId;
    [AWSPropertyAttribute]
public List`1<string> LayerDigests { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    [AWSPropertyAttribute]
public string UploadId { get; public set; }
    public List`1<string> get_LayerDigests();
    public void set_LayerDigests(List`1<string> value);
    internal bool IsSetLayerDigests();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.ECR.Model.CompleteLayerUploadResponse : AmazonWebServiceResponse {
    private string _layerDigest;
    private string _registryId;
    private string _repositoryName;
    private string _uploadId;
    public string LayerDigest { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string UploadId { get; public set; }
    public string get_LayerDigest();
    public void set_LayerDigest(string value);
    internal bool IsSetLayerDigest();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.ECR.Model.CreatePullThroughCacheRuleRequest : AmazonECRRequest {
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _registryId;
    private UpstreamRegistry _upstreamRegistry;
    private string _upstreamRegistryUrl;
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public UpstreamRegistry UpstreamRegistry { get; public set; }
    [AWSPropertyAttribute]
public string UpstreamRegistryUrl { get; public set; }
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public UpstreamRegistry get_UpstreamRegistry();
    public void set_UpstreamRegistry(UpstreamRegistry value);
    internal bool IsSetUpstreamRegistry();
    public string get_UpstreamRegistryUrl();
    public void set_UpstreamRegistryUrl(string value);
    internal bool IsSetUpstreamRegistryUrl();
}
public class Amazon.ECR.Model.CreatePullThroughCacheRuleResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _createdAt;
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _registryId;
    private UpstreamRegistry _upstreamRegistry;
    private string _upstreamRegistryUrl;
    public DateTime CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public UpstreamRegistry UpstreamRegistry { get; public set; }
    public string UpstreamRegistryUrl { get; public set; }
    public DateTime get_CreatedAt();
    public void set_CreatedAt(DateTime value);
    internal bool IsSetCreatedAt();
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public UpstreamRegistry get_UpstreamRegistry();
    public void set_UpstreamRegistry(UpstreamRegistry value);
    internal bool IsSetUpstreamRegistry();
    public string get_UpstreamRegistryUrl();
    public void set_UpstreamRegistryUrl(string value);
    internal bool IsSetUpstreamRegistryUrl();
}
public class Amazon.ECR.Model.CreateRepositoryRequest : AmazonECRRequest {
    private EncryptionConfiguration _encryptionConfiguration;
    private ImageScanningConfiguration _imageScanningConfiguration;
    private ImageTagMutability _imageTagMutability;
    private string _registryId;
    private string _repositoryName;
    private List`1<Tag> _tags;
    public EncryptionConfiguration EncryptionConfiguration { get; public set; }
    public ImageScanningConfiguration ImageScanningConfiguration { get; public set; }
    public ImageTagMutability ImageTagMutability { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public EncryptionConfiguration get_EncryptionConfiguration();
    public void set_EncryptionConfiguration(EncryptionConfiguration value);
    internal bool IsSetEncryptionConfiguration();
    public ImageScanningConfiguration get_ImageScanningConfiguration();
    public void set_ImageScanningConfiguration(ImageScanningConfiguration value);
    internal bool IsSetImageScanningConfiguration();
    public ImageTagMutability get_ImageTagMutability();
    public void set_ImageTagMutability(ImageTagMutability value);
    internal bool IsSetImageTagMutability();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECR.Model.CreateRepositoryResponse : AmazonWebServiceResponse {
    private Repository _repository;
    public Repository Repository { get; public set; }
    public Repository get_Repository();
    public void set_Repository(Repository value);
    internal bool IsSetRepository();
}
public class Amazon.ECR.Model.CvssScore : object {
    private Nullable`1<double> _baseScore;
    private string _scoringVector;
    private string _source;
    private string _version;
    public double BaseScore { get; public set; }
    public string ScoringVector { get; public set; }
    public string Source { get; public set; }
    public string Version { get; public set; }
    public double get_BaseScore();
    public void set_BaseScore(double value);
    internal bool IsSetBaseScore();
    public string get_ScoringVector();
    public void set_ScoringVector(string value);
    internal bool IsSetScoringVector();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.ECR.Model.CvssScoreAdjustment : object {
    private string _metric;
    private string _reason;
    public string Metric { get; public set; }
    public string Reason { get; public set; }
    public string get_Metric();
    public void set_Metric(string value);
    internal bool IsSetMetric();
    public string get_Reason();
    public void set_Reason(string value);
    internal bool IsSetReason();
}
public class Amazon.ECR.Model.CvssScoreDetails : object {
    private List`1<CvssScoreAdjustment> _adjustments;
    private Nullable`1<double> _score;
    private string _scoreSource;
    private string _scoringVector;
    private string _version;
    public List`1<CvssScoreAdjustment> Adjustments { get; public set; }
    public double Score { get; public set; }
    public string ScoreSource { get; public set; }
    public string ScoringVector { get; public set; }
    public string Version { get; public set; }
    public List`1<CvssScoreAdjustment> get_Adjustments();
    public void set_Adjustments(List`1<CvssScoreAdjustment> value);
    internal bool IsSetAdjustments();
    public double get_Score();
    public void set_Score(double value);
    internal bool IsSetScore();
    public string get_ScoreSource();
    public void set_ScoreSource(string value);
    internal bool IsSetScoreSource();
    public string get_ScoringVector();
    public void set_ScoringVector(string value);
    internal bool IsSetScoringVector();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.ECR.Model.DeleteLifecyclePolicyRequest : AmazonECRRequest {
    private string _registryId;
    private string _repositoryName;
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DeleteLifecyclePolicyResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _lastEvaluatedAt;
    private string _lifecyclePolicyText;
    private string _registryId;
    private string _repositoryName;
    public DateTime LastEvaluatedAt { get; public set; }
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public DateTime get_LastEvaluatedAt();
    public void set_LastEvaluatedAt(DateTime value);
    internal bool IsSetLastEvaluatedAt();
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DeletePullThroughCacheRuleRequest : AmazonECRRequest {
    private string _ecrRepositoryPrefix;
    private string _registryId;
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.DeletePullThroughCacheRuleResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _createdAt;
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _registryId;
    private string _upstreamRegistryUrl;
    public DateTime CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public string UpstreamRegistryUrl { get; public set; }
    public DateTime get_CreatedAt();
    public void set_CreatedAt(DateTime value);
    internal bool IsSetCreatedAt();
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_UpstreamRegistryUrl();
    public void set_UpstreamRegistryUrl(string value);
    internal bool IsSetUpstreamRegistryUrl();
}
public class Amazon.ECR.Model.DeleteRegistryPolicyRequest : AmazonECRRequest {
}
public class Amazon.ECR.Model.DeleteRegistryPolicyResponse : AmazonWebServiceResponse {
    private string _policyText;
    private string _registryId;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.DeleteRepositoryPolicyRequest : AmazonECRRequest {
    private string _registryId;
    private string _repositoryName;
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DeleteRepositoryPolicyResponse : AmazonWebServiceResponse {
    private string _policyText;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DeleteRepositoryRequest : AmazonECRRequest {
    private Nullable`1<bool> _force;
    private string _registryId;
    private string _repositoryName;
    public bool Force { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public bool get_Force();
    public void set_Force(bool value);
    internal bool IsSetForce();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DeleteRepositoryResponse : AmazonWebServiceResponse {
    private Repository _repository;
    public Repository Repository { get; public set; }
    public Repository get_Repository();
    public void set_Repository(Repository value);
    internal bool IsSetRepository();
}
public class Amazon.ECR.Model.DescribeImageReplicationStatusRequest : AmazonECRRequest {
    private ImageIdentifier _imageId;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public ImageIdentifier ImageId { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DescribeImageReplicationStatusResponse : AmazonWebServiceResponse {
    private ImageIdentifier _imageId;
    private List`1<ImageReplicationStatus> _replicationStatuses;
    private string _repositoryName;
    public ImageIdentifier ImageId { get; public set; }
    public List`1<ImageReplicationStatus> ReplicationStatuses { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public List`1<ImageReplicationStatus> get_ReplicationStatuses();
    public void set_ReplicationStatuses(List`1<ImageReplicationStatus> value);
    internal bool IsSetReplicationStatuses();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
internal class Amazon.ECR.Model.DescribeImageScanFindingsPaginator : object {
    private IAmazonECR _client;
    private DescribeImageScanFindingsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeImageScanFindingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ImageScanFinding> Findings { get; }
    public IPaginatedEnumerable`1<EnhancedImageScanFinding> EnhancedFindings { get; }
    internal DescribeImageScanFindingsPaginator(IAmazonECR client, DescribeImageScanFindingsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeImageScanFindingsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ImageScanFinding> get_Findings();
    public sealed virtual IPaginatedEnumerable`1<EnhancedImageScanFinding> get_EnhancedFindings();
    [AsyncIteratorStateMachineAttribute("Amazon.ECR.Model.DescribeImageScanFindingsPaginator/<Amazon-Runtime-IPaginator<Amazon-ECR-Model-DescribeImageScanFindingsResponse>-PaginateAsync>d__10")]
private sealed virtual override IAsyncEnumerable`1<DescribeImageScanFindingsResponse> Amazon.Runtime.IPaginator<Amazon.ECR.Model.DescribeImageScanFindingsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECR.Model.DescribeImageScanFindingsRequest : AmazonECRRequest {
    private ImageIdentifier _imageId;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public ImageIdentifier ImageId { get; public set; }
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DescribeImageScanFindingsResponse : AmazonWebServiceResponse {
    private ImageIdentifier _imageId;
    private ImageScanFindings _imageScanFindings;
    private ImageScanStatus _imageScanStatus;
    private string _nextToken;
    private string _registryId;
    private string _repositoryName;
    public ImageIdentifier ImageId { get; public set; }
    public ImageScanFindings ImageScanFindings { get; public set; }
    public ImageScanStatus ImageScanStatus { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public ImageScanFindings get_ImageScanFindings();
    public void set_ImageScanFindings(ImageScanFindings value);
    internal bool IsSetImageScanFindings();
    public ImageScanStatus get_ImageScanStatus();
    public void set_ImageScanStatus(ImageScanStatus value);
    internal bool IsSetImageScanStatus();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DescribeImagesFilter : object {
    private TagStatus _tagStatus;
    public TagStatus TagStatus { get; public set; }
    public TagStatus get_TagStatus();
    public void set_TagStatus(TagStatus value);
    internal bool IsSetTagStatus();
}
internal class Amazon.ECR.Model.DescribeImagesPaginator : object {
    private IAmazonECR _client;
    private DescribeImagesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeImagesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ImageDetail> ImageDetails { get; }
    internal DescribeImagesPaginator(IAmazonECR client, DescribeImagesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeImagesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ImageDetail> get_ImageDetails();
    [AsyncIteratorStateMachineAttribute("Amazon.ECR.Model.DescribeImagesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECR-Model-DescribeImagesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeImagesResponse> Amazon.Runtime.IPaginator<Amazon.ECR.Model.DescribeImagesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECR.Model.DescribeImagesRequest : AmazonECRRequest {
    private DescribeImagesFilter _filter;
    private List`1<ImageIdentifier> _imageIds;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _registryId;
    private string _repositoryName;
    public DescribeImagesFilter Filter { get; public set; }
    [AWSPropertyAttribute]
public List`1<ImageIdentifier> ImageIds { get; public set; }
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public DescribeImagesFilter get_Filter();
    public void set_Filter(DescribeImagesFilter value);
    internal bool IsSetFilter();
    public List`1<ImageIdentifier> get_ImageIds();
    public void set_ImageIds(List`1<ImageIdentifier> value);
    internal bool IsSetImageIds();
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.DescribeImagesResponse : AmazonWebServiceResponse {
    private List`1<ImageDetail> _imageDetails;
    private string _nextToken;
    public List`1<ImageDetail> ImageDetails { get; public set; }
    public string NextToken { get; public set; }
    public List`1<ImageDetail> get_ImageDetails();
    public void set_ImageDetails(List`1<ImageDetail> value);
    internal bool IsSetImageDetails();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.ECR.Model.DescribePullThroughCacheRulesPaginator : object {
    private IAmazonECR _client;
    private DescribePullThroughCacheRulesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribePullThroughCacheRulesResponse> Responses { get; }
    public IPaginatedEnumerable`1<PullThroughCacheRule> PullThroughCacheRules { get; }
    internal DescribePullThroughCacheRulesPaginator(IAmazonECR client, DescribePullThroughCacheRulesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribePullThroughCacheRulesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PullThroughCacheRule> get_PullThroughCacheRules();
    [AsyncIteratorStateMachineAttribute("Amazon.ECR.Model.DescribePullThroughCacheRulesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECR-Model-DescribePullThroughCacheRulesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribePullThroughCacheRulesResponse> Amazon.Runtime.IPaginator<Amazon.ECR.Model.DescribePullThroughCacheRulesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECR.Model.DescribePullThroughCacheRulesRequest : AmazonECRRequest {
    private List`1<string> _ecrRepositoryPrefixes;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _registryId;
    [AWSPropertyAttribute]
public List`1<string> EcrRepositoryPrefixes { get; public set; }
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    public List`1<string> get_EcrRepositoryPrefixes();
    public void set_EcrRepositoryPrefixes(List`1<string> value);
    internal bool IsSetEcrRepositoryPrefixes();
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.DescribePullThroughCacheRulesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<PullThroughCacheRule> _pullThroughCacheRules;
    public string NextToken { get; public set; }
    public List`1<PullThroughCacheRule> PullThroughCacheRules { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<PullThroughCacheRule> get_PullThroughCacheRules();
    public void set_PullThroughCacheRules(List`1<PullThroughCacheRule> value);
    internal bool IsSetPullThroughCacheRules();
}
public class Amazon.ECR.Model.DescribeRegistryRequest : AmazonECRRequest {
}
public class Amazon.ECR.Model.DescribeRegistryResponse : AmazonWebServiceResponse {
    private string _registryId;
    private ReplicationConfiguration _replicationConfiguration;
    public string RegistryId { get; public set; }
    public ReplicationConfiguration ReplicationConfiguration { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public ReplicationConfiguration get_ReplicationConfiguration();
    public void set_ReplicationConfiguration(ReplicationConfiguration value);
    internal bool IsSetReplicationConfiguration();
}
internal class Amazon.ECR.Model.DescribeRepositoriesPaginator : object {
    private IAmazonECR _client;
    private DescribeRepositoriesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeRepositoriesResponse> Responses { get; }
    public IPaginatedEnumerable`1<Repository> Repositories { get; }
    internal DescribeRepositoriesPaginator(IAmazonECR client, DescribeRepositoriesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeRepositoriesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Repository> get_Repositories();
    [AsyncIteratorStateMachineAttribute("Amazon.ECR.Model.DescribeRepositoriesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECR-Model-DescribeRepositoriesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeRepositoriesResponse> Amazon.Runtime.IPaginator<Amazon.ECR.Model.DescribeRepositoriesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECR.Model.DescribeRepositoriesRequest : AmazonECRRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _registryId;
    private List`1<string> _repositoryNames;
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> RepositoryNames { get; public set; }
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public List`1<string> get_RepositoryNames();
    public void set_RepositoryNames(List`1<string> value);
    internal bool IsSetRepositoryNames();
}
public class Amazon.ECR.Model.DescribeRepositoriesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<Repository> _repositories;
    public string NextToken { get; public set; }
    public List`1<Repository> Repositories { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Repository> get_Repositories();
    public void set_Repositories(List`1<Repository> value);
    internal bool IsSetRepositories();
}
public class Amazon.ECR.Model.ECRPaginatorFactory : object {
    private IAmazonECR client;
    internal ECRPaginatorFactory(IAmazonECR client);
    public sealed virtual IDescribeImagesPaginator DescribeImages(DescribeImagesRequest request);
    public sealed virtual IDescribeImageScanFindingsPaginator DescribeImageScanFindings(DescribeImageScanFindingsRequest request);
    public sealed virtual IDescribePullThroughCacheRulesPaginator DescribePullThroughCacheRules(DescribePullThroughCacheRulesRequest request);
    public sealed virtual IDescribeRepositoriesPaginator DescribeRepositories(DescribeRepositoriesRequest request);
    public sealed virtual IGetLifecyclePolicyPreviewPaginator GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request);
    public sealed virtual IListImagesPaginator ListImages(ListImagesRequest request);
}
public class Amazon.ECR.Model.EmptyUploadException : AmazonECRException {
    public EmptyUploadException(string message);
    public EmptyUploadException(string message, Exception innerException);
    public EmptyUploadException(Exception innerException);
    public EmptyUploadException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EmptyUploadException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.EncryptionConfiguration : object {
    private EncryptionType _encryptionType;
    private string _kmsKey;
    [AWSPropertyAttribute]
public EncryptionType EncryptionType { get; public set; }
    [AWSPropertyAttribute]
public string KmsKey { get; public set; }
    public EncryptionType get_EncryptionType();
    public void set_EncryptionType(EncryptionType value);
    internal bool IsSetEncryptionType();
    public string get_KmsKey();
    public void set_KmsKey(string value);
    internal bool IsSetKmsKey();
}
public class Amazon.ECR.Model.EnhancedImageScanFinding : object {
    private string _awsAccountId;
    private string _description;
    private string _findingArn;
    private Nullable`1<DateTime> _firstObservedAt;
    private Nullable`1<DateTime> _lastObservedAt;
    private PackageVulnerabilityDetails _packageVulnerabilityDetails;
    private Remediation _remediation;
    private List`1<Resource> _resources;
    private Nullable`1<double> _score;
    private ScoreDetails _scoreDetails;
    private string _severity;
    private string _status;
    private string _title;
    private string _type;
    private Nullable`1<DateTime> _updatedAt;
    public string AwsAccountId { get; public set; }
    public string Description { get; public set; }
    public string FindingArn { get; public set; }
    public DateTime FirstObservedAt { get; public set; }
    public DateTime LastObservedAt { get; public set; }
    public PackageVulnerabilityDetails PackageVulnerabilityDetails { get; public set; }
    public Remediation Remediation { get; public set; }
    public List`1<Resource> Resources { get; public set; }
    public double Score { get; public set; }
    public ScoreDetails ScoreDetails { get; public set; }
    public string Severity { get; public set; }
    public string Status { get; public set; }
    public string Title { get; public set; }
    public string Type { get; public set; }
    public DateTime UpdatedAt { get; public set; }
    public string get_AwsAccountId();
    public void set_AwsAccountId(string value);
    internal bool IsSetAwsAccountId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_FindingArn();
    public void set_FindingArn(string value);
    internal bool IsSetFindingArn();
    public DateTime get_FirstObservedAt();
    public void set_FirstObservedAt(DateTime value);
    internal bool IsSetFirstObservedAt();
    public DateTime get_LastObservedAt();
    public void set_LastObservedAt(DateTime value);
    internal bool IsSetLastObservedAt();
    public PackageVulnerabilityDetails get_PackageVulnerabilityDetails();
    public void set_PackageVulnerabilityDetails(PackageVulnerabilityDetails value);
    internal bool IsSetPackageVulnerabilityDetails();
    public Remediation get_Remediation();
    public void set_Remediation(Remediation value);
    internal bool IsSetRemediation();
    public List`1<Resource> get_Resources();
    public void set_Resources(List`1<Resource> value);
    internal bool IsSetResources();
    public double get_Score();
    public void set_Score(double value);
    internal bool IsSetScore();
    public ScoreDetails get_ScoreDetails();
    public void set_ScoreDetails(ScoreDetails value);
    internal bool IsSetScoreDetails();
    public string get_Severity();
    public void set_Severity(string value);
    internal bool IsSetSeverity();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_Title();
    public void set_Title(string value);
    internal bool IsSetTitle();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
    public DateTime get_UpdatedAt();
    public void set_UpdatedAt(DateTime value);
    internal bool IsSetUpdatedAt();
}
public class Amazon.ECR.Model.GetAuthorizationTokenRequest : AmazonECRRequest {
    private List`1<string> _registryIds;
    [ObsoleteAttribute("This field is deprecated. The returned authorization token can be used to access any Amazon ECR registry that the IAM principal has access to, specifying a registry ID doesn't change the permissions scope of the authorization token.")]
[AWSPropertyAttribute]
public List`1<string> RegistryIds { get; public set; }
    public List`1<string> get_RegistryIds();
    public void set_RegistryIds(List`1<string> value);
    internal bool IsSetRegistryIds();
}
public class Amazon.ECR.Model.GetAuthorizationTokenResponse : AmazonWebServiceResponse {
    private List`1<AuthorizationData> _authorizationData;
    public List`1<AuthorizationData> AuthorizationData { get; public set; }
    public List`1<AuthorizationData> get_AuthorizationData();
    public void set_AuthorizationData(List`1<AuthorizationData> value);
    internal bool IsSetAuthorizationData();
}
public class Amazon.ECR.Model.GetDownloadUrlForLayerRequest : AmazonECRRequest {
    private string _layerDigest;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string LayerDigest { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_LayerDigest();
    public void set_LayerDigest(string value);
    internal bool IsSetLayerDigest();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.GetDownloadUrlForLayerResponse : AmazonWebServiceResponse {
    private string _downloadUrl;
    private string _layerDigest;
    public string DownloadUrl { get; public set; }
    public string LayerDigest { get; public set; }
    public string get_DownloadUrl();
    public void set_DownloadUrl(string value);
    internal bool IsSetDownloadUrl();
    public string get_LayerDigest();
    public void set_LayerDigest(string value);
    internal bool IsSetLayerDigest();
}
internal class Amazon.ECR.Model.GetLifecyclePolicyPreviewPaginator : object {
    private IAmazonECR _client;
    private GetLifecyclePolicyPreviewRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<GetLifecyclePolicyPreviewResponse> Responses { get; }
    public IPaginatedEnumerable`1<LifecyclePolicyPreviewResult> PreviewResults { get; }
    internal GetLifecyclePolicyPreviewPaginator(IAmazonECR client, GetLifecyclePolicyPreviewRequest request);
    public sealed virtual IPaginatedEnumerable`1<GetLifecyclePolicyPreviewResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<LifecyclePolicyPreviewResult> get_PreviewResults();
    [AsyncIteratorStateMachineAttribute("Amazon.ECR.Model.GetLifecyclePolicyPreviewPaginator/<Amazon-Runtime-IPaginator<Amazon-ECR-Model-GetLifecyclePolicyPreviewResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<GetLifecyclePolicyPreviewResponse> Amazon.Runtime.IPaginator<Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest : AmazonECRRequest {
    private LifecyclePolicyPreviewFilter _filter;
    private List`1<ImageIdentifier> _imageIds;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _registryId;
    private string _repositoryName;
    public LifecyclePolicyPreviewFilter Filter { get; public set; }
    [AWSPropertyAttribute]
public List`1<ImageIdentifier> ImageIds { get; public set; }
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public LifecyclePolicyPreviewFilter get_Filter();
    public void set_Filter(LifecyclePolicyPreviewFilter value);
    internal bool IsSetFilter();
    public List`1<ImageIdentifier> get_ImageIds();
    public void set_ImageIds(List`1<ImageIdentifier> value);
    internal bool IsSetImageIds();
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse : AmazonWebServiceResponse {
    private string _lifecyclePolicyText;
    private string _nextToken;
    private List`1<LifecyclePolicyPreviewResult> _previewResults;
    private string _registryId;
    private string _repositoryName;
    private LifecyclePolicyPreviewStatus _status;
    private LifecyclePolicyPreviewSummary _summary;
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string NextToken { get; public set; }
    public List`1<LifecyclePolicyPreviewResult> PreviewResults { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public LifecyclePolicyPreviewStatus Status { get; public set; }
    public LifecyclePolicyPreviewSummary Summary { get; public set; }
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<LifecyclePolicyPreviewResult> get_PreviewResults();
    public void set_PreviewResults(List`1<LifecyclePolicyPreviewResult> value);
    internal bool IsSetPreviewResults();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public LifecyclePolicyPreviewStatus get_Status();
    public void set_Status(LifecyclePolicyPreviewStatus value);
    internal bool IsSetStatus();
    public LifecyclePolicyPreviewSummary get_Summary();
    public void set_Summary(LifecyclePolicyPreviewSummary value);
    internal bool IsSetSummary();
}
public class Amazon.ECR.Model.GetLifecyclePolicyRequest : AmazonECRRequest {
    private string _registryId;
    private string _repositoryName;
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.GetLifecyclePolicyResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _lastEvaluatedAt;
    private string _lifecyclePolicyText;
    private string _registryId;
    private string _repositoryName;
    public DateTime LastEvaluatedAt { get; public set; }
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public DateTime get_LastEvaluatedAt();
    public void set_LastEvaluatedAt(DateTime value);
    internal bool IsSetLastEvaluatedAt();
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.GetRegistryPolicyRequest : AmazonECRRequest {
}
public class Amazon.ECR.Model.GetRegistryPolicyResponse : AmazonWebServiceResponse {
    private string _policyText;
    private string _registryId;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.GetRegistryScanningConfigurationRequest : AmazonECRRequest {
}
public class Amazon.ECR.Model.GetRegistryScanningConfigurationResponse : AmazonWebServiceResponse {
    private string _registryId;
    private RegistryScanningConfiguration _scanningConfiguration;
    public string RegistryId { get; public set; }
    public RegistryScanningConfiguration ScanningConfiguration { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public RegistryScanningConfiguration get_ScanningConfiguration();
    public void set_ScanningConfiguration(RegistryScanningConfiguration value);
    internal bool IsSetScanningConfiguration();
}
public class Amazon.ECR.Model.GetRepositoryPolicyRequest : AmazonECRRequest {
    private string _registryId;
    private string _repositoryName;
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.GetRepositoryPolicyResponse : AmazonWebServiceResponse {
    private string _policyText;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public interface Amazon.ECR.Model.IDescribeImageScanFindingsPaginator {
    public IPaginatedEnumerable`1<DescribeImageScanFindingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ImageScanFinding> Findings { get; }
    public IPaginatedEnumerable`1<EnhancedImageScanFinding> EnhancedFindings { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeImageScanFindingsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ImageScanFinding> get_Findings();
    public abstract virtual IPaginatedEnumerable`1<EnhancedImageScanFinding> get_EnhancedFindings();
}
public interface Amazon.ECR.Model.IDescribeImagesPaginator {
    public IPaginatedEnumerable`1<DescribeImagesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ImageDetail> ImageDetails { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeImagesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ImageDetail> get_ImageDetails();
}
public interface Amazon.ECR.Model.IDescribePullThroughCacheRulesPaginator {
    public IPaginatedEnumerable`1<DescribePullThroughCacheRulesResponse> Responses { get; }
    public IPaginatedEnumerable`1<PullThroughCacheRule> PullThroughCacheRules { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribePullThroughCacheRulesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PullThroughCacheRule> get_PullThroughCacheRules();
}
public interface Amazon.ECR.Model.IDescribeRepositoriesPaginator {
    public IPaginatedEnumerable`1<DescribeRepositoriesResponse> Responses { get; }
    public IPaginatedEnumerable`1<Repository> Repositories { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeRepositoriesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Repository> get_Repositories();
}
public interface Amazon.ECR.Model.IECRPaginatorFactory {
    public abstract virtual IDescribeImagesPaginator DescribeImages(DescribeImagesRequest request);
    public abstract virtual IDescribeImageScanFindingsPaginator DescribeImageScanFindings(DescribeImageScanFindingsRequest request);
    public abstract virtual IDescribePullThroughCacheRulesPaginator DescribePullThroughCacheRules(DescribePullThroughCacheRulesRequest request);
    public abstract virtual IDescribeRepositoriesPaginator DescribeRepositories(DescribeRepositoriesRequest request);
    public abstract virtual IGetLifecyclePolicyPreviewPaginator GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request);
    public abstract virtual IListImagesPaginator ListImages(ListImagesRequest request);
}
public interface Amazon.ECR.Model.IGetLifecyclePolicyPreviewPaginator {
    public IPaginatedEnumerable`1<GetLifecyclePolicyPreviewResponse> Responses { get; }
    public IPaginatedEnumerable`1<LifecyclePolicyPreviewResult> PreviewResults { get; }
    public abstract virtual IPaginatedEnumerable`1<GetLifecyclePolicyPreviewResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<LifecyclePolicyPreviewResult> get_PreviewResults();
}
public interface Amazon.ECR.Model.IListImagesPaginator {
    public IPaginatedEnumerable`1<ListImagesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ImageIdentifier> ImageIds { get; }
    public abstract virtual IPaginatedEnumerable`1<ListImagesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ImageIdentifier> get_ImageIds();
}
public class Amazon.ECR.Model.Image : object {
    private ImageIdentifier _imageId;
    private string _imageManifest;
    private string _imageManifestMediaType;
    private string _registryId;
    private string _repositoryName;
    public ImageIdentifier ImageId { get; public set; }
    [AWSPropertyAttribute]
public string ImageManifest { get; public set; }
    public string ImageManifestMediaType { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public string get_ImageManifest();
    public void set_ImageManifest(string value);
    internal bool IsSetImageManifest();
    public string get_ImageManifestMediaType();
    public void set_ImageManifestMediaType(string value);
    internal bool IsSetImageManifestMediaType();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.ImageAlreadyExistsException : AmazonECRException {
    public ImageAlreadyExistsException(string message);
    public ImageAlreadyExistsException(string message, Exception innerException);
    public ImageAlreadyExistsException(Exception innerException);
    public ImageAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ImageAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ImageDetail : object {
    private string _artifactMediaType;
    private string _imageDigest;
    private string _imageManifestMediaType;
    private Nullable`1<DateTime> _imagePushedAt;
    private ImageScanFindingsSummary _imageScanFindingsSummary;
    private ImageScanStatus _imageScanStatus;
    private Nullable`1<long> _imageSizeInBytes;
    private List`1<string> _imageTags;
    private Nullable`1<DateTime> _lastRecordedPullTime;
    private string _registryId;
    private string _repositoryName;
    public string ArtifactMediaType { get; public set; }
    public string ImageDigest { get; public set; }
    public string ImageManifestMediaType { get; public set; }
    public DateTime ImagePushedAt { get; public set; }
    public ImageScanFindingsSummary ImageScanFindingsSummary { get; public set; }
    public ImageScanStatus ImageScanStatus { get; public set; }
    public long ImageSizeInBytes { get; public set; }
    public List`1<string> ImageTags { get; public set; }
    public DateTime LastRecordedPullTime { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_ArtifactMediaType();
    public void set_ArtifactMediaType(string value);
    internal bool IsSetArtifactMediaType();
    public string get_ImageDigest();
    public void set_ImageDigest(string value);
    internal bool IsSetImageDigest();
    public string get_ImageManifestMediaType();
    public void set_ImageManifestMediaType(string value);
    internal bool IsSetImageManifestMediaType();
    public DateTime get_ImagePushedAt();
    public void set_ImagePushedAt(DateTime value);
    internal bool IsSetImagePushedAt();
    public ImageScanFindingsSummary get_ImageScanFindingsSummary();
    public void set_ImageScanFindingsSummary(ImageScanFindingsSummary value);
    internal bool IsSetImageScanFindingsSummary();
    public ImageScanStatus get_ImageScanStatus();
    public void set_ImageScanStatus(ImageScanStatus value);
    internal bool IsSetImageScanStatus();
    public long get_ImageSizeInBytes();
    public void set_ImageSizeInBytes(long value);
    internal bool IsSetImageSizeInBytes();
    public List`1<string> get_ImageTags();
    public void set_ImageTags(List`1<string> value);
    internal bool IsSetImageTags();
    public DateTime get_LastRecordedPullTime();
    public void set_LastRecordedPullTime(DateTime value);
    internal bool IsSetLastRecordedPullTime();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.ImageDigestDoesNotMatchException : AmazonECRException {
    public ImageDigestDoesNotMatchException(string message);
    public ImageDigestDoesNotMatchException(string message, Exception innerException);
    public ImageDigestDoesNotMatchException(Exception innerException);
    public ImageDigestDoesNotMatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ImageDigestDoesNotMatchException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ImageFailure : object {
    private ImageFailureCode _failureCode;
    private string _failureReason;
    private ImageIdentifier _imageId;
    public ImageFailureCode FailureCode { get; public set; }
    public string FailureReason { get; public set; }
    public ImageIdentifier ImageId { get; public set; }
    public ImageFailureCode get_FailureCode();
    public void set_FailureCode(ImageFailureCode value);
    internal bool IsSetFailureCode();
    public string get_FailureReason();
    public void set_FailureReason(string value);
    internal bool IsSetFailureReason();
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
}
public class Amazon.ECR.Model.ImageIdentifier : object {
    private string _imageDigest;
    private string _imageTag;
    public string ImageDigest { get; public set; }
    [AWSPropertyAttribute]
public string ImageTag { get; public set; }
    public string get_ImageDigest();
    public void set_ImageDigest(string value);
    internal bool IsSetImageDigest();
    public string get_ImageTag();
    public void set_ImageTag(string value);
    internal bool IsSetImageTag();
}
public class Amazon.ECR.Model.ImageNotFoundException : AmazonECRException {
    public ImageNotFoundException(string message);
    public ImageNotFoundException(string message, Exception innerException);
    public ImageNotFoundException(Exception innerException);
    public ImageNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ImageNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ImageReplicationStatus : object {
    private string _failureCode;
    private string _region;
    private string _registryId;
    private ReplicationStatus _status;
    public string FailureCode { get; public set; }
    [AWSPropertyAttribute]
public string Region { get; public set; }
    public string RegistryId { get; public set; }
    public ReplicationStatus Status { get; public set; }
    public string get_FailureCode();
    public void set_FailureCode(string value);
    internal bool IsSetFailureCode();
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public ReplicationStatus get_Status();
    public void set_Status(ReplicationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECR.Model.ImageScanFinding : object {
    private List`1<Attribute> _attributes;
    private string _description;
    private string _name;
    private FindingSeverity _severity;
    private string _uri;
    [AWSPropertyAttribute]
public List`1<Attribute> Attributes { get; public set; }
    public string Description { get; public set; }
    public string Name { get; public set; }
    public FindingSeverity Severity { get; public set; }
    public string Uri { get; public set; }
    public List`1<Attribute> get_Attributes();
    public void set_Attributes(List`1<Attribute> value);
    internal bool IsSetAttributes();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public FindingSeverity get_Severity();
    public void set_Severity(FindingSeverity value);
    internal bool IsSetSeverity();
    public string get_Uri();
    public void set_Uri(string value);
    internal bool IsSetUri();
}
public class Amazon.ECR.Model.ImageScanFindings : object {
    private List`1<EnhancedImageScanFinding> _enhancedFindings;
    private List`1<ImageScanFinding> _findings;
    private Dictionary`2<string, int> _findingSeverityCounts;
    private Nullable`1<DateTime> _imageScanCompletedAt;
    private Nullable`1<DateTime> _vulnerabilitySourceUpdatedAt;
    public List`1<EnhancedImageScanFinding> EnhancedFindings { get; public set; }
    public List`1<ImageScanFinding> Findings { get; public set; }
    public Dictionary`2<string, int> FindingSeverityCounts { get; public set; }
    public DateTime ImageScanCompletedAt { get; public set; }
    public DateTime VulnerabilitySourceUpdatedAt { get; public set; }
    public List`1<EnhancedImageScanFinding> get_EnhancedFindings();
    public void set_EnhancedFindings(List`1<EnhancedImageScanFinding> value);
    internal bool IsSetEnhancedFindings();
    public List`1<ImageScanFinding> get_Findings();
    public void set_Findings(List`1<ImageScanFinding> value);
    internal bool IsSetFindings();
    public Dictionary`2<string, int> get_FindingSeverityCounts();
    public void set_FindingSeverityCounts(Dictionary`2<string, int> value);
    internal bool IsSetFindingSeverityCounts();
    public DateTime get_ImageScanCompletedAt();
    public void set_ImageScanCompletedAt(DateTime value);
    internal bool IsSetImageScanCompletedAt();
    public DateTime get_VulnerabilitySourceUpdatedAt();
    public void set_VulnerabilitySourceUpdatedAt(DateTime value);
    internal bool IsSetVulnerabilitySourceUpdatedAt();
}
public class Amazon.ECR.Model.ImageScanFindingsSummary : object {
    private Dictionary`2<string, int> _findingSeverityCounts;
    private Nullable`1<DateTime> _imageScanCompletedAt;
    private Nullable`1<DateTime> _vulnerabilitySourceUpdatedAt;
    public Dictionary`2<string, int> FindingSeverityCounts { get; public set; }
    public DateTime ImageScanCompletedAt { get; public set; }
    public DateTime VulnerabilitySourceUpdatedAt { get; public set; }
    public Dictionary`2<string, int> get_FindingSeverityCounts();
    public void set_FindingSeverityCounts(Dictionary`2<string, int> value);
    internal bool IsSetFindingSeverityCounts();
    public DateTime get_ImageScanCompletedAt();
    public void set_ImageScanCompletedAt(DateTime value);
    internal bool IsSetImageScanCompletedAt();
    public DateTime get_VulnerabilitySourceUpdatedAt();
    public void set_VulnerabilitySourceUpdatedAt(DateTime value);
    internal bool IsSetVulnerabilitySourceUpdatedAt();
}
public class Amazon.ECR.Model.ImageScanningConfiguration : object {
    private Nullable`1<bool> _scanOnPush;
    public bool ScanOnPush { get; public set; }
    public bool get_ScanOnPush();
    public void set_ScanOnPush(bool value);
    internal bool IsSetScanOnPush();
}
public class Amazon.ECR.Model.ImageScanStatus : object {
    private string _description;
    private ScanStatus _status;
    public string Description { get; public set; }
    public ScanStatus Status { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public ScanStatus get_Status();
    public void set_Status(ScanStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECR.Model.ImageTagAlreadyExistsException : AmazonECRException {
    public ImageTagAlreadyExistsException(string message);
    public ImageTagAlreadyExistsException(string message, Exception innerException);
    public ImageTagAlreadyExistsException(Exception innerException);
    public ImageTagAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ImageTagAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.InitiateLayerUploadRequest : AmazonECRRequest {
    private string _registryId;
    private string _repositoryName;
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.InitiateLayerUploadResponse : AmazonWebServiceResponse {
    private Nullable`1<long> _partSize;
    private string _uploadId;
    [AWSPropertyAttribute]
public long PartSize { get; public set; }
    public string UploadId { get; public set; }
    public long get_PartSize();
    public void set_PartSize(long value);
    internal bool IsSetPartSize();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.AttributeUnmarshaller : object {
    private static AttributeUnmarshaller _instance;
    public static AttributeUnmarshaller Instance { get; }
    private static AttributeUnmarshaller();
    private sealed virtual override Attribute Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Attribute,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Attribute Unmarshall(JsonUnmarshallerContext context);
    public static AttributeUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller : object {
    private static AuthorizationDataUnmarshaller _instance;
    public static AuthorizationDataUnmarshaller Instance { get; }
    private static AuthorizationDataUnmarshaller();
    private sealed virtual override AuthorizationData Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.AuthorizationData,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationData Unmarshall(JsonUnmarshallerContext context);
    public static AuthorizationDataUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.AwsEcrContainerImageDetailsUnmarshaller : object {
    private static AwsEcrContainerImageDetailsUnmarshaller _instance;
    public static AwsEcrContainerImageDetailsUnmarshaller Instance { get; }
    private static AwsEcrContainerImageDetailsUnmarshaller();
    private sealed virtual override AwsEcrContainerImageDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.AwsEcrContainerImageDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AwsEcrContainerImageDetails Unmarshall(JsonUnmarshallerContext context);
    public static AwsEcrContainerImageDetailsUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller : object {
    private static BatchCheckLayerAvailabilityRequestMarshaller _instance;
    public static BatchCheckLayerAvailabilityRequestMarshaller Instance { get; }
    private static BatchCheckLayerAvailabilityRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchCheckLayerAvailabilityRequest publicRequest);
    internal static BatchCheckLayerAvailabilityRequestMarshaller GetInstance();
    public static BatchCheckLayerAvailabilityRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller : JsonResponseUnmarshaller {
    private static BatchCheckLayerAvailabilityResponseUnmarshaller _instance;
    public static BatchCheckLayerAvailabilityResponseUnmarshaller Instance { get; }
    private static BatchCheckLayerAvailabilityResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchCheckLayerAvailabilityResponseUnmarshaller GetInstance();
    public static BatchCheckLayerAvailabilityResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller : object {
    private static BatchDeleteImageRequestMarshaller _instance;
    public static BatchDeleteImageRequestMarshaller Instance { get; }
    private static BatchDeleteImageRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchDeleteImageRequest publicRequest);
    internal static BatchDeleteImageRequestMarshaller GetInstance();
    public static BatchDeleteImageRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller : JsonResponseUnmarshaller {
    private static BatchDeleteImageResponseUnmarshaller _instance;
    public static BatchDeleteImageResponseUnmarshaller Instance { get; }
    private static BatchDeleteImageResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchDeleteImageResponseUnmarshaller GetInstance();
    public static BatchDeleteImageResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller : object {
    private static BatchGetImageRequestMarshaller _instance;
    public static BatchGetImageRequestMarshaller Instance { get; }
    private static BatchGetImageRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchGetImageRequest publicRequest);
    internal static BatchGetImageRequestMarshaller GetInstance();
    public static BatchGetImageRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller : JsonResponseUnmarshaller {
    private static BatchGetImageResponseUnmarshaller _instance;
    public static BatchGetImageResponseUnmarshaller Instance { get; }
    private static BatchGetImageResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchGetImageResponseUnmarshaller GetInstance();
    public static BatchGetImageResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetRepositoryScanningConfigurationRequestMarshaller : object {
    private static BatchGetRepositoryScanningConfigurationRequestMarshaller _instance;
    public static BatchGetRepositoryScanningConfigurationRequestMarshaller Instance { get; }
    private static BatchGetRepositoryScanningConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchGetRepositoryScanningConfigurationRequest publicRequest);
    internal static BatchGetRepositoryScanningConfigurationRequestMarshaller GetInstance();
    public static BatchGetRepositoryScanningConfigurationRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetRepositoryScanningConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static BatchGetRepositoryScanningConfigurationResponseUnmarshaller _instance;
    public static BatchGetRepositoryScanningConfigurationResponseUnmarshaller Instance { get; }
    private static BatchGetRepositoryScanningConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchGetRepositoryScanningConfigurationResponseUnmarshaller GetInstance();
    public static BatchGetRepositoryScanningConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller : object {
    private static CompleteLayerUploadRequestMarshaller _instance;
    public static CompleteLayerUploadRequestMarshaller Instance { get; }
    private static CompleteLayerUploadRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CompleteLayerUploadRequest publicRequest);
    internal static CompleteLayerUploadRequestMarshaller GetInstance();
    public static CompleteLayerUploadRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CompleteLayerUploadResponseUnmarshaller _instance;
    public static CompleteLayerUploadResponseUnmarshaller Instance { get; }
    private static CompleteLayerUploadResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CompleteLayerUploadResponseUnmarshaller GetInstance();
    public static CompleteLayerUploadResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CreatePullThroughCacheRuleRequestMarshaller : object {
    private static CreatePullThroughCacheRuleRequestMarshaller _instance;
    public static CreatePullThroughCacheRuleRequestMarshaller Instance { get; }
    private static CreatePullThroughCacheRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreatePullThroughCacheRuleRequest publicRequest);
    internal static CreatePullThroughCacheRuleRequestMarshaller GetInstance();
    public static CreatePullThroughCacheRuleRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CreatePullThroughCacheRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreatePullThroughCacheRuleResponseUnmarshaller _instance;
    public static CreatePullThroughCacheRuleResponseUnmarshaller Instance { get; }
    private static CreatePullThroughCacheRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreatePullThroughCacheRuleResponseUnmarshaller GetInstance();
    public static CreatePullThroughCacheRuleResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller : object {
    private static CreateRepositoryRequestMarshaller _instance;
    public static CreateRepositoryRequestMarshaller Instance { get; }
    private static CreateRepositoryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateRepositoryRequest publicRequest);
    internal static CreateRepositoryRequestMarshaller GetInstance();
    public static CreateRepositoryRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateRepositoryResponseUnmarshaller _instance;
    public static CreateRepositoryResponseUnmarshaller Instance { get; }
    private static CreateRepositoryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateRepositoryResponseUnmarshaller GetInstance();
    public static CreateRepositoryResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CvssScoreAdjustmentUnmarshaller : object {
    private static CvssScoreAdjustmentUnmarshaller _instance;
    public static CvssScoreAdjustmentUnmarshaller Instance { get; }
    private static CvssScoreAdjustmentUnmarshaller();
    private sealed virtual override CvssScoreAdjustment Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.CvssScoreAdjustment,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CvssScoreAdjustment Unmarshall(JsonUnmarshallerContext context);
    public static CvssScoreAdjustmentUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CvssScoreDetailsUnmarshaller : object {
    private static CvssScoreDetailsUnmarshaller _instance;
    public static CvssScoreDetailsUnmarshaller Instance { get; }
    private static CvssScoreDetailsUnmarshaller();
    private sealed virtual override CvssScoreDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.CvssScoreDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CvssScoreDetails Unmarshall(JsonUnmarshallerContext context);
    public static CvssScoreDetailsUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.CvssScoreUnmarshaller : object {
    private static CvssScoreUnmarshaller _instance;
    public static CvssScoreUnmarshaller Instance { get; }
    private static CvssScoreUnmarshaller();
    private sealed virtual override CvssScore Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.CvssScore,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CvssScore Unmarshall(JsonUnmarshallerContext context);
    public static CvssScoreUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyRequestMarshaller : object {
    private static DeleteLifecyclePolicyRequestMarshaller _instance;
    public static DeleteLifecyclePolicyRequestMarshaller Instance { get; }
    private static DeleteLifecyclePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteLifecyclePolicyRequest publicRequest);
    internal static DeleteLifecyclePolicyRequestMarshaller GetInstance();
    public static DeleteLifecyclePolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteLifecyclePolicyResponseUnmarshaller _instance;
    public static DeleteLifecyclePolicyResponseUnmarshaller Instance { get; }
    private static DeleteLifecyclePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteLifecyclePolicyResponseUnmarshaller GetInstance();
    public static DeleteLifecyclePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeletePullThroughCacheRuleRequestMarshaller : object {
    private static DeletePullThroughCacheRuleRequestMarshaller _instance;
    public static DeletePullThroughCacheRuleRequestMarshaller Instance { get; }
    private static DeletePullThroughCacheRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePullThroughCacheRuleRequest publicRequest);
    internal static DeletePullThroughCacheRuleRequestMarshaller GetInstance();
    public static DeletePullThroughCacheRuleRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeletePullThroughCacheRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeletePullThroughCacheRuleResponseUnmarshaller _instance;
    public static DeletePullThroughCacheRuleResponseUnmarshaller Instance { get; }
    private static DeletePullThroughCacheRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePullThroughCacheRuleResponseUnmarshaller GetInstance();
    public static DeletePullThroughCacheRuleResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRegistryPolicyRequestMarshaller : object {
    private static DeleteRegistryPolicyRequestMarshaller _instance;
    public static DeleteRegistryPolicyRequestMarshaller Instance { get; }
    private static DeleteRegistryPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRegistryPolicyRequest publicRequest);
    internal static DeleteRegistryPolicyRequestMarshaller GetInstance();
    public static DeleteRegistryPolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRegistryPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteRegistryPolicyResponseUnmarshaller _instance;
    public static DeleteRegistryPolicyResponseUnmarshaller Instance { get; }
    private static DeleteRegistryPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRegistryPolicyResponseUnmarshaller GetInstance();
    public static DeleteRegistryPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller : object {
    private static DeleteRepositoryPolicyRequestMarshaller _instance;
    public static DeleteRepositoryPolicyRequestMarshaller Instance { get; }
    private static DeleteRepositoryPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRepositoryPolicyRequest publicRequest);
    internal static DeleteRepositoryPolicyRequestMarshaller GetInstance();
    public static DeleteRepositoryPolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteRepositoryPolicyResponseUnmarshaller _instance;
    public static DeleteRepositoryPolicyResponseUnmarshaller Instance { get; }
    private static DeleteRepositoryPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRepositoryPolicyResponseUnmarshaller GetInstance();
    public static DeleteRepositoryPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller : object {
    private static DeleteRepositoryRequestMarshaller _instance;
    public static DeleteRepositoryRequestMarshaller Instance { get; }
    private static DeleteRepositoryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRepositoryRequest publicRequest);
    internal static DeleteRepositoryRequestMarshaller GetInstance();
    public static DeleteRepositoryRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteRepositoryResponseUnmarshaller _instance;
    public static DeleteRepositoryResponseUnmarshaller Instance { get; }
    private static DeleteRepositoryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRepositoryResponseUnmarshaller GetInstance();
    public static DeleteRepositoryResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImageReplicationStatusRequestMarshaller : object {
    private static DescribeImageReplicationStatusRequestMarshaller _instance;
    public static DescribeImageReplicationStatusRequestMarshaller Instance { get; }
    private static DescribeImageReplicationStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeImageReplicationStatusRequest publicRequest);
    internal static DescribeImageReplicationStatusRequestMarshaller GetInstance();
    public static DescribeImageReplicationStatusRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImageReplicationStatusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeImageReplicationStatusResponseUnmarshaller _instance;
    public static DescribeImageReplicationStatusResponseUnmarshaller Instance { get; }
    private static DescribeImageReplicationStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeImageReplicationStatusResponseUnmarshaller GetInstance();
    public static DescribeImageReplicationStatusResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImageScanFindingsRequestMarshaller : object {
    private static DescribeImageScanFindingsRequestMarshaller _instance;
    public static DescribeImageScanFindingsRequestMarshaller Instance { get; }
    private static DescribeImageScanFindingsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeImageScanFindingsRequest publicRequest);
    internal static DescribeImageScanFindingsRequestMarshaller GetInstance();
    public static DescribeImageScanFindingsRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImageScanFindingsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeImageScanFindingsResponseUnmarshaller _instance;
    public static DescribeImageScanFindingsResponseUnmarshaller Instance { get; }
    private static DescribeImageScanFindingsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeImageScanFindingsResponseUnmarshaller GetInstance();
    public static DescribeImageScanFindingsResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesFilterMarshaller : object {
    public static DescribeImagesFilterMarshaller Instance;
    private static DescribeImagesFilterMarshaller();
    public sealed virtual void Marshall(DescribeImagesFilter requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller : object {
    private static DescribeImagesRequestMarshaller _instance;
    public static DescribeImagesRequestMarshaller Instance { get; }
    private static DescribeImagesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeImagesRequest publicRequest);
    internal static DescribeImagesRequestMarshaller GetInstance();
    public static DescribeImagesRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeImagesResponseUnmarshaller _instance;
    public static DescribeImagesResponseUnmarshaller Instance { get; }
    private static DescribeImagesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeImagesResponseUnmarshaller GetInstance();
    public static DescribeImagesResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribePullThroughCacheRulesRequestMarshaller : object {
    private static DescribePullThroughCacheRulesRequestMarshaller _instance;
    public static DescribePullThroughCacheRulesRequestMarshaller Instance { get; }
    private static DescribePullThroughCacheRulesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribePullThroughCacheRulesRequest publicRequest);
    internal static DescribePullThroughCacheRulesRequestMarshaller GetInstance();
    public static DescribePullThroughCacheRulesRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribePullThroughCacheRulesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribePullThroughCacheRulesResponseUnmarshaller _instance;
    public static DescribePullThroughCacheRulesResponseUnmarshaller Instance { get; }
    private static DescribePullThroughCacheRulesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribePullThroughCacheRulesResponseUnmarshaller GetInstance();
    public static DescribePullThroughCacheRulesResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRegistryRequestMarshaller : object {
    private static DescribeRegistryRequestMarshaller _instance;
    public static DescribeRegistryRequestMarshaller Instance { get; }
    private static DescribeRegistryRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeRegistryRequest publicRequest);
    internal static DescribeRegistryRequestMarshaller GetInstance();
    public static DescribeRegistryRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRegistryResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeRegistryResponseUnmarshaller _instance;
    public static DescribeRegistryResponseUnmarshaller Instance { get; }
    private static DescribeRegistryResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeRegistryResponseUnmarshaller GetInstance();
    public static DescribeRegistryResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller : object {
    private static DescribeRepositoriesRequestMarshaller _instance;
    public static DescribeRepositoriesRequestMarshaller Instance { get; }
    private static DescribeRepositoriesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeRepositoriesRequest publicRequest);
    internal static DescribeRepositoriesRequestMarshaller GetInstance();
    public static DescribeRepositoriesRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeRepositoriesResponseUnmarshaller _instance;
    public static DescribeRepositoriesResponseUnmarshaller Instance { get; }
    private static DescribeRepositoriesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeRepositoriesResponseUnmarshaller GetInstance();
    public static DescribeRepositoriesResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.EmptyUploadExceptionUnmarshaller : object {
    private static EmptyUploadExceptionUnmarshaller _instance;
    public static EmptyUploadExceptionUnmarshaller Instance { get; }
    private static EmptyUploadExceptionUnmarshaller();
    public sealed virtual EmptyUploadException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual EmptyUploadException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static EmptyUploadExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.EncryptionConfigurationMarshaller : object {
    public static EncryptionConfigurationMarshaller Instance;
    private static EncryptionConfigurationMarshaller();
    public sealed virtual void Marshall(EncryptionConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.EncryptionConfigurationUnmarshaller : object {
    private static EncryptionConfigurationUnmarshaller _instance;
    public static EncryptionConfigurationUnmarshaller Instance { get; }
    private static EncryptionConfigurationUnmarshaller();
    private sealed virtual override EncryptionConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.EncryptionConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EncryptionConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static EncryptionConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.EnhancedImageScanFindingUnmarshaller : object {
    private static EnhancedImageScanFindingUnmarshaller _instance;
    public static EnhancedImageScanFindingUnmarshaller Instance { get; }
    private static EnhancedImageScanFindingUnmarshaller();
    private sealed virtual override EnhancedImageScanFinding Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.EnhancedImageScanFinding,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EnhancedImageScanFinding Unmarshall(JsonUnmarshallerContext context);
    public static EnhancedImageScanFindingUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller : object {
    private static GetAuthorizationTokenRequestMarshaller _instance;
    public static GetAuthorizationTokenRequestMarshaller Instance { get; }
    private static GetAuthorizationTokenRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAuthorizationTokenRequest publicRequest);
    internal static GetAuthorizationTokenRequestMarshaller GetInstance();
    public static GetAuthorizationTokenRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetAuthorizationTokenResponseUnmarshaller _instance;
    public static GetAuthorizationTokenResponseUnmarshaller Instance { get; }
    private static GetAuthorizationTokenResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAuthorizationTokenResponseUnmarshaller GetInstance();
    public static GetAuthorizationTokenResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller : object {
    private static GetDownloadUrlForLayerRequestMarshaller _instance;
    public static GetDownloadUrlForLayerRequestMarshaller Instance { get; }
    private static GetDownloadUrlForLayerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetDownloadUrlForLayerRequest publicRequest);
    internal static GetDownloadUrlForLayerRequestMarshaller GetInstance();
    public static GetDownloadUrlForLayerRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetDownloadUrlForLayerResponseUnmarshaller _instance;
    public static GetDownloadUrlForLayerResponseUnmarshaller Instance { get; }
    private static GetDownloadUrlForLayerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetDownloadUrlForLayerResponseUnmarshaller GetInstance();
    public static GetDownloadUrlForLayerResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewRequestMarshaller : object {
    private static GetLifecyclePolicyPreviewRequestMarshaller _instance;
    public static GetLifecyclePolicyPreviewRequestMarshaller Instance { get; }
    private static GetLifecyclePolicyPreviewRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetLifecyclePolicyPreviewRequest publicRequest);
    internal static GetLifecyclePolicyPreviewRequestMarshaller GetInstance();
    public static GetLifecyclePolicyPreviewRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetLifecyclePolicyPreviewResponseUnmarshaller _instance;
    public static GetLifecyclePolicyPreviewResponseUnmarshaller Instance { get; }
    private static GetLifecyclePolicyPreviewResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetLifecyclePolicyPreviewResponseUnmarshaller GetInstance();
    public static GetLifecyclePolicyPreviewResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyRequestMarshaller : object {
    private static GetLifecyclePolicyRequestMarshaller _instance;
    public static GetLifecyclePolicyRequestMarshaller Instance { get; }
    private static GetLifecyclePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetLifecyclePolicyRequest publicRequest);
    internal static GetLifecyclePolicyRequestMarshaller GetInstance();
    public static GetLifecyclePolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetLifecyclePolicyResponseUnmarshaller _instance;
    public static GetLifecyclePolicyResponseUnmarshaller Instance { get; }
    private static GetLifecyclePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetLifecyclePolicyResponseUnmarshaller GetInstance();
    public static GetLifecyclePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetRegistryPolicyRequestMarshaller : object {
    private static GetRegistryPolicyRequestMarshaller _instance;
    public static GetRegistryPolicyRequestMarshaller Instance { get; }
    private static GetRegistryPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetRegistryPolicyRequest publicRequest);
    internal static GetRegistryPolicyRequestMarshaller GetInstance();
    public static GetRegistryPolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetRegistryPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetRegistryPolicyResponseUnmarshaller _instance;
    public static GetRegistryPolicyResponseUnmarshaller Instance { get; }
    private static GetRegistryPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetRegistryPolicyResponseUnmarshaller GetInstance();
    public static GetRegistryPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetRegistryScanningConfigurationRequestMarshaller : object {
    private static GetRegistryScanningConfigurationRequestMarshaller _instance;
    public static GetRegistryScanningConfigurationRequestMarshaller Instance { get; }
    private static GetRegistryScanningConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetRegistryScanningConfigurationRequest publicRequest);
    internal static GetRegistryScanningConfigurationRequestMarshaller GetInstance();
    public static GetRegistryScanningConfigurationRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetRegistryScanningConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetRegistryScanningConfigurationResponseUnmarshaller _instance;
    public static GetRegistryScanningConfigurationResponseUnmarshaller Instance { get; }
    private static GetRegistryScanningConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetRegistryScanningConfigurationResponseUnmarshaller GetInstance();
    public static GetRegistryScanningConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller : object {
    private static GetRepositoryPolicyRequestMarshaller _instance;
    public static GetRepositoryPolicyRequestMarshaller Instance { get; }
    private static GetRepositoryPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetRepositoryPolicyRequest publicRequest);
    internal static GetRepositoryPolicyRequestMarshaller GetInstance();
    public static GetRepositoryPolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetRepositoryPolicyResponseUnmarshaller _instance;
    public static GetRepositoryPolicyResponseUnmarshaller Instance { get; }
    private static GetRepositoryPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetRepositoryPolicyResponseUnmarshaller GetInstance();
    public static GetRepositoryPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageAlreadyExistsExceptionUnmarshaller : object {
    private static ImageAlreadyExistsExceptionUnmarshaller _instance;
    public static ImageAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ImageAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ImageAlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ImageAlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ImageAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller : object {
    private static ImageDetailUnmarshaller _instance;
    public static ImageDetailUnmarshaller Instance { get; }
    private static ImageDetailUnmarshaller();
    private sealed virtual override ImageDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageDetail Unmarshall(JsonUnmarshallerContext context);
    public static ImageDetailUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageDigestDoesNotMatchExceptionUnmarshaller : object {
    private static ImageDigestDoesNotMatchExceptionUnmarshaller _instance;
    public static ImageDigestDoesNotMatchExceptionUnmarshaller Instance { get; }
    private static ImageDigestDoesNotMatchExceptionUnmarshaller();
    public sealed virtual ImageDigestDoesNotMatchException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ImageDigestDoesNotMatchException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ImageDigestDoesNotMatchExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller : object {
    private static ImageFailureUnmarshaller _instance;
    public static ImageFailureUnmarshaller Instance { get; }
    private static ImageFailureUnmarshaller();
    private sealed virtual override ImageFailure Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageFailure,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageFailure Unmarshall(JsonUnmarshallerContext context);
    public static ImageFailureUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller : object {
    public static ImageIdentifierMarshaller Instance;
    private static ImageIdentifierMarshaller();
    public sealed virtual void Marshall(ImageIdentifier requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller : object {
    private static ImageIdentifierUnmarshaller _instance;
    public static ImageIdentifierUnmarshaller Instance { get; }
    private static ImageIdentifierUnmarshaller();
    private sealed virtual override ImageIdentifier Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageIdentifier,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageIdentifier Unmarshall(JsonUnmarshallerContext context);
    public static ImageIdentifierUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageNotFoundExceptionUnmarshaller : object {
    private static ImageNotFoundExceptionUnmarshaller _instance;
    public static ImageNotFoundExceptionUnmarshaller Instance { get; }
    private static ImageNotFoundExceptionUnmarshaller();
    public sealed virtual ImageNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ImageNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ImageNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageReplicationStatusUnmarshaller : object {
    private static ImageReplicationStatusUnmarshaller _instance;
    public static ImageReplicationStatusUnmarshaller Instance { get; }
    private static ImageReplicationStatusUnmarshaller();
    private sealed virtual override ImageReplicationStatus Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageReplicationStatus,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageReplicationStatus Unmarshall(JsonUnmarshallerContext context);
    public static ImageReplicationStatusUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageScanFindingsSummaryUnmarshaller : object {
    private static ImageScanFindingsSummaryUnmarshaller _instance;
    public static ImageScanFindingsSummaryUnmarshaller Instance { get; }
    private static ImageScanFindingsSummaryUnmarshaller();
    private sealed virtual override ImageScanFindingsSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageScanFindingsSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageScanFindingsSummary Unmarshall(JsonUnmarshallerContext context);
    public static ImageScanFindingsSummaryUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageScanFindingsUnmarshaller : object {
    private static ImageScanFindingsUnmarshaller _instance;
    public static ImageScanFindingsUnmarshaller Instance { get; }
    private static ImageScanFindingsUnmarshaller();
    private sealed virtual override ImageScanFindings Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageScanFindings,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageScanFindings Unmarshall(JsonUnmarshallerContext context);
    public static ImageScanFindingsUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageScanFindingUnmarshaller : object {
    private static ImageScanFindingUnmarshaller _instance;
    public static ImageScanFindingUnmarshaller Instance { get; }
    private static ImageScanFindingUnmarshaller();
    private sealed virtual override ImageScanFinding Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageScanFinding,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageScanFinding Unmarshall(JsonUnmarshallerContext context);
    public static ImageScanFindingUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageScanningConfigurationMarshaller : object {
    public static ImageScanningConfigurationMarshaller Instance;
    private static ImageScanningConfigurationMarshaller();
    public sealed virtual void Marshall(ImageScanningConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageScanningConfigurationUnmarshaller : object {
    private static ImageScanningConfigurationUnmarshaller _instance;
    public static ImageScanningConfigurationUnmarshaller Instance { get; }
    private static ImageScanningConfigurationUnmarshaller();
    private sealed virtual override ImageScanningConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageScanningConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageScanningConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ImageScanningConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageScanStatusUnmarshaller : object {
    private static ImageScanStatusUnmarshaller _instance;
    public static ImageScanStatusUnmarshaller Instance { get; }
    private static ImageScanStatusUnmarshaller();
    private sealed virtual override ImageScanStatus Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ImageScanStatus,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ImageScanStatus Unmarshall(JsonUnmarshallerContext context);
    public static ImageScanStatusUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageTagAlreadyExistsExceptionUnmarshaller : object {
    private static ImageTagAlreadyExistsExceptionUnmarshaller _instance;
    public static ImageTagAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ImageTagAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ImageTagAlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ImageTagAlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ImageTagAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller : object {
    private static ImageUnmarshaller _instance;
    public static ImageUnmarshaller Instance { get; }
    private static ImageUnmarshaller();
    private sealed virtual override Image Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Image,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Image Unmarshall(JsonUnmarshallerContext context);
    public static ImageUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller : object {
    private static InitiateLayerUploadRequestMarshaller _instance;
    public static InitiateLayerUploadRequestMarshaller Instance { get; }
    private static InitiateLayerUploadRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(InitiateLayerUploadRequest publicRequest);
    internal static InitiateLayerUploadRequestMarshaller GetInstance();
    public static InitiateLayerUploadRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller : JsonResponseUnmarshaller {
    private static InitiateLayerUploadResponseUnmarshaller _instance;
    public static InitiateLayerUploadResponseUnmarshaller Instance { get; }
    private static InitiateLayerUploadResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static InitiateLayerUploadResponseUnmarshaller GetInstance();
    public static InitiateLayerUploadResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.InvalidLayerExceptionUnmarshaller : object {
    private static InvalidLayerExceptionUnmarshaller _instance;
    public static InvalidLayerExceptionUnmarshaller Instance { get; }
    private static InvalidLayerExceptionUnmarshaller();
    public sealed virtual InvalidLayerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidLayerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidLayerExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.InvalidLayerPartExceptionUnmarshaller : object {
    private static InvalidLayerPartExceptionUnmarshaller _instance;
    public static InvalidLayerPartExceptionUnmarshaller Instance { get; }
    private static InvalidLayerPartExceptionUnmarshaller();
    public sealed virtual InvalidLayerPartException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidLayerPartException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidLayerPartExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller : object {
    private static InvalidParameterExceptionUnmarshaller _instance;
    public static InvalidParameterExceptionUnmarshaller Instance { get; }
    private static InvalidParameterExceptionUnmarshaller();
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidParameterException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidParameterExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.InvalidTagParameterExceptionUnmarshaller : object {
    private static InvalidTagParameterExceptionUnmarshaller _instance;
    public static InvalidTagParameterExceptionUnmarshaller Instance { get; }
    private static InvalidTagParameterExceptionUnmarshaller();
    public sealed virtual InvalidTagParameterException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidTagParameterException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidTagParameterExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.KmsExceptionUnmarshaller : object {
    private static KmsExceptionUnmarshaller _instance;
    public static KmsExceptionUnmarshaller Instance { get; }
    private static KmsExceptionUnmarshaller();
    public sealed virtual KmsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual KmsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static KmsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LayerAlreadyExistsExceptionUnmarshaller : object {
    private static LayerAlreadyExistsExceptionUnmarshaller _instance;
    public static LayerAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static LayerAlreadyExistsExceptionUnmarshaller();
    public sealed virtual LayerAlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LayerAlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LayerAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller : object {
    private static LayerFailureUnmarshaller _instance;
    public static LayerFailureUnmarshaller Instance { get; }
    private static LayerFailureUnmarshaller();
    private sealed virtual override LayerFailure Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.LayerFailure,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LayerFailure Unmarshall(JsonUnmarshallerContext context);
    public static LayerFailureUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LayerInaccessibleExceptionUnmarshaller : object {
    private static LayerInaccessibleExceptionUnmarshaller _instance;
    public static LayerInaccessibleExceptionUnmarshaller Instance { get; }
    private static LayerInaccessibleExceptionUnmarshaller();
    public sealed virtual LayerInaccessibleException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LayerInaccessibleException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LayerInaccessibleExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LayerPartTooSmallExceptionUnmarshaller : object {
    private static LayerPartTooSmallExceptionUnmarshaller _instance;
    public static LayerPartTooSmallExceptionUnmarshaller Instance { get; }
    private static LayerPartTooSmallExceptionUnmarshaller();
    public sealed virtual LayerPartTooSmallException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LayerPartTooSmallException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LayerPartTooSmallExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LayersNotFoundExceptionUnmarshaller : object {
    private static LayersNotFoundExceptionUnmarshaller _instance;
    public static LayersNotFoundExceptionUnmarshaller Instance { get; }
    private static LayersNotFoundExceptionUnmarshaller();
    public sealed virtual LayersNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LayersNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LayersNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller : object {
    private static LayerUnmarshaller _instance;
    public static LayerUnmarshaller Instance { get; }
    private static LayerUnmarshaller();
    private sealed virtual override Layer Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Layer,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Layer Unmarshall(JsonUnmarshallerContext context);
    public static LayerUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyNotFoundExceptionUnmarshaller : object {
    private static LifecyclePolicyNotFoundExceptionUnmarshaller _instance;
    public static LifecyclePolicyNotFoundExceptionUnmarshaller Instance { get; }
    private static LifecyclePolicyNotFoundExceptionUnmarshaller();
    public sealed virtual LifecyclePolicyNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LifecyclePolicyNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LifecyclePolicyNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewFilterMarshaller : object {
    public static LifecyclePolicyPreviewFilterMarshaller Instance;
    private static LifecyclePolicyPreviewFilterMarshaller();
    public sealed virtual void Marshall(LifecyclePolicyPreviewFilter requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewInProgressExceptionUnmarshaller : object {
    private static LifecyclePolicyPreviewInProgressExceptionUnmarshaller _instance;
    public static LifecyclePolicyPreviewInProgressExceptionUnmarshaller Instance { get; }
    private static LifecyclePolicyPreviewInProgressExceptionUnmarshaller();
    public sealed virtual LifecyclePolicyPreviewInProgressException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LifecyclePolicyPreviewInProgressException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LifecyclePolicyPreviewInProgressExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewNotFoundExceptionUnmarshaller : object {
    private static LifecyclePolicyPreviewNotFoundExceptionUnmarshaller _instance;
    public static LifecyclePolicyPreviewNotFoundExceptionUnmarshaller Instance { get; }
    private static LifecyclePolicyPreviewNotFoundExceptionUnmarshaller();
    public sealed virtual LifecyclePolicyPreviewNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LifecyclePolicyPreviewNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LifecyclePolicyPreviewNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewResultUnmarshaller : object {
    private static LifecyclePolicyPreviewResultUnmarshaller _instance;
    public static LifecyclePolicyPreviewResultUnmarshaller Instance { get; }
    private static LifecyclePolicyPreviewResultUnmarshaller();
    private sealed virtual override LifecyclePolicyPreviewResult Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.LifecyclePolicyPreviewResult,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecyclePolicyPreviewResult Unmarshall(JsonUnmarshallerContext context);
    public static LifecyclePolicyPreviewResultUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewSummaryUnmarshaller : object {
    private static LifecyclePolicyPreviewSummaryUnmarshaller _instance;
    public static LifecyclePolicyPreviewSummaryUnmarshaller Instance { get; }
    private static LifecyclePolicyPreviewSummaryUnmarshaller();
    private sealed virtual override LifecyclePolicyPreviewSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.LifecyclePolicyPreviewSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecyclePolicyPreviewSummary Unmarshall(JsonUnmarshallerContext context);
    public static LifecyclePolicyPreviewSummaryUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyRuleActionUnmarshaller : object {
    private static LifecyclePolicyRuleActionUnmarshaller _instance;
    public static LifecyclePolicyRuleActionUnmarshaller Instance { get; }
    private static LifecyclePolicyRuleActionUnmarshaller();
    private sealed virtual override LifecyclePolicyRuleAction Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.LifecyclePolicyRuleAction,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecyclePolicyRuleAction Unmarshall(JsonUnmarshallerContext context);
    public static LifecyclePolicyRuleActionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesFilterMarshaller : object {
    public static ListImagesFilterMarshaller Instance;
    private static ListImagesFilterMarshaller();
    public sealed virtual void Marshall(ListImagesFilter requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller : object {
    private static ListImagesRequestMarshaller _instance;
    public static ListImagesRequestMarshaller Instance { get; }
    private static ListImagesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListImagesRequest publicRequest);
    internal static ListImagesRequestMarshaller GetInstance();
    public static ListImagesRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListImagesResponseUnmarshaller _instance;
    public static ListImagesResponseUnmarshaller Instance { get; }
    private static ListImagesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListImagesResponseUnmarshaller GetInstance();
    public static ListImagesResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PackageVulnerabilityDetailsUnmarshaller : object {
    private static PackageVulnerabilityDetailsUnmarshaller _instance;
    public static PackageVulnerabilityDetailsUnmarshaller Instance { get; }
    private static PackageVulnerabilityDetailsUnmarshaller();
    private sealed virtual override PackageVulnerabilityDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.PackageVulnerabilityDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PackageVulnerabilityDetails Unmarshall(JsonUnmarshallerContext context);
    public static PackageVulnerabilityDetailsUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PullThroughCacheRuleAlreadyExistsExceptionUnmarshaller : object {
    private static PullThroughCacheRuleAlreadyExistsExceptionUnmarshaller _instance;
    public static PullThroughCacheRuleAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static PullThroughCacheRuleAlreadyExistsExceptionUnmarshaller();
    public sealed virtual PullThroughCacheRuleAlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual PullThroughCacheRuleAlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static PullThroughCacheRuleAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PullThroughCacheRuleNotFoundExceptionUnmarshaller : object {
    private static PullThroughCacheRuleNotFoundExceptionUnmarshaller _instance;
    public static PullThroughCacheRuleNotFoundExceptionUnmarshaller Instance { get; }
    private static PullThroughCacheRuleNotFoundExceptionUnmarshaller();
    public sealed virtual PullThroughCacheRuleNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual PullThroughCacheRuleNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static PullThroughCacheRuleNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PullThroughCacheRuleUnmarshaller : object {
    private static PullThroughCacheRuleUnmarshaller _instance;
    public static PullThroughCacheRuleUnmarshaller Instance { get; }
    private static PullThroughCacheRuleUnmarshaller();
    private sealed virtual override PullThroughCacheRule Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.PullThroughCacheRule,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PullThroughCacheRule Unmarshall(JsonUnmarshallerContext context);
    public static PullThroughCacheRuleUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller : object {
    private static PutImageRequestMarshaller _instance;
    public static PutImageRequestMarshaller Instance { get; }
    private static PutImageRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutImageRequest publicRequest);
    internal static PutImageRequestMarshaller GetInstance();
    public static PutImageRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutImageResponseUnmarshaller _instance;
    public static PutImageResponseUnmarshaller Instance { get; }
    private static PutImageResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutImageResponseUnmarshaller GetInstance();
    public static PutImageResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutImageScanningConfigurationRequestMarshaller : object {
    private static PutImageScanningConfigurationRequestMarshaller _instance;
    public static PutImageScanningConfigurationRequestMarshaller Instance { get; }
    private static PutImageScanningConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutImageScanningConfigurationRequest publicRequest);
    internal static PutImageScanningConfigurationRequestMarshaller GetInstance();
    public static PutImageScanningConfigurationRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutImageScanningConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutImageScanningConfigurationResponseUnmarshaller _instance;
    public static PutImageScanningConfigurationResponseUnmarshaller Instance { get; }
    private static PutImageScanningConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutImageScanningConfigurationResponseUnmarshaller GetInstance();
    public static PutImageScanningConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityRequestMarshaller : object {
    private static PutImageTagMutabilityRequestMarshaller _instance;
    public static PutImageTagMutabilityRequestMarshaller Instance { get; }
    private static PutImageTagMutabilityRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutImageTagMutabilityRequest publicRequest);
    internal static PutImageTagMutabilityRequestMarshaller GetInstance();
    public static PutImageTagMutabilityRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutImageTagMutabilityResponseUnmarshaller _instance;
    public static PutImageTagMutabilityResponseUnmarshaller Instance { get; }
    private static PutImageTagMutabilityResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutImageTagMutabilityResponseUnmarshaller GetInstance();
    public static PutImageTagMutabilityResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyRequestMarshaller : object {
    private static PutLifecyclePolicyRequestMarshaller _instance;
    public static PutLifecyclePolicyRequestMarshaller Instance { get; }
    private static PutLifecyclePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutLifecyclePolicyRequest publicRequest);
    internal static PutLifecyclePolicyRequestMarshaller GetInstance();
    public static PutLifecyclePolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutLifecyclePolicyResponseUnmarshaller _instance;
    public static PutLifecyclePolicyResponseUnmarshaller Instance { get; }
    private static PutLifecyclePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutLifecyclePolicyResponseUnmarshaller GetInstance();
    public static PutLifecyclePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutRegistryPolicyRequestMarshaller : object {
    private static PutRegistryPolicyRequestMarshaller _instance;
    public static PutRegistryPolicyRequestMarshaller Instance { get; }
    private static PutRegistryPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutRegistryPolicyRequest publicRequest);
    internal static PutRegistryPolicyRequestMarshaller GetInstance();
    public static PutRegistryPolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutRegistryPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutRegistryPolicyResponseUnmarshaller _instance;
    public static PutRegistryPolicyResponseUnmarshaller Instance { get; }
    private static PutRegistryPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutRegistryPolicyResponseUnmarshaller GetInstance();
    public static PutRegistryPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutRegistryScanningConfigurationRequestMarshaller : object {
    private static PutRegistryScanningConfigurationRequestMarshaller _instance;
    public static PutRegistryScanningConfigurationRequestMarshaller Instance { get; }
    private static PutRegistryScanningConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutRegistryScanningConfigurationRequest publicRequest);
    internal static PutRegistryScanningConfigurationRequestMarshaller GetInstance();
    public static PutRegistryScanningConfigurationRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutRegistryScanningConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutRegistryScanningConfigurationResponseUnmarshaller _instance;
    public static PutRegistryScanningConfigurationResponseUnmarshaller Instance { get; }
    private static PutRegistryScanningConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutRegistryScanningConfigurationResponseUnmarshaller GetInstance();
    public static PutRegistryScanningConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutReplicationConfigurationRequestMarshaller : object {
    private static PutReplicationConfigurationRequestMarshaller _instance;
    public static PutReplicationConfigurationRequestMarshaller Instance { get; }
    private static PutReplicationConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutReplicationConfigurationRequest publicRequest);
    internal static PutReplicationConfigurationRequestMarshaller GetInstance();
    public static PutReplicationConfigurationRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.PutReplicationConfigurationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutReplicationConfigurationResponseUnmarshaller _instance;
    public static PutReplicationConfigurationResponseUnmarshaller Instance { get; }
    private static PutReplicationConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutReplicationConfigurationResponseUnmarshaller GetInstance();
    public static PutReplicationConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RecommendationUnmarshaller : object {
    private static RecommendationUnmarshaller _instance;
    public static RecommendationUnmarshaller Instance { get; }
    private static RecommendationUnmarshaller();
    private sealed virtual override Recommendation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Recommendation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Recommendation Unmarshall(JsonUnmarshallerContext context);
    public static RecommendationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReferencedImagesNotFoundExceptionUnmarshaller : object {
    private static ReferencedImagesNotFoundExceptionUnmarshaller _instance;
    public static ReferencedImagesNotFoundExceptionUnmarshaller Instance { get; }
    private static ReferencedImagesNotFoundExceptionUnmarshaller();
    public sealed virtual ReferencedImagesNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ReferencedImagesNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReferencedImagesNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RegistryPolicyNotFoundExceptionUnmarshaller : object {
    private static RegistryPolicyNotFoundExceptionUnmarshaller _instance;
    public static RegistryPolicyNotFoundExceptionUnmarshaller Instance { get; }
    private static RegistryPolicyNotFoundExceptionUnmarshaller();
    public sealed virtual RegistryPolicyNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual RegistryPolicyNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static RegistryPolicyNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RegistryScanningConfigurationUnmarshaller : object {
    private static RegistryScanningConfigurationUnmarshaller _instance;
    public static RegistryScanningConfigurationUnmarshaller Instance { get; }
    private static RegistryScanningConfigurationUnmarshaller();
    private sealed virtual override RegistryScanningConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.RegistryScanningConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RegistryScanningConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static RegistryScanningConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RegistryScanningRuleMarshaller : object {
    public static RegistryScanningRuleMarshaller Instance;
    private static RegistryScanningRuleMarshaller();
    public sealed virtual void Marshall(RegistryScanningRule requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RegistryScanningRuleUnmarshaller : object {
    private static RegistryScanningRuleUnmarshaller _instance;
    public static RegistryScanningRuleUnmarshaller Instance { get; }
    private static RegistryScanningRuleUnmarshaller();
    private sealed virtual override RegistryScanningRule Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.RegistryScanningRule,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RegistryScanningRule Unmarshall(JsonUnmarshallerContext context);
    public static RegistryScanningRuleUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RemediationUnmarshaller : object {
    private static RemediationUnmarshaller _instance;
    public static RemediationUnmarshaller Instance { get; }
    private static RemediationUnmarshaller();
    private sealed virtual override Remediation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Remediation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Remediation Unmarshall(JsonUnmarshallerContext context);
    public static RemediationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReplicationConfigurationMarshaller : object {
    public static ReplicationConfigurationMarshaller Instance;
    private static ReplicationConfigurationMarshaller();
    public sealed virtual void Marshall(ReplicationConfiguration requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReplicationConfigurationUnmarshaller : object {
    private static ReplicationConfigurationUnmarshaller _instance;
    public static ReplicationConfigurationUnmarshaller Instance { get; }
    private static ReplicationConfigurationUnmarshaller();
    private sealed virtual override ReplicationConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ReplicationConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReplicationDestinationMarshaller : object {
    public static ReplicationDestinationMarshaller Instance;
    private static ReplicationDestinationMarshaller();
    public sealed virtual void Marshall(ReplicationDestination requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReplicationDestinationUnmarshaller : object {
    private static ReplicationDestinationUnmarshaller _instance;
    public static ReplicationDestinationUnmarshaller Instance { get; }
    private static ReplicationDestinationUnmarshaller();
    private sealed virtual override ReplicationDestination Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ReplicationDestination,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationDestination Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationDestinationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReplicationRuleMarshaller : object {
    public static ReplicationRuleMarshaller Instance;
    private static ReplicationRuleMarshaller();
    public sealed virtual void Marshall(ReplicationRule requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ReplicationRuleUnmarshaller : object {
    private static ReplicationRuleUnmarshaller _instance;
    public static ReplicationRuleUnmarshaller Instance { get; }
    private static ReplicationRuleUnmarshaller();
    private sealed virtual override ReplicationRule Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ReplicationRule,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationRule Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationRuleUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryAlreadyExistsExceptionUnmarshaller : object {
    private static RepositoryAlreadyExistsExceptionUnmarshaller _instance;
    public static RepositoryAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static RepositoryAlreadyExistsExceptionUnmarshaller();
    public sealed virtual RepositoryAlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual RepositoryAlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static RepositoryAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryFilterMarshaller : object {
    public static RepositoryFilterMarshaller Instance;
    private static RepositoryFilterMarshaller();
    public sealed virtual void Marshall(RepositoryFilter requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryFilterUnmarshaller : object {
    private static RepositoryFilterUnmarshaller _instance;
    public static RepositoryFilterUnmarshaller Instance { get; }
    private static RepositoryFilterUnmarshaller();
    private sealed virtual override RepositoryFilter Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.RepositoryFilter,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RepositoryFilter Unmarshall(JsonUnmarshallerContext context);
    public static RepositoryFilterUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryNotEmptyExceptionUnmarshaller : object {
    private static RepositoryNotEmptyExceptionUnmarshaller _instance;
    public static RepositoryNotEmptyExceptionUnmarshaller Instance { get; }
    private static RepositoryNotEmptyExceptionUnmarshaller();
    public sealed virtual RepositoryNotEmptyException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual RepositoryNotEmptyException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static RepositoryNotEmptyExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryNotFoundExceptionUnmarshaller : object {
    private static RepositoryNotFoundExceptionUnmarshaller _instance;
    public static RepositoryNotFoundExceptionUnmarshaller Instance { get; }
    private static RepositoryNotFoundExceptionUnmarshaller();
    public sealed virtual RepositoryNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual RepositoryNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static RepositoryNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryPolicyNotFoundExceptionUnmarshaller : object {
    private static RepositoryPolicyNotFoundExceptionUnmarshaller _instance;
    public static RepositoryPolicyNotFoundExceptionUnmarshaller Instance { get; }
    private static RepositoryPolicyNotFoundExceptionUnmarshaller();
    public sealed virtual RepositoryPolicyNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual RepositoryPolicyNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static RepositoryPolicyNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryScanningConfigurationFailureUnmarshaller : object {
    private static RepositoryScanningConfigurationFailureUnmarshaller _instance;
    public static RepositoryScanningConfigurationFailureUnmarshaller Instance { get; }
    private static RepositoryScanningConfigurationFailureUnmarshaller();
    private sealed virtual override RepositoryScanningConfigurationFailure Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.RepositoryScanningConfigurationFailure,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RepositoryScanningConfigurationFailure Unmarshall(JsonUnmarshallerContext context);
    public static RepositoryScanningConfigurationFailureUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryScanningConfigurationUnmarshaller : object {
    private static RepositoryScanningConfigurationUnmarshaller _instance;
    public static RepositoryScanningConfigurationUnmarshaller Instance { get; }
    private static RepositoryScanningConfigurationUnmarshaller();
    private sealed virtual override RepositoryScanningConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.RepositoryScanningConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RepositoryScanningConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static RepositoryScanningConfigurationUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller : object {
    private static RepositoryUnmarshaller _instance;
    public static RepositoryUnmarshaller Instance { get; }
    private static RepositoryUnmarshaller();
    private sealed virtual override Repository Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Repository,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Repository Unmarshall(JsonUnmarshallerContext context);
    public static RepositoryUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ResourceDetailsUnmarshaller : object {
    private static ResourceDetailsUnmarshaller _instance;
    public static ResourceDetailsUnmarshaller Instance { get; }
    private static ResourceDetailsUnmarshaller();
    private sealed virtual override ResourceDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ResourceDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceDetails Unmarshall(JsonUnmarshallerContext context);
    public static ResourceDetailsUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ResourceUnmarshaller : object {
    private static ResourceUnmarshaller _instance;
    public static ResourceUnmarshaller Instance { get; }
    private static ResourceUnmarshaller();
    private sealed virtual override Resource Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Resource,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Resource Unmarshall(JsonUnmarshallerContext context);
    public static ResourceUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ScanningRepositoryFilterMarshaller : object {
    public static ScanningRepositoryFilterMarshaller Instance;
    private static ScanningRepositoryFilterMarshaller();
    public sealed virtual void Marshall(ScanningRepositoryFilter requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ScanningRepositoryFilterUnmarshaller : object {
    private static ScanningRepositoryFilterUnmarshaller _instance;
    public static ScanningRepositoryFilterUnmarshaller Instance { get; }
    private static ScanningRepositoryFilterUnmarshaller();
    private sealed virtual override ScanningRepositoryFilter Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ScanningRepositoryFilter,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScanningRepositoryFilter Unmarshall(JsonUnmarshallerContext context);
    public static ScanningRepositoryFilterUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ScanNotFoundExceptionUnmarshaller : object {
    private static ScanNotFoundExceptionUnmarshaller _instance;
    public static ScanNotFoundExceptionUnmarshaller Instance { get; }
    private static ScanNotFoundExceptionUnmarshaller();
    public sealed virtual ScanNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ScanNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ScanNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ScoreDetailsUnmarshaller : object {
    private static ScoreDetailsUnmarshaller _instance;
    public static ScoreDetailsUnmarshaller Instance { get; }
    private static ScoreDetailsUnmarshaller();
    private sealed virtual override ScoreDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.ScoreDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScoreDetails Unmarshall(JsonUnmarshallerContext context);
    public static ScoreDetailsUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.SecretNotFoundExceptionUnmarshaller : object {
    private static SecretNotFoundExceptionUnmarshaller _instance;
    public static SecretNotFoundExceptionUnmarshaller Instance { get; }
    private static SecretNotFoundExceptionUnmarshaller();
    public sealed virtual SecretNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual SecretNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static SecretNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller : object {
    private static ServerExceptionUnmarshaller _instance;
    public static ServerExceptionUnmarshaller Instance { get; }
    private static ServerExceptionUnmarshaller();
    public sealed virtual ServerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServerExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller : object {
    private static SetRepositoryPolicyRequestMarshaller _instance;
    public static SetRepositoryPolicyRequestMarshaller Instance { get; }
    private static SetRepositoryPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SetRepositoryPolicyRequest publicRequest);
    internal static SetRepositoryPolicyRequestMarshaller GetInstance();
    public static SetRepositoryPolicyRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static SetRepositoryPolicyResponseUnmarshaller _instance;
    public static SetRepositoryPolicyResponseUnmarshaller Instance { get; }
    private static SetRepositoryPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SetRepositoryPolicyResponseUnmarshaller GetInstance();
    public static SetRepositoryPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.StartImageScanRequestMarshaller : object {
    private static StartImageScanRequestMarshaller _instance;
    public static StartImageScanRequestMarshaller Instance { get; }
    private static StartImageScanRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartImageScanRequest publicRequest);
    internal static StartImageScanRequestMarshaller GetInstance();
    public static StartImageScanRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.StartImageScanResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartImageScanResponseUnmarshaller _instance;
    public static StartImageScanResponseUnmarshaller Instance { get; }
    private static StartImageScanResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartImageScanResponseUnmarshaller GetInstance();
    public static StartImageScanResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewRequestMarshaller : object {
    private static StartLifecyclePolicyPreviewRequestMarshaller _instance;
    public static StartLifecyclePolicyPreviewRequestMarshaller Instance { get; }
    private static StartLifecyclePolicyPreviewRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartLifecyclePolicyPreviewRequest publicRequest);
    internal static StartLifecyclePolicyPreviewRequestMarshaller GetInstance();
    public static StartLifecyclePolicyPreviewRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartLifecyclePolicyPreviewResponseUnmarshaller _instance;
    public static StartLifecyclePolicyPreviewResponseUnmarshaller Instance { get; }
    private static StartLifecyclePolicyPreviewResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartLifecyclePolicyPreviewResponseUnmarshaller GetInstance();
    public static StartLifecyclePolicyPreviewResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller : object {
    private static TooManyTagsExceptionUnmarshaller _instance;
    public static TooManyTagsExceptionUnmarshaller Instance { get; }
    private static TooManyTagsExceptionUnmarshaller();
    public sealed virtual TooManyTagsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TooManyTagsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyTagsExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UnableToAccessSecretExceptionUnmarshaller : object {
    private static UnableToAccessSecretExceptionUnmarshaller _instance;
    public static UnableToAccessSecretExceptionUnmarshaller Instance { get; }
    private static UnableToAccessSecretExceptionUnmarshaller();
    public sealed virtual UnableToAccessSecretException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnableToAccessSecretException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnableToAccessSecretExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UnableToDecryptSecretValueExceptionUnmarshaller : object {
    private static UnableToDecryptSecretValueExceptionUnmarshaller _instance;
    public static UnableToDecryptSecretValueExceptionUnmarshaller Instance { get; }
    private static UnableToDecryptSecretValueExceptionUnmarshaller();
    public sealed virtual UnableToDecryptSecretValueException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnableToDecryptSecretValueException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnableToDecryptSecretValueExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UnableToGetUpstreamImageExceptionUnmarshaller : object {
    private static UnableToGetUpstreamImageExceptionUnmarshaller _instance;
    public static UnableToGetUpstreamImageExceptionUnmarshaller Instance { get; }
    private static UnableToGetUpstreamImageExceptionUnmarshaller();
    public sealed virtual UnableToGetUpstreamImageException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnableToGetUpstreamImageException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnableToGetUpstreamImageExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UnableToGetUpstreamLayerExceptionUnmarshaller : object {
    private static UnableToGetUpstreamLayerExceptionUnmarshaller _instance;
    public static UnableToGetUpstreamLayerExceptionUnmarshaller Instance { get; }
    private static UnableToGetUpstreamLayerExceptionUnmarshaller();
    public sealed virtual UnableToGetUpstreamLayerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnableToGetUpstreamLayerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnableToGetUpstreamLayerExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UnsupportedImageTypeExceptionUnmarshaller : object {
    private static UnsupportedImageTypeExceptionUnmarshaller _instance;
    public static UnsupportedImageTypeExceptionUnmarshaller Instance { get; }
    private static UnsupportedImageTypeExceptionUnmarshaller();
    public sealed virtual UnsupportedImageTypeException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnsupportedImageTypeException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedImageTypeExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UnsupportedUpstreamRegistryExceptionUnmarshaller : object {
    private static UnsupportedUpstreamRegistryExceptionUnmarshaller _instance;
    public static UnsupportedUpstreamRegistryExceptionUnmarshaller Instance { get; }
    private static UnsupportedUpstreamRegistryExceptionUnmarshaller();
    public sealed virtual UnsupportedUpstreamRegistryException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnsupportedUpstreamRegistryException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedUpstreamRegistryExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UpdatePullThroughCacheRuleRequestMarshaller : object {
    private static UpdatePullThroughCacheRuleRequestMarshaller _instance;
    public static UpdatePullThroughCacheRuleRequestMarshaller Instance { get; }
    private static UpdatePullThroughCacheRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdatePullThroughCacheRuleRequest publicRequest);
    internal static UpdatePullThroughCacheRuleRequestMarshaller GetInstance();
    public static UpdatePullThroughCacheRuleRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UpdatePullThroughCacheRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdatePullThroughCacheRuleResponseUnmarshaller _instance;
    public static UpdatePullThroughCacheRuleResponseUnmarshaller Instance { get; }
    private static UpdatePullThroughCacheRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdatePullThroughCacheRuleResponseUnmarshaller GetInstance();
    public static UpdatePullThroughCacheRuleResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller : object {
    private static UploadLayerPartRequestMarshaller _instance;
    public static UploadLayerPartRequestMarshaller Instance { get; }
    private static UploadLayerPartRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UploadLayerPartRequest publicRequest);
    internal static UploadLayerPartRequestMarshaller GetInstance();
    public static UploadLayerPartRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UploadLayerPartResponseUnmarshaller _instance;
    public static UploadLayerPartResponseUnmarshaller Instance { get; }
    private static UploadLayerPartResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UploadLayerPartResponseUnmarshaller GetInstance();
    public static UploadLayerPartResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.UploadNotFoundExceptionUnmarshaller : object {
    private static UploadNotFoundExceptionUnmarshaller _instance;
    public static UploadNotFoundExceptionUnmarshaller Instance { get; }
    private static UploadNotFoundExceptionUnmarshaller();
    public sealed virtual UploadNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UploadNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UploadNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ValidatePullThroughCacheRuleRequestMarshaller : object {
    private static ValidatePullThroughCacheRuleRequestMarshaller _instance;
    public static ValidatePullThroughCacheRuleRequestMarshaller Instance { get; }
    private static ValidatePullThroughCacheRuleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ValidatePullThroughCacheRuleRequest publicRequest);
    internal static ValidatePullThroughCacheRuleRequestMarshaller GetInstance();
    public static ValidatePullThroughCacheRuleRequestMarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ValidatePullThroughCacheRuleResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ValidatePullThroughCacheRuleResponseUnmarshaller _instance;
    public static ValidatePullThroughCacheRuleResponseUnmarshaller Instance { get; }
    private static ValidatePullThroughCacheRuleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ValidatePullThroughCacheRuleResponseUnmarshaller GetInstance();
    public static ValidatePullThroughCacheRuleResponseUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.ValidationExceptionUnmarshaller : object {
    private static ValidationExceptionUnmarshaller _instance;
    public static ValidationExceptionUnmarshaller Instance { get; }
    private static ValidationExceptionUnmarshaller();
    public sealed virtual ValidationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ValidationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ValidationExceptionUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.Internal.MarshallTransformations.VulnerablePackageUnmarshaller : object {
    private static VulnerablePackageUnmarshaller _instance;
    public static VulnerablePackageUnmarshaller Instance { get; }
    private static VulnerablePackageUnmarshaller();
    private sealed virtual override VulnerablePackage Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.ECR.Model.VulnerablePackage,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VulnerablePackage Unmarshall(JsonUnmarshallerContext context);
    public static VulnerablePackageUnmarshaller get_Instance();
}
public class Amazon.ECR.Model.InvalidLayerException : AmazonECRException {
    public InvalidLayerException(string message);
    public InvalidLayerException(string message, Exception innerException);
    public InvalidLayerException(Exception innerException);
    public InvalidLayerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidLayerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.InvalidLayerPartException : AmazonECRException {
    private Nullable`1<long> _lastValidByteReceived;
    private string _registryId;
    private string _repositoryName;
    private string _uploadId;
    [AWSPropertyAttribute]
public long LastValidByteReceived { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string UploadId { get; public set; }
    public InvalidLayerPartException(string message);
    public InvalidLayerPartException(string message, Exception innerException);
    public InvalidLayerPartException(Exception innerException);
    public InvalidLayerPartException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidLayerPartException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public long get_LastValidByteReceived();
    public void set_LastValidByteReceived(long value);
    internal bool IsSetLastValidByteReceived();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.ECR.Model.InvalidParameterException : AmazonECRException {
    public InvalidParameterException(string message);
    public InvalidParameterException(string message, Exception innerException);
    public InvalidParameterException(Exception innerException);
    public InvalidParameterException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidParameterException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.InvalidTagParameterException : AmazonECRException {
    public InvalidTagParameterException(string message);
    public InvalidTagParameterException(string message, Exception innerException);
    public InvalidTagParameterException(Exception innerException);
    public InvalidTagParameterException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidTagParameterException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.KmsException : AmazonECRException {
    private string _kmsError;
    public string KmsError { get; public set; }
    public KmsException(string message);
    public KmsException(string message, Exception innerException);
    public KmsException(Exception innerException);
    public KmsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KmsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public string get_KmsError();
    public void set_KmsError(string value);
    internal bool IsSetKmsError();
}
public class Amazon.ECR.Model.Layer : object {
    private LayerAvailability _layerAvailability;
    private string _layerDigest;
    private Nullable`1<long> _layerSize;
    private string _mediaType;
    public LayerAvailability LayerAvailability { get; public set; }
    public string LayerDigest { get; public set; }
    public long LayerSize { get; public set; }
    public string MediaType { get; public set; }
    public LayerAvailability get_LayerAvailability();
    public void set_LayerAvailability(LayerAvailability value);
    internal bool IsSetLayerAvailability();
    public string get_LayerDigest();
    public void set_LayerDigest(string value);
    internal bool IsSetLayerDigest();
    public long get_LayerSize();
    public void set_LayerSize(long value);
    internal bool IsSetLayerSize();
    public string get_MediaType();
    public void set_MediaType(string value);
    internal bool IsSetMediaType();
}
public class Amazon.ECR.Model.LayerAlreadyExistsException : AmazonECRException {
    public LayerAlreadyExistsException(string message);
    public LayerAlreadyExistsException(string message, Exception innerException);
    public LayerAlreadyExistsException(Exception innerException);
    public LayerAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LayerAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LayerFailure : object {
    private LayerFailureCode _failureCode;
    private string _failureReason;
    private string _layerDigest;
    public LayerFailureCode FailureCode { get; public set; }
    public string FailureReason { get; public set; }
    [AWSPropertyAttribute]
public string LayerDigest { get; public set; }
    public LayerFailureCode get_FailureCode();
    public void set_FailureCode(LayerFailureCode value);
    internal bool IsSetFailureCode();
    public string get_FailureReason();
    public void set_FailureReason(string value);
    internal bool IsSetFailureReason();
    public string get_LayerDigest();
    public void set_LayerDigest(string value);
    internal bool IsSetLayerDigest();
}
public class Amazon.ECR.Model.LayerInaccessibleException : AmazonECRException {
    public LayerInaccessibleException(string message);
    public LayerInaccessibleException(string message, Exception innerException);
    public LayerInaccessibleException(Exception innerException);
    public LayerInaccessibleException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LayerInaccessibleException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LayerPartTooSmallException : AmazonECRException {
    public LayerPartTooSmallException(string message);
    public LayerPartTooSmallException(string message, Exception innerException);
    public LayerPartTooSmallException(Exception innerException);
    public LayerPartTooSmallException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LayerPartTooSmallException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LayersNotFoundException : AmazonECRException {
    public LayersNotFoundException(string message);
    public LayersNotFoundException(string message, Exception innerException);
    public LayersNotFoundException(Exception innerException);
    public LayersNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LayersNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LifecyclePolicyNotFoundException : AmazonECRException {
    public LifecyclePolicyNotFoundException(string message);
    public LifecyclePolicyNotFoundException(string message, Exception innerException);
    public LifecyclePolicyNotFoundException(Exception innerException);
    public LifecyclePolicyNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LifecyclePolicyNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LifecyclePolicyPreviewFilter : object {
    private TagStatus _tagStatus;
    public TagStatus TagStatus { get; public set; }
    public TagStatus get_TagStatus();
    public void set_TagStatus(TagStatus value);
    internal bool IsSetTagStatus();
}
public class Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException : AmazonECRException {
    public LifecyclePolicyPreviewInProgressException(string message);
    public LifecyclePolicyPreviewInProgressException(string message, Exception innerException);
    public LifecyclePolicyPreviewInProgressException(Exception innerException);
    public LifecyclePolicyPreviewInProgressException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LifecyclePolicyPreviewInProgressException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException : AmazonECRException {
    public LifecyclePolicyPreviewNotFoundException(string message);
    public LifecyclePolicyPreviewNotFoundException(string message, Exception innerException);
    public LifecyclePolicyPreviewNotFoundException(Exception innerException);
    public LifecyclePolicyPreviewNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LifecyclePolicyPreviewNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.LifecyclePolicyPreviewResult : object {
    private LifecyclePolicyRuleAction _action;
    private Nullable`1<int> _appliedRulePriority;
    private string _imageDigest;
    private Nullable`1<DateTime> _imagePushedAt;
    private List`1<string> _imageTags;
    public LifecyclePolicyRuleAction Action { get; public set; }
    [AWSPropertyAttribute]
public int AppliedRulePriority { get; public set; }
    public string ImageDigest { get; public set; }
    public DateTime ImagePushedAt { get; public set; }
    public List`1<string> ImageTags { get; public set; }
    public LifecyclePolicyRuleAction get_Action();
    public void set_Action(LifecyclePolicyRuleAction value);
    internal bool IsSetAction();
    public int get_AppliedRulePriority();
    public void set_AppliedRulePriority(int value);
    internal bool IsSetAppliedRulePriority();
    public string get_ImageDigest();
    public void set_ImageDigest(string value);
    internal bool IsSetImageDigest();
    public DateTime get_ImagePushedAt();
    public void set_ImagePushedAt(DateTime value);
    internal bool IsSetImagePushedAt();
    public List`1<string> get_ImageTags();
    public void set_ImageTags(List`1<string> value);
    internal bool IsSetImageTags();
}
public class Amazon.ECR.Model.LifecyclePolicyPreviewSummary : object {
    private Nullable`1<int> _expiringImageTotalCount;
    [AWSPropertyAttribute]
public int ExpiringImageTotalCount { get; public set; }
    public int get_ExpiringImageTotalCount();
    public void set_ExpiringImageTotalCount(int value);
    internal bool IsSetExpiringImageTotalCount();
}
public class Amazon.ECR.Model.LifecyclePolicyRuleAction : object {
    private ImageActionType _type;
    public ImageActionType Type { get; public set; }
    public ImageActionType get_Type();
    public void set_Type(ImageActionType value);
    internal bool IsSetType();
}
public class Amazon.ECR.Model.LimitExceededException : AmazonECRException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ListImagesFilter : object {
    private TagStatus _tagStatus;
    public TagStatus TagStatus { get; public set; }
    public TagStatus get_TagStatus();
    public void set_TagStatus(TagStatus value);
    internal bool IsSetTagStatus();
}
internal class Amazon.ECR.Model.ListImagesPaginator : object {
    private IAmazonECR _client;
    private ListImagesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListImagesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ImageIdentifier> ImageIds { get; }
    internal ListImagesPaginator(IAmazonECR client, ListImagesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListImagesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ImageIdentifier> get_ImageIds();
    [AsyncIteratorStateMachineAttribute("Amazon.ECR.Model.ListImagesPaginator/<Amazon-Runtime-IPaginator<Amazon-ECR-Model-ListImagesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListImagesResponse> Amazon.Runtime.IPaginator<Amazon.ECR.Model.ListImagesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.ECR.Model.ListImagesRequest : AmazonECRRequest {
    private ListImagesFilter _filter;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _registryId;
    private string _repositoryName;
    public ListImagesFilter Filter { get; public set; }
    [AWSPropertyAttribute]
public int MaxResults { get; public set; }
    public string NextToken { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ListImagesFilter get_Filter();
    public void set_Filter(ListImagesFilter value);
    internal bool IsSetFilter();
    public int get_MaxResults();
    public void set_MaxResults(int value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.ListImagesResponse : AmazonWebServiceResponse {
    private List`1<ImageIdentifier> _imageIds;
    private string _nextToken;
    [AWSPropertyAttribute]
public List`1<ImageIdentifier> ImageIds { get; public set; }
    public string NextToken { get; public set; }
    public List`1<ImageIdentifier> get_ImageIds();
    public void set_ImageIds(List`1<ImageIdentifier> value);
    internal bool IsSetImageIds();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.ECR.Model.ListTagsForResourceRequest : AmazonECRRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.ECR.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tags;
    public List`1<Tag> Tags { get; public set; }
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECR.Model.PackageVulnerabilityDetails : object {
    private List`1<CvssScore> _cvss;
    private List`1<string> _referenceUrls;
    private List`1<string> _relatedVulnerabilities;
    private string _source;
    private string _sourceUrl;
    private Nullable`1<DateTime> _vendorCreatedAt;
    private string _vendorSeverity;
    private Nullable`1<DateTime> _vendorUpdatedAt;
    private string _vulnerabilityId;
    private List`1<VulnerablePackage> _vulnerablePackages;
    public List`1<CvssScore> Cvss { get; public set; }
    public List`1<string> ReferenceUrls { get; public set; }
    public List`1<string> RelatedVulnerabilities { get; public set; }
    public string Source { get; public set; }
    public string SourceUrl { get; public set; }
    public DateTime VendorCreatedAt { get; public set; }
    public string VendorSeverity { get; public set; }
    public DateTime VendorUpdatedAt { get; public set; }
    public string VulnerabilityId { get; public set; }
    public List`1<VulnerablePackage> VulnerablePackages { get; public set; }
    public List`1<CvssScore> get_Cvss();
    public void set_Cvss(List`1<CvssScore> value);
    internal bool IsSetCvss();
    public List`1<string> get_ReferenceUrls();
    public void set_ReferenceUrls(List`1<string> value);
    internal bool IsSetReferenceUrls();
    public List`1<string> get_RelatedVulnerabilities();
    public void set_RelatedVulnerabilities(List`1<string> value);
    internal bool IsSetRelatedVulnerabilities();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
    public string get_SourceUrl();
    public void set_SourceUrl(string value);
    internal bool IsSetSourceUrl();
    public DateTime get_VendorCreatedAt();
    public void set_VendorCreatedAt(DateTime value);
    internal bool IsSetVendorCreatedAt();
    public string get_VendorSeverity();
    public void set_VendorSeverity(string value);
    internal bool IsSetVendorSeverity();
    public DateTime get_VendorUpdatedAt();
    public void set_VendorUpdatedAt(DateTime value);
    internal bool IsSetVendorUpdatedAt();
    public string get_VulnerabilityId();
    public void set_VulnerabilityId(string value);
    internal bool IsSetVulnerabilityId();
    public List`1<VulnerablePackage> get_VulnerablePackages();
    public void set_VulnerablePackages(List`1<VulnerablePackage> value);
    internal bool IsSetVulnerablePackages();
}
public class Amazon.ECR.Model.PullThroughCacheRule : object {
    private Nullable`1<DateTime> _createdAt;
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _registryId;
    private Nullable`1<DateTime> _updatedAt;
    private UpstreamRegistry _upstreamRegistry;
    private string _upstreamRegistryUrl;
    public DateTime CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public DateTime UpdatedAt { get; public set; }
    public UpstreamRegistry UpstreamRegistry { get; public set; }
    public string UpstreamRegistryUrl { get; public set; }
    public DateTime get_CreatedAt();
    public void set_CreatedAt(DateTime value);
    internal bool IsSetCreatedAt();
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public DateTime get_UpdatedAt();
    public void set_UpdatedAt(DateTime value);
    internal bool IsSetUpdatedAt();
    public UpstreamRegistry get_UpstreamRegistry();
    public void set_UpstreamRegistry(UpstreamRegistry value);
    internal bool IsSetUpstreamRegistry();
    public string get_UpstreamRegistryUrl();
    public void set_UpstreamRegistryUrl(string value);
    internal bool IsSetUpstreamRegistryUrl();
}
public class Amazon.ECR.Model.PullThroughCacheRuleAlreadyExistsException : AmazonECRException {
    public PullThroughCacheRuleAlreadyExistsException(string message);
    public PullThroughCacheRuleAlreadyExistsException(string message, Exception innerException);
    public PullThroughCacheRuleAlreadyExistsException(Exception innerException);
    public PullThroughCacheRuleAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PullThroughCacheRuleAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.PullThroughCacheRuleNotFoundException : AmazonECRException {
    public PullThroughCacheRuleNotFoundException(string message);
    public PullThroughCacheRuleNotFoundException(string message, Exception innerException);
    public PullThroughCacheRuleNotFoundException(Exception innerException);
    public PullThroughCacheRuleNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PullThroughCacheRuleNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.PutImageRequest : AmazonECRRequest {
    private string _imageDigest;
    private string _imageManifest;
    private string _imageManifestMediaType;
    private string _imageTag;
    private string _registryId;
    private string _repositoryName;
    public string ImageDigest { get; public set; }
    [AWSPropertyAttribute]
public string ImageManifest { get; public set; }
    public string ImageManifestMediaType { get; public set; }
    [AWSPropertyAttribute]
public string ImageTag { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_ImageDigest();
    public void set_ImageDigest(string value);
    internal bool IsSetImageDigest();
    public string get_ImageManifest();
    public void set_ImageManifest(string value);
    internal bool IsSetImageManifest();
    public string get_ImageManifestMediaType();
    public void set_ImageManifestMediaType(string value);
    internal bool IsSetImageManifestMediaType();
    public string get_ImageTag();
    public void set_ImageTag(string value);
    internal bool IsSetImageTag();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutImageResponse : AmazonWebServiceResponse {
    private Image _image;
    public Image Image { get; public set; }
    public Image get_Image();
    public void set_Image(Image value);
    internal bool IsSetImage();
}
public class Amazon.ECR.Model.PutImageScanningConfigurationRequest : AmazonECRRequest {
    private ImageScanningConfiguration _imageScanningConfiguration;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public ImageScanningConfiguration ImageScanningConfiguration { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageScanningConfiguration get_ImageScanningConfiguration();
    public void set_ImageScanningConfiguration(ImageScanningConfiguration value);
    internal bool IsSetImageScanningConfiguration();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutImageScanningConfigurationResponse : AmazonWebServiceResponse {
    private ImageScanningConfiguration _imageScanningConfiguration;
    private string _registryId;
    private string _repositoryName;
    public ImageScanningConfiguration ImageScanningConfiguration { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageScanningConfiguration get_ImageScanningConfiguration();
    public void set_ImageScanningConfiguration(ImageScanningConfiguration value);
    internal bool IsSetImageScanningConfiguration();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutImageTagMutabilityRequest : AmazonECRRequest {
    private ImageTagMutability _imageTagMutability;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public ImageTagMutability ImageTagMutability { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageTagMutability get_ImageTagMutability();
    public void set_ImageTagMutability(ImageTagMutability value);
    internal bool IsSetImageTagMutability();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutImageTagMutabilityResponse : AmazonWebServiceResponse {
    private ImageTagMutability _imageTagMutability;
    private string _registryId;
    private string _repositoryName;
    public ImageTagMutability ImageTagMutability { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageTagMutability get_ImageTagMutability();
    public void set_ImageTagMutability(ImageTagMutability value);
    internal bool IsSetImageTagMutability();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutLifecyclePolicyRequest : AmazonECRRequest {
    private string _lifecyclePolicyText;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutLifecyclePolicyResponse : AmazonWebServiceResponse {
    private string _lifecyclePolicyText;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.PutRegistryPolicyRequest : AmazonECRRequest {
    private string _policyText;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
}
public class Amazon.ECR.Model.PutRegistryPolicyResponse : AmazonWebServiceResponse {
    private string _policyText;
    private string _registryId;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.PutRegistryScanningConfigurationRequest : AmazonECRRequest {
    private List`1<RegistryScanningRule> _rules;
    private ScanType _scanType;
    [AWSPropertyAttribute]
public List`1<RegistryScanningRule> Rules { get; public set; }
    public ScanType ScanType { get; public set; }
    public List`1<RegistryScanningRule> get_Rules();
    public void set_Rules(List`1<RegistryScanningRule> value);
    internal bool IsSetRules();
    public ScanType get_ScanType();
    public void set_ScanType(ScanType value);
    internal bool IsSetScanType();
}
public class Amazon.ECR.Model.PutRegistryScanningConfigurationResponse : AmazonWebServiceResponse {
    private RegistryScanningConfiguration _registryScanningConfiguration;
    public RegistryScanningConfiguration RegistryScanningConfiguration { get; public set; }
    public RegistryScanningConfiguration get_RegistryScanningConfiguration();
    public void set_RegistryScanningConfiguration(RegistryScanningConfiguration value);
    internal bool IsSetRegistryScanningConfiguration();
}
public class Amazon.ECR.Model.PutReplicationConfigurationRequest : AmazonECRRequest {
    private ReplicationConfiguration _replicationConfiguration;
    [AWSPropertyAttribute]
public ReplicationConfiguration ReplicationConfiguration { get; public set; }
    public ReplicationConfiguration get_ReplicationConfiguration();
    public void set_ReplicationConfiguration(ReplicationConfiguration value);
    internal bool IsSetReplicationConfiguration();
}
public class Amazon.ECR.Model.PutReplicationConfigurationResponse : AmazonWebServiceResponse {
    private ReplicationConfiguration _replicationConfiguration;
    public ReplicationConfiguration ReplicationConfiguration { get; public set; }
    public ReplicationConfiguration get_ReplicationConfiguration();
    public void set_ReplicationConfiguration(ReplicationConfiguration value);
    internal bool IsSetReplicationConfiguration();
}
public class Amazon.ECR.Model.Recommendation : object {
    private string _text;
    private string _url;
    public string Text { get; public set; }
    public string Url { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    internal bool IsSetText();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.ECR.Model.ReferencedImagesNotFoundException : AmazonECRException {
    public ReferencedImagesNotFoundException(string message);
    public ReferencedImagesNotFoundException(string message, Exception innerException);
    public ReferencedImagesNotFoundException(Exception innerException);
    public ReferencedImagesNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReferencedImagesNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.RegistryPolicyNotFoundException : AmazonECRException {
    public RegistryPolicyNotFoundException(string message);
    public RegistryPolicyNotFoundException(string message, Exception innerException);
    public RegistryPolicyNotFoundException(Exception innerException);
    public RegistryPolicyNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RegistryPolicyNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.RegistryScanningConfiguration : object {
    private List`1<RegistryScanningRule> _rules;
    private ScanType _scanType;
    [AWSPropertyAttribute]
public List`1<RegistryScanningRule> Rules { get; public set; }
    public ScanType ScanType { get; public set; }
    public List`1<RegistryScanningRule> get_Rules();
    public void set_Rules(List`1<RegistryScanningRule> value);
    internal bool IsSetRules();
    public ScanType get_ScanType();
    public void set_ScanType(ScanType value);
    internal bool IsSetScanType();
}
public class Amazon.ECR.Model.RegistryScanningRule : object {
    private List`1<ScanningRepositoryFilter> _repositoryFilters;
    private ScanFrequency _scanFrequency;
    [AWSPropertyAttribute]
public List`1<ScanningRepositoryFilter> RepositoryFilters { get; public set; }
    [AWSPropertyAttribute]
public ScanFrequency ScanFrequency { get; public set; }
    public List`1<ScanningRepositoryFilter> get_RepositoryFilters();
    public void set_RepositoryFilters(List`1<ScanningRepositoryFilter> value);
    internal bool IsSetRepositoryFilters();
    public ScanFrequency get_ScanFrequency();
    public void set_ScanFrequency(ScanFrequency value);
    internal bool IsSetScanFrequency();
}
public class Amazon.ECR.Model.Remediation : object {
    private Recommendation _recommendation;
    public Recommendation Recommendation { get; public set; }
    public Recommendation get_Recommendation();
    public void set_Recommendation(Recommendation value);
    internal bool IsSetRecommendation();
}
public class Amazon.ECR.Model.ReplicationConfiguration : object {
    private List`1<ReplicationRule> _rules;
    [AWSPropertyAttribute]
public List`1<ReplicationRule> Rules { get; public set; }
    public List`1<ReplicationRule> get_Rules();
    public void set_Rules(List`1<ReplicationRule> value);
    internal bool IsSetRules();
}
public class Amazon.ECR.Model.ReplicationDestination : object {
    private string _region;
    private string _registryId;
    [AWSPropertyAttribute]
public string Region { get; public set; }
    [AWSPropertyAttribute]
public string RegistryId { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.ReplicationRule : object {
    private List`1<ReplicationDestination> _destinations;
    private List`1<RepositoryFilter> _repositoryFilters;
    [AWSPropertyAttribute]
public List`1<ReplicationDestination> Destinations { get; public set; }
    [AWSPropertyAttribute]
public List`1<RepositoryFilter> RepositoryFilters { get; public set; }
    public List`1<ReplicationDestination> get_Destinations();
    public void set_Destinations(List`1<ReplicationDestination> value);
    internal bool IsSetDestinations();
    public List`1<RepositoryFilter> get_RepositoryFilters();
    public void set_RepositoryFilters(List`1<RepositoryFilter> value);
    internal bool IsSetRepositoryFilters();
}
public class Amazon.ECR.Model.Repository : object {
    private Nullable`1<DateTime> _createdAt;
    private EncryptionConfiguration _encryptionConfiguration;
    private ImageScanningConfiguration _imageScanningConfiguration;
    private ImageTagMutability _imageTagMutability;
    private string _registryId;
    private string _repositoryArn;
    private string _repositoryName;
    private string _repositoryUri;
    public DateTime CreatedAt { get; public set; }
    public EncryptionConfiguration EncryptionConfiguration { get; public set; }
    public ImageScanningConfiguration ImageScanningConfiguration { get; public set; }
    public ImageTagMutability ImageTagMutability { get; public set; }
    public string RegistryId { get; public set; }
    public string RepositoryArn { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string RepositoryUri { get; public set; }
    public DateTime get_CreatedAt();
    public void set_CreatedAt(DateTime value);
    internal bool IsSetCreatedAt();
    public EncryptionConfiguration get_EncryptionConfiguration();
    public void set_EncryptionConfiguration(EncryptionConfiguration value);
    internal bool IsSetEncryptionConfiguration();
    public ImageScanningConfiguration get_ImageScanningConfiguration();
    public void set_ImageScanningConfiguration(ImageScanningConfiguration value);
    internal bool IsSetImageScanningConfiguration();
    public ImageTagMutability get_ImageTagMutability();
    public void set_ImageTagMutability(ImageTagMutability value);
    internal bool IsSetImageTagMutability();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryArn();
    public void set_RepositoryArn(string value);
    internal bool IsSetRepositoryArn();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public string get_RepositoryUri();
    public void set_RepositoryUri(string value);
    internal bool IsSetRepositoryUri();
}
public class Amazon.ECR.Model.RepositoryAlreadyExistsException : AmazonECRException {
    public RepositoryAlreadyExistsException(string message);
    public RepositoryAlreadyExistsException(string message, Exception innerException);
    public RepositoryAlreadyExistsException(Exception innerException);
    public RepositoryAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RepositoryAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.RepositoryFilter : object {
    private string _filter;
    private RepositoryFilterType _filterType;
    [AWSPropertyAttribute]
public string Filter { get; public set; }
    [AWSPropertyAttribute]
public RepositoryFilterType FilterType { get; public set; }
    public string get_Filter();
    public void set_Filter(string value);
    internal bool IsSetFilter();
    public RepositoryFilterType get_FilterType();
    public void set_FilterType(RepositoryFilterType value);
    internal bool IsSetFilterType();
}
public class Amazon.ECR.Model.RepositoryNotEmptyException : AmazonECRException {
    public RepositoryNotEmptyException(string message);
    public RepositoryNotEmptyException(string message, Exception innerException);
    public RepositoryNotEmptyException(Exception innerException);
    public RepositoryNotEmptyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RepositoryNotEmptyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.RepositoryNotFoundException : AmazonECRException {
    public RepositoryNotFoundException(string message);
    public RepositoryNotFoundException(string message, Exception innerException);
    public RepositoryNotFoundException(Exception innerException);
    public RepositoryNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RepositoryNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.RepositoryPolicyNotFoundException : AmazonECRException {
    public RepositoryPolicyNotFoundException(string message);
    public RepositoryPolicyNotFoundException(string message, Exception innerException);
    public RepositoryPolicyNotFoundException(Exception innerException);
    public RepositoryPolicyNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RepositoryPolicyNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.RepositoryScanningConfiguration : object {
    private List`1<ScanningRepositoryFilter> _appliedScanFilters;
    private string _repositoryArn;
    private string _repositoryName;
    private ScanFrequency _scanFrequency;
    private Nullable`1<bool> _scanOnPush;
    [AWSPropertyAttribute]
public List`1<ScanningRepositoryFilter> AppliedScanFilters { get; public set; }
    public string RepositoryArn { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ScanFrequency ScanFrequency { get; public set; }
    public bool ScanOnPush { get; public set; }
    public List`1<ScanningRepositoryFilter> get_AppliedScanFilters();
    public void set_AppliedScanFilters(List`1<ScanningRepositoryFilter> value);
    internal bool IsSetAppliedScanFilters();
    public string get_RepositoryArn();
    public void set_RepositoryArn(string value);
    internal bool IsSetRepositoryArn();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public ScanFrequency get_ScanFrequency();
    public void set_ScanFrequency(ScanFrequency value);
    internal bool IsSetScanFrequency();
    public bool get_ScanOnPush();
    public void set_ScanOnPush(bool value);
    internal bool IsSetScanOnPush();
}
public class Amazon.ECR.Model.RepositoryScanningConfigurationFailure : object {
    private ScanningConfigurationFailureCode _failureCode;
    private string _failureReason;
    private string _repositoryName;
    public ScanningConfigurationFailureCode FailureCode { get; public set; }
    public string FailureReason { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ScanningConfigurationFailureCode get_FailureCode();
    public void set_FailureCode(ScanningConfigurationFailureCode value);
    internal bool IsSetFailureCode();
    public string get_FailureReason();
    public void set_FailureReason(string value);
    internal bool IsSetFailureReason();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.Resource : object {
    private ResourceDetails _details;
    private string _id;
    private Dictionary`2<string, string> _tags;
    private string _type;
    public ResourceDetails Details { get; public set; }
    public string Id { get; public set; }
    public Dictionary`2<string, string> Tags { get; public set; }
    public string Type { get; public set; }
    public ResourceDetails get_Details();
    public void set_Details(ResourceDetails value);
    internal bool IsSetDetails();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Dictionary`2<string, string> get_Tags();
    public void set_Tags(Dictionary`2<string, string> value);
    internal bool IsSetTags();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.ECR.Model.ResourceDetails : object {
    private AwsEcrContainerImageDetails _awsEcrContainerImage;
    public AwsEcrContainerImageDetails AwsEcrContainerImage { get; public set; }
    public AwsEcrContainerImageDetails get_AwsEcrContainerImage();
    public void set_AwsEcrContainerImage(AwsEcrContainerImageDetails value);
    internal bool IsSetAwsEcrContainerImage();
}
public class Amazon.ECR.Model.ScanningRepositoryFilter : object {
    private string _filter;
    private ScanningRepositoryFilterType _filterType;
    [AWSPropertyAttribute]
public string Filter { get; public set; }
    [AWSPropertyAttribute]
public ScanningRepositoryFilterType FilterType { get; public set; }
    public string get_Filter();
    public void set_Filter(string value);
    internal bool IsSetFilter();
    public ScanningRepositoryFilterType get_FilterType();
    public void set_FilterType(ScanningRepositoryFilterType value);
    internal bool IsSetFilterType();
}
public class Amazon.ECR.Model.ScanNotFoundException : AmazonECRException {
    public ScanNotFoundException(string message);
    public ScanNotFoundException(string message, Exception innerException);
    public ScanNotFoundException(Exception innerException);
    public ScanNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ScanNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ScoreDetails : object {
    private CvssScoreDetails _cvss;
    public CvssScoreDetails Cvss { get; public set; }
    public CvssScoreDetails get_Cvss();
    public void set_Cvss(CvssScoreDetails value);
    internal bool IsSetCvss();
}
public class Amazon.ECR.Model.SecretNotFoundException : AmazonECRException {
    public SecretNotFoundException(string message);
    public SecretNotFoundException(string message, Exception innerException);
    public SecretNotFoundException(Exception innerException);
    public SecretNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SecretNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ServerException : AmazonECRException {
    public ServerException(string message);
    public ServerException(string message, Exception innerException);
    public ServerException(Exception innerException);
    public ServerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.SetRepositoryPolicyRequest : AmazonECRRequest {
    private Nullable`1<bool> _force;
    private string _policyText;
    private string _registryId;
    private string _repositoryName;
    public bool Force { get; public set; }
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public bool get_Force();
    public void set_Force(bool value);
    internal bool IsSetForce();
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.SetRepositoryPolicyResponse : AmazonWebServiceResponse {
    private string _policyText;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string PolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_PolicyText();
    public void set_PolicyText(string value);
    internal bool IsSetPolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.StartImageScanRequest : AmazonECRRequest {
    private ImageIdentifier _imageId;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public ImageIdentifier ImageId { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.StartImageScanResponse : AmazonWebServiceResponse {
    private ImageIdentifier _imageId;
    private ImageScanStatus _imageScanStatus;
    private string _registryId;
    private string _repositoryName;
    public ImageIdentifier ImageId { get; public set; }
    public ImageScanStatus ImageScanStatus { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public ImageIdentifier get_ImageId();
    public void set_ImageId(ImageIdentifier value);
    internal bool IsSetImageId();
    public ImageScanStatus get_ImageScanStatus();
    public void set_ImageScanStatus(ImageScanStatus value);
    internal bool IsSetImageScanStatus();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest : AmazonECRRequest {
    private string _lifecyclePolicyText;
    private string _registryId;
    private string _repositoryName;
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
}
public class Amazon.ECR.Model.StartLifecyclePolicyPreviewResponse : AmazonWebServiceResponse {
    private string _lifecyclePolicyText;
    private string _registryId;
    private string _repositoryName;
    private LifecyclePolicyPreviewStatus _status;
    [AWSPropertyAttribute]
public string LifecyclePolicyText { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public LifecyclePolicyPreviewStatus Status { get; public set; }
    public string get_LifecyclePolicyText();
    public void set_LifecyclePolicyText(string value);
    internal bool IsSetLifecyclePolicyText();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public LifecyclePolicyPreviewStatus get_Status();
    public void set_Status(LifecyclePolicyPreviewStatus value);
    internal bool IsSetStatus();
}
public class Amazon.ECR.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.ECR.Model.TagResourceRequest : AmazonECRRequest {
    private string _resourceArn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.ECR.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.ECR.Model.TooManyTagsException : AmazonECRException {
    public TooManyTagsException(string message);
    public TooManyTagsException(string message, Exception innerException);
    public TooManyTagsException(Exception innerException);
    public TooManyTagsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyTagsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UnableToAccessSecretException : AmazonECRException {
    public UnableToAccessSecretException(string message);
    public UnableToAccessSecretException(string message, Exception innerException);
    public UnableToAccessSecretException(Exception innerException);
    public UnableToAccessSecretException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnableToAccessSecretException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UnableToDecryptSecretValueException : AmazonECRException {
    public UnableToDecryptSecretValueException(string message);
    public UnableToDecryptSecretValueException(string message, Exception innerException);
    public UnableToDecryptSecretValueException(Exception innerException);
    public UnableToDecryptSecretValueException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnableToDecryptSecretValueException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UnableToGetUpstreamImageException : AmazonECRException {
    public UnableToGetUpstreamImageException(string message);
    public UnableToGetUpstreamImageException(string message, Exception innerException);
    public UnableToGetUpstreamImageException(Exception innerException);
    public UnableToGetUpstreamImageException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnableToGetUpstreamImageException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UnableToGetUpstreamLayerException : AmazonECRException {
    public UnableToGetUpstreamLayerException(string message);
    public UnableToGetUpstreamLayerException(string message, Exception innerException);
    public UnableToGetUpstreamLayerException(Exception innerException);
    public UnableToGetUpstreamLayerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnableToGetUpstreamLayerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UnsupportedImageTypeException : AmazonECRException {
    public UnsupportedImageTypeException(string message);
    public UnsupportedImageTypeException(string message, Exception innerException);
    public UnsupportedImageTypeException(Exception innerException);
    public UnsupportedImageTypeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedImageTypeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UnsupportedUpstreamRegistryException : AmazonECRException {
    public UnsupportedUpstreamRegistryException(string message);
    public UnsupportedUpstreamRegistryException(string message, Exception innerException);
    public UnsupportedUpstreamRegistryException(Exception innerException);
    public UnsupportedUpstreamRegistryException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedUpstreamRegistryException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.UntagResourceRequest : AmazonECRRequest {
    private string _resourceArn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.ECR.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.ECR.Model.UpdatePullThroughCacheRuleRequest : AmazonECRRequest {
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _registryId;
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.UpdatePullThroughCacheRuleResponse : AmazonWebServiceResponse {
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _registryId;
    private Nullable`1<DateTime> _updatedAt;
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public DateTime UpdatedAt { get; public set; }
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public DateTime get_UpdatedAt();
    public void set_UpdatedAt(DateTime value);
    internal bool IsSetUpdatedAt();
}
public class Amazon.ECR.Model.UploadLayerPartRequest : AmazonECRRequest {
    private MemoryStream _layerPartBlob;
    private Nullable`1<long> _partFirstByte;
    private Nullable`1<long> _partLastByte;
    private string _registryId;
    private string _repositoryName;
    private string _uploadId;
    [AWSPropertyAttribute]
public MemoryStream LayerPartBlob { get; public set; }
    [AWSPropertyAttribute]
public long PartFirstByte { get; public set; }
    [AWSPropertyAttribute]
public long PartLastByte { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    [AWSPropertyAttribute]
public string UploadId { get; public set; }
    public MemoryStream get_LayerPartBlob();
    public void set_LayerPartBlob(MemoryStream value);
    internal bool IsSetLayerPartBlob();
    public long get_PartFirstByte();
    public void set_PartFirstByte(long value);
    internal bool IsSetPartFirstByte();
    public long get_PartLastByte();
    public void set_PartLastByte(long value);
    internal bool IsSetPartLastByte();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.ECR.Model.UploadLayerPartResponse : AmazonWebServiceResponse {
    private Nullable`1<long> _lastByteReceived;
    private string _registryId;
    private string _repositoryName;
    private string _uploadId;
    [AWSPropertyAttribute]
public long LastByteReceived { get; public set; }
    public string RegistryId { get; public set; }
    [AWSPropertyAttribute]
public string RepositoryName { get; public set; }
    public string UploadId { get; public set; }
    public long get_LastByteReceived();
    public void set_LastByteReceived(long value);
    internal bool IsSetLastByteReceived();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_RepositoryName();
    public void set_RepositoryName(string value);
    internal bool IsSetRepositoryName();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.ECR.Model.UploadNotFoundException : AmazonECRException {
    public UploadNotFoundException(string message);
    public UploadNotFoundException(string message, Exception innerException);
    public UploadNotFoundException(Exception innerException);
    public UploadNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UploadNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.ValidatePullThroughCacheRuleRequest : AmazonECRRequest {
    private string _ecrRepositoryPrefix;
    private string _registryId;
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string RegistryId { get; public set; }
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
}
public class Amazon.ECR.Model.ValidatePullThroughCacheRuleResponse : AmazonWebServiceResponse {
    private string _credentialArn;
    private string _ecrRepositoryPrefix;
    private string _failure;
    private Nullable`1<bool> _isValid;
    private string _registryId;
    private string _upstreamRegistryUrl;
    [AWSPropertyAttribute]
public string CredentialArn { get; public set; }
    [AWSPropertyAttribute]
public string EcrRepositoryPrefix { get; public set; }
    public string Failure { get; public set; }
    public bool IsValid { get; public set; }
    public string RegistryId { get; public set; }
    public string UpstreamRegistryUrl { get; public set; }
    public string get_CredentialArn();
    public void set_CredentialArn(string value);
    internal bool IsSetCredentialArn();
    public string get_EcrRepositoryPrefix();
    public void set_EcrRepositoryPrefix(string value);
    internal bool IsSetEcrRepositoryPrefix();
    public string get_Failure();
    public void set_Failure(string value);
    internal bool IsSetFailure();
    public bool get_IsValid();
    public void set_IsValid(bool value);
    internal bool IsSetIsValid();
    public string get_RegistryId();
    public void set_RegistryId(string value);
    internal bool IsSetRegistryId();
    public string get_UpstreamRegistryUrl();
    public void set_UpstreamRegistryUrl(string value);
    internal bool IsSetUpstreamRegistryUrl();
}
public class Amazon.ECR.Model.ValidationException : AmazonECRException {
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    public ValidationException(Exception innerException);
    public ValidationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ValidationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.ECR.Model.VulnerablePackage : object {
    private string _arch;
    private Nullable`1<int> _epoch;
    private string _filePath;
    private string _name;
    private string _packageManager;
    private string _release;
    private string _sourceLayerHash;
    private string _version;
    public string Arch { get; public set; }
    public int Epoch { get; public set; }
    public string FilePath { get; public set; }
    public string Name { get; public set; }
    public string PackageManager { get; public set; }
    public string Release { get; public set; }
    public string SourceLayerHash { get; public set; }
    public string Version { get; public set; }
    public string get_Arch();
    public void set_Arch(string value);
    internal bool IsSetArch();
    public int get_Epoch();
    public void set_Epoch(int value);
    internal bool IsSetEpoch();
    public string get_FilePath();
    public void set_FilePath(string value);
    internal bool IsSetFilePath();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_PackageManager();
    public void set_PackageManager(string value);
    internal bool IsSetPackageManager();
    public string get_Release();
    public void set_Release(string value);
    internal bool IsSetRelease();
    public string get_SourceLayerHash();
    public void set_SourceLayerHash(string value);
    internal bool IsSetSourceLayerHash();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.ECR.ReplicationStatus : ConstantClass {
    public static ReplicationStatus COMPLETE;
    public static ReplicationStatus FAILED;
    public static ReplicationStatus IN_PROGRESS;
    public ReplicationStatus(string value);
    private static ReplicationStatus();
    public static ReplicationStatus FindValue(string value);
    public static ReplicationStatus op_Implicit(string value);
}
public class Amazon.ECR.RepositoryFilterType : ConstantClass {
    public static RepositoryFilterType PREFIX_MATCH;
    public RepositoryFilterType(string value);
    private static RepositoryFilterType();
    public static RepositoryFilterType FindValue(string value);
    public static RepositoryFilterType op_Implicit(string value);
}
public class Amazon.ECR.ScanFrequency : ConstantClass {
    public static ScanFrequency CONTINUOUS_SCAN;
    public static ScanFrequency MANUAL;
    public static ScanFrequency SCAN_ON_PUSH;
    public ScanFrequency(string value);
    private static ScanFrequency();
    public static ScanFrequency FindValue(string value);
    public static ScanFrequency op_Implicit(string value);
}
public class Amazon.ECR.ScanningConfigurationFailureCode : ConstantClass {
    public static ScanningConfigurationFailureCode REPOSITORY_NOT_FOUND;
    public ScanningConfigurationFailureCode(string value);
    private static ScanningConfigurationFailureCode();
    public static ScanningConfigurationFailureCode FindValue(string value);
    public static ScanningConfigurationFailureCode op_Implicit(string value);
}
public class Amazon.ECR.ScanningRepositoryFilterType : ConstantClass {
    public static ScanningRepositoryFilterType WILDCARD;
    public ScanningRepositoryFilterType(string value);
    private static ScanningRepositoryFilterType();
    public static ScanningRepositoryFilterType FindValue(string value);
    public static ScanningRepositoryFilterType op_Implicit(string value);
}
public class Amazon.ECR.ScanStatus : ConstantClass {
    public static ScanStatus ACTIVE;
    public static ScanStatus COMPLETE;
    public static ScanStatus FAILED;
    public static ScanStatus FINDINGS_UNAVAILABLE;
    public static ScanStatus IN_PROGRESS;
    public static ScanStatus PENDING;
    public static ScanStatus SCAN_ELIGIBILITY_EXPIRED;
    public static ScanStatus UNSUPPORTED_IMAGE;
    public ScanStatus(string value);
    private static ScanStatus();
    public static ScanStatus FindValue(string value);
    public static ScanStatus op_Implicit(string value);
}
public class Amazon.ECR.ScanType : ConstantClass {
    public static ScanType BASIC;
    public static ScanType ENHANCED;
    public ScanType(string value);
    private static ScanType();
    public static ScanType FindValue(string value);
    public static ScanType op_Implicit(string value);
}
public class Amazon.ECR.TagStatus : ConstantClass {
    public static TagStatus ANY;
    public static TagStatus TAGGED;
    public static TagStatus UNTAGGED;
    public TagStatus(string value);
    private static TagStatus();
    public static TagStatus FindValue(string value);
    public static TagStatus op_Implicit(string value);
}
public class Amazon.ECR.UpstreamRegistry : ConstantClass {
    public static UpstreamRegistry AzureContainerRegistry;
    public static UpstreamRegistry DockerHub;
    public static UpstreamRegistry EcrPublic;
    public static UpstreamRegistry GithubContainerRegistry;
    public static UpstreamRegistry K8s;
    public static UpstreamRegistry Quay;
    public UpstreamRegistry(string value);
    private static UpstreamRegistry();
    public static UpstreamRegistry FindValue(string value);
    public static UpstreamRegistry op_Implicit(string value);
}
