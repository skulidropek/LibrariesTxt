public abstract class Amazon.Common.DotNetCli.Tools.AbstractCLIWrapper : object {
    protected string _workingDirectory;
    protected IToolLogger _logger;
    private static IDictionary`2<string, string> KNOWN_LOCATIONS;
    public AbstractCLIWrapper(IToolLogger logger, string workingDirectory);
    private static AbstractCLIWrapper();
    protected int ExecuteCommand(ProcessStartInfo startInfo, string loggerLabel);
    public static string FindExecutableInPath(string command);
}
internal class Amazon.Common.DotNetCli.Tools.AssumeRoleMfaTokenCodeCallback : object {
    [CompilerGeneratedAttribute]
private AssumeRoleAWSCredentialsOptions <Options>k__BackingField;
    private AssumeRoleAWSCredentialsOptions Options { get; private set; }
    internal AssumeRoleMfaTokenCodeCallback(AssumeRoleAWSCredentialsOptions options);
    [CompilerGeneratedAttribute]
private AssumeRoleAWSCredentialsOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(AssumeRoleAWSCredentialsOptions value);
    internal string Execute();
}
public class Amazon.Common.DotNetCli.Tools.CLi.Application : object {
    [CompilerGeneratedAttribute]
private string <SubCommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ICommandInfo> <CommandInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectHome>k__BackingField;
    public string SubCommandName { get; }
    public string ToolDisplayName { get; }
    private IList`1<ICommandInfo> CommandInfos { get; }
    public string ProjectHome { get; }
    public Application(string subCommandName, string toolDisplayName, string projectHome, IList`1<ICommandInfo> commands);
    [CompilerGeneratedAttribute]
public string get_SubCommandName();
    [CompilerGeneratedAttribute]
public string get_ToolDisplayName();
    [CompilerGeneratedAttribute]
private IList`1<ICommandInfo> get_CommandInfos();
    [CompilerGeneratedAttribute]
public string get_ProjectHome();
    public int Execute(String[] args);
    private bool IsHelpSwitch(string value);
    private ICommandInfo FindCommandInfo(string name);
    private void PrintToolTitle();
    private void PrintUsage();
    private void PrintUsage(string command);
    private void PrintUsage(string command, string description, IList`1<CommandOption> options, string argument);
}
public abstract class Amazon.Common.DotNetCli.Tools.Commands.BaseCommand`1 : object {
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OriginalCommandLineArguments>k__BackingField;
    protected static IList`1<CommandOption> CommonOptions;
    private TDefaultConfig _defaultConfig;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AWSAccessKeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AWSSecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AWSSessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private AWSCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PersistConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableInteractive>k__BackingField;
    private AWSCredentials _resolvedCredentials;
    protected Dictionary`2<CommandOption, string> _cachedRequestedValues;
    [CompilerGeneratedAttribute]
private IToolLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    private IAmazonSecurityTokenService _stsClient;
    private IAmazonIdentityManagementService _iamClient;
    private IAmazonS3 _s3Client;
    private IAmazonECR _ecrClient;
    public ToolsException LastToolsException { get; }
    public Exception LastException { get; private set; }
    public String[] OriginalCommandLineArguments { get; private set; }
    protected string ToolName { get; }
    protected string UserAgentString { get; }
    public TDefaultConfig DefaultConfig { get; }
    public string Region { get; public set; }
    public string Profile { get; public set; }
    public string ProfileLocation { get; public set; }
    public string AWSAccessKeyId { get; public set; }
    public string AWSSecretKey { get; public set; }
    public string AWSSessionToken { get; public set; }
    public AWSCredentials Credentials { get; public set; }
    public string ProjectLocation { get; public set; }
    public string ConfigFile { get; public set; }
    public Nullable`1<bool> PersistConfigFile { get; public set; }
    public bool DisableInteractive { get; public set; }
    public IToolLogger Logger { get; protected set; }
    public string WorkingDirectory { get; public set; }
    public IAmazonSecurityTokenService STSClient { get; public set; }
    public IAmazonIdentityManagementService IAMClient { get; public set; }
    public IAmazonS3 S3Client { get; public set; }
    public IAmazonECR ECRClient { get; public set; }
    public BaseCommand`1(IToolLogger logger, string workingDirectory);
    public BaseCommand`1(IToolLogger logger, string workingDirectory, IList`1<CommandOption> possibleOptions, String[] args);
    private static BaseCommand`1();
    public ToolsException get_LastToolsException();
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
    [CompilerGeneratedAttribute]
public String[] get_OriginalCommandLineArguments();
    [CompilerGeneratedAttribute]
private void set_OriginalCommandLineArguments(String[] value);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Commands.BaseCommand`1/<ExecuteAsync>d__12")]
public sealed virtual Task`1<bool> ExecuteAsync();
    protected abstract virtual Task`1<bool> PerformActionAsync();
    protected abstract virtual string get_ToolName();
    protected string get_UserAgentString();
    protected static IList`1<CommandOption> BuildLineOptions(IList`1[] optionCollections);
    protected virtual void ParseCommandArguments(CommandOptions values);
    public TDefaultConfig get_DefaultConfig();
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileLocation();
    [CompilerGeneratedAttribute]
public void set_ProfileLocation(string value);
    [CompilerGeneratedAttribute]
public string get_AWSAccessKeyId();
    [CompilerGeneratedAttribute]
public void set_AWSAccessKeyId(string value);
    [CompilerGeneratedAttribute]
public string get_AWSSecretKey();
    [CompilerGeneratedAttribute]
public void set_AWSSecretKey(string value);
    [CompilerGeneratedAttribute]
public string get_AWSSessionToken();
    [CompilerGeneratedAttribute]
public void set_AWSSessionToken(string value);
    [CompilerGeneratedAttribute]
public AWSCredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(AWSCredentials value);
    [CompilerGeneratedAttribute]
public string get_ProjectLocation();
    [CompilerGeneratedAttribute]
public void set_ProjectLocation(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PersistConfigFile();
    [CompilerGeneratedAttribute]
public void set_PersistConfigFile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableInteractive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableInteractive(bool value);
    protected AWSCredentials DetermineAWSCredentials();
    public RegionEndpoint DetermineAWSRegion();
    public string GetStringValueOrDefault(string propertyValue, CommandOption option, bool required);
    public string GetRoleValueOrDefault(string propertyValue, CommandOption option, string assumeRolePrincipal, string awsManagedPolicyPrefix, Dictionary`2<string, string> knownManagedPolicyDescription, bool required);
    public JsonData GetJsonValueOrDefault(string propertyValue, CommandOption option);
    public String[] GetStringValuesOrDefault(String[] propertyValue, CommandOption option, bool required);
    public Dictionary`2<string, string> GetKeyValuePairOrDefault(Dictionary`2<string, string> propertyValue, CommandOption option, bool required);
    public Nullable`1<int> GetIntValueOrDefault(Nullable`1<int> propertyValue, CommandOption option, bool required);
    public Nullable`1<bool> GetBoolValueOrDefault(Nullable`1<bool> propertyValue, CommandOption option, bool required);
    public string GetInstanceProfileOrDefault(string propertyValue, CommandOption option, bool required, string newRoleName);
    protected string GetServiceRoleOrCreateIt(string propertyValue, CommandOption option, string roleName, string assumeRolePolicy, string policy, String[] managedPolicies);
    protected string PromptForValue(CommandOption option);
    protected int PromptForValue(CommandOption option, IList`1<string> items);
    protected int PromptForValue(string message, IList`1<string> items);
    private int WaitForIndexResponse(int min, int max);
    [CompilerGeneratedAttribute]
public IToolLogger get_Logger();
    [CompilerGeneratedAttribute]
protected void set_Logger(IToolLogger value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    protected string GetUserAgentString();
    public IAmazonSecurityTokenService get_STSClient();
    public void set_STSClient(IAmazonSecurityTokenService value);
    public IAmazonIdentityManagementService get_IAMClient();
    public void set_IAMClient(IAmazonIdentityManagementService value);
    public IAmazonS3 get_S3Client();
    public void set_S3Client(IAmazonS3 value);
    public IAmazonECR get_ECRClient();
    public void set_ECRClient(IAmazonECR value);
    protected void SaveConfigFile();
    protected abstract virtual void SaveConfigFile(JsonData data);
    public bool ConfirmDeletion(string resource);
    protected void EnsureInProjectDirectory();
}
public abstract class Amazon.Common.DotNetCli.Tools.Commands.BasePushDockerImageCommand`1 : BaseCommand`1<TDefaultConfig> {
    public static IList`1<CommandOption> CommandOptions;
    private PushDockerImagePropertyContainer<TDefaultConfig> _pushProperties;
    [CompilerGeneratedAttribute]
private string <PushedImageUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipPushToECR>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageTagUniqueSeed>k__BackingField;
    public PushDockerImagePropertyContainer<TDefaultConfig> PushDockerImageProperties { get; public set; }
    public string PushedImageUri { get; private set; }
    public bool SkipPushToECR { get; public set; }
    public string ImageTagUniqueSeed { get; public set; }
    public BasePushDockerImageCommand`1(IToolLogger logger, string workingDirectory, String[] args);
    protected BasePushDockerImageCommand`1(IToolLogger logger, string workingDirectory, IList`1<CommandOption> commandOptions, String[] args);
    private static BasePushDockerImageCommand`1();
    public PushDockerImagePropertyContainer<TDefaultConfig> get_PushDockerImageProperties();
    public void set_PushDockerImageProperties(PushDockerImagePropertyContainer<TDefaultConfig> value);
    [CompilerGeneratedAttribute]
public string get_PushedImageUri();
    [CompilerGeneratedAttribute]
private void set_PushedImageUri(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipPushToECR();
    [CompilerGeneratedAttribute]
public void set_SkipPushToECR(bool value);
    [CompilerGeneratedAttribute]
public string get_ImageTagUniqueSeed();
    [CompilerGeneratedAttribute]
public void set_ImageTagUniqueSeed(string value);
    protected virtual void ParseCommandArguments(CommandOptions values);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Commands.BasePushDockerImageCommand`1/<PerformActionAsync>d__20")]
protected virtual Task`1<bool> PerformActionAsync();
    public static string GenerateUniqueEcrTag(string uniqueSeed, string destinationDockerTag, string imageId);
    private string DetermineDockerImageTag(bool required, string projectLocation);
    private void BuildDockerImage(DockerCLIWrapper dockerCli, string projectLocation, string dockerImageTag);
    protected virtual int ExecuteDockerBuild(DockerCLIWrapper dockerCli, string dockerBuildWorkingDirectory, string fullDockerfilePath, string dockerImageTag, string dockerBuildOptions);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Commands.BasePushDockerImageCommand`1/<PushToECR>d__25")]
private Task PushToECR(DockerCLIWrapper dockerCli, string sourceDockerImageTag, string destinationDockerImageTag);
    public static RepoInfo<TDefaultConfig> SplitImageTag(string imageTag);
    protected virtual void BuildProject(string projectLocation, string configuration, string targetFramework, string publishOptions, string publishLocation);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Commands.BasePushDockerImageCommand`1/<SetupECRRepository>d__28")]
private Task`1<Repository> SetupECRRepository(string ecrRepositoryName);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Commands.BasePushDockerImageCommand`1/<InitiateDockerLogin>d__29")]
private Task InitiateDockerLogin(DockerCLIWrapper dockerCLI);
    protected virtual void SaveConfigFile(JsonData data);
    public static DockerDetails<TDefaultConfig> InspectDockerFile(IToolLogger logger, string projectLocation, string dockerfile);
    private static string DetermineProjectFile(string projectLocation);
    public static string DetermineSolutionDirectory(string projectLocation);
}
public class Amazon.Common.DotNetCli.Tools.Commands.CommandInfo`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CommandOption> <CommandOptions>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public string Argument { get; }
    public IList`1<CommandOption> CommandOptions { get; }
    public CommandInfo`1(string name, string description, IList`1<CommandOption> commandOptions);
    public CommandInfo`1(string name, string description, IList`1<CommandOption> commandOptions, string argument);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Argument();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<CommandOption> get_CommandOptions();
    public sealed virtual ICommand CreateCommand(IToolLogger logger, string workingDirectory, String[] args);
}
public class Amazon.Common.DotNetCli.Tools.Commands.GroupHeaderInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CommandOption> <CommandOptions>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public string Argument { get; }
    public IList`1<CommandOption> CommandOptions { get; }
    public GroupHeaderInfo(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Argument();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<CommandOption> get_CommandOptions();
    public sealed virtual ICommand CreateCommand(IToolLogger logger, string workingDirectory, String[] args);
}
public interface Amazon.Common.DotNetCli.Tools.Commands.ICommand {
    public bool DisableInteractive { get; public set; }
    public abstract virtual bool get_DisableInteractive();
    public abstract virtual void set_DisableInteractive(bool value);
    public abstract virtual Task`1<bool> ExecuteAsync();
}
public interface Amazon.Common.DotNetCli.Tools.Commands.ICommandInfo {
    public string Name { get; }
    public string Description { get; }
    public string Argument { get; }
    public IList`1<CommandOption> CommandOptions { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual string get_Argument();
    public abstract virtual IList`1<CommandOption> get_CommandOptions();
    public abstract virtual ICommand CreateCommand(IToolLogger logger, string workingDirectory, String[] args);
}
public class Amazon.Common.DotNetCli.Tools.ConsoleToolLogger : object {
    public sealed virtual void WriteLine(string message);
    public sealed virtual void WriteLine(string message, Object[] args);
}
public static class Amazon.Common.DotNetCli.Tools.Constants : object {
    public static string DEFAULT_DOCKERFILE;
    public static int MAX_ECR_REPOSITORY_NAME_LENGTH;
    public static string CWE_ASSUME_ROLE_POLICY;
    public static string ECS_ASSUME_ROLE_POLICY;
    public static string EC2_ASSUME_ROLE_POLICY;
    public static string ELASTICBEANSTALK_ASSUME_ROLE_POLICY;
    public static string ECS_TASKS_ASSUME_ROLE_POLICY;
    public static string LAMBDA_PRINCIPAL;
    public static string LAMBDA_ASSUME_ROLE_POLICY;
    public static Dictionary`2<string, string> COMMON_KNOWN_MANAGED_POLICY_DESCRIPTIONS;
    private static Constants();
}
[DefaultMemberAttribute("Item")]
public abstract class Amazon.Common.DotNetCli.Tools.DefaultConfigFile : object {
    private JsonData _rootData;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    public string SourceFile { get; private set; }
    public string DefaultConfigFileName { get; }
    public object Item { get; }
    public DefaultConfigFile(string sourceFile);
    public DefaultConfigFile(JsonData data, string sourceFile);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(string value);
    public abstract virtual string get_DefaultConfigFileName();
    public void LoadDefaults(string projectLocation, string configFile);
    public object get_Item(string fullSwitchName);
    protected JsonData GetValue(CommandOption option);
    public string GetValueAsString(CommandOption option);
    public static string FormatCommaDelimitedList(String[] values);
    public static string FormatKeyValue(IDictionary`2<string, string> values);
    public string GetRawString(string key);
}
public class Amazon.Common.DotNetCli.Tools.DockerCLIWrapper : AbstractCLIWrapper {
    public static string WorkingDirectoryMountLocation;
    private string _dockerCLI;
    public DockerCLIWrapper(IToolLogger logger, string workingDirectory);
    private static DockerCLIWrapper();
    public int Build(string workingDirectory, string dockerFile, string imageTag, string additionalBuildOptions, bool arm64Build);
    public string GetImageId(string imageTag);
    public int Login(string username, string password, string proxy);
    public int Tag(string sourceTagName, string targetTagName);
    public int Push(string targetTagName);
    public int Run(string imageId, string containerName, string commandToRun);
}
public class Amazon.Common.DotNetCli.Tools.DotNetCLIWrapper : AbstractCLIWrapper {
    public DotNetCLIWrapper(IToolLogger logger, string workingDirectory);
    public int Publish(string projectLocation, string outputLocation, string targetFramework, string configuration, string additionalPublishOptions);
    public static Version GetSdkVersion();
    public static Version ParseListSdkOutput(string listSdkOutput);
}
[ExtensionAttribute]
public static class Amazon.Common.DotNetCli.Tools.ExtensionMethods : object {
    [ExtensionAttribute]
public static void SetIfNotNull(JsonData data, string key, string value);
    [ExtensionAttribute]
public static void SetFilePathIfNotNull(JsonData data, string key, string filepath, string rootPath);
    [ExtensionAttribute]
public static void SetIfNotNull(JsonData data, string key, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetIfNotNull(JsonData data, string key, Nullable`1<int> value);
}
public interface Amazon.Common.DotNetCli.Tools.IProcessFactory {
    public abstract virtual ProcessResults RunProcess(ProcessStartInfo info, int timeout);
}
public interface Amazon.Common.DotNetCli.Tools.IToolLogger {
    public abstract virtual void WriteLine(string message);
    public abstract virtual void WriteLine(string message, Object[] args);
}
public static class Amazon.Common.DotNetCli.Tools.Options.CommandLineParser : object {
    public static CommandOptions ParseArguments(IList`1<CommandOption> options, String[] arguments);
    private static CommandOption FindCommandOption(IEnumerable`1<CommandOption> options, string argument);
}
public class Amazon.Common.DotNetCli.Tools.Options.CommandOption : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Switch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionValueType <ValueType>k__BackingField;
    public string Name { get; public set; }
    public string ShortSwitch { get; public set; }
    public string Switch { get; public set; }
    public string Description { get; public set; }
    public CommandOptionValueType ValueType { get; public set; }
    public string ConfigFileKey { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ShortSwitch();
    [CompilerGeneratedAttribute]
public void set_ShortSwitch(string value);
    [CompilerGeneratedAttribute]
public string get_Switch();
    [CompilerGeneratedAttribute]
public void set_Switch(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public CommandOptionValueType get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(CommandOptionValueType value);
    public string get_ConfigFileKey();
}
public class Amazon.Common.DotNetCli.Tools.Options.CommandOptions : object {
    private Dictionary`2<CommandOption, CommandOptionValue> _values;
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildParameters>k__BackingField;
    public int Count { get; }
    public IList`1<string> Arguments { get; }
    public string MSBuildParameters { get; public set; }
    public int get_Count();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Arguments();
    public void AddOption(CommandOption option, CommandOptionValue value);
    public Tuple`2<CommandOption, CommandOptionValue> FindCommandOption(string argument);
    [CompilerGeneratedAttribute]
public string get_MSBuildParameters();
    [CompilerGeneratedAttribute]
public void set_MSBuildParameters(string value);
}
public class Amazon.Common.DotNetCli.Tools.Options.CommandOptionValue : object {
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StringValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <KeyValuePairs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BoolValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IntValue>k__BackingField;
    public string StringValue { get; public set; }
    public String[] StringValues { get; public set; }
    public Dictionary`2<string, string> KeyValuePairs { get; public set; }
    public bool BoolValue { get; public set; }
    public int IntValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
public void set_StringValue(string value);
    [CompilerGeneratedAttribute]
public String[] get_StringValues();
    [CompilerGeneratedAttribute]
public void set_StringValues(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_KeyValuePairs();
    [CompilerGeneratedAttribute]
public void set_KeyValuePairs(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_BoolValue();
    [CompilerGeneratedAttribute]
public void set_BoolValue(bool value);
    [CompilerGeneratedAttribute]
public int get_IntValue();
    [CompilerGeneratedAttribute]
public void set_IntValue(int value);
}
public static class Amazon.Common.DotNetCli.Tools.Options.CommonDefinedCommandOptions : object {
    public static CommandOption ARGUMENT_CONFIGURATION;
    public static CommandOption ARGUMENT_FRAMEWORK;
    public static CommandOption ARGUMENT_SELF_CONTAINED;
    public static CommandOption ARGUMENT_PUBLISH_OPTIONS;
    public static CommandOption ARGUMENT_DISABLE_INTERACTIVE;
    public static CommandOption ARGUMENT_AWS_PROFILE;
    public static CommandOption ARGUMENT_AWS_PROFILE_LOCATION;
    public static CommandOption ARGUMENT_AWS_ACCESS_KEY_ID;
    public static CommandOption ARGUMENT_AWS_SECRET_KEY;
    public static CommandOption ARGUMENT_AWS_SESSION_TOKEN;
    public static CommandOption ARGUMENT_AWS_REGION;
    public static CommandOption ARGUMENT_PROJECT_LOCATION;
    public static CommandOption ARGUMENT_MSBUILD_PARAMETERS;
    public static CommandOption ARGUMENT_CONFIG_FILE;
    public static CommandOption ARGUMENT_PERSIST_CONFIG_FILE;
    public static CommandOption ARGUMENT_DOCKER_TAG;
    public static CommandOption ARGUMENT_DOCKER_TAG_OBSOLETE;
    public static CommandOption ARGUMENT_DOCKER_BUILD_WORKING_DIRECTORY;
    public static CommandOption ARGUMENT_DOCKER_BUILD_OPTIONS;
    public static CommandOption ARGUMENT_DOCKERFILE;
    public static CommandOption ARGUMENT_LOCAL_DOCKER_IMAGE;
    public static CommandOption ARGUMENT_HOST_BUILD_OUTPUT;
    private static CommonDefinedCommandOptions();
}
public static class Amazon.Common.DotNetCli.Tools.PosixUserHelper : object {
    public static bool IsRunningInPosix;
    private static PosixUserHelper();
    public static Nullable`1<PosixUserInfo> GetEffectiveUser(IToolLogger logger, IProcessFactory processFactory);
}
public class Amazon.Common.DotNetCli.Tools.PosixUserInfo : ValueType {
    public int UserID;
    public int GroupID;
    public bool UserIDSet;
    public bool GroupIDSet;
}
public class Amazon.Common.DotNetCli.Tools.ProcessFactory : object {
    public static IProcessFactory Default;
    private static ProcessFactory();
    public sealed virtual ProcessResults RunProcess(ProcessStartInfo info, int timeout);
}
public class Amazon.Common.DotNetCli.Tools.ProcessInstance : object {
    private ProcessStartInfo _info;
    public ProcessInstance(ProcessStartInfo info);
    public ProcessResults Run(int timeoutInMilliseconds);
}
public static class Amazon.Common.DotNetCli.Tools.RoleHelper : object {
    public static string EC2_ASSUME_ROLE_PRINCIPAL;
    public static string ECS_TASK_ASSUME_ROLE_PRINCIPAL;
    public static int DEFAULT_ITEM_MAX;
    private static int MAX_LINE_LENGTH_FOR_MANAGED_ROLE;
    public static TimeSpan SLEEP_TIME_FOR_ROLE_PROPOGATION;
    private static RoleHelper();
    public static string GenerateUniqueIAMRoleName(IAmazonIdentityManagementService iamClient, string baseName);
    public static string ExpandInstanceProfile(IAmazonIdentityManagementService iamClient, string instanceProfile);
    public static string ExpandRoleName(IAmazonIdentityManagementService iamClient, string roleName);
    public static string ExpandManagedPolicyName(IAmazonIdentityManagementService iamClient, string managedPolicy);
    public static string CreateRole(IAmazonIdentityManagementService iamClient, string roleName, string assumeRolePolicy, String[] managedPolicies);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.RoleHelper/<FindManagedPoliciesAsync>d__10")]
public static Task`1<IList`1<ManagedPolicy>> FindManagedPoliciesAsync(IAmazonIdentityManagementService iamClient, PromptRoleInfo promptInfo, int maxPolicies);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.RoleHelper/<FindExistingRolesAsync>d__11")]
public static Task`1<IList`1<Role>> FindExistingRolesAsync(IAmazonIdentityManagementService iamClient, string assumeRolePrincpal, int maxRoles);
    private static IList`1<Role> FindExistingRoles(IAmazonIdentityManagementService iamClient, string assumeRolePrincpal, int maxRoles);
    private static bool AssumeRoleServicePrincipalSelector(Role r, string servicePrincipal);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.RoleHelper/<FindExistingInstanceProfilesAsync>d__14")]
public static Task`1<IList`1<InstanceProfile>> FindExistingInstanceProfilesAsync(IAmazonIdentityManagementService iamClient, int maxRoles);
    public static string PromptForRole(IAmazonIdentityManagementService iamClient, PromptRoleInfo promptInfo);
    private static string SelectFromExisting(IAmazonIdentityManagementService iamClient, PromptRoleInfo promptInfo, IList`1<Role> existingRoles);
    private static string PromptToCreateRole(IAmazonIdentityManagementService iamClient, PromptRoleInfo promptInfo);
    private static string AttemptToGetPolicyDescription(string policyArn, Dictionary`2<string, string> knownManagedPolicyDescription);
}
public class Amazon.Common.DotNetCli.Tools.ToolkitConfigFileFetcher : object {
    private static string HOSTEDFILES_LOCATION;
    private static ToolkitConfigFileFetcher INSTANCE;
    public static ToolkitConfigFileFetcher Instance { get; }
    private static ToolkitConfigFileFetcher();
    public static ToolkitConfigFileFetcher get_Instance();
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.ToolkitConfigFileFetcher/<GetFileContentAsync>d__5")]
public Task`1<string> GetFileContentAsync(IToolLogger logger, string filename);
}
public class Amazon.Common.DotNetCli.Tools.ToolsException : Exception {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceCode>k__BackingField;
    public string Code { get; }
    public string ServiceCode { get; }
    public ToolsException(string message, CommonErrorCode code);
    public ToolsException(string message, CommonErrorCode code, Exception e);
    protected ToolsException(string message, string errorCode, Exception e);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public string get_ServiceCode();
}
[ExtensionAttribute]
public static class Amazon.Common.DotNetCli.Tools.Utilities : object {
    private static Regex EnvironmentVariableTokens;
    private static int UPLOAD_PROGRESS_INCREMENT;
    private static string GENERIC_ASSUME_ROLE_POLICY;
    private static Utilities();
    public static void SetUserAgentString(AmazonServiceClient amazonServiceClient, string userAgent);
    public static string ReplaceEnvironmentVariables(string original);
    private static Nullable`1<DictionaryEntry> FindEnvironmentVariable(string name);
    [ExtensionAttribute]
public static String[] SplitByComma(string str);
    public static string RelativePathTo(string start, string relativeTo);
    public static string GetSolutionDirectoryFullPath(string workingDirectory, string projectLocation, string givenSolutionDirectory);
    public static string DeterminePublishLocation(string workingDirectory, string projectLocation, string configuration, string targetFramework);
    public static string LookupTargetFrameworkFromProjectFile(string projectLocation);
    public static string LookupOutputTypeFromProjectFile(string projectLocation);
    public static bool LookPublishAotFlag(string projectLocation, string msBuildParameters);
    public static bool HasExplicitSelfContainedFlag(string projectLocation, string msBuildParameters);
    public static string FindProjectFileInDirectory(string directory);
    public static string DetermineProjectLocation(string workingDirectory, string projectLocation);
    public static string DetermineBuildLocation(string workingDirectory, string projectLocation, string configuration, string targetFramework);
    public static Dictionary`2<string, string> ParseKeyValueOption(string option);
    private static void GetNextToken(string option, char endToken, Int32& currentPos, String& token);
    public static string DetermineToolVersion();
    public static void ZipDirectory(IToolLogger logger, string directory, string zipArchivePath);
    private static IDictionary`2<string, string> GetFilesToIncludeInArchive(string publishLocation);
    private static void BundleWithDotNetCompression(string zipArchivePath, string publishLocation, IToolLogger logger);
    private static void BundleWithZipCLI(string zipCLI, string zipArchivePath, string publishLocation, IToolLogger logger);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Utilities/<ValidateBucketRegionAsync>d__22")]
public static Task ValidateBucketRegionAsync(IAmazonS3 s3Client, string s3Bucket);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Utilities/<GetBucketRegionAsync>d__23")]
private static Task`1<string> GetBucketRegionAsync(IAmazonS3 s3Client, string bucket);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Utilities/<EnsureBucketExistsAsync>d__24")]
public static Task`1<bool> EnsureBucketExistsAsync(IToolLogger logger, IAmazonS3 s3Client, string bucketName);
    public static Task`1<string> UploadToS3Async(IToolLogger logger, IAmazonS3 s3Client, string bucket, string prefix, string rootName, Stream stream);
    [AsyncStateMachineAttribute("Amazon.Common.DotNetCli.Tools.Utilities/<UploadToS3Async>d__26")]
public static Task`1<string> UploadToS3Async(IToolLogger logger, IAmazonS3 s3Client, string bucket, string key, Stream stream);
    private static EventHandler`1<StreamTransferProgressArgs> CreateProgressHandler(IToolLogger logger);
    private static EventHandler`1<UploadProgressArgs> CreateTransferUtilityProgressHandler(IToolLogger logger);
    internal static int WaitForPromptResponseByIndex(int min, int max);
    public static string GetAssumeRolePolicy(string assumeRolePrincipal);
    public static ExecuteShellCommandResult ExecuteShellCommand(string workingDirectory, string process, string arguments);
    public static string ReadSecretFromConsole();
    public static void CopyDirectory(string sourceDirectory, string destinationDirectory, bool copySubDirectories);
    public static bool TryGenerateECRRepositoryName(string projectName, String& repositoryName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
