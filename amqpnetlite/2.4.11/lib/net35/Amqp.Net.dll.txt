public class Amqp.Address : object {
    internal static string Amqp;
    internal static string Amqps;
    private static int AmqpPort;
    private static int AmqpsPort;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Scheme { get; private set; }
    public bool UseSsl { get; private set; }
    public string Host { get; private set; }
    public int Port { get; private set; }
    public string User { get; private set; }
    public string Password { get; private set; }
    public string Path { get; private set; }
    public Address(string address);
    public Address(string host, int port, string user, string password, string path, string scheme);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public bool get_UseSsl();
    [CompilerGeneratedAttribute]
private void set_UseSsl(bool value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
private void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    private void Parse(string address);
    private void SetDefault();
}
public static class Amqp.AmqpBitConverter : object {
    public static bool IsLittleEndian;
    private static AmqpBitConverter();
    public static sbyte ReadByte(ByteBuffer buffer);
    public static byte ReadUByte(ByteBuffer buffer);
    public static short ReadShort(ByteBuffer buffer);
    public static ushort ReadUShort(ByteBuffer buffer);
    public static int ReadInt(ByteBuffer buffer);
    public static int ReadInt(Byte[] buffer, int offset);
    public static UInt32 ReadUInt(ByteBuffer buffer);
    public static long ReadLong(ByteBuffer buffer);
    public static ulong ReadULong(ByteBuffer buffer);
    public static float ReadFloat(ByteBuffer buffer);
    public static double ReadDouble(ByteBuffer buffer);
    public static Guid ReadUuid(ByteBuffer buffer);
    public static void ReadBytes(ByteBuffer buffer, Byte[] data, int offset, int count);
    public static void WriteByte(ByteBuffer buffer, sbyte data);
    public static void WriteUByte(ByteBuffer buffer, byte data);
    public static void WriteShort(ByteBuffer buffer, short data);
    public static void WriteUShort(ByteBuffer buffer, ushort data);
    public static void WriteInt(ByteBuffer buffer, int data);
    public static void WriteInt(Byte[] buffer, int offset, int data);
    public static void WriteUInt(ByteBuffer buffer, UInt32 data);
    public static void WriteLong(ByteBuffer buffer, long data);
    public static void WriteULong(ByteBuffer buffer, ulong data);
    public static void WriteFloat(ByteBuffer buffer, float data);
    public static void WriteDouble(ByteBuffer buffer, double data);
    public static void WriteUuid(ByteBuffer buffer, Guid data);
    public static void WriteBytes(ByteBuffer buffer, Byte[] data, int offset, int count);
}
public class Amqp.AmqpException : Exception {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; private set; }
    public AmqpException(Error error);
    public AmqpException(string condition, string description);
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Error value);
}
public abstract class Amqp.AmqpObject : object {
    internal static int DefaultTimeout;
    private bool closedCalled;
    private bool closedNotified;
    private Error error;
    private ManualResetEvent endEvent;
    [CompilerGeneratedAttribute]
private ClosedCallback Closed;
    public Error Error { get; internal set; }
    public bool IsClosed { get; }
    internal bool CloseCalled { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closed(ClosedCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(ClosedCallback value);
    public sealed virtual Error get_Error();
    internal void set_Error(Error value);
    public sealed virtual bool get_IsClosed();
    internal bool get_CloseCalled();
    internal void set_CloseCalled(bool value);
    internal void NotifyClosed(Error error);
    public sealed virtual void AddClosedCallback(ClosedCallback callback);
    public sealed virtual void Close();
    public sealed virtual void Close(TimeSpan timeout, Error error);
    internal void CloseInternal(int waitMilliseconds, Error error);
    protected abstract virtual bool OnClose(Error error);
}
public class Amqp.ByteBuffer : object {
    private Byte[] buffer;
    private int start;
    private int read;
    private int write;
    private int end;
    private bool autoGrow;
    public Byte[] Buffer { get; }
    public int Capacity { get; }
    public int Offset { get; }
    public int Size { get; }
    public int Length { get; }
    public int WritePos { get; }
    public ByteBuffer(Byte[] buffer, int offset, int count, int capacity);
    public ByteBuffer(int size, bool autoGrow);
    internal ByteBuffer(Byte[] buffer, int offset, int count, int capacity, bool autoGrow);
    public Byte[] get_Buffer();
    public int get_Capacity();
    public int get_Offset();
    public int get_Size();
    public int get_Length();
    public int get_WritePos();
    public void Validate(bool write, int dataSize);
    public void ValidateRead(int dataSize);
    public void ValidateWrite(int dataSize);
    private void TryAutoGrowBuffer(int dataSize);
    private static void ThrowBufferTooSmallException();
    public void Append(int size);
    public void Complete(int size);
    public void Seek(int seekPosition);
    public void Shrink(int size);
    public void Reset();
    public void AdjustPosition(int offset, int length);
    internal virtual void DuplicateBuffer(int bufferSize, int dataSize, Byte[]& buffer, Int32& offset, Int32& count);
    internal void AddReference();
    internal void ReleaseReference();
}
public class Amqp.ClosedCallback : MulticastDelegate {
    public ClosedCallback(object object, IntPtr method);
    public virtual void Invoke(IAmqpObject sender, Error error);
    public virtual IAsyncResult BeginInvoke(IAmqpObject sender, Error error, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Amqp.Connection : AmqpObject {
    public static bool DisableServerCertValidation;
    internal static UInt32 DefaultMaxFrameSize;
    internal static ushort DefaultMaxSessions;
    internal static int DefaultMaxLinksPerSession;
    internal static int HeartBeatCloseTimeout;
    private Address address;
    private OnOpened onOpened;
    private object lockObject;
    private IHandler handler;
    private Session[] localSessions;
    private Session[] remoteSessions;
    private ushort channelMax;
    private ConnectionState state;
    private UInt32 maxFrameSize;
    private UInt32 remoteMaxFrameSize;
    private ITransport writer;
    private HeartBeat heartBeat;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteContainerId>k__BackingField;
    internal int MaxLinksPerSession;
    private Pump reader;
    public IHandler Handler { get; }
    internal string ContainerId { get; private set; }
    internal string RemoteContainerId { get; internal set; }
    private object ThisLock { get; }
    private Connection(Address address, ushort channelMax, UInt32 maxFrameSize);
    public Connection(Address address);
    public Connection(Address address, IHandler handler);
    public Connection(Address address, SaslProfile saslProfile, Open open, OnOpened onOpened);
    private static Connection();
    public IHandler get_Handler();
    [CompilerGeneratedAttribute]
internal string get_ContainerId();
    [CompilerGeneratedAttribute]
private void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
internal string get_RemoteContainerId();
    [CompilerGeneratedAttribute]
internal void set_RemoteContainerId(string value);
    private object get_ThisLock();
    private ByteBuffer AllocateBuffer(int size);
    private ByteBuffer WrapBuffer(ByteBuffer buffer, int offset, int length);
    private void Connect(SaslProfile saslProfile, Open open);
    internal static string MakeAmqpContainerId();
    internal ushort AddSession(Session session);
    internal void SendCommand(ushort channel, DescribedList command);
    internal int SendCommand(ushort channel, Transfer transfer, bool first, ByteBuffer payload, int reservedBytes);
    protected virtual bool OnClose(Error error);
    private void ThrowIfClosed(string operation);
    private void SendHeader();
    private void SendOpen(Open open);
    private void SendClose(Error error);
    private void OnOpen(Open open);
    private void OnClose(Close close);
    internal virtual void OnBegin(ushort remoteChannel, Begin begin);
    internal void ValidateChannel(ushort channel);
    private void OnEnd(ushort remoteChannel, End end);
    private void OnSessionCommand(ushort remoteChannel, DescribedList command, ByteBuffer buffer);
    private Session GetSession(Session[] sessions, ushort channel);
    internal bool OnHeader(ProtocolHeader header);
    internal bool OnFrame(ByteBuffer buffer);
    internal void OnException(Exception exception);
    internal void OnIoException(Exception exception);
    private void OnEnded(Error error);
    private sealed virtual override ISession Amqp.IConnection.CreateSession();
}
public enum Amqp.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Start;
    public static ConnectionState HeaderSent;
    public static ConnectionState OpenPipe;
    public static ConnectionState HeaderReceived;
    public static ConnectionState HeaderExchanged;
    public static ConnectionState OpenSent;
    public static ConnectionState OpenReceived;
    public static ConnectionState Opened;
    public static ConnectionState CloseReceived;
    public static ConnectionState CloseSent;
    public static ConnectionState OpenClosePipe;
    public static ConnectionState ClosePipe;
    public static ConnectionState End;
}
public enum Amqp.CreditMode : Enum {
    public int value__;
    public static CreditMode Manual;
    public static CreditMode Auto;
    public static CreditMode Drain;
}
internal class Amqp.Delivery : object {
    private Message message;
    public ByteBuffer Buffer;
    public int ReservedBufferSize;
    public UInt32 Handle;
    [CompilerGeneratedAttribute]
private Byte[] <Tag>k__BackingField;
    public SequenceNumber DeliveryId;
    public int BytesTransfered;
    [CompilerGeneratedAttribute]
private DeliveryState <State>k__BackingField;
    public OutcomeCallback OnOutcome;
    [CompilerGeneratedAttribute]
private object <UserToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Settled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Batchable>k__BackingField;
    public Link Link;
    [CompilerGeneratedAttribute]
private INode <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private INode <Next>k__BackingField;
    public Byte[] Tag { get; public set; }
    public DeliveryState State { get; public set; }
    public object UserToken { get; public set; }
    public bool Settled { get; public set; }
    public bool Batchable { get; public set; }
    public INode Previous { get; public set; }
    public INode Next { get; public set; }
    public Message Message { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tag(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual DeliveryState get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(DeliveryState value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_UserToken();
    [CompilerGeneratedAttribute]
public void set_UserToken(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Settled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Settled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Batchable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Batchable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Previous();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Previous(INode value);
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(INode value);
    public Message get_Message();
    public void set_Message(Message value);
    public static void ReleaseAll(Delivery delivery, Error error);
    public static Byte[] GetDeliveryTag(UInt32 tag);
    public void OnStateChange(DeliveryState state);
    public void Dispose();
}
public static class Amqp.ErrorCode : object {
    public static string InternalError;
    public static string NotFound;
    public static string UnauthorizedAccess;
    public static string DecodeError;
    public static string ResourceLimitExceeded;
    public static string NotAllowed;
    public static string InvalidField;
    public static string NotImplemented;
    public static string ResourceLocked;
    public static string PreconditionFailed;
    public static string ResourceDeleted;
    public static string IllegalState;
    public static string FrameSizeTooSmall;
    public static string ConnectionForced;
    public static string FramingError;
    public static string ConnectionRedirect;
    public static string WindowViolation;
    public static string ErrantLink;
    public static string HandleInUse;
    public static string UnattachedHandle;
    public static string DetachForced;
    public static string TransferLimitExceeded;
    public static string MessageSizeExceeded;
    public static string LinkRedirect;
    public static string Stolen;
    public static string TransactionUnknownId;
    public static string TransactionRollback;
    public static string TransactionTimeout;
    public static string MessageReleased;
}
[ExtensionAttribute]
public static class Amqp.Extensions : object {
    [ExtensionAttribute]
public static T GetBody(Message message);
    [ExtensionAttribute]
public static T GetBody(Message message, AmqpSerializer serializer);
    [ExtensionAttribute]
private static T GetValue(AmqpValue value, AmqpSerializer serializer);
    private static int GetBinaryOffset(ByteBuffer buffer);
}
public class Amqp.Framing.Accepted : Outcome {
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.AmqpSequence : RestrictedDescribed {
    [CompilerGeneratedAttribute]
private IList <List>k__BackingField;
    public IList List { get; public set; }
    [CompilerGeneratedAttribute]
public IList get_List();
    [CompilerGeneratedAttribute]
public void set_List(IList value);
    internal virtual void EncodeValue(ByteBuffer buffer);
    internal virtual void DecodeValue(ByteBuffer buffer);
}
public class Amqp.Framing.AmqpValue : RestrictedDescribed {
    private object value;
    private ByteBuffer valueBuffer;
    private bool valueDecoded;
    public object Value { get; public set; }
    public ByteBuffer ValueBuffer { get; }
    public object get_Value();
    public void set_Value(object value);
    public ByteBuffer get_ValueBuffer();
    protected virtual void WriteValue(ByteBuffer buffer, object value);
    internal virtual void EncodeValue(ByteBuffer buffer);
    internal virtual void DecodeValue(ByteBuffer buffer);
    private int GetCount(byte formatCode, ByteBuffer buffer);
}
public class Amqp.Framing.AmqpValue`1 : AmqpValue {
    private AmqpSerializer serializer;
    public AmqpValue`1(T value);
    public AmqpValue`1(T value, AmqpSerializer serializer);
    protected virtual void WriteValue(ByteBuffer buffer, object value);
}
public class Amqp.Framing.ApplicationProperties : DescribedMap {
    public virtual string ToString();
}
public class Amqp.Framing.Attach : DescribedList {
    private string linkName;
    private UInt32 handle;
    private bool role;
    private SenderSettleMode sndSettleMode;
    private ReceiverSettleMode rcvSettleMode;
    private object source;
    private object target;
    private Map unsettled;
    private bool incompleteUnsettled;
    private UInt32 initialDeliveryCount;
    private ulong maxMessageSize;
    private object offeredCapabilities;
    private object desiredCapabilities;
    private Fields properties;
    public string LinkName { get; public set; }
    public UInt32 Handle { get; public set; }
    public bool Role { get; public set; }
    public SenderSettleMode SndSettleMode { get; public set; }
    public ReceiverSettleMode RcvSettleMode { get; public set; }
    public object Source { get; public set; }
    public object Target { get; public set; }
    public Map Unsettled { get; public set; }
    public bool IncompleteUnsettled { get; public set; }
    public UInt32 InitialDeliveryCount { get; public set; }
    public ulong MaxMessageSize { get; public set; }
    public Symbol[] OfferedCapabilities { get; public set; }
    public Symbol[] DesiredCapabilities { get; public set; }
    public Fields Properties { get; public set; }
    public string get_LinkName();
    public void set_LinkName(string value);
    public UInt32 get_Handle();
    public void set_Handle(UInt32 value);
    public bool get_Role();
    public void set_Role(bool value);
    public SenderSettleMode get_SndSettleMode();
    public void set_SndSettleMode(SenderSettleMode value);
    public ReceiverSettleMode get_RcvSettleMode();
    public void set_RcvSettleMode(ReceiverSettleMode value);
    public object get_Source();
    public void set_Source(object value);
    public object get_Target();
    public void set_Target(object value);
    public Map get_Unsettled();
    public void set_Unsettled(Map value);
    public bool get_IncompleteUnsettled();
    public void set_IncompleteUnsettled(bool value);
    public UInt32 get_InitialDeliveryCount();
    public void set_InitialDeliveryCount(UInt32 value);
    public ulong get_MaxMessageSize();
    public void set_MaxMessageSize(ulong value);
    public Symbol[] get_OfferedCapabilities();
    public void set_OfferedCapabilities(Symbol[] value);
    public Symbol[] get_DesiredCapabilities();
    public void set_DesiredCapabilities(Symbol[] value);
    public Fields get_Properties();
    public void set_Properties(Fields value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Begin : DescribedList {
    private ushort remoteChannel;
    private UInt32 nextOutgoingId;
    private UInt32 incomingWindow;
    private UInt32 outgoingWindow;
    private UInt32 handleMax;
    private object offeredCapabilities;
    private object desiredCapabilities;
    private Fields properties;
    public ushort RemoteChannel { get; public set; }
    public UInt32 NextOutgoingId { get; public set; }
    public UInt32 IncomingWindow { get; public set; }
    public UInt32 OutgoingWindow { get; public set; }
    public UInt32 HandleMax { get; public set; }
    public Symbol[] OfferedCapabilities { get; public set; }
    public Symbol[] DesiredCapabilities { get; public set; }
    public Fields Properties { get; public set; }
    public ushort get_RemoteChannel();
    public void set_RemoteChannel(ushort value);
    public UInt32 get_NextOutgoingId();
    public void set_NextOutgoingId(UInt32 value);
    public UInt32 get_IncomingWindow();
    public void set_IncomingWindow(UInt32 value);
    public UInt32 get_OutgoingWindow();
    public void set_OutgoingWindow(UInt32 value);
    public UInt32 get_HandleMax();
    public void set_HandleMax(UInt32 value);
    public Symbol[] get_OfferedCapabilities();
    public void set_OfferedCapabilities(Symbol[] value);
    public Symbol[] get_DesiredCapabilities();
    public void set_DesiredCapabilities(Symbol[] value);
    public Fields get_Properties();
    public void set_Properties(Fields value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Close : DescribedList {
    private Error error;
    public Error Error { get; public set; }
    public Error get_Error();
    public void set_Error(Error value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
internal static class Amqp.Framing.Codec : object {
    public static Descriptor Open;
    public static Descriptor Begin;
    public static Descriptor Attach;
    public static Descriptor Flow;
    public static Descriptor Transfer;
    public static Descriptor Dispose;
    public static Descriptor Detach;
    public static Descriptor End;
    public static Descriptor Close;
    public static Descriptor Error;
    public static Descriptor Received;
    public static Descriptor Accepted;
    public static Descriptor Rejected;
    public static Descriptor Released;
    public static Descriptor Modified;
    public static Descriptor Source;
    public static Descriptor Target;
    public static Descriptor SaslMechanisms;
    public static Descriptor SaslInit;
    public static Descriptor SaslChallenge;
    public static Descriptor SaslResponse;
    public static Descriptor SaslOutcome;
    public static Descriptor Header;
    public static Descriptor DeliveryAnnotations;
    public static Descriptor MessageAnnotations;
    public static Descriptor Properties;
    public static Descriptor ApplicationProperties;
    public static Descriptor Data;
    public static Descriptor AmqpSequence;
    public static Descriptor AmqpValue;
    public static Descriptor Footer;
    private static Codec();
    public static void Encode(RestrictedDescribed command, ByteBuffer buffer);
    public static object Decode(ByteBuffer buffer);
    public static Symbol[] GetSymbolMultiple(Object[] fields, int index);
    public static Symbol[] GetSymbolMultiple(Object& obj);
}
public class Amqp.Framing.Data : RestrictedDescribed {
    private Byte[] binary;
    [CompilerGeneratedAttribute]
private ByteBuffer <Buffer>k__BackingField;
    public Byte[] Binary { get; public set; }
    public ByteBuffer Buffer { get; public set; }
    internal int Length { get; }
    public Byte[] get_Binary();
    public void set_Binary(Byte[] value);
    [CompilerGeneratedAttribute]
public ByteBuffer get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(ByteBuffer value);
    internal int get_Length();
    internal virtual void EncodeValue(ByteBuffer buffer);
    internal virtual void DecodeValue(ByteBuffer buffer);
}
[DefaultMemberAttribute("Item")]
public class Amqp.Framing.DataList : RestrictedDescribed {
    private Data[] array;
    private int count;
    public int Count { get; }
    public Data Item { get; }
    public int get_Count();
    public Data get_Item(int index);
    public void Add(Data data);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal Data[] ToArray();
    internal virtual void EncodeValue(ByteBuffer buffer);
    internal virtual void DecodeValue(ByteBuffer buffer);
}
public class Amqp.Framing.DeliveryAnnotations : DescribedMap {
    public virtual string ToString();
}
public abstract class Amqp.Framing.DeliveryState : DescribedList {
    protected DeliveryState(Descriptor descriptor, int fieldCount);
}
public class Amqp.Framing.Detach : DescribedList {
    private UInt32 handle;
    private bool closed;
    private Error error;
    public UInt32 Handle { get; public set; }
    public bool Closed { get; public set; }
    public Error Error { get; public set; }
    public UInt32 get_Handle();
    public void set_Handle(UInt32 value);
    public bool get_Closed();
    public void set_Closed(bool value);
    public Error get_Error();
    public void set_Error(Error value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Dispose : DescribedList {
    private bool role;
    private UInt32 first;
    private UInt32 last;
    private bool settled;
    private DeliveryState state;
    private bool batchable;
    public bool Role { get; public set; }
    public UInt32 First { get; public set; }
    public UInt32 Last { get; public set; }
    public bool Settled { get; public set; }
    public DeliveryState State { get; public set; }
    public bool Batchable { get; public set; }
    public bool get_Role();
    public void set_Role(bool value);
    public UInt32 get_First();
    public void set_First(UInt32 value);
    public UInt32 get_Last();
    public void set_Last(UInt32 value);
    public bool get_Settled();
    public void set_Settled(bool value);
    public DeliveryState get_State();
    public void set_State(DeliveryState value);
    public bool get_Batchable();
    public void set_Batchable(bool value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.End : DescribedList {
    private Error error;
    public Error Error { get; public set; }
    public Error get_Error();
    public void set_Error(Error value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Error : DescribedList {
    private Symbol condition;
    private string description;
    private Fields info;
    public Symbol Condition { get; public set; }
    public string Description { get; public set; }
    public Fields Info { get; public set; }
    public Error(Symbol condition);
    public Symbol get_Condition();
    public void set_Condition(Symbol value);
    public string get_Description();
    public void set_Description(string value);
    public Fields get_Info();
    public void set_Info(Fields value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Flow : DescribedList {
    private UInt32 nextIncomingId;
    private UInt32 incomingWindow;
    private UInt32 nextOutgoingId;
    private UInt32 outgoingWindow;
    private UInt32 handle;
    private UInt32 deliveryCount;
    private UInt32 linkCredit;
    private UInt32 available;
    private bool drain;
    private bool echo;
    private Fields properties;
    public bool HasHandle { get; }
    public UInt32 NextIncomingId { get; public set; }
    public UInt32 IncomingWindow { get; public set; }
    public UInt32 NextOutgoingId { get; public set; }
    public UInt32 OutgoingWindow { get; public set; }
    public UInt32 Handle { get; public set; }
    public UInt32 DeliveryCount { get; public set; }
    public UInt32 LinkCredit { get; public set; }
    public UInt32 Available { get; public set; }
    public bool Drain { get; public set; }
    public bool Echo { get; public set; }
    public Fields Properties { get; public set; }
    public bool get_HasHandle();
    public UInt32 get_NextIncomingId();
    public void set_NextIncomingId(UInt32 value);
    public UInt32 get_IncomingWindow();
    public void set_IncomingWindow(UInt32 value);
    public UInt32 get_NextOutgoingId();
    public void set_NextOutgoingId(UInt32 value);
    public UInt32 get_OutgoingWindow();
    public void set_OutgoingWindow(UInt32 value);
    public UInt32 get_Handle();
    public void set_Handle(UInt32 value);
    public UInt32 get_DeliveryCount();
    public void set_DeliveryCount(UInt32 value);
    public UInt32 get_LinkCredit();
    public void set_LinkCredit(UInt32 value);
    public UInt32 get_Available();
    public void set_Available(UInt32 value);
    public bool get_Drain();
    public void set_Drain(bool value);
    public bool get_Echo();
    public void set_Echo(bool value);
    public Fields get_Properties();
    public void set_Properties(Fields value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Footer : DescribedMap {
    public virtual string ToString();
}
internal static class Amqp.Framing.Frame : object {
    public static int CmdBufferSize;
    private static byte DOF;
    public static void Decode(ByteBuffer buffer, UInt16& channel, DescribedList& command);
    public static void Encode(ByteBuffer buffer, FrameType type, ushort channel, DescribedList command);
}
internal enum Amqp.Framing.FrameType : Enum {
    public byte value__;
    public static FrameType Amqp;
    public static FrameType Sasl;
}
public class Amqp.Framing.Header : DescribedList {
    private bool durable;
    private byte priority;
    private UInt32 ttl;
    private bool firstAcquirer;
    private UInt32 deliveryCount;
    public bool Durable { get; public set; }
    public byte Priority { get; public set; }
    public UInt32 Ttl { get; public set; }
    public bool FirstAcquirer { get; public set; }
    public UInt32 DeliveryCount { get; public set; }
    public bool get_Durable();
    public void set_Durable(bool value);
    public byte get_Priority();
    public void set_Priority(byte value);
    public UInt32 get_Ttl();
    public void set_Ttl(UInt32 value);
    public bool get_FirstAcquirer();
    public void set_FirstAcquirer(bool value);
    public UInt32 get_DeliveryCount();
    public void set_DeliveryCount(UInt32 value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.MessageAnnotations : DescribedMap {
    public virtual string ToString();
}
public class Amqp.Framing.Modified : Outcome {
    private bool deliveryFailed;
    private bool undeliverableHere;
    private Fields messageAnnotations;
    public bool DeliveryFailed { get; public set; }
    public bool UndeliverableHere { get; public set; }
    public Fields MessageAnnotations { get; public set; }
    public bool get_DeliveryFailed();
    public void set_DeliveryFailed(bool value);
    public bool get_UndeliverableHere();
    public void set_UndeliverableHere(bool value);
    public Fields get_MessageAnnotations();
    public void set_MessageAnnotations(Fields value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Open : DescribedList {
    private string containerId;
    private string hostName;
    private UInt32 maxFrameSize;
    private ushort channelMax;
    private UInt32 idleTimeOut;
    private object outgoingLocales;
    private object incomingLocales;
    private object offeredCapabilities;
    private object desiredCapabilities;
    private Fields properties;
    public string ContainerId { get; public set; }
    public string HostName { get; public set; }
    public UInt32 MaxFrameSize { get; public set; }
    public ushort ChannelMax { get; public set; }
    public UInt32 IdleTimeOut { get; public set; }
    public Symbol[] OutgoingLocales { get; public set; }
    public Symbol[] IncomingLocales { get; public set; }
    public Symbol[] OfferedCapabilities { get; public set; }
    public Symbol[] DesiredCapabilities { get; public set; }
    public Fields Properties { get; public set; }
    public string get_ContainerId();
    public void set_ContainerId(string value);
    public string get_HostName();
    public void set_HostName(string value);
    public UInt32 get_MaxFrameSize();
    public void set_MaxFrameSize(UInt32 value);
    public ushort get_ChannelMax();
    public void set_ChannelMax(ushort value);
    public UInt32 get_IdleTimeOut();
    public void set_IdleTimeOut(UInt32 value);
    public Symbol[] get_OutgoingLocales();
    public void set_OutgoingLocales(Symbol[] value);
    public Symbol[] get_IncomingLocales();
    public void set_IncomingLocales(Symbol[] value);
    public Symbol[] get_OfferedCapabilities();
    public void set_OfferedCapabilities(Symbol[] value);
    public Symbol[] get_DesiredCapabilities();
    public void set_DesiredCapabilities(Symbol[] value);
    public Fields get_Properties();
    public void set_Properties(Fields value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public abstract class Amqp.Framing.Outcome : DeliveryState {
    protected Outcome(Descriptor descriptor, int fieldCount);
}
public class Amqp.Framing.Properties : DescribedList {
    private object messageId;
    private Byte[] userId;
    private string to;
    private string subject;
    private string replyTo;
    private object correlationId;
    private Symbol contentType;
    private Symbol contentEncoding;
    private DateTime absoluteExpiryTime;
    private DateTime creationTime;
    private string groupId;
    private UInt32 groupSequence;
    private string replyToGroupId;
    public string MessageId { get; public set; }
    public Byte[] UserId { get; public set; }
    public string To { get; public set; }
    public string Subject { get; public set; }
    public string ReplyTo { get; public set; }
    public string CorrelationId { get; public set; }
    public Symbol ContentType { get; public set; }
    public Symbol ContentEncoding { get; public set; }
    public DateTime AbsoluteExpiryTime { get; public set; }
    public DateTime CreationTime { get; public set; }
    public string GroupId { get; public set; }
    public UInt32 GroupSequence { get; public set; }
    public string ReplyToGroupId { get; public set; }
    public string get_MessageId();
    public void set_MessageId(string value);
    public Byte[] get_UserId();
    public void set_UserId(Byte[] value);
    public string get_To();
    public void set_To(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_ReplyTo();
    public void set_ReplyTo(string value);
    public string get_CorrelationId();
    public void set_CorrelationId(string value);
    public Symbol get_ContentType();
    public void set_ContentType(Symbol value);
    public Symbol get_ContentEncoding();
    public void set_ContentEncoding(Symbol value);
    public DateTime get_AbsoluteExpiryTime();
    public void set_AbsoluteExpiryTime(DateTime value);
    public DateTime get_CreationTime();
    public void set_CreationTime(DateTime value);
    public string get_GroupId();
    public void set_GroupId(string value);
    public UInt32 get_GroupSequence();
    public void set_GroupSequence(UInt32 value);
    public string get_ReplyToGroupId();
    public void set_ReplyToGroupId(string value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public object GetMessageId();
    public void SetMessageId(object id);
    public object GetCorrelationId();
    public void SetCorrelationId(object id);
    public virtual string ToString();
    private static object ValidateIdentifier(object id);
}
internal class Amqp.Framing.ProtocolHeader : ValueType {
    public byte Id;
    public byte Major;
    public byte Minor;
    public byte Revision;
    public static ProtocolHeader Create(Byte[] buffer, int offset);
    public virtual string ToString();
}
internal static class Amqp.Framing.Reader : object {
    public static ProtocolHeader ReadHeader(ITransport transport);
    public static ByteBuffer ReadFrameBuffer(ITransport transport, Byte[] sizeBuffer, UInt32 maxFrameSize);
    private static void ReadBuffer(ITransport transport, Byte[] buffer, int offset, int count);
}
internal class Amqp.Framing.Received : DeliveryState {
    private UInt32 sectionNumber;
    private ulong sectionOffset;
    public UInt32 SectionNumber { get; public set; }
    public ulong SectionOffset { get; public set; }
    public UInt32 get_SectionNumber();
    public void set_SectionNumber(UInt32 value);
    public ulong get_SectionOffset();
    public void set_SectionOffset(ulong value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public enum Amqp.Framing.ReceiverSettleMode : Enum {
    public byte value__;
    public static ReceiverSettleMode First;
    public static ReceiverSettleMode Second;
}
public class Amqp.Framing.Rejected : Outcome {
    private Error error;
    public Error Error { get; public set; }
    public Error get_Error();
    public void set_Error(Error value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Released : Outcome {
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public enum Amqp.Framing.SenderSettleMode : Enum {
    public byte value__;
    public static SenderSettleMode Unsettled;
    public static SenderSettleMode Settled;
    public static SenderSettleMode Mixed;
}
public class Amqp.Framing.Source : DescribedList {
    private string address;
    private UInt32 durable;
    private Symbol expiryPolicy;
    private UInt32 timeout;
    private bool dynamic;
    private Fields dynamicNodeProperties;
    private Symbol distributionMode;
    private Map filterSet;
    private Outcome defaultOutcome;
    private object outcomes;
    private object capabilities;
    public string Address { get; public set; }
    public UInt32 Durable { get; public set; }
    public Symbol ExpiryPolicy { get; public set; }
    public UInt32 Timeout { get; public set; }
    public bool Dynamic { get; public set; }
    public Fields DynamicNodeProperties { get; public set; }
    public Symbol DistributionMode { get; public set; }
    public Map FilterSet { get; public set; }
    public Outcome DefaultOutcome { get; public set; }
    public Symbol[] Outcomes { get; public set; }
    public Symbol[] Capabilities { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public UInt32 get_Durable();
    public void set_Durable(UInt32 value);
    public Symbol get_ExpiryPolicy();
    public void set_ExpiryPolicy(Symbol value);
    public UInt32 get_Timeout();
    public void set_Timeout(UInt32 value);
    public bool get_Dynamic();
    public void set_Dynamic(bool value);
    public Fields get_DynamicNodeProperties();
    public void set_DynamicNodeProperties(Fields value);
    public Symbol get_DistributionMode();
    public void set_DistributionMode(Symbol value);
    public Map get_FilterSet();
    public void set_FilterSet(Map value);
    public Outcome get_DefaultOutcome();
    public void set_DefaultOutcome(Outcome value);
    public Symbol[] get_Outcomes();
    public void set_Outcomes(Symbol[] value);
    public Symbol[] get_Capabilities();
    public void set_Capabilities(Symbol[] value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Target : DescribedList {
    private string address;
    private UInt32 durable;
    private Symbol expiryPolicy;
    private UInt32 timeout;
    private bool dynamic;
    private Fields dynamicNodeProperties;
    private object capabilities;
    public string Address { get; public set; }
    public UInt32 Durable { get; public set; }
    public Symbol ExpiryPolicy { get; public set; }
    public UInt32 Timeout { get; public set; }
    public bool Dynamic { get; public set; }
    public Fields DynamicNodeProperties { get; public set; }
    public Symbol[] Capabilities { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public UInt32 get_Durable();
    public void set_Durable(UInt32 value);
    public Symbol get_ExpiryPolicy();
    public void set_ExpiryPolicy(Symbol value);
    public UInt32 get_Timeout();
    public void set_Timeout(UInt32 value);
    public bool get_Dynamic();
    public void set_Dynamic(bool value);
    public Fields get_DynamicNodeProperties();
    public void set_DynamicNodeProperties(Fields value);
    public Symbol[] get_Capabilities();
    public void set_Capabilities(Symbol[] value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Framing.Transfer : DescribedList {
    private UInt32 handle;
    private UInt32 deliveryId;
    private Byte[] deliveryTag;
    private UInt32 messageFormat;
    private bool settled;
    private bool more;
    private ReceiverSettleMode rcvSettleMode;
    private DeliveryState state;
    private bool resume;
    private bool aborted;
    private bool batchable;
    public bool HasDeliveryId { get; }
    public UInt32 Handle { get; public set; }
    public UInt32 DeliveryId { get; public set; }
    public Byte[] DeliveryTag { get; public set; }
    public UInt32 MessageFormat { get; public set; }
    public bool Settled { get; public set; }
    public bool More { get; public set; }
    public ReceiverSettleMode RcvSettleMode { get; public set; }
    public DeliveryState State { get; public set; }
    public bool Resume { get; public set; }
    public bool Aborted { get; public set; }
    public bool Batchable { get; public set; }
    public bool get_HasDeliveryId();
    public UInt32 get_Handle();
    public void set_Handle(UInt32 value);
    public UInt32 get_DeliveryId();
    public void set_DeliveryId(UInt32 value);
    public Byte[] get_DeliveryTag();
    public void set_DeliveryTag(Byte[] value);
    public UInt32 get_MessageFormat();
    public void set_MessageFormat(UInt32 value);
    public bool get_Settled();
    public void set_Settled(bool value);
    public bool get_More();
    public void set_More(bool value);
    public ReceiverSettleMode get_RcvSettleMode();
    public void set_RcvSettleMode(ReceiverSettleMode value);
    public DeliveryState get_State();
    public void set_State(DeliveryState value);
    public bool get_Resume();
    public void set_Resume(bool value);
    public bool get_Aborted();
    public void set_Aborted(bool value);
    public bool get_Batchable();
    public void set_Batchable(bool value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public static class Amqp.Fx : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    public static string Format(string format, Object[] args);
    internal static void StartThread(ThreadStart threadStart);
}
public class Amqp.Handler.Event : ValueType {
    [CompilerGeneratedAttribute]
private EventId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Connection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Session <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private Link <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Context>k__BackingField;
    public EventId Id { get; private set; }
    public Connection Connection { get; private set; }
    public Session Session { get; private set; }
    public Link Link { get; private set; }
    public object Context { get; private set; }
    [CompilerGeneratedAttribute]
public EventId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(EventId value);
    [CompilerGeneratedAttribute]
public Connection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(Connection value);
    [CompilerGeneratedAttribute]
public Session get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(Session value);
    [CompilerGeneratedAttribute]
public Link get_Link();
    [CompilerGeneratedAttribute]
private void set_Link(Link value);
    [CompilerGeneratedAttribute]
public object get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(object value);
    internal static Event Create(EventId id, Connection connection, Session session, Link link, object context);
}
public enum Amqp.Handler.EventId : Enum {
    public int value__;
    public static EventId ConnectionLocalOpen;
    public static EventId ConnectionRemoteOpen;
    public static EventId ConnectionLocalClose;
    public static EventId ConnectionRemoteClose;
    public static EventId SessionLocalOpen;
    public static EventId SessionRemoteOpen;
    public static EventId SessionLocalClose;
    public static EventId SessionRemoteClose;
    public static EventId LinkLocalOpen;
    public static EventId LinkRemoteOpen;
    public static EventId LinkLocalClose;
    public static EventId LinkRemoteClose;
    public static EventId SendDelivery;
    public static EventId ReceiveDelivery;
    public static EventId SocketConnect;
    public static EventId SslAuthenticate;
}
public interface Amqp.Handler.IDelivery {
    public Byte[] Tag { get; public set; }
    public DeliveryState State { get; public set; }
    public bool Batchable { get; public set; }
    public object UserToken { get; }
    public bool Settled { get; public set; }
    public abstract virtual Byte[] get_Tag();
    public abstract virtual void set_Tag(Byte[] value);
    public abstract virtual DeliveryState get_State();
    public abstract virtual void set_State(DeliveryState value);
    public abstract virtual bool get_Batchable();
    public abstract virtual void set_Batchable(bool value);
    public abstract virtual object get_UserToken();
    public abstract virtual bool get_Settled();
    public abstract virtual void set_Settled(bool value);
}
public interface Amqp.Handler.IHandler {
    public abstract virtual bool CanHandle(EventId id);
    public abstract virtual void Handle(Event protocolEvent);
}
public interface Amqp.IAmqpObject {
    public Error Error { get; }
    public bool IsClosed { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(ClosedCallback value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(ClosedCallback value);
    public abstract virtual Error get_Error();
    public abstract virtual bool get_IsClosed();
    public abstract virtual void AddClosedCallback(ClosedCallback callback);
    public abstract virtual void Close();
    public abstract virtual void Close(TimeSpan waitUntilEnded, Error error);
}
public interface Amqp.IConnection {
    public abstract virtual ISession CreateSession();
}
public interface Amqp.ILink {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Detach(Error error);
}
internal interface Amqp.INode {
    public INode Next { get; public set; }
    public INode Previous { get; public set; }
    public abstract virtual INode get_Next();
    public abstract virtual void set_Next(INode value);
    public abstract virtual INode get_Previous();
    public abstract virtual void set_Previous(INode value);
}
public interface Amqp.IReceiverLink {
    public abstract virtual void Start(int credit, MessageCallback onMessage);
    public abstract virtual void SetCredit(int credit, bool autoRestore);
    public abstract virtual void SetCredit(int credit, CreditMode creditMode, int flowThreshold);
    public abstract virtual Message Receive();
    public abstract virtual Message Receive(TimeSpan timeout);
    public abstract virtual void Accept(Message message);
    public abstract virtual void Release(Message message);
    public abstract virtual void Reject(Message message, Error error);
    public abstract virtual void Modify(Message message, bool deliveryFailed, bool undeliverableHere, Fields messageAnnotations);
}
public interface Amqp.ISenderLink {
    public abstract virtual void Send(Message message);
    public abstract virtual void Send(Message message, TimeSpan timeout);
    public abstract virtual void Send(Message message, OutcomeCallback callback, object state);
}
public interface Amqp.ISession {
    public abstract virtual ISenderLink CreateSender(string name, string address);
    public abstract virtual IReceiverLink CreateReceiver(string name, string address);
    public abstract virtual ISenderLink CreateSender(string name, Target target, OnAttached onAttached);
    public abstract virtual IReceiverLink CreateReceiver(string name, Source source, OnAttached onAttached);
}
public interface Amqp.ITransport {
    public abstract virtual void Send(ByteBuffer buffer);
    public abstract virtual int Receive(Byte[] buffer, int offset, int count);
    public abstract virtual void Close();
}
public abstract class Amqp.Link : AmqpObject {
    private Session session;
    private bool role;
    private string name;
    private UInt32 handle;
    private OnAttached onAttached;
    private LinkState state;
    private bool detach;
    private object lockObject;
    public string Name { get; }
    public bool Role { get; }
    public UInt32 Handle { get; }
    public Session Session { get; }
    public LinkState LinkState { get; }
    internal object ThisLock { get; }
    internal bool IsDetaching { get; }
    [ObsoleteAttribute]
protected Link(Session session, string name, OnAttached onAttached);
    protected Link(Session session, bool role, string name, OnAttached onAttached);
    public sealed virtual string get_Name();
    public bool get_Role();
    public UInt32 get_Handle();
    public Session get_Session();
    public LinkState get_LinkState();
    internal object get_ThisLock();
    internal bool get_IsDetaching();
    public sealed virtual void Detach(Error error);
    internal void Abort(Error error, string reason);
    internal virtual void OnAttach(UInt32 remoteHandle, Attach attach);
    internal bool OnDetach(Detach detach);
    internal abstract virtual void OnFlow(Flow flow);
    internal abstract virtual void OnTransfer(Delivery delivery, Transfer transfer, ByteBuffer buffer);
    internal abstract virtual void OnDeliveryStateChanged(Delivery delivery);
    protected abstract virtual void OnAbort(Error error);
    protected virtual bool OnClose(Error error);
    internal void SendFlow(UInt32 deliveryCount, UInt32 credit, bool drain);
    internal void SendAttach(UInt32 initialDeliveryCount, Attach attach);
    internal void ThrowIfDetaching(string operation);
    private void SendDetach(Error error);
}
internal class Amqp.LinkedList : object {
    private INode head;
    private INode tail;
    public INode First { get; }
    public INode get_First();
    public void Add(INode node);
    public void Remove(INode node);
    public INode Clear();
}
internal class Amqp.LinkId : ValueType {
    [CompilerGeneratedAttribute]
private string <SourceContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string SourceContainer { get; private set; }
    public string TargetContainer { get; private set; }
    public bool Role { get; private set; }
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_SourceContainer();
    [CompilerGeneratedAttribute]
private void set_SourceContainer(string value);
    [CompilerGeneratedAttribute]
public string get_TargetContainer();
    [CompilerGeneratedAttribute]
private void set_TargetContainer(string value);
    [CompilerGeneratedAttribute]
public bool get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public static LinkId Create(Connection connection, bool localRole, string name);
    public static bool Equals(LinkId a, LinkId b);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private sealed virtual override bool System.IEquatable<Amqp.LinkId>.Equals(LinkId other);
}
public enum Amqp.LinkState : Enum {
    public int value__;
    public static LinkState Start;
    public static LinkState AttachSent;
    public static LinkState AttachReceived;
    public static LinkState Attached;
    public static LinkState DetachPipe;
    public static LinkState DetachSent;
    public static LinkState DetachReceived;
    public static LinkState End;
}
public class Amqp.Message : object {
    public Header Header;
    public DeliveryAnnotations DeliveryAnnotations;
    public MessageAnnotations MessageAnnotations;
    public Properties Properties;
    public ApplicationProperties ApplicationProperties;
    public RestrictedDescribed BodySection;
    public Footer Footer;
    [CompilerGeneratedAttribute]
private UInt32 <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Delivery <Delivery>k__BackingField;
    public object Body { get; }
    public UInt32 Format { get; public set; }
    public Byte[] DeliveryTag { get; }
    internal Delivery Delivery { get; internal set; }
    public Message(object body);
    public object get_Body();
    [CompilerGeneratedAttribute]
public UInt32 get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(UInt32 value);
    public Byte[] get_DeliveryTag();
    [CompilerGeneratedAttribute]
internal Delivery get_Delivery();
    [CompilerGeneratedAttribute]
internal void set_Delivery(Delivery value);
    public ByteBuffer Encode();
    public static Message Decode(ByteBuffer buffer);
    public MessageDelivery GetDelivery();
    public sealed virtual void Dispose();
    internal ByteBuffer Encode(int reservedBytes);
    private static void EncodeIfNotNull(RestrictedDescribed section, ByteBuffer buffer);
    private void WriteToBuffer(ByteBuffer buffer);
}
public class Amqp.MessageCallback : MulticastDelegate {
    public MessageCallback(object object, IntPtr method);
    public virtual void Invoke(IReceiverLink receiver, Message message);
    public virtual IAsyncResult BeginInvoke(IReceiverLink receiver, Message message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Amqp.MessageDelivery : ValueType {
    private Delivery delivery;
    private UInt32 messageFormat;
    public static MessageDelivery None { get; }
    public Byte[] Tag { get; }
    public DeliveryState State { get; }
    public Link Link { get; }
    internal UInt32 MessageFormat { get; }
    internal Delivery Delivery { get; }
    internal MessageDelivery(Delivery delivery, UInt32 messageFormat);
    public static MessageDelivery get_None();
    public Byte[] get_Tag();
    public DeliveryState get_State();
    public Link get_Link();
    internal UInt32 get_MessageFormat();
    internal Delivery get_Delivery();
}
public class Amqp.OnAttached : MulticastDelegate {
    public OnAttached(object object, IntPtr method);
    public virtual void Invoke(ILink link, Attach attach);
    public virtual IAsyncResult BeginInvoke(ILink link, Attach attach, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Amqp.OnBegin : MulticastDelegate {
    public OnBegin(object object, IntPtr method);
    public virtual void Invoke(ISession session, Begin begin);
    public virtual IAsyncResult BeginInvoke(ISession session, Begin begin, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Amqp.OnOpened : MulticastDelegate {
    public OnOpened(object object, IntPtr method);
    public virtual void Invoke(IConnection connection, Open open);
    public virtual IAsyncResult BeginInvoke(IConnection connection, Open open, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Amqp.OutcomeCallback : MulticastDelegate {
    public OutcomeCallback(object object, IntPtr method);
    public virtual void Invoke(ILink sender, Message message, Outcome outcome, object state);
    public virtual IAsyncResult BeginInvoke(ILink sender, Message message, Outcome outcome, object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Amqp.ReceiverLink : Link {
    private static int DefaultCredit;
    private SequenceNumber deliveryCount;
    private int totalCredit;
    private bool drain;
    private int pending;
    private int credit;
    private int restored;
    private int flowThreshold;
    private LinkedList receivedMessages;
    private MessageDelivery deliveryCurrent;
    private LinkedList waiterList;
    private MessageCallback onMessage;
    public ReceiverLink(Session session, string name, string address);
    public ReceiverLink(Session session, string name, Source source, OnAttached onAttached);
    public ReceiverLink(Session session, string name, Attach attach, OnAttached onAttached);
    public sealed virtual void Start(int credit, MessageCallback onMessage);
    public sealed virtual void SetCredit(int credit, bool autoRestore);
    public sealed virtual void SetCredit(int credit, CreditMode creditMode, int flowThreshold);
    public sealed virtual Message Receive();
    public sealed virtual Message Receive(TimeSpan timeout);
    public sealed virtual void Accept(Message message);
    public void Accept(MessageDelivery messageDelivery);
    public sealed virtual void Release(Message message);
    public void Release(MessageDelivery messageDelivery);
    public sealed virtual void Reject(Message message, Error error);
    public void Reject(MessageDelivery messageDelivery, Error error);
    public sealed virtual void Modify(Message message, bool deliveryFailed, bool undeliverableHere, Fields messageAnnotations);
    public void Modify(MessageDelivery messageDelivery, bool deliveryFailed, bool undeliverableHere, Fields messageAnnotations);
    public void Complete(Message message, DeliveryState deliveryState);
    public void Complete(MessageDelivery messageDelivery, DeliveryState deliveryState);
    internal virtual void OnFlow(Flow flow);
    internal virtual void OnTransfer(Delivery delivery, Transfer transfer, ByteBuffer buffer);
    internal virtual void OnAttach(UInt32 remoteHandle, Attach attach);
    internal virtual void OnDeliveryStateChanged(Delivery delivery);
    protected virtual bool OnClose(Error error);
    protected virtual void OnAbort(Error error);
    internal Message ReceiveInternal(MessageCallback callback, int timeout);
    private void UpdateDelivery(MessageDelivery messageDelivery, Outcome outcome, DeliveryState deliveryState);
    private void OnDelivery(SequenceNumber deliveryId);
}
public class Amqp.Sasl.SaslChallenge : DescribedList {
    private Byte[] challenge;
    public Byte[] Challenge { get; public set; }
    public Byte[] get_Challenge();
    public void set_Challenge(Byte[] value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public enum Amqp.Sasl.SaslCode : Enum {
    public byte value__;
    public static SaslCode Ok;
    public static SaslCode Auth;
    public static SaslCode Sys;
    public static SaslCode SysPerm;
    public static SaslCode SysTemp;
}
public class Amqp.Sasl.SaslInit : DescribedList {
    private Symbol mechanism;
    private Byte[] initialResponse;
    private string hostName;
    public Symbol Mechanism { get; public set; }
    public Byte[] InitialResponse { get; public set; }
    public string HostName { get; public set; }
    public Symbol get_Mechanism();
    public void set_Mechanism(Symbol value);
    public Byte[] get_InitialResponse();
    public void set_InitialResponse(Byte[] value);
    public string get_HostName();
    public void set_HostName(string value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.Sasl.SaslMechanisms : DescribedList {
    private object saslServerMechanisms;
    public Symbol[] SaslServerMechanisms { get; public set; }
    public Symbol[] get_SaslServerMechanisms();
    public void set_SaslServerMechanisms(Symbol[] value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
internal class Amqp.Sasl.SaslNoActionProfile : SaslProfile {
    private string identity;
    public SaslNoActionProfile(string name, string identity);
    protected virtual ITransport UpgradeTransport(ITransport transport);
    protected virtual DescribedList GetStartCommand(string hostname);
    protected virtual DescribedList OnCommand(DescribedList command);
}
public class Amqp.Sasl.SaslOutcome : DescribedList {
    private SaslCode code;
    private Byte[] additionalData;
    public SaslCode Code { get; public set; }
    public Byte[] AdditionalData { get; public set; }
    public SaslCode get_Code();
    public void set_Code(SaslCode value);
    public Byte[] get_AdditionalData();
    public void set_AdditionalData(Byte[] value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
internal class Amqp.Sasl.SaslPlainProfile : SaslProfile {
    private string user;
    private string password;
    public SaslPlainProfile(string user, string password);
    protected virtual ITransport UpgradeTransport(ITransport transport);
    protected virtual DescribedList GetStartCommand(string hostname);
    protected virtual DescribedList OnCommand(DescribedList command);
}
public abstract class Amqp.Sasl.SaslProfile : object {
    internal static UInt32 MaxFrameSize;
    internal static string ExternalName;
    internal static string AnonymousName;
    internal static string PlainName;
    [CompilerGeneratedAttribute]
private Symbol <Mechanism>k__BackingField;
    public static SaslProfile Anonymous { get; }
    public static SaslProfile External { get; }
    public Symbol Mechanism { get; private set; }
    protected SaslProfile(Symbol mechanism);
    public static SaslProfile get_Anonymous();
    public static SaslProfile get_External();
    [CompilerGeneratedAttribute]
public Symbol get_Mechanism();
    [CompilerGeneratedAttribute]
private void set_Mechanism(Symbol value);
    internal ITransport Open(string hostname, ITransport transport);
    internal ProtocolHeader Start(ITransport transport, DescribedList command);
    internal void OnHeader(ProtocolHeader myHeader, ProtocolHeader theirHeader);
    internal bool OnFrame(string hostname, ITransport transport, ByteBuffer buffer, SaslCode& code);
    internal DescribedList OnCommandInternal(DescribedList command);
    internal ITransport UpgradeTransportInternal(ITransport transport);
    protected virtual bool Match(Symbol mechanism);
    protected abstract virtual ITransport UpgradeTransport(ITransport transport);
    protected abstract virtual DescribedList GetStartCommand(string hostname);
    protected abstract virtual DescribedList OnCommand(DescribedList command);
    private void SendCommand(ITransport transport, DescribedList command);
}
public class Amqp.Sasl.SaslResponse : DescribedList {
    private Byte[] response;
    public Byte[] Response { get; public set; }
    public Byte[] get_Response();
    public void set_Response(Byte[] value);
    internal virtual void WriteField(ByteBuffer buffer, int index);
    internal virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    public virtual string ToString();
}
public class Amqp.SenderLink : Link {
    private SequenceNumber deliveryCount;
    private int credit;
    private SenderSettleMode settleMode;
    private LinkedList outgoingList;
    private bool writing;
    public SenderLink(Session session, string name, string address);
    public SenderLink(Session session, string name, Target target, OnAttached onAttached);
    public SenderLink(Session session, string name, Attach attach, OnAttached onAttached);
    public sealed virtual void Send(Message message);
    public sealed virtual void Send(Message message, TimeSpan timeout);
    private void SendSync(Message message, int waitMilliseconds);
    public sealed virtual void Send(Message message, OutcomeCallback callback, object state);
    public void Send(Message message, DeliveryState deliveryState, OutcomeCallback callback, object state);
    private DeliveryState GetTxnState();
    private void SendInternal(Message message, DeliveryState deliveryState, OutcomeCallback callback, object state, bool sync);
    public void Cancel(Message message);
    internal virtual void OnFlow(Flow flow);
    internal virtual void OnTransfer(Delivery delivery, Transfer transfer, ByteBuffer buffer);
    internal virtual void OnDeliveryStateChanged(Delivery delivery);
    protected virtual bool OnClose(Error error);
    protected virtual void OnAbort(Error error);
    private void WriteDelivery(Delivery delivery);
}
internal class Amqp.SequenceNumber : ValueType {
    private int sequenceNumber;
    public SequenceNumber(UInt32 value);
    public static SequenceNumber op_Implicit(UInt32 value);
    public static UInt32 op_Implicit(SequenceNumber value);
    public int CompareTo(SequenceNumber value);
    public static SequenceNumber op_Increment(SequenceNumber value);
    public static SequenceNumber op_Addition(SequenceNumber value1, int delta);
    public static SequenceNumber op_Subtraction(SequenceNumber value1, int delta);
    public static int op_Subtraction(SequenceNumber value1, SequenceNumber value2);
    public static bool op_Equality(SequenceNumber value1, SequenceNumber value2);
    public static bool op_Inequality(SequenceNumber value1, SequenceNumber value2);
    public static bool op_GreaterThan(SequenceNumber value1, SequenceNumber value2);
    public static bool op_GreaterThanOrEqual(SequenceNumber value1, SequenceNumber value2);
    public static bool op_LessThan(SequenceNumber value1, SequenceNumber value2);
    public static bool op_LessThanOrEqual(SequenceNumber value1, SequenceNumber value2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class Amqp.Serialization.AmqpContract : object {
    private Type type;
    [CompilerGeneratedAttribute]
private AmqpContractAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpMember[] <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <Provides>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Serializing>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Serialized>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Deserializing>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Deserialized>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpContract <BaseContract>k__BackingField;
    public Type Type { get; }
    public AmqpContractAttribute Attribute { get; public set; }
    public AmqpMember[] Members { get; public set; }
    public Type[] Provides { get; public set; }
    public MethodInfo Serializing { get; public set; }
    public MethodInfo Serialized { get; public set; }
    public MethodInfo Deserializing { get; public set; }
    public MethodInfo Deserialized { get; public set; }
    public AmqpContract BaseContract { get; public set; }
    public AmqpContract(Type type);
    public Type get_Type();
    [CompilerGeneratedAttribute]
public AmqpContractAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(AmqpContractAttribute value);
    [CompilerGeneratedAttribute]
public AmqpMember[] get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(AmqpMember[] value);
    [CompilerGeneratedAttribute]
public Type[] get_Provides();
    [CompilerGeneratedAttribute]
public void set_Provides(Type[] value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Serializing();
    [CompilerGeneratedAttribute]
public void set_Serializing(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Serialized();
    [CompilerGeneratedAttribute]
public void set_Serialized(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Deserializing();
    [CompilerGeneratedAttribute]
public void set_Deserializing(MethodInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Deserialized();
    [CompilerGeneratedAttribute]
public void set_Deserialized(MethodInfo value);
    [CompilerGeneratedAttribute]
public AmqpContract get_BaseContract();
    [CompilerGeneratedAttribute]
public void set_BaseContract(AmqpContract value);
}
[AttributeUsageAttribute("12")]
public class Amqp.Serialization.AmqpContractAttribute : Attribute {
    private Nullable`1<ulong> internalCode;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EncodingType <Encoding>k__BackingField;
    public string Name { get; public set; }
    public long Code { get; public set; }
    public EncodingType Encoding { get; public set; }
    internal Nullable`1<ulong> InternalCode { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public long get_Code();
    public void set_Code(long value);
    [CompilerGeneratedAttribute]
public EncodingType get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(EncodingType value);
    internal Nullable`1<ulong> get_InternalCode();
}
public class Amqp.Serialization.AmqpContractResolver : object {
    private sealed virtual override AmqpContract Amqp.Serialization.IContractResolver.Resolve(Type type);
    protected virtual void OnResolved(AmqpContract contract);
}
public class Amqp.Serialization.AmqpMember : object {
    [CompilerGeneratedAttribute]
private AmqpMemberAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public AmqpMemberAttribute Attribute { get; public set; }
    public MemberInfo Info { get; public set; }
    internal string Name { get; }
    internal int Order { get; internal set; }
    [CompilerGeneratedAttribute]
public AmqpMemberAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(AmqpMemberAttribute value);
    [CompilerGeneratedAttribute]
public MemberInfo get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(MemberInfo value);
    internal string get_Name();
    [CompilerGeneratedAttribute]
internal int get_Order();
    [CompilerGeneratedAttribute]
internal void set_Order(int value);
}
[AttributeUsageAttribute("384")]
public class Amqp.Serialization.AmqpMemberAttribute : Attribute {
    private Nullable`1<int> order;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    internal Nullable`1<int> InternalOrder { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public int get_Order();
    public void set_Order(int value);
    internal Nullable`1<int> get_InternalOrder();
}
[AttributeUsageAttribute("12")]
public class Amqp.Serialization.AmqpProvidesAttribute : Attribute {
    private Type type;
    public Type Type { get; }
    public AmqpProvidesAttribute(Type type);
    public Type get_Type();
}
public class Amqp.Serialization.AmqpSerializer : object {
    internal static AmqpSerializer instance;
    private ConcurrentDictionary`2<Type, SerializableType> typeCache;
    private IContractResolver contractResolver;
    public AmqpSerializer(IContractResolver contractResolver);
    private static AmqpSerializer();
    public static void Serialize(ByteBuffer buffer, object graph);
    public static T Deserialize(ByteBuffer buffer);
    public static TAs Deserialize(ByteBuffer buffer);
    public void WriteObject(ByteBuffer buffer, object graph);
    public T ReadObject(ByteBuffer buffer);
    public TAs ReadObject(ByteBuffer buffer);
    internal SerializableType GetType(Type type);
    private static void WriteObject(AmqpSerializer serializer, ByteBuffer buffer, object graph);
    private static TAs ReadObject(AmqpSerializer serializer, ByteBuffer buffer);
    private SerializableType GetOrCompileType(Type type, bool describedOnly, HashSet`1<Type> pendingTypes);
    private SerializableType CompileType(Type type, bool describedOnly, HashSet`1<Type> pendingTypes);
    private SerializableType CreateContractType(AmqpContract contract, HashSet`1<Type> pendingTypes);
    private SerializableType CompileNonContractTypes(Type type, HashSet`1<Type> pendingTypes);
    private SerializableType CompileEnumType(Type type);
    private SerializableType CompileCollectionTypes(Type type, HashSet`1<Type> pendingTypes);
}
public enum Amqp.Serialization.EncodingType : Enum {
    public int value__;
    public static EncodingType List;
    public static EncodingType Map;
    public static EncodingType SimpleMap;
    public static EncodingType SimpleList;
}
public interface Amqp.Serialization.IAmqpSerializable {
    public int EncodeSize { get; }
    public abstract virtual int get_EncodeSize();
    public abstract virtual void Encode(ByteBuffer buffer);
    public abstract virtual void Decode(ByteBuffer buffer);
}
public interface Amqp.Serialization.IContractResolver {
    public abstract virtual AmqpContract Resolve(Type type);
}
internal abstract class Amqp.Serialization.MemberAccessor : object {
    private Type type;
    private Func`2<object, object> getter;
    private Action`2<object, object> setter;
    public Type Type { get; }
    protected MemberAccessor(Type type);
    public Type get_Type();
    public static MemberAccessor Create(MemberInfo memberInfo, bool requiresSetter);
    public object Get(object container);
    public void Set(object container, object value);
    private static void EmitTypeConversion(ILGenerator generator, Type castType, bool isContainer);
    private static void EmitCall(ILGenerator generator, MethodInfo method);
    private static string GetAccessorName(bool isGetter, string name);
}
internal abstract class Amqp.Serialization.MethodAccessor : object {
    private static Type[] delegateParamsType;
    private bool isStatic;
    private MethodDelegate methodDelegate;
    private static MethodAccessor();
    public static MethodAccessor Create(MethodInfo methodInfo);
    public static MethodAccessor Create(ConstructorInfo constructorInfo);
    public object Invoke(Object[] parameters);
    public object Invoke(object container, Object[] parameters);
    private Type[] GetParametersType(ParameterInfo[] paramsInfo);
    private void LoadArguments(ILGenerator generator, Type[] paramsType);
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnDeserializedAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnDeserializingAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnSerializedAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Amqp.Serialization.OnSerializingAttribute : Attribute {
}
internal class Amqp.Serialization.SerializableMember : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberAccessor <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializableType <Type>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    public MemberAccessor Accessor { get; public set; }
    public SerializableType Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public MemberAccessor get_Accessor();
    [CompilerGeneratedAttribute]
public void set_Accessor(MemberAccessor value);
    [CompilerGeneratedAttribute]
public SerializableType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SerializableType value);
}
internal abstract class Amqp.Serialization.SerializableType : object {
    private AmqpSerializer serializer;
    private Type type;
    private bool hasDefaultCtor;
    public EncodingType Encoding { get; }
    public bool IsResolved { get; }
    public SerializableMember[] Members { get; }
    protected SerializableType(AmqpSerializer serializer, Type type);
    public virtual EncodingType get_Encoding();
    public virtual bool get_IsResolved();
    public virtual SerializableMember[] get_Members();
    public static SerializableType CreatePrimitiveType(Type type, Encode encoder, Decode decoder);
    public static SerializableType CreateObjectType(Type type);
    public static SerializableType CreateEnumType(Type type, SerializableType underlyingType);
    public static SerializableType CreateAmqpSerializableType(AmqpSerializer serializer, Type type);
    public static SerializableType CreateArrayType(AmqpSerializer serializer, Type type, Type itemType, SerializableType listType);
    public static SerializableType CreateDelegatingType(AmqpSerializer serializer, Type type);
    public static SerializableType CreateGenericListType(AmqpSerializer serializer, Type type, SerializableType itemType, MethodAccessor addAccessor);
    public static SerializableType CreateGenericMapType(AmqpSerializer serializer, Type type, SerializableType keyType, SerializableType valueType, MemberAccessor keyAccessor, MemberAccessor valueAccessor, MethodAccessor addAccessor);
    public static SerializableType CreateDescribedListType(AmqpSerializer serializer, Type type, SerializableType baseType, string descriptorName, Nullable`1<ulong> descriptorCode, SerializableMember[] members, SerializableType[] knownTypes, MethodAccessor[] serializationCallbacks);
    public static SerializableType CreateDescribedMapType(AmqpSerializer serializer, Type type, SerializableType baseType, string descriptorName, Nullable`1<ulong> descriptorCode, SerializableMember[] members, SerializableType[] knownTypes, MethodAccessor[] serializationCallbacks);
    public static SerializableType CreateDescribedSimpleMapType(AmqpSerializer serializer, Type type, SerializableType baseType, SerializableMember[] members, MethodAccessor[] serializationCallbacks);
    public static SerializableType CreateDescribedSimpleListType(AmqpSerializer serializer, Type type, SerializableType baseType, SerializableMember[] members, MethodAccessor[] serializationCallbacks);
    public abstract virtual void WriteObject(ByteBuffer buffer, object graph);
    public abstract virtual object ReadObject(ByteBuffer buffer);
}
internal static class Amqp.Serialization.SerializationCallback : object {
    public static int OnSerializing;
    public static int OnSerialized;
    public static int OnDeserializing;
    public static int OnDeserialized;
}
public class Amqp.Session : AmqpObject {
    internal static UInt32 defaultWindowSize;
    private Connection connection;
    private OnBegin onBegin;
    private ushort channel;
    private UInt32 handleMax;
    private Link[] localLinks;
    private Link[] remoteLinks;
    private SessionState state;
    private object lockObject;
    private SequenceNumber incomingDeliveryId;
    private LinkedList incomingList;
    private SequenceNumber nextIncomingId;
    private UInt32 incomingWindow;
    private SequenceNumber outgoingDeliveryId;
    private LinkedList outgoingList;
    private SequenceNumber nextOutgoingId;
    private UInt32 outgoingWindow;
    public Connection Connection { get; }
    public SessionState SessionState { get; }
    private object ThisLock { get; }
    internal ushort Channel { get; }
    public Session(Connection connection);
    public Session(Connection connection, Begin begin, OnBegin onBegin);
    private sealed virtual override IReceiverLink Amqp.ISession.CreateReceiver(string name, string address);
    private sealed virtual override ISenderLink Amqp.ISession.CreateSender(string name, string address);
    private sealed virtual override IReceiverLink Amqp.ISession.CreateReceiver(string name, Source source, OnAttached onAttached);
    private sealed virtual override ISenderLink Amqp.ISession.CreateSender(string name, Target target, OnAttached onAttached);
    public Connection get_Connection();
    public SessionState get_SessionState();
    private object get_ThisLock();
    internal ushort get_Channel();
    internal void Abort(Error error);
    private void AbortLinks(Error error);
    internal UInt32 AddLink(Link link);
    internal void RemoveLink(Link link, UInt32 remoteHandle);
    internal void SendDelivery(Delivery delivery);
    internal void DisposeDelivery(bool role, Delivery delivery, DeliveryState state, bool settled);
    internal void SendFlow(Flow flow);
    internal void SendCommand(DescribedList command);
    internal void OnBegin(ushort remoteChannel, Begin begin);
    internal bool OnEnd(End end);
    internal void OnCommand(DescribedList command, ByteBuffer buffer);
    protected virtual bool OnClose(Error error);
    internal virtual void OnAttach(Attach attach);
    internal void AddRemoteLink(UInt32 remoteHandle, Link link);
    private static Begin Default(Connection connection);
    internal void ValidateHandle(UInt32 handle);
    internal Delivery RemoveDeliveries(Link link);
    private void CancelPendingDeliveries(Error error);
    private void OnDetach(Detach detach);
    private void OnFlow(Flow flow);
    private void OnTransfer(Transfer transfer, ByteBuffer buffer);
    private void OnDispose(Dispose dispose);
    private void ThrowIfEnded(string operation);
    private Link GetLink(UInt32 remoteHandle);
    private void SendBegin(Begin begin);
    private void SendEnd();
    private void WriteDelivery(Delivery delivery);
}
public enum Amqp.SessionState : Enum {
    public int value__;
    public static SessionState Start;
    public static SessionState BeginSent;
    public static SessionState BeginReceived;
    public static SessionState Opened;
    public static SessionState EndReceived;
    public static SessionState EndSent;
    public static SessionState EndPipe;
    public static SessionState End;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Amqp.SRAmqp : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AmqpProtocolMismatch { get; }
    public static string AmqpChannelNotFound { get; }
    public static string AmqpHandleExceeded { get; }
    public static string AmqpHandleInUse { get; }
    public static string AmqpHandleNotFound { get; }
    public static string AmqpIllegalOperationState { get; }
    public static string AmqpInvalidFormatCode { get; }
    public static string AmqpOperationNotSupported { get; }
    public static string AmqpTimeout { get; }
    public static string AmqpUnknownDescriptor { get; }
    public static string DeliveryLimitExceeded { get; }
    public static string EncodingTypeNotSupported { get; }
    public static string InvalidAddressFormat { get; }
    public static string InvalidDeliveryIdOnTransfer { get; }
    public static string InvalidFrameSize { get; }
    public static string InvalidMapCount { get; }
    public static string InvalidMapKeyType { get; }
    public static string InvalidSequenceNumberComparison { get; }
    public static string LinkNotFound { get; }
    public static string SaslNegoFailed { get; }
    public static string WindowViolation { get; }
    public static string TransportClosed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AmqpProtocolMismatch();
    public static string get_AmqpChannelNotFound();
    public static string get_AmqpHandleExceeded();
    public static string get_AmqpHandleInUse();
    public static string get_AmqpHandleNotFound();
    public static string get_AmqpIllegalOperationState();
    public static string get_AmqpInvalidFormatCode();
    public static string get_AmqpOperationNotSupported();
    public static string get_AmqpTimeout();
    public static string get_AmqpUnknownDescriptor();
    public static string get_DeliveryLimitExceeded();
    public static string get_EncodingTypeNotSupported();
    public static string get_InvalidAddressFormat();
    public static string get_InvalidDeliveryIdOnTransfer();
    public static string get_InvalidFrameSize();
    public static string get_InvalidMapCount();
    public static string get_InvalidMapKeyType();
    public static string get_InvalidSequenceNumberComparison();
    public static string get_LinkNotFound();
    public static string get_SaslNegoFailed();
    public static string get_WindowViolation();
    public static string get_TransportClosed();
}
internal class Amqp.TcpTransport : object {
    private static RemoteCertificateValidationCallback NoVerifyCallback;
    private ITransport socketTransport;
    private static TcpTransport();
    public void Connect(Connection connection, Address address, bool noVerification);
    public sealed virtual void Close();
    public sealed virtual void Send(ByteBuffer buffer);
    public sealed virtual int Receive(Byte[] buffer, int offset, int count);
}
public static class Amqp.Trace : object {
    public static TraceLevel TraceLevel;
    public static WriteTrace TraceListener;
    public static bool WriteFrameNullFields;
    [ConditionalAttribute("DEBUG")]
public static void Debug(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(TraceLevel level, string format);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(TraceLevel level, string format, object arg1);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(TraceLevel level, string format, object arg1, object arg2);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(TraceLevel level, string format, object arg1, object arg2, object arg3);
    [ConditionalAttribute("TRACE")]
internal static void WriteBuffer(string format, Byte[] buffer, int offset, int count);
    internal static string GetBinaryString(Byte[] buffer, int offset, int count);
    internal static object GetTraceObject(object value);
}
public enum Amqp.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Error;
    public static TraceLevel Warning;
    public static TraceLevel Information;
    public static TraceLevel Verbose;
    public static TraceLevel Frame;
    public static TraceLevel Buffer;
    public static TraceLevel Output;
}
[ExtensionAttribute]
internal static class Amqp.TypeExtensions : object {
    [ExtensionAttribute]
internal static Assembly Assembly(Type type);
    [ExtensionAttribute]
internal static Type BaseType(Type type);
    [ExtensionAttribute]
internal static bool IsValueType(Type type);
    [ExtensionAttribute]
internal static bool IsEnum(Type type);
    [ExtensionAttribute]
internal static bool IsGenericType(Type type);
    [ExtensionAttribute]
internal static object CreateInstance(Type type, bool hasDefaultCtor);
    [ExtensionAttribute]
internal static T GetCustomAttribute(MemberInfo mi, bool inherit);
    [ExtensionAttribute]
internal static IEnumerable`1<T> GetCustomAttributes(MemberInfo mi, bool inherit);
}
public class Amqp.Types.CreateDescribed : MulticastDelegate {
    public CreateDescribed(object object, IntPtr method);
    public virtual Described Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Described EndInvoke(IAsyncResult result);
}
public class Amqp.Types.Decimal : object {
    private Byte[] bytes;
    public Byte[] Bytes { get; }
    public Decimal(Byte[] bytes);
    public Byte[] get_Bytes();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class Amqp.Types.Decode : MulticastDelegate {
    public Decode(object object, IntPtr method);
    public virtual object Invoke(ByteBuffer buffer, byte formatCode);
    public virtual IAsyncResult BeginInvoke(ByteBuffer buffer, byte formatCode, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public abstract class Amqp.Types.Described : object {
    public void Encode(ByteBuffer buffer);
    public void Decode(ByteBuffer buffer);
    internal abstract virtual void EncodeDescriptor(ByteBuffer buffer);
    internal abstract virtual void EncodeValue(ByteBuffer buffer);
    internal abstract virtual void DecodeDescriptor(ByteBuffer buffer);
    internal abstract virtual void DecodeValue(ByteBuffer buffer);
}
public abstract class Amqp.Types.DescribedList : RestrictedDescribed {
    private int fieldCount;
    private int fields;
    protected DescribedList(Descriptor descriptor, int fieldCount);
    public bool HasField(int index);
    public void ResetField(int index);
    internal void SetField(int index, T& field, T value);
    internal T GetField(int index, T field, T defaultValue);
    internal virtual void DecodeValue(ByteBuffer buffer);
    internal abstract virtual void WriteField(ByteBuffer buffer, int index);
    internal abstract virtual void ReadField(ByteBuffer buffer, int index, byte formatCode);
    internal virtual void EncodeValue(ByteBuffer buffer);
    protected string GetDebugString(string name, Object[] fieldNames, Object[] fieldValues);
    private void CheckFieldIndex(int index);
}
[DefaultMemberAttribute("Item")]
public abstract class Amqp.Types.DescribedMap : RestrictedDescribed {
    private Type keyType;
    private Map map;
    public Map Map { get; }
    public object Item { get; public set; }
    protected DescribedMap(Descriptor descriptor, Type keyType);
    public Map get_Map();
    public object get_Item(object key);
    public void set_Item(object key, object value);
    internal virtual void DecodeValue(ByteBuffer buffer);
    internal virtual void EncodeValue(ByteBuffer buffer);
    public virtual string ToString();
}
public class Amqp.Types.DescribedValue : Described {
    private object descriptor;
    private object value;
    public object Descriptor { get; }
    public object Value { get; }
    public DescribedValue(object descriptor, object value);
    public object get_Descriptor();
    public object get_Value();
    internal virtual void EncodeDescriptor(ByteBuffer buffer);
    internal virtual void EncodeValue(ByteBuffer buffer);
    internal virtual void DecodeDescriptor(ByteBuffer buffer);
    internal virtual void DecodeValue(ByteBuffer buffer);
    public virtual string ToString();
}
public class Amqp.Types.Descriptor : object {
    public string Name;
    public ulong Code;
    public Descriptor(ulong code, string name);
    public virtual string ToString();
}
public class Amqp.Types.Encode : MulticastDelegate {
    public Encode(object object, IntPtr method);
    public virtual void Invoke(ByteBuffer buffer, object value, bool smallEncoding);
    public virtual IAsyncResult BeginInvoke(ByteBuffer buffer, object value, bool smallEncoding, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class Amqp.Types.Encoder : object {
    private static long epochTicks;
    internal static long TicksPerMillisecond;
    private static Serializer[] serializers;
    private static Map codecByType;
    private static Byte[][] codecIndexTable;
    private static Map knownDescribed;
    private static Dictionary`2<ulong, CreateDescribed> knownDescribedByCode;
    private static IStringDecoder stringDecoder;
    public static IStringDecoder StringDecoder { get; public set; }
    private static Encoder();
    public static IStringDecoder get_StringDecoder();
    public static void set_StringDecoder(IStringDecoder value);
    internal static void Initialize();
    public static bool TryGetCodec(Type type, Encode& encoder, Decode& decoder);
    public static void AddKnownDescribed(Descriptor descriptor, CreateDescribed ctor);
    public static long DateTimeToTimestamp(DateTime dateTime);
    public static DateTime TimestampToDateTime(long timestamp);
    public static byte ReadFormatCode(ByteBuffer buffer);
    public static void WriteObject(ByteBuffer buffer, object value, bool smallEncoding);
    public static void WriteBoolean(ByteBuffer buffer, bool value, bool smallEncoding);
    public static void WriteUByte(ByteBuffer buffer, byte value);
    public static void WriteUShort(ByteBuffer buffer, ushort value);
    public static void WriteUInt(ByteBuffer buffer, UInt32 value, bool smallEncoding);
    public static void WriteULong(ByteBuffer buffer, ulong value, bool smallEncoding);
    public static void WriteByte(ByteBuffer buffer, sbyte value);
    public static void WriteShort(ByteBuffer buffer, short value);
    public static void WriteInt(ByteBuffer buffer, int value, bool smallEncoding);
    public static void WriteLong(ByteBuffer buffer, long value, bool smallEncoding);
    public static void WriteChar(ByteBuffer buffer, char value);
    public static void WriteFloat(ByteBuffer buffer, float value);
    public static void WriteDouble(ByteBuffer buffer, double value);
    public static void WriteDecimal(ByteBuffer buffer, Decimal value);
    public static void WriteTimestamp(ByteBuffer buffer, DateTime value);
    public static void WriteUuid(ByteBuffer buffer, Guid value);
    public static void WriteBinary(ByteBuffer buffer, Byte[] value, bool smallEncoding);
    public static void WriteString(ByteBuffer buffer, string value, bool smallEncoding);
    public static void WriteSymbol(ByteBuffer buffer, Symbol value, bool smallEncoding);
    public static void WriteList(ByteBuffer buffer, IList value, bool smallEncoding);
    public static void WriteArray(ByteBuffer buffer, Array value);
    public static void WriteMap(ByteBuffer buffer, Map value, bool smallEncoding);
    public static object ReadObject(ByteBuffer buffer);
    public static object ReadObject(ByteBuffer buffer, byte formatCode);
    public static object ReadDescribed(ByteBuffer buffer, byte formatCode);
    public static bool ReadBoolean(ByteBuffer buffer, byte formatCode);
    public static byte ReadUByte(ByteBuffer buffer, byte formatCode);
    public static ushort ReadUShort(ByteBuffer buffer, byte formatCode);
    public static UInt32 ReadUInt(ByteBuffer buffer, byte formatCode);
    public static ulong ReadULong(ByteBuffer buffer, byte formatCode);
    public static sbyte ReadByte(ByteBuffer buffer, byte formatCode);
    public static short ReadShort(ByteBuffer buffer, byte formatCode);
    public static int ReadInt(ByteBuffer buffer, byte formatCode);
    public static long ReadLong(ByteBuffer buffer, byte formatCode);
    public static char ReadChar(ByteBuffer buffer, byte formatCode);
    public static float ReadFloat(ByteBuffer buffer, byte formatCode);
    public static double ReadDouble(ByteBuffer buffer, byte formatCode);
    public static Decimal ReadDecimal(ByteBuffer buffer, byte formatCode);
    public static DateTime ReadTimestamp(ByteBuffer buffer, byte formatCode);
    public static Guid ReadUuid(ByteBuffer buffer, byte formatCode);
    public static Byte[] ReadBinary(ByteBuffer buffer, byte formatCode);
    public static string ReadString(ByteBuffer buffer, byte formatCode);
    public static Symbol ReadSymbol(ByteBuffer buffer, byte formatCode);
    public static List ReadList(ByteBuffer buffer, byte formatCode);
    public static Array ReadArray(ByteBuffer buffer, byte formatCode);
    public static Map ReadMap(ByteBuffer buffer, byte formatCode);
    public static Fields ReadFields(ByteBuffer buffer, byte formatCode);
    private static T ReadMap(ByteBuffer buffer, byte formatCode);
    private static Serializer GetSerializer(byte formatCode);
    internal static void ReadListCount(ByteBuffer buffer, byte formatCode, Int32& size, Int32& count);
    internal static void WriteListCount(ByteBuffer buffer, int pos, int count, bool smallEncoding);
    private static string ReadString(ByteBuffer buffer, byte formatCode, byte code8, byte code32, string type);
    internal static AmqpException InvalidFormatCodeException(byte formatCode, int offset);
    private static AmqpException InvalidMapCountException(int count);
    private static AmqpException TypeNotSupportedException(Type type);
    internal static void WriteBinaryBuffer(ByteBuffer buffer, ByteBuffer value);
    internal static ByteBuffer ReadBinaryBuffer(ByteBuffer buffer);
}
public class Amqp.Types.Fields : Map {
    public static Fields From(Object[] array, int index);
    internal virtual void CheckKeyType(Type keyType);
}
internal static class Amqp.Types.FixedWidth : object {
    public static int FormatCode;
    public static int Null;
    public static int Boolean;
    public static int BooleanVar;
    public static int Zero;
    public static int UByte;
    public static int UShort;
    public static int UInt;
    public static int ULong;
    public static int Byte;
    public static int Short;
    public static int Int;
    public static int Long;
    public static int Float;
    public static int Double;
    public static int Decimal32;
    public static int Decimal64;
    public static int Decimal128;
    public static int Char;
    public static int TimeStamp;
    public static int Uuid;
    public static int NullEncoded;
    public static int BooleanEncoded;
    public static int BooleanVarEncoded;
    public static int ZeroEncoded;
    public static int UByteEncoded;
    public static int UShortEncoded;
    public static int UIntEncoded;
    public static int ULongEncoded;
    public static int ByteEncoded;
    public static int ShortEncoded;
    public static int IntEncoded;
    public static int LongEncoded;
    public static int FloatEncoded;
    public static int DoubleEncoded;
    public static int Decimal32Encoded;
    public static int Decimal64Encoded;
    public static int Decimal128Encoded;
    public static int CharEncoded;
    public static int TimeStampEncoded;
    public static int UuidEncoded;
}
internal static class Amqp.Types.FormatCode : object {
    public static byte Described;
    public static byte Null;
    public static byte Boolean;
    public static byte BooleanTrue;
    public static byte BooleanFalse;
    public static byte UInt0;
    public static byte ULong0;
    public static byte UByte;
    public static byte UShort;
    public static byte UInt;
    public static byte ULong;
    public static byte Byte;
    public static byte Short;
    public static byte Int;
    public static byte Long;
    public static byte SmallUInt;
    public static byte SmallULong;
    public static byte SmallInt;
    public static byte SmallLong;
    public static byte Float;
    public static byte Double;
    public static byte Decimal32;
    public static byte Decimal64;
    public static byte Decimal128;
    public static byte Char;
    public static byte TimeStamp;
    public static byte Uuid;
    public static byte Binary8;
    public static byte Binary32;
    public static byte String8Utf8;
    public static byte String32Utf8;
    public static byte Symbol8;
    public static byte Symbol32;
    public static byte List0;
    public static byte List8;
    public static byte List32;
    public static byte Map8;
    public static byte Map32;
    public static byte Array8;
    public static byte Array32;
}
public interface Amqp.Types.IStringDecoder {
    public abstract virtual string DecodeString(ArraySegment`1<byte> buffer);
}
public class Amqp.Types.List : List`1<object> {
    public List(int capacity);
}
[DefaultMemberAttribute("Item")]
public class Amqp.Types.Map : Dictionary`2<object, object> {
    public object Item { get; public set; }
    private object GetValue(object key);
    public object get_Item(object key);
    public void set_Item(object key, object value);
    internal static void ValidateKeyType(Type expected, Type actual);
    internal virtual void CheckKeyType(Type keyType);
    public virtual string ToString();
}
public abstract class Amqp.Types.RestrictedDescribed : Described {
    private Descriptor descriptor;
    public Descriptor Descriptor { get; }
    protected RestrictedDescribed(Descriptor descriptor);
    public Descriptor get_Descriptor();
    internal virtual void EncodeDescriptor(ByteBuffer buffer);
    internal virtual void DecodeDescriptor(ByteBuffer buffer);
}
public class Amqp.Types.Symbol : object {
    private string value;
    public Symbol(string value);
    public static Symbol op_Implicit(string value);
    public static string op_Implicit(Symbol value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Amqp.Types.WellknownStringDecoder : object {
    private Dictionary`2<BufferKey, string> knownStrings;
    public void AddWellknownString(string knownString);
    public sealed virtual string DecodeString(ArraySegment`1<byte> buffer);
}
public class Amqp.WriteTrace : MulticastDelegate {
    public WriteTrace(object object, IntPtr method);
    public virtual void Invoke(TraceLevel level, string format, Object[] args);
    public virtual IAsyncResult BeginInvoke(TraceLevel level, string format, Object[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
