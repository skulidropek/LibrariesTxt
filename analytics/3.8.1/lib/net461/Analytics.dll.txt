public class Segment.Analytics : object {
    public static string VERSION;
    private static object padlock;
    [CompilerGeneratedAttribute]
private static Client <Client>k__BackingField;
    public static Client Client { get; private set; }
    private static Analytics();
    [CompilerGeneratedAttribute]
public static Client get_Client();
    [CompilerGeneratedAttribute]
private static void set_Client(Client value);
    public static void Initialize(string writeKey);
    public static void Initialize(string writeKey, Config config);
    internal static void Initialize(Client client);
    public static void Dispose();
}
public class Segment.Client : object {
    private IAsyncFlushHandler _flushHandler;
    private string _writeKey;
    private Config _config;
    [CompilerGeneratedAttribute]
private Statistics <Statistics>k__BackingField;
    [CompilerGeneratedAttribute]
private FailedHandler Failed;
    [CompilerGeneratedAttribute]
private SucceededHandler Succeeded;
    public Statistics Statistics { get; public set; }
    public string WriteKey { get; }
    public Config Config { get; }
    public Client(string writeKey);
    public Client(string writeKey, Config config);
    internal Client(string writeKey, Config config, IRequestHandler requestHandler);
    [CompilerGeneratedAttribute]
public sealed virtual Statistics get_Statistics();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Statistics(Statistics value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Failed(FailedHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Failed(FailedHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Succeeded(SucceededHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Succeeded(SucceededHandler value);
    public sealed virtual string get_WriteKey();
    public sealed virtual Config get_Config();
    public sealed virtual void Identify(string userId, IDictionary`2<string, object> traits);
    public sealed virtual void Identify(string userId, IDictionary`2<string, object> traits, Options options);
    public sealed virtual void Group(string userId, string groupId, Options options);
    public sealed virtual void Group(string userId, string groupId, IDictionary`2<string, object> traits);
    public sealed virtual void Group(string userId, string groupId, IDictionary`2<string, object> traits, Options options);
    public sealed virtual void Track(string userId, string eventName);
    public sealed virtual void Track(string userId, string eventName, IDictionary`2<string, object> properties);
    public sealed virtual void Track(string userId, string eventName, Options options);
    public sealed virtual void Track(string userId, string eventName, IDictionary`2<string, object> properties, Options options);
    public sealed virtual void Alias(string previousId, string userId);
    public sealed virtual void Alias(string previousId, string userId, Options options);
    public sealed virtual void Page(string userId, string name);
    public sealed virtual void Page(string userId, string name, Options options);
    public sealed virtual void Page(string userId, string name, string category);
    public sealed virtual void Page(string userId, string name, IDictionary`2<string, object> properties);
    public sealed virtual void Page(string userId, string name, IDictionary`2<string, object> properties, Options options);
    public sealed virtual void Page(string userId, string name, string category, IDictionary`2<string, object> properties, Options options);
    public sealed virtual void Screen(string userId, string name);
    public sealed virtual void Screen(string userId, string name, Options options);
    public sealed virtual void Screen(string userId, string name, string category);
    public sealed virtual void Screen(string userId, string name, IDictionary`2<string, object> properties);
    public sealed virtual void Screen(string userId, string name, IDictionary`2<string, object> properties, Options options);
    public sealed virtual void Screen(string userId, string name, string category, IDictionary`2<string, object> properties, Options options);
    public sealed virtual void Flush();
    public Task FlushAsync();
    public sealed virtual void Dispose();
    private void Enqueue(BaseAction action);
    protected void ensureId(string userId, Options options);
    internal void RaiseSuccess(BaseAction action);
    internal void RaiseFailure(BaseAction action, Exception e);
    internal static bool HasAnonymousId(Options options);
}
public class Segment.Config : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FlushAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Async>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gzip>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxRetryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FlushIntervalInMillis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Send>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Threads>k__BackingField;
    internal string Host { get; internal set; }
    internal string UserAgent { get; internal set; }
    internal string Proxy { get; internal set; }
    internal int MaxQueueSize { get; internal set; }
    internal int FlushAt { get; internal set; }
    internal bool Async { get; internal set; }
    internal bool Gzip { get; internal set; }
    internal TimeSpan Timeout { get; internal set; }
    internal Nullable`1<TimeSpan> MaxRetryTime { get; internal set; }
    internal int FlushIntervalInMillis { get; private set; }
    public bool Send { get; public set; }
    internal int Threads { get; internal set; }
    public Config(string host, string proxy, Nullable`1<TimeSpan> timeout, int maxQueueSize, int flushAt, bool async, int threads, double flushInterval, bool gzip, bool send, string userAgent, Nullable`1<TimeSpan> maxRetryTime);
    [CompilerGeneratedAttribute]
internal string get_Host();
    [CompilerGeneratedAttribute]
internal void set_Host(string value);
    [CompilerGeneratedAttribute]
internal string get_UserAgent();
    [CompilerGeneratedAttribute]
internal void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
internal string get_Proxy();
    [CompilerGeneratedAttribute]
internal void set_Proxy(string value);
    [CompilerGeneratedAttribute]
internal int get_MaxQueueSize();
    [CompilerGeneratedAttribute]
internal void set_MaxQueueSize(int value);
    [CompilerGeneratedAttribute]
internal int get_FlushAt();
    [CompilerGeneratedAttribute]
internal void set_FlushAt(int value);
    [CompilerGeneratedAttribute]
internal bool get_Async();
    [CompilerGeneratedAttribute]
internal void set_Async(bool value);
    [CompilerGeneratedAttribute]
internal bool get_Gzip();
    [CompilerGeneratedAttribute]
internal void set_Gzip(bool value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
internal void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_MaxRetryTime();
    [CompilerGeneratedAttribute]
internal void set_MaxRetryTime(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal int get_FlushIntervalInMillis();
    [CompilerGeneratedAttribute]
private void set_FlushIntervalInMillis(int value);
    [CompilerGeneratedAttribute]
public bool get_Send();
    [CompilerGeneratedAttribute]
public void set_Send(bool value);
    [CompilerGeneratedAttribute]
internal int get_Threads();
    [CompilerGeneratedAttribute]
internal void set_Threads(int value);
    private static string GetDefaultUserAgent();
    public Config SetHost(string host);
    public string GetHost();
    public Config SetProxy(string proxy);
    public string GetProxy();
    public Config SetTimeout(TimeSpan timeout);
    public TimeSpan GetTimeout();
    public Config SetMaxRetryTime(TimeSpan maxRetryTime);
    public Nullable`1<TimeSpan> GetMaxRetryTime();
    public Config SetMaxQueueSize(int maxQueueSize);
    public int GetMaxQueueSize();
    [ObsoleteAttribute("Use the new method SetFlushAt")]
public Config SetMaxBatchSize(int maxBatchSize);
    public Config SetFlushAt(int flushAt);
    public int GetFlushAt();
    public Config SetThreads(int threads);
    public int GetThreads();
    public Config SetAsync(bool async);
    public bool GetAsync();
    [ObsoleteAttribute("Use the new method SetGzip")]
public Config SetRequestCompression(bool bCompress);
    public Config SetGzip(bool gzip);
    public bool GetGzip();
    public Config SetUserAgent(string userAgent);
    public string GetUserAgent();
    public Config SetSend(bool send);
    public bool GetSend();
    public Config SetFlushInterval(double interval);
    public int GetFlushInterval();
}
public class Segment.Exception.APIException : Exception {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Code { get; public set; }
    public APIException(string code, string message);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
}
public class Segment.Exception.NotInitializedException : Exception {
}
[ExtensionAttribute]
public static class Segment.Extensions.ServiceCollectionExtension : object {
    [ExtensionAttribute]
public static void AddAnalytics(IServiceCollection services, string writeKey, Config config);
}
public class Segment.FailedHandler : MulticastDelegate {
    public FailedHandler(object object, IntPtr method);
    public virtual void Invoke(BaseAction action, Exception e);
    public virtual IAsyncResult BeginInvoke(BaseAction action, Exception e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Segment.Flush.ActionSizeCalculator : object {
    public static int Calculate(BaseAction action);
}
internal class Segment.Flush.AsyncIntervalFlushHandler : object {
    private static int ActionMaxSize;
    private static int BatchMaxSize;
    private ConcurrentQueue`1<BaseAction> _queue;
    private int _maxBatchSize;
    private IBatchFactory _batchFactory;
    private IRequestHandler _requestHandler;
    private int _maxQueueSize;
    private CancellationTokenSource _continue;
    private int _flushIntervalInMillis;
    private int _threads;
    private Semaphore _semaphore;
    private Timer _timer;
    internal AsyncIntervalFlushHandler(IBatchFactory batchFactory, IRequestHandler requestHandler, int maxQueueSize, int maxBatchSize, int flushIntervalInMillis, int threads);
    private void RunInterval();
    [AsyncStateMachineAttribute("Segment.Flush.AsyncIntervalFlushHandler/<PerformFlush>d__14")]
private Task PerformFlush();
    public sealed virtual void Flush();
    [AsyncStateMachineAttribute("Segment.Flush.AsyncIntervalFlushHandler/<FlushAsync>d__16")]
public sealed virtual Task FlushAsync();
    private void WaitWorkersToBeReleased();
    [AsyncStateMachineAttribute("Segment.Flush.AsyncIntervalFlushHandler/<FlushImpl>d__18")]
private Task FlushImpl();
    [AsyncStateMachineAttribute("Segment.Flush.AsyncIntervalFlushHandler/<Process>d__19")]
public sealed virtual Task Process(BaseAction action);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Segment.Flush.AsyncIntervalFlushHandler/<<RunInterval>b__13_0>d")]
[CompilerGeneratedAttribute]
private void <RunInterval>b__13_0(object b);
}
internal class Segment.Flush.BlockingFlushHandler : object {
    private IBatchFactory _batchFactory;
    private IRequestHandler _requestHandler;
    internal BlockingFlushHandler(IBatchFactory batchFactory, IRequestHandler requestHandler);
    [AsyncStateMachineAttribute("Segment.Flush.BlockingFlushHandler/<Process>d__3")]
public sealed virtual Task Process(BaseAction action);
    public sealed virtual void Flush();
    [AsyncStateMachineAttribute("Segment.Flush.BlockingFlushHandler/<FlushAsync>d__5")]
public sealed virtual Task FlushAsync();
    public sealed virtual void Dispose();
}
public interface Segment.Flush.IAsyncFlushHandler {
    public abstract virtual Task FlushAsync();
}
internal interface Segment.Flush.IBatchFactory {
    public abstract virtual Batch Create(List`1<BaseAction> actions);
}
public interface Segment.Flush.IFlushHandler {
    public abstract virtual Task Process(BaseAction action);
    public abstract virtual void Flush();
}
internal class Segment.Flush.SimpleBatchFactory : object {
    private string _writeKey;
    internal SimpleBatchFactory(string writeKey);
    public sealed virtual Batch Create(List`1<BaseAction> actions);
}
public interface Segment.IAnalyticsClient {
    public Statistics Statistics { get; public set; }
    public string WriteKey { get; }
    public Config Config { get; }
    public abstract virtual Statistics get_Statistics();
    public abstract virtual void set_Statistics(Statistics value);
    public abstract virtual string get_WriteKey();
    public abstract virtual Config get_Config();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Failed(FailedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Failed(FailedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Succeeded(SucceededHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Succeeded(SucceededHandler value);
    public abstract virtual void Identify(string userId, IDictionary`2<string, object> traits);
    public abstract virtual void Identify(string userId, IDictionary`2<string, object> traits, Options options);
    public abstract virtual void Group(string userId, string groupId, Options options);
    public abstract virtual void Group(string userId, string groupId, IDictionary`2<string, object> traits);
    public abstract virtual void Group(string userId, string groupId, IDictionary`2<string, object> traits, Options options);
    public abstract virtual void Track(string userId, string eventName);
    public abstract virtual void Track(string userId, string eventName, IDictionary`2<string, object> properties);
    public abstract virtual void Track(string userId, string eventName, Options options);
    public abstract virtual void Track(string userId, string eventName, IDictionary`2<string, object> properties, Options options);
    public abstract virtual void Alias(string previousId, string userId);
    public abstract virtual void Alias(string previousId, string userId, Options options);
    public abstract virtual void Page(string userId, string name);
    public abstract virtual void Page(string userId, string name, Options options);
    public abstract virtual void Page(string userId, string name, string category);
    public abstract virtual void Page(string userId, string name, IDictionary`2<string, object> properties);
    public abstract virtual void Page(string userId, string name, IDictionary`2<string, object> properties, Options options);
    public abstract virtual void Page(string userId, string name, string category, IDictionary`2<string, object> properties, Options options);
    public abstract virtual void Screen(string userId, string name);
    public abstract virtual void Screen(string userId, string name, Options options);
    public abstract virtual void Screen(string userId, string name, string category);
    public abstract virtual void Screen(string userId, string name, IDictionary`2<string, object> properties);
    public abstract virtual void Screen(string userId, string name, IDictionary`2<string, object> properties, Options options);
    public abstract virtual void Screen(string userId, string name, string category, IDictionary`2<string, object> properties, Options options);
    public abstract virtual void Flush();
}
public class Segment.Logger : object {
    [CompilerGeneratedAttribute]
private static LogHandler Handlers;
    [CompilerGeneratedAttribute]
public static void add_Handlers(LogHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Handlers(LogHandler value);
    private static void _Log(Level level, string message, IDictionary`2<string, object> args);
    internal static void Debug(string message);
    internal static void Debug(string message, IDictionary`2<string, object> args);
    internal static void Info(string message);
    internal static void Info(string message, IDictionary`2<string, object> args);
    internal static void Warn(string message);
    internal static void Warn(string message, IDictionary`2<string, object> args);
    internal static void Error(string message);
    internal static void Error(string message, IDictionary`2<string, object> args);
}
public class Segment.Model.Alias : BaseAction {
    [CompilerGeneratedAttribute]
private string <PreviousId>k__BackingField;
    [JsonPropertyAttribute]
public string PreviousId { get; public set; }
    internal Alias(string previousId, string userId, Options options);
    [CompilerGeneratedAttribute]
public string get_PreviousId();
    [CompilerGeneratedAttribute]
public void set_PreviousId(string value);
}
public abstract class Segment.Model.BaseAction : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Dict <Integrations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnonymousId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public string MessageId { get; private set; }
    [JsonPropertyAttribute]
public string Timestamp { get; private set; }
    [JsonPropertyAttribute]
public Context Context { get; public set; }
    [JsonPropertyAttribute]
public Dict Integrations { get; public set; }
    [JsonPropertyAttribute]
public string AnonymousId { get; public set; }
    [JsonPropertyAttribute]
public string UserId { get; private set; }
    [JsonIgnoreAttribute]
public int Size { get; public set; }
    internal BaseAction(string type, string UserId, Options options);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
private void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(string value);
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Context value);
    [CompilerGeneratedAttribute]
public Dict get_Integrations();
    [CompilerGeneratedAttribute]
public void set_Integrations(Dict value);
    [CompilerGeneratedAttribute]
public string get_AnonymousId();
    [CompilerGeneratedAttribute]
public void set_AnonymousId(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
private void set_UserId(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
}
internal class Segment.Model.Batch : object {
    [CompilerGeneratedAttribute]
private string <WriteKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SentAt>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseAction> <batch>k__BackingField;
    internal string WriteKey { get; internal set; }
    [JsonPropertyAttribute]
internal string MessageId { get; private set; }
    [JsonPropertyAttribute]
internal string SentAt { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<BaseAction> batch { get; internal set; }
    internal Batch(string writeKey, List`1<BaseAction> batch);
    [CompilerGeneratedAttribute]
internal string get_WriteKey();
    [CompilerGeneratedAttribute]
internal void set_WriteKey(string value);
    [CompilerGeneratedAttribute]
internal string get_MessageId();
    [CompilerGeneratedAttribute]
private void set_MessageId(string value);
    [CompilerGeneratedAttribute]
internal string get_SentAt();
    [CompilerGeneratedAttribute]
internal void set_SentAt(string value);
    [CompilerGeneratedAttribute]
internal List`1<BaseAction> get_batch();
    [CompilerGeneratedAttribute]
internal void set_batch(List`1<BaseAction> value);
}
public class Segment.Model.Context : Dict {
    public Context Add(string key, object val);
}
public class Segment.Model.Dict : Dictionary`2<string, object> {
    public Dict Add(string key, object val);
}
public class Segment.Model.Group : BaseAction {
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Traits>k__BackingField;
    [JsonPropertyAttribute]
public string GroupId { get; public set; }
    [JsonPropertyAttribute]
public IDictionary`2<string, object> Traits { get; public set; }
    internal Group(string userId, string groupId, IDictionary`2<string, object> traits, Options options);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public void set_GroupId(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IDictionary`2<string, object> value);
}
public class Segment.Model.Identify : BaseAction {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Traits>k__BackingField;
    [JsonPropertyAttribute]
public IDictionary`2<string, object> Traits { get; public set; }
    internal Identify(string userId, IDictionary`2<string, object> traits, Options options);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IDictionary`2<string, object> value);
}
public class Segment.Model.Options : object {
    [CompilerGeneratedAttribute]
private string <AnonymousId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dict <Integrations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    public string AnonymousId { get; private set; }
    public Dict Integrations { get; private set; }
    public Nullable`1<DateTime> Timestamp { get; private set; }
    public Context Context { get; private set; }
    [CompilerGeneratedAttribute]
public string get_AnonymousId();
    [CompilerGeneratedAttribute]
private void set_AnonymousId(string value);
    [CompilerGeneratedAttribute]
public Dict get_Integrations();
    [CompilerGeneratedAttribute]
private void set_Integrations(Dict value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(Context value);
    public Options SetAnonymousId(string anonymousId);
    public Options SetTimestamp(Nullable`1<DateTime> timestamp);
    public Options SetContext(Context context);
    public Options SetIntegration(string integration, bool enabled);
    public Options SetIntegration(string integration, Dict value);
}
public class Segment.Model.Page : BaseAction {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Category { get; public set; }
    [JsonPropertyAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    internal Page(string userId, string name, string category, IDictionary`2<string, object> properties, Options options);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
}
public class Segment.Model.Properties : Dict {
}
public class Segment.Model.Providers : Dict {
    public Providers SetDefault(bool enabled);
    public Providers SetEnabled(string providerName, bool enabled);
}
public class Segment.Model.Screen : BaseAction {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Category { get; public set; }
    [JsonPropertyAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    internal Screen(string userId, string name, string category, IDictionary`2<string, object> properties, Options options);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
}
public class Segment.Model.Track : BaseAction {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [JsonPropertyAttribute]
public string EventName { get; public set; }
    [JsonPropertyAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    internal Track(string userId, string eventName, IDictionary`2<string, object> properties, Options options);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
}
public class Segment.Model.Traits : Dict {
}
public class Segment.Request.Backo : object {
    private int _min;
    private byte _factor;
    private ushort _jitter;
    private int _max;
    private int _attempt;
    private int _currentAttemptTime;
    private static int IntMax;
    public bool HasReachedMax { get; }
    public int CurrentAttempt { get; }
    public Backo(int min, int max, byte factor, ushort jitter);
    public bool get_HasReachedMax();
    public int get_CurrentAttempt();
    public Task AttemptAsync();
    public Task AttemptForAsync(int attempt);
    public int AttemptTime();
    public int AttemptTimeFor(int attempt);
    public void Reset();
}
internal class Segment.Request.BlockingRequestHandler : object {
    private Client _client;
    private Backo _backo;
    private int _maxBackOffDuration;
    private HttpClient _httpClient;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    internal BlockingRequestHandler(Client client, TimeSpan timeout);
    internal BlockingRequestHandler(Client client, TimeSpan timeout, Backo backo);
    internal BlockingRequestHandler(Client client, TimeSpan timeout, HttpClient httpClient, Backo backo);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("Segment.Request.BlockingRequestHandler/<MakeRequest>d__11")]
public sealed virtual Task MakeRequest(Batch batch);
    private void Fail(Batch batch, Exception e, long duration);
    private void Succeed(Batch batch, long duration);
    private string BasicAuthHeader(string user, string pass);
}
internal class Segment.Request.FakeRequestHandler : object {
    private Client _client;
    public FakeRequestHandler(Client client);
    [AsyncStateMachineAttribute("Segment.Request.FakeRequestHandler/<MakeRequest>d__2")]
public sealed virtual Task MakeRequest(Batch batch);
}
internal interface Segment.Request.IRequestHandler {
    public abstract virtual Task MakeRequest(Batch batch);
}
internal class Segment.Request.WebProxy : object {
    private string _proxy;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    public ICredentials Credentials { get; public set; }
    public WebProxy(string proxy);
    [CompilerGeneratedAttribute]
public sealed virtual ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
}
public class Segment.Stats.Statistics : object {
    private int _submitted;
    private int _succeeded;
    private int _failed;
    public int Submitted { get; }
    public int Succeeded { get; }
    public int Failed { get; }
    public int get_Submitted();
    public int get_Succeeded();
    public int get_Failed();
    internal void IncrementSubmitted();
    internal void IncrementSucceeded();
    internal void IncrementFailed();
    private void Increment(Int32& value);
}
public class Segment.SucceededHandler : MulticastDelegate {
    public SucceededHandler(object object, IntPtr method);
    public virtual void Invoke(BaseAction action);
    public virtual IAsyncResult BeginInvoke(BaseAction action, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
