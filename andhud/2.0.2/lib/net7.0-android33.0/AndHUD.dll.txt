public class AndroidHUD.AndHUD : object {
    private static string TagName;
    private static AndHUD shared;
    [CompilerGeneratedAttribute]
private Dialog <CurrentDialog>k__BackingField;
    private ProgressWheel progressWheel;
    private TextView statusText;
    private ImageView imageView;
    private object statusObj;
    private SemaphoreSlim _semaphoreSlim;
    public static AndHUD Shared { get; }
    public Dialog CurrentDialog { get; private set; }
    public static AndHUD get_Shared();
    [CompilerGeneratedAttribute]
public Dialog get_CurrentDialog();
    [CompilerGeneratedAttribute]
private void set_CurrentDialog(Dialog value);
    public void Show(Context context, string status, int progress, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, bool centered, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowSuccess(Context context, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowError(Context context, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowSuccessWithStatus(Context context, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowErrorWithStatus(Context context, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowImage(Context context, int drawableResourceId, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowImage(Context context, Drawable drawable, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void ShowToast(Context context, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, bool centered, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    public void Dismiss();
    private Drawable GetDrawable(Context context, int drawableResourceId);
    private void showStatus(Context context, bool spinner, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, bool centered, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    private int DpToPx(Context context, int dp);
    private void showProgress(Context context, int progress, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    private void showImage(Context context, Drawable image, string status, MaskType maskType, Nullable`1<TimeSpan> timeout, Action clickCallback, Action cancelCallback, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    [AsyncStateMachineAttribute("AndroidHUD.AndHUD/<RunTimeout>d__28")]
private void RunTimeout(Nullable`1<TimeSpan> timeout);
    private void SetupDialog(Context context, MaskType maskType, Action cancelCallback, Func`4<Context, Dialog, MaskType, View> customSetup, Action`1<Dialog> prepareDialogCallback, Action`1<Dialog> dialogShownCallback);
    private void DismissCurrent();
    private static bool IsAlive(Object object);
    [CompilerGeneratedAttribute]
private void <DismissCurrent>g__ActionDismiss|30_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <DismissCurrent>b__30_1(object _);
}
public enum AndroidHUD.MaskType : Enum {
    public int value__;
    public static MaskType None;
    public static MaskType Clear;
    public static MaskType Black;
}
[RegisterAttribute("androidhud.ProgressWheel")]
public class AndroidHUD.ProgressWheel : View {
    [CompilerGeneratedAttribute]
private int <CircleRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BarLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WheelPaddingTop>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WheelPaddingBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WheelPaddingLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WheelPaddingRight>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <CircleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <RimColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpinSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RimWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayMillis>k__BackingField;
    private int fullRadius;
    private Paint barPaint;
    private Paint circlePaint;
    private Paint rimPaint;
    private Paint textPaint;
    private RectF circleBounds;
    private int progress;
    private bool isSpinning;
    private SpinHandler spinHandler;
    private BuildVersionCodes version;
    public int CircleRadius { get; public set; }
    public int BarLength { get; public set; }
    public int BarWidth { get; public set; }
    public int TextSize { get; public set; }
    public int WheelPaddingTop { get; public set; }
    public int WheelPaddingBottom { get; public set; }
    public int WheelPaddingLeft { get; public set; }
    public int WheelPaddingRight { get; public set; }
    public Color BarColor { get; public set; }
    public Color CircleColor { get; public set; }
    public Color RimColor { get; public set; }
    public Shader RimShader { get; public set; }
    public Color TextColor { get; public set; }
    public int SpinSpeed { get; public set; }
    public int RimWidth { get; public set; }
    public int DelayMillis { get; public set; }
    public bool IsSpinning { get; }
    public ProgressWheel(Context context);
    public ProgressWheel(Context context, IAttributeSet attrs);
    public ProgressWheel(Context context, IAttributeSet attrs, int defStyle);
    [CompilerGeneratedAttribute]
public int get_CircleRadius();
    [CompilerGeneratedAttribute]
public void set_CircleRadius(int value);
    [CompilerGeneratedAttribute]
public int get_BarLength();
    [CompilerGeneratedAttribute]
public void set_BarLength(int value);
    [CompilerGeneratedAttribute]
public int get_BarWidth();
    [CompilerGeneratedAttribute]
public void set_BarWidth(int value);
    [CompilerGeneratedAttribute]
public int get_TextSize();
    [CompilerGeneratedAttribute]
public void set_TextSize(int value);
    [CompilerGeneratedAttribute]
public int get_WheelPaddingTop();
    [CompilerGeneratedAttribute]
public void set_WheelPaddingTop(int value);
    [CompilerGeneratedAttribute]
public int get_WheelPaddingBottom();
    [CompilerGeneratedAttribute]
public void set_WheelPaddingBottom(int value);
    [CompilerGeneratedAttribute]
public int get_WheelPaddingLeft();
    [CompilerGeneratedAttribute]
public void set_WheelPaddingLeft(int value);
    [CompilerGeneratedAttribute]
public int get_WheelPaddingRight();
    [CompilerGeneratedAttribute]
public void set_WheelPaddingRight(int value);
    [CompilerGeneratedAttribute]
public Color get_BarColor();
    [CompilerGeneratedAttribute]
public void set_BarColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_CircleColor();
    [CompilerGeneratedAttribute]
public void set_CircleColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_RimColor();
    [CompilerGeneratedAttribute]
public void set_RimColor(Color value);
    public Shader get_RimShader();
    public void set_RimShader(Shader value);
    [CompilerGeneratedAttribute]
public Color get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(Color value);
    [CompilerGeneratedAttribute]
public int get_SpinSpeed();
    [CompilerGeneratedAttribute]
public void set_SpinSpeed(int value);
    [CompilerGeneratedAttribute]
public int get_RimWidth();
    [CompilerGeneratedAttribute]
public void set_RimWidth(int value);
    [CompilerGeneratedAttribute]
public int get_DelayMillis();
    [CompilerGeneratedAttribute]
public void set_DelayMillis(int value);
    public bool get_IsSpinning();
    protected virtual void OnAttachedToWindow();
    private void SetupPaints();
    private void SetupBounds();
    protected virtual void OnDraw(Canvas canvas);
    public void ResetCount();
    public void StopSpinning();
    public void Spin();
    public void IncrementProgress();
    public void SetProgress(int i);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Message msg);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <SetProgress>b__86_0(object sender, AnimatorUpdateEventArgs e);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "13.1.99.94")]
public class AndroidHUD.Resource : object {
    private static Resource();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public static class XHUD.HUD : object {
    public static Activity MyActivity;
    public static void Show(string message, int progress, MaskType maskType);
    public static void Dismiss();
    public static void ShowToast(string message, bool showToastCentered, double timeoutMs);
    public static void ShowToast(string message, MaskType maskType, bool showToastCentered, double timeoutMs);
}
public enum XHUD.MaskType : Enum {
    public int value__;
    public static MaskType Clear;
    public static MaskType Black;
}
