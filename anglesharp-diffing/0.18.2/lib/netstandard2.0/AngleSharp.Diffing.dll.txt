[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Diffing.AngleSharpDomExtensions : object {
    [ExtensionAttribute]
public static SourceCollection ToSourceCollection(IEnumerable`1<INode> nodelist, ComparisonSourceType sourceType, string path);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.AngleSharpDomExtensions/<ToComparisonSourceList>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<ComparisonSource> ToComparisonSourceList(IEnumerable`1<INode> nodes, ComparisonSourceType sourceType, string path);
    [ExtensionAttribute]
public static ComparisonSource ToComparisonSource(INode node, int index, ComparisonSourceType sourceType, string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.AttrDiff : DiffBase`1<AttributeComparisonSource> {
    [CompilerGeneratedAttribute]
private AttrDiffKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public AttrDiffKind Kind { get; }
    public AttrDiff(AttributeComparison& comparison, AttrDiffKind kind);
    [CompilerGeneratedAttribute]
protected AttrDiff(AttrDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public AttrDiffKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AttrDiff left, AttrDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AttrDiff left, AttrDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DiffBase`1<AttributeComparisonSource> other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AttrDiff other);
    [CompilerGeneratedAttribute]
public virtual DiffBase`1<AttributeComparisonSource> <Clone>$();
}
public enum AngleSharp.Diffing.Core.AttrDiffKind : Enum {
    public int value__;
    public static AttrDiffKind Unspecified;
    public static AttrDiffKind Name;
    public static AttrDiffKind Value;
}
[IsReadOnlyAttribute]
public class AngleSharp.Diffing.Core.AttributeComparison : ValueType {
    [CompilerGeneratedAttribute]
private AttributeComparisonSource <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeComparisonSource <Test>k__BackingField;
    public AttributeComparisonSource Control { get; public set; }
    public AttributeComparisonSource Test { get; public set; }
    public AttributeComparison(AttributeComparisonSource& Control, AttributeComparisonSource& Test);
    [CompilerGeneratedAttribute]
public AttributeComparisonSource get_Control();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Control(AttributeComparisonSource value);
    [CompilerGeneratedAttribute]
public AttributeComparisonSource get_Test();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Test(AttributeComparisonSource value);
    public ValueTuple`2<IElement, IElement> GetAttributeElements();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AttributeComparison left, AttributeComparison right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AttributeComparison left, AttributeComparison right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(AttributeComparison other);
    [CompilerGeneratedAttribute]
public void Deconstruct(AttributeComparisonSource& Control, AttributeComparisonSource& Test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class AngleSharp.Diffing.Core.AttributeComparisonSource : ValueType {
    [CompilerGeneratedAttribute]
private IAttr <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonSource <ElementSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonSourceType <SourceType>k__BackingField;
    public IAttr Attribute { get; }
    public ComparisonSource ElementSource { get; }
    public string Path { get; }
    public ComparisonSourceType SourceType { get; }
    public AttributeComparisonSource(string attributeName, ComparisonSource& elementSource);
    [CompilerGeneratedAttribute]
public IAttr get_Attribute();
    [CompilerGeneratedAttribute]
public ComparisonSource get_ElementSource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual ComparisonSourceType get_SourceType();
    public virtual string ToString();
    public sealed virtual bool Equals(AttributeComparisonSource other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AttributeComparisonSource left, AttributeComparisonSource right);
    public static bool op_Inequality(AttributeComparisonSource left, AttributeComparisonSource right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.CommentDiff : NodeDiff {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public CommentDiff(Comparison& comparison);
    [CompilerGeneratedAttribute]
protected CommentDiff(CommentDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CommentDiff left, CommentDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CommentDiff left, CommentDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NodeDiff other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CommentDiff other);
    [CompilerGeneratedAttribute]
public virtual DiffBase`1<ComparisonSource> <Clone>$();
}
[FlagsAttribute]
public enum AngleSharp.Diffing.Core.CompareDecision : Enum {
    public int value__;
    public static CompareDecision Unknown;
    public static CompareDecision Same;
    public static CompareDecision Different;
    public static CompareDecision Skip;
    public static CompareDecision SkipChildren;
    public static CompareDecision SkipAttributes;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class AngleSharp.Diffing.Core.CompareResult : ValueType {
    [CompilerGeneratedAttribute]
private CompareDecision <Decision>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiff <Diff>k__BackingField;
    public static CompareResult Unknown;
    public static CompareResult Same;
    public static CompareResult Skip;
    public static CompareResult SkipChildren;
    public static CompareResult SkipAttributes;
    public CompareDecision Decision { get; public set; }
    public IDiff Diff { get; public set; }
    public static CompareResult Different { get; }
    public bool IsSameOrSkip { get; }
    public CompareResult(CompareDecision Decision, IDiff Diff);
    private static CompareResult();
    [CompilerGeneratedAttribute]
public CompareDecision get_Decision();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Decision(CompareDecision value);
    [CompilerGeneratedAttribute]
public IDiff get_Diff();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Diff(IDiff value);
    public static CompareResult get_Different();
    [NullableContextAttribute("1")]
public static CompareResult FromDiff(IDiff diff);
    public bool get_IsSameOrSkip();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CompareResult left, CompareResult right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CompareResult left, CompareResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CompareResult other);
    [CompilerGeneratedAttribute]
public void Deconstruct(CompareDecision& Decision, IDiff& Diff);
}
[IsReadOnlyAttribute]
public class AngleSharp.Diffing.Core.Comparison : ValueType {
    [CompilerGeneratedAttribute]
private ComparisonSource <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonSource <Test>k__BackingField;
    public ComparisonSource Control { get; public set; }
    public ComparisonSource Test { get; public set; }
    public bool AreNodeTypesEqual { get; }
    public Comparison(ComparisonSource& Control, ComparisonSource& Test);
    [CompilerGeneratedAttribute]
public ComparisonSource get_Control();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Control(ComparisonSource value);
    [CompilerGeneratedAttribute]
public ComparisonSource get_Test();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Test(ComparisonSource value);
    public bool get_AreNodeTypesEqual();
    [NullableContextAttribute("1")]
public bool TryGetNodesAsType(TNode& controlNode, TNode& testNode);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Comparison left, Comparison right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Comparison left, Comparison right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(Comparison other);
    [CompilerGeneratedAttribute]
public void Deconstruct(ComparisonSource& Control, ComparisonSource& Test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class AngleSharp.Diffing.Core.ComparisonSource : ValueType {
    private int _hashCode;
    public static char PathSeparatorChar;
    [CompilerGeneratedAttribute]
private INode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonSourceType <SourceType>k__BackingField;
    public INode Node { get; }
    public int Index { get; }
    public string Path { get; }
    public ComparisonSourceType SourceType { get; }
    public ComparisonSource(INode node, ComparisonSourceType sourceType);
    public ComparisonSource(INode node, int index, string parentsPath, ComparisonSourceType sourceType);
    [CompilerGeneratedAttribute]
public INode get_Node();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual ComparisonSourceType get_SourceType();
    public static string GetNodePathSegment(INode node);
    public static string CombinePath(string parentPath, string path);
    private static int GetNodeIndex(INode node);
    private static string CalculateParentPath(INode node);
    private static int GetPathIndex(INode node);
    public virtual string ToString();
    public sealed virtual bool Equals(ComparisonSource other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(ComparisonSource left, ComparisonSource right);
    public static bool op_Inequality(ComparisonSource left, ComparisonSource right);
}
public enum AngleSharp.Diffing.Core.ComparisonSourceType : Enum {
    public int value__;
    public static ComparisonSourceType Control;
    public static ComparisonSourceType Test;
}
public abstract class AngleSharp.Diffing.Core.DiffBase`1 : object {
    [CompilerGeneratedAttribute]
private T <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private DiffTarget <Target>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public T Control { get; public set; }
    public T Test { get; public set; }
    public DiffTarget Target { get; public set; }
    public DiffResult Result { get; }
    protected DiffBase`1(T Control, T Test, DiffTarget Target);
    [CompilerGeneratedAttribute]
protected DiffBase`1(DiffBase`1<T> original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public T get_Control();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Control(T value);
    [CompilerGeneratedAttribute]
public T get_Test();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Test(T value);
    [CompilerGeneratedAttribute]
public sealed virtual DiffTarget get_Target();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Target(DiffTarget value);
    public sealed virtual DiffResult get_Result();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DiffBase`1<T> left, DiffBase`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DiffBase`1<T> left, DiffBase`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(DiffBase`1<T> other);
    [CompilerGeneratedAttribute]
public abstract virtual DiffBase`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(T& Control, T& Test, DiffTarget& Target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Diffing.Core.DiffContext : object {
    [NullableAttribute("2")]
private IElement _controlRoot;
    [NullableAttribute("2")]
private IElement _testRoot;
    [CompilerGeneratedAttribute]
private HashSet`1<ComparisonSource> <MissingSources>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ComparisonSource> <UnexpectedSources>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<AttributeComparisonSource> <MissingAttributeSources>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<AttributeComparisonSource> <UnexpectedAttributeSources>k__BackingField;
    internal HashSet`1<ComparisonSource> MissingSources { get; }
    internal HashSet`1<ComparisonSource> UnexpectedSources { get; }
    internal HashSet`1<AttributeComparisonSource> MissingAttributeSources { get; }
    internal HashSet`1<AttributeComparisonSource> UnexpectedAttributeSources { get; }
    public DiffContext(SourceCollection controlSources, SourceCollection testSources);
    [NullableContextAttribute("2")]
public DiffContext(IElement controlRoot, IElement testRoot);
    [CompilerGeneratedAttribute]
internal HashSet`1<ComparisonSource> get_MissingSources();
    [CompilerGeneratedAttribute]
internal HashSet`1<ComparisonSource> get_UnexpectedSources();
    [CompilerGeneratedAttribute]
internal HashSet`1<AttributeComparisonSource> get_MissingAttributeSources();
    [CompilerGeneratedAttribute]
internal HashSet`1<AttributeComparisonSource> get_UnexpectedAttributeSources();
    public sealed virtual IHtmlCollection`1<IElement> QueryControlNodes(string selector);
    public sealed virtual IHtmlCollection`1<IElement> QueryTestNodes(string selector);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.DiffContext/<GetDiffsFromUnmatched>d__18")]
internal IEnumerable`1<IDiff> GetDiffsFromUnmatched();
}
public enum AngleSharp.Diffing.Core.DiffResult : Enum {
    public int value__;
    public static DiffResult Different;
    public static DiffResult Missing;
    public static DiffResult Unexpected;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.Diffs.ElementDiff : NodeDiff {
    [CompilerGeneratedAttribute]
private ElementDiffKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ElementDiffKind Kind { get; }
    public ElementDiff(Comparison& comparison, ElementDiffKind kind);
    [CompilerGeneratedAttribute]
protected ElementDiff(ElementDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ElementDiffKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ElementDiff left, ElementDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ElementDiff left, ElementDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NodeDiff other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ElementDiff other);
    [CompilerGeneratedAttribute]
public virtual DiffBase`1<ComparisonSource> <Clone>$();
}
public enum AngleSharp.Diffing.Core.Diffs.ElementDiffKind : Enum {
    public int value__;
    public static ElementDiffKind Unspecified;
    public static ElementDiffKind Name;
    public static ElementDiffKind ClosingStyle;
}
public enum AngleSharp.Diffing.Core.DiffTarget : Enum {
    public int value__;
    public static DiffTarget None;
    public static DiffTarget Attribute;
    public static DiffTarget Comment;
    public static DiffTarget Element;
    public static DiffTarget Node;
    public static DiffTarget Text;
}
public enum AngleSharp.Diffing.Core.FilterDecision : Enum {
    public int value__;
    public static FilterDecision Keep;
    public static FilterDecision Exclude;
}
[ExtensionAttribute]
public static class AngleSharp.Diffing.Core.FilterDecisionExtensions : object {
    [ExtensionAttribute]
public static bool IsExclude(FilterDecision decision);
    [ExtensionAttribute]
public static bool IsKeep(FilterDecision decision);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.HtmlDifferenceEngine : object {
    private IDiffingStrategy _diffingStrategy;
    private SourceCollection _controlSources;
    private SourceCollection _testSources;
    [CompilerGeneratedAttribute]
private DiffContext <Context>k__BackingField;
    private DiffContext Context { get; }
    public HtmlDifferenceEngine(IDiffingStrategy diffingStrategy, SourceCollection controlSources, SourceCollection testSources);
    [CompilerGeneratedAttribute]
private DiffContext get_Context();
    public IEnumerable`1<IDiff> Compare();
    private IEnumerable`1<IDiff> Compare(SourceCollection controlSources, SourceCollection testSources);
    private void ApplyNodeFilter(SourceCollection sources);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.HtmlDifferenceEngine/<MatchNodes>d__10")]
private IEnumerable`1<Comparison> MatchNodes(SourceCollection controls, SourceCollection tests);
    private IEnumerable`1<IDiff> CompareNodes(IEnumerable`1<Comparison> comparisons);
    private IEnumerable`1<IDiff> CompareNode(Comparison& comparison);
    private IEnumerable`1<IDiff> CompareElement(Comparison& comparison);
    private IEnumerable`1<IDiff> CompareElementAttributes(Comparison& comparison);
    private void ApplyFilterAttributes(SourceMap controlAttrs);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.HtmlDifferenceEngine/<MatchAttributes>d__16")]
private IEnumerable`1<AttributeComparison> MatchAttributes(SourceMap controls, SourceMap tests);
    private IEnumerable`1<IDiff> CompareChildNodes(Comparison& comparison);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.HtmlDifferenceEngine/<CompareAttributes>d__18")]
private IEnumerable`1<IDiff> CompareAttributes(IEnumerable`1<AttributeComparison> comparisons);
    [CompilerGeneratedAttribute]
private void <MatchNodes>g__UpdateMatchedTracking|10_0(Comparison& comparison, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
private void <MatchNodes>g__UpdateUnmatchedTracking|10_1(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDiff> <CompareNodes>b__11_0(Comparison comparison);
    [CompilerGeneratedAttribute]
private void <MatchAttributes>g__MarkSelectedSourcesAsMatched|16_0(AttributeComparison& comparison, <>c__DisplayClass16_0& );
    [CompilerGeneratedAttribute]
private void <MatchAttributes>g__UpdateUnmatchedTracking|16_1(<>c__DisplayClass16_0& );
}
[NullableContextAttribute("1")]
public interface AngleSharp.Diffing.Core.IComparisonSource {
    public string Path { get; }
    public ComparisonSourceType SourceType { get; }
    public abstract virtual string get_Path();
    public abstract virtual ComparisonSourceType get_SourceType();
}
public interface AngleSharp.Diffing.Core.IDiff {
    public DiffResult Result { get; }
    public DiffTarget Target { get; }
    public abstract virtual DiffResult get_Result();
    public abstract virtual DiffTarget get_Target();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Diffing.Core.IDiffContext {
    public abstract virtual IHtmlCollection`1<IElement> QueryControlNodes(string cssSelector);
    public abstract virtual IHtmlCollection`1<IElement> QueryTestNodes(string cssSelector);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Diffing.Core.IDiffingStrategy {
    public abstract virtual FilterDecision Filter(ComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) comparisonSource);
    public abstract virtual FilterDecision Filter(AttributeComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) attributeComparisonSource);
    public abstract virtual IEnumerable`1<Comparison> Match(IDiffContext context, SourceCollection controlSources, SourceCollection testSources);
    public abstract virtual IEnumerable`1<AttributeComparison> Match(IDiffContext context, SourceMap controlAttrSources, SourceMap testAttrSources);
    public abstract virtual CompareResult Compare(Comparison& modreq(System.Runtime.InteropServices.InAttribute) comparison);
    public abstract virtual CompareResult Compare(AttributeComparison& modreq(System.Runtime.InteropServices.InAttribute) comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.MissingAttrDiff : MissingDiffBase`1<AttributeComparisonSource> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MissingAttrDiff(AttributeComparisonSource& control);
    [CompilerGeneratedAttribute]
protected MissingAttrDiff(MissingAttrDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MissingAttrDiff left, MissingAttrDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MissingAttrDiff left, MissingAttrDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MissingDiffBase`1<AttributeComparisonSource> other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(MissingAttrDiff other);
    [CompilerGeneratedAttribute]
public virtual MissingDiffBase`1<AttributeComparisonSource> <Clone>$();
}
public abstract class AngleSharp.Diffing.Core.MissingDiffBase`1 : object {
    [CompilerGeneratedAttribute]
private T <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private DiffTarget <Target>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public T Control { get; public set; }
    public DiffTarget Target { get; public set; }
    public DiffResult Result { get; }
    protected MissingDiffBase`1(T Control, DiffTarget Target);
    [CompilerGeneratedAttribute]
protected MissingDiffBase`1(MissingDiffBase`1<T> original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public T get_Control();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Control(T value);
    [CompilerGeneratedAttribute]
public sealed virtual DiffTarget get_Target();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Target(DiffTarget value);
    public sealed virtual DiffResult get_Result();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MissingDiffBase`1<T> left, MissingDiffBase`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MissingDiffBase`1<T> left, MissingDiffBase`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(MissingDiffBase`1<T> other);
    [CompilerGeneratedAttribute]
public abstract virtual MissingDiffBase`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(T& Control, DiffTarget& Target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.MissingNodeDiff : MissingDiffBase`1<ComparisonSource> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MissingNodeDiff(ComparisonSource& control);
    [CompilerGeneratedAttribute]
protected MissingNodeDiff(MissingNodeDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MissingNodeDiff left, MissingNodeDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MissingNodeDiff left, MissingNodeDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MissingDiffBase`1<ComparisonSource> other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(MissingNodeDiff other);
    [CompilerGeneratedAttribute]
public virtual MissingDiffBase`1<ComparisonSource> <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.NodeDiff : DiffBase`1<ComparisonSource> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public NodeDiff(Comparison& comparison);
    [CompilerGeneratedAttribute]
protected NodeDiff(NodeDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NodeDiff left, NodeDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NodeDiff left, NodeDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DiffBase`1<ComparisonSource> other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NodeDiff other);
    [CompilerGeneratedAttribute]
public virtual DiffBase`1<ComparisonSource> <Clone>$();
}
[ExtensionAttribute]
public static class AngleSharp.Diffing.Core.NodeTypeExtensions : object {
    [ExtensionAttribute]
public static DiffTarget ToDiffTarget(NodeType nodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class AngleSharp.Diffing.Core.SourceCollection : object {
    private static int SOURCE_REMOVED;
    private static int SOURCE_UNMATCHED;
    private static int SOURCE_MATCHED;
    private Int32[] _status;
    private IReadOnlyList`1<ComparisonSource> _sources;
    [CompilerGeneratedAttribute]
private ComparisonSourceType <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public ComparisonSourceType SourceType { get; }
    public int Count { get; private set; }
    public ComparisonSource Item { get; }
    public SourceCollection(ComparisonSourceType sourceType, IEnumerable`1<ComparisonSource> sources);
    public SourceCollection(ComparisonSourceType sourceType, IReadOnlyList`1<ComparisonSource> sources);
    [CompilerGeneratedAttribute]
public ComparisonSourceType get_SourceType();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public ComparisonSource get_Item(int index);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.SourceCollection/<GetUnmatched>d__16")]
public IEnumerable`1<ComparisonSource> GetUnmatched(int startIndex);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.SourceCollection/<GetEnumerator>d__17")]
public sealed virtual IEnumerator`1<ComparisonSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.SourceCollection/<GetAllSources>d__19")]
public IEnumerable`1<ComparisonSource> GetAllSources();
    public void MarkAsMatched(ComparisonSource& source);
    public void Remove(SourceCollectionRemovePredicate predicate);
    private static void EnsureSourceAtExpectedIndex(int expectedIndex, ComparisonSource source);
}
public class AngleSharp.Diffing.Core.SourceCollectionRemovePredicate : MulticastDelegate {
    public SourceCollectionRemovePredicate(object object, IntPtr method);
    public virtual FilterDecision Invoke(ComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) source);
    public virtual IAsyncResult BeginInvoke(ComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) source, AsyncCallback callback, object object);
    public virtual FilterDecision EndInvoke(ComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) source, IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class AngleSharp.Diffing.Core.SourceMap : object {
    private HashSet`1<string> _matched;
    private Dictionary`2<string, AttributeComparisonSource> _sources;
    [CompilerGeneratedAttribute]
private ComparisonSourceType <SourceType>k__BackingField;
    public ComparisonSourceType SourceType { get; }
    public int Count { get; }
    public AttributeComparisonSource Item { get; }
    public SourceMap(ComparisonSource& elementSource);
    [CompilerGeneratedAttribute]
public ComparisonSourceType get_SourceType();
    public int get_Count();
    public AttributeComparisonSource get_Item(string name);
    public bool Contains(string name);
    public bool IsUnmatched(string name);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Core.SourceMap/<GetUnmatched>d__12")]
public IEnumerable`1<AttributeComparisonSource> GetUnmatched();
    public sealed virtual IEnumerator`1<AttributeComparisonSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Remove(SourceMapRemovePredicate predicate);
    public void MarkAsMatched(AttributeComparisonSource& source);
}
public class AngleSharp.Diffing.Core.SourceMapRemovePredicate : MulticastDelegate {
    public SourceMapRemovePredicate(object object, IntPtr method);
    public virtual FilterDecision Invoke(AttributeComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) source);
    public virtual IAsyncResult BeginInvoke(AttributeComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) source, AsyncCallback callback, object object);
    public virtual FilterDecision EndInvoke(AttributeComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) source, IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.StylesheetDiff : NodeDiff {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public StylesheetDiff(Comparison& comparison);
    [CompilerGeneratedAttribute]
protected StylesheetDiff(StylesheetDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StylesheetDiff left, StylesheetDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StylesheetDiff left, StylesheetDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NodeDiff other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(StylesheetDiff other);
    [CompilerGeneratedAttribute]
public virtual DiffBase`1<ComparisonSource> <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.TextDiff : NodeDiff {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public TextDiff(Comparison& comparison);
    [CompilerGeneratedAttribute]
protected TextDiff(TextDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TextDiff left, TextDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TextDiff left, TextDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NodeDiff other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TextDiff other);
    [CompilerGeneratedAttribute]
public virtual DiffBase`1<ComparisonSource> <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.UnexpectedAttrDiff : UnexpectedDiffBase`1<AttributeComparisonSource> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public UnexpectedAttrDiff(AttributeComparisonSource& test);
    [CompilerGeneratedAttribute]
protected UnexpectedAttrDiff(UnexpectedAttrDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UnexpectedAttrDiff left, UnexpectedAttrDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UnexpectedAttrDiff left, UnexpectedAttrDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(UnexpectedDiffBase`1<AttributeComparisonSource> other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UnexpectedAttrDiff other);
    [CompilerGeneratedAttribute]
public virtual UnexpectedDiffBase`1<AttributeComparisonSource> <Clone>$();
}
public abstract class AngleSharp.Diffing.Core.UnexpectedDiffBase`1 : object {
    [CompilerGeneratedAttribute]
private T <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private DiffTarget <Target>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public T Test { get; public set; }
    public DiffTarget Target { get; public set; }
    public DiffResult Result { get; }
    protected UnexpectedDiffBase`1(T Test, DiffTarget Target);
    [CompilerGeneratedAttribute]
protected UnexpectedDiffBase`1(UnexpectedDiffBase`1<T> original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public T get_Test();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Test(T value);
    [CompilerGeneratedAttribute]
public sealed virtual DiffTarget get_Target();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Target(DiffTarget value);
    public sealed virtual DiffResult get_Result();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(UnexpectedDiffBase`1<T> left, UnexpectedDiffBase`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(UnexpectedDiffBase`1<T> left, UnexpectedDiffBase`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(UnexpectedDiffBase`1<T> other);
    [CompilerGeneratedAttribute]
public abstract virtual UnexpectedDiffBase`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(T& Test, DiffTarget& Target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Core.UnexpectedNodeDiff : UnexpectedDiffBase`1<ComparisonSource> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public UnexpectedNodeDiff(ComparisonSource& test);
    [CompilerGeneratedAttribute]
protected UnexpectedNodeDiff(UnexpectedNodeDiff original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UnexpectedNodeDiff left, UnexpectedNodeDiff right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UnexpectedNodeDiff left, UnexpectedNodeDiff right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(UnexpectedDiffBase`1<ComparisonSource> other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UnexpectedNodeDiff other);
    [CompilerGeneratedAttribute]
public virtual UnexpectedDiffBase`1<ComparisonSource> <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.DiffBuilder : object {
    private IBrowsingContext _context;
    private IHtmlParser _htmlParser;
    private IDocument _document;
    [NullableAttribute("2")]
private DiffingStrategyPipeline _diffStrategy;
    private string _control;
    private string _test;
    public string Control { get; public set; }
    public string Test { get; public set; }
    private DiffBuilder(string control);
    public string get_Control();
    public void set_Control(string value);
    public string get_Test();
    public void set_Test(string value);
    public static DiffBuilder Compare(string control);
    public DiffBuilder WithTest(string test);
    public DiffBuilder WithOptions(Action`1<IDiffingStrategyCollection> registerOptions);
    public IEnumerable`1<IDiff> Build();
    protected INodeList Parse(string html);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Diffing.DiffingStrategyPipelineBuilderExtensions : object {
    [ExtensionAttribute]
public static IDiffingStrategyCollection IgnoreDiffAttributes(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddAttributeNameMatcher(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddAttributeComparer(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddClassAttributeComparer(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddBooleanAttributeComparer(IDiffingStrategyCollection builder, BooleanAttributeComparision booleanAttributeComparision);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddStyleAttributeComparer(IDiffingStrategyCollection builder, bool ignoreOrder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection IgnoreComments(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddCommentComparer(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddDefaultOptions(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddElementComparer(IDiffingStrategyCollection builder, bool enforceTagClosing);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddCssSelectorMatcher(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddIgnoreElementSupport(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddIgnoreChildrenElementSupport(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddIgnoreAttributesElementSupport(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddOneToOneNodeMatcher(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddSearchingNodeMatcher(IDiffingStrategyCollection builder);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddTextComparer(IDiffingStrategyCollection builder, WhitespaceOption whitespaceOption, bool ignoreCase);
    [ExtensionAttribute]
public static IDiffingStrategyCollection AddStyleSheetComparer(IDiffingStrategyCollection builder);
}
[ExtensionAttribute]
public static class AngleSharp.Diffing.Extensions.CollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddRange(ICollection`1<T> target, IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Diffing.Extensions.ElementExtensions : object {
    [ExtensionAttribute]
public static bool TryGetAttrValue(IElement element, string attributeName, Boolean& result);
    [ExtensionAttribute]
public static bool TryGetAttrValue(IElement element, string attributeName, String& result);
    [ExtensionAttribute]
public static bool TryGetAttrValue(IElement element, string attributeName, T& result);
    [ExtensionAttribute]
public static bool TryGetAttrValue(IElement element, string attributeName, Func`2<string, T> resultFunc, T& result);
    [ExtensionAttribute]
public static TEnum GetInlineOptionOrDefault(IElement startElement, string optionName, TEnum defaultValue);
    [ExtensionAttribute]
public static bool GetInlineOptionOrDefault(IElement startElement, string optionName, bool defaultValue);
    [ExtensionAttribute]
public static T GetInlineOptionOrDefault(IElement startElement, string optionName, Func`2<string, T> resultFunc, T defaultValue);
    [ExtensionAttribute]
public static bool TryGetNodeIndex(INode node, Int32& index);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Extensions.ElementExtensions/<GetParents>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<INode> GetParents(INode node);
    [CompilerGeneratedAttribute]
internal static bool <TryGetAttrValue>g__ParseBoolAttribute|0_0(string boolValue);
    [CompilerGeneratedAttribute]
internal static string <TryGetAttrValue>g__GetStringAttrValue|1_0(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static T <TryGetAttrValue>g__ParseEnum|2_0(string enumValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class AngleSharp.Diffing.Extensions.EmptyHtmlCollection`1 : object {
    public static IHtmlCollection`1<T> Empty;
    public T Item { get; }
    public T Item { get; }
    public int Length { get; }
    private static EmptyHtmlCollection`1();
    public sealed virtual T get_Item(int index);
    public sealed virtual T get_Item(string id);
    public sealed virtual int get_Length();
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Extensions.EmptyHtmlCollection`1/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class AngleSharp.Diffing.Extensions.EnumExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TEnum Parse(string enumString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Diffing.Extensions.NodeExtensions : object {
    [ExtensionAttribute]
public static bool HasAttributes(INode node);
    [ExtensionAttribute]
public static bool TryGetAttr(INode node, string attributeName, IAttr& attribute);
    [ExtensionAttribute]
public static bool TryGetAttrValue(INode node, string attributeName, Boolean& result);
    [ExtensionAttribute]
public static bool TryGetAttrValue(INode node, string attributeName, String& result);
    [ExtensionAttribute]
public static bool TryGetAttrValue(INode node, string attributeName, T& result);
    [ExtensionAttribute]
public static bool TryGetAttrValue(INode node, string attributeName, Func`2<string, T> resultFunc, T& result);
    [ExtensionAttribute]
public static bool IsSameTypeAs(INode node, INode other);
}
public class AngleSharp.Diffing.Extensions.UnexpectedDOMTreeStructureException : Exception {
    [NullableContextAttribute("1")]
private UnexpectedDOMTreeStructureException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.HtmlDiffer : object {
    private IBrowsingContext _context;
    private IHtmlParser _htmlParser;
    private IDocument _document;
    private IDiffingStrategy _diffingStrategy;
    public HtmlDiffer(IDiffingStrategy diffingStrategy);
    public IEnumerable`1<IDiff> Compare(string controlMarkup, string testMarkup);
    public IEnumerable`1<IDiff> Compare(INode controlNode, IEnumerable`1<INode> testNodes);
    public IEnumerable`1<IDiff> Compare(IEnumerable`1<INode> controlNodes, INode testNode);
    public IEnumerable`1<IDiff> Compare(INode controlNode, INode testNode);
    public IEnumerable`1<IDiff> Compare(IEnumerable`1<INode> controlNodes, IEnumerable`1<INode> testNodes);
    protected INodeList Parse(string html);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.AttributeComparer : object {
    private static string IGNORE_CASE_POSTFIX;
    private static string REGEX_POSTFIX;
    private static string IGNORE_CASE_REGEX_POSTFIX;
    private static string REGEX_IGNORE_CASE_POSTFIX;
    public static CompareResult Compare(AttributeComparison& comparison, CompareResult currentDecision);
    [NullableContextAttribute("0")]
private static ValueTuple`2<bool, bool> GetComparisonModifiers(AttributeComparison& comparison);
    private static bool CompareAttributeValues(AttributeComparison& comparison, bool ignoreCase);
    private static bool CompareAttributeValuesByRegex(AttributeComparison& comparison, bool ignoreCase);
    private static bool CompareAttributeNames(AttributeComparison& comparison, bool hasIgnorePostfix, bool hasRegexPostfix);
}
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.AttributeNameMatcher : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.AttributeStrategies.AttributeNameMatcher/<Match>d__0")]
public static IEnumerable`1<AttributeComparison> Match(IDiffContext context, SourceMap controlSources, SourceMap testSources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Strategies.AttributeStrategies.BooleanAttributeComparer : object {
    private static HashSet`1<string> BooleanAttributesSet;
    private BooleanAttributeComparision _mode;
    public static IReadOnlyCollection`1<string> BooleanAttributes { get; }
    public BooleanAttributeComparer(BooleanAttributeComparision mode);
    private static BooleanAttributeComparer();
    public static IReadOnlyCollection`1<string> get_BooleanAttributes();
    public CompareResult Compare(AttributeComparison& comparison, CompareResult currentDecision);
    private static bool IsAttributeNamesEqual(AttributeComparison& comparison);
    private static bool CompareStrict(AttributeComparison& comparison);
    private static bool IsAttributeStrictlyTruthy(IAttr attr);
}
public enum AngleSharp.Diffing.Strategies.AttributeStrategies.BooleanAttributeComparision : Enum {
    public int value__;
    public static BooleanAttributeComparision Loose;
    public static BooleanAttributeComparision Strict;
}
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.ClassAttributeComparer : object {
    [NullableAttribute("1")]
private static string CLASS_ATTRIBUTE_NAME;
    public static CompareResult Compare(AttributeComparison& comparison, CompareResult currentDecision);
    private static bool IsBothClassAttributes(AttributeComparison& comparison);
}
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.IgnoreAttributeComparer : object {
    [NullableAttribute("1")]
private static string DIFF_IGNORE_POSTFIX;
    public static CompareResult Compare(AttributeComparison& comparison, CompareResult currentDecision);
}
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.IgnoreDiffAttributesFilter : object {
    [NullableAttribute("1")]
private static string DiffAttributePrefix;
    public static FilterDecision Filter(AttributeComparisonSource& source, FilterDecision currentDecision);
}
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.OrderingStyleAttributeComparer : object {
    public static CompareResult Compare(AttributeComparison& comparison, CompareResult currentDecision);
    private static bool IsStyleAttributeComparison(AttributeComparison& comparison);
    private static CompareResult CompareElementStyle(AttributeComparison& comparison);
    [NullableContextAttribute("1")]
private static bool CompareCssStyleDeclarations(ICssStyleDeclaration control, ICssStyleDeclaration test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.PostfixedAttributeMatcher : object {
    private static String[] POSTFIXES;
    private static PostfixedAttributeMatcher();
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.AttributeStrategies.PostfixedAttributeMatcher/<Match>d__1")]
public static IEnumerable`1<AttributeComparison> Match(IDiffContext context, SourceMap controlSources, SourceMap testSources);
    private static bool NameHasPostfixSeparator(string ctrlName);
    private static string RemovePostfixFromName(string ctrlName);
}
public static class AngleSharp.Diffing.Strategies.AttributeStrategies.StyleAttributeComparer : object {
    public static CompareResult Compare(AttributeComparison& comparison, CompareResult currentDecision);
    private static bool IsStyleAttributeComparison(AttributeComparison& comparison);
    private static CompareResult CompareElementStyle(AttributeComparison& comparison);
    [NullableContextAttribute("1")]
private static bool CompareCssStyleDeclarations(ICssStyleDeclaration control, ICssStyleDeclaration test);
}
public static class AngleSharp.Diffing.Strategies.CommentStrategies.CommentComparer : object {
    public static CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
}
public static class AngleSharp.Diffing.Strategies.CommentStrategies.IgnoreCommentsFilter : object {
    public static FilterDecision Filter(ComparisonSource& source, FilterDecision currentDecision);
}
public class AngleSharp.Diffing.Strategies.CompareStrategy`1 : MulticastDelegate {
    public CompareStrategy`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual CompareResult Invoke(TComparison& modreq(System.Runtime.InteropServices.InAttribute) comparison, CompareResult currentDecision);
    public virtual IAsyncResult BeginInvoke(TComparison& modreq(System.Runtime.InteropServices.InAttribute) comparison, CompareResult currentDecision, AsyncCallback callback, object object);
    public virtual CompareResult EndInvoke(TComparison& modreq(System.Runtime.InteropServices.InAttribute) comparison, IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Strategies.DiffingStrategyPipeline : object {
    private List`1<FilterStrategy`1<ComparisonSource>> _nodeFilters;
    private List`1<FilterStrategy`1<AttributeComparisonSource>> _attrsFilters;
    private List`1<MatchStrategy`2<SourceCollection, Comparison>> _nodeMatchers;
    private List`1<MatchStrategy`2<SourceMap, AttributeComparison>> _attrsMatchers;
    private List`1<CompareStrategy`1<Comparison>> _nodeComparers;
    private List`1<CompareStrategy`1<AttributeComparison>> _attrComparers;
    public bool HasMatchers { get; }
    public bool HasComparers { get; }
    public bool get_HasMatchers();
    public bool get_HasComparers();
    public FilterDecision Filter(ComparisonSource& comparisonSource);
    public FilterDecision Filter(AttributeComparisonSource& attributeComparisonSource);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.DiffingStrategyPipeline/<Match>d__12")]
public sealed virtual IEnumerable`1<Comparison> Match(IDiffContext context, SourceCollection controlSources, SourceCollection testSources);
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.DiffingStrategyPipeline/<Match>d__13")]
public sealed virtual IEnumerable`1<AttributeComparison> Match(IDiffContext context, SourceMap controlAttrSources, SourceMap testAttrSources);
    public CompareResult Compare(Comparison& comparison);
    public CompareResult Compare(AttributeComparison& comparison);
    public sealed virtual IDiffingStrategyCollection AddFilter(FilterStrategy`1<ComparisonSource> filterStrategy, StrategyType strategyType);
    public sealed virtual IDiffingStrategyCollection AddFilter(FilterStrategy`1<AttributeComparisonSource> filterStrategy, StrategyType strategyType);
    public sealed virtual IDiffingStrategyCollection AddMatcher(MatchStrategy`2<SourceCollection, Comparison> matchStrategy, StrategyType strategyType);
    public sealed virtual IDiffingStrategyCollection AddMatcher(MatchStrategy`2<SourceMap, AttributeComparison> matchStrategy, StrategyType strategyType);
    public sealed virtual IDiffingStrategyCollection AddComparer(CompareStrategy`1<Comparison> compareStrategy, StrategyType strategyType);
    public sealed virtual IDiffingStrategyCollection AddComparer(CompareStrategy`1<AttributeComparison> compareStrategy, StrategyType strategyType);
    private FilterDecision Filter(T& source, List`1<FilterStrategy`1<T>> filterStrategies);
    private CompareResult Compare(TComparison& comparison, List`1<CompareStrategy`1<TComparison>> compareStrategies, CompareResult initialResult);
    private sealed virtual override FilterDecision AngleSharp.Diffing.Core.IDiffingStrategy.Filter(ComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) comparisonSource);
    private sealed virtual override FilterDecision AngleSharp.Diffing.Core.IDiffingStrategy.Filter(AttributeComparisonSource& modreq(System.Runtime.InteropServices.InAttribute) attributeComparisonSource);
    private sealed virtual override CompareResult AngleSharp.Diffing.Core.IDiffingStrategy.Compare(Comparison& modreq(System.Runtime.InteropServices.InAttribute) comparison);
    private sealed virtual override CompareResult AngleSharp.Diffing.Core.IDiffingStrategy.Compare(AttributeComparison& modreq(System.Runtime.InteropServices.InAttribute) comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Diffing.Strategies.ElementStrategies.CssSelectorElementMatcher : object {
    private static string DIFF_MATCH_ATTR_NAME;
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.ElementStrategies.CssSelectorElementMatcher/<Match>d__1")]
public static IEnumerable`1<Comparison> Match(IDiffContext context, SourceCollection controlSources, SourceCollection testSources);
    private static bool TryGetTestNode(IDiffContext context, string cssSelector, INode& testNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Strategies.ElementStrategies.DiffMatchSelectorReturnedTooManyResultsException : Exception {
    public DiffMatchSelectorReturnedTooManyResultsException(string message);
    public DiffMatchSelectorReturnedTooManyResultsException(string message, Exception innerException);
    protected DiffMatchSelectorReturnedTooManyResultsException(SerializationInfo info, StreamingContext context);
}
public class AngleSharp.Diffing.Strategies.ElementStrategies.ElementComparer : object {
    [CompilerGeneratedAttribute]
private bool <EnforceTagClosing>k__BackingField;
    public bool EnforceTagClosing { get; }
    public ElementComparer(bool enforceTagClosing);
    [CompilerGeneratedAttribute]
public bool get_EnforceTagClosing();
    public CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
}
public static class AngleSharp.Diffing.Strategies.ElementStrategies.IgnoreAttributesElementComparer : object {
    [NullableAttribute("1")]
private static string DIFF_IGNORE_ATTRIBUTES_ATTRIBUTE;
    public static CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
    private static bool ControlHasTruthyIgnoreAttributesAttribute(Comparison& comparison);
}
public static class AngleSharp.Diffing.Strategies.ElementStrategies.IgnoreChildrenElementComparer : object {
    [NullableAttribute("1")]
private static string DIFF_IGNORE_CHILDREN_ATTRIBUTE;
    public static CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
    private static bool ControlHasTruthyIgnoreChildrenAttribute(Comparison& comparison);
}
public static class AngleSharp.Diffing.Strategies.ElementStrategies.IgnoreElementComparer : object {
    [NullableAttribute("1")]
private static string DIFF_IGNORE_ATTRIBUTE;
    public static CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
    private static bool ControlHasTruthyIgnoreAttribute(Comparison& comparison);
}
public class AngleSharp.Diffing.Strategies.FilterStrategy`1 : MulticastDelegate {
    public FilterStrategy`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual FilterDecision Invoke(TSource& modreq(System.Runtime.InteropServices.InAttribute) source, FilterDecision currentDecision);
    public virtual IAsyncResult BeginInvoke(TSource& modreq(System.Runtime.InteropServices.InAttribute) source, FilterDecision currentDecision, AsyncCallback callback, object object);
    public virtual FilterDecision EndInvoke(TSource& modreq(System.Runtime.InteropServices.InAttribute) source, IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Diffing.Strategies.IDiffingStrategyCollection {
    public abstract virtual IDiffingStrategyCollection AddComparer(CompareStrategy`1<AttributeComparison> compareStrategy, StrategyType strategyType);
    public abstract virtual IDiffingStrategyCollection AddComparer(CompareStrategy`1<Comparison> compareStrategy, StrategyType strategyType);
    public abstract virtual IDiffingStrategyCollection AddFilter(FilterStrategy`1<AttributeComparisonSource> filterStrategy, StrategyType strategyType);
    public abstract virtual IDiffingStrategyCollection AddFilter(FilterStrategy`1<ComparisonSource> filterStrategy, StrategyType strategyType);
    public abstract virtual IDiffingStrategyCollection AddMatcher(MatchStrategy`2<SourceCollection, Comparison> matchStrategy, StrategyType strategyType);
    public abstract virtual IDiffingStrategyCollection AddMatcher(MatchStrategy`2<SourceMap, AttributeComparison> matchStrategy, StrategyType strategyType);
}
public class AngleSharp.Diffing.Strategies.MatchStrategy`2 : MulticastDelegate {
    public MatchStrategy`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<TComparison> Invoke(IDiffContext context, TSources controlSources, TSources testSources);
    public virtual IAsyncResult BeginInvoke(IDiffContext context, TSources controlSources, TSources testSources, AsyncCallback callback, object object);
    public virtual IEnumerable`1<TComparison> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Diffing.Strategies.NodeStrategies.ForwardSearchingNodeMatcher : object {
    [IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.NodeStrategies.ForwardSearchingNodeMatcher/<Match>d__0")]
public static IEnumerable`1<Comparison> Match(IDiffContext context, SourceCollection controlSources, SourceCollection testSources);
    private static Nullable`1<Comparison> TryFindMatchingNodes(ComparisonSource& control, SourceCollection testSources, int startIndex);
}
public static class AngleSharp.Diffing.Strategies.NodeStrategies.OneToOneNodeMatcher : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("AngleSharp.Diffing.Strategies.NodeStrategies.OneToOneNodeMatcher/<Match>d__0")]
public static IEnumerable`1<Comparison> Match(IDiffContext context, SourceCollection controlSources, SourceCollection testSources);
}
public enum AngleSharp.Diffing.Strategies.StrategyType : Enum {
    public int value__;
    public static StrategyType Generalized;
    public static StrategyType Specialized;
}
public static class AngleSharp.Diffing.Strategies.TextNodeStrategies.StyleSheetTextNodeComparer : object {
    public static CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
    [NullableContextAttribute("2")]
private static bool TryGetStyleDeclaretions(Comparison& comparison, IStyleSheet& controlStyles, IStyleSheet& testStyles);
    [NullableContextAttribute("1")]
private static CompareResult Compare(Comparison& comparison, IStyleSheet controlStyles, IStyleSheet testStyles);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Strategies.TextNodeStrategies.TextNodeComparer : object {
    private static String[] DefaultPreserveElement;
    private static string WHITESPACE_ATTR_NAME;
    private static string IGNORECASE_ATTR_NAME;
    private static string REGEX_ATTR_NAME;
    private static Regex WhitespaceReplace;
    [CompilerGeneratedAttribute]
private WhitespaceOption <Whitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    public WhitespaceOption Whitespace { get; }
    public bool IgnoreCase { get; }
    public TextNodeComparer(WhitespaceOption option, bool ignoreCase);
    private static TextNodeComparer();
    [CompilerGeneratedAttribute]
public WhitespaceOption get_Whitespace();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    public CompareResult Compare(Comparison& comparison, CompareResult currentDecision);
    private CompareResult Compare(Comparison& comparison, IText controlTextNode, IText testTextNode);
    private static CompareResult PerformRegexCompare(Comparison& comparison, StringComparison compareMethod, string controlText, string testText);
    private static CompareResult PerformStringCompare(Comparison& comparison, StringComparison compareMethod, string controlText, string testText);
    private static bool GetIsRegexComparison(IText controlTextNode);
    private WhitespaceOption GetWhitespaceOption(IText textNode);
    private StringComparison GetCompareMethod(IText controlTextNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Diffing.Strategies.TextNodeStrategies.TextNodeFilter : object {
    private static string PRE_ELEMENTNAME;
    private static string SCRIPT_ELEMENTNAME;
    private static string STYLE_ELEMENTNAME;
    private static string WHITESPACE_ATTR_NAME;
    [CompilerGeneratedAttribute]
private WhitespaceOption <Whitespace>k__BackingField;
    public WhitespaceOption Whitespace { get; }
    public TextNodeFilter(WhitespaceOption option);
    [CompilerGeneratedAttribute]
public WhitespaceOption get_Whitespace();
    public FilterDecision Filter(ComparisonSource& source, FilterDecision currentDecision);
    private FilterDecision Filter(IText textNode);
    private WhitespaceOption GetWhitespaceOption(IText textNode);
}
public enum AngleSharp.Diffing.Strategies.TextNodeStrategies.WhitespaceOption : Enum {
    public int value__;
    public static WhitespaceOption Preserve;
    public static WhitespaceOption RemoveWhitespaceNodes;
    public static WhitespaceOption Normalize;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
