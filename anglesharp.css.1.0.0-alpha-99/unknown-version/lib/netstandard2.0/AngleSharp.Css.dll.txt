[ExtensionAttribute]
public static class AngleSharp.Css.BrowsingContextExtensions : object {
    [ExtensionAttribute]
public static Task`1<IStyleSheet> OpenStyleSheetAsync(IBrowsingContext context, Url address, IElement element);
    [AsyncStateMachineAttribute("AngleSharp.Css.BrowsingContextExtensions/<OpenStyleSheetAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IStyleSheet> OpenStyleSheetAsync(IBrowsingContext context, Url address, IElement element, CancellationToken cancel);
    [ExtensionAttribute]
internal static DeclarationInfo GetDeclarationInfo(IBrowsingContext context, string propertyName);
    [ExtensionAttribute]
internal static ICssProperty CreateShorthand(IBrowsingContext context, string name, ICssValue[] longhands, bool important);
    [ExtensionAttribute]
internal static ICssProperty[] CreateLonghands(IBrowsingContext context, ICssProperty shorthand);
    [ExtensionAttribute]
internal static CssProperty CreateProperty(IBrowsingContext context, string propertyName);
    [ExtensionAttribute]
private static bool AllowsDeclaration(IBrowsingContext context, DeclarationInfo info);
    [ExtensionAttribute]
private static bool IsAllowingUnknownDeclarations(IBrowsingContext context);
    [ExtensionAttribute]
private static ICssProperty[] CreateProperties(IDeclarationFactory factory, String[] names, ICssValue[] values, bool important);
}
internal class AngleSharp.Css.Converters.AnyValueConverter : object {
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.ClassValueConverter`1 : object {
    private Func`2<StringSource, T> _converter;
    public ClassValueConverter`1(Func`2<StringSource, T> converter);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.CounterValueConverter : object {
    private static CounterValue[] NoneValue;
    private int _defaultValue;
    public CounterValueConverter(int defaultValue);
    private static CounterValueConverter();
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.DictionaryValueConverter`1 : object {
    private IDictionary`2<string, T> _values;
    public DictionaryValueConverter`1(IDictionary`2<string, T> values);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.IdentifierValueConverter : object {
    private Func`2<StringSource, string> _check;
    public IdentifierValueConverter(Func`2<StringSource, string> check);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.IdentifierValueConverter`1 : object {
    private string _identifier;
    private T _result;
    public IdentifierValueConverter`1(string identifier, T result);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.ListValueConverter : object {
    private IValueConverter _converter;
    public ListValueConverter(IValueConverter converter);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.OneOrMoreValueConverter : object {
    private IValueConverter _converter;
    private int _minimum;
    private int _maximum;
    private string _separator;
    public OneOrMoreValueConverter(IValueConverter converter, int minimum, int maximum, string separator);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.OptionValueConverter : object {
    private IValueConverter _converter;
    private ICssValue _defaultValue;
    public OptionValueConverter(IValueConverter converter, ICssValue defaultValue);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.OrderedOptionsConverter : object {
    private IValueConverter[] _converters;
    public OrderedOptionsConverter(IValueConverter[] converters);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.OrValueConverter : object {
    private IValueConverter[] _converters;
    public OrValueConverter(IValueConverter[] converters);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.PeriodicValueConverter : object {
    private IValueConverter _converter;
    public PeriodicValueConverter(IValueConverter converter);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.RadiusValueConverter : object {
    private IValueConverter _converter;
    public RadiusValueConverter(IValueConverter converter);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.SeparatedEnumsConverter : object {
    private IValueConverter[] _converters;
    private char _seperator;
    public SeparatedEnumsConverter(IValueConverter[] converters, char seperator);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.SeparatorConverter : object {
    private IValueConverter _converter;
    private char _seperator;
    public SeparatorConverter(IValueConverter converter, char seperator);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.StandardValueConverter : object {
    private ICssValue _defaultValue;
    public StandardValueConverter(ICssValue defaultValue);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.StructValueConverter`1 : object {
    private Func`2<StringSource, Nullable`1<T>> _converter;
    public StructValueConverter`1(Func`2<StringSource, Nullable`1<T>> converter);
    public sealed virtual ICssValue Convert(StringSource source);
}
internal class AngleSharp.Css.Converters.UnorderedOptionsConverter : object {
    private IValueConverter[] _converters;
    public UnorderedOptionsConverter(IValueConverter[] converters);
    public sealed virtual ICssValue Convert(StringSource source);
}
[ExtensionAttribute]
internal static class AngleSharp.Css.Converters.ValueConverterExtensions : object {
    [ExtensionAttribute]
public static ICssValue Convert(IValueConverter converter, string value);
    [ExtensionAttribute]
public static IValueConverter Many(IValueConverter converter, int min, int max, string separator);
    [ExtensionAttribute]
public static IValueConverter FromList(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter ToConverter(Dictionary`2<string, T> values);
    [ExtensionAttribute]
public static IValueConverter Periodic(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter Radius(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter Exclusive(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter Option(IValueConverter converter, ICssValue defaultValue);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<T> values, string separator);
}
internal class AngleSharp.Css.CssDefaultStyleSheetProvider : object {
    private ICssStyleSheet _default;
    public static string DefaultSource;
    public ICssStyleSheet Default { get; }
    private static CssDefaultStyleSheetProvider();
    public sealed virtual ICssStyleSheet get_Default();
    public sealed virtual void SetDefault(ICssStyleSheet sheet);
    public sealed virtual void SetDefault(string source);
    public sealed virtual void AppendDefault(string source);
    private static ICssStyleSheet Parse(string source);
}
public static class AngleSharp.Css.CssKeywords : object {
    public static string Distribute;
    public static string Horizontal;
    public static string Vertical;
    public static string Clip;
    public static string Legacy;
    public static string Normal;
    public static string Pre;
    public static string Nowrap;
    public static string Wrap;
    public static string WrapReverse;
    public static string PreWrap;
    public static string PreLine;
    public static string DistributeAllLines;
    public static string DistributeCenterLast;
    public static string InterCluster;
    public static string InterIdeograph;
    public static string InterWord;
    public static string InterCharacter;
    public static string Kashida;
    public static string Newspaper;
    public static string Butt;
    public static string Miter;
    public static string Bevel;
    public static string BreakAll;
    public static string KeepAll;
    public static string BreakWord;
    public static string Important;
    public static string BangImportant;
    public static string Inherit;
    public static string Initial;
    public static string Unset;
    public static string None;
    public static string Auto;
    public static string Mixed;
    public static string AutoFill;
    public static string AutoFit;
    public static string AutoFlow;
    public static string Content;
    public static string MinContent;
    public static string MaxContent;
    public static string Format;
    public static string From;
    public static string To;
    public static string Always;
    public static string Avoid;
    public static string Left;
    public static string Right;
    public static string Footnote;
    public static string Both;
    public static string Forwards;
    public static string Backwards;
    public static string Page;
    public static string Dense;
    public static string Column;
    public static string ColumnReverse;
    public static string Row;
    public static string RowReverse;
    public static string AvoidPage;
    public static string AvoidColumn;
    public static string AvoidRegion;
    public static string Inset;
    public static string Outset;
    public static string Ridge;
    public static string Groove;
    public static string Fixed;
    public static string Local;
    public static string Scroll;
    public static string NoRepeat;
    public static string Repeat;
    public static string RepeatX;
    public static string RepeatY;
    public static string Round;
    public static string Span;
    public static string Space;
    public static string SpaceAround;
    public static string SpaceBetween;
    public static string Stretch;
    public static string Compact;
    public static string Line;
    public static string Inline;
    public static string Block;
    public static string InlineBlock;
    public static string ListItem;
    public static string InlineTable;
    public static string Table;
    public static string TableCaption;
    public static string TableCell;
    public static string TableColumn;
    public static string TableColumnGroup;
    public static string TableFooterGroup;
    public static string TableHeaderGroup;
    public static string TableRow;
    public static string TableRowGroup;
    public static string Flex;
    public static string InlineFlex;
    public static string Grid;
    public static string InlineGrid;
    public static string Visible;
    public static string Hidden;
    public static string Collapse;
    public static string Static;
    public static string Relative;
    public static string Absolute;
    public static string Sticky;
    public static string Serif;
    public static string SansSerif;
    public static string Monospace;
    public static string Cursive;
    public static string Fantasy;
    public static string Caption;
    public static string Icon;
    public static string Menu;
    public static string MessageBox;
    public static string SmallCaption;
    public static string StatusBar;
    public static string Italic;
    public static string Oblique;
    public static string UltraCondensed;
    public static string ExtraCondensed;
    public static string Condensed;
    public static string SemiCondensed;
    public static string SemiExpanded;
    public static string Expanded;
    public static string ExtraExpanded;
    public static string UltraExpanded;
    public static string Bold;
    public static string Bolder;
    public static string Lighter;
    public static string Center;
    public static string FlexStart;
    public static string FlexEnd;
    public static string Justify;
    public static string Underline;
    public static string Overline;
    public static string LineThrough;
    public static string Blink;
    public static string Solid;
    public static string Double;
    public static string Dotted;
    public static string Dashed;
    public static string Wavy;
    public static string Capitalize;
    public static string Uppercase;
    public static string Lowercase;
    public static string FullWidth;
    public static string Baseline;
    public static string Sub;
    public static string Super;
    public static string TextTop;
    public static string TextBottom;
    public static string Middle;
    public static string Top;
    public static string Bottom;
    public static string OpenQuote;
    public static string NoOpenQuote;
    public static string CloseQuote;
    public static string NoCloseQuote;
    public static string Embed;
    public static string Isolate;
    public static string IsolateOverride;
    public static string BidiOverride;
    public static string Plaintext;
    public static string Default;
    public static string ContextMenu;
    public static string Help;
    public static string Pointer;
    public static string Progress;
    public static string Wait;
    public static string Cell;
    public static string Crosshair;
    public static string Text;
    public static string VerticalText;
    public static string Alias;
    public static string Copy;
    public static string Move;
    public static string NoDrop;
    public static string NotAllowed;
    public static string EastResize;
    public static string NorthResize;
    public static string NorthEastResize;
    public static string NorthWestResize;
    public static string SouthResize;
    public static string SouthEastResize;
    public static string SouthWestResize;
    public static string WestResize;
    public static string EastWestResize;
    public static string NorthSouthResize;
    public static string NorthEastSouthWestResize;
    public static string NorthWestSouthEastResize;
    public static string ColResize;
    public static string RowResize;
    public static string AllScroll;
    public static string ZoomIn;
    public static string ZoomOut;
    public static string Grab;
    public static string Grabbing;
    public static string Thin;
    public static string Medium;
    public static string Thick;
    public static string Inside;
    public static string Outside;
    public static string BorderBox;
    public static string PaddingBox;
    public static string ContentBox;
    public static string Reverse;
    public static string Alternate;
    public static string AlternateReverse;
    public static string Ease;
    public static string EaseIn;
    public static string EaseOut;
    public static string EaseInOut;
    public static string Linear;
    public static string StepStart;
    public static string StepEnd;
    public static string Disc;
    public static string Circle;
    public static string Square;
    public static string Decimal;
    public static string DecimalLeadingZero;
    public static string LowerRoman;
    public static string UpperRoman;
    public static string LowerGreek;
    public static string LowerLatin;
    public static string UpperLatin;
    public static string Armenian;
    public static string Georgian;
    public static string LowerAlpha;
    public static string UpperAlpha;
    public static string XxSmall;
    public static string XSmall;
    public static string Small;
    public static string Large;
    public static string XLarge;
    public static string XxLarge;
    public static string XxxLarge;
    public static string Larger;
    public static string Smaller;
    public static string And;
    public static string Or;
    public static string Not;
    public static string Only;
    public static string Show;
    public static string Hide;
    public static string Invert;
    public static string Flat;
    public static string Preserve3d;
    public static string SmallCaps;
    public static string Slice;
    public static string Clone;
    public static string Running;
    public static string Paused;
    public static string Infinite;
    public static string Cover;
    public static string Contain;
    public static string Ltr;
    public static string Rtl;
    public static string All;
    public static string Balance;
    public static string Separate;
    public static string Start;
    public static string End;
    public static string Fill;
    public static string Screen;
    public static string Print;
    public static string Speech;
    public static string StyleSheet;
    public static string Portrait;
    public static string Landscape;
    public static string Progressive;
    public static string Interlace;
    public static string At;
    public static string Color;
    public static string ColorBurn;
    public static string ColorDodge;
    public static string Darken;
    public static string Difference;
    public static string Exclusion;
    public static string HardLight;
    public static string Hue;
    public static string Lighten;
    public static string Luminosity;
    public static string Multiply;
    public static string Overlay;
    public static string Saturation;
    public static string SoftLight;
    public static string Ellipse;
    public static string ClosestSide;
    public static string ClosestCorner;
    public static string FarthestSide;
    public static string FarthestCorner;
    public static string Slow;
    public static string Enabled;
    public static string Disabled;
    public static string InitialOnly;
    public static string Coarse;
    public static string Fine;
    public static string OnDemand;
    public static string Over;
    public static string Under;
    public static string Hover;
    public static string ScaleDown;
    public static string CurrentColor;
    public static string LeftTop;
    public static string RightTop;
    public static string LeftBottom;
    public static string RightBottom;
    public static string Stroke;
    public static string Painted;
    public static string VisibleStroke;
    public static string VisibleFill;
    public static string VisiblePainted;
    public static string Open;
    public static string Closed;
    public static string FitContent;
    public static string X;
    public static string Y;
    public static string Proximity;
    public static string Mandatory;
    private static CssKeywords();
}
public class AngleSharp.Css.CssStylingService : object {
    private sealed virtual override bool AngleSharp.Css.IStylingService.SupportsType(string mimeType);
    [AsyncStateMachineAttribute("AngleSharp.Css.CssStylingService/<ParseStylesheetAsync>d__1")]
public sealed virtual Task`1<IStyleSheet> ParseStylesheetAsync(IResponse response, StyleOptions options, CancellationToken cancel);
}
public class AngleSharp.Css.DeclarationInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICssValue <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Shorthands>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Longhands>k__BackingField;
    public string Name { get; }
    public ICssValue InitialValue { get; }
    public IValueConverter Converter { get; }
    public IValueAggregator Aggregator { get; }
    public PropertyFlags Flags { get; }
    public String[] Shorthands { get; }
    public String[] Longhands { get; }
    public DeclarationInfo(string name, IValueConverter converter, PropertyFlags flags, ICssValue initialValue, String[] shorthands, String[] longhands);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ICssValue get_InitialValue();
    [CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public IValueAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
public PropertyFlags get_Flags();
    [CompilerGeneratedAttribute]
public String[] get_Shorthands();
    [CompilerGeneratedAttribute]
public String[] get_Longhands();
}
[ExtensionAttribute]
internal static class AngleSharp.Css.DeclarationInfoExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetMappings(DeclarationInfo info);
    [ExtensionAttribute]
public static ICssValue Collapse(DeclarationInfo info, IDeclarationFactory factory, ICssValue[] longhands);
    [ExtensionAttribute]
public static ICssValue[] Expand(DeclarationInfo info, IDeclarationFactory factory, ICssValue value);
}
internal static class AngleSharp.Css.Declarations.AlignContentDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AlignContentDeclaration();
}
internal static class AngleSharp.Css.Declarations.AlignItemsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AlignItemsDeclaration();
}
internal static class AngleSharp.Css.Declarations.AlignSelfDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AlignSelfDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static AnimationDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationDelayDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationDelayDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationDirectionDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationDirectionDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationDurationDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationDurationDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationFillModeDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationFillModeDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationIterationCountDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationIterationCountDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationNameDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationNameDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationPlayStateDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationPlayStateDeclaration();
}
internal static class AngleSharp.Css.Declarations.AnimationTimingFunctionDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static AnimationTimingFunctionDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackfaceVisibilityDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackfaceVisibilityDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundAttachmentDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundAttachmentDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundClipDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundClipDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BackgroundDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundImageDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundImageDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundOriginDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundOriginDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundPositionDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundPositionDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundPositionXDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundPositionXDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundPositionYDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundPositionYDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundRepeatDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundRepeatDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundRepeatXDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundRepeatXDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundRepeatYDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundRepeatYDeclaration();
}
internal static class AngleSharp.Css.Declarations.BackgroundSizeDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BackgroundSizeDeclaration();
}
internal static class AngleSharp.Css.Declarations.BookmarkLabelDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BookmarkLabelDeclaration();
}
internal static class AngleSharp.Css.Declarations.BookmarkLevelDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BookmarkLevelDeclaration();
}
internal static class AngleSharp.Css.Declarations.BookmarkStateDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BookmarkStateDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderBottomColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderBottomColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderBottomDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderBottomDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderBottomLeftRadiusDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderBottomLeftRadiusDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderBottomRightRadiusDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderBottomRightRadiusDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderBottomStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderBottomStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderBottomWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderBottomWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderCollapseDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderCollapseDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderImageDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderImageDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderImageOutsetDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderImageOutsetDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderImageRepeatDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderImageRepeatDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderImageSliceDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderImageSliceDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderImageSourceDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderImageSourceDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderImageWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderImageWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderLeftColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderLeftColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderLeftDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderLeftDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderLeftStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderLeftStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderLeftWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderLeftWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderRadiusDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderRadiusDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderRightColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderRightColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderRightDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderRightDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderRightStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderRightStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderRightWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderRightWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderSpacingDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderSpacingDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderTopColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderTopColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderTopDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderTopDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderTopLeftRadiusDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderTopLeftRadiusDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderTopRightRadiusDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderTopRightRadiusDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderTopStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderTopStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderTopWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BorderTopWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.BorderWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static BorderWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.BottomDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BottomDeclaration();
}
internal static class AngleSharp.Css.Declarations.BoxDecorationBreakDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BoxDecorationBreakDeclaration();
}
internal static class AngleSharp.Css.Declarations.BoxShadowDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BoxShadowDeclaration();
}
internal static class AngleSharp.Css.Declarations.BoxSizingDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BoxSizingDeclaration();
}
internal static class AngleSharp.Css.Declarations.BreakAfterDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BreakAfterDeclaration();
}
internal static class AngleSharp.Css.Declarations.BreakBeforeDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BreakBeforeDeclaration();
}
internal static class AngleSharp.Css.Declarations.BreakInsideDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static BreakInsideDeclaration();
}
internal static class AngleSharp.Css.Declarations.CaptionSideDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static CaptionSideDeclaration();
}
internal static class AngleSharp.Css.Declarations.ClearDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ClearDeclaration();
}
internal static class AngleSharp.Css.Declarations.ClipDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ClipDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnCountDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnCountDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnFillDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnFillDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnGapDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnGapDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnRuleColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnRuleColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnRuleDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static ColumnRuleDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnRuleStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnRuleStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnRuleWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnRuleWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static ColumnsDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnSpanDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnSpanDeclaration();
}
internal static class AngleSharp.Css.Declarations.ColumnWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ColumnWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.ContentDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ContentDeclaration();
}
internal static class AngleSharp.Css.Declarations.ContentVisibilityDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ContentVisibilityDeclaration();
}
internal static class AngleSharp.Css.Declarations.CounterIncrementDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static CounterIncrementDeclaration();
}
internal static class AngleSharp.Css.Declarations.CounterResetDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static CounterResetDeclaration();
}
internal static class AngleSharp.Css.Declarations.CursorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static CursorDeclaration();
}
internal static class AngleSharp.Css.Declarations.DirectionDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static DirectionDeclaration();
}
internal static class AngleSharp.Css.Declarations.DisplayDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static DisplayDeclaration();
}
internal static class AngleSharp.Css.Declarations.EmptyCellsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static EmptyCellsDeclaration();
}
internal static class AngleSharp.Css.Declarations.FillDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FillDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexBasisDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexBasisDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexDirectionDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexDirectionDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexFlowDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexFlowDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexGrowDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexGrowDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexShrinkDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexShrinkDeclaration();
}
internal static class AngleSharp.Css.Declarations.FlexWrapDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FlexWrapDeclaration();
}
internal static class AngleSharp.Css.Declarations.FloatDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FloatDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static FontDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontFamilyDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontFamilyDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontSizeAdjustDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontSizeAdjustDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontSizeDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontSizeDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontStretchDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontStretchDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontVariantDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontVariantDeclaration();
}
internal static class AngleSharp.Css.Declarations.FontWeightDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FontWeightDeclaration();
}
internal static class AngleSharp.Css.Declarations.FootnoteDisplayDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FootnoteDisplayDeclaration();
}
internal static class AngleSharp.Css.Declarations.FootnotePolicyDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static FootnotePolicyDeclaration();
}
internal static class AngleSharp.Css.Declarations.GapDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GapDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridAreaDeclaration : object {
    private static int MaximumGridSize;
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridAreaDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridAutoColumnsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridAutoColumnsDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridAutoFlowDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridAutoFlowDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridAutoRowsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridAutoRowsDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridColumnDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridColumnDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridColumnEndDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridColumnEndDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridColumnGapDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridColumnGapDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridColumnStartDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridColumnStartDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static String[] Longhands;
    public static PropertyFlags Flags;
    private static GridDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridGapDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridGapDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridRowDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridRowDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridRowEndDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridRowEndDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridRowGapDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridRowGapDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridRowStartDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridRowStartDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridTemplateAreasDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridTemplateAreasDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridTemplateColumnsDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridTemplateColumnsDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridTemplateDeclaration : object {
    public static string Name;
    public static String[] Longhands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridTemplateDeclaration();
}
internal static class AngleSharp.Css.Declarations.GridTemplateRowsDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static GridTemplateRowsDeclaration();
}
internal static class AngleSharp.Css.Declarations.HeightDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static HeightDeclaration();
}
internal static class AngleSharp.Css.Declarations.JustifyContentDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static JustifyContentDeclaration();
}
internal static class AngleSharp.Css.Declarations.LeftDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static LeftDeclaration();
}
internal static class AngleSharp.Css.Declarations.LetterSpacingDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static LetterSpacingDeclaration();
}
internal static class AngleSharp.Css.Declarations.LineHeightDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static LineHeightDeclaration();
}
internal static class AngleSharp.Css.Declarations.ListStyleDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static ListStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.ListStyleImageDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ListStyleImageDeclaration();
}
internal static class AngleSharp.Css.Declarations.ListStylePositionDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ListStylePositionDeclaration();
}
internal static class AngleSharp.Css.Declarations.ListStyleTypeDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ListStyleTypeDeclaration();
}
internal static class AngleSharp.Css.Declarations.MarginBottomDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MarginBottomDeclaration();
}
internal static class AngleSharp.Css.Declarations.MarginDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static MarginDeclaration();
}
internal static class AngleSharp.Css.Declarations.MarginLeftDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MarginLeftDeclaration();
}
internal static class AngleSharp.Css.Declarations.MarginRightDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MarginRightDeclaration();
}
internal static class AngleSharp.Css.Declarations.MarginTopDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MarginTopDeclaration();
}
internal static class AngleSharp.Css.Declarations.MaxHeightDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MaxHeightDeclaration();
}
internal static class AngleSharp.Css.Declarations.MaxWidthDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MaxWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.MinHeightDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MinHeightDeclaration();
}
internal static class AngleSharp.Css.Declarations.MinWidthDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static MinWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.ObjectFitDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ObjectFitDeclaration();
}
internal static class AngleSharp.Css.Declarations.ObjectPositionDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ObjectPositionDeclaration();
}
internal static class AngleSharp.Css.Declarations.OpacityDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OpacityDeclaration();
}
internal static class AngleSharp.Css.Declarations.OrderDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OrderDeclaration();
}
internal static class AngleSharp.Css.Declarations.OrphansDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OrphansDeclaration();
}
internal static class AngleSharp.Css.Declarations.OutlineColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OutlineColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.OutlineDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static OutlineDeclaration();
}
internal static class AngleSharp.Css.Declarations.OutlineStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OutlineStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.OutlineWidthDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OutlineWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.OverflowDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OverflowDeclaration();
}
internal static class AngleSharp.Css.Declarations.OverflowWrapDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OverflowWrapDeclaration();
}
internal static class AngleSharp.Css.Declarations.OverflowXDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OverflowXDeclaration();
}
internal static class AngleSharp.Css.Declarations.OverflowYDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static OverflowYDeclaration();
}
internal static class AngleSharp.Css.Declarations.PaddingBottomDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PaddingBottomDeclaration();
}
internal static class AngleSharp.Css.Declarations.PaddingDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static PaddingDeclaration();
}
internal static class AngleSharp.Css.Declarations.PaddingLeftDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PaddingLeftDeclaration();
}
internal static class AngleSharp.Css.Declarations.PaddingRightDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PaddingRightDeclaration();
}
internal static class AngleSharp.Css.Declarations.PaddingTopDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PaddingTopDeclaration();
}
internal static class AngleSharp.Css.Declarations.PageBreakAfterDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PageBreakAfterDeclaration();
}
internal static class AngleSharp.Css.Declarations.PageBreakBeforeDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PageBreakBeforeDeclaration();
}
internal static class AngleSharp.Css.Declarations.PageBreakInsideDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PageBreakInsideDeclaration();
}
internal static class AngleSharp.Css.Declarations.PerspectiveDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PerspectiveDeclaration();
}
internal static class AngleSharp.Css.Declarations.PerspectiveOriginDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PerspectiveOriginDeclaration();
}
internal static class AngleSharp.Css.Declarations.PointerEventsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PointerEventsDeclaration();
}
internal static class AngleSharp.Css.Declarations.PositionDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static PositionDeclaration();
}
internal static class AngleSharp.Css.Declarations.QuotesDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static QuotesDeclaration();
}
internal static class AngleSharp.Css.Declarations.ResizeDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ResizeDeclaration();
}
internal static class AngleSharp.Css.Declarations.RightDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static RightDeclaration();
}
internal static class AngleSharp.Css.Declarations.RowGapDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static RowGapDeclaration();
}
internal static class AngleSharp.Css.Declarations.RubyAlignDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static RubyAlignDeclaration();
}
internal static class AngleSharp.Css.Declarations.RubyOverhangDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static RubyOverhangDeclaration();
}
internal static class AngleSharp.Css.Declarations.RubyPositionDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static RubyPositionDeclaration();
}
internal static class AngleSharp.Css.Declarations.RunningDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static RunningDeclaration();
}
internal static class AngleSharp.Css.Declarations.Scrollbar3dLightColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static Scrollbar3dLightColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarArrowColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarArrowColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarBaseColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarBaseColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarDarkshadowColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarDarkshadowColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarFaceColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarFaceColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarHighlightColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarHighlightColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarShadowColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarShadowColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollbarTrackColorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollbarTrackColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.ScrollSnapTypeDeclaration : object {
    private static ICssValue defaultStrictness;
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ScrollSnapTypeDeclaration();
}
internal static class AngleSharp.Css.Declarations.SrcDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static SrcDeclaration();
}
internal static class AngleSharp.Css.Declarations.StringSetDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StringSetDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeDasharrayDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeDasharrayDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeDashoffsetDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeDashoffsetDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeLinecapDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeLinecapDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeLinejoinDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeLinejoinDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeMiterlimitDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeMiterlimitDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeOpacityDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeOpacityDeclaration();
}
internal static class AngleSharp.Css.Declarations.StrokeWidthDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static StrokeWidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.TableLayoutDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TableLayoutDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextAlignDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextAlignDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextAlignLastDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextAlignLastDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextAnchorDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextAnchorDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextDecorationColorDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextDecorationColorDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextDecorationDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static TextDecorationDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextDecorationLineDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextDecorationLineDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextDecorationStyleDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextDecorationStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextIndentDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextIndentDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextJustifyDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextJustifyDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextShadowDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextShadowDeclaration();
}
internal static class AngleSharp.Css.Declarations.TextTransformDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TextTransformDeclaration();
}
internal static class AngleSharp.Css.Declarations.TopDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TopDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransformDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransformDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransformOriginDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransformOriginDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransformStyleDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransformStyleDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransitionDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    public static String[] Longhands;
    private static TransitionDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransitionDelayDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransitionDelayDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransitionDurationDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransitionDurationDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransitionPropertyDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransitionPropertyDeclaration();
}
internal static class AngleSharp.Css.Declarations.TransitionTimingFunctionDeclaration : object {
    public static string Name;
    public static String[] Shorthands;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static TransitionTimingFunctionDeclaration();
}
internal static class AngleSharp.Css.Declarations.UnicodeBidiDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static UnicodeBidiDeclaration();
}
internal static class AngleSharp.Css.Declarations.UnicodeRangeDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static UnicodeRangeDeclaration();
}
internal static class AngleSharp.Css.Declarations.VerticalAlignDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static VerticalAlignDeclaration();
}
internal static class AngleSharp.Css.Declarations.VisibilityDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static VisibilityDeclaration();
}
internal static class AngleSharp.Css.Declarations.WhiteSpaceDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static WhiteSpaceDeclaration();
}
internal static class AngleSharp.Css.Declarations.WidowsDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static WidowsDeclaration();
}
internal static class AngleSharp.Css.Declarations.WidthDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static WidthDeclaration();
}
internal static class AngleSharp.Css.Declarations.WordBreakDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static WordBreakDeclaration();
}
internal static class AngleSharp.Css.Declarations.WordSpacingDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static WordSpacingDeclaration();
}
internal static class AngleSharp.Css.Declarations.WordWrapDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static WordWrapDeclaration();
}
internal static class AngleSharp.Css.Declarations.ZIndexDeclaration : object {
    public static string Name;
    public static IValueConverter Converter;
    public static ICssValue InitialValue;
    public static PropertyFlags Flags;
    private static ZIndexDeclaration();
}
public class AngleSharp.Css.DefaultDeclarationFactory : object {
    private Dictionary`2<string, DeclarationInfo> _declarations;
    public void Register(string propertyName, DeclarationInfo converter);
    public DeclarationInfo Unregister(string propertyName);
    protected virtual DeclarationInfo CreateDefault(string propertyName);
    public sealed virtual DeclarationInfo Create(string propertyName);
}
public class AngleSharp.Css.DefaultDocumentFunctionFactory : object {
    private Dictionary`2<string, Creator> _creators;
    public void Register(string name, Creator creator);
    public Creator Unregister(string name);
    protected virtual IDocumentFunction CreateDefault(string name, string url);
    public sealed virtual IDocumentFunction Create(string name, string url);
}
public class AngleSharp.Css.DefaultFeatureValidatorFactory : object {
    private Dictionary`2<string, Creator> _creators;
    public void Register(string name, Creator creator);
    public Creator Unregister(string name);
    protected virtual IFeatureValidator CreateDefault(string name);
    public sealed virtual IFeatureValidator Create(string name);
}
public class AngleSharp.Css.DefaultPseudoElementFactory : object {
    private Dictionary`2<string, Creator> _creators;
    public void Register(string type, Creator creator);
    public Creator Unregister(string type);
    protected virtual IPseudoElement CreateDefault(IElement host, string type);
    public sealed virtual IPseudoElement Create(IElement host, string type);
}
public class AngleSharp.Css.DefaultRenderDevice : object {
    [CompilerGeneratedAttribute]
private DeviceCategory <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColorBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeviceHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeviceWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Frequency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInterlaced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScripting>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MonochromeBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Resolution>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ViewPortHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ViewPortWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    public DeviceCategory Category { get; public set; }
    public int ColorBits { get; public set; }
    public int DeviceHeight { get; public set; }
    public int DeviceWidth { get; public set; }
    public int Frequency { get; public set; }
    public bool IsGrid { get; public set; }
    public bool IsInterlaced { get; public set; }
    public bool IsScripting { get; public set; }
    public int MonochromeBits { get; public set; }
    public int Resolution { get; public set; }
    public int ViewPortHeight { get; public set; }
    public int ViewPortWidth { get; public set; }
    public double RenderWidth { get; }
    public double RenderHeight { get; }
    public double FontSize { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DeviceCategory get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(DeviceCategory value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ColorBits();
    [CompilerGeneratedAttribute]
public void set_ColorBits(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DeviceHeight();
    [CompilerGeneratedAttribute]
public void set_DeviceHeight(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DeviceWidth();
    [CompilerGeneratedAttribute]
public void set_DeviceWidth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Frequency();
    [CompilerGeneratedAttribute]
public void set_Frequency(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsGrid();
    [CompilerGeneratedAttribute]
public void set_IsGrid(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInterlaced();
    [CompilerGeneratedAttribute]
public void set_IsInterlaced(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsScripting();
    [CompilerGeneratedAttribute]
public void set_IsScripting(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MonochromeBits();
    [CompilerGeneratedAttribute]
public void set_MonochromeBits(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ViewPortHeight();
    [CompilerGeneratedAttribute]
public void set_ViewPortHeight(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ViewPortWidth();
    [CompilerGeneratedAttribute]
public void set_ViewPortWidth(int value);
    public sealed virtual double get_RenderWidth();
    public sealed virtual double get_RenderHeight();
    [CompilerGeneratedAttribute]
public sealed virtual double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
}
public enum AngleSharp.Css.DeviceCategory : Enum {
    public byte value__;
    public static DeviceCategory Screen;
    public static DeviceCategory Printer;
    public static DeviceCategory Speech;
    public static DeviceCategory Other;
}
internal class AngleSharp.Css.Dom.AndCondition : object {
    private IConditionFunction[] _conditions;
    public AndCondition(IEnumerable`1<IConditionFunction> conditions);
    public sealed virtual bool Check(IRenderDevice device);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public enum AngleSharp.Css.Dom.AnimationDirection : Enum {
    public byte value__;
    public static AnimationDirection Normal;
    public static AnimationDirection Alternate;
    public static AnimationDirection Reverse;
    public static AnimationDirection AlternateReverse;
}
public enum AngleSharp.Css.Dom.AnimationFillStyle : Enum {
    public byte value__;
    public static AnimationFillStyle None;
    public static AnimationFillStyle Forwards;
    public static AnimationFillStyle Backwards;
    public static AnimationFillStyle Both;
}
public enum AngleSharp.Css.Dom.BackgroundAttachment : Enum {
    public byte value__;
    public static BackgroundAttachment Fixed;
    public static BackgroundAttachment Local;
    public static BackgroundAttachment Scroll;
}
public enum AngleSharp.Css.Dom.BackgroundRepeat : Enum {
    public byte value__;
    public static BackgroundRepeat Repeat;
    public static BackgroundRepeat Space;
    public static BackgroundRepeat Round;
    public static BackgroundRepeat NoRepeat;
}
public enum AngleSharp.Css.Dom.BlendMode : Enum {
    public byte value__;
    public static BlendMode Normal;
    public static BlendMode Multiply;
    public static BlendMode Screen;
    public static BlendMode Overlay;
    public static BlendMode Darken;
    public static BlendMode Lighten;
    public static BlendMode ColorDodge;
    public static BlendMode ColorBurn;
    public static BlendMode HardLight;
    public static BlendMode SoftLight;
    public static BlendMode Difference;
    public static BlendMode Exclusion;
    public static BlendMode Hue;
    public static BlendMode Saturation;
    public static BlendMode Color;
    public static BlendMode Luminosity;
}
public enum AngleSharp.Css.Dom.BookmarkState : Enum {
    public int value__;
    public static BookmarkState Open;
    public static BookmarkState Closed;
}
public enum AngleSharp.Css.Dom.BorderRepeat : Enum {
    public byte value__;
    public static BorderRepeat Stretch;
    public static BorderRepeat Repeat;
    public static BorderRepeat Round;
}
public enum AngleSharp.Css.Dom.BoxModel : Enum {
    public byte value__;
    public static BoxModel BorderBox;
    public static BoxModel PaddingBox;
    public static BoxModel ContentBox;
}
public enum AngleSharp.Css.Dom.BreakMode : Enum {
    public byte value__;
    public static BreakMode Auto;
    public static BreakMode Always;
    public static BreakMode Avoid;
    public static BreakMode Left;
    public static BreakMode Right;
    public static BreakMode Page;
    public static BreakMode Column;
    public static BreakMode AvoidPage;
    public static BreakMode AvoidColumn;
    public static BreakMode AvoidRegion;
}
public enum AngleSharp.Css.Dom.ClearMode : Enum {
    public byte value__;
    public static ClearMode None;
    public static ClearMode Left;
    public static ClearMode Right;
    public static ClearMode Both;
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssCharsetRule : CssRule {
    private string _charSet;
    public string CharacterSet { get; public set; }
    internal CssCharsetRule(ICssStyleSheet sheet);
    public sealed virtual string get_CharacterSet();
    public sealed virtual void set_CharacterSet(string value);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.CssComment : object {
    private string _data;
    public string Data { get; }
    public CssComment(string data);
    public sealed virtual string get_Data();
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal abstract class AngleSharp.Css.Dom.CssConditionRule : CssGroupingRule {
    internal CssConditionRule(ICssStyleSheet owner, CssRuleType type);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssCounterStyleRule : CssDeclarationRule {
    [CompilerGeneratedAttribute]
private string <StyleName>k__BackingField;
    public string StyleName { get; public set; }
    internal CssCounterStyleRule(ICssStyleSheet owner);
    [CompilerGeneratedAttribute]
public string get_StyleName();
    [CompilerGeneratedAttribute]
public void set_StyleName(string value);
    protected virtual void ReplaceWith(ICssRule rule);
}
[DefaultMemberAttribute("Item")]
internal abstract class AngleSharp.Css.Dom.CssDeclarationRule : CssRule {
    private List`1<ICssProperty> _declarations;
    private HashSet`1<string> _contained;
    private string _name;
    public string Item { get; }
    public int Length { get; }
    internal CssDeclarationRule(ICssStyleSheet owner, CssRuleType type, string name, HashSet`1<string> contained);
    public sealed virtual string get_Item(string propertyName);
    public sealed virtual int get_Length();
    public sealed virtual ICssProperty GetProperty(string propertyName);
    public sealed virtual string GetPropertyValue(string propertyName);
    public sealed virtual string GetPropertyPriority(string propertyName);
    public sealed virtual void SetProperty(string propertyName, string propertyValue, string priority);
    public sealed virtual string RemoveProperty(string propertyName);
    public sealed virtual IEnumerator`1<ICssProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    private ICssProperty CreateNewProperty(string propertyName);
    protected string GetValue(string propertyName);
    protected void SetValue(string propertyName, string valueText);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssDocumentRule : CssGroupingRule {
    private DocumentFunctions _conditions;
    public string ConditionText { get; public set; }
    public IDocumentFunctions Conditions { get; }
    internal CssDocumentRule(ICssStyleSheet owner);
    public sealed virtual string get_ConditionText();
    public sealed virtual void set_ConditionText(string value);
    public sealed virtual IDocumentFunctions get_Conditions();
    protected virtual void ReplaceWith(ICssRule rule);
    public bool SetConditionText(string value, bool throwOnError);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssFontFaceRule : CssDeclarationRule {
    private static HashSet`1<string> ContainedProperties;
    internal string FontFamily { get; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Family { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Source { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Style { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Weight { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Stretch { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Range { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Variant { get; private set; }
    private string AngleSharp.Css.Dom.ICssFontFaceRule.Features { get; private set; }
    internal CssFontFaceRule(ICssStyleSheet owner);
    private static CssFontFaceRule();
    internal string get_FontFamily();
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Family();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Family(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Source();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Source(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Style();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Style(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Weight();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Weight(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Stretch();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Stretch(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Range();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Range(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Variant();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Variant(string value);
    private sealed virtual override string AngleSharp.Css.Dom.ICssFontFaceRule.get_Features();
    private sealed virtual override void AngleSharp.Css.Dom.ICssFontFaceRule.set_Features(string value);
    protected virtual void ReplaceWith(ICssRule rule);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssFontFeatureValuesRule : CssDeclarationRule {
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    public string FamilyName { get; public set; }
    internal CssFontFeatureValuesRule(ICssStyleSheet owner);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    protected virtual void ReplaceWith(ICssRule rule);
}
internal abstract class AngleSharp.Css.Dom.CssGroupingRule : CssRule {
    private CssRuleList _rules;
    public ICssRuleList Rules { get; }
    internal CssGroupingRule(ICssStyleSheet owner, CssRuleType type);
    public sealed virtual ICssRuleList get_Rules();
    protected virtual void ReplaceWith(ICssRule rule);
    protected void ReplaceWith(IEnumerable`1<ICssRule> rules);
    public sealed virtual int Insert(string ruleText, int index);
    public sealed virtual void RemoveAt(int index);
    public void Add(ICssRule rule);
    public void Remove(ICssRule rule);
}
[ExtensionAttribute]
[DomNameAttribute("CSS")]
[DomExposedAttribute("Window")]
public static class AngleSharp.Css.Dom.CssHelpers : object {
    [DomNameAttribute("escape")]
public static string Escape(string str);
    [ExtensionAttribute]
[DomNameAttribute("supports")]
public static bool Supports(IWindow window, string propertyName, string value);
    [ExtensionAttribute]
[DomNameAttribute("supports")]
public static bool Supports(IWindow window, string conditionText);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssImportRule : CssRule {
    private MediaList _media;
    private string _href;
    private ICssStyleSheet _styleSheet;
    public string Href { get; public set; }
    private IMediaList AngleSharp.Css.Dom.ICssImportRule.Media { get; }
    public MediaList Media { get; }
    public ICssStyleSheet Sheet { get; public set; }
    internal CssImportRule(ICssStyleSheet owner);
    public sealed virtual string get_Href();
    public void set_Href(string value);
    private sealed virtual override IMediaList AngleSharp.Css.Dom.ICssImportRule.get_Media();
    public MediaList get_Media();
    public sealed virtual ICssStyleSheet get_Sheet();
    public void set_Sheet(ICssStyleSheet value);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssKeyframeRule : CssRule {
    private CssStyleDeclaration _style;
    private IKeyframeSelector _selector;
    public string KeyText { get; public set; }
    public IKeyframeSelector Key { get; }
    private ICssStyleDeclaration AngleSharp.Css.Dom.ICssKeyframeRule.Style { get; }
    public CssStyleDeclaration Style { get; }
    internal CssKeyframeRule(ICssStyleSheet owner);
    public sealed virtual string get_KeyText();
    public sealed virtual void set_KeyText(string value);
    public sealed virtual IKeyframeSelector get_Key();
    private sealed virtual override ICssStyleDeclaration AngleSharp.Css.Dom.ICssKeyframeRule.get_Style();
    public CssStyleDeclaration get_Style();
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssKeyframesRule : CssGroupingRule {
    private string _name;
    public string Name { get; public set; }
    internal CssKeyframesRule(ICssStyleSheet owner);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual void Add(string ruleText);
    public sealed virtual void Remove(string key);
    public sealed virtual ICssKeyframeRule Find(string key);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.CssMediaQueryList : EventTarget {
    private IMediaList _media;
    private bool _matched;
    public string MediaText { get; }
    public IMediaList Media { get; }
    public bool IsMatched { get; }
    public CssMediaQueryList(IWindow window, IMediaList media);
    public sealed virtual void add_Changed(DomEventHandler value);
    public sealed virtual void remove_Changed(DomEventHandler value);
    public sealed virtual string get_MediaText();
    public sealed virtual IMediaList get_Media();
    public sealed virtual bool get_IsMatched();
    private bool ComputeMatched(IWindow window);
    private void Resized(object sender, Event ev);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssMediaRule : CssConditionRule {
    private MediaList _media;
    public string ConditionText { get; public set; }
    private IMediaList AngleSharp.Css.Dom.ICssMediaRule.Media { get; }
    public MediaList Media { get; }
    internal CssMediaRule(ICssStyleSheet owner);
    public sealed virtual string get_ConditionText();
    public sealed virtual void set_ConditionText(string value);
    private sealed virtual override IMediaList AngleSharp.Css.Dom.ICssMediaRule.get_Media();
    public MediaList get_Media();
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public class AngleSharp.Css.Dom.CssMedium : object {
    private List`1<IMediaFeature> _features;
    private string _type;
    private bool _exclusive;
    private bool _inverse;
    private string _connector;
    public IEnumerable`1<IMediaFeature> Features { get; }
    public string Type { get; }
    public string Connector { get; }
    public bool IsExclusive { get; }
    public bool IsInverse { get; }
    public string Constraints { get; }
    public CssMedium(string type, bool inverse, bool exclusive);
    public CssMedium(string type, bool inverse, bool exclusive, IEnumerable`1<IMediaFeature> features, string connector);
    public sealed virtual IEnumerable`1<IMediaFeature> get_Features();
    public sealed virtual string get_Type();
    public string get_Connector();
    public sealed virtual bool get_IsExclusive();
    public sealed virtual bool get_IsInverse();
    public sealed virtual string get_Constraints();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssNamespaceRule : CssRule {
    private string _namespaceUri;
    private string _prefix;
    public string NamespaceUri { get; public set; }
    public string Prefix { get; public set; }
    internal CssNamespaceRule(ICssStyleSheet owner);
    public sealed virtual string get_NamespaceUri();
    public sealed virtual void set_NamespaceUri(string value);
    public sealed virtual string get_Prefix();
    public sealed virtual void set_Prefix(string value);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    private static bool IsNotSupported(CssRuleType type);
    private void CheckValidity();
}
[ExtensionAttribute]
public static class AngleSharp.Css.Dom.CssOmExtensions : object {
    [ExtensionAttribute]
public static ICssStyleRule GetStyleRuleWith(ICssGroupingRule rule, string selectorText);
    [ExtensionAttribute]
public static ICssStyleRule GetStyleRuleWith(ICssStyleSheet sheet, string selectorText);
    [ExtensionAttribute]
public static ICssStyleRule GetStyleRuleWith(ICssRuleList rules, string selectorText, IBrowsingContext context);
    [ExtensionAttribute]
public static ICssValue GetValueOf(ICssStyleRule rule, string propertyName);
    [ExtensionAttribute]
public static ICssStyleDeclaration Compute(ICssStyleDeclaration style, IRenderDevice device);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssPageRule : CssRule {
    private CssStyleDeclaration _style;
    private ISelector _selector;
    public string SelectorText { get; public set; }
    public ISelector Selector { get; }
    private ICssStyleDeclaration AngleSharp.Css.Dom.ICssPageRule.Style { get; }
    public CssStyleDeclaration Style { get; }
    internal CssPageRule(ICssStyleSheet owner);
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    public sealed virtual ISelector get_Selector();
    private sealed virtual override ICssStyleDeclaration AngleSharp.Css.Dom.ICssPageRule.get_Style();
    public CssStyleDeclaration get_Style();
    internal void SetInvalidSelector(string selectorText);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.CssProperty : object {
    private PropertyFlags _flags;
    private string _name;
    private IValueConverter _converter;
    private bool _important;
    private ICssValue _value;
    public ICssValue RawValue { get; public set; }
    public string Value { get; public set; }
    public bool HasValue { get; }
    public bool IsInherited { get; }
    public bool CanBeInherited { get; }
    public bool IsAnimatable { get; }
    public bool IsInitial { get; }
    public bool IsShorthand { get; }
    public string Name { get; }
    public bool IsImportant { get; public set; }
    public string CssText { get; }
    internal bool CanBeHashless { get; }
    internal bool CanBeUnitless { get; }
    internal IValueConverter Converter { get; }
    internal CssProperty(string name, IValueConverter converter, PropertyFlags flags, ICssValue value, bool important);
    public sealed virtual ICssValue get_RawValue();
    public void set_RawValue(ICssValue value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public bool get_HasValue();
    public sealed virtual bool get_IsInherited();
    public sealed virtual bool get_CanBeInherited();
    public sealed virtual bool get_IsAnimatable();
    public sealed virtual bool get_IsInitial();
    public sealed virtual bool get_IsShorthand();
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsImportant();
    public sealed virtual void set_IsImportant(bool value);
    public string get_CssText();
    internal bool get_CanBeHashless();
    internal bool get_CanBeUnitless();
    internal IValueConverter get_Converter();
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.CssPseudoElement : object {
    private IPseudoElement _host;
    private string _type;
    private ICssStyleDeclaration _style;
    private string AngleSharp.Css.Dom.ICssPseudoElement.Type { get; }
    private ICssStyleDeclaration AngleSharp.Css.Dom.ICssPseudoElement.Style { get; }
    public CssPseudoElement(IPseudoElement host, string type, ICssStyleDeclaration style);
    private sealed virtual override string AngleSharp.Css.Dom.ICssPseudoElement.get_Type();
    private sealed virtual override ICssStyleDeclaration AngleSharp.Css.Dom.ICssPseudoElement.get_Style();
    private sealed virtual override void AngleSharp.Dom.IEventTarget.AddEventListener(string type, DomEventHandler callback, bool capture);
    private sealed virtual override bool AngleSharp.Dom.IEventTarget.Dispatch(Event ev);
    private sealed virtual override void AngleSharp.Dom.IEventTarget.InvokeEventListener(Event ev);
    private sealed virtual override void AngleSharp.Dom.IEventTarget.RemoveEventListener(string type, DomEventHandler callback, bool capture);
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Css.Dom.CssPseudoElementList : object {
    private ICssPseudoElement[] _elements;
    public ICssPseudoElement Item { get; }
    public ICssPseudoElement Item { get; }
    public int Length { get; }
    public CssPseudoElementList(IEnumerable`1<ICssPseudoElement> elements);
    public sealed virtual ICssPseudoElement get_Item(int index);
    public sealed virtual ICssPseudoElement get_Item(string type);
    public sealed virtual int get_Length();
}
internal abstract class AngleSharp.Css.Dom.CssRule : object {
    private CssRuleType _type;
    private ICssStyleSheet _owner;
    private ICssRule _parent;
    public string CssText { get; public set; }
    public ICssRule Parent { get; public set; }
    public ICssStyleSheet Owner { get; public set; }
    public CssRuleType Type { get; }
    public ICssParser Parser { get; }
    internal CssRule(ICssStyleSheet owner, CssRuleType type);
    public sealed virtual string get_CssText();
    public sealed virtual void set_CssText(string value);
    public sealed virtual ICssRule get_Parent();
    public void set_Parent(ICssRule value);
    public sealed virtual ICssStyleSheet get_Owner();
    public void set_Owner(ICssStyleSheet value);
    public sealed virtual CssRuleType get_Type();
    public ICssParser get_Parser();
    public sealed virtual void SetParent(ICssRule rule);
    public sealed virtual void SetOwner(ICssStyleSheet sheet);
    public abstract virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    protected abstract virtual void ReplaceWith(ICssRule rule);
    protected ISelector ParseSelector(string selectorText);
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Css.Dom.CssRuleList : object {
    private List`1<ICssRule> _rules;
    public ICssRule Item { get; }
    public bool HasDeclarativeRules { get; }
    public int Length { get; }
    public sealed virtual ICssRule get_Item(int index);
    public bool get_HasDeclarativeRules();
    public sealed virtual int get_Length();
    public void Clear();
    public void RemoveAt(int index);
    public void Remove(ICssRule rule);
    public void Insert(int index, ICssRule rule);
    public void Add(ICssRule rule);
    public void AddRange(IEnumerable`1<ICssRule> rules);
    public sealed virtual IEnumerator`1<ICssRule> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static bool IsDeclarativeRule(ICssRule rule);
}
[DomNameAttribute("CSSRule")]
public enum AngleSharp.Css.Dom.CssRuleType : Enum {
    public byte value__;
    public static CssRuleType Unknown;
    [DomNameAttribute("STYLE_RULE")]
public static CssRuleType Style;
    [DomNameAttribute("CHARSET_RULE")]
public static CssRuleType Charset;
    [DomNameAttribute("IMPORT_RULE")]
public static CssRuleType Import;
    [DomNameAttribute("MEDIA_RULE")]
public static CssRuleType Media;
    [DomNameAttribute("FONT_FACE_RULE")]
public static CssRuleType FontFace;
    [DomNameAttribute("PAGE_RULE")]
public static CssRuleType Page;
    [DomNameAttribute("KEYFRAMES_RULE")]
public static CssRuleType Keyframes;
    [DomNameAttribute("KEYFRAME_RULE")]
public static CssRuleType Keyframe;
    [DomNameAttribute("NAMESPACE_RULE")]
public static CssRuleType Namespace;
    [DomNameAttribute("COUNTER_STYLE_RULE")]
public static CssRuleType CounterStyle;
    [DomNameAttribute("SUPPORTS_RULE")]
public static CssRuleType Supports;
    [DomNameAttribute("DOCUMENT_RULE")]
public static CssRuleType Document;
    [DomNameAttribute("FONT_FEATURE_VALUES_RULE")]
public static CssRuleType FontFeatureValues;
    [DomNameAttribute("VIEWPORT_RULE")]
public static CssRuleType Viewport;
    [DomNameAttribute("REGION_STYLE_RULE")]
public static CssRuleType RegionStyle;
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Css.Dom.CssStyleDeclaration : object {
    private List`1<ICssProperty> _declarations;
    private IBrowsingContext _context;
    private ICssRule _parent;
    private bool _updating;
    [CompilerGeneratedAttribute]
private Action`1<string> Changed;
    public string Item { get; }
    public string Item { get; }
    public IEnumerable`1<ICssProperty> Declarations { get; }
    public string CssText { get; public set; }
    public bool IsReadOnly { get; }
    public int Length { get; }
    public ICssRule Parent { get; }
    public CssStyleDeclaration(IBrowsingContext context);
    public CssStyleDeclaration(ICssRule parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(Action`1<string> value);
    public sealed virtual string get_Item(int index);
    public sealed virtual string get_Item(string name);
    public IEnumerable`1<ICssProperty> get_Declarations();
    public sealed virtual string get_CssText();
    public sealed virtual void set_CssText(string value);
    public bool get_IsReadOnly();
    public sealed virtual int get_Length();
    public sealed virtual ICssRule get_Parent();
    public sealed virtual ICssProperty GetProperty(string name);
    public sealed virtual void SetParent(ICssRule parent);
    public sealed virtual void Update(string value);
    private ICssProperty TryCreateShorthand(string shorthandName, IEnumerable`1<string> serialized, List`1<string> usedProperties, bool force);
    public string ToCssBlock(IStyleFormatter formatter);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string RemoveProperty(string propertyName);
    public sealed virtual string GetPropertyPriority(string propertyName);
    public sealed virtual string GetPropertyValue(string propertyName);
    public void SetPropertyValue(string propertyName, string propertyValue);
    public void SetPropertyPriority(string propertyName, string priority);
    public sealed virtual void SetProperty(string propertyName, string propertyValue, string priority);
    internal void SetDeclarations(IEnumerable`1<ICssProperty> decls);
    internal void UpdateDeclarations(IEnumerable`1<ICssProperty> decls);
    private ICssProperty GetPropertyShorthand(string name);
    private ICssProperty CreateProperty(string propertyName);
    private void SetProperty(ICssProperty property);
    private void RemovePropertyByName(string propertyName);
    private void ChangeDeclarations(IEnumerable`1<ICssProperty> decls, Predicate`1<ICssProperty> defaultSkip, Func`3<ICssProperty, ICssProperty, bool> removeExisting);
    private void SetLonghand(ICssProperty property);
    private void SetShorthand(ICssProperty shorthand);
    private void RaiseChanged();
    public sealed virtual IEnumerator`1<ICssProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssStyleRule : CssRule {
    private CssStyleDeclaration _style;
    private ISelector _selector;
    public ISelector Selector { get; }
    public string SelectorText { get; public set; }
    private ICssStyleDeclaration AngleSharp.Css.Dom.ICssStyleRule.Style { get; }
    public CssStyleDeclaration Style { get; }
    internal CssStyleRule(ICssStyleSheet owner);
    public sealed virtual ISelector get_Selector();
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    private sealed virtual override ICssStyleDeclaration AngleSharp.Css.Dom.ICssStyleRule.get_Style();
    public CssStyleDeclaration get_Style();
    internal void SetInvalidSelector(string selectorText);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.CssStyleSheet : object {
    private IBrowsingContext _context;
    private TextSource _source;
    private MediaList _media;
    private CssRuleList _rules;
    private ICssStyleSheet _parent;
    private ICssRule _owner;
    private IElement _element;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    public string Type { get; }
    public string Title { get; }
    public IMediaList Media { get; }
    public ICssRuleList Rules { get; }
    public IBrowsingContext Context { get; }
    public TextSource Source { get; }
    public bool IsDisabled { get; public set; }
    public IElement OwnerNode { get; }
    public ICssStyleSheet Parent { get; }
    public ICssRule OwnerRule { get; }
    public string Href { get; public set; }
    internal CssStyleSheet(IBrowsingContext context, TextSource source);
    public sealed virtual string get_Type();
    public sealed virtual string get_Title();
    public sealed virtual IMediaList get_Media();
    public sealed virtual ICssRuleList get_Rules();
    public sealed virtual IBrowsingContext get_Context();
    public sealed virtual TextSource get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDisabled(bool value);
    public sealed virtual IElement get_OwnerNode();
    public sealed virtual ICssStyleSheet get_Parent();
    public sealed virtual ICssRule get_OwnerRule();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public void Add(ICssRule rule);
    public void Remove(ICssRule rule);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Insert(string ruleText, int index);
    public sealed virtual void SetOwner(ICssRule rule);
    public sealed virtual void SetParent(ICssStyleSheet parent);
    public sealed virtual void SetOwner(IElement element);
    public sealed virtual string LocateNamespace(string prefix);
}
[DebuggerDisplayAttribute("")]
internal class AngleSharp.Css.Dom.CssSupportsRule : CssConditionRule {
    private IConditionFunction _condition;
    public string ConditionText { get; public set; }
    public IConditionFunction Condition { get; }
    internal CssSupportsRule(ICssStyleSheet owner);
    public sealed virtual string get_ConditionText();
    public sealed virtual void set_ConditionText(string value);
    public sealed virtual IConditionFunction get_Condition();
    public bool SetConditionText(string value, bool throwOnError);
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.CssUnknownRule : CssRule {
    private string _name;
    private TextView _content;
    public string Name { get; }
    public TextView Content { get; }
    public CssUnknownRule(ICssStyleSheet owner, string name, TextView content);
    public string get_Name();
    public TextView get_Content();
    protected virtual void ReplaceWith(ICssRule rule);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Dom.CssValueExtensions : object {
    [ExtensionAttribute]
public static double AsDouble(ICssValue value);
    [ExtensionAttribute]
public static double AsPx(ICssValue value, IRenderDimensions renderDimensions, RenderMode mode);
    [ExtensionAttribute]
public static double AsMs(ICssValue value);
    [ExtensionAttribute]
public static double AsHz(ICssValue value);
    [ExtensionAttribute]
public static double AsDeg(ICssValue value);
    [ExtensionAttribute]
public static double AsDpi(ICssValue value);
    [ExtensionAttribute]
public static int AsRgba(ICssValue value);
    [ExtensionAttribute]
public static string AsUrl(ICssValue value);
    [ExtensionAttribute]
public static TransformMatrix AsMatrix(ICssValue value, IRenderDimensions renderDimensions);
    [ExtensionAttribute]
public static int AsInt32(ICssValue value);
    [ExtensionAttribute]
public static bool AsBoolean(ICssValue value);
    [ExtensionAttribute]
public static T AsEnum(ICssValue value);
    [ExtensionAttribute]
public static bool Is(ICssValue value, string keyword);
}
internal class AngleSharp.Css.Dom.CssViewportRule : CssDeclarationRule {
    private static HashSet`1<string> ContainedProperties;
    internal CssViewportRule(ICssStyleSheet owner);
    private static CssViewportRule();
    protected virtual void ReplaceWith(ICssRule rule);
}
internal class AngleSharp.Css.Dom.DeclarationCondition : object {
    private string _name;
    private string _value;
    private IBrowsingContext _context;
    public DeclarationCondition(IBrowsingContext context, string name, string value);
    public sealed virtual bool Check(IRenderDevice device);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    private static string Normalize(string value);
}
public enum AngleSharp.Css.Dom.DisplayMode : Enum {
    public byte value__;
    public static DisplayMode None;
    public static DisplayMode Inline;
    public static DisplayMode Block;
    public static DisplayMode ListItem;
    public static DisplayMode InlineBlock;
    public static DisplayMode InlineTable;
    public static DisplayMode Table;
    public static DisplayMode TableCaption;
    public static DisplayMode TableCell;
    public static DisplayMode TableColumn;
    public static DisplayMode TableColumnGroup;
    public static DisplayMode TableFooterGroup;
    public static DisplayMode TableHeaderGroup;
    public static DisplayMode TableRow;
    public static DisplayMode TableRowGroup;
    public static DisplayMode Flex;
    public static DisplayMode InlineFlex;
    public static DisplayMode Grid;
    public static DisplayMode InlineGrid;
}
internal abstract class AngleSharp.Css.Dom.DocumentFunction : object {
    private string _name;
    private string _data;
    public string Name { get; }
    public string Data { get; }
    internal DocumentFunction(string name, string data);
    public sealed virtual string get_Name();
    public sealed virtual string get_Data();
    public abstract virtual bool Matches(Url url);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Css.Dom.DocumentFunctions : object {
    private List`1<IDocumentFunction> _functions;
    public IDocumentFunction Item { get; }
    public int Length { get; }
    public DocumentFunctions(List`1<IDocumentFunction> functions);
    public sealed virtual IDocumentFunction get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual IEnumerator`1<IDocumentFunction> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(IDocumentFunction function);
    public void Remove(IDocumentFunction function);
    public void Clear();
    public void AddRange(IEnumerable`1<IDocumentFunction> functions);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class AngleSharp.Css.Dom.DomainFunction : DocumentFunction {
    private string _subdomain;
    public DomainFunction(string url);
    public virtual bool Matches(Url url);
}
[ExtensionAttribute]
[DomExposedAttribute("HTMLElement")]
[DomExposedAttribute("SVGElement")]
public static class AngleSharp.Css.Dom.ElementCssInlineStyleExtensions : object {
    private static ConditionalWeakTable`2<IElement, ICssStyleDeclaration> _styles;
    private static ElementCssInlineStyleExtensions();
    [ExtensionAttribute]
[DomNameAttribute("style")]
[DomAccessorAttribute]
public static ICssStyleDeclaration GetStyle(IElement element);
    [ExtensionAttribute]
[DomNameAttribute("style")]
[DomAccessorAttribute]
public static void SetStyle(IElement element, string value);
    [ExtensionAttribute]
internal static void UpdateStyle(IElement element, string value);
    private static ICssStyleDeclaration CreateStyle(IElement element);
    private static ICssStyleDeclaration CreateStyle(IElement element, string source);
}
public class AngleSharp.Css.Dom.Events.CssErrorEvent : Event {
    private CssParseError _code;
    private TextPosition _position;
    public TextPosition Position { get; }
    public int Code { get; }
    public string Message { get; }
    public CssErrorEvent(CssParseError code, TextPosition position);
    public TextPosition get_Position();
    public int get_Code();
    public string get_Message();
}
public class AngleSharp.Css.Dom.Events.CssParseEvent : Event {
    [CompilerGeneratedAttribute]
private ICssStyleSheet <StyleSheet>k__BackingField;
    public ICssStyleSheet StyleSheet { get; private set; }
    public CssParseEvent(ICssStyleSheet styleSheet, bool completed);
    [CompilerGeneratedAttribute]
public ICssStyleSheet get_StyleSheet();
    [CompilerGeneratedAttribute]
private void set_StyleSheet(ICssStyleSheet value);
}
[DomNameAttribute("MediaQueryListEvent")]
public class AngleSharp.Css.Dom.Events.MediaQueryListEvent : Event {
    [CompilerGeneratedAttribute]
private bool <IsMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Media>k__BackingField;
    [DomNameAttribute("matches")]
public bool IsMatch { get; private set; }
    [DomNameAttribute("media")]
public string Media { get; private set; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public MediaQueryListEvent(string type, bool bubbles, bool cancelable, string media, bool matches);
    [CompilerGeneratedAttribute]
public bool get_IsMatch();
    [CompilerGeneratedAttribute]
private void set_IsMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_Media();
    [CompilerGeneratedAttribute]
private void set_Media(string value);
    [DomNameAttribute("initMediaQueryListEvent")]
public void Init(string type, bool bubbles, bool cancelable, string media, bool matches);
}
public enum AngleSharp.Css.Dom.FlexContentMode : Enum {
    public int value__;
    public static FlexContentMode Auto;
    public static FlexContentMode Start;
    public static FlexContentMode End;
    public static FlexContentMode Center;
    public static FlexContentMode SpaceBetween;
    public static FlexContentMode SpaceAround;
    public static FlexContentMode Stretch;
    public static FlexContentMode Baseline;
}
public enum AngleSharp.Css.Dom.FlexDirection : Enum {
    public int value__;
    public static FlexDirection Row;
    public static FlexDirection RowReverse;
    public static FlexDirection Column;
    public static FlexDirection ColumnReverse;
}
public enum AngleSharp.Css.Dom.FlexWrapMode : Enum {
    public int value__;
    public static FlexWrapMode NoWrap;
    public static FlexWrapMode Wrap;
    public static FlexWrapMode WrapReverse;
}
public enum AngleSharp.Css.Dom.Floating : Enum {
    public byte value__;
    public static Floating None;
    public static Floating Left;
    public static Floating Right;
    public static Floating Footnote;
}
public enum AngleSharp.Css.Dom.FontStretch : Enum {
    public byte value__;
    public static FontStretch Normal;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
public enum AngleSharp.Css.Dom.FontStyle : Enum {
    public byte value__;
    public static FontStyle Normal;
    public static FontStyle Italic;
    public static FontStyle Oblique;
}
public enum AngleSharp.Css.Dom.FontVariant : Enum {
    public byte value__;
    public static FontVariant Normal;
    public static FontVariant SmallCaps;
}
public enum AngleSharp.Css.Dom.FontWeight : Enum {
    public byte value__;
    public static FontWeight Normal;
    public static FontWeight Bold;
    public static FontWeight Bolder;
    public static FontWeight Lighter;
}
public enum AngleSharp.Css.Dom.FootnoteDisplay : Enum {
    public int value__;
    public static FootnoteDisplay Block;
    public static FootnoteDisplay Inline;
    public static FootnoteDisplay Compact;
}
public enum AngleSharp.Css.Dom.FootnotePolicy : Enum {
    public int value__;
    public static FootnotePolicy Auto;
    public static FootnotePolicy Line;
    public static FootnotePolicy Block;
}
internal class AngleSharp.Css.Dom.GroupCondition : object {
    private IConditionFunction _content;
    public GroupCondition(IConditionFunction condition);
    public sealed virtual bool Check(IRenderDevice device);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public enum AngleSharp.Css.Dom.HoverAbility : Enum {
    public byte value__;
    public static HoverAbility None;
    public static HoverAbility OnDemand;
    public static HoverAbility Hover;
}
[DomNameAttribute("CaretPosition")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Css.Dom.ICaretPosition {
    [DomNameAttribute("offsetNode")]
public INode Node { get; }
    [DomNameAttribute("offset")]
public int Offset { get; }
    public abstract virtual INode get_Node();
    public abstract virtual int get_Offset();
}
public interface AngleSharp.Css.Dom.IConditionFunction {
    public abstract virtual bool Check(IRenderDevice device);
}
[DomNameAttribute("CSSCharsetRule")]
public interface AngleSharp.Css.Dom.ICssCharsetRule {
    [DomNameAttribute("encoding")]
public string CharacterSet { get; public set; }
    public abstract virtual string get_CharacterSet();
    public abstract virtual void set_CharacterSet(string value);
}
public interface AngleSharp.Css.Dom.ICssComment {
    public string Data { get; }
    public abstract virtual string get_Data();
}
[DomNameAttribute("CSSConditionRule")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Css.Dom.ICssConditionRule {
    [DomNameAttribute("conditionText")]
public string ConditionText { get; public set; }
    public abstract virtual string get_ConditionText();
    public abstract virtual void set_ConditionText(string value);
}
[DomNameAttribute("CSSCounterStyleRule")]
public interface AngleSharp.Css.Dom.ICssCounterStyleRule {
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("system")]
public string System { get; public set; }
    [DomNameAttribute("symbols")]
public string Symbols { get; public set; }
    [DomNameAttribute("additiveSymbols")]
public string AdditiveSymbols { get; public set; }
    [DomNameAttribute("negative")]
public string Negative { get; public set; }
    [DomNameAttribute("prefix")]
public string Prefix { get; public set; }
    [DomNameAttribute("suffix")]
public string Suffix { get; public set; }
    [DomNameAttribute("range")]
public string Range { get; public set; }
    [DomNameAttribute("pad")]
public string Pad { get; public set; }
    [DomNameAttribute("speakAs")]
public string SpeakAs { get; public set; }
    [DomNameAttribute("fallback")]
public string Fallback { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_System();
    public abstract virtual void set_System(string value);
    public abstract virtual string get_Symbols();
    public abstract virtual void set_Symbols(string value);
    public abstract virtual string get_AdditiveSymbols();
    public abstract virtual void set_AdditiveSymbols(string value);
    public abstract virtual string get_Negative();
    public abstract virtual void set_Negative(string value);
    public abstract virtual string get_Prefix();
    public abstract virtual void set_Prefix(string value);
    public abstract virtual string get_Suffix();
    public abstract virtual void set_Suffix(string value);
    public abstract virtual string get_Range();
    public abstract virtual void set_Range(string value);
    public abstract virtual string get_Pad();
    public abstract virtual void set_Pad(string value);
    public abstract virtual string get_SpeakAs();
    public abstract virtual void set_SpeakAs(string value);
    public abstract virtual string get_Fallback();
    public abstract virtual void set_Fallback(string value);
}
[DomNameAttribute("CSSDocumentRule")]
public interface AngleSharp.Css.Dom.ICssDocumentRule {
    public IDocumentFunctions Conditions { get; }
    public abstract virtual IDocumentFunctions get_Conditions();
}
[DomNameAttribute("CSSFontFaceRule")]
public interface AngleSharp.Css.Dom.ICssFontFaceRule {
    [DomNameAttribute("family")]
public string Family { get; public set; }
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("style")]
public string Style { get; public set; }
    [DomNameAttribute("weight")]
public string Weight { get; public set; }
    [DomNameAttribute("stretch")]
public string Stretch { get; public set; }
    [DomNameAttribute("unicodeRange")]
public string Range { get; public set; }
    [DomNameAttribute("variant")]
public string Variant { get; public set; }
    [DomNameAttribute("featureSettings")]
public string Features { get; public set; }
    public abstract virtual string get_Family();
    public abstract virtual void set_Family(string value);
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_Style();
    public abstract virtual void set_Style(string value);
    public abstract virtual string get_Weight();
    public abstract virtual void set_Weight(string value);
    public abstract virtual string get_Stretch();
    public abstract virtual void set_Stretch(string value);
    public abstract virtual string get_Range();
    public abstract virtual void set_Range(string value);
    public abstract virtual string get_Variant();
    public abstract virtual void set_Variant(string value);
    public abstract virtual string get_Features();
    public abstract virtual void set_Features(string value);
}
[DomNameAttribute("CSSFontFeatureValuesRule")]
public interface AngleSharp.Css.Dom.ICssFontFeatureValuesRule {
    [DomNameAttribute("fontFamily")]
public string Family { get; public set; }
    public abstract virtual string get_Family();
    public abstract virtual void set_Family(string value);
}
[DomNameAttribute("CSSGroupingRule")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Css.Dom.ICssGroupingRule {
    [DomNameAttribute("cssRules")]
[DomNameAttribute("rules")]
public ICssRuleList Rules { get; }
    public abstract virtual ICssRuleList get_Rules();
    [DomNameAttribute("insertRule")]
public abstract virtual int Insert(string rule, int index);
    [DomNameAttribute("deleteRule")]
public abstract virtual void RemoveAt(int index);
}
[DomNameAttribute("CSSImportRule")]
public interface AngleSharp.Css.Dom.ICssImportRule {
    [DomNameAttribute("href")]
public string Href { get; }
    [DomNameAttribute("media")]
[DomPutForwardsAttribute("mediaText")]
public IMediaList Media { get; }
    [DomNameAttribute("styleSheet")]
public ICssStyleSheet Sheet { get; }
    public abstract virtual string get_Href();
    public abstract virtual IMediaList get_Media();
    public abstract virtual ICssStyleSheet get_Sheet();
}
[DomNameAttribute("CSSKeyframeRule")]
public interface AngleSharp.Css.Dom.ICssKeyframeRule {
    [DomNameAttribute("keyText")]
public string KeyText { get; public set; }
    [DomNameAttribute("style")]
public ICssStyleDeclaration Style { get; }
    public IKeyframeSelector Key { get; }
    public abstract virtual string get_KeyText();
    public abstract virtual void set_KeyText(string value);
    public abstract virtual ICssStyleDeclaration get_Style();
    public abstract virtual IKeyframeSelector get_Key();
}
[DomNameAttribute("CSSKeyframesRule")]
public interface AngleSharp.Css.Dom.ICssKeyframesRule {
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("cssRules")]
[DomNameAttribute("rules")]
public ICssRuleList Rules { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ICssRuleList get_Rules();
    [DomNameAttribute("appendRule")]
public abstract virtual void Add(string rule);
    [DomNameAttribute("deleteRule")]
public abstract virtual void Remove(string key);
    [DomNameAttribute("findRule")]
public abstract virtual ICssKeyframeRule Find(string key);
}
[DomNameAttribute("CSSMarginRule")]
public interface AngleSharp.Css.Dom.ICssMarginRule {
    [DomNameAttribute("name")]
public string Name { get; }
    [DomNameAttribute("style")]
[DomPutForwardsAttribute("cssText")]
public ICssStyleDeclaration Style { get; }
    public abstract virtual string get_Name();
    public abstract virtual ICssStyleDeclaration get_Style();
}
[DomNameAttribute("CSSMediaRule")]
public interface AngleSharp.Css.Dom.ICssMediaRule {
    [DomNameAttribute("media")]
[DomPutForwardsAttribute("mediaText")]
public IMediaList Media { get; }
    public abstract virtual IMediaList get_Media();
}
[DomNameAttribute("CSSNamespaceRule")]
public interface AngleSharp.Css.Dom.ICssNamespaceRule {
    [DomNameAttribute("namespaceURI")]
public string NamespaceUri { get; public set; }
    [DomNameAttribute("prefix")]
public string Prefix { get; public set; }
    public abstract virtual string get_NamespaceUri();
    public abstract virtual void set_NamespaceUri(string value);
    public abstract virtual string get_Prefix();
    public abstract virtual void set_Prefix(string value);
}
[DomNameAttribute("CSSPageRule")]
public interface AngleSharp.Css.Dom.ICssPageRule {
    [DomNameAttribute("selectorText")]
public string SelectorText { get; public set; }
    [DomNameAttribute("style")]
[DomPutForwardsAttribute("cssText")]
public ICssStyleDeclaration Style { get; }
    public ISelector Selector { get; }
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
    public abstract virtual ICssStyleDeclaration get_Style();
    public abstract virtual ISelector get_Selector();
}
[DefaultMemberAttribute("Item")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Css.Dom.ICssProperties {
    public string Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual string get_Item(string propertyName);
    public abstract virtual int get_Length();
    [DomNameAttribute("getPropertyValue")]
public abstract virtual string GetPropertyValue(string propertyName);
    public abstract virtual ICssProperty GetProperty(string propertyName);
    [DomNameAttribute("getPropertyPriority")]
public abstract virtual string GetPropertyPriority(string propertyName);
    [DomNameAttribute("setProperty")]
public abstract virtual void SetProperty(string propertyName, string propertyValue, string priority);
    [DomNameAttribute("removeProperty")]
public abstract virtual string RemoveProperty(string propertyName);
}
[DomNameAttribute("CSSProperty")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Css.Dom.ICssProperty {
    [DomNameAttribute("name")]
public string Name { get; }
    public ICssValue RawValue { get; }
    [DomNameAttribute("value")]
public string Value { get; public set; }
    [DomNameAttribute("important")]
public bool IsImportant { get; public set; }
    public bool IsInherited { get; }
    public bool IsInitial { get; }
    public bool IsAnimatable { get; }
    public bool CanBeInherited { get; }
    public bool IsShorthand { get; }
    public abstract virtual string get_Name();
    public abstract virtual ICssValue get_RawValue();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual bool get_IsImportant();
    public abstract virtual void set_IsImportant(bool value);
    public abstract virtual bool get_IsInherited();
    public abstract virtual bool get_IsInitial();
    public abstract virtual bool get_IsAnimatable();
    public abstract virtual bool get_CanBeInherited();
    public abstract virtual bool get_IsShorthand();
}
[DomNameAttribute("CSSPseudoElement")]
public interface AngleSharp.Css.Dom.ICssPseudoElement {
    [DomNameAttribute("type")]
public string Type { get; }
    [DomNameAttribute("style")]
public ICssStyleDeclaration Style { get; }
    public abstract virtual string get_Type();
    public abstract virtual ICssStyleDeclaration get_Style();
}
[DefaultMemberAttribute("Item")]
[DomNameAttribute("CSSPseudoElementList")]
public interface AngleSharp.Css.Dom.ICssPseudoElementList {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomNameAttribute("item")]
[DomAccessorAttribute]
public ICssPseudoElement Item { get; }
    [DomNameAttribute("getByType")]
public ICssPseudoElement Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual ICssPseudoElement get_Item(int index);
    public abstract virtual ICssPseudoElement get_Item(string type);
}
[DomNameAttribute("CSSRule")]
public interface AngleSharp.Css.Dom.ICssRule {
    [DomNameAttribute("type")]
public CssRuleType Type { get; }
    [DomNameAttribute("cssText")]
public string CssText { get; public set; }
    [DomNameAttribute("parentRule")]
public ICssRule Parent { get; }
    [DomNameAttribute("parentStyleSheet")]
public ICssStyleSheet Owner { get; }
    public abstract virtual CssRuleType get_Type();
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    public abstract virtual ICssRule get_Parent();
    public abstract virtual ICssStyleSheet get_Owner();
    public abstract virtual void SetParent(ICssRule rule);
    public abstract virtual void SetOwner(ICssStyleSheet sheet);
}
[DefaultMemberAttribute("Item")]
[DomNameAttribute("CSSRuleList")]
public interface AngleSharp.Css.Dom.ICssRuleList {
    [DomNameAttribute("item")]
[DomAccessorAttribute]
public ICssRule Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual ICssRule get_Item(int index);
    public abstract virtual int get_Length();
}
[DefaultMemberAttribute("Item")]
[DomNameAttribute("CSSStyleDeclaration")]
public interface AngleSharp.Css.Dom.ICssStyleDeclaration {
    [DomNameAttribute("item")]
[DomAccessorAttribute]
public string Item { get; }
    [DomNameAttribute("cssText")]
public string CssText { get; public set; }
    [DomNameAttribute("parentRule")]
public ICssRule Parent { get; }
    public abstract virtual string get_Item(int index);
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    public abstract virtual ICssRule get_Parent();
    public abstract virtual void SetParent(ICssRule rule);
}
[DomNameAttribute("CSSStyleRule")]
public interface AngleSharp.Css.Dom.ICssStyleRule {
    [DomNameAttribute("selectorText")]
public string SelectorText { get; public set; }
    [DomNameAttribute("style")]
[DomPutForwardsAttribute("cssText")]
public ICssStyleDeclaration Style { get; }
    public ISelector Selector { get; }
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
    public abstract virtual ICssStyleDeclaration get_Style();
    public abstract virtual ISelector get_Selector();
}
[DomNameAttribute("CSSStyleSheet")]
public interface AngleSharp.Css.Dom.ICssStyleSheet {
    [DomNameAttribute("ownerRule")]
public ICssRule OwnerRule { get; }
    [DomNameAttribute("cssRules")]
[DomNameAttribute("rules")]
public ICssRuleList Rules { get; }
    [DomNameAttribute("parentStyleSheet")]
public ICssStyleSheet Parent { get; }
    public abstract virtual ICssRule get_OwnerRule();
    public abstract virtual ICssRuleList get_Rules();
    public abstract virtual ICssStyleSheet get_Parent();
    [DomNameAttribute("insertRule")]
public abstract virtual int Insert(string rule, int index);
    [DomNameAttribute("deleteRule")]
public abstract virtual void RemoveAt(int index);
    public abstract virtual void SetOwner(ICssRule rule);
    public abstract virtual void SetParent(ICssStyleSheet parent);
}
[DomNameAttribute("CSSSupportsRule")]
public interface AngleSharp.Css.Dom.ICssSupportsRule {
    public IConditionFunction Condition { get; }
    public abstract virtual IConditionFunction get_Condition();
}
public interface AngleSharp.Css.Dom.ICssValue {
    public string CssText { get; }
    public abstract virtual string get_CssText();
}
public interface AngleSharp.Css.Dom.IDocumentFunction {
    public string Name { get; }
    public string Data { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Data();
    public abstract virtual bool Matches(Url url);
}
[DefaultMemberAttribute("Item")]
public interface AngleSharp.Css.Dom.IDocumentFunctions {
    public int Length { get; }
    public IDocumentFunction Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual IDocumentFunction get_Item(int index);
}
public interface AngleSharp.Css.Dom.IKeyframeSelector {
    public IEnumerable`1<double> Stops { get; }
    public string Text { get; }
    public abstract virtual IEnumerable`1<double> get_Stops();
    public abstract virtual string get_Text();
}
[DomNameAttribute("MediaQueryList")]
public interface AngleSharp.Css.Dom.IMediaQueryList {
    [DomNameAttribute("media")]
public string MediaText { get; }
    public IMediaList Media { get; }
    [DomNameAttribute("matches")]
public bool IsMatched { get; }
    public abstract virtual string get_MediaText();
    public abstract virtual IMediaList get_Media();
    public abstract virtual bool get_IsMatched();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(DomEventHandler value);
}
public interface AngleSharp.Css.Dom.IStyleCollection {
    public IRenderDevice Device { get; }
    public abstract virtual IRenderDevice get_Device();
}
internal class AngleSharp.Css.Dom.KeyframeSelector : object {
    private List`1<double> _stops;
    public IEnumerable`1<double> Stops { get; }
    public string Text { get; }
    public KeyframeSelector(List`1<double> stops);
    public sealed virtual IEnumerable`1<double> get_Stops();
    public sealed virtual string get_Text();
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    private static void Write(TextWriter writer, double value);
}
public enum AngleSharp.Css.Dom.LineStyle : Enum {
    public byte value__;
    public static LineStyle None;
    public static LineStyle Hidden;
    public static LineStyle Dotted;
    public static LineStyle Dashed;
    public static LineStyle Solid;
    public static LineStyle Double;
    public static LineStyle Groove;
    public static LineStyle Ridge;
    public static LineStyle Inset;
    public static LineStyle Outset;
}
public enum AngleSharp.Css.Dom.ListPosition : Enum {
    public byte value__;
    public static ListPosition Inside;
    public static ListPosition Outside;
}
public enum AngleSharp.Css.Dom.ListStyle : Enum {
    public byte value__;
    public static ListStyle None;
    public static ListStyle Disc;
    public static ListStyle Circle;
    public static ListStyle Square;
    public static ListStyle Decimal;
    public static ListStyle DecimalLeadingZero;
    public static ListStyle LowerRoman;
    public static ListStyle UpperRoman;
    public static ListStyle LowerGreek;
    public static ListStyle LowerLatin;
    public static ListStyle UpperLatin;
    public static ListStyle Armenian;
    public static ListStyle Georgian;
}
internal class AngleSharp.Css.Dom.MediaFeature : object {
    private bool _min;
    private bool _max;
    private ICssValue _name;
    private ICssValue _value;
    private string _op;
    public string Name { get; }
    public bool IsMinimum { get; }
    public bool IsMaximum { get; }
    public string Value { get; }
    public bool HasValue { get; }
    internal MediaFeature(string name);
    internal MediaFeature(string name, ICssValue value);
    internal MediaFeature(string name, ICssValue value, string op);
    internal MediaFeature(ICssValue name, ICssValue value, string op);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsMinimum();
    public sealed virtual bool get_IsMaximum();
    public sealed virtual string get_Value();
    public sealed virtual bool get_HasValue();
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Css.Dom.MediaList : object {
    private IBrowsingContext _context;
    private List`1<ICssMedium> _media;
    private static CssMedium replacementMedium;
    public string Item { get; }
    public int Length { get; }
    public ICssParser Parser { get; }
    public IFeatureValidatorFactory ValidatorFactory { get; }
    public string MediaText { get; public set; }
    internal MediaList(IBrowsingContext context);
    private static MediaList();
    public sealed virtual string get_Item(int index);
    public sealed virtual int get_Length();
    public ICssParser get_Parser();
    public IFeatureValidatorFactory get_ValidatorFactory();
    public sealed virtual string get_MediaText();
    public sealed virtual void set_MediaText(string value);
    public void SetMediaText(string value, bool throwOnError);
    public sealed virtual void Add(string newMedium);
    public sealed virtual void Remove(string oldMedium);
    public void Replace(IEnumerable`1<ICssMedium> media);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual IEnumerator`1<ICssMedium> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class AngleSharp.Css.Dom.MediaListExtensions : object {
    private static ConditionalWeakTable`2<IMediaFeature, IFeatureValidator> AssociatedValidators;
    private static String[] KnownTypes;
    private static MediaListExtensions();
    [ExtensionAttribute]
public static void AssociateValidator(IMediaFeature feature, IFeatureValidator validator);
    [ExtensionAttribute]
public static bool Validate(IMediaFeature feature, IRenderDevice device);
    [ExtensionAttribute]
public static bool Validate(IMediaList list, IRenderDevice device);
    [ExtensionAttribute]
public static bool Validate(ICssMedium medium, IRenderDevice device);
    [ExtensionAttribute]
private static bool IsInvalid(ICssMedium medium, IRenderDevice device);
    [ExtensionAttribute]
private static bool IsInvalid(ICssMedium medium, IRenderDevice device, string keyword, DeviceCategory category);
}
internal class AngleSharp.Css.Dom.NotCondition : object {
    private IConditionFunction _content;
    public NotCondition(IConditionFunction condition);
    public sealed virtual bool Check(IRenderDevice device);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public enum AngleSharp.Css.Dom.ObjectFitting : Enum {
    public byte value__;
    public static ObjectFitting None;
    public static ObjectFitting Fill;
    public static ObjectFitting Contain;
    public static ObjectFitting Cover;
    public static ObjectFitting ScaleDown;
}
internal class AngleSharp.Css.Dom.OrCondition : object {
    private IConditionFunction[] _conditions;
    public OrCondition(IEnumerable`1<IConditionFunction> conditions);
    public sealed virtual bool Check(IRenderDevice device);
    public sealed virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public enum AngleSharp.Css.Dom.OverflowMode : Enum {
    public byte value__;
    public static OverflowMode Auto;
    public static OverflowMode Visible;
    public static OverflowMode Hidden;
    public static OverflowMode Scroll;
    public static OverflowMode Clip;
}
public enum AngleSharp.Css.Dom.OverflowWrap : Enum {
    public byte value__;
    public static OverflowWrap Normal;
    public static OverflowWrap BreakWord;
}
public enum AngleSharp.Css.Dom.PlayState : Enum {
    public byte value__;
    public static PlayState Running;
    public static PlayState Paused;
}
public enum AngleSharp.Css.Dom.PointerAccuracy : Enum {
    public byte value__;
    public static PointerAccuracy None;
    public static PointerAccuracy Coarse;
    public static PointerAccuracy Fine;
}
public enum AngleSharp.Css.Dom.PointerEvent : Enum {
    public int value__;
    public static PointerEvent None;
    public static PointerEvent Auto;
    public static PointerEvent VisiblePainted;
    public static PointerEvent VisibleFill;
    public static PointerEvent VisibleStroke;
    public static PointerEvent Visible;
    public static PointerEvent Painted;
    public static PointerEvent Fill;
    public static PointerEvent Stroke;
    public static PointerEvent All;
}
public enum AngleSharp.Css.Dom.PositionMode : Enum {
    public byte value__;
    public static PositionMode Static;
    public static PositionMode Relative;
    public static PositionMode Absolute;
    public static PositionMode Fixed;
    public static PositionMode Sticky;
}
internal class AngleSharp.Css.Dom.PseudoElement : object {
    private IElement _host;
    private string _name;
    public IElement AssignedSlot { get; }
    public string Slot { get; public set; }
    public ISourceReference SourceReference { get; }
    public IShadowRoot ShadowRoot { get; }
    public string Prefix { get; }
    public string PseudoName { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public INamedNodeMap Attributes { get; }
    public ITokenList ClassList { get; }
    public string GivenNamespaceUri { get; }
    public string ClassName { get; public set; }
    public string Id { get; public set; }
    public string InnerHtml { get; public set; }
    public string OuterHtml { get; public set; }
    public string TagName { get; }
    public bool IsFocused { get; }
    public string BaseUri { get; }
    public Url BaseUrl { get; }
    public string NodeName { get; }
    public INodeList ChildNodes { get; }
    public IDocument Owner { get; }
    public IElement ParentElement { get; }
    public INode Parent { get; }
    public INode FirstChild { get; }
    public INode LastChild { get; }
    public INode NextSibling { get; }
    public INode PreviousSibling { get; }
    public NodeType NodeType { get; }
    public string NodeValue { get; public set; }
    public string TextContent { get; public set; }
    public bool HasChildNodes { get; }
    public IHtmlCollection`1<IElement> Children { get; }
    public IElement FirstElementChild { get; }
    public IElement LastElementChild { get; }
    public int ChildElementCount { get; }
    public IElement NextElementSibling { get; }
    public IElement PreviousElementSibling { get; }
    public NodeFlags Flags { get; }
    public PseudoElement(IElement host, string name);
    public sealed virtual IElement get_AssignedSlot();
    public sealed virtual string get_Slot();
    public sealed virtual void set_Slot(string value);
    public sealed virtual ISourceReference get_SourceReference();
    public sealed virtual IShadowRoot get_ShadowRoot();
    public sealed virtual string get_Prefix();
    public sealed virtual string get_PseudoName();
    public sealed virtual string get_LocalName();
    public sealed virtual string get_NamespaceUri();
    public sealed virtual INamedNodeMap get_Attributes();
    public sealed virtual ITokenList get_ClassList();
    public sealed virtual string get_GivenNamespaceUri();
    public sealed virtual string get_ClassName();
    public sealed virtual void set_ClassName(string value);
    public sealed virtual string get_Id();
    public sealed virtual void set_Id(string value);
    public sealed virtual string get_InnerHtml();
    public sealed virtual void set_InnerHtml(string value);
    public sealed virtual string get_OuterHtml();
    public sealed virtual void set_OuterHtml(string value);
    public sealed virtual string get_TagName();
    public sealed virtual bool get_IsFocused();
    public sealed virtual string get_BaseUri();
    public sealed virtual Url get_BaseUrl();
    public sealed virtual string get_NodeName();
    public sealed virtual INodeList get_ChildNodes();
    public sealed virtual IDocument get_Owner();
    public sealed virtual IElement get_ParentElement();
    public sealed virtual INode get_Parent();
    public sealed virtual INode get_FirstChild();
    public sealed virtual INode get_LastChild();
    public sealed virtual INode get_NextSibling();
    public sealed virtual INode get_PreviousSibling();
    public sealed virtual NodeType get_NodeType();
    public sealed virtual string get_NodeValue();
    public sealed virtual void set_NodeValue(string value);
    public sealed virtual string get_TextContent();
    public sealed virtual void set_TextContent(string value);
    public sealed virtual bool get_HasChildNodes();
    public sealed virtual IHtmlCollection`1<IElement> get_Children();
    public sealed virtual IElement get_FirstElementChild();
    public sealed virtual IElement get_LastElementChild();
    public sealed virtual int get_ChildElementCount();
    public sealed virtual IElement get_NextElementSibling();
    public sealed virtual IElement get_PreviousElementSibling();
    public sealed virtual NodeFlags get_Flags();
    public sealed virtual IShadowRoot AttachShadow(ShadowRootMode mode);
    public sealed virtual void Insert(AdjacentPosition position, string html);
    public sealed virtual bool HasAttribute(string name);
    public sealed virtual bool HasAttribute(string namespaceUri, string localName);
    public sealed virtual string GetAttribute(string name);
    public sealed virtual string GetAttribute(string namespaceUri, string localName);
    public sealed virtual void SetAttribute(string name, string value);
    public sealed virtual void SetAttribute(string namespaceUri, string name, string value);
    public sealed virtual bool RemoveAttribute(string name);
    public sealed virtual bool RemoveAttribute(string namespaceUri, string localName);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByTagNameNS(string namespaceUri, string tagName);
    public sealed virtual bool Matches(string selectors);
    public sealed virtual INode Clone(bool deep);
    public IPseudoElement Pseudo(string pseudoElement);
    public sealed virtual bool Equals(INode otherNode);
    public sealed virtual DocumentPositions CompareDocumentPosition(INode otherNode);
    public sealed virtual void Normalize();
    public sealed virtual bool Contains(INode otherNode);
    public sealed virtual bool IsDefaultNamespace(string namespaceUri);
    public sealed virtual string LookupNamespaceUri(string prefix);
    public sealed virtual string LookupPrefix(string namespaceUri);
    public sealed virtual INode AppendChild(INode child);
    public sealed virtual INode InsertBefore(INode newElement, INode referenceElement);
    public sealed virtual INode RemoveChild(INode child);
    public sealed virtual INode ReplaceChild(INode newChild, INode oldChild);
    public sealed virtual void AddEventListener(string type, DomEventHandler callback, bool capture);
    public sealed virtual void RemoveEventListener(string type, DomEventHandler callback, bool capture);
    public sealed virtual void InvokeEventListener(Event ev);
    public sealed virtual bool Dispatch(Event ev);
    public sealed virtual void Append(INode[] nodes);
    public sealed virtual void Prepend(INode[] nodes);
    public sealed virtual IElement QuerySelector(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> QuerySelectorAll(string selectors);
    public sealed virtual void Before(INode[] nodes);
    public sealed virtual void After(INode[] nodes);
    public sealed virtual void Replace(INode[] nodes);
    public sealed virtual void Remove();
    public sealed virtual void ToHtml(TextWriter writer, IMarkupFormatter formatter);
    public sealed virtual IElement Closest(string selectors);
}
internal class AngleSharp.Css.Dom.RegexpFunction : DocumentFunction {
    private Regex _regex;
    public RegexpFunction(string url);
    public virtual bool Matches(Url url);
}
public enum AngleSharp.Css.Dom.ResizeMode : Enum {
    public int value__;
    public static ResizeMode None;
    public static ResizeMode Both;
    public static ResizeMode Horizontal;
    public static ResizeMode Vertical;
    public static ResizeMode Block;
    public static ResizeMode Inline;
}
public enum AngleSharp.Css.Dom.RubyAlignment : Enum {
    public int value__;
    public static RubyAlignment SpaceAround;
    public static RubyAlignment SpaceBetween;
    public static RubyAlignment Start;
    public static RubyAlignment Center;
}
public enum AngleSharp.Css.Dom.RubyOverhangMode : Enum {
    public int value__;
    public static RubyOverhangMode None;
    public static RubyOverhangMode Auto;
    public static RubyOverhangMode Start;
    public static RubyOverhangMode End;
}
public enum AngleSharp.Css.Dom.RubyPosition : Enum {
    public int value__;
    public static RubyPosition Over;
    public static RubyPosition Under;
    public static RubyPosition InterCharacter;
}
public enum AngleSharp.Css.Dom.ScriptingState : Enum {
    public byte value__;
    public static ScriptingState None;
    public static ScriptingState InitialOnly;
    public static ScriptingState Enabled;
}
[DomNameAttribute("ScrollBehavior")]
[DomLiteralsAttribute]
public enum AngleSharp.Css.Dom.ScrollBehavior : Enum {
    public int value__;
    [DomNameAttribute("auto")]
public static ScrollBehavior Auto;
    [DomNameAttribute("instant")]
public static ScrollBehavior Instant;
    [DomNameAttribute("smooth")]
public static ScrollBehavior Smooth;
}
[DomNameAttribute("ScrollLogicalPosition")]
[DomLiteralsAttribute]
public enum AngleSharp.Css.Dom.ScrollLogicalPosition : Enum {
    public int value__;
    [DomNameAttribute("start")]
public static ScrollLogicalPosition Start;
    [DomNameAttribute("end")]
public static ScrollLogicalPosition End;
}
[DomNameAttribute("ScrollOptions")]
public class AngleSharp.Css.Dom.ScrollOptions : object {
    [CompilerGeneratedAttribute]
private ScrollBehavior <Behavior>k__BackingField;
    [DomNameAttribute("behavior")]
public ScrollBehavior Behavior { get; public set; }
    [CompilerGeneratedAttribute]
public ScrollBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(ScrollBehavior value);
}
public enum AngleSharp.Css.Dom.ScrollSnapAlign : Enum {
    public byte value__;
    public static ScrollSnapAlign None;
    public static ScrollSnapAlign Start;
    public static ScrollSnapAlign End;
    public static ScrollSnapAlign Center;
}
public enum AngleSharp.Css.Dom.ScrollSnapAxis : Enum {
    public byte value__;
    public static ScrollSnapAxis X;
    public static ScrollSnapAxis Y;
    public static ScrollSnapAxis Block;
    public static ScrollSnapAxis Inline;
    public static ScrollSnapAxis Both;
}
public enum AngleSharp.Css.Dom.ScrollSnapStrictness : Enum {
    public byte value__;
    public static ScrollSnapStrictness Mandatory;
    public static ScrollSnapStrictness Proximity;
}
[DomNameAttribute("ScrollToOptions")]
public class AngleSharp.Css.Dom.ScrollToOptions : ScrollOptions {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [DomNameAttribute("left")]
public double Left { get; public set; }
    [DomNameAttribute("top")]
public double Top { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(double value);
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(double value);
}
public enum AngleSharp.Css.Dom.Sizing : Enum {
    public int value__;
    public static Sizing FitContent;
    public static Sizing MaxContent;
    public static Sizing MinContent;
}
public enum AngleSharp.Css.Dom.StrokeLinecap : Enum {
    public byte value__;
    public static StrokeLinecap Butt;
    public static StrokeLinecap Round;
    public static StrokeLinecap Square;
}
public enum AngleSharp.Css.Dom.StrokeLinejoin : Enum {
    public byte value__;
    public static StrokeLinejoin Miter;
    public static StrokeLinejoin Round;
    public static StrokeLinejoin Bevel;
}
internal class AngleSharp.Css.Dom.StyleCollection : object {
    private IEnumerable`1<ICssStyleSheet> _sheets;
    private IRenderDevice _device;
    public IRenderDevice Device { get; }
    public StyleCollection(IEnumerable`1<ICssStyleSheet> sheets, IRenderDevice device);
    public sealed virtual IRenderDevice get_Device();
    [IteratorStateMachineAttribute("AngleSharp.Css.Dom.StyleCollection/<GetEnumerator>d__5")]
public sealed virtual IEnumerator`1<ICssStyleRule> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
[DomExposedAttribute("CSSStyleDeclaration")]
public static class AngleSharp.Css.Dom.StyleDeclarationExtensions : object {
    [ExtensionAttribute]
[DomNameAttribute("alignContent")]
[DomAccessorAttribute]
public static string GetAlignContent(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("alignContent")]
[DomAccessorAttribute]
public static void SetAlignContent(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("alignItems")]
[DomAccessorAttribute]
public static string GetAlignItems(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("alignItems")]
[DomAccessorAttribute]
public static void SetAlignItems(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("alignSelf")]
[DomAccessorAttribute]
public static string GetAlignSelf(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("alignSelf")]
[DomAccessorAttribute]
public static void SetAlignSelf(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("accelerator")]
[DomAccessorAttribute]
public static string GetAccelerator(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("accelerator")]
[DomAccessorAttribute]
public static void SetAccelerator(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("alignmentBaseline")]
[DomAccessorAttribute]
public static string GetAlignmentBaseline(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("alignmentBaseline")]
[DomAccessorAttribute]
public static void SetAlignmentBaseline(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animation")]
[DomAccessorAttribute]
public static string GetAnimation(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animation")]
[DomAccessorAttribute]
public static void SetAnimation(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationDelay")]
[DomAccessorAttribute]
public static string GetAnimationDelay(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationDelay")]
[DomAccessorAttribute]
public static void SetAnimationDelay(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationDirection")]
[DomAccessorAttribute]
public static string GetAnimationDirection(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationDirection")]
[DomAccessorAttribute]
public static void SetAnimationDirection(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationDuration")]
[DomAccessorAttribute]
public static string GetAnimationDuration(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationDuration")]
[DomAccessorAttribute]
public static void SetAnimationDuration(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationFillMode")]
[DomAccessorAttribute]
public static string GetAnimationFillMode(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationFillMode")]
[DomAccessorAttribute]
public static void SetAnimationFillMode(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationIterationCount")]
[DomAccessorAttribute]
public static string GetAnimationIterationCount(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationIterationCount")]
[DomAccessorAttribute]
public static void SetAnimationIterationCount(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationName")]
[DomAccessorAttribute]
public static string GetAnimationName(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationName")]
[DomAccessorAttribute]
public static void SetAnimationName(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationPlayState")]
[DomAccessorAttribute]
public static string GetAnimationPlayState(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationPlayState")]
[DomAccessorAttribute]
public static void SetAnimationPlayState(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("animationTimingFunction")]
[DomAccessorAttribute]
public static string GetAnimationTimingFunction(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("animationTimingFunction")]
[DomAccessorAttribute]
public static void SetAnimationTimingFunction(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backfaceVisibility")]
[DomAccessorAttribute]
public static string GetBackfaceVisibility(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backfaceVisibility")]
[DomAccessorAttribute]
public static void SetBackfaceVisibility(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("background")]
[DomAccessorAttribute]
public static string GetBackground(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("background")]
[DomAccessorAttribute]
public static void SetBackground(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundAttachment")]
[DomAccessorAttribute]
public static string GetBackgroundAttachment(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundAttachment")]
[DomAccessorAttribute]
public static void SetBackgroundAttachment(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundClip")]
[DomAccessorAttribute]
public static string GetBackgroundClip(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundClip")]
[DomAccessorAttribute]
public static void SetBackgroundClip(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundColor")]
[DomAccessorAttribute]
public static string GetBackgroundColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundColor")]
[DomAccessorAttribute]
public static void SetBackgroundColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundImage")]
[DomAccessorAttribute]
public static string GetBackgroundImage(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundImage")]
[DomAccessorAttribute]
public static void SetBackgroundImage(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundOrigin")]
[DomAccessorAttribute]
public static string GetBackgroundOrigin(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundOrigin")]
[DomAccessorAttribute]
public static void SetBackgroundOrigin(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundPosition")]
[DomAccessorAttribute]
public static string GetBackgroundPosition(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundPosition")]
[DomAccessorAttribute]
public static void SetBackgroundPosition(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundPositionX")]
[DomAccessorAttribute]
public static string GetBackgroundPositionX(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundPositionX")]
[DomAccessorAttribute]
public static void SetBackgroundPositionX(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundPositionY")]
[DomAccessorAttribute]
public static string GetBackgroundPositionY(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundPositionY")]
[DomAccessorAttribute]
public static void SetBackgroundPositionY(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundRepeat")]
[DomAccessorAttribute]
public static string GetBackgroundRepeat(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundRepeat")]
[DomAccessorAttribute]
public static void SetBackgroundRepeat(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("backgroundSize")]
[DomAccessorAttribute]
public static string GetBackgroundSize(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("backgroundSize")]
[DomAccessorAttribute]
public static void SetBackgroundSize(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("baselineShift")]
[DomAccessorAttribute]
public static string GetBaselineShift(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("baselineShift")]
[DomAccessorAttribute]
public static void SetBaselineShift(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("behavior")]
[DomAccessorAttribute]
public static string GetBehavior(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("behavior")]
[DomAccessorAttribute]
public static void SetBehavior(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("bottom")]
[DomAccessorAttribute]
public static string GetBottom(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("bottom")]
[DomAccessorAttribute]
public static void SetBottom(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("border")]
[DomAccessorAttribute]
public static string GetBorder(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("border")]
[DomAccessorAttribute]
public static void SetBorder(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderBottom")]
[DomAccessorAttribute]
public static string GetBorderBottom(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderBottom")]
[DomAccessorAttribute]
public static void SetBorderBottom(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomColor")]
[DomAccessorAttribute]
public static string GetBorderBottomColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomColor")]
[DomAccessorAttribute]
public static void SetBorderBottomColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomLeftRadius")]
[DomAccessorAttribute]
public static string GetBorderBottomLeftRadius(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomLeftRadius")]
[DomAccessorAttribute]
public static void SetBorderBottomLeftRadius(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomRightRadius")]
[DomAccessorAttribute]
public static string GetBorderBottomRightRadius(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomRightRadius")]
[DomAccessorAttribute]
public static void SetBorderBottomRightRadius(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomStyle")]
[DomAccessorAttribute]
public static string GetBorderBottomStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomStyle")]
[DomAccessorAttribute]
public static void SetBorderBottomStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomWidth")]
[DomAccessorAttribute]
public static string GetBorderBottomWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderBottomWidth")]
[DomAccessorAttribute]
public static void SetBorderBottomWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderCollapse")]
[DomAccessorAttribute]
public static string GetBorderCollapse(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderCollapse")]
[DomAccessorAttribute]
public static void SetBorderCollapse(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderColor")]
[DomAccessorAttribute]
public static string GetBorderColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderColor")]
[DomAccessorAttribute]
public static void SetBorderColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderImage")]
[DomAccessorAttribute]
public static string GetBorderImage(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderImage")]
[DomAccessorAttribute]
public static void SetBorderImage(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderImageOutset")]
[DomAccessorAttribute]
public static string GetBorderImageOutset(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderImageOutset")]
[DomAccessorAttribute]
public static void SetBorderImageOutset(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderImageRepeat")]
[DomAccessorAttribute]
public static string GetBorderImageRepeat(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderImageRepeat")]
[DomAccessorAttribute]
public static void SetBorderImageRepeat(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderImageSlice")]
[DomAccessorAttribute]
public static string GetBorderImageSlice(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderImageSlice")]
[DomAccessorAttribute]
public static void SetBorderImageSlice(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderImageSource")]
[DomAccessorAttribute]
public static string GetBorderImageSource(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderImageSource")]
[DomAccessorAttribute]
public static void SetBorderImageSource(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderImageWidth")]
[DomAccessorAttribute]
public static string GetBorderImageWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderImageWidth")]
[DomAccessorAttribute]
public static void SetBorderImageWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderLeft")]
[DomAccessorAttribute]
public static string GetBorderLeft(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderLeft")]
[DomAccessorAttribute]
public static void SetBorderLeft(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderLeftColor")]
[DomAccessorAttribute]
public static string GetBorderLeftColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderLeftColor")]
[DomAccessorAttribute]
public static void SetBorderLeftColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderLeftStyle")]
[DomAccessorAttribute]
public static string GetBorderLeftStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderLeftStyle")]
[DomAccessorAttribute]
public static void SetBorderLeftStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderLeftWidth")]
[DomAccessorAttribute]
public static string GetBorderLeftWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderLeftWidth")]
[DomAccessorAttribute]
public static void SetBorderLeftWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderRadius")]
[DomAccessorAttribute]
public static string GetBorderRadius(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderRadius")]
[DomAccessorAttribute]
public static void SetBorderRadius(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderRight")]
[DomAccessorAttribute]
public static string GetBorderRight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderRight")]
[DomAccessorAttribute]
public static void SetBorderRight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderRightColor")]
[DomAccessorAttribute]
public static string GetBorderRightColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderRightColor")]
[DomAccessorAttribute]
public static void SetBorderRightColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderRightStyle")]
[DomAccessorAttribute]
public static string GetBorderRightStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderRightStyle")]
[DomAccessorAttribute]
public static void SetBorderRightStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderRightWidth")]
[DomAccessorAttribute]
public static string GetBorderRightWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderRightWidth")]
[DomAccessorAttribute]
public static void SetBorderRightWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderSpacing")]
[DomAccessorAttribute]
public static string GetBorderSpacing(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderSpacing")]
[DomAccessorAttribute]
public static void SetBorderSpacing(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderStyle")]
[DomAccessorAttribute]
public static string GetBorderStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderStyle")]
[DomAccessorAttribute]
public static void SetBorderStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderTop")]
[DomAccessorAttribute]
public static string GetBorderTop(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderTop")]
[DomAccessorAttribute]
public static void SetBorderTop(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderTopColor")]
[DomAccessorAttribute]
public static string GetBorderTopColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderTopColor")]
[DomAccessorAttribute]
public static void SetBorderTopColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderTopLeftRadius")]
[DomAccessorAttribute]
public static string GetBorderTopLeftRadius(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderTopLeftRadius")]
[DomAccessorAttribute]
public static void SetBorderTopLeftRadius(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderTopRightRadius")]
[DomAccessorAttribute]
public static string GetBorderTopRightRadius(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderTopRightRadius")]
[DomAccessorAttribute]
public static void SetBorderTopRightRadius(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderTopStyle")]
[DomAccessorAttribute]
public static string GetBorderTopStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderTopStyle")]
[DomAccessorAttribute]
public static void SetBorderTopStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderTopWidth")]
[DomAccessorAttribute]
public static string GetBorderTopWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderTopWidth")]
[DomAccessorAttribute]
public static void SetBorderTopWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("borderWidth")]
[DomAccessorAttribute]
public static string GetBorderWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("borderWidth")]
[DomAccessorAttribute]
public static void SetBorderWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("boxShadow")]
[DomAccessorAttribute]
public static string GetBoxShadow(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("boxShadow")]
[DomAccessorAttribute]
public static void SetBoxShadow(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("boxSizing")]
[DomAccessorAttribute]
public static string GetBoxSizing(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("boxSizing")]
[DomAccessorAttribute]
public static void SetBoxSizing(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("breakAfter")]
[DomAccessorAttribute]
public static string GetBreakAfter(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("breakAfter")]
[DomAccessorAttribute]
public static void SetBreakAfter(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("breakBefore")]
[DomAccessorAttribute]
public static string GetBreakBefore(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("breakBefore")]
[DomAccessorAttribute]
public static void SetBreakBefore(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("breakInside")]
[DomAccessorAttribute]
public static string GetBreakInside(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("breakInside")]
[DomAccessorAttribute]
public static void SetBreakInside(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("captionSide")]
[DomAccessorAttribute]
public static string GetCaptionSide(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("captionSide")]
[DomAccessorAttribute]
public static void SetCaptionSide(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clear")]
[DomAccessorAttribute]
public static string GetClear(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clear")]
[DomAccessorAttribute]
public static void SetClear(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clip")]
[DomAccessorAttribute]
public static string GetClip(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clip")]
[DomAccessorAttribute]
public static void SetClip(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clipBottom")]
[DomAccessorAttribute]
public static string GetClipBottom(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clipBottom")]
[DomAccessorAttribute]
public static void SetClipBottom(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clipLeft")]
[DomAccessorAttribute]
public static string GetClipLeft(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clipLeft")]
[DomAccessorAttribute]
public static void SetClipLeft(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clipPath")]
[DomAccessorAttribute]
public static string GetClipPath(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clipPath")]
[DomAccessorAttribute]
public static void SetClipPath(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clipRight")]
[DomAccessorAttribute]
public static string GetClipRight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clipRight")]
[DomAccessorAttribute]
public static void SetClipRight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clipRule")]
[DomAccessorAttribute]
public static string GetClipRule(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clipRule")]
[DomAccessorAttribute]
public static void SetClipRule(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("clipTop")]
[DomAccessorAttribute]
public static string GetClipTop(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("clipTop")]
[DomAccessorAttribute]
public static void SetClipTop(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("color")]
[DomAccessorAttribute]
public static string GetColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("color")]
[DomAccessorAttribute]
public static void SetColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("colorInterpolationFilters")]
[DomAccessorAttribute]
public static string GetColorInterpolationFilters(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("colorInterpolationFilters")]
[DomAccessorAttribute]
public static void SetColorInterpolationFilters(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnCount")]
[DomAccessorAttribute]
public static string GetColumnCount(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnCount")]
[DomAccessorAttribute]
public static void SetColumnCount(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnFill")]
[DomAccessorAttribute]
public static string GetColumnFill(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnFill")]
[DomAccessorAttribute]
public static void SetColumnFill(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnGap")]
[DomAccessorAttribute]
public static string GetColumnGap(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnGap")]
[DomAccessorAttribute]
public static void SetColumnGap(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnRule")]
[DomAccessorAttribute]
public static string GetColumnRule(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnRule")]
[DomAccessorAttribute]
public static void SetColumnRule(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnRuleColor")]
[DomAccessorAttribute]
public static string GetColumnRuleColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnRuleColor")]
[DomAccessorAttribute]
public static void SetColumnRuleColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnRuleStyle")]
[DomAccessorAttribute]
public static string GetColumnRuleStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnRuleStyle")]
[DomAccessorAttribute]
public static void SetColumnRuleStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnRuleWidth")]
[DomAccessorAttribute]
public static string GetColumnRuleWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnRuleWidth")]
[DomAccessorAttribute]
public static void SetColumnRuleWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columns")]
[DomAccessorAttribute]
public static string GetColumns(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columns")]
[DomAccessorAttribute]
public static void SetColumns(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnSpan")]
[DomAccessorAttribute]
public static string GetColumnSpan(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnSpan")]
[DomAccessorAttribute]
public static void SetColumnSpan(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("columnWidth")]
[DomAccessorAttribute]
public static string GetColumnWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("columnWidth")]
[DomAccessorAttribute]
public static void SetColumnWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("content")]
[DomAccessorAttribute]
public static string GetContent(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("content")]
[DomAccessorAttribute]
public static void SetContent(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("counterIncrement")]
[DomAccessorAttribute]
public static string GetCounterIncrement(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("counterIncrement")]
[DomAccessorAttribute]
public static void SetCounterIncrement(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("counterReset")]
[DomAccessorAttribute]
public static string GetCounterReset(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("counterReset")]
[DomAccessorAttribute]
public static void SetCounterReset(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("cssFloat")]
[DomAccessorAttribute]
public static string GetFloat(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("cssFloat")]
[DomAccessorAttribute]
public static void SetFloat(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("cursor")]
[DomAccessorAttribute]
public static string GetCursor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("cursor")]
[DomAccessorAttribute]
public static void SetCursor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("direction")]
[DomAccessorAttribute]
public static string GetDirection(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("direction")]
[DomAccessorAttribute]
public static void SetDirection(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("display")]
[DomAccessorAttribute]
public static string GetDisplay(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("display")]
[DomAccessorAttribute]
public static void SetDisplay(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("dominantBaseline")]
[DomAccessorAttribute]
public static string GetDominantBaseline(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("dominantBaseline")]
[DomAccessorAttribute]
public static void SetDominantBaseline(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("emptyCells")]
[DomAccessorAttribute]
public static string GetEmptyCells(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("emptyCells")]
[DomAccessorAttribute]
public static void SetEmptyCells(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("enableBackground")]
[DomAccessorAttribute]
public static string GetEnableBackground(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("enableBackground")]
[DomAccessorAttribute]
public static void SetEnableBackground(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fill")]
[DomAccessorAttribute]
public static string GetFill(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fill")]
[DomAccessorAttribute]
public static void SetFill(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fillOpacity")]
[DomAccessorAttribute]
public static string GetFillOpacity(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fillOpacity")]
[DomAccessorAttribute]
public static void SetFillOpacity(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fillRule")]
[DomAccessorAttribute]
public static string GetFillRule(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fillRule")]
[DomAccessorAttribute]
public static void SetFillRule(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("filter")]
[DomAccessorAttribute]
public static string GetFilter(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("filter")]
[DomAccessorAttribute]
public static void SetFilter(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flex")]
[DomAccessorAttribute]
public static string GetFlex(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flex")]
[DomAccessorAttribute]
public static void SetFlex(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flexBasis")]
[DomAccessorAttribute]
public static string GetFlexBasis(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flexBasis")]
[DomAccessorAttribute]
public static void SetFlexBasis(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flexDirection")]
[DomAccessorAttribute]
public static string GetFlexDirection(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flexDirection")]
[DomAccessorAttribute]
public static void SetFlexDirection(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flexFlow")]
[DomAccessorAttribute]
public static string GetFlexFlow(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flexFlow")]
[DomAccessorAttribute]
public static void SetFlexFlow(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flexGrow")]
[DomAccessorAttribute]
public static string GetFlexGrow(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flexGrow")]
[DomAccessorAttribute]
public static void SetFlexGrow(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flexShrink")]
[DomAccessorAttribute]
public static string GetFlexShrink(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flexShrink")]
[DomAccessorAttribute]
public static void SetFlexShrink(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("flexWrap")]
[DomAccessorAttribute]
public static string GetFlexWrap(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("flexWrap")]
[DomAccessorAttribute]
public static void SetFlexWrap(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("font")]
[DomAccessorAttribute]
public static string GetFont(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("font")]
[DomAccessorAttribute]
public static void SetFont(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontFamily")]
[DomAccessorAttribute]
public static string GetFontFamily(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontFamily")]
[DomAccessorAttribute]
public static void SetFontFamily(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontFeatureSettings")]
[DomAccessorAttribute]
public static string GetFontFeatureSettings(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontFeatureSettings")]
[DomAccessorAttribute]
public static void SetFontFeatureSettings(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontSize")]
[DomAccessorAttribute]
public static string GetFontSize(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontSize")]
[DomAccessorAttribute]
public static void SetFontSize(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontSizeAdjust")]
[DomAccessorAttribute]
public static string GetFontSizeAdjust(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontSizeAdjust")]
[DomAccessorAttribute]
public static void SetFontSizeAdjust(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontStretch")]
[DomAccessorAttribute]
public static string GetFontStretch(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontStretch")]
[DomAccessorAttribute]
public static void SetFontStretch(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontStyle")]
[DomAccessorAttribute]
public static string GetFontStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontStyle")]
[DomAccessorAttribute]
public static void SetFontStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontVariant")]
[DomAccessorAttribute]
public static string GetFontVariant(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontVariant")]
[DomAccessorAttribute]
public static void SetFontVariant(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("fontWeight")]
[DomAccessorAttribute]
public static string GetFontWeight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("fontWeight")]
[DomAccessorAttribute]
public static void SetFontWeight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("glyphOrientationHorizontal")]
[DomAccessorAttribute]
public static string GetGlyphOrientationHorizontal(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("glyphOrientationHorizontal")]
[DomAccessorAttribute]
public static void SetGlyphOrientationHorizontal(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("glyphOrientationVertical")]
[DomAccessorAttribute]
public static string GetGlyphOrientationVertical(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("glyphOrientationVertical")]
[DomAccessorAttribute]
public static void SetGlyphOrientationVertical(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("height")]
[DomAccessorAttribute]
public static string GetHeight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("height")]
[DomAccessorAttribute]
public static void SetHeight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("imeMode")]
[DomAccessorAttribute]
public static string GetImeMode(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("imeMode")]
[DomAccessorAttribute]
public static void SetImeMode(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("justifyContent")]
[DomAccessorAttribute]
public static string GetJustifyContent(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("justifyContent")]
[DomAccessorAttribute]
public static void SetJustifyContent(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("layoutGrid")]
[DomAccessorAttribute]
public static string GetLayoutGrid(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("layoutGrid")]
[DomAccessorAttribute]
public static void SetLayoutGrid(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridChar")]
[DomAccessorAttribute]
public static string GetLayoutGridChar(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridChar")]
[DomAccessorAttribute]
public static void SetLayoutGridChar(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridLine")]
[DomAccessorAttribute]
public static string GetLayoutGridLine(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridLine")]
[DomAccessorAttribute]
public static void SetLayoutGridLine(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridMode")]
[DomAccessorAttribute]
public static string GetLayoutGridMode(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridMode")]
[DomAccessorAttribute]
public static void SetLayoutGridMode(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridType")]
[DomAccessorAttribute]
public static string GetLayoutGridType(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("layoutGridType")]
[DomAccessorAttribute]
public static void SetLayoutGridType(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("left")]
[DomAccessorAttribute]
public static string GetLeft(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("left")]
[DomAccessorAttribute]
public static void SetLeft(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("letterSpacing")]
[DomAccessorAttribute]
public static string GetLetterSpacing(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("letterSpacing")]
[DomAccessorAttribute]
public static void SetLetterSpacing(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("lineHeight")]
[DomAccessorAttribute]
public static string GetLineHeight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("lineHeight")]
[DomAccessorAttribute]
public static void SetLineHeight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("listStyle")]
[DomAccessorAttribute]
public static string GetListStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("listStyle")]
[DomAccessorAttribute]
public static void SetListStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("listStyleImage")]
[DomAccessorAttribute]
public static string GetListStyleImage(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("listStyleImage")]
[DomAccessorAttribute]
public static void SetListStyleImage(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("listStylePosition")]
[DomAccessorAttribute]
public static string GetListStylePosition(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("listStylePosition")]
[DomAccessorAttribute]
public static void SetListStylePosition(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("listStyleType")]
[DomAccessorAttribute]
public static string GetListStyleType(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("listStyleType")]
[DomAccessorAttribute]
public static void SetListStyleType(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("margin")]
[DomAccessorAttribute]
public static string GetMargin(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("margin")]
[DomAccessorAttribute]
public static void SetMargin(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("marginBottom")]
[DomAccessorAttribute]
public static string GetMarginBottom(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("marginBottom")]
[DomAccessorAttribute]
public static void SetMarginBottom(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("marginLeft")]
[DomAccessorAttribute]
public static string GetMarginLeft(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("marginLeft")]
[DomAccessorAttribute]
public static void SetMarginLeft(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("marginRight")]
[DomAccessorAttribute]
public static string GetMarginRight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("marginRight")]
[DomAccessorAttribute]
public static void SetMarginRight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("marginTop")]
[DomAccessorAttribute]
public static string GetMarginTop(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("marginTop")]
[DomAccessorAttribute]
public static void SetMarginTop(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("marker")]
[DomAccessorAttribute]
public static string GetMarker(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("marker")]
[DomAccessorAttribute]
public static void SetMarker(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("markerEnd")]
[DomAccessorAttribute]
public static string GetMarkerEnd(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("markerEnd")]
[DomAccessorAttribute]
public static void SetMarkerEnd(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("markerMid")]
[DomAccessorAttribute]
public static string GetMarkerMid(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("markerMid")]
[DomAccessorAttribute]
public static void SetMarkerMid(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("markerStart")]
[DomAccessorAttribute]
public static string GetMarkerStart(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("markerStart")]
[DomAccessorAttribute]
public static void SetMarkerStart(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("mask")]
[DomAccessorAttribute]
public static string GetMask(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("mask")]
[DomAccessorAttribute]
public static void SetMask(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("maxHeight")]
[DomAccessorAttribute]
public static string GetMaxHeight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("maxHeight")]
[DomAccessorAttribute]
public static void SetMaxHeight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("maxWidth")]
public static string GetMaxWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("maxWidth")]
[DomAccessorAttribute]
public static void SetMaxWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("minHeight")]
[DomAccessorAttribute]
public static string GetMinHeight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("minHeight")]
[DomAccessorAttribute]
public static void SetMinHeight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("minWidth")]
[DomAccessorAttribute]
public static string GetMinWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("minWidth")]
[DomAccessorAttribute]
public static void SetMinWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("opacity")]
[DomAccessorAttribute]
public static string GetOpacity(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("opacity")]
[DomAccessorAttribute]
public static void SetOpacity(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("order")]
[DomAccessorAttribute]
public static string GetOrder(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("order")]
[DomAccessorAttribute]
public static void SetOrder(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("orphans")]
[DomAccessorAttribute]
public static string GetOrphans(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("orphans")]
[DomAccessorAttribute]
public static void SetOrphans(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("outline")]
[DomAccessorAttribute]
public static string GetOutline(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("outline")]
[DomAccessorAttribute]
public static void SetOutline(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("outlineColor")]
[DomAccessorAttribute]
public static string GetOutlineColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("outlineColor")]
[DomAccessorAttribute]
public static void SetOutlineColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("outlineStyle")]
[DomAccessorAttribute]
public static string GetOutlineStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("outlineStyle")]
[DomAccessorAttribute]
public static void SetOutlineStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("outlineWidth")]
[DomAccessorAttribute]
public static string GetOutlineWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("outlineWidth")]
[DomAccessorAttribute]
public static void SetOutlineWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("overflow")]
[DomAccessorAttribute]
public static string GetOverflow(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("overflow")]
[DomAccessorAttribute]
public static void SetOverflow(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("overflowX")]
[DomAccessorAttribute]
public static string GetOverflowX(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("overflowX")]
[DomAccessorAttribute]
public static void SetOverflowX(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("overflowY")]
[DomAccessorAttribute]
public static string GetOverflowY(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("overflowY")]
[DomAccessorAttribute]
public static void SetOverflowY(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("padding")]
[DomAccessorAttribute]
public static string GetPadding(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("padding")]
[DomAccessorAttribute]
public static void SetPadding(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("paddingBottom")]
[DomAccessorAttribute]
public static string GetPaddingBottom(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("paddingBottom")]
[DomAccessorAttribute]
public static void SetPaddingBottom(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("paddingLeft")]
[DomAccessorAttribute]
public static string GetPaddingLeft(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("paddingLeft")]
[DomAccessorAttribute]
public static void SetPaddingLeft(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("paddingRight")]
[DomAccessorAttribute]
public static string GetPaddingRight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("paddingRight")]
[DomAccessorAttribute]
public static void SetPaddingRight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("paddingTop")]
[DomAccessorAttribute]
public static string GetPaddingTop(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("paddingTop")]
[DomAccessorAttribute]
public static void SetPaddingTop(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("pageBreakAfter")]
[DomAccessorAttribute]
public static string GetPageBreakAfter(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("pageBreakAfter")]
[DomAccessorAttribute]
public static void SetPageBreakAfter(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("pageBreakBefore")]
[DomAccessorAttribute]
public static string GetPageBreakBefore(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("pageBreakBefore")]
[DomAccessorAttribute]
public static void SetPageBreakBefore(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("pageBreakInside")]
[DomAccessorAttribute]
public static string GetPageBreakInside(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("pageBreakInside")]
[DomAccessorAttribute]
public static void SetPageBreakInside(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("perspective")]
[DomAccessorAttribute]
public static string GetPerspective(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("perspective")]
[DomAccessorAttribute]
public static void SetPerspective(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("perspectiveOrigin")]
[DomAccessorAttribute]
public static string GetPerspectiveOrigin(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("perspectiveOrigin")]
[DomAccessorAttribute]
public static void SetPerspectiveOrigin(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("pointerEvents")]
[DomAccessorAttribute]
public static string GetPointerEvents(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("pointerEvents")]
[DomAccessorAttribute]
public static void SetPointerEvents(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("quotes")]
[DomAccessorAttribute]
public static string GetQuotes(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("quotes")]
[DomAccessorAttribute]
public static void SetQuotes(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("position")]
[DomAccessorAttribute]
public static string GetPosition(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("position")]
[DomAccessorAttribute]
public static void SetPosition(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("right")]
[DomAccessorAttribute]
public static string GetRight(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("right")]
[DomAccessorAttribute]
public static void SetRight(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("rubyAlign")]
[DomAccessorAttribute]
public static string GetRubyAlign(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("rubyAlign")]
[DomAccessorAttribute]
public static void SetRubyAlign(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("rubyOverhang")]
[DomAccessorAttribute]
public static string GetRubyOverhang(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("rubyOverhang")]
[DomAccessorAttribute]
public static void SetRubyOverhang(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("rubyPosition")]
[DomAccessorAttribute]
public static string GetRubyPosition(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("rubyPosition")]
[DomAccessorAttribute]
public static void SetRubyPosition(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbar3dLightColor")]
[DomAccessorAttribute]
public static string GetScrollbar3dLightColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbar3dLightColor")]
[DomAccessorAttribute]
public static void SetScrollbar3dLightColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarArrowColor")]
[DomAccessorAttribute]
public static string GetScrollbarArrowColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarArrowColor")]
[DomAccessorAttribute]
public static void SetScrollbarArrowColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarDarkShadowColor")]
[DomAccessorAttribute]
public static string GetScrollbarDarkShadowColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarDarkShadowColor")]
[DomAccessorAttribute]
public static void SetScrollbarDarkShadowColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarFaceColor")]
[DomAccessorAttribute]
public static string GetScrollbarFaceColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarFaceColor")]
[DomAccessorAttribute]
public static void SetScrollbarFaceColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarHighlightColor")]
[DomAccessorAttribute]
public static string GetScrollbarHighlightColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarHighlightColor")]
[DomAccessorAttribute]
public static void SetScrollbarHighlightColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarShadowColor")]
[DomAccessorAttribute]
public static string GetScrollbarShadowColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarShadowColor")]
[DomAccessorAttribute]
public static void SetScrollbarShadowColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarTrackColor")]
[DomAccessorAttribute]
public static string GetScrollbarTrackColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("scrollbarTrackColor")]
[DomAccessorAttribute]
public static void SetScrollbarTrackColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("stroke")]
[DomAccessorAttribute]
public static string GetStroke(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("stroke")]
[DomAccessorAttribute]
public static void SetStroke(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeDasharray")]
[DomAccessorAttribute]
public static string GetStrokeDashArray(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeDasharray")]
[DomAccessorAttribute]
public static void SetStrokeDashArray(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeDashoffset")]
[DomAccessorAttribute]
public static string GetStrokeDashOffset(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeDashoffset")]
[DomAccessorAttribute]
public static void SetStrokeDashOffset(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeLinecap")]
[DomAccessorAttribute]
public static string GetStrokeLineCap(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeLinecap")]
[DomAccessorAttribute]
public static void SetStrokeLineCap(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeLinejoin")]
[DomAccessorAttribute]
public static string GetStrokeLineJoin(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeLinejoin")]
[DomAccessorAttribute]
public static void SetStrokeLineJoin(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeMiterlimit")]
[DomAccessorAttribute]
public static string GetStrokeMiterLimit(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeMiterlimit")]
[DomAccessorAttribute]
public static void SetStrokeMiterLimit(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeOpacity")]
[DomAccessorAttribute]
public static string GetStrokeOpacity(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeOpacity")]
[DomAccessorAttribute]
public static void SetStrokeOpacity(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("strokeWidth")]
[DomAccessorAttribute]
public static string GetStrokeWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("strokeWidth")]
[DomAccessorAttribute]
public static void SetStrokeWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("tableLayout")]
[DomAccessorAttribute]
public static string GetTableLayout(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("tableLayout")]
[DomAccessorAttribute]
public static void SetTableLayout(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textAlign")]
[DomAccessorAttribute]
public static string GetTextAlign(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textAlign")]
[DomAccessorAttribute]
public static void SetTextAlign(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textAlignLast")]
[DomAccessorAttribute]
public static string GetTextAlignLast(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textAlignLast")]
[DomAccessorAttribute]
public static void SetTextAlignLast(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textAnchor")]
[DomAccessorAttribute]
public static string GetTextAnchor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textAnchor")]
[DomAccessorAttribute]
public static void SetTextAnchor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textAutospace")]
[DomAccessorAttribute]
public static string GetTextAutospace(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textAutospace")]
[DomAccessorAttribute]
public static void SetTextAutospace(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textDecoration")]
[DomAccessorAttribute]
public static string GetTextDecoration(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textDecoration")]
[DomAccessorAttribute]
public static void SetTextDecoration(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textDecorationStyle")]
[DomAccessorAttribute]
public static string GetTextDecorationStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textDecorationStyle")]
[DomAccessorAttribute]
public static void SetTextDecorationStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textDecorationLine")]
[DomAccessorAttribute]
public static string GetTextDecorationLine(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textDecorationLine")]
[DomAccessorAttribute]
public static void SetTextDecorationLine(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textDecorationColor")]
[DomAccessorAttribute]
public static string GetTextDecorationColor(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textDecorationColor")]
[DomAccessorAttribute]
public static void SetTextDecorationColor(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textIndent")]
[DomAccessorAttribute]
public static string GetTextIndent(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textIndent")]
[DomAccessorAttribute]
public static void SetTextIndent(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textJustify")]
[DomAccessorAttribute]
public static string GetTextJustify(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textJustify")]
[DomAccessorAttribute]
public static void SetTextJustify(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textOverflow")]
[DomAccessorAttribute]
public static string GetTextOverflow(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textOverflow")]
[DomAccessorAttribute]
public static void SetTextOverflow(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textShadow")]
[DomAccessorAttribute]
public static string GetTextShadow(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textShadow")]
[DomAccessorAttribute]
public static void SetTextShadow(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textTransform")]
[DomAccessorAttribute]
public static string GetTextTransform(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textTransform")]
[DomAccessorAttribute]
public static void SetTextTransform(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("textUnderlinePosition")]
[DomAccessorAttribute]
public static string GetTextUnderlinePosition(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("textUnderlinePosition")]
[DomAccessorAttribute]
public static void SetTextUnderlinePosition(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("top")]
[DomAccessorAttribute]
public static string GetTop(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("top")]
[DomAccessorAttribute]
public static void SetTop(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transform")]
[DomAccessorAttribute]
public static string GetTransform(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transform")]
[DomAccessorAttribute]
public static void SetTransform(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transformOrigin")]
[DomAccessorAttribute]
public static string GetTransformOrigin(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transformOrigin")]
[DomAccessorAttribute]
public static void SetTransformOrigin(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transformStyle")]
[DomAccessorAttribute]
public static string GetTransformStyle(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transformStyle")]
[DomAccessorAttribute]
public static void SetTransformStyle(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transition")]
[DomAccessorAttribute]
public static string GetTransition(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transition")]
[DomAccessorAttribute]
public static void SetTransition(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transitionDelay")]
[DomAccessorAttribute]
public static string GetTransitionDelay(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transitionDelay")]
[DomAccessorAttribute]
public static void SetTransitionDelay(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transitionDuration")]
[DomAccessorAttribute]
public static string GetTransitionDuration(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transitionDuration")]
[DomAccessorAttribute]
public static void SetTransitionDuration(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transitionProperty")]
[DomAccessorAttribute]
public static string GetTransitionProperty(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transitionProperty")]
[DomAccessorAttribute]
public static void SetTransitionProperty(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("transitionTimingFunction")]
[DomAccessorAttribute]
public static string GetTransitionTimingFunction(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("transitionTimingFunction")]
[DomAccessorAttribute]
public static void SetTransitionTimingFunction(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("unicodeBidi")]
[DomAccessorAttribute]
public static string GetUnicodeBidi(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("unicodeBidi")]
[DomAccessorAttribute]
public static void SetUnicodeBidi(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("verticalAlign")]
[DomAccessorAttribute]
public static string GetVerticalAlign(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("verticalAlign")]
[DomAccessorAttribute]
public static void SetVerticalAlign(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("visibility")]
[DomAccessorAttribute]
public static string GetVisibility(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("visibility")]
[DomAccessorAttribute]
public static void SetVisibility(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("whiteSpace")]
[DomAccessorAttribute]
public static string GetWhiteSpace(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("whiteSpace")]
[DomAccessorAttribute]
public static void SetWhiteSpace(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("widows")]
[DomAccessorAttribute]
public static string GetWidows(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("widows")]
[DomAccessorAttribute]
public static void SetWidows(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("width")]
[DomAccessorAttribute]
public static string GetWidth(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("width")]
[DomAccessorAttribute]
public static void SetWidth(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("wordBreak")]
[DomAccessorAttribute]
public static string GetWordBreak(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("wordBreak")]
[DomAccessorAttribute]
public static void SetWordBreak(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("wordSpacing")]
[DomAccessorAttribute]
public static string GetWordSpacing(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("wordSpacing")]
[DomAccessorAttribute]
public static void SetWordSpacing(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("wordWrap")]
[DomAccessorAttribute]
public static string GetWordWrap(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("wordWrap")]
[DomAccessorAttribute]
public static void SetWordWrap(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("overflowWrap")]
[DomAccessorAttribute]
public static string GetOverflowWrap(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("overflowWrap")]
[DomAccessorAttribute]
public static void SetOverflowWrap(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("writingMode")]
[DomAccessorAttribute]
public static string GetWritingMode(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("writingMode")]
[DomAccessorAttribute]
public static void SetWritingMode(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("zIndex")]
[DomAccessorAttribute]
public static string GetZIndex(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("zIndex")]
[DomAccessorAttribute]
public static void SetZIndex(ICssStyleDeclaration style, string value);
    [ExtensionAttribute]
[DomNameAttribute("zoom")]
[DomAccessorAttribute]
public static string GetZoom(ICssStyleDeclaration style);
    [ExtensionAttribute]
[DomNameAttribute("zoom")]
[DomAccessorAttribute]
public static void SetZoom(ICssStyleDeclaration style, string value);
}
[ExtensionAttribute]
[DomExposedAttribute("PseudoElement")]
public static class AngleSharp.Css.Dom.StyleUtilityExtensions : object {
    [ExtensionAttribute]
[DomNameAttribute("cascadedStyle")]
[DomAccessorAttribute]
public static ICssStyleDeclaration GetCascadedStyle(IPseudoElement element);
    [ExtensionAttribute]
[DomNameAttribute("defaultStyle")]
[DomAccessorAttribute]
public static ICssStyleDeclaration GetDefaultStyle(IPseudoElement element);
    [ExtensionAttribute]
[DomNameAttribute("rawComputedStyle")]
[DomAccessorAttribute]
public static ICssStyleDeclaration GetRawComputedStyle(IPseudoElement element);
}
public enum AngleSharp.Css.Dom.SystemCursor : Enum {
    public byte value__;
    public static SystemCursor Auto;
    public static SystemCursor Default;
    public static SystemCursor None;
    public static SystemCursor ContextMenu;
    public static SystemCursor Help;
    public static SystemCursor Pointer;
    public static SystemCursor Progress;
    public static SystemCursor Wait;
    public static SystemCursor Cell;
    public static SystemCursor Crosshair;
    public static SystemCursor Text;
    public static SystemCursor VerticalText;
    public static SystemCursor Alias;
    public static SystemCursor Copy;
    public static SystemCursor Move;
    public static SystemCursor NoDrop;
    public static SystemCursor NotAllowed;
    public static SystemCursor EResize;
    public static SystemCursor NResize;
    public static SystemCursor NeResize;
    public static SystemCursor NwResize;
    public static SystemCursor SResize;
    public static SystemCursor SeResize;
    public static SystemCursor SwResize;
    public static SystemCursor WResize;
    public static SystemCursor EwResize;
    public static SystemCursor NsResize;
    public static SystemCursor NeswResize;
    public static SystemCursor NwseResize;
    public static SystemCursor ColResize;
    public static SystemCursor RowResize;
    public static SystemCursor AllScroll;
    public static SystemCursor ZoomIn;
    public static SystemCursor ZoomOut;
    public static SystemCursor Grab;
    public static SystemCursor Grabbing;
}
public enum AngleSharp.Css.Dom.SystemFont : Enum {
    public byte value__;
    public static SystemFont Caption;
    public static SystemFont Icon;
    public static SystemFont Menu;
    public static SystemFont MessageBox;
    public static SystemFont SmallCaption;
    public static SystemFont StatusBar;
}
public enum AngleSharp.Css.Dom.TextAlignLast : Enum {
    public byte value__;
    public static TextAlignLast Auto;
    public static TextAlignLast Start;
    public static TextAlignLast End;
    public static TextAlignLast Left;
    public static TextAlignLast Right;
    public static TextAlignLast Center;
    public static TextAlignLast Justify;
}
public enum AngleSharp.Css.Dom.TextAnchor : Enum {
    public byte value__;
    public static TextAnchor Start;
    public static TextAnchor Middle;
    public static TextAnchor End;
}
public enum AngleSharp.Css.Dom.TextDecorationLine : Enum {
    public byte value__;
    public static TextDecorationLine Underline;
    public static TextDecorationLine Overline;
    public static TextDecorationLine LineThrough;
    public static TextDecorationLine Blink;
}
public enum AngleSharp.Css.Dom.TextDecorationStyle : Enum {
    public byte value__;
    public static TextDecorationStyle Solid;
    public static TextDecorationStyle Double;
    public static TextDecorationStyle Dotted;
    public static TextDecorationStyle Dashed;
    public static TextDecorationStyle Wavy;
}
public enum AngleSharp.Css.Dom.TextJustify : Enum {
    public byte value__;
    public static TextJustify Auto;
    public static TextJustify InterWord;
    public static TextJustify InterIdeograph;
    public static TextJustify InterCluster;
    public static TextJustify Distribute;
    public static TextJustify DistributeAllLines;
    public static TextJustify DistributeCenterLast;
    public static TextJustify Kashida;
    public static TextJustify Newspaper;
}
public enum AngleSharp.Css.Dom.TextTransform : Enum {
    public byte value__;
    public static TextTransform None;
    public static TextTransform Capitalize;
    public static TextTransform Uppercase;
    public static TextTransform Lowercase;
    public static TextTransform FullWidth;
}
public enum AngleSharp.Css.Dom.UnicodeMode : Enum {
    public byte value__;
    public static UnicodeMode Normal;
    public static UnicodeMode Embed;
    public static UnicodeMode Isolate;
    public static UnicodeMode BidiOverride;
    public static UnicodeMode IsolateOverride;
    public static UnicodeMode Plaintext;
}
public enum AngleSharp.Css.Dom.UpdateFrequency : Enum {
    public byte value__;
    public static UpdateFrequency None;
    public static UpdateFrequency Slow;
    public static UpdateFrequency Normal;
}
internal class AngleSharp.Css.Dom.UrlFunction : DocumentFunction {
    private Url _expected;
    public UrlFunction(string url);
    public virtual bool Matches(Url actual);
}
internal class AngleSharp.Css.Dom.UrlPrefixFunction : DocumentFunction {
    public UrlPrefixFunction(string url);
    public virtual bool Matches(Url url);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Dom.ValidationExtensions : object {
    [ExtensionAttribute]
public static bool IsValid(ICssSupportsRule rule, IRenderDevice device);
    [ExtensionAttribute]
public static bool IsValid(ICssMediaRule rule, IRenderDevice device);
    [ExtensionAttribute]
public static bool IsValid(ICssDocumentRule rule, Url url);
}
public enum AngleSharp.Css.Dom.Whitespace : Enum {
    public byte value__;
    public static Whitespace Normal;
    public static Whitespace Pre;
    public static Whitespace NoWrap;
    public static Whitespace PreWrap;
    public static Whitespace PreLine;
}
internal static class AngleSharp.Css.Factory : object {
    public static DefaultFeatureValidatorFactory FeatureValidator;
    public static DefaultPseudoElementFactory PseudoElement;
    public static DefaultDocumentFunctionFactory DocumentFunction;
    public static DefaultDeclarationFactory Declaration;
    public static StyleAttributeObserver Observer;
    private static Factory();
}
public static class AngleSharp.Css.FeatureNames : object {
    public static string MinWidth;
    public static string MinHeight;
    public static string MinDeviceWidth;
    public static string MinDeviceHeight;
    public static string MinAspectRatio;
    public static string MinResolution;
    public static string MinColor;
    public static string MinColorIndex;
    public static string MinMonochrome;
    public static string MinDevicePixelRatio;
    public static string MaxWidth;
    public static string MaxHeight;
    public static string MaxDeviceWidth;
    public static string MaxDeviceHeight;
    public static string MaxAspectRatio;
    public static string MaxResolution;
    public static string MaxColor;
    public static string MaxColorIndex;
    public static string MaxMonochrome;
    public static string MaxDevicePixelRatio;
    public static string Width;
    public static string Height;
    public static string DeviceWidth;
    public static string DeviceHeight;
    public static string AspectRatio;
    public static string Resolution;
    public static string Color;
    public static string ColorIndex;
    public static string Monochrome;
    public static string Orientation;
    public static string Grid;
    public static string Scan;
    public static string DevicePixelRatio;
    public static string MinDeviceAspectRatio;
    public static string MaxDeviceAspectRatio;
    public static string DeviceAspectRatio;
    public static string UpdateFrequency;
    public static string Scripting;
    public static string Pointer;
    public static string Hover;
    private static FeatureNames();
}
internal class AngleSharp.Css.FeatureValidators.AspectRatioFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.ColorFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.ColorIndexFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.DeviceAspectRatioFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.DeviceHeightFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.DevicePixelRatioFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.DeviceWidthFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.GridFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.HeightFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.HoverFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.MonochromeFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.OrientationFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.PointerFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.ResolutionFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.ScanFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.ScriptingFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.UnknownFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.UpdateFrequencyFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
internal class AngleSharp.Css.FeatureValidators.WidthFeatureValidator : object {
    public sealed virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
[ExtensionAttribute]
internal static class AngleSharp.Css.FormatValue : object {
    public static string DoubleFixedPoint;
    [ExtensionAttribute]
public static string CssStringify(double value);
}
public static class AngleSharp.Css.FunctionNames : object {
    public static string Url;
    public static string UrlPrefix;
    public static string Domain;
    public static string Regexp;
    public static string Rgba;
    public static string Rgb;
    public static string Hsl;
    public static string Hsla;
    public static string Rect;
    public static string Attr;
    public static string FitContent;
    public static string Repeat;
    public static string Minmax;
    public static string Var;
    public static string LinearGradient;
    public static string RadialGradient;
    public static string ConicGradient;
    public static string RepeatingLinearGradient;
    public static string RepeatingRadialGradient;
    public static string RepeatingConicGradient;
    public static string Image;
    public static string Counter;
    public static string Counters;
    public static string Calc;
    public static string Toggle;
    public static string Translate;
    public static string TranslateX;
    public static string TranslateY;
    public static string TranslateZ;
    public static string Translate3d;
    public static string Matrix;
    public static string Matrix3d;
    public static string Rotate;
    public static string Rotate3d;
    public static string RotateX;
    public static string RotateY;
    public static string RotateZ;
    public static string Skew;
    public static string SkewX;
    public static string SkewY;
    public static string Scale;
    public static string Scale3d;
    public static string ScaleX;
    public static string ScaleY;
    public static string ScaleZ;
    public static string Steps;
    public static string CubicBezier;
    public static string Perspective;
    public static string Gray;
    public static string Hwb;
    public static string Hwba;
    public static string Lab;
    public static string Lch;
    public static string Oklab;
    public static string Oklch;
    public static string Content;
    public static string Running;
    private static FunctionNames();
}
public interface AngleSharp.Css.ICssDefaultStyleSheetProvider {
    public ICssStyleSheet Default { get; }
    public abstract virtual ICssStyleSheet get_Default();
    public abstract virtual void SetDefault(ICssStyleSheet sheet);
    public abstract virtual void SetDefault(string source);
    public abstract virtual void AppendDefault(string source);
}
public interface AngleSharp.Css.IDeclarationFactory {
    public abstract virtual DeclarationInfo Create(string propertyName);
}
public interface AngleSharp.Css.IDocumentFunctionFactory {
    public abstract virtual IDocumentFunction Create(string name, string url);
}
public interface AngleSharp.Css.IFeatureValidator {
    public abstract virtual bool Validate(IMediaFeature feature, IRenderDevice renderDevice);
}
public interface AngleSharp.Css.IFeatureValidatorFactory {
    public abstract virtual IFeatureValidator Create(string name);
}
internal static class AngleSharp.Css.InitialValues : object {
    public static ICssValue ColorDecl;
    public static ICssValue BackgroundColorDecl;
    public static ICssValue BackgroundImageDecl;
    public static ICssValue BackgroundRepeatHorizontalDecl;
    public static ICssValue BackgroundRepeatVerticalDecl;
    public static ICssValue BackgroundRepeatDecl;
    public static ICssValue BackgroundPositionXDecl;
    public static ICssValue BackgroundPositionYDecl;
    public static ICssValue BackgroundPositionDecl;
    public static ICssValue BackgroundSizeDecl;
    public static ICssValue BackgroundOriginDecl;
    public static ICssValue BackgroundClipDecl;
    public static ICssValue BackgroundAttachmentDecl;
    public static ICssValue BookmarkStateDecl;
    public static ICssValue BookmarkLabelDecl;
    public static ICssValue BookmarkLevelDecl;
    public static ICssValue FootnotePolicyDecl;
    public static ICssValue FootnoteDisplayDecl;
    public static ICssValue RunningDecl;
    public static ICssValue StringSetDecl;
    public static ICssValue FontStyleDecl;
    public static ICssValue FontVariantDecl;
    public static ICssValue FontWeightDecl;
    public static ICssValue FontStretchDecl;
    public static ICssValue FontSizeDecl;
    public static ICssValue FontFamilyDecl;
    public static ICssValue BorderWidthDecl;
    public static ICssValue BorderStyleDecl;
    public static ICssValue BorderColorDecl;
    public static ICssValue LineHeightDecl;
    public static ICssValue BorderTopWidthDecl;
    public static ICssValue BorderRightWidthDecl;
    public static ICssValue BorderBottomWidthDecl;
    public static ICssValue BorderLeftWidthDecl;
    public static ICssValue BorderTopStyleDecl;
    public static ICssValue BorderRightStyleDecl;
    public static ICssValue BorderBottomStyleDecl;
    public static ICssValue BorderLeftStyleDecl;
    public static ICssValue BorderTopColorDecl;
    public static ICssValue BorderRightColorDecl;
    public static ICssValue BorderBottomColorDecl;
    public static ICssValue BorderLeftColorDecl;
    public static ICssValue ColumnWidthDecl;
    public static ICssValue ColumnCountDecl;
    public static ICssValue ColumnRuleWidthDecl;
    public static ICssValue ColumnRuleStyleDecl;
    public static ICssValue ColumnRuleColorDecl;
    public static ICssValue AnimationNameDecl;
    public static ICssValue AnimationDurationDecl;
    public static ICssValue AnimationTimingFunctionDecl;
    public static ICssValue AnimationDelayDecl;
    public static ICssValue AnimationIterationCountDecl;
    public static ICssValue AnimationDirectionDecl;
    public static ICssValue AnimationFillModeDecl;
    public static ICssValue AnimationPlayStateDecl;
    public static ICssValue TransitionDelayDecl;
    public static ICssValue TransitionDurationDecl;
    public static ICssValue TransitionPropertyDecl;
    public static ICssValue TransitionTimingFunctionDecl;
    public static ICssValue DirectionDecl;
    public static ICssValue EmptyCellsDecl;
    public static ICssValue FlexGrowDecl;
    public static ICssValue FlexShrinkDecl;
    public static ICssValue FlexBasisDecl;
    public static ICssValue FlexWrapDecl;
    public static ICssValue FlexDirectionDecl;
    public static ICssValue FloatDecl;
    public static ICssValue BorderSpacingDecl;
    public static ICssValue BoxDecorationBreakDecl;
    public static ICssValue BoxShadowDecl;
    public static ICssValue BoxSizingDecl;
    public static ICssValue BreakAfterDecl;
    public static ICssValue BreakBeforeDecl;
    public static ICssValue BreakInsideDecl;
    public static ICssValue PageBreakInsideDecl;
    public static ICssValue PageBreakBeforeDecl;
    public static ICssValue PageBreakAfterDecl;
    public static ICssValue BottomDecl;
    public static ICssValue TopDecl;
    public static ICssValue LeftDecl;
    public static ICssValue RightDecl;
    public static ICssValue MinHeightDecl;
    public static ICssValue MinWidthDecl;
    public static ICssValue MaxHeightDecl;
    public static ICssValue MaxWidthDecl;
    public static ICssValue MarginLeftDecl;
    public static ICssValue MarginBottomDecl;
    public static ICssValue MarginRightDecl;
    public static ICssValue MarginTopDecl;
    public static ICssValue PaddingLeftDecl;
    public static ICssValue PaddingBottomDecl;
    public static ICssValue PaddingRightDecl;
    public static ICssValue PaddingTopDecl;
    public static ICssValue CaptionSideDecl;
    public static ICssValue CursorDecl;
    public static ICssValue OverflowWrapDecl;
    public static ICssValue WordSpacingDecl;
    public static ICssValue WordBreakDecl;
    public static ICssValue VisibilityDecl;
    public static ICssValue VerticalAlignDecl;
    public static ICssValue OpacityDecl;
    public static ICssValue OverflowDecl;
    public static ICssValue OutlineWidthDecl;
    public static ICssValue OutlineStyleDecl;
    public static ICssValue OutlineColorDecl;
    public static ICssValue TextTransformDecl;
    public static ICssValue TextShadowDecl;
    public static ICssValue TextRenderingDecl;
    public static ICssValue TextOverflowDecl;
    public static ICssValue TextOrientationDecl;
    public static ICssValue TextJustifyDecl;
    public static ICssValue TextIndentDecl;
    public static ICssValue TextAlignDecl;
    public static ICssValue TextAlignLastDecl;
    public static ICssValue TextDecorationLineDecl;
    public static ICssValue TextDecorationStyleDecl;
    public static ICssValue TextDecorationColorDecl;
    public static ICssValue TextAnchorDecl;
    public static ICssValue ListStyleTypeDecl;
    public static ICssValue ListStylePositionDecl;
    public static ICssValue ListStyleImageDecl;
    public static ICssValue LineBreakDecl;
    public static ICssValue GridTemplateRowsDecl;
    public static ICssValue GridTemplateColumnsDecl;
    public static ICssValue GridTemplateAreasDecl;
    public static ICssValue GridAutoRowsDecl;
    public static ICssValue GridAutoColumnsDecl;
    public static ICssValue GridAutoFlowDecl;
    public static ICssValue GridColumnGapDecl;
    public static ICssValue GridRowGapDecl;
    public static ICssValue ColumnGapDecl;
    public static ICssValue RowGapDecl;
    public static ICssValue PerspectiveDecl;
    public static ICssValue PerspectiveOriginDecl;
    public static ICssValue PositionDecl;
    public static ICssValue TransformDecl;
    public static ICssValue TransformStyleDecl;
    public static ICssValue TransformOriginDecl;
    public static ICssValue TableLayoutDecl;
    public static ICssValue ClearDecl;
    public static ICssValue ClipDecl;
    public static ICssValue StrokeOpacityDecl;
    public static ICssValue StrokeLinecapDecl;
    public static ICssValue StrokeLinejoinDecl;
    public static ICssValue StrokeDashoffsetDecl;
    public static ICssValue StrokeDasharrayDecl;
    public static ICssValue StrokeWidthDecl;
    public static ICssValue StrokeMiterlimitDecl;
    public static ICssValue RubyPositionDecl;
    public static ICssValue RubyOverhangDecl;
    public static ICssValue RubyAlignDecl;
    public static ICssValue ResizeDecl;
    public static ICssValue QuotesDecl;
    public static ICssValue PointerEventsDecl;
    public static ICssValue ContentDecl;
    public static ICssValue ContentVisibilityDecl;
    public static ICssValue CounterIncrementDecl;
    public static ICssValue CounterResetDecl;
    public static ICssValue DisplayDecl;
    public static ICssValue ColumnFillDecl;
    public static ICssValue ColumnSpanDecl;
    public static ICssValue BackfaceVisibilityDecl;
    public static ICssValue BorderImageSourceDecl;
    public static ICssValue BorderImageSliceDecl;
    public static ICssValue BorderImageWidthDecl;
    public static ICssValue BorderImageOutsetDecl;
    public static ICssValue BorderImageRepeatDecl;
    public static ICssValue BorderCollapseDecl;
    public static ICssValue BorderRadiusDecl;
    public static ICssValue AlignSelfDecl;
    public static ICssValue AlignItemsDecl;
    public static ICssValue AlignContentDecl;
    public static ICssValue JustifyContentDecl;
    public static ICssValue JustifyItemsDecl;
    public static ICssValue JustifySelfDecl;
    public static ICssValue UnicodeBidiDecl;
    public static ICssValue WordWrapDecl;
    public static ICssValue WidowsDecl;
    public static ICssValue OrphansDecl;
    public static ICssValue OrderDecl;
    public static ICssValue ObjectFitDecl;
    public static ICssValue ObjectPositionDecl;
    public static ICssValue WhiteSpaceDecl;
    public static ICssValue ZIndexDecl;
    public static ICssValue WidthDecl;
    public static ICssValue HeightDecl;
    public static ICssValue ScrollbarTrackColorDecl;
    public static ICssValue ScrollbarShadowColorDecl;
    public static ICssValue ScrollbarHighlightColorDecl;
    public static ICssValue ScrollbarFaceColorDecl;
    public static ICssValue ScrollbarDarkshadowColorDecl;
    public static ICssValue ScrollbarBaseColorDecl;
    public static ICssValue ScrollbarArrowColorDecl;
    public static ICssValue Scrollbar3dLightColorDecl;
    public static ICssValue LetterSpacingDecl;
    public static ICssValue FontSizeAdjustDecl;
    public static ICssValue ScrollSnapTypeDecl;
    public static ICssValue ScrollMarginDecl;
    public static ICssValue ScrollSnapAlignDecl;
    private static InitialValues();
}
public interface AngleSharp.Css.IPseudoElementFactory {
    public abstract virtual IPseudoElement Create(IElement host, string type);
}
public interface AngleSharp.Css.IRenderDevice {
    public int ViewPortWidth { get; }
    public int ViewPortHeight { get; }
    public bool IsInterlaced { get; }
    public bool IsScripting { get; }
    public bool IsGrid { get; }
    public int DeviceWidth { get; }
    public int DeviceHeight { get; }
    public int Resolution { get; }
    public int Frequency { get; }
    public int ColorBits { get; }
    public int MonochromeBits { get; }
    public DeviceCategory Category { get; }
    public abstract virtual int get_ViewPortWidth();
    public abstract virtual int get_ViewPortHeight();
    public abstract virtual bool get_IsInterlaced();
    public abstract virtual bool get_IsScripting();
    public abstract virtual bool get_IsGrid();
    public abstract virtual int get_DeviceWidth();
    public abstract virtual int get_DeviceHeight();
    public abstract virtual int get_Resolution();
    public abstract virtual int get_Frequency();
    public abstract virtual int get_ColorBits();
    public abstract virtual int get_MonochromeBits();
    public abstract virtual DeviceCategory get_Category();
}
public interface AngleSharp.Css.IRenderDimensions {
    public double RenderWidth { get; }
    public double RenderHeight { get; }
    public double FontSize { get; }
    public abstract virtual double get_RenderWidth();
    public abstract virtual double get_RenderHeight();
    public abstract virtual double get_FontSize();
}
public interface AngleSharp.Css.IValueAggregator {
    public abstract virtual ICssValue[] Split(ICssValue value);
    public abstract virtual ICssValue Merge(ICssValue[] values);
}
public interface AngleSharp.Css.IValueConverter {
    public abstract virtual ICssValue Convert(StringSource source);
}
internal static class AngleSharp.Css.Map : object {
    public static Dictionary`2<string, Whitespace> Whitespaces;
    public static Dictionary`2<string, Angle> GradientAngles;
    public static Dictionary`2<string, TextTransform> TextTransforms;
    public static Dictionary`2<string, TextAlignLast> TextAlignLasts;
    public static Dictionary`2<string, TextAnchor> TextAnchors;
    public static Dictionary`2<string, TextJustify> TextJustifies;
    public static Dictionary`2<string, HorizontalAlignment> HorizontalAlignments;
    public static Dictionary`2<string, VerticalAlignment> VerticalAlignments;
    public static Dictionary`2<string, LineStyle> LineStyles;
    public static Dictionary`2<string, BoxModel> BoxModels;
    public static Dictionary`2<string, ICssTimingFunctionValue> TimingFunctions;
    public static Dictionary`2<string, AnimationFillStyle> AnimationFillStyles;
    public static Dictionary`2<string, AnimationDirection> AnimationDirections;
    public static Dictionary`2<string, Visibility> Visibilities;
    public static Dictionary`2<string, PlayState> PlayStates;
    public static Dictionary`2<string, FontVariant> FontVariants;
    public static Dictionary`2<string, DirectionMode> DirectionModes;
    public static Dictionary`2<string, ListStyle> ListStyles;
    public static Dictionary`2<string, ListPosition> ListPositions;
    public static Dictionary`2<string, Length> FontSizes;
    public static Dictionary`2<string, TextDecorationStyle> TextDecorationStyles;
    public static Dictionary`2<string, TextDecorationLine> TextDecorationLines;
    public static Dictionary`2<string, BorderRepeat> BorderRepeats;
    public static Dictionary`2<string, Length> BorderWidths;
    public static Dictionary`2<string, string> FontFamilies;
    public static Dictionary`2<string, BackgroundAttachment> BackgroundAttachments;
    public static Dictionary`2<string, FontStyle> FontStyles;
    public static Dictionary`2<string, FontStretch> FontStretches;
    public static Dictionary`2<string, BreakMode> BreakModes;
    public static Dictionary`2<string, BreakMode> PageBreakModes;
    public static Dictionary`2<string, BreakMode> BreakInsideModes;
    public static Dictionary`2<string, BreakMode> PageBreakInsideModes;
    public static Dictionary`2<string, double> HorizontalModes;
    public static Dictionary`2<string, double> VerticalModes;
    public static Dictionary`2<string, UnicodeMode> UnicodeModes;
    public static Dictionary`2<string, SystemCursor> SystemCursors;
    public static Dictionary`2<string, PositionMode> PositionModes;
    public static Dictionary`2<string, OverflowMode> OverflowModes;
    public static Dictionary`2<string, OverflowMode> OverflowExtendedModes;
    public static Dictionary`2<string, Floating> Floatings;
    public static Dictionary`2<string, DisplayMode> DisplayModes;
    public static Dictionary`2<string, ClearMode> ClearModes;
    public static Dictionary`2<string, BackgroundRepeat> BackgroundRepeats;
    public static Dictionary`2<string, BlendMode> BlendModes;
    public static Dictionary`2<string, UpdateFrequency> UpdateFrequencies;
    public static Dictionary`2<string, ScriptingState> ScriptingStates;
    public static Dictionary`2<string, PointerAccuracy> PointerAccuracies;
    public static Dictionary`2<string, HoverAbility> HoverAbilities;
    public static Dictionary`2<string, SizeMode> RadialGradientSizeModes;
    public static Dictionary`2<string, ObjectFitting> ObjectFittings;
    public static Dictionary`2<string, FontWeight> FontWeights;
    public static Dictionary`2<string, SystemFont> SystemFonts;
    public static Dictionary`2<string, StrokeLinecap> StrokeLinecaps;
    public static Dictionary`2<string, StrokeLinejoin> StrokeLinejoins;
    public static Dictionary`2<string, WordBreak> WordBreaks;
    public static Dictionary`2<string, OverflowWrap> OverflowWraps;
    public static Dictionary`2<string, ResizeMode> ResizeModes;
    public static Dictionary`2<string, RubyAlignment> RubyAlignments;
    public static Dictionary`2<string, RubyPosition> RubyPositions;
    public static Dictionary`2<string, RubyOverhangMode> RubyOverhangModes;
    public static Dictionary`2<string, PointerEvent> PointerEvents;
    public static Dictionary`2<string, FlexDirection> FlexDirections;
    public static Dictionary`2<string, FlexWrapMode> FlexWrapModes;
    public static Dictionary`2<string, FlexContentMode> JustifyContentModes;
    public static Dictionary`2<string, FlexContentMode> AlignContentModes;
    public static Dictionary`2<string, FlexContentMode> AlignItemsModes;
    public static Dictionary`2<string, FlexContentMode> AlignSelfModes;
    public static Dictionary`2<string, BookmarkState> BookmarkStates;
    public static Dictionary`2<string, FootnotePolicy> FootnotePolicies;
    public static Dictionary`2<string, FootnoteDisplay> FootnoteDisplays;
    public static Dictionary`2<string, Sizing> Sizings;
    public static Dictionary`2<string, Visibility> ContentVisibilities;
    public static Dictionary`2<string, ScrollSnapAxis> ScrollSnapAxises;
    public static Dictionary`2<string, ScrollSnapStrictness> ScrollSnapStrictnesses;
    public static Dictionary`2<string, ScrollSnapAlign> ScrollSnapAlignments;
    private static Map();
}
public class AngleSharp.Css.MinifyStyleFormatter : object {
    [CompilerGeneratedAttribute]
private bool <ShouldKeepComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldKeepEmptyRules>k__BackingField;
    public bool ShouldKeepComments { get; public set; }
    public bool ShouldKeepEmptyRules { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepComments();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepEmptyRules();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepEmptyRules(bool value);
    private sealed virtual override string AngleSharp.IStyleFormatter.Sheet(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.BlockRules(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.Declaration(string name, string value, bool important);
    private sealed virtual override string AngleSharp.IStyleFormatter.BlockDeclarations(IEnumerable`1<IStyleFormattable> declarations);
    private sealed virtual override string AngleSharp.IStyleFormatter.Rule(string name, string value);
    private sealed virtual override string AngleSharp.IStyleFormatter.Rule(string name, string prelude, string rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.Comment(string data);
    private static bool IsNotEmpty(IEnumerable`1<IStyleFormattable> rules);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.CalcParser : object {
    [ExtensionAttribute]
public static CssCalcValue ParseCalc(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseExpression(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseAddExpression(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseSubExpression(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseMulExpression(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseDivExpression(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseBracketExpression(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseAtomicExpression(StringSource source);
}
[ExtensionAttribute]
internal static class AngleSharp.Css.Parser.ColorParser : object {
    private static Dictionary`2<string, Func`2<StringSource, Nullable`1<Color>>> ColorFunctions;
    private static ColorParser();
    [ExtensionAttribute]
public static Nullable`1<Color> ParseColor(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Color> ParseCurrentColor(StringSource source);
    private static Nullable`1<Color> Start(StringSource source);
    private static Nullable`1<Color> Literal(StringSource source);
    private static Nullable`1<Color> ParseRgba(StringSource source);
    private static Nullable`1<Color> ParseRgbaModern(StringSource source);
    private static Nullable`1<Color> ParseRgbaLegacy(StringSource source);
    private static Nullable`1<Color> ParseHsla(StringSource source);
    private static Nullable`1<Color> ParseGray(StringSource source);
    private static Nullable`1<Color> ParseLab(StringSource source);
    private static Nullable`1<Color> ParseLch(StringSource source);
    private static Nullable`1<Color> ParseOklab(StringSource source);
    private static Nullable`1<Color> ParseOklch(StringSource source);
    private static Nullable`1<Color> ParseHwba(StringSource source);
    private static Nullable`1<double> ParseLabComponent(StringSource source);
    private static Nullable`1<byte> ParseRgbOrNoneComponent(StringSource source);
    private static Nullable`1<byte> ParseRgbComponent(StringSource source);
    private static Nullable`1<double> ParseAlpha(StringSource source);
    private static Nullable`1<double> ParseAngle(StringSource source);
    private static bool Check(char closingBracket, char firstComma, char secondComma, char thirdComma);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.CompoundParser : object {
    [ExtensionAttribute]
public static CssTupleValue ParseQuotes(StringSource source);
    [ExtensionAttribute]
public static CssBorderImageSliceValue ParseBorderImageSlice(StringSource source);
    [ExtensionAttribute]
public static CssImageRepeatsValue ParseBackgroundRepeat(StringSource source);
    [ExtensionAttribute]
public static ICssImageValue ParseImageSource(StringSource source);
    [ExtensionAttribute]
public static CssPeriodicValue`1<T> ParsePeriodic(StringSource source, Func`2<StringSource, T> converter);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.ConditionParser : object {
    internal static IConditionFunction Parse(string str, IBrowsingContext context);
    [ExtensionAttribute]
public static IConditionFunction ParseConditionFunction(StringSource source, IBrowsingContext context);
    [ExtensionAttribute]
private static IConditionFunction Condition(StringSource source, IBrowsingContext context);
    [ExtensionAttribute]
private static IConditionFunction Negation(StringSource source, IBrowsingContext context);
    [ExtensionAttribute]
private static IConditionFunction ConjunctionOrDisjunction(StringSource source, IBrowsingContext context);
    [ExtensionAttribute]
private static IConditionFunction Group(StringSource source, IBrowsingContext context);
    [ExtensionAttribute]
private static IConditionFunction Declaration(StringSource source, IBrowsingContext context);
    [ExtensionAttribute]
private static IEnumerable`1<IConditionFunction> Scan(StringSource source, string keyword, IConditionFunction condition, IBrowsingContext context);
}
internal class AngleSharp.Css.Parser.CssBuilder : object {
    private CssTokenizer _tokenizer;
    private CssParserOptions _options;
    private IBrowsingContext _context;
    public CssBuilder(CssParserOptions options, CssTokenizer tokenizer, IBrowsingContext context);
    public ICssRule CreateRule(ICssStyleSheet sheet, CssToken token);
    private ICssRule CreateStyleRule(ICssStyleSheet sheet, CssToken token);
    private ICssRule CreateAtRule(ICssStyleSheet sheet, CssToken token);
    private CssCharsetRule CreateCharset(CssCharsetRule rule, CssToken current);
    private CssDocumentRule CreateDocument(CssDocumentRule rule, CssToken current);
    private CssViewportRule CreateViewport(CssViewportRule rule, CssToken current);
    private CssFontFaceRule CreateFontFace(CssFontFaceRule rule, CssToken current);
    private CssImportRule CreateImport(CssImportRule rule, CssToken current);
    private CssKeyframesRule CreateKeyframes(CssKeyframesRule rule, CssToken current);
    private CssMediaRule CreateMedia(CssMediaRule rule, CssToken current);
    private CssNamespaceRule CreateNamespace(CssNamespaceRule rule, CssToken current);
    private CssPageRule CreatePage(CssPageRule rule, CssToken current);
    private CssSupportsRule CreateSupports(CssSupportsRule rule, CssToken current);
    private CssFontFeatureValuesRule CreateFontFeatureValues(CssFontFeatureValuesRule rule, CssToken current);
    private CssCounterStyleRule CreateCounterStyle(CssCounterStyleRule rule, CssToken current);
    public CssStyleRule CreateStyle(CssStyleRule rule, CssToken current);
    public CssKeyframeRule CreateKeyframeRule(CssKeyframeRule rule, CssToken current);
    private CssKeyframesRule FillKeyframeRules(CssKeyframesRule parentRule);
    private CssDeclarationRule FillDeclarations(CssDeclarationRule rule);
    private CssUnknownRule CreateUnknownAtRule(ICssStyleSheet sheet, CssToken current);
    private bool FillRules(CssGroupingRule group);
    public TextPosition CreateRules(CssStyleSheet sheet);
    public CssStyleDeclaration FillDeclarations(CssStyleDeclaration style, CssToken token);
    public void CreateDeclarationWith(ICssProperties properties, CssToken& token);
    private void JumpToEnd(CssToken& current);
    private void JumpToRuleEnd(CssToken& current);
    private void JumpToArgEnd(CssToken& current);
    private void JumpToDeclEnd(CssToken& current);
    private CssToken NextToken();
    private void CollectTrivia(CssToken& token);
    private void SkipDeclarations(CssToken token);
    private void RaiseErrorOccurred(CssParseError code, TextPosition position);
    private string CreateValue(CssToken& token, Boolean& important);
    private string GetArgument(CssToken& token);
    private string GetRuleName(CssToken& token);
}
public enum AngleSharp.Css.Parser.CssParseError : Enum {
    public byte value__;
    [DomDescriptionAttribute("Unexpected end of the given file.")]
public static CssParseError EOF;
    [DomDescriptionAttribute("The provided character is not valid at the given position.")]
public static CssParseError InvalidCharacter;
    [DomDescriptionAttribute("No block can start at the current position.")]
public static CssParseError InvalidBlockStart;
    [DomDescriptionAttribute("The given token is not valid at the current position.")]
public static CssParseError InvalidToken;
    [DomDescriptionAttribute("An expected colon is missing.")]
public static CssParseError ColonMissing;
    [DomDescriptionAttribute("An expected identifier could not be found.")]
public static CssParseError IdentExpected;
    [DomDescriptionAttribute("An given input has not been expected.")]
public static CssParseError InputUnexpected;
    [DomDescriptionAttribute("This position does not support a linebreak (LF, FF).")]
public static CssParseError LineBreakUnexpected;
    [DomDescriptionAttribute("The name of the @-rule is unknown.")]
public static CssParseError UnknownAtRule;
    [DomDescriptionAttribute("The provided selector is invalid.")]
public static CssParseError InvalidSelector;
    [DomDescriptionAttribute("The provided keyframe selector is invalid.")]
public static CssParseError InvalidKeyframe;
    [DomDescriptionAttribute("The value of the declaration could not be found.")]
public static CssParseError ValueMissing;
    [DomDescriptionAttribute("The value is invalid and cannot be used.")]
public static CssParseError InvalidValue;
    [DomDescriptionAttribute("The name of the declaration is unknown.")]
public static CssParseError UnknownDeclarationName;
}
[ExtensionAttribute]
internal static class AngleSharp.Css.Parser.CssParseErrorExtensions : object {
    [ExtensionAttribute]
public static int GetCode(CssParseError code);
}
public class AngleSharp.Css.Parser.CssParser : EventTarget {
    private CssParserOptions _options;
    private IBrowsingContext _context;
    public CssParserOptions Options { get; }
    public CssParser(CssParserOptions options);
    internal CssParser(IBrowsingContext context);
    public CssParser(CssParserOptions options, IBrowsingContext context);
    public sealed virtual void add_Parsing(DomEventHandler value);
    public sealed virtual void remove_Parsing(DomEventHandler value);
    public sealed virtual void add_Parsed(DomEventHandler value);
    public sealed virtual void remove_Parsed(DomEventHandler value);
    public sealed virtual void add_Error(DomEventHandler value);
    public sealed virtual void remove_Error(DomEventHandler value);
    public CssParserOptions get_Options();
    public sealed virtual ICssStyleSheet ParseStyleSheet(string content);
    public sealed virtual ICssStyleSheet ParseStyleSheet(Stream content);
    [AsyncStateMachineAttribute("AngleSharp.Css.Parser.CssParser/<ParseStyleSheetAsync>d__19")]
public sealed virtual Task`1<ICssStyleSheet> ParseStyleSheetAsync(string content, CancellationToken cancelToken);
    [AsyncStateMachineAttribute("AngleSharp.Css.Parser.CssParser/<ParseStyleSheetAsync>d__20")]
public sealed virtual Task`1<ICssStyleSheet> ParseStyleSheetAsync(Stream content, CancellationToken cancelToken);
    public sealed virtual ICssRule ParseRule(ICssStyleSheet owner, string ruleText);
    public sealed virtual ICssKeyframeRule ParseKeyframeRule(ICssStyleSheet owner, string ruleText);
    public sealed virtual ICssStyleDeclaration ParseDeclaration(string declarationText);
    public sealed virtual Task`1<ICssStyleSheet> ParseStyleSheetAsync(ICssStyleSheet sheet, CancellationToken cancelToken);
    internal ICssProperty ParseProperty(string propertyText);
    internal ICssStyleSheet ParseStylesheet(TextSource source);
    [AsyncStateMachineAttribute("AngleSharp.Css.Parser.CssParser/<ParseStylesheetAsync>d__27")]
internal Task`1<ICssStyleSheet> ParseStylesheetAsync(CssStyleSheet sheet, CancellationToken cancel);
    [AsyncStateMachineAttribute("AngleSharp.Css.Parser.CssParser/<ParseChildStyleSheetAsync>d__28")]
private Task`1<ICssStyleSheet> ParseChildStyleSheetAsync(IDownload download, ICssStyleSheet parent, CancellationToken cancel);
    private T Parse(string source, Func`3<CssBuilder, CssToken, T> create);
    private T Parse(string source, Func`3<CssBuilder, CssToken, Tuple`2<T, CssToken>> create);
    private CssTokenizer CreateTokenizer(string sourceCode);
    private CssTokenizer CreateTokenizer(TextSource source);
    private static bool IsRecursion(ICssStyleSheet sheet, Url url);
    [CompilerGeneratedAttribute]
private void <CreateTokenizer>b__32_0(object _, CssErrorEvent ev);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.CssParserExtensions : object {
    [ExtensionAttribute]
public static Task`1<ICssStyleSheet> ParseStyleSheetAsync(ICssParser parser, string content);
    [ExtensionAttribute]
public static Task`1<ICssStyleSheet> ParseStyleSheetAsync(ICssParser parser, Stream content);
    [ExtensionAttribute]
public static Task`1<ICssStyleSheet> ParseStyleSheetAsync(ICssParser parser, ICssStyleSheet sheet);
}
public class AngleSharp.Css.Parser.CssParserOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsIncludingUnknownDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIncludingUnknownRules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsToleratingInvalidSelectors>k__BackingField;
    public bool IsIncludingUnknownDeclarations { get; public set; }
    public bool IsIncludingUnknownRules { get; public set; }
    public bool IsToleratingInvalidSelectors { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsIncludingUnknownDeclarations();
    [CompilerGeneratedAttribute]
public void set_IsIncludingUnknownDeclarations(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsIncludingUnknownRules();
    [CompilerGeneratedAttribute]
public void set_IsIncludingUnknownRules(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsToleratingInvalidSelectors();
    [CompilerGeneratedAttribute]
public void set_IsToleratingInvalidSelectors(bool value);
}
[ExtensionAttribute]
internal static class AngleSharp.Css.Parser.CssTokenExtensions : object {
    [ExtensionAttribute]
public static bool Is(CssToken token, CssTokenType a, CssTokenType b);
    [ExtensionAttribute]
public static bool IsNot(CssToken token, CssTokenType a, CssTokenType b);
    [ExtensionAttribute]
public static bool IsNot(CssToken token, CssTokenType a, CssTokenType b, CssTokenType c);
}
internal class AngleSharp.Css.Parser.CssTokenizer : BaseTokenizer {
    private TextPosition _position;
    [CompilerGeneratedAttribute]
private EventHandler`1<CssErrorEvent> Error;
    public CssTokenizer(TextSource source);
    [CompilerGeneratedAttribute]
public void add_Error(EventHandler`1<CssErrorEvent> value);
    [CompilerGeneratedAttribute]
public void remove_Error(EventHandler`1<CssErrorEvent> value);
    public CssToken Get();
    public string ContentFrom(int position);
    internal void RaiseErrorOccurred(CssParseError error, TextPosition position);
    private CssToken Data(char current);
    private CssToken FoundU(char previous);
    private CssToken StringDQ();
    private CssToken StringSQ();
    private CssToken HashStart();
    private CssToken HashRest();
    private CssToken Comment();
    private CssToken AtKeywordStart();
    private CssToken AtKeywordRest(char current);
    private CssToken IdentStart(char current);
    private CssToken IdentRest(char current);
    private CssToken TransformFunctionWhitespace(char current);
    private CssToken NumberStart(char current);
    private CssToken NumberRest();
    private CssToken NumberFraction();
    private CssToken Dimension();
    private CssToken SciNotation();
    private CssToken UrlStart();
    private CssToken UrlDQ();
    private CssToken UrlSQ();
    private CssToken UrlUQ(char current);
    private CssToken UrlEnd();
    private CssToken UrlBad();
    private CssToken UnicodeRange(char current);
    private CssToken NewMatch(string data);
    private CssToken NewColumn();
    private CssToken NewCloseCurly();
    private CssToken NewOpenCurly();
    private CssToken NewCloseSquare();
    private CssToken NewOpenSquare();
    private CssToken NewOpenComment();
    private CssToken NewSemicolon();
    private CssToken NewColon();
    private CssToken NewCloseComment();
    private CssToken NewComma();
    private CssToken NewCloseRound();
    private CssToken NewOpenRound();
    private CssToken NewString(string value, bool bad);
    private CssToken NewHash(string data);
    private CssToken NewComment(string data, bool bad);
    private CssToken NewAtKeyword(string data);
    private CssToken NewIdent(string data);
    private CssToken NewFunction(string data);
    private CssToken NewPercentage(string data);
    private CssToken NewDimension(string data);
    private CssToken NewUrl(string data, bool bad);
    private CssToken NewRange(string data);
    private CssToken NewWhitespace(char c);
    private CssToken NewNumber(string data);
    private CssToken NewDelimiter(char c);
    private CssToken NewEof();
    private CssToken NumberExponential();
    private CssToken NumberDash();
    private string ConsumeEscape(char current);
    private bool IsValidEscape(char current);
    private void RaiseErrorOccurred(CssParseError code);
}
internal enum AngleSharp.Css.Parser.CssTokenType : Enum {
    public byte value__;
    public static CssTokenType String;
    public static CssTokenType Url;
    public static CssTokenType Color;
    public static CssTokenType Hash;
    public static CssTokenType Comment;
    public static CssTokenType AtKeyword;
    public static CssTokenType Ident;
    public static CssTokenType Function;
    public static CssTokenType Number;
    public static CssTokenType Percentage;
    public static CssTokenType Dimension;
    public static CssTokenType Range;
    public static CssTokenType Cdo;
    public static CssTokenType Cdc;
    public static CssTokenType Column;
    public static CssTokenType Delim;
    public static CssTokenType Match;
    public static CssTokenType RoundBracketOpen;
    public static CssTokenType RoundBracketClose;
    public static CssTokenType CurlyBracketOpen;
    public static CssTokenType CurlyBracketClose;
    public static CssTokenType SquareBracketOpen;
    public static CssTokenType SquareBracketClose;
    public static CssTokenType Colon;
    public static CssTokenType Comma;
    public static CssTokenType Semicolon;
    public static CssTokenType Whitespace;
    public static CssTokenType EndOfFile;
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.CssUriParser : object {
    [ExtensionAttribute]
public static CssUrlValue ParseUri(StringSource source);
    private static CssUrlValue DoubleQuoted(StringSource source);
    private static CssUrlValue SingleQuoted(StringSource source);
    private static CssUrlValue Unquoted(StringSource source);
    private static CssUrlValue End(StringSource source, StringBuilder buffer);
    private static CssUrlValue Bad(StringSource source, StringBuilder buffer);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.DocumentFunctionParser : object {
    internal static IEnumerable`1<IDocumentFunction> Parse(string str, IDocumentFunctionFactory factory);
    [ExtensionAttribute]
public static IEnumerable`1<IDocumentFunction> ParseDocumentFunctions(StringSource source, IDocumentFunctionFactory factory);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.FunctionParser : object {
    [ExtensionAttribute]
public static CssAttrValue ParseAttr(StringSource source);
    [ExtensionAttribute]
public static CssReferenceValue ParseVars(StringSource source);
    [ExtensionAttribute]
public static CssVarValue ParseVar(StringSource source);
    [ExtensionAttribute]
public static CssContentValue ParseContent(StringSource source);
    [ExtensionAttribute]
public static CssRunningValue ParseRunning(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<CounterDefinition> ParseCounter(StringSource source);
    private static Nullable`1<CounterDefinition> ParseCounterStyle(StringSource source, string ident, string separator, char f);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.GradientParser : object {
    private static Dictionary`2<string, Func`2<StringSource, ICssGradientFunctionValue>> GradientFunctions;
    private static GradientParser();
    [ExtensionAttribute]
public static ICssGradientFunctionValue ParseGradient(StringSource source);
    private static ICssGradientFunctionValue ParseLinearGradient(StringSource source);
    private static ICssGradientFunctionValue ParseRepeatingLinearGradient(StringSource source);
    private static ICssGradientFunctionValue ParseLinearGradient(StringSource source, bool repeating);
    private static ICssGradientFunctionValue ParseRadialGradient(StringSource source);
    private static ICssGradientFunctionValue ParseRepeatingRadialGradient(StringSource source);
    private static ICssGradientFunctionValue ParseRadialGradient(StringSource source, bool repeating);
    private static ICssGradientFunctionValue ParseConicGradient(StringSource source);
    private static ICssGradientFunctionValue ParseRepeatingConicGradient(StringSource source);
    private static ICssGradientFunctionValue ParseConicGradient(StringSource source, bool repeating);
    private static CssGradientStopValue[] ParseGradientStops(StringSource source);
    private static CssGradientStopValue ParseGradientStop(StringSource source);
    private static ICssValue ParseLinearAngle(StringSource source);
    private static ICssValue ParseLinearAngleKeywords(StringSource source);
    private static Nullable`1<RadialOptions> ParseRadialOptions(StringSource source);
    private static Nullable`1<SizeMode> ToSizeMode(StringSource source);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.GridParser : object {
    [ExtensionAttribute]
public static ICssValue ParseGridTemplate(StringSource source);
    [ExtensionAttribute]
private static Tuple`4<Nullable`1<LineNames>, string, ICssValue, Nullable`1<LineNames>> ParseGridTemplateAlternative(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<LineNames> ParseLineNames(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseFixedSize(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseTrackSize(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseFixedRepeat(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseAutoRepeat(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseTrackRepeat(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseAutoCount(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseIntegerCount(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseRepeat(StringSource source, Func`2<StringSource, ICssValue> parseCount, Func`2<StringSource, ICssValue> parseValue);
    [ExtensionAttribute]
private static ICssValue ParseFixedRepeatValue(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseTrackRepeatValue(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseTrackList(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseExplicitTrackList(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseAutoTrackList(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseRepeatValue(StringSource source, Func`2<StringSource, ICssValue> parseTrack, bool hasSize);
}
public interface AngleSharp.Css.Parser.ICssParser {
    public abstract virtual ICssStyleSheet ParseStyleSheet(string content);
    public abstract virtual ICssStyleSheet ParseStyleSheet(Stream content);
    public abstract virtual ICssRule ParseRule(ICssStyleSheet owner, string content);
    public abstract virtual ICssKeyframeRule ParseKeyframeRule(ICssStyleSheet owner, string content);
    public abstract virtual ICssStyleDeclaration ParseDeclaration(string content);
    public abstract virtual Task`1<ICssStyleSheet> ParseStyleSheetAsync(string content, CancellationToken cancelToken);
    public abstract virtual Task`1<ICssStyleSheet> ParseStyleSheetAsync(Stream content, CancellationToken cancelToken);
    public abstract virtual Task`1<ICssStyleSheet> ParseStyleSheetAsync(ICssStyleSheet sheet, CancellationToken cancelToken);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.IdentParser : object {
    private static HashSet`1<string> Animatables;
    private static IdentParser();
    [ExtensionAttribute]
public static string ParseNormalizedIdent(StringSource source);
    [ExtensionAttribute]
public static string ParseCustomIdent(StringSource source);
    [ExtensionAttribute]
public static string ParseIdent(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseIdentAsValue(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseConstant(StringSource source, IDictionary`2<string, T> values);
    [ExtensionAttribute]
public static Nullable`1<Constant`1<T>> ParseStatic(StringSource source, IDictionary`2<string, T> values);
    [ExtensionAttribute]
public static bool IsFunction(StringSource source, string name);
    [ExtensionAttribute]
public static bool IsIdentifier(StringSource source, string identifier);
    [ExtensionAttribute]
public static ICssValue ParseFontFamily(StringSource source);
    [ExtensionAttribute]
public static ICssValue[] ParseFontFamilies(StringSource source);
    [ExtensionAttribute]
public static string ParseLiteral(StringSource source);
    [ExtensionAttribute]
public static string ParseAnimatableIdent(StringSource source);
    private static string Start(StringSource source, char current, StringBuilder buffer);
    private static string Rest(StringSource source, char current, StringBuilder buffer);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.KeyframeParser : object {
    internal static IKeyframeSelector Parse(string str);
    [ExtensionAttribute]
public static IKeyframeSelector ParseKeyframeSelector(StringSource source);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.MediaParser : object {
    internal static IEnumerable`1<CssMedium> Parse(string str, IFeatureValidatorFactory factory);
    [ExtensionAttribute]
public static IEnumerable`1<CssMedium> ParseMedia(StringSource source, IFeatureValidatorFactory factory);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.MediumParser : object {
    internal static CssMedium Parse(string str, IFeatureValidatorFactory factory);
    [ExtensionAttribute]
public static CssMedium ParseMedium(StringSource source, IFeatureValidatorFactory factory);
    [ExtensionAttribute]
private static CssMedium ParseMediaCondition(StringSource source);
    [ExtensionAttribute]
private static CssMedium ParseMediaConditionWithoutOr(StringSource source);
    [ExtensionAttribute]
private static CssMedium ParseMediaNot(StringSource source);
    [ExtensionAttribute]
private static CssMedium ParseMediaInParens(StringSource source);
    [ExtensionAttribute]
private static CssMedium ParseMediaConnectorMultiple(StringSource source, string connector);
    [ExtensionAttribute]
private static CssMedium ParseMediaConnector(StringSource source, string connector);
    [ExtensionAttribute]
private static CssMedium ParseMediaType(StringSource source);
    [ExtensionAttribute]
private static CssMedium ParseMediaFeature(StringSource source);
    [ExtensionAttribute]
private static CssMedium ParseGeneralEnclosed(StringSource source);
    [ExtensionAttribute]
private static MediaFeature ParseMediaFeaturePlain(StringSource source);
    [ExtensionAttribute]
private static MediaFeature ParseMediaFeatureBoolean(StringSource source);
    [ExtensionAttribute]
private static MediaFeature ParseMediaFeatureRange(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParseMediaFeatureValue(StringSource source);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.NumberParser : object {
    [ExtensionAttribute]
public static Nullable`1<double> ParseNumber(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Ratio> ParseRatio(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<double> ParseNaturalNumber(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<double> ParseGreaterOrEqualOneNumber(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<int> ParseNaturalInteger(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<int> ParsePositiveInteger(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<int> ParseWeightInteger(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<int> ParseBinary(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<int> ParseInteger(StringSource source);
    private static bool IsWeight(int value);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.PointParser : object {
    [ExtensionAttribute]
public static ICssValue ParsePointX(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParsePointY(StringSource source);
    [ExtensionAttribute]
private static ICssValue ParsePointDir(StringSource source, Predicate`1<string> checkKeyword);
    [ExtensionAttribute]
public static CssOriginValue ParseOrigin(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Point> ParsePoint(StringSource source);
    [ExtensionAttribute]
public static CssBackgroundSizeValue ParseSize(StringSource source);
    private static bool IsHorizontal(string str);
    private static bool IsVertical(string str);
    private static Nullable`1<Length> KeywordToLength(string keyword);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.ShadowParser : object {
    [ExtensionAttribute]
public static CssShadowValue ParseShadow(StringSource source);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.ShapeParser : object {
    [ExtensionAttribute]
public static CssShapeValue ParseShape(StringSource source);
    private static bool SkipIfComma(StringSource source);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.StringParser : object {
    [ExtensionAttribute]
public static string ParseString(StringSource source);
    private static string DoubleQuoted(StringSource source);
    private static string SingleQuoted(StringSource source);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.StringSourceExtensions : object {
    [ExtensionAttribute]
public static string Substring(StringSource source, int startIndex);
    [ExtensionAttribute]
public static string TakeUntilClosed(StringSource source);
    [ExtensionAttribute]
public static char SkipGetSkip(StringSource source);
    [ExtensionAttribute]
public static char SkipSpacesAndComments(StringSource source);
    [ExtensionAttribute]
public static char SkipCurrentAndSpaces(StringSource source);
    [ExtensionAttribute]
public static char BackTo(StringSource source, int index);
    [ExtensionAttribute]
public static char NextTo(StringSource source, int index);
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.TimingFunctionParser : object {
    private static Dictionary`2<string, Func`2<StringSource, ICssTimingFunctionValue>> TimingFunctions;
    private static TimingFunctionParser();
    [ExtensionAttribute]
public static ICssTimingFunctionValue ParseTimingFunction(StringSource source);
    private static ICssTimingFunctionValue ParseSteps(StringSource source);
    private static ICssTimingFunctionValue ParseCubicBezier(StringSource source);
}
internal class AngleSharp.Css.Parser.Tokens.CssCommentToken : CssToken {
    private bool _bad;
    public bool IsBad { get; }
    public CssCommentToken(string data, bool bad);
    public bool get_IsBad();
}
internal class AngleSharp.Css.Parser.Tokens.CssStringToken : CssToken {
    private bool _bad;
    public bool IsBad { get; }
    public CssStringToken(string data, bool bad);
    public bool get_IsBad();
}
internal class AngleSharp.Css.Parser.Tokens.CssToken : object {
    private CssTokenType _type;
    private string _data;
    [CompilerGeneratedAttribute]
private TextPosition <Position>k__BackingField;
    public CssTokenType Type { get; }
    public string Data { get; }
    public TextPosition Position { get; public set; }
    public CssToken(CssTokenType type, string data);
    public CssTokenType get_Type();
    public string get_Data();
    [CompilerGeneratedAttribute]
public TextPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(TextPosition value);
}
internal class AngleSharp.Css.Parser.Tokens.CssUrlToken : CssToken {
    private bool _bad;
    public bool IsBad { get; }
    public CssUrlToken(string data, bool bad);
    public bool get_IsBad();
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.TransformParser : object {
    private static Dictionary`2<string, Func`2<StringSource, ICssTransformFunctionValue>> TransformFunctions;
    private static TransformParser();
    [ExtensionAttribute]
public static ICssTransformFunctionValue ParseTransform(StringSource source);
    private static CssSkewValue ParseSkew2d(StringSource source);
    private static CssSkewValue ParseSkewX(StringSource source);
    private static CssSkewValue ParseSkewY(StringSource source);
    private static CssMatrixValue ParseMatrix2d(StringSource source);
    private static CssMatrixValue ParseMatrix3d(StringSource source);
    private static CssMatrixValue ParseMatrix(StringSource source, int count);
    private static CssRotateValue ParseRotate2d(StringSource source);
    private static CssRotateValue ParseRotate3d(StringSource source);
    private static CssRotateValue ParseRotateX(StringSource source);
    private static CssRotateValue ParseRotateY(StringSource source);
    private static CssRotateValue ParseRotateZ(StringSource source);
    private static CssRotateValue ParseRotate(StringSource source, double x, double y, double z);
    private static CssScaleValue ParseScale2d(StringSource source);
    private static CssScaleValue ParseScale3d(StringSource source);
    private static CssScaleValue ParseScaleX(StringSource source);
    private static CssScaleValue ParseScaleY(StringSource source);
    private static CssScaleValue ParseScaleZ(StringSource source);
    private static CssTranslateValue ParseTranslate2d(StringSource source);
    private static CssTranslateValue ParseTranslate3d(StringSource source);
    private static CssTranslateValue ParseTranslateX(StringSource source);
    private static CssTranslateValue ParseTranslateY(StringSource source);
    private static CssTranslateValue ParseTranslateZ(StringSource source);
    private static ICssTransformFunctionValue ParsePerspective(StringSource source);
}
internal class AngleSharp.Css.Parser.Unit : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dimension>k__BackingField;
    public string Value { get; }
    public string Dimension { get; }
    public Unit(string value, string dimension);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_Dimension();
}
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.UnitParser : object {
    [ExtensionAttribute]
internal static Unit ParseUnit(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseAutoLength(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Length> ParseNormalLength(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseBorderWidth(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseLineWidth(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseLineHeight(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<double> ParsePercent(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Length> ParsePercentOrNumber(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Angle> ParseAngle(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseAngleOrCalc(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Frequency> ParseFrequency(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseFontSize(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseTrackBreadth(StringSource source, bool flexible);
    [ExtensionAttribute]
public static Nullable`1<Length> ParseDistance(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseDistanceOrCalc(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Length> ParseLength(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseLengthOrCalc(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Resolution> ParseResolution(StringSource source);
    [ExtensionAttribute]
public static Nullable`1<Time> ParseTime(StringSource source);
    [ExtensionAttribute]
public static ICssValue ParseTimeOrCalc(StringSource source);
    private static Nullable`1<Length> GetLength(Unit test);
    private static Unit UnitStart(StringSource source);
    private static bool IsDimension(StringSource source, char current);
    private static Unit UnitRest(StringSource source, StringBuilder buffer);
    private static Unit UnitFraction(StringSource source, StringBuilder buffer);
    private static Unit Dimension(StringSource source, string number, StringBuilder buffer);
    private static Unit SciNotation(StringSource source, StringBuilder buffer);
    private static Unit NumberDash(StringSource source, StringBuilder buffer);
    private static Unit NumberExponential(StringSource source, StringBuilder buffer);
    [ExtensionAttribute]
private static ICssValue OrCalc(Nullable`1<T> value, StringSource source);
}
public class AngleSharp.Css.PrettyStyleFormatter : object {
    private string _intendString;
    private string _newLineString;
    private int _intends;
    public string Indentation { get; public set; }
    public string NewLine { get; public set; }
    public string get_Indentation();
    public void set_Indentation(string value);
    public string get_NewLine();
    public void set_NewLine(string value);
    private sealed virtual override string AngleSharp.IStyleFormatter.Sheet(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.BlockRules(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.Declaration(string name, string value, bool important);
    private sealed virtual override string AngleSharp.IStyleFormatter.BlockDeclarations(IEnumerable`1<IStyleFormattable> declarations);
    private sealed virtual override string AngleSharp.IStyleFormatter.Rule(string name, string value);
    private sealed virtual override string AngleSharp.IStyleFormatter.Rule(string name, string prelude, string rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.Comment(string data);
}
[FlagsAttribute]
public enum AngleSharp.Css.PropertyFlags : Enum {
    public byte value__;
    public static PropertyFlags None;
    public static PropertyFlags Inherited;
    public static PropertyFlags Hashless;
    public static PropertyFlags Unitless;
    public static PropertyFlags Animatable;
    public static PropertyFlags Shorthand;
    public static PropertyFlags Unknown;
}
public static class AngleSharp.Css.PropertyNames : object {
    public static string AlignContent;
    public static string AlignItems;
    public static string AlignBaseline;
    public static string AlignSelf;
    public static string Accelerator;
    public static string Animation;
    public static string AnimationDelay;
    public static string AnimationDirection;
    public static string AnimationDuration;
    public static string AnimationFillMode;
    public static string AnimationIterationCount;
    public static string AnimationName;
    public static string AnimationPlayState;
    public static string AnimationTimingFunction;
    public static string BackgroundAttachment;
    public static string BackgroundColor;
    public static string BackgroundClip;
    public static string BackgroundOrigin;
    public static string BackgroundSize;
    public static string BackgroundImage;
    public static string BackgroundPosition;
    public static string BackgroundPositionX;
    public static string BackgroundPositionY;
    public static string BackgroundRepeat;
    public static string BackgroundRepeatX;
    public static string BackgroundRepeatY;
    public static string Background;
    public static string Behavior;
    public static string BaselineShift;
    public static string BorderColor;
    public static string BorderSpacing;
    public static string BorderCollapse;
    public static string BorderStyle;
    public static string BorderRadius;
    public static string BorderTopLeftRadius;
    public static string BorderTopRightRadius;
    public static string BorderBottomLeftRadius;
    public static string BorderBottomRightRadius;
    public static string BoxShadow;
    public static string BoxSizing;
    public static string BoxDecorationBreak;
    public static string BreakAfter;
    public static string BreakBefore;
    public static string BreakInside;
    public static string BackfaceVisibility;
    public static string BorderImage;
    public static string BorderImageOutset;
    public static string BorderImageRepeat;
    public static string BorderImageSource;
    public static string BorderImageSlice;
    public static string BorderImageWidth;
    public static string BorderTop;
    public static string BorderRight;
    public static string BorderBottom;
    public static string BorderLeft;
    public static string BorderTopColor;
    public static string BorderLeftColor;
    public static string BorderRightColor;
    public static string BorderBottomColor;
    public static string BorderTopStyle;
    public static string BorderLeftStyle;
    public static string BorderRightStyle;
    public static string BorderBottomStyle;
    public static string BorderTopWidth;
    public static string BorderLeftWidth;
    public static string BorderRightWidth;
    public static string BorderBottomWidth;
    public static string BorderWidth;
    public static string Border;
    public static string Bottom;
    public static string Columns;
    public static string ColumnCount;
    public static string ColumnFill;
    public static string ColumnRule;
    public static string ColumnRuleColor;
    public static string ColumnRuleStyle;
    public static string ColumnRuleWidth;
    public static string ColumnSpan;
    public static string ColumnWidth;
    public static string ColumnGap;
    public static string RowGap;
    public static string Gap;
    public static string CaptionSide;
    public static string Clear;
    public static string Clip;
    public static string ClipLeft;
    public static string ClipTop;
    public static string ClipRight;
    public static string ClipBottom;
    public static string ClipPath;
    public static string ClipRule;
    public static string Color;
    public static string ColorInterpolationFilters;
    public static string Content;
    public static string ContentVisibility;
    public static string CounterIncrement;
    public static string CounterReset;
    public static string Cursor;
    public static string Direction;
    public static string Display;
    public static string DominantBaseline;
    public static string EmptyCells;
    public static string EnableBackground;
    public static string Fill;
    public static string FillOpacity;
    public static string FillRule;
    public static string Filter;
    public static string Flex;
    public static string FlexBasis;
    public static string FlexDirection;
    public static string FlexFlow;
    public static string FlexGrow;
    public static string FlexShrink;
    public static string FlexWrap;
    public static string Float;
    public static string FontFamily;
    public static string FontFeatureSettings;
    public static string FontSize;
    public static string FontSizeAdjust;
    public static string FontStyle;
    public static string FontStretch;
    public static string FontVariant;
    public static string FontWeight;
    public static string Font;
    public static string GlyphOrientationHorizontal;
    public static string GlyphOrientationVertical;
    public static string Height;
    public static string ImeMode;
    public static string JustifyContent;
    public static string LayoutGrid;
    public static string LayoutGridChar;
    public static string LayoutGridType;
    public static string LayoutGridMode;
    public static string LayoutGridLine;
    public static string GridTemplateRows;
    public static string GridTemplateColumns;
    public static string GridTemplateAreas;
    public static string GridTemplate;
    public static string GridAutoColumns;
    public static string GridAutoRows;
    public static string GridAutoFlow;
    public static string Grid;
    public static string GridRowStart;
    public static string GridColumnStart;
    public static string GridRowEnd;
    public static string GridColumnEnd;
    public static string GridRow;
    public static string GridColumn;
    public static string GridArea;
    public static string GridRowGap;
    public static string GridColumnGap;
    public static string GridGap;
    public static string Left;
    public static string LetterSpacing;
    public static string LineHeight;
    public static string ListStyleImage;
    public static string ListStylePosition;
    public static string ListStyleType;
    public static string ListStyle;
    public static string MarginRight;
    public static string MarginLeft;
    public static string MarginTop;
    public static string MarginBottom;
    public static string Margin;
    public static string Marker;
    public static string MarkerEnd;
    public static string MarkerMid;
    public static string MarkerStart;
    public static string Mask;
    public static string MaxHeight;
    public static string MaxWidth;
    public static string MinHeight;
    public static string MinWidth;
    public static string Opacity;
    public static string Order;
    public static string Orphans;
    public static string OutlineColor;
    public static string OutlineStyle;
    public static string OutlineWidth;
    public static string Outline;
    public static string Overflow;
    public static string OverflowX;
    public static string OverflowY;
    public static string OverflowWrap;
    public static string PaddingTop;
    public static string PaddingRight;
    public static string PaddingLeft;
    public static string PaddingBottom;
    public static string Padding;
    public static string PageBreakAfter;
    public static string PageBreakBefore;
    public static string PageBreakInside;
    public static string Perspective;
    public static string PerspectiveOrigin;
    public static string PointerEvents;
    public static string Position;
    public static string Quotes;
    public static string Resize;
    public static string Right;
    public static string RubyAlign;
    public static string RubyOverhang;
    public static string RubyPosition;
    public static string Scrollbar3dLightColor;
    public static string ScrollbarBaseColor;
    public static string ScrollbarArrowColor;
    public static string ScrollbarDarkShadowColor;
    public static string ScrollbarFaceColor;
    public static string ScrollbarHighlightColor;
    public static string ScrollbarShadowColor;
    public static string ScrollbarTrackColor;
    public static string ScrollSnapType;
    public static string ScrollMargin;
    public static string ScrollSnapAlign;
    public static string Stroke;
    public static string StrokeDasharray;
    public static string StrokeDashoffset;
    public static string StrokeLinecap;
    public static string StrokeLinejoin;
    public static string StrokeMiterlimit;
    public static string StrokeOpacity;
    public static string StrokeWidth;
    public static string TableLayout;
    public static string TextAlign;
    public static string TextAlignLast;
    public static string TextAnchor;
    public static string TextAutospace;
    public static string TextDecoration;
    public static string TextDecorationColor;
    public static string TextDecorationLine;
    public static string TextDecorationStyle;
    public static string TextIndent;
    public static string TextJustify;
    public static string TextOverflow;
    public static string TextShadow;
    public static string TextTransform;
    public static string TextUnderlinePosition;
    public static string Transform;
    public static string TransformOrigin;
    public static string TransformStyle;
    public static string Transition;
    public static string TransitionDelay;
    public static string TransitionDuration;
    public static string TransitionTimingFunction;
    public static string TransitionProperty;
    public static string Top;
    public static string UnicodeBidi;
    public static string VerticalAlign;
    public static string Visibility;
    public static string WhiteSpace;
    public static string Widows;
    public static string Width;
    public static string WordBreak;
    public static string WordSpacing;
    public static string WordWrap;
    public static string WritingMode;
    public static string ZIndex;
    public static string Zoom;
    public static string UnicodeRange;
    public static string Src;
    public static string ObjectFit;
    public static string ObjectPosition;
    public static string MinZoom;
    public static string MaxZoom;
    public static string UserZoom;
    public static string Orientation;
    public static string StringSet;
    public static string Running;
    public static string FootnoteDisplay;
    public static string FootnotePolicy;
    public static string BookmarkLevel;
    public static string BookmarkLabel;
    public static string BookmarkState;
    private static PropertyNames();
}
public enum AngleSharp.Css.RenderMode : Enum {
    public int value__;
    public static RenderMode Undefined;
    public static RenderMode Horizontal;
    public static RenderMode Vertical;
}
internal class AngleSharp.Css.RenderTree.ElementRenderNode : object {
    [CompilerGeneratedAttribute]
private INode <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IRenderNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private ICssStyleDeclaration <SpecifiedStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ICssStyleDeclaration <ComputedStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderValues <UsedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderValues <ActualValue>k__BackingField;
    public INode Ref { get; public set; }
    public IEnumerable`1<IRenderNode> Children { get; public set; }
    public ICssStyleDeclaration SpecifiedStyle { get; public set; }
    public ICssStyleDeclaration ComputedStyle { get; public set; }
    public RenderValues UsedValue { get; public set; }
    public RenderValues ActualValue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Ref();
    [CompilerGeneratedAttribute]
public void set_Ref(INode value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IRenderNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IEnumerable`1<IRenderNode> value);
    [CompilerGeneratedAttribute]
public ICssStyleDeclaration get_SpecifiedStyle();
    [CompilerGeneratedAttribute]
public void set_SpecifiedStyle(ICssStyleDeclaration value);
    [CompilerGeneratedAttribute]
public ICssStyleDeclaration get_ComputedStyle();
    [CompilerGeneratedAttribute]
public void set_ComputedStyle(ICssStyleDeclaration value);
    [CompilerGeneratedAttribute]
public RenderValues get_UsedValue();
    [CompilerGeneratedAttribute]
public void set_UsedValue(RenderValues value);
    [CompilerGeneratedAttribute]
public RenderValues get_ActualValue();
    [CompilerGeneratedAttribute]
public void set_ActualValue(RenderValues value);
}
public interface AngleSharp.Css.RenderTree.IRenderNode {
    public INode Ref { get; }
    public IEnumerable`1<IRenderNode> Children { get; }
    public abstract virtual INode get_Ref();
    public abstract virtual IEnumerable`1<IRenderNode> get_Children();
}
[ExtensionAttribute]
public static class AngleSharp.Css.RenderTree.RenderNodeExtensions : object {
    [ExtensionAttribute]
public static Task DownloadResources(IRenderNode node, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsVisible(IRenderNode node);
    [ExtensionAttribute]
public static IRenderNode Find(IRenderNode node, INode reference);
}
internal class AngleSharp.Css.RenderTree.RenderTreeBuilder : object {
    private IWindow _window;
    private IEnumerable`1<ICssStyleSheet> _defaultSheets;
    private IRenderDevice _device;
    public RenderTreeBuilder(IWindow window, IRenderDevice device);
    public IRenderNode RenderDocument();
    private ElementRenderNode RenderElement(IElement reference, StyleCollection collection, ICssStyleDeclaration parent);
    private IRenderNode RenderText(IText text, StyleCollection collection);
}
internal class AngleSharp.Css.RenderTree.RenderValues : object {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Height>k__BackingField;
    public Color Color { get; public set; }
    public Length Width { get; public set; }
    public Length Height { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Length get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Length value);
    [CompilerGeneratedAttribute]
public Length get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Length value);
}
internal class AngleSharp.Css.RenderTree.TextRenderNode : object {
    [CompilerGeneratedAttribute]
private INode <Ref>k__BackingField;
    public INode Ref { get; public set; }
    public IEnumerable`1<IRenderNode> Children { get; }
    [CompilerGeneratedAttribute]
public sealed virtual INode get_Ref();
    [CompilerGeneratedAttribute]
public void set_Ref(INode value);
    public sealed virtual IEnumerable`1<IRenderNode> get_Children();
}
public static class AngleSharp.Css.RuleNames : object {
    public static string Supports;
    public static string Charset;
    public static string Document;
    public static string FontFace;
    public static string ViewPort;
    public static string Import;
    public static string Keyframes;
    public static string Media;
    public static string Namespace;
    public static string Page;
    public static string CounterStyle;
    public static string FontFeatureValues;
    private static RuleNames();
}
[ExtensionAttribute]
public static class AngleSharp.Css.StringExtensions : object {
    [ExtensionAttribute]
public static string CssColor(string value);
    [ExtensionAttribute]
public static string CssUnit(string value, Double& result);
    [ExtensionAttribute]
public static string CssUrl(string value);
}
internal class AngleSharp.Css.StyleAttributeObserver : object {
    private sealed virtual override void AngleSharp.Dom.IAttributeObserver.NotifyChange(IElement host, string name, string value);
}
[ExtensionAttribute]
public static class AngleSharp.Css.StyleCollectionExtensions : object {
    [ExtensionAttribute]
public static IStyleCollection GetStyleCollection(IWindow window);
    [ExtensionAttribute]
public static ICssStyleDeclaration ComputeDeclarations(IEnumerable`1<ICssStyleRule> rules, IElement element, string pseudoSelector);
    [ExtensionAttribute]
public static ICssStyleDeclaration ComputeCascadedStyle(IEnumerable`1<ICssStyleRule> styleCollection, IElement element, ICssStyleDeclaration parent);
    [ExtensionAttribute]
private static IEnumerable`1<ICssStyleRule> SortBySpecificity(IEnumerable`1<ICssStyleRule> rules, IElement element);
}
[ExtensionAttribute]
public static class AngleSharp.Css.StyleFormatterExtensions : object {
    [ExtensionAttribute]
public static string Minify(IStyleFormattable style);
    [ExtensionAttribute]
public static string Prettify(IStyleFormattable style);
}
public static class AngleSharp.Css.UnitNames : object {
    public static string Khz;
    public static string Hz;
    public static string Ms;
    public static string S;
    public static string Turn;
    public static string Rad;
    public static string Grad;
    public static string Deg;
    public static string Em;
    public static string Ex;
    public static string Cm;
    public static string Mm;
    public static string In;
    public static string Px;
    public static string Ch;
    public static string Vw;
    public static string Vh;
    public static string Vmin;
    public static string Vmax;
    public static string Dpi;
    public static string Dpcm;
    public static string Dppx;
    public static string Pt;
    public static string Rem;
    public static string Pc;
    public static string Fr;
    public static string Percent;
    private static UnitNames();
}
[ExtensionAttribute]
internal static class AngleSharp.Css.ValueConverters : object {
    public static IValueConverter Any;
    public static IValueConverter None;
    public static IValueConverter Auto;
    public static IValueConverter Content;
    public static IValueConverter LineWidthConverter;
    public static IValueConverter CalcConverter;
    public static IValueConverter OnlyLengthConverter;
    public static IValueConverter OnlyResolutionConverter;
    public static IValueConverter OnlyTimeConverter;
    public static IValueConverter OnlyLengthOrPercentConverter;
    public static IValueConverter StringConverter;
    public static IValueConverter UrlConverter;
    public static IValueConverter QuotesConverter;
    public static IValueConverter IdentifierConverter;
    public static IValueConverter AnimatableConverter;
    public static IValueConverter OnlyIntegerConverter;
    public static IValueConverter NaturalIntegerConverter;
    public static IValueConverter WeightIntegerConverter;
    public static IValueConverter PositiveIntegerConverter;
    public static IValueConverter BinaryConverter;
    public static IValueConverter OnlyNumberConverter;
    public static IValueConverter NumberConverter;
    public static IValueConverter LengthConverter;
    public static IValueConverter ResolutionConverter;
    public static IValueConverter TimeConverter;
    public static IValueConverter IntegerConverter;
    public static IValueConverter LengthOrPercentConverter;
    public static IValueConverter NaturalNumberConverter;
    public static IValueConverter ColorConverter;
    public static IValueConverter PointConverter;
    public static IValueConverter OriginConverter;
    public static IValueConverter PointXConverter;
    public static IValueConverter PointYConverter;
    public static IValueConverter ShapeConverter;
    public static IValueConverter ContentConverter;
    public static IValueConverter AttrConverter;
    public static IValueConverter CounterConverter;
    public static IValueConverter RunningConverter;
    public static IValueConverter UpdateFrequencyConverter;
    public static IValueConverter LineStyleConverter;
    public static IValueConverter BackgroundAttachmentConverter;
    public static IValueConverter BackgroundRepeatConverter;
    public static IValueConverter BoxModelConverter;
    public static IValueConverter AnimationDirectionConverter;
    public static IValueConverter AnimationFillStyleConverter;
    public static IValueConverter TextDecorationStyleConverter;
    public static IValueConverter TextDecorationLinesConverter;
    public static IValueConverter ListPositionConverter;
    public static IValueConverter ListStyleConverter;
    public static IValueConverter BreakModeConverter;
    public static IValueConverter BreakInsideModeConverter;
    public static IValueConverter PageBreakModeConverter;
    public static IValueConverter PageBreakInsideModeConverter;
    public static IValueConverter UnicodeModeConverter;
    public static IValueConverter VisibilityConverter;
    public static IValueConverter PlayStateConverter;
    public static IValueConverter FontVariantConverter;
    public static IValueConverter DirectionModeConverter;
    public static IValueConverter HorizontalAlignmentConverter;
    public static IValueConverter VerticalAlignmentConverter;
    public static IValueConverter WhitespaceConverter;
    public static IValueConverter TextTransformConverter;
    public static IValueConverter TextAlignLastConverter;
    public static IValueConverter TextAnchorConverter;
    public static IValueConverter TextJustifyConverter;
    public static IValueConverter ObjectFittingConverter;
    public static IValueConverter PositionModeConverter;
    public static IValueConverter OverflowModeConverter;
    public static IValueConverter OverflowExtendedModeConverter;
    public static IValueConverter FloatingConverter;
    public static IValueConverter DisplayModeConverter;
    public static IValueConverter ClearModeConverter;
    public static IValueConverter FontStretchConverter;
    public static IValueConverter FontStyleConverter;
    public static IValueConverter FontWeightConverter;
    public static IValueConverter ResizeConverter;
    public static IValueConverter RubyAlignmentConverter;
    public static IValueConverter RubyOverhangModeConverter;
    public static IValueConverter RubyPositionConverter;
    public static IValueConverter PointerEventConverter;
    public static IValueConverter SystemFontConverter;
    public static IValueConverter StrokeLinecapConverter;
    public static IValueConverter StrokeLinejoinConverter;
    public static IValueConverter WordBreakConverter;
    public static IValueConverter OverflowWrapConverter;
    public static IValueConverter BorderImageRepeatConverter;
    public static IValueConverter ScriptingStateConverter;
    public static IValueConverter PointerAccuracyConverter;
    public static IValueConverter HoverAbilityConverter;
    public static IValueConverter JustifyContentConverter;
    public static IValueConverter AlignContentConverter;
    public static IValueConverter AlignSelfConverter;
    public static IValueConverter AlignItemsConverter;
    public static IValueConverter FlexDirectionConverter;
    public static IValueConverter FlexWrapConverter;
    public static IValueConverter BookmarkStateConverter;
    public static IValueConverter FootnoteDisplayConverter;
    public static IValueConverter FootnotePolicyConverter;
    public static IValueConverter ContentVisibilityConverter;
    public static IValueConverter ScrollSnapAlignmentConverter;
    public static IValueConverter ScrollSnapAxisConverter;
    public static IValueConverter ScrollSnapStrictnessConverter;
    public static IValueConverter OptionalIntegerConverter;
    public static IValueConverter PositiveOrInfiniteNumberConverter;
    public static IValueConverter OptionalNumberConverter;
    public static IValueConverter OptionalLengthConverter;
    public static IValueConverter AutoLengthConverter;
    public static IValueConverter OptionalLengthOrPercentConverter;
    public static IValueConverter AutoLengthOrPercentConverter;
    public static IValueConverter WidthConverter;
    public static IValueConverter FontSizeConverter;
    public static IValueConverter LineHeightConverter;
    public static IValueConverter GapConverter;
    public static IValueConverter BorderImageSliceConverter;
    public static IValueConverter ImageBorderWidthConverter;
    public static IValueConverter BorderImageWidthConverter;
    public static IValueConverter TransitionConverter;
    public static IValueConverter GradientConverter;
    public static IValueConverter TransformConverter;
    public static IValueConverter CurrentColorConverter;
    public static IValueConverter InvertedColorConverter;
    public static IValueConverter PaintConverter;
    public static IValueConverter StrokeDasharrayConverter;
    public static IValueConverter StrokeMiterlimitConverter;
    public static IValueConverter RatioConverter;
    public static IValueConverter MultipleShadowConverter;
    public static IValueConverter OptionalImageSourceConverter;
    public static IValueConverter MultipleImageSourceConverter;
    public static IValueConverter BorderRadiusLonghandConverter;
    public static IValueConverter FontFamiliesConverter;
    public static IValueConverter BackgroundSizeConverter;
    public static IValueConverter BackgroundRepeatsConverter;
    public static IValueConverter ContentListConverter;
    public static IValueConverter OrientationModeConverter;
    public static IValueConverter TableLayoutConverter;
    public static IValueConverter ScanModeConverter;
    public static IValueConverter EmptyCellsConverter;
    public static IValueConverter CaptionSideConverter;
    public static IValueConverter BackfaceVisibilityConverter;
    public static IValueConverter BorderCollapseConverter;
    public static IValueConverter BoxDecorationConverter;
    public static IValueConverter ColumnSpanConverter;
    public static IValueConverter ColumnFillConverter;
    public static IValueConverter LineNamesConverter;
    public static IValueConverter TrackSizeConverter;
    public static IValueConverter FixedSizeConverter;
    public static IValueConverter TrackRepeatConverter;
    public static IValueConverter FixedRepeatConverter;
    public static IValueConverter AutoRepeatConverter;
    public static IValueConverter TrackListConverter;
    public static IValueConverter AutoTrackListConverter;
    public static IValueConverter GridTemplateConverter;
    public static IValueConverter GridAutoConverter;
    public static IValueConverter GridLineConverter;
    public static IValueConverter SrcListConverter;
    private static ValueConverters();
    public static IValueConverter Or(IValueConverter[] converters);
    public static IValueConverter SlashSeparated(IValueConverter converter);
    public static IValueConverter SpaceSeparated(IValueConverter converter);
    public static IValueConverter AssignInitial(ICssValue value);
    public static IValueConverter AssignReferences();
    public static IValueConverter Assign(string identifier, T result);
    public static IValueConverter Toggle(string on, string off);
    public static IValueConverter WithOrder(IValueConverter[] converters);
    public static IValueConverter WithAny(IValueConverter[] converters);
    public static IValueConverter WithBorderSide(ICssValue lineWidth, ICssValue lineStyle, ICssValue lineColor);
    private static IValueConverter FromParser(Func`2<StringSource, Nullable`1<T>> converter);
    private static IValueConverter FromParser(Func`2<StringSource, T> converter);
    private static Func`2<StringSource, Nullable`1<Label>> FromString(Func`2<StringSource, string> converter);
    private static Func`2<StringSource, Nullable`1<Length>> FromInteger(Func`2<StringSource, Nullable`1<int>> converter);
    private static Func`2<StringSource, Nullable`1<Length>> FromNumber(Func`2<StringSource, Nullable`1<double>> converter);
    [ExtensionAttribute]
private static ICssFunctionValue ParseLocal(StringSource source);
    [ExtensionAttribute]
private static ICssFunctionValue ParseFormat(StringSource source);
    public static IValueConverter AggregatePeriodic(IValueConverter converter);
    public static IValueConverter AggregateTuple(IValueConverter converter);
}
public class AngleSharp.Css.Values.Angle : ValueType {
    public static Angle Zero;
    public static Angle HalfQuarter;
    public static Angle Quarter;
    public static Angle TripleHalfQuarter;
    public static Angle Half;
    private double _value;
    private Unit _unit;
    public string CssText { get; }
    public double Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Angle(double value, Unit unit);
    private static Angle();
    public sealed virtual string get_CssText();
    public double get_Value();
    public Unit get_Type();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Angle a, Angle b);
    public static bool op_GreaterThan(Angle a, Angle b);
    public static bool op_LessThanOrEqual(Angle a, Angle b);
    public static bool op_LessThan(Angle a, Angle b);
    public sealed virtual int CompareTo(Angle other);
    public static bool TryParse(string s, Angle& result);
    public static Unit GetUnit(string s);
    public double ToRadian();
    public double ToTurns();
    public sealed virtual bool Equals(Angle other);
    public static bool op_Equality(Angle a, Angle b);
    public static bool op_Inequality(Angle a, Angle b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Color : ValueType {
    public static Color Black;
    public static Color White;
    public static Color Red;
    public static Color Magenta;
    public static Color Green;
    public static Color PureGreen;
    public static Color Blue;
    public static Color Transparent;
    public static Color CurrentColor;
    public static Color InvertedColor;
    private byte _alpha;
    private byte _red;
    private byte _green;
    private byte _blue;
    private int _hashcode;
    [CompilerGeneratedAttribute]
private static bool <UseHex>k__BackingField;
    public static bool UseHex { get; public set; }
    public string CssText { get; }
    public int Value { get; }
    public byte A { get; }
    public double Alpha { get; }
    public byte R { get; }
    public byte G { get; }
    public byte B { get; }
    public Color(byte r, byte g, byte b);
    public Color(byte r, byte g, byte b, byte a);
    private static Color();
    public static Color FromRgba(byte r, byte g, byte b, double a);
    public static Color FromRgba(double r, double g, double b, double a);
    public static Color FromGray(byte number, double alpha);
    public static Color FromGray(double value, double alpha);
    public static Nullable`1<Color> FromName(string name);
    public static Color FromRgb(byte r, byte g, byte b);
    public static Nullable`1<Color> FromLab(double l, double a, double b, double alpha);
    private static Nullable`1<Color> FromXyz50(double x, double y, double z, double alpha);
    private static Nullable`1<Color> FromLrgb(double red, double green, double blue, double alpha);
    public static Nullable`1<Color> FromLch(double l, double c, double h, double alpha);
    public static Nullable`1<Color> FromOklab(double l, double a, double b, double alpha);
    public static Nullable`1<Color> FromOklch(double l, double c, double h, double alpha);
    public static Color FromHex(string color);
    public static bool TryFromHex(string color, Color& value);
    public static Color FromFlexHex(string color);
    public static Color FromHsl(double h, double s, double l);
    public static Color FromHsla(double h, double s, double l, double alpha);
    public static Color FromHwb(double h, double w, double b);
    public static Color FromHwba(double h, double w, double b, double alpha);
    [CompilerGeneratedAttribute]
public static bool get_UseHex();
    [CompilerGeneratedAttribute]
public static void set_UseHex(bool value);
    public sealed virtual string get_CssText();
    public int get_Value();
    public byte get_A();
    public double get_Alpha();
    public byte get_R();
    public byte get_G();
    public byte get_B();
    public static bool op_Equality(Color a, Color b);
    public static bool op_Inequality(Color a, Color b);
    public sealed virtual bool Equals(Color other);
    public virtual bool Equals(object obj);
    private sealed virtual override int System.IComparable<AngleSharp.Css.Values.Color>.CompareTo(Color other);
    public virtual int GetHashCode();
    public static Color Mix(Color above, Color below);
    public static Color Mix(double alpha, Color above, Color below);
    private static double Project(double c);
    private static double Grow(double v);
    private static byte Normalize(double value);
    private static double HueToRgb(double m1, double m2, double h);
}
public class AngleSharp.Css.Values.Constant`1 : ValueType {
    private string _key;
    private T _data;
    public T Value { get; }
    public string CssText { get; }
    public Constant`1(string key, T data);
    public T get_Value();
    public sealed virtual string get_CssText();
    public sealed virtual bool Equals(Constant`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.CounterDefinition : ValueType {
    private string _identifier;
    private string _listStyle;
    private string _separator;
    public string CssText { get; }
    public string CounterIdentifier { get; }
    public string ListStyle { get; }
    public string DefinedSeparator { get; }
    public CounterDefinition(string identifier, string listStyle, string separator);
    public sealed virtual string get_CssText();
    public string get_CounterIdentifier();
    public string get_ListStyle();
    public string get_DefinedSeparator();
    public sealed virtual bool Equals(CounterDefinition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private string Combine(string head);
}
public class AngleSharp.Css.Values.CounterValue : ValueType {
    private string _name;
    private int _value;
    public string CssText { get; }
    public string Name { get; }
    public int Value { get; }
    public CounterValue(string name, int value);
    public sealed virtual string get_CssText();
    public string get_Name();
    public int get_Value();
    public sealed virtual bool Equals(CounterValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class AngleSharp.Css.Values.CssAnyValue : object {
    private string _text;
    public string Value { get; }
    public string CssText { get; }
    public CssAnyValue(string text);
    public sealed virtual string get_Value();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssAttrValue : object {
    private string _attribute;
    public string Attribute { get; }
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssAttrValue(string attribute);
    public string get_Attribute();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssBackgroundLayerValue : object {
    private ICssValue _image;
    private ICssValue _position;
    private ICssValue _size;
    private ICssValue _repeat;
    private ICssValue _attachment;
    private ICssValue _origin;
    private ICssValue _clip;
    public ICssValue Image { get; }
    public ICssValue Position { get; }
    public ICssValue Size { get; }
    public ICssValue Repeat { get; }
    public ICssValue Attachment { get; }
    public ICssValue Origin { get; }
    public ICssValue Clip { get; }
    public string CssText { get; }
    public CssBackgroundLayerValue(ICssValue image, ICssValue position, ICssValue size, ICssValue repeat, ICssValue attachment, ICssValue origin, ICssValue clip);
    public ICssValue get_Image();
    public ICssValue get_Position();
    public ICssValue get_Size();
    public ICssValue get_Repeat();
    public ICssValue get_Attachment();
    public ICssValue get_Origin();
    public ICssValue get_Clip();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssBackgroundSizeValue : object {
    private ICssValue _width;
    private ICssValue _height;
    private ValueMode _mode;
    public static CssBackgroundSizeValue Cover;
    public static CssBackgroundSizeValue Contain;
    public ICssValue Width { get; }
    public ICssValue Height { get; }
    public string CssText { get; }
    private CssBackgroundSizeValue(ValueMode mode);
    public CssBackgroundSizeValue(ICssValue width, ICssValue height);
    private static CssBackgroundSizeValue();
    public ICssValue get_Width();
    public ICssValue get_Height();
    public sealed virtual string get_CssText();
    public sealed virtual bool Equals(CssBackgroundSizeValue other);
}
internal class AngleSharp.Css.Values.CssBackgroundValue : object {
    private ICssValue _layers;
    private ICssValue _color;
    public ICssValue Color { get; }
    public ICssValue Layers { get; }
    public string CssText { get; }
    public CssBackgroundValue(ICssValue layers, ICssValue color);
    public ICssValue get_Color();
    public ICssValue get_Layers();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssBorderImageSliceValue : object {
    private Length _bottom;
    private Length _left;
    private Length _right;
    private Length _top;
    private bool _filled;
    public Length Bottom { get; }
    public Length Left { get; }
    public Length Top { get; }
    public Length Right { get; }
    public bool IsFilled { get; }
    public string CssText { get; }
    public CssBorderImageSliceValue(Length top, Length right, Length bottom, Length left, bool filled);
    public Length get_Bottom();
    public Length get_Left();
    public Length get_Top();
    public Length get_Right();
    public bool get_IsFilled();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssBorderImageValue : object {
    private ICssValue _image;
    private ICssValue _slice;
    private ICssValue _widths;
    private ICssValue _outsets;
    private ICssValue _repeat;
    public string CssText { get; }
    public ICssValue Image { get; }
    public ICssValue Slice { get; }
    public ICssValue Widths { get; }
    public ICssValue Outsets { get; }
    public ICssValue Repeat { get; }
    public CssBorderImageValue(ICssValue image, ICssValue slice, ICssValue widths, ICssValue outsets, ICssValue repeat);
    public sealed virtual string get_CssText();
    public ICssValue get_Image();
    public ICssValue get_Slice();
    public ICssValue get_Widths();
    public ICssValue get_Outsets();
    public ICssValue get_Repeat();
}
internal class AngleSharp.Css.Values.CssBorderRadiusValue : object {
    private CssPeriodicValue _horizontal;
    private CssPeriodicValue _vertical;
    public CssPeriodicValue Horizontal { get; }
    public CssPeriodicValue Vertical { get; }
    public string CssText { get; }
    public CssBorderRadiusValue(CssPeriodicValue horizontal, CssPeriodicValue vertical);
    public CssPeriodicValue get_Horizontal();
    public CssPeriodicValue get_Vertical();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCalcAddExpression : object {
    private ICssValue _left;
    private ICssValue _right;
    public ICssValue Left { get; }
    public ICssValue Right { get; }
    public string CssText { get; }
    public CssCalcAddExpression(ICssValue left, ICssValue right);
    public ICssValue get_Left();
    public ICssValue get_Right();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCalcBracketExpression : object {
    private ICssValue _content;
    public ICssValue Value { get; }
    public string CssText { get; }
    public CssCalcBracketExpression(ICssValue content);
    public ICssValue get_Value();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCalcDivExpression : object {
    private ICssValue _left;
    private ICssValue _right;
    public ICssValue Left { get; }
    public ICssValue Right { get; }
    public string CssText { get; }
    public CssCalcDivExpression(ICssValue left, ICssValue right);
    public ICssValue get_Left();
    public ICssValue get_Right();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCalcMulExpression : object {
    private ICssValue _left;
    private ICssValue _right;
    public ICssValue Left { get; }
    public ICssValue Right { get; }
    public string CssText { get; }
    public CssCalcMulExpression(ICssValue left, ICssValue right);
    public ICssValue get_Left();
    public ICssValue get_Right();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCalcSubExpression : object {
    private ICssValue _left;
    private ICssValue _right;
    public ICssValue Left { get; }
    public ICssValue Right { get; }
    public string CssText { get; }
    public CssCalcSubExpression(ICssValue left, ICssValue right);
    public ICssValue get_Left();
    public ICssValue get_Right();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssCalcValue : object {
    private ICssValue _expression;
    public string Name { get; }
    public string Value { get; }
    public ICssValue[] Arguments { get; }
    public ICssValue Expression { get; }
    public string CssText { get; }
    public CssCalcValue(ICssValue expression);
    public sealed virtual string get_Name();
    public sealed virtual string get_Value();
    public sealed virtual ICssValue[] get_Arguments();
    public ICssValue get_Expression();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssChildValue : object {
    private ICssValue _parent;
    private ICssValue _value;
    public ICssValue Parent { get; }
    public ICssValue Value { get; }
    public string CssText { get; }
    public CssChildValue(ICssValue parent, ICssValue value);
    public ICssValue get_Parent();
    public ICssValue get_Value();
    public sealed virtual string get_CssText();
}
internal static class AngleSharp.Css.Values.CssColors : object {
    private static Dictionary`2<string, Color> TheColors;
    public static IEnumerable`1<string> Names { get; }
    private static CssColors();
    public static IEnumerable`1<string> get_Names();
    public static Nullable`1<Color> GetColor(string name);
    public static string GetName(Color color);
}
internal class AngleSharp.Css.Values.CssConicGradientValue : object {
    private CssGradientStopValue[] _stops;
    private ICssValue _center;
    private ICssValue _angle;
    private bool _repeating;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public ICssValue Angle { get; }
    public ICssValue Center { get; }
    public CssGradientStopValue[] Stops { get; }
    public bool IsRepeating { get; }
    public CssConicGradientValue(ICssValue angle, ICssValue center, CssGradientStopValue[] stops, bool repeating);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public ICssValue get_Angle();
    public ICssValue get_Center();
    public sealed virtual CssGradientStopValue[] get_Stops();
    public sealed virtual bool get_IsRepeating();
}
public class AngleSharp.Css.Values.CssContentValue : object {
    private string _type;
    public string Type { get; }
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssContentValue(string type);
    public string get_Type();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCubicBezierValue : object {
    private double _x1;
    private double _y1;
    private double _x2;
    private double _y2;
    public static CssCubicBezierValue Ease;
    public static CssCubicBezierValue EaseIn;
    public static CssCubicBezierValue EaseOut;
    public static CssCubicBezierValue EaseInOut;
    public static CssCubicBezierValue Linear;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public double X1 { get; }
    public double Y1 { get; }
    public double X2 { get; }
    public double Y2 { get; }
    public CssCubicBezierValue(double x1, double y1, double x2, double y2);
    private static CssCubicBezierValue();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public double get_X1();
    public double get_Y1();
    public double get_X2();
    public double get_Y2();
    public sealed virtual bool Equals(CssCubicBezierValue other);
}
internal class AngleSharp.Css.Values.CssCursorValue : object {
    private ICssValue[] _definitions;
    private ICssValue _cursor;
    public ICssValue[] Definitions { get; }
    public ICssValue SystemCursor { get; }
    public string CssText { get; }
    public CssCursorValue(ICssValue[] definitions, ICssValue cursor);
    public ICssValue[] get_Definitions();
    public ICssValue get_SystemCursor();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssCustomCursorValue : object {
    private ICssImageValue _source;
    private Nullable`1<Point> _position;
    public ICssImageValue Source { get; }
    public Nullable`1<Point> Position { get; }
    public string CssText { get; }
    public CssCustomCursorValue(ICssImageValue source, Nullable`1<Point> position);
    public ICssImageValue get_Source();
    public Nullable`1<Point> get_Position();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssFitContentValue : object {
    private ICssValue _dim;
    public ICssValue Dimension { get; }
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssFitContentValue(ICssValue dim);
    public ICssValue get_Dimension();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssFontFormatValue : object {
    private string _fontFormat;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssFontFormatValue(string fontFormat);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssFontValue : object {
    private ICssValue _fontFamilies;
    private ICssValue _lineHeight;
    private ICssValue _size;
    private ICssValue _stretch;
    private ICssValue _style;
    private ICssValue _variant;
    private ICssValue _weight;
    public ICssValue FontFamilies { get; }
    public ICssValue LineHeight { get; }
    public ICssValue Size { get; }
    public ICssValue Stretch { get; }
    public ICssValue Style { get; }
    public ICssValue Variant { get; }
    public ICssValue Weight { get; }
    public string CssText { get; }
    public CssFontValue(ICssValue style, ICssValue variant, ICssValue weight, ICssValue stretch, ICssValue size, ICssValue lineHeight, ICssValue fontFamilies);
    public ICssValue get_FontFamilies();
    public ICssValue get_LineHeight();
    public ICssValue get_Size();
    public ICssValue get_Stretch();
    public ICssValue get_Style();
    public ICssValue get_Variant();
    public ICssValue get_Weight();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssGradientStopValue : object {
    private Color _color;
    private ICssValue _location;
    public Color Color { get; }
    public bool IsDetermined { get; }
    public bool IsUndetermined { get; }
    public ICssValue Location { get; }
    public string CssText { get; }
    public CssGradientStopValue(Color color, ICssValue location);
    public Color get_Color();
    public bool get_IsDetermined();
    public bool get_IsUndetermined();
    public ICssValue get_Location();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssGridTemplateValue : object {
    private ICssValue _rows;
    private ICssValue _columns;
    private ICssValue _areas;
    public ICssValue TemplateRows { get; }
    public ICssValue TemplateColumns { get; }
    public ICssValue TemplateAreas { get; }
    public string CssText { get; }
    public CssGridTemplateValue(ICssValue rows, ICssValue columns, ICssValue areas);
    public ICssValue get_TemplateRows();
    public ICssValue get_TemplateColumns();
    public ICssValue get_TemplateAreas();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssGridValue : object {
    private ICssValue _rows;
    private ICssValue _columns;
    private ICssValue[] _sizes;
    private bool _dense;
    public ICssValue Rows { get; }
    public ICssValue Columns { get; }
    public ICssValue[] Sizes { get; }
    public bool IsDense { get; }
    public string CssText { get; }
    public CssGridValue(ICssValue rows, ICssValue columns, IEnumerable`1<ICssValue> sizes, bool dense);
    public ICssValue get_Rows();
    public ICssValue get_Columns();
    public ICssValue[] get_Sizes();
    public bool get_IsDense();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssImageRepeatsValue : object {
    private ICssValue _horizontal;
    private ICssValue _vertical;
    public ICssValue Horizontal { get; }
    public ICssValue Vertical { get; }
    public string CssText { get; }
    public CssImageRepeatsValue(ICssValue horizontal, ICssValue vertical);
    public ICssValue get_Horizontal();
    public ICssValue get_Vertical();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssInheritValue : object {
    public static CssInheritValue Instance;
    public ICssValue Value { get; }
    public string CssText { get; }
    private static CssInheritValue();
    public sealed virtual ICssValue get_Value();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssInitialValue : ValueType {
    private ICssValue _value;
    public ICssValue Value { get; }
    public string CssText { get; }
    public CssInitialValue(ICssValue value);
    public sealed virtual ICssValue get_Value();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssLinearGradientValue : object {
    private CssGradientStopValue[] _stops;
    private ICssValue _angle;
    private bool _repeating;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public ICssValue Angle { get; }
    public CssGradientStopValue[] Stops { get; }
    public bool IsRepeating { get; }
    public CssLinearGradientValue(ICssValue angle, CssGradientStopValue[] stops, bool repeating);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public ICssValue get_Angle();
    public sealed virtual CssGradientStopValue[] get_Stops();
    public sealed virtual bool get_IsRepeating();
}
internal class AngleSharp.Css.Values.CssListValue : CssListValue`1<ICssValue> {
    public CssListValue(ICssValue[] items);
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Css.Values.CssListValue`1 : object {
    private T[] _items;
    public ICssValue Item { get; }
    public T[] Items { get; }
    public string CssText { get; }
    public int Count { get; }
    public CssListValue`1(T[] items);
    public sealed virtual ICssValue get_Item(int index);
    public T[] get_Items();
    public sealed virtual string get_CssText();
    public sealed virtual int get_Count();
    private sealed virtual override IEnumerator`1<ICssValue> System.Collections.Generic.IEnumerable<AngleSharp.Css.Dom.ICssValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class AngleSharp.Css.Values.CssLocalFontValue : object {
    private string _fontName;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssLocalFontValue(string fontName);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Css.Values.CssMatrixValue : object {
    private Double[] _values;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public double Item { get; }
    internal CssMatrixValue(Double[] values);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public double get_Item(int index);
    public sealed virtual TransformMatrix ComputeMatrix(IRenderDimensions dimensions);
}
internal class AngleSharp.Css.Values.CssMinMaxValue : object {
    private ICssValue _min;
    private ICssValue _max;
    public ICssValue Maximum { get; }
    public ICssValue Minimum { get; }
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssMinMaxValue(ICssValue min, ICssValue max);
    public ICssValue get_Maximum();
    public ICssValue get_Minimum();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssNoneValue : object {
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssOriginValue : object {
    private ICssValue _x;
    private ICssValue _y;
    private ICssValue _z;
    public string CssText { get; }
    public ICssValue X { get; }
    public ICssValue Y { get; }
    public ICssValue Z { get; }
    public CssOriginValue(ICssValue x, ICssValue y, ICssValue z);
    public sealed virtual string get_CssText();
    public ICssValue get_X();
    public ICssValue get_Y();
    public ICssValue get_Z();
}
internal class AngleSharp.Css.Values.CssPeriodicValue : CssPeriodicValue`1<ICssValue> {
    public CssPeriodicValue(ICssValue[] values);
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Css.Values.CssPeriodicValue`1 : object {
    private T[] _values;
    public ICssValue Item { get; }
    public string CssText { get; }
    public T Top { get; }
    public T Right { get; }
    public T Bottom { get; }
    public T Left { get; }
    public int Count { get; }
    public CssPeriodicValue`1(T[] values);
    public sealed virtual ICssValue get_Item(int index);
    public sealed virtual string get_CssText();
    public T get_Top();
    public T get_Right();
    public T get_Bottom();
    public T get_Left();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("AngleSharp.Css.Values.CssPeriodicValue`1/<System-Collections-Generic-IEnumerable<AngleSharp-Css-Dom-ICssValue>-GetEnumerator>d__16")]
private sealed virtual override IEnumerator`1<ICssValue> System.Collections.Generic.IEnumerable<AngleSharp.Css.Dom.ICssValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class AngleSharp.Css.Values.CssPerspectiveValue : object {
    private ICssValue _distance;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public ICssValue Distance { get; }
    internal CssPerspectiveValue(ICssValue distance);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public ICssValue get_Distance();
    public sealed virtual TransformMatrix ComputeMatrix(IRenderDimensions renderDimensions);
}
public class AngleSharp.Css.Values.CssRadialGradientValue : object {
    private CssGradientStopValue[] _stops;
    private Point _center;
    private ICssValue _width;
    private ICssValue _height;
    private bool _repeating;
    private bool _circle;
    private SizeMode _sizeMode;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public bool IsCircle { get; }
    public SizeMode Mode { get; }
    public Point Position { get; }
    public ICssValue MajorRadius { get; }
    public ICssValue MinorRadius { get; }
    public CssGradientStopValue[] Stops { get; }
    public bool IsRepeating { get; }
    public CssRadialGradientValue(bool circle, Point center, ICssValue width, ICssValue height, SizeMode sizeMode, CssGradientStopValue[] stops, bool repeating);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public bool get_IsCircle();
    public SizeMode get_Mode();
    public Point get_Position();
    public ICssValue get_MajorRadius();
    public ICssValue get_MinorRadius();
    public sealed virtual CssGradientStopValue[] get_Stops();
    public sealed virtual bool get_IsRepeating();
}
internal class AngleSharp.Css.Values.CssRadiusValue : CssRadiusValue`1<ICssValue> {
    public CssRadiusValue(ICssValue[] values);
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Css.Values.CssRadiusValue`1 : object {
    private T[] _values;
    public ICssValue Item { get; }
    public string CssText { get; }
    public T Width { get; }
    public T Height { get; }
    public int Count { get; }
    public CssRadiusValue`1(T[] values);
    public sealed virtual ICssValue get_Item(int index);
    public sealed virtual string get_CssText();
    public T get_Width();
    public T get_Height();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("AngleSharp.Css.Values.CssRadiusValue`1/<System-Collections-Generic-IEnumerable<AngleSharp-Css-Dom-ICssValue>-GetEnumerator>d__12")]
private sealed virtual override IEnumerator`1<ICssValue> System.Collections.Generic.IEnumerable<AngleSharp.Css.Dom.ICssValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class AngleSharp.Css.Values.CssReferenceValue : object {
    private string _value;
    private TextRange[] _ranges;
    private CssVarValue[] _references;
    public string Value { get; }
    public TextRange[] Ranges { get; }
    public CssVarValue[] References { get; }
    public string CssText { get; }
    public CssReferenceValue(string value, IEnumerable`1<Tuple`2<TextRange, CssVarValue>> references);
    public sealed virtual string get_Value();
    public TextRange[] get_Ranges();
    public CssVarValue[] get_References();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssRepeatValue : object {
    private ICssValue _count;
    private ICssValue _value;
    public ICssValue Count { get; }
    public ICssValue Value { get; }
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssRepeatValue(ICssValue count, ICssValue value);
    public ICssValue get_Count();
    public ICssValue get_Value();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssRotateValue : object {
    private double _x;
    private double _y;
    private double _z;
    private ICssValue _angle;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    public ICssValue Angle { get; }
    public CssRotateValue(double x, double y, double z, ICssValue angle);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public double get_X();
    public double get_Y();
    public double get_Z();
    public ICssValue get_Angle();
    public sealed virtual TransformMatrix ComputeMatrix(IRenderDimensions renderDimensions);
}
public class AngleSharp.Css.Values.CssRunningValue : object {
    private string _ident;
    public string Identifier { get; }
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public CssRunningValue(string ident);
    public string get_Identifier();
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
}
internal class AngleSharp.Css.Values.CssScaleValue : object {
    private double _sx;
    private double _sy;
    private double _sz;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public double ScaleX { get; }
    public double ScaleY { get; }
    public double ScaleZ { get; }
    public CssScaleValue(double sx, double sy, double sz);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public double get_ScaleX();
    public double get_ScaleY();
    public double get_ScaleZ();
    public sealed virtual TransformMatrix ComputeMatrix(IRenderDimensions renderDimensions);
}
public class AngleSharp.Css.Values.CssShadowValue : object {
    private bool _inset;
    private ICssValue _offsetX;
    private ICssValue _offsetY;
    private ICssValue _blurRadius;
    private ICssValue _spreadRadius;
    private Nullable`1<Color> _color;
    public string CssText { get; }
    public Color Color { get; }
    public ICssValue OffsetX { get; }
    public ICssValue OffsetY { get; }
    public ICssValue BlurRadius { get; }
    public ICssValue SpreadRadius { get; }
    public bool IsInset { get; }
    public CssShadowValue(bool inset, ICssValue offsetX, ICssValue offsetY, ICssValue blurRadius, ICssValue spreadRadius, Nullable`1<Color> color);
    public sealed virtual string get_CssText();
    public Color get_Color();
    public ICssValue get_OffsetX();
    public ICssValue get_OffsetY();
    public ICssValue get_BlurRadius();
    public ICssValue get_SpreadRadius();
    public bool get_IsInset();
}
public class AngleSharp.Css.Values.CssShapeValue : object {
    private ICssValue _top;
    private ICssValue _right;
    private ICssValue _bottom;
    private ICssValue _left;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public ICssValue Top { get; }
    public ICssValue Right { get; }
    public ICssValue Bottom { get; }
    public ICssValue Left { get; }
    public CssShapeValue(ICssValue top, ICssValue right, ICssValue bottom, ICssValue left);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public ICssValue get_Top();
    public ICssValue get_Right();
    public ICssValue get_Bottom();
    public ICssValue get_Left();
}
public class AngleSharp.Css.Values.CssSkewValue : object {
    private ICssValue _alpha;
    private ICssValue _beta;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public ICssValue Alpha { get; }
    public ICssValue Beta { get; }
    public CssSkewValue(ICssValue alpha, ICssValue beta);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public ICssValue get_Alpha();
    public ICssValue get_Beta();
    public sealed virtual TransformMatrix ComputeMatrix(IRenderDimensions renderDimensions);
}
internal class AngleSharp.Css.Values.CssStepsValue : object {
    private int _intervals;
    private bool _start;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public int Intervals { get; }
    public bool IsStart { get; }
    public CssStepsValue(int intervals, bool start);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public int get_Intervals();
    public bool get_IsStart();
}
internal class AngleSharp.Css.Values.CssTranslateValue : object {
    private ICssValue _x;
    private ICssValue _y;
    private ICssValue _z;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public ICssValue ShiftX { get; }
    public ICssValue ShiftY { get; }
    public ICssValue ShiftZ { get; }
    public CssTranslateValue(ICssValue x, ICssValue y, ICssValue z);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public ICssValue get_ShiftX();
    public ICssValue get_ShiftY();
    public ICssValue get_ShiftZ();
    public sealed virtual TransformMatrix ComputeMatrix(IRenderDimensions renderDimensions);
}
public class AngleSharp.Css.Values.CssTupleValue : CssTupleValue`1<ICssValue> {
    public CssTupleValue(ICssValue[] items, string separator);
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Css.Values.CssTupleValue`1 : object {
    private T[] _items;
    private string _separator;
    public ICssValue Item { get; }
    public T[] Items { get; }
    public string Separator { get; }
    public string CssText { get; }
    public int Count { get; }
    public CssTupleValue`1(T[] items, string separator);
    public sealed virtual ICssValue get_Item(int index);
    public T[] get_Items();
    public string get_Separator();
    public sealed virtual string get_CssText();
    public sealed virtual int get_Count();
    private sealed virtual override IEnumerator`1<ICssValue> System.Collections.Generic.IEnumerable<AngleSharp.Css.Dom.ICssValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class AngleSharp.Css.Values.CssUnsetValue : ValueType {
    private ICssValue _value;
    public ICssValue Value { get; }
    public string CssText { get; }
    public CssUnsetValue(ICssValue value);
    public sealed virtual ICssValue get_Value();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.CssUrlValue : object {
    private string _path;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string CssText { get; }
    public string Path { get; }
    public CssUrlValue(string path);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public sealed virtual string get_CssText();
    public string get_Path();
}
public class AngleSharp.Css.Values.CssVarValue : object {
    private string _variableName;
    private string _defaultValue;
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public string VariableName { get; }
    public string DefaultValue { get; }
    public string CssText { get; }
    public CssVarValue(string variableName, string defaultValue);
    public sealed virtual string get_Name();
    public sealed virtual ICssValue[] get_Arguments();
    public string get_VariableName();
    public string get_DefaultValue();
    public sealed virtual string get_CssText();
}
public class AngleSharp.Css.Values.Fraction : ValueType {
    private double _value;
    private Unit _unit;
    public string CssText { get; }
    public double Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Fraction(double value, Unit unit);
    public sealed virtual string get_CssText();
    public double get_Value();
    public Unit get_Type();
    public string get_UnitString();
    public static bool TryParse(string s, Fraction& result);
    public static Unit GetUnit(string s);
    public double To(Unit unit);
    public sealed virtual bool Equals(Fraction other);
    public sealed virtual int CompareTo(Fraction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Frequency : ValueType {
    private double _value;
    private Unit _unit;
    public string CssText { get; }
    public double Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Frequency(double value, Unit unit);
    public sealed virtual string get_CssText();
    public double get_Value();
    public Unit get_Type();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Frequency a, Frequency b);
    public static bool op_GreaterThan(Frequency a, Frequency b);
    public static bool op_LessThanOrEqual(Frequency a, Frequency b);
    public static bool op_LessThan(Frequency a, Frequency b);
    public sealed virtual int CompareTo(Frequency other);
    public static bool TryParse(string s, Frequency& result);
    public static Unit GetUnit(string s);
    public double ToHertz();
    public sealed virtual bool Equals(Frequency other);
    public static bool op_Equality(Frequency a, Frequency b);
    public static bool op_Inequality(Frequency a, Frequency b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface AngleSharp.Css.Values.ICssCompositeValue {
}
public interface AngleSharp.Css.Values.ICssFunctionValue {
    public string Name { get; }
    public ICssValue[] Arguments { get; }
    public abstract virtual string get_Name();
    public abstract virtual ICssValue[] get_Arguments();
}
public interface AngleSharp.Css.Values.ICssGradientFunctionValue {
    public CssGradientStopValue[] Stops { get; }
    public bool IsRepeating { get; }
    public abstract virtual CssGradientStopValue[] get_Stops();
    public abstract virtual bool get_IsRepeating();
}
public interface AngleSharp.Css.Values.ICssImageValue {
}
[DefaultMemberAttribute("Item")]
public interface AngleSharp.Css.Values.ICssMultipleValue {
    public int Count { get; }
    public ICssValue Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICssValue get_Item(int index);
}
public interface AngleSharp.Css.Values.ICssPrimitiveValue {
}
public interface AngleSharp.Css.Values.ICssRawValue {
    public string Value { get; }
    public abstract virtual string get_Value();
}
public interface AngleSharp.Css.Values.ICssSpecialValue {
    public ICssValue Value { get; }
    public abstract virtual ICssValue get_Value();
}
public interface AngleSharp.Css.Values.ICssTimingFunctionValue {
}
public interface AngleSharp.Css.Values.ICssTransformFunctionValue {
    public abstract virtual TransformMatrix ComputeMatrix(IRenderDimensions renderDimensions);
}
public class AngleSharp.Css.Values.Identifier : ValueType {
    private string _text;
    public string Value { get; }
    public string CssText { get; }
    public Identifier(string text);
    public string get_Value();
    public sealed virtual string get_CssText();
    public sealed virtual bool Equals(Identifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Label : ValueType {
    private string _value;
    public string Value { get; }
    public string CssText { get; }
    public Label(string value);
    public string get_Value();
    public sealed virtual string get_CssText();
    public sealed virtual bool Equals(Label other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Length : ValueType {
    public static Length Zero;
    public static Length Half;
    public static Length Full;
    public static Length Thin;
    public static Length Medium;
    public static Length Thick;
    public static Length Auto;
    public static Length Content;
    public static Length Normal;
    private double _value;
    private Unit _unit;
    public string CssText { get; }
    public bool IsAbsolute { get; }
    public bool IsRelative { get; }
    public Unit Type { get; }
    public double Value { get; }
    public string UnitString { get; }
    public Length(double value, Unit unit);
    private static Length();
    public sealed virtual string get_CssText();
    public bool get_IsAbsolute();
    public bool get_IsRelative();
    public Unit get_Type();
    public double get_Value();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Length a, Length b);
    public static bool op_GreaterThan(Length a, Length b);
    public static bool op_LessThanOrEqual(Length a, Length b);
    public static bool op_LessThan(Length a, Length b);
    public sealed virtual int CompareTo(Length other);
    public static bool TryParse(string s, Length& result);
    public static Unit GetUnit(string s);
    public double ToPixel(IRenderDimensions renderDimensions, RenderMode mode);
    public double To(Unit unit, IRenderDimensions renderDimensions, RenderMode mode);
    private void CheckForValidRenderDimensions(IRenderDimensions renderDimensions, RenderMode mode);
    private void CheckForValidRenderDimensionsForFont(IRenderDimensions renderDimensions);
    public static bool op_Equality(Length a, Length b);
    public static bool op_Inequality(Length a, Length b);
    public sealed virtual bool Equals(Length other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.LineNames : ValueType {
    private String[] _names;
    public String[] Names { get; }
    public string CssText { get; }
    public LineNames(IEnumerable`1<string> names);
    public String[] get_Names();
    public sealed virtual string get_CssText();
    public sealed virtual bool Equals(LineNames other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Point : ValueType {
    public static Point Center;
    public static Point LeftTop;
    public static Point RightTop;
    public static Point RightBottom;
    public static Point LeftBottom;
    public static Point Left;
    public static Point Right;
    public static Point Bottom;
    public static Point Top;
    private ICssValue _x;
    private ICssValue _y;
    public string CssText { get; }
    public ICssValue X { get; }
    public ICssValue Y { get; }
    public Point(ICssValue x, ICssValue y);
    private static Point();
    public sealed virtual string get_CssText();
    public ICssValue get_X();
    public ICssValue get_Y();
    public static bool op_Equality(Point a, Point b);
    public static bool op_Inequality(Point a, Point b);
    public sealed virtual bool Equals(Point other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Quote : ValueType {
    private string _open;
    private string _close;
    public string Open { get; }
    public string Close { get; }
    public string CssText { get; }
    public Quote(string open, string close);
    public string get_Open();
    public string get_Close();
    public sealed virtual string get_CssText();
    public sealed virtual bool Equals(Quote other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Ratio : ValueType {
    private double _top;
    private double _bottom;
    public string CssText { get; }
    public double Top { get; }
    public double Bottom { get; }
    public double Value { get; }
    public Ratio(double top, double bottom);
    public sealed virtual string get_CssText();
    public double get_Top();
    public double get_Bottom();
    public double get_Value();
    public sealed virtual bool Equals(Ratio other);
    public sealed virtual int CompareTo(Ratio other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Resolution : ValueType {
    private double _value;
    private Unit _unit;
    public string CssText { get; }
    public double Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Resolution(double value, Unit unit);
    public sealed virtual string get_CssText();
    public double get_Value();
    public Unit get_Type();
    public string get_UnitString();
    public static bool TryParse(string s, Resolution& result);
    public static Unit GetUnit(string s);
    public double ToDotsPerPixel();
    public double To(Unit unit);
    public sealed virtual bool Equals(Resolution other);
    public sealed virtual int CompareTo(Resolution other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AngleSharp.Css.Values.Time : ValueType {
    public static Time Zero;
    private double _value;
    private Unit _unit;
    public string CssText { get; }
    public double Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Time(double value, Unit unit);
    private static Time();
    public sealed virtual string get_CssText();
    public double get_Value();
    public Unit get_Type();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Time a, Time b);
    public static bool op_GreaterThan(Time a, Time b);
    public static bool op_LessThanOrEqual(Time a, Time b);
    public static bool op_LessThan(Time a, Time b);
    public sealed virtual int CompareTo(Time other);
    public static bool TryParse(string s, Time& result);
    public static Unit GetUnit(string s);
    public double ToMilliseconds();
    public sealed virtual bool Equals(Time other);
    public static bool op_Equality(Time a, Time b);
    public static bool op_Inequality(Time a, Time b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Css.Values.TransformMatrix : object {
    public static TransformMatrix Zero;
    public static TransformMatrix One;
    private Double[0...,0...] _matrix;
    public double Item { get; }
    public double M11 { get; }
    public double M12 { get; }
    public double M13 { get; }
    public double M21 { get; }
    public double M22 { get; }
    public double M23 { get; }
    public double M31 { get; }
    public double M32 { get; }
    public double M33 { get; }
    public double Tx { get; }
    public double Ty { get; }
    public double Tz { get; }
    public TransformMatrix(Double[] values);
    public TransformMatrix(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33, double tx, double ty, double tz, double px, double py, double pz);
    private static TransformMatrix();
    public double get_Item(int row, int col);
    public double get_M11();
    public double get_M12();
    public double get_M13();
    public double get_M21();
    public double get_M22();
    public double get_M23();
    public double get_M31();
    public double get_M32();
    public double get_M33();
    public double get_Tx();
    public double get_Ty();
    public double get_Tz();
    public sealed virtual bool Equals(TransformMatrix other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class AngleSharp.CssConfigurationExtensions : object {
    [ExtensionAttribute]
public static IConfiguration WithCss(IConfiguration configuration, CssParserOptions options);
    [ExtensionAttribute]
public static IConfiguration WithRenderDevice(IConfiguration configuration, IRenderDevice renderDevice);
}
[ExtensionAttribute]
public static class AngleSharp.Dom.CssApiExtensions : object {
    [ExtensionAttribute]
public static ICssStyleDeclaration ComputeCurrentStyle(IElement element);
    [ExtensionAttribute]
public static T Css(T elements, string propertyName, string propertyValue);
    [ExtensionAttribute]
public static T Css(T elements, IEnumerable`1<KeyValuePair`2<string, string>> properties);
    [ExtensionAttribute]
public static T Css(T elements, object properties);
}
[ExtensionAttribute]
[DomExposedAttribute("Element")]
public static class AngleSharp.Dom.ElementExtensions : object {
    [ExtensionAttribute]
[DomNameAttribute("pseudo")]
public static IPseudoElement Pseudo(IElement element, string pseudoElement);
    [ExtensionAttribute]
[DomNameAttribute("innerText")]
[DomAccessorAttribute]
public static string GetInnerText(IElement element);
    [ExtensionAttribute]
[DomNameAttribute("innerText")]
[DomAccessorAttribute]
public static void SetInnerText(IElement element, string value);
    private static void InnerTextCollection(INode node, StringBuilder sb, Dictionary`2<int, int> requiredLineBreakCounts, ICssStyleDeclaration parentStyle);
    private static void ItcInCssBox(ICssStyleDeclaration elementStyle, ICssStyleDeclaration parentStyle, INode node, StringBuilder sb, Dictionary`2<int, int> requiredLineBreakCounts);
    [ExtensionAttribute]
public static IEnumerable`1<TElement> SetStyle(IEnumerable`1<TElement> elements, Action`1<ICssStyleDeclaration> change);
    private static bool HasCssBox(INode node);
    private static bool IsBlockLevelDisplay(string display);
    private static bool IsBlockLevel(INode node);
    private static void ProcessText(string text, StringBuilder sb, ICssStyleDeclaration style, bool lastLine);
}
[ExtensionAttribute]
public static class AngleSharp.Dom.StyleSheetExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TRule> GetRules(IEnumerable`1<IStyleSheet> sheets);
    [IteratorStateMachineAttribute("AngleSharp.Dom.StyleSheetExtensions/<GetMatchingStyles>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<ICssStyleRule> GetMatchingStyles(ICssRuleList rules, IRenderDevice device);
    [ExtensionAttribute]
public static IEnumerable`1<ICssStyleRule> StylesWith(IEnumerable`1<IStyleSheet> sheets, ISelector selector);
    [ExtensionAttribute]
public static IDocument GetDocument(IStyleSheet sheet);
}
[ExtensionAttribute]
[DomExposedAttribute("Window")]
public static class AngleSharp.Dom.WindowExtensions : object {
    [ExtensionAttribute]
[DomNameAttribute("matchMedia")]
public static IMediaQueryList MatchMedia(IWindow window, string mediaText);
    [ExtensionAttribute]
[DomNameAttribute("getPseudoElements")]
public static ICssPseudoElementList GetPseudoElements(IWindow window, IElement element, string type);
    [ExtensionAttribute]
[DomNameAttribute("getComputedStyle")]
public static ICssStyleDeclaration GetComputedStyle(IWindow window, IElement element, string pseudo);
    [ExtensionAttribute]
[DomNameAttribute("computeDefaultStyle")]
public static ICssStyleDeclaration ComputeDefaultStyle(IWindow window, IElement element);
    [ExtensionAttribute]
[DomNameAttribute("computeRawStyle")]
public static ICssStyleDeclaration ComputeRawStyle(IWindow window, IElement element);
    [ExtensionAttribute]
public static IRenderNode Render(IWindow window, IRenderDevice renderDevice);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
