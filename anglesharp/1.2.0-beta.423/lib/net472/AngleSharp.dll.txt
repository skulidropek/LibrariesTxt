[FlagsAttribute]
public enum AngleSharp.Attributes.Accessors : Enum {
    public byte value__;
    public static Accessors None;
    public static Accessors Getter;
    public static Accessors Setter;
    public static Accessors Deleter;
    public static Accessors Adder;
    public static Accessors Remover;
}
[AttributeUsageAttribute("192")]
public class AngleSharp.Attributes.DomAccessorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Accessors <Type>k__BackingField;
    public Accessors Type { get; }
    public DomAccessorAttribute(Accessors type);
    [CompilerGeneratedAttribute]
public Accessors get_Type();
}
[AttributeUsageAttribute("32")]
public class AngleSharp.Attributes.DomConstructorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6092")]
public class AngleSharp.Attributes.DomDescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public DomDescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
public class AngleSharp.Attributes.DomExposedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public string Target { get; }
    public DomExposedAttribute(string target);
    [CompilerGeneratedAttribute]
public string get_Target();
}
[AttributeUsageAttribute("6092")]
public class AngleSharp.Attributes.DomHistoricalAttribute : Attribute {
}
[AttributeUsageAttribute("96")]
public class AngleSharp.Attributes.DomInitDictAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public int Offset { get; }
    public bool IsOptional { get; }
    public DomInitDictAttribute(int offset, bool optional);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
public class AngleSharp.Attributes.DomInstanceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public DomInstanceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("640")]
public class AngleSharp.Attributes.DomLenientThisAttribute : Attribute {
}
[AttributeUsageAttribute("16")]
public class AngleSharp.Attributes.DomLiteralsAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6108")]
public class AngleSharp.Attributes.DomNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <OfficialName>k__BackingField;
    public string OfficialName { get; }
    public DomNameAttribute(string officialName);
    [CompilerGeneratedAttribute]
public string get_OfficialName();
}
[AttributeUsageAttribute("1036")]
public class AngleSharp.Attributes.DomNoInterfaceObjectAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class AngleSharp.Attributes.DomPutForwardsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public DomPutForwardsAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Browser.DefaultNavigationHandler : object {
    private IBrowsingContext _context;
    public DefaultNavigationHandler(IBrowsingContext context);
    [AsyncStateMachineAttribute("AngleSharp.Browser.DefaultNavigationHandler/<NavigateAsync>d__2")]
public sealed virtual Task`1<IDocument> NavigateAsync(DocumentRequest request, CancellationToken cancel);
    public sealed virtual bool SupportsProtocol(string protocol);
}
[DomNameAttribute("ApplicationCache")]
public enum AngleSharp.Browser.Dom.CacheStatus : Enum {
    public byte value__;
    [DomNameAttribute("UNCACHED")]
public static CacheStatus Uncached;
    [DomNameAttribute("IDLE")]
public static CacheStatus Idle;
    [DomNameAttribute("CHECKING")]
public static CacheStatus Checking;
    [DomNameAttribute("DOWNLOADING")]
public static CacheStatus Downloading;
    [DomNameAttribute("UPDATEREADY")]
public static CacheStatus UpdateReady;
    [DomNameAttribute("OBSOLETE")]
public static CacheStatus Obsolete;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Browser.Dom.Events.InteractivityEvent`1 : Event {
    [NullableAttribute("2")]
private Task _result;
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [NullableAttribute("2")]
public Task Result { get; }
    public T Data { get; }
    public InteractivityEvent`1(string eventName, T data);
    [NullableContextAttribute("2")]
public Task get_Result();
    [MemberNotNullAttribute("_result")]
public void SetResult(Task value);
    [CompilerGeneratedAttribute]
public T get_Data();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Browser.Dom.Events.TrackEvent : Event {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; }
    public TrackEvent(string eventName, Exception error);
    [CompilerGeneratedAttribute]
public Exception get_Error();
}
[NullableContextAttribute("1")]
[DomNameAttribute("ApplicationCache")]
public interface AngleSharp.Browser.Dom.IApplicationCache {
    [DomNameAttribute("status")]
public CacheStatus Status { get; }
    public abstract virtual CacheStatus get_Status();
    [DomNameAttribute("update")]
public abstract virtual void Update();
    [DomNameAttribute("abort")]
public abstract virtual void Abort();
    [DomNameAttribute("swapCache")]
public abstract virtual void Swap();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Checking(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Checking(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NoUpdate(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NoUpdate(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Downloading(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Downloading(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Progress(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Progress(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UpdateReady(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UpdateReady(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cached(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cached(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Obsolete(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Obsolete(DomEventHandler value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("History")]
public interface AngleSharp.Browser.Dom.IHistory {
    [DomNameAttribute("length")]
public int Length { get; }
    public int Index { get; }
    public IDocument Item { get; }
    [DomNameAttribute("state")]
public object State { get; }
    public abstract virtual int get_Length();
    public abstract virtual int get_Index();
    public abstract virtual IDocument get_Item(int index);
    public abstract virtual object get_State();
    [DomNameAttribute("go")]
public abstract virtual void Go(int delta);
    [DomNameAttribute("back")]
public abstract virtual void Back();
    [DomNameAttribute("forward")]
public abstract virtual void Forward();
    [NullableContextAttribute("2")]
[DomNameAttribute("pushState")]
public abstract virtual void PushState(object data, string title, string url);
    [NullableContextAttribute("2")]
[DomNameAttribute("replaceState")]
public abstract virtual void ReplaceState(object data, string title, string url);
}
[DomNameAttribute("Navigator")]
public interface AngleSharp.Browser.Dom.INavigator {
}
[NullableContextAttribute("1")]
[DomNameAttribute("NavigatorContentUtils")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Browser.Dom.INavigatorContentUtilities {
    [DomNameAttribute("registerProtocolHandler")]
public abstract virtual void RegisterProtocolHandler(string scheme, string url, string title);
    [DomNameAttribute("registerContentHandler")]
public abstract virtual void RegisterContentHandler(string mimeType, string url, string title);
    [DomNameAttribute("isProtocolHandlerRegistered")]
public abstract virtual bool IsProtocolHandlerRegistered(string scheme, string url);
    [DomNameAttribute("isContentHandlerRegistered")]
public abstract virtual bool IsContentHandlerRegistered(string mimeType, string url);
    [DomNameAttribute("unregisterProtocolHandler")]
public abstract virtual void UnregisterProtocolHandler(string scheme, string url);
    [DomNameAttribute("unregisterContentHandler")]
public abstract virtual void UnregisterContentHandler(string mimeType, string url);
}
[NullableContextAttribute("1")]
[DomNameAttribute("NavigatorID")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Browser.Dom.INavigatorId {
    [DomNameAttribute("appName")]
public string Name { get; }
    [DomNameAttribute("appVersion")]
public string Version { get; }
    [DomNameAttribute("platform")]
public string Platform { get; }
    [DomNameAttribute("userAgent")]
public string UserAgent { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
    public abstract virtual string get_Platform();
    public abstract virtual string get_UserAgent();
}
[DomNameAttribute("NavigatorOnLine")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Browser.Dom.INavigatorOnline {
    [DomNameAttribute("onLine")]
public bool IsOnline { get; }
    public abstract virtual bool get_IsOnline();
}
[DomNameAttribute("NavigatorStorageUtils")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Browser.Dom.INavigatorStorageUtilities {
    [DomNameAttribute("yieldForStorageUpdates")]
public abstract virtual void WaitForStorageUpdates();
}
public class AngleSharp.Browser.EncodingMetaHandler : object {
    [NullableContextAttribute("1")]
private sealed virtual override void AngleSharp.Browser.IMetaHandler.HandleContent(IHtmlMetaElement element);
    [NullableContextAttribute("1")]
protected virtual Encoding GetEncoding(IHtmlMetaElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Browser.EventLoopExtensions : object {
    [ExtensionAttribute]
public static void Enqueue(IEventLoop loop, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static Task`1<T> EnqueueAsync(IEventLoop loop, Func`2<CancellationToken, T> action, TaskPriority priority);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.ICommand {
    public string CommandId { get; }
    public abstract virtual string get_CommandId();
    public abstract virtual bool Execute(IDocument document, bool showUserInterface, string value);
    public abstract virtual bool IsEnabled(IDocument document);
    public abstract virtual bool IsIndeterminate(IDocument document);
    public abstract virtual bool IsExecuted(IDocument document);
    public abstract virtual bool IsSupported(IDocument document);
    public abstract virtual string GetValue(IDocument document);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.ICommandProvider {
    public abstract virtual ICommand GetCommand(string name);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.IEncodingProvider {
    public abstract virtual Encoding Suggest(string locale);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.IEventLoop {
    public abstract virtual ICancellable Enqueue(Action`1<CancellationToken> action, TaskPriority priority);
    public abstract virtual void Spin();
    public abstract virtual void CancelAll();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.IMetaHandler {
    public abstract virtual void HandleContent(IHtmlMetaElement element);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.INavigationHandler {
    public abstract virtual bool SupportsProtocol(string protocol);
    public abstract virtual Task`1<IDocument> NavigateAsync(DocumentRequest request, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.IParser {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Parsing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Parsing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Parsed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Parsed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(DomEventHandler value);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Browser.ISpellCheckService {
    public CultureInfo Culture { get; }
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual void Ignore(string word, bool persistent);
    public abstract virtual bool IsCorrect(string word);
    public abstract virtual IEnumerable`1<string> SuggestFor(string word);
}
public class AngleSharp.Browser.LocaleEncodingProvider : object {
    [NullableAttribute("1")]
private static Dictionary`2<string, Encoding> suggestions;
    private static LocaleEncodingProvider();
    [NullableContextAttribute("1")]
public virtual Encoding Suggest(string locale);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Browser.RefreshMetaHandler : object {
    private Predicate`1<Url> _shouldRefresh;
    public RefreshMetaHandler(Predicate`1<Url> shouldRefresh);
    private sealed virtual override void AngleSharp.Browser.IMetaHandler.HandleContent(IHtmlMetaElement element);
    private static bool AlwaysRefresh(Url url);
}
[FlagsAttribute]
public enum AngleSharp.Browser.Sandboxes : Enum {
    public ushort value__;
    public static Sandboxes None;
    public static Sandboxes Navigation;
    public static Sandboxes AuxiliaryNavigation;
    public static Sandboxes TopLevelNavigation;
    public static Sandboxes Plugins;
    public static Sandboxes Origin;
    public static Sandboxes Forms;
    public static Sandboxes PointerLock;
    public static Sandboxes Scripts;
    public static Sandboxes AutomaticFeatures;
    public static Sandboxes Fullscreen;
    public static Sandboxes DocumentDomain;
    public static Sandboxes Presentation;
}
public enum AngleSharp.Browser.TaskPriority : Enum {
    public byte value__;
    public static TaskPriority None;
    public static TaskPriority Normal;
    public static TaskPriority Microtask;
    public static TaskPriority Critical;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class AngleSharp.BrowsingContext : EventTarget {
    [NullableAttribute("1")]
private IEnumerable`1<object> _originalServices;
    [NullableAttribute("1")]
private List`1<object> _services;
    private Sandboxes _security;
    private IBrowsingContext _parent;
    private IDocument _creator;
    private IHistory _history;
    [NullableAttribute("1")]
private Dictionary`2<string, WeakReference`1<IBrowsingContext>> _children;
    [CompilerGeneratedAttribute]
private IDocument <Active>k__BackingField;
    public IDocument Active { get; public set; }
    public IDocument Creator { get; }
    [NullableAttribute("1")]
public IEnumerable`1<object> OriginalServices { get; }
    public IWindow Current { get; }
    public IBrowsingContext Parent { get; }
    public IHistory SessionHistory { get; }
    public Sandboxes Security { get; }
    public BrowsingContext(IConfiguration configuration);
    private BrowsingContext(Sandboxes security);
    [NullableContextAttribute("1")]
internal BrowsingContext(IEnumerable`1<object> services, Sandboxes security);
    [NullableContextAttribute("1")]
internal BrowsingContext(IBrowsingContext parent, Sandboxes security);
    [CompilerGeneratedAttribute]
public sealed virtual IDocument get_Active();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Active(IDocument value);
    public sealed virtual IDocument get_Creator();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<object> get_OriginalServices();
    public sealed virtual IWindow get_Current();
    public sealed virtual IBrowsingContext get_Parent();
    public sealed virtual IHistory get_SessionHistory();
    public sealed virtual Sandboxes get_Security();
    [NullableContextAttribute("1")]
public sealed virtual T GetService();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("AngleSharp.BrowsingContext/<GetServices>d__28`1")]
public sealed virtual IEnumerable`1<T> GetServices();
    [NullableContextAttribute("1")]
public sealed virtual IBrowsingContext CreateChild(string name, Sandboxes security);
    [NullableContextAttribute("1")]
public sealed virtual IBrowsingContext FindChild(string name);
    [NullableContextAttribute("1")]
public static IBrowsingContext New(IConfiguration configuration);
    [NullableContextAttribute("1")]
public static IBrowsingContext NewFrom(TService instance);
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.BrowsingContextExtensions : object {
    [ExtensionAttribute]
public static Task`1<IDocument> OpenNewAsync(IBrowsingContext context, string url, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task`1<IDocument> OpenAsync(IBrowsingContext context, IResponse response, CancellationToken cancel);
    [ExtensionAttribute]
public static Task`1<IDocument> OpenAsync(IBrowsingContext context, DocumentRequest request, CancellationToken cancel);
    [ExtensionAttribute]
public static Task`1<IDocument> OpenAsync(IBrowsingContext context, Url url, CancellationToken cancel);
    [AsyncStateMachineAttribute("AngleSharp.BrowsingContextExtensions/<OpenAsync>d__4")]
[ExtensionAttribute]
public static Task`1<IDocument> OpenAsync(IBrowsingContext context, Action`1<VirtualResponse> request, CancellationToken cancel);
    [ExtensionAttribute]
public static Task`1<IDocument> OpenAsync(IBrowsingContext context, string address, CancellationToken cancellation);
    [ExtensionAttribute]
internal static Task`1<IDocument> NavigateToAsync(IBrowsingContext context, DocumentRequest request, CancellationToken cancel);
    [ExtensionAttribute]
public static void NavigateTo(IBrowsingContext context, IDocument document);
    [ExtensionAttribute]
public static INavigationHandler GetNavigationHandler(IBrowsingContext context, Url url);
    [ExtensionAttribute]
public static Encoding GetDefaultEncoding(IBrowsingContext context);
    [ExtensionAttribute]
public static CultureInfo GetCulture(IBrowsingContext context);
    [ExtensionAttribute]
public static CultureInfo GetCultureFrom(IBrowsingContext context, string language);
    [ExtensionAttribute]
public static string GetLanguage(IBrowsingContext context);
    [ExtensionAttribute]
public static TFactory GetFactory(IBrowsingContext context);
    [ExtensionAttribute]
public static TProvider GetProvider(IBrowsingContext context);
    [ExtensionAttribute]
public static IResourceService`1<TResource> GetResourceService(IBrowsingContext context, string type);
    [ExtensionAttribute]
public static string GetCookie(IBrowsingContext context, Url url);
    [ExtensionAttribute]
public static void SetCookie(IBrowsingContext context, Url url, string value);
    [ExtensionAttribute]
public static ISpellCheckService GetSpellCheck(IBrowsingContext context, string language);
    [ExtensionAttribute]
public static IStylingService GetCssStyling(IBrowsingContext context);
    [ExtensionAttribute]
public static IStylingService GetStyling(IBrowsingContext context, string type);
    [ExtensionAttribute]
public static bool IsScripting(IBrowsingContext context);
    [ExtensionAttribute]
public static IScriptingService GetJsScripting(IBrowsingContext context);
    [ExtensionAttribute]
public static IScriptingService GetScripting(IBrowsingContext context, string type);
    [ExtensionAttribute]
public static ICommand GetCommand(IBrowsingContext context, string commandId);
    [ExtensionAttribute]
public static void TrackError(IBrowsingContext context, Exception ex);
    [ExtensionAttribute]
public static Task InteractAsync(IBrowsingContext context, string eventName, T data);
    [ExtensionAttribute]
public static IBrowsingContext ResolveTargetContext(IBrowsingContext context, string target);
    [ExtensionAttribute]
public static IBrowsingContext CreateChildFor(IBrowsingContext context, string target);
    [ExtensionAttribute]
public static IBrowsingContext FindChildFor(IBrowsingContext context, string target);
    [ExtensionAttribute]
public static IEnumerable`1<Task> GetDownloads(IBrowsingContext context);
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Common.ArrayPoolBuffer : object {
    [NullableAttribute("1")]
private Char[] _buffer;
    private int _start;
    private int _idx;
    private bool _disposed;
    private int Pointer { get; }
    public int Length { get; }
    public int Capacity { get; }
    public char Item { get; }
    public ArrayPoolBuffer(int length);
    private int get_Pointer();
    public sealed virtual void Append(char c);
    public sealed virtual void Discard();
    private void Clear(bool commit);
    public sealed virtual int get_Length();
    public sealed virtual int get_Capacity();
    [NullableContextAttribute("1")]
public sealed virtual IMutableCharBuffer Remove(int startIndex, int length);
    public sealed virtual void ReturnToPool();
    [NullableContextAttribute("1")]
public sealed virtual IMutableCharBuffer Insert(int idx, char c);
    public sealed virtual IMutableCharBuffer Append(ReadOnlySpan`1<char> str);
    public sealed virtual char get_Item(int i);
    public sealed virtual Nullable`1<ReadOnlyMemory`1<char>> TryCopyTo(Char[] buffer);
    private StringOrMemory GetData();
    public sealed virtual StringOrMemory GetDataAndClear();
    public sealed virtual bool HasText(ReadOnlySpan`1<char> test, StringComparison comparison);
    public sealed virtual bool HasTextAt(ReadOnlySpan`1<char> test, int offset, int length, StringComparison comparison);
    [NullableContextAttribute("1")]
private sealed virtual override string AngleSharp.Common.IMutableCharBuffer.ToString();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class AngleSharp.Common.ArrayPoolExtensions : object {
    [ExtensionAttribute]
internal static Lease`1<T> Borrow(ArrayPool`1<T> pool, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Common.BaseTokenizer : object {
    private Stack`1<ushort> _columns;
    private IReadOnlyTextSource _source;
    [NullableAttribute("2")]
private WritableTextSource _wts;
    [NullableAttribute("2")]
private CharArrayTextSource _cats;
    private StringBuilder _stringBuilder;
    private IMutableCharBuffer _charBuffer;
    [NullableAttribute("2")]
private ArrayPoolBuffer _apb;
    [NullableAttribute("2")]
private StringBuilderBuffer _sbb;
    private ushort _column;
    private ushort _row;
    private char _current;
    private bool _normalized;
    private bool _disableElementPositionTracking;
    public int InsertionPoint { get; protected set; }
    public int Position { get; }
    protected char Current { get; }
    protected StringBuilder StringBuffer { get; }
    private protected IMutableCharBuffer CharBuffer { get; }
    protected bool IsNormalized { get; }
    public bool DisableElementPositionTracking { get; public set; }
    public BaseTokenizer(TextSource source);
    public int get_InsertionPoint();
    protected void set_InsertionPoint(int value);
    public int get_Position();
    protected char get_Current();
    protected StringBuilder get_StringBuffer();
    private protected IMutableCharBuffer get_CharBuffer();
    protected bool get_IsNormalized();
    public bool get_DisableElementPositionTracking();
    public void set_DisableElementPositionTracking(bool value);
    public string FlushBuffer();
    internal StringOrMemory FlushBufferFast();
    internal StringOrMemory FlushBufferFast(Func`2<IMutableCharBuffer, string> stringResolver);
    public sealed virtual void Dispose();
    public TextPosition GetCurrentPosition();
    protected bool ContinuesWithInsensitive(string s);
    protected bool ContinuesWithSensitive(string s);
    protected string PeekString(int length);
    protected StringOrMemory PeekStringFast(int length);
    protected char SkipSpaces();
    protected char GetNext();
    protected char GetPrevious();
    protected void Advance();
    protected void Advance(int n);
    protected void Back();
    protected void Back(int n);
    private protected void Append(char c);
    private protected void Append(char a, char b);
    private protected void Append(char a, char b, char c);
    private protected void Append(char a, char b, char c, char d);
    private void AdvanceUnsafe();
    private void BackUnsafe();
    private char NormalizeForward(char p);
    private char NormalizeBackward(char p);
    private char ReadCharFromSource();
    [CompilerGeneratedAttribute]
private void <AdvanceUnsafe>g__Track|50_0();
}
[ExtensionAttribute]
internal static class AngleSharp.Common.BufferExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, string test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, int start, int length, string test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, string test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, int start, int length, string test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, StringOrMemory test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, int start, int length, StringOrMemory test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, StringOrMemory test);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, int start, int length, StringOrMemory test);
    [ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, ReadOnlyMemory`1<char> test);
    [ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, int start, int length, ReadOnlyMemory`1<char> test);
    [ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, ReadOnlyMemory`1<char> test);
    [ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, int start, int length, ReadOnlyMemory`1<char> test);
    [ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, ReadOnlySpan`1<char> test);
    [ExtensionAttribute]
public static bool Is(IMutableCharBuffer buffer, int start, int length, ReadOnlySpan`1<char> test);
    [ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, ReadOnlySpan`1<char> test);
    [ExtensionAttribute]
public static bool Isi(IMutableCharBuffer buffer, int start, int length, ReadOnlySpan`1<char> test);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Common.IBindable {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(Action`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(Action`1<string> value);
    public abstract virtual void Update(string value);
}
public interface AngleSharp.Common.ICancellable {
    public bool IsCompleted { get; }
    public bool IsRunning { get; }
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual bool get_IsRunning();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Common.ICancellable`1 {
    public Task`1<T> Task { get; }
    public abstract virtual Task`1<T> get_Task();
}
[DefaultMemberAttribute("Item")]
public interface AngleSharp.Common.ICharBuffer {
    public int Length { get; }
    public char Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual char get_Item(int i);
    public abstract virtual Nullable`1<ReadOnlyMemory`1<char>> TryCopyTo(Char[] buffer);
}
internal interface AngleSharp.Common.IMutableCharBuffer {
    public int Capacity { get; }
    public abstract virtual void Append(char c);
    public abstract virtual void Discard();
    public abstract virtual int get_Capacity();
    [NullableContextAttribute("1")]
public abstract virtual IMutableCharBuffer Remove(int start, int length);
    public abstract virtual void ReturnToPool();
    [NullableContextAttribute("1")]
public abstract virtual IMutableCharBuffer Insert(int index, char c);
    public abstract virtual IMutableCharBuffer Append(ReadOnlySpan`1<char> str);
    public abstract virtual StringOrMemory GetDataAndClear();
    public abstract virtual bool HasText(ReadOnlySpan`1<char> test, StringComparison comparison);
    public abstract virtual bool HasTextAt(ReadOnlySpan`1<char> test, int offset, int length, StringComparison comparison);
    [NullableContextAttribute("1")]
public abstract virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Common.Keywords : object {
    public static string Url;
    public static string On;
    public static string Off;
    public static string Of;
    public static string Yes;
    public static string No;
    public static string Top;
    public static string Any;
    public static string Public;
    public static string System;
    public static string CData;
    public static string Replace;
    public static string Alternate;
    public static string Odd;
    public static string Even;
    public static string TwoD;
    public static string WebGl;
    private static Keywords();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Common.ObjectExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToDictionary(object values);
    [ExtensionAttribute]
public static T GetItemByIndex(IEnumerable`1<T> items, int index);
    [IteratorStateMachineAttribute("AngleSharp.Common.ObjectExtensions/<Concat>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> items, T element);
    [IteratorStateMachineAttribute("AngleSharp.Common.ObjectExtensions/<Except>d__3`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> items, T element);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> TryGet(IDictionary`2<string, object> values, string key);
    [ExtensionAttribute]
public static object TryGet(IDictionary`2<string, object> values, string key);
    [ExtensionAttribute]
public static U GetOrDefault(IDictionary`2<T, U> values, T key, U defaultValue);
    [ExtensionAttribute]
public static double Constraint(double value, double min, double max);
    [ExtensionAttribute]
public static string GetMessage(T code);
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Common.StringBuilderBuffer : object {
    private bool _disposed;
    [NullableAttribute("1")]
internal StringBuilder _sb;
    public int Length { get; }
    public int Capacity { get; }
    public char Item { get; }
    public sealed virtual void Append(char c);
    public sealed virtual void Discard();
    public sealed virtual int get_Length();
    public sealed virtual int get_Capacity();
    [NullableContextAttribute("1")]
public sealed virtual IMutableCharBuffer Remove(int startIndex, int length);
    public sealed virtual void ReturnToPool();
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual IMutableCharBuffer Insert(int index, char c);
    public sealed virtual IMutableCharBuffer Append(ReadOnlySpan`1<char> str);
    public sealed virtual char get_Item(int i);
    public sealed virtual Nullable`1<ReadOnlyMemory`1<char>> TryCopyTo(Char[] buffer);
    private StringOrMemory GetData();
    public sealed virtual StringOrMemory GetDataAndClear();
    public sealed virtual bool HasText(ReadOnlySpan`1<char> test, StringComparison comparison);
    public sealed virtual bool HasTextAt(ReadOnlySpan`1<char> test, int offset, int length, StringComparison comparison);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Common.StringOrMemory : ValueType {
    private ReadOnlyMemory`1<char> _memory;
    public ReadOnlyMemory`1<char> Memory { get; }
    public int Length { get; }
    public char Item { get; }
    public bool IsNullOrEmpty { get; }
    public static StringOrMemory Empty { get; }
    [NullableContextAttribute("1")]
public StringOrMemory(string str);
    public StringOrMemory(ReadOnlyMemory`1<char> memory);
    [IsReadOnlyAttribute]
public ReadOnlyMemory`1<char> get_Memory();
    public int get_Length();
    public char get_Item(int i);
    public bool get_IsNullOrEmpty();
    public static StringOrMemory get_Empty();
    [NullableContextAttribute("1")]
public static StringOrMemory op_Implicit(string str);
    public static StringOrMemory op_Implicit(ReadOnlyMemory`1<char> memory);
    public static ReadOnlyMemory`1<char> op_Implicit(StringOrMemory str);
    public static ReadOnlySpan`1<char> op_Implicit(StringOrMemory str);
    [NullableContextAttribute("1")]
public static bool op_Equality(StringOrMemory left, string right);
    public static bool op_Equality(StringOrMemory left, StringOrMemory right);
    public static bool op_Equality(StringOrMemory left, ReadOnlyMemory`1<char> right);
    public static bool op_Equality(StringOrMemory left, ReadOnlySpan`1<char> right);
    [NullableContextAttribute("1")]
public static bool op_Inequality(StringOrMemory left, string right);
    public static bool op_Inequality(StringOrMemory left, StringOrMemory right);
    public static bool op_Inequality(StringOrMemory left, ReadOnlyMemory`1<char> right);
    public static bool op_Inequality(StringOrMemory left, ReadOnlySpan`1<char> right);
    public bool Equals(StringOrMemory other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public StringOrMemory Replace(char target, char replacement);
    [NullableContextAttribute("1")]
public virtual string ToString();
    private static int GetHashCode(ReadOnlySpan`1<char> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class AngleSharp.Common.StringOrMemoryExtensions : object {
    [ExtensionAttribute]
public static bool Is(StringOrMemory str, StringOrMemory other);
    [ExtensionAttribute]
public static bool Is(StringOrMemory str, string other);
    [ExtensionAttribute]
public static bool Isi(StringOrMemory str, StringOrMemory other);
    [ExtensionAttribute]
public static bool Isi(StringOrMemory str, string other);
    [ExtensionAttribute]
public static bool IsOneOf(StringOrMemory str, StringOrMemory a, StringOrMemory b, StringOrMemory c, StringOrMemory d);
    [ExtensionAttribute]
public static bool IsOneOf(StringOrMemory str, StringOrMemory a, StringOrMemory b, StringOrMemory c);
    [ExtensionAttribute]
public static bool IsOneOf(StringOrMemory str, StringOrMemory a, StringOrMemory b);
    [ExtensionAttribute]
public static bool StartsWith(StringOrMemory str, string test, StringComparison comparison);
    [ExtensionAttribute]
public static bool Equals(StringOrMemory str, string test, StringComparison comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Configuration : object {
    private IEnumerable`1<object> _services;
    public static IConfiguration Default { get; }
    public IEnumerable`1<object> Services { get; }
    public Configuration(IEnumerable`1<object> services);
    private static T Instance(T instance);
    private static Func`2<IBrowsingContext, T> Creator(Func`2<IBrowsingContext, T> creator);
    public static IConfiguration get_Default();
    public sealed virtual IEnumerable`1<object> get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static IConfiguration With(IConfiguration configuration, object service);
    [ExtensionAttribute]
public static IConfiguration WithOnly(IConfiguration configuration, TService service);
    [ExtensionAttribute]
public static IConfiguration WithOnly(IConfiguration configuration, Func`2<IBrowsingContext, TService> creator);
    [ExtensionAttribute]
public static IConfiguration Without(IConfiguration configuration, object service);
    [ExtensionAttribute]
public static IConfiguration With(IConfiguration configuration, IEnumerable`1<object> services);
    [ExtensionAttribute]
public static IConfiguration Without(IConfiguration configuration, IEnumerable`1<object> services);
    [ExtensionAttribute]
public static IConfiguration With(IConfiguration configuration, Func`2<IBrowsingContext, TService> creator);
    [ExtensionAttribute]
public static IConfiguration Without(IConfiguration configuration);
    [ExtensionAttribute]
public static bool Has(IConfiguration configuration);
    [ExtensionAttribute]
public static IConfiguration WithDefaultLoader(IConfiguration configuration, LoaderOptions setup);
    [ExtensionAttribute]
public static IConfiguration WithCulture(IConfiguration configuration, string name);
    [ExtensionAttribute]
public static IConfiguration WithCulture(IConfiguration configuration, CultureInfo culture);
    [ExtensionAttribute]
public static IConfiguration WithMetaRefresh(IConfiguration configuration, Predicate`1<Url> shouldRefresh);
    [ExtensionAttribute]
public static IConfiguration WithLocaleBasedEncoding(IConfiguration configuration);
    [ExtensionAttribute]
public static IConfiguration WithDefaultCookies(IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Css.CombinatorSymbols : object {
    public static string Exactly;
    public static string Unlike;
    public static string InList;
    public static string InToken;
    public static string Begins;
    public static string Ends;
    public static string InText;
    public static string Column;
    public static string Pipe;
    public static string Adjacent;
    [ObsoleteAttribute("Use CombinatorSymbols.Descendant")]
public static string Descendent;
    public static string Descendant;
    public static string Deep;
    public static string Child;
    public static string Sibling;
    private static CombinatorSymbols();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Css.CssStyleFormatter : object {
    public static IStyleFormatter Instance;
    private static CssStyleFormatter();
    private sealed virtual override string AngleSharp.IStyleFormatter.Sheet(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.BlockRules(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.Declaration(string name, string value, bool important);
    private sealed virtual override string AngleSharp.IStyleFormatter.BlockDeclarations(IEnumerable`1<IStyleFormattable> declarations);
    private sealed virtual override string AngleSharp.IStyleFormatter.Rule(string name, string value);
    private sealed virtual override string AngleSharp.IStyleFormatter.Rule(string name, string prelude, string rules);
    private sealed virtual override string AngleSharp.IStyleFormatter.Comment(string data);
}
public static class AngleSharp.Css.CssUtilities : object {
    [NullableContextAttribute("1")]
public static string Escape(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Css.DefaultAttributeSelectorFactory : object {
    private static HashSet`1<string> insensitiveAttributes;
    private Dictionary`2<string, Creator> _creators;
    private static DefaultAttributeSelectorFactory();
    public void Register(string combinator, Creator creator);
    public Creator Unregister(string combinator);
    protected virtual ISelector CreateDefault(string name, string value, string prefix, bool insensitive);
    public sealed virtual ISelector Create(string combinator, string name, string value, string prefix, bool insensitive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Css.DefaultPseudoClassSelectorFactory : object {
    private Dictionary`2<string, ISelector> _selectors;
    public void Register(string name, ISelector selector);
    public ISelector Unregister(string name);
    protected virtual ISelector CreateDefault(string name);
    public sealed virtual ISelector Create(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Css.DefaultPseudoElementSelectorFactory : object {
    private Dictionary`2<string, ISelector> _selectors;
    public void Register(string name, ISelector selector);
    public ISelector Unregister(string name);
    protected virtual ISelector CreateDefault(string name);
    public sealed virtual ISelector Create(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AllSelector : object {
    public static ISelector Instance;
    public Priority Specificity { get; }
    public string Text { get; }
    private static AllSelector();
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrAvailableSelector : BaseAttrSelector {
    public string Text { get; }
    public AttrAvailableSelector(string name, string prefix);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrContainsSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrContainsSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrEndsWithSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrEndsWithSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrInListSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrInListSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrInTokenSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrInTokenSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrMatchSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrMatchSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrNotMatchSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrNotMatchSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.AttrStartsWithSelector : BaseAttrSelector {
    private string _value;
    private StringComparison _comparison;
    public string Text { get; }
    public AttrStartsWithSelector(string name, string value, string prefix, bool insensitive);
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Css.Dom.BaseAttrSelector : object {
    private string _name;
    [NullableAttribute("2")]
private string _prefix;
    private string _attr;
    public Priority Specificity { get; }
    protected string Attribute { get; }
    protected string Name { get; }
    public BaseAttrSelector(string name, string prefix);
    public sealed virtual Priority get_Specificity();
    protected string get_Attribute();
    protected string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Css.Dom.ChildSelector : object {
    private string _name;
    private int _step;
    private int _offset;
    private ISelector _kind;
    public Priority Specificity { get; }
    protected bool IncludeParameterInSpecificity { get; }
    public string Text { get; }
    public string Name { get; }
    public int Step { get; }
    public int Offset { get; }
    public ISelector Kind { get; }
    public ChildSelector(string name, int step, int offset, ISelector kind);
    public sealed virtual Priority get_Specificity();
    protected virtual bool get_IncludeParameterInSpecificity();
    public sealed virtual string get_Text();
    public string get_Name();
    public int get_Step();
    public int get_Offset();
    public ISelector get_Kind();
    public sealed virtual void Accept(ISelectorVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.ClassSelector : object {
    private string _cls;
    public Priority Specificity { get; }
    public string Text { get; }
    public ClassSelector(string cls);
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.ComplexSelector : object {
    private List`1<CombinatorSelector> _combinators;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    public Priority Specificity { get; }
    public string Text { get; }
    public int Length { get; }
    public bool IsReady { get; private set; }
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public int get_Length();
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
private void set_IsReady(bool value);
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
    public void ConcludeSelector(ISelector selector);
    public void AppendSelector(ISelector selector, CssCombinator combinator);
    private bool MatchCascade(int pos, IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.CompoundSelector : Selectors {
    public sealed virtual bool Match(IElement element, IElement scope);
    public sealed virtual void Accept(ISelectorVisitor visitor);
    protected virtual string Stringify();
    protected virtual Priority ComputeSpecificity();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.FirstChildSelector : ChildSelector {
    protected bool IncludeParameterInSpecificity { get; }
    public FirstChildSelector(int step, int offset, ISelector kind);
    protected virtual bool get_IncludeParameterInSpecificity();
    public sealed virtual bool Match(IElement element, IElement scope);
    private bool DoMatch(T nodes, IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.FirstColumnSelector : ChildSelector {
    public FirstColumnSelector(int step, int offset, ISelector kind);
    public sealed virtual bool Match(IElement element, IElement scope);
    private bool DoMatch(T nodes, IElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.FirstTypeSelector : ChildSelector {
    public FirstTypeSelector(int step, int offset, ISelector kind);
    public sealed virtual bool Match(IElement element, IElement scope);
    private bool DoMatch(T nodes, IElement element);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.Dom.ICssMedium {
    public string Type { get; }
    public bool IsExclusive { get; }
    public bool IsInverse { get; }
    public string Constraints { get; }
    public IEnumerable`1<IMediaFeature> Features { get; }
    public abstract virtual string get_Type();
    public abstract virtual bool get_IsExclusive();
    public abstract virtual bool get_IsInverse();
    public abstract virtual string get_Constraints();
    public abstract virtual IEnumerable`1<IMediaFeature> get_Features();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.IdSelector : object {
    private string _id;
    public Priority Specificity { get; }
    public string Text { get; }
    public IdSelector(string id);
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.Dom.IMediaFeature {
    public string Name { get; }
    public bool IsMinimum { get; }
    public bool IsMaximum { get; }
    public string Value { get; }
    public bool HasValue { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsMinimum();
    public abstract virtual bool get_IsMaximum();
    public abstract virtual string get_Value();
    public abstract virtual bool get_HasValue();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("MediaList")]
public interface AngleSharp.Css.Dom.IMediaList {
    [DomNameAttribute("mediaText")]
public string MediaText { get; public set; }
    [DomNameAttribute("length")]
public int Length { get; }
    [DomAccessorAttribute("1")]
[DomNameAttribute("item")]
public string Item { get; }
    public abstract virtual string get_MediaText();
    public abstract virtual void set_MediaText(string value);
    public abstract virtual int get_Length();
    public abstract virtual string get_Item(int index);
    [DomNameAttribute("appendMedium")]
public abstract virtual void Add(string medium);
    [DomNameAttribute("removeMedium")]
public abstract virtual void Remove(string medium);
}
[NullableContextAttribute("2")]
public interface AngleSharp.Css.Dom.IMultiSelector {
    public abstract virtual ISelector GetMatchingSelector(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.Dom.INestedSelector {
    public ISelector ParentSelector { get; public set; }
    public abstract virtual ISelector get_ParentSelector();
    public abstract virtual void set_ParentSelector(ISelector value);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.Dom.ISelector {
    public string Text { get; }
    public Priority Specificity { get; }
    public abstract virtual bool Match(IElement element, IElement scope);
    public abstract virtual string get_Text();
    public abstract virtual Priority get_Specificity();
    public abstract virtual void Accept(ISelectorVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.LastChildSelector : ChildSelector {
    protected bool IncludeParameterInSpecificity { get; }
    public LastChildSelector(int step, int offset, ISelector kind);
    protected virtual bool get_IncludeParameterInSpecificity();
    public sealed virtual bool Match(IElement element, IElement scope);
    private bool DoMatch(T nodes, IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.LastColumnSelector : ChildSelector {
    public LastColumnSelector(int step, int offset, ISelector kind);
    public sealed virtual bool Match(IElement element, IElement scope);
    private bool DoMatch(T nodes, IElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.LastTypeSelector : ChildSelector {
    public LastTypeSelector(int step, int offset, ISelector kind);
    public sealed virtual bool Match(IElement element, IElement scope);
    private bool DoMatch(T nodes, IElement element);
}
internal class AngleSharp.Css.Dom.ListSelector : Selectors {
    [NullableContextAttribute("1")]
public sealed virtual void Accept(ISelectorVisitor visitor);
    [NullableContextAttribute("1")]
public sealed virtual bool Match(IElement element, IElement scope);
    [NullableContextAttribute("2")]
public sealed virtual ISelector GetMatchingSelector(IElement element, IElement scope);
    [NullableContextAttribute("1")]
protected virtual string Stringify();
    protected virtual Priority ComputeSpecificity();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.NamespaceSelector : object {
    private string _prefix;
    public Priority Specificity { get; }
    public string Text { get; }
    public NamespaceSelector(string prefix);
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual bool Match(IElement element, IElement scope);
    public sealed virtual void Accept(ISelectorVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.NestedSelector : object {
    public static ISelector Instance;
    public Priority Specificity { get; }
    public string Text { get; }
    private static NestedSelector();
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.PseudoClassSelector : object {
    private Predicate`1<IElement> _action;
    private string _pseudoClass;
    [CompilerGeneratedAttribute]
private Priority <Specificity>k__BackingField;
    public Priority Specificity { get; }
    public string Text { get; }
    public PseudoClassSelector(Predicate`1<IElement> action, string pseudoClass);
    public PseudoClassSelector(Predicate`1<IElement> action, string pseudoClass, Priority specificity);
    [CompilerGeneratedAttribute]
public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.PseudoElementSelector : object {
    private Predicate`1<IElement> _action;
    private string _pseudoElement;
    public Priority Specificity { get; }
    public string Text { get; }
    public PseudoElementSelector(Predicate`1<IElement> action, string pseudoElement);
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.ScopePseudoClassSelector : object {
    public static ISelector Instance;
    public Priority Specificity { get; }
    public string Text { get; }
    private static ScopePseudoClassSelector();
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Css.Dom.SelectorExtensions : object {
    [ExtensionAttribute]
public static IElement MatchAny(ISelector selector, IEnumerable`1<IElement> elements, IElement scope);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> MatchAll(ISelector selector, IEnumerable`1<IElement> elements, IElement scope);
    [ExtensionAttribute]
public static bool Match(ISelector selector, IElement element);
    [ExtensionAttribute]
private static void MatchAll(ISelector selector, IEnumerable`1<IElement> elements, IElement scope, List`1<IElement> result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class AngleSharp.Css.Dom.Selectors : object {
    protected List`1<ISelector> _selectors;
    public Priority Specificity { get; }
    public string Text { get; }
    public int Length { get; }
    public ISelector Item { get; public set; }
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public int get_Length();
    public ISelector get_Item(int index);
    public void set_Item(int index, ISelector value);
    protected abstract virtual Priority ComputeSpecificity();
    protected abstract virtual string Stringify();
    public void Add(ISelector selector);
    public void Remove(ISelector selector);
    public sealed virtual IEnumerator`1<ISelector> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Css.Dom.StyleExtensions : object {
    [IteratorStateMachineAttribute("AngleSharp.Css.Dom.StyleExtensions/<GetAllStyleSheetSets>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetAllStyleSheetSets(IStyleSheetList sheets);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetEnabledStyleSheetSets(IStyleSheetList sheets);
    [ExtensionAttribute]
public static void EnableStyleSheetSet(IStyleSheetList sheets, string name);
    [ExtensionAttribute]
public static IStyleSheetList CreateStyleSheets(INode parent);
    [ExtensionAttribute]
public static IStringList CreateStyleSheetSets(INode parent);
    [IteratorStateMachineAttribute("AngleSharp.Css.Dom.StyleExtensions/<GetStyleSheets>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<IStyleSheet> GetStyleSheets(INode parent);
    [ExtensionAttribute]
public static string LocateNamespace(IStyleSheetList sheets, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Dom.TypeSelector : object {
    private string _type;
    internal string TypeName { get; }
    public Priority Specificity { get; }
    public string Text { get; }
    public TypeSelector(string type);
    internal string get_TypeName();
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public sealed virtual void Accept(ISelectorVisitor visitor);
    public sealed virtual bool Match(IElement element, IElement scope);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.IAttributeSelectorFactory {
    public abstract virtual ISelector Create(string combinator, string name, string value, string prefix, bool insensitive);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.IPseudoClassSelectorFactory {
    public abstract virtual ISelector Create(string name);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.IPseudoElementSelectorFactory {
    public abstract virtual ISelector Create(string name);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.ISelectorVisitor {
    public abstract virtual void Attribute(string name, string op, string value);
    public abstract virtual void Type(string name);
    public abstract virtual void Id(string value);
    public abstract virtual void Child(string name, int step, int offset, ISelector selector);
    public abstract virtual void Class(string name);
    public abstract virtual void PseudoClass(string name);
    public abstract virtual void PseudoElement(string name);
    public abstract virtual void List(IEnumerable`1<ISelector> selectors);
    public abstract virtual void Combinator(IEnumerable`1<ISelector> selectors, IEnumerable`1<string> symbols);
    public abstract virtual void Many(IEnumerable`1<ISelector> selectors);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.IStylingService {
    public abstract virtual bool SupportsType(string mimeType);
    public abstract virtual Task`1<IStyleSheet> ParseStylesheetAsync(IResponse response, StyleOptions options, CancellationToken cancel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Css.Parser.CssCombinator : object {
    public static CssCombinator Child;
    public static CssCombinator Deep;
    public static CssCombinator Descendant;
    public static CssCombinator AdjacentSibling;
    public static CssCombinator Sibling;
    public static CssCombinator Namespace;
    public static CssCombinator Column;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IElement, IEnumerable`1<IElement>> <Transform>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IElement, IEnumerable`1<IElement>> Transform { get; protected set; }
    [NullableAttribute("2")]
public string Delimiter { get; protected set; }
    private static CssCombinator();
    [CompilerGeneratedAttribute]
public Func`2<IElement, IEnumerable`1<IElement>> get_Transform();
    [CompilerGeneratedAttribute]
protected void set_Transform(Func`2<IElement, IEnumerable`1<IElement>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Delimiter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_Delimiter(string value);
    public virtual ISelector Change(ISelector selector);
    [IteratorStateMachineAttribute("AngleSharp.Css.Parser.CssCombinator/<Single>d__16")]
protected static IEnumerable`1<IElement> Single(IElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Parser.CssSelectorConstructor : object {
    private static Dictionary`2<string, Func`2<CssSelectorConstructor, FunctionState>> pseudoClassFunctions;
    private CssTokenizer _tokenizer;
    private Stack`1<CssCombinator> _combinators;
    private IAttributeSelectorFactory _attributeSelector;
    private IPseudoElementSelectorFactory _pseudoElementSelector;
    private IPseudoClassSelectorFactory _pseudoClassSelector;
    private State _state;
    [NullableAttribute("2")]
private ISelector _temp;
    [NullableAttribute("2")]
private ListSelector _group;
    [NullableAttribute("2")]
private ComplexSelector _complex;
    [NullableAttribute("2")]
private string _attrName;
    [NullableAttribute("2")]
private string _attrValue;
    private bool _attrInsensitive;
    private string _attrOp;
    [NullableAttribute("2")]
private string _attrNs;
    private bool _valid;
    private bool _nested;
    private bool _ready;
    [NullableAttribute("2")]
private FunctionState _function;
    private bool _invoked;
    private bool _forgiving;
    public bool IsValid { get; }
    public bool IsNested { get; }
    public CssSelectorConstructor(CssTokenizer tokenizer, IAttributeSelectorFactory attributeSelector, IPseudoClassSelectorFactory pseudoClassSelector, IPseudoElementSelectorFactory pseudoElementSelector, bool invoked, bool forgiving);
    private static CssSelectorConstructor();
    public bool get_IsValid();
    public bool get_IsNested();
    [NullableContextAttribute("2")]
public ISelector Parse();
    [NullableContextAttribute("2")]
private ISelector GetResult();
    private void Apply(CssSelectorToken token);
    private void OnData(CssSelectorToken token);
    private void OnAttribute(CssSelectorToken token);
    private void OnAttributeOperator(CssSelectorToken token);
    private void OnAttributeValue(CssSelectorToken token);
    private void OnAttributeEnd(CssSelectorToken token);
    private void OnPseudoClass(CssSelectorToken token);
    private void OnPseudoElement(CssSelectorToken token);
    private void InsertOr();
    private void Insert(ISelector selector);
    private CssCombinator GetCombinator();
    private void Insert(CssCombinator cssCombinator);
    private void OnDelim(CssSelectorToken token);
    private void OnFunctionState(CssSelectorToken token);
    private CssSelectorConstructor CreateChild(bool forgiving);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Css.Parser.CssSelectorParser : object {
    private IAttributeSelectorFactory _attribute;
    private IPseudoClassSelectorFactory _pseudoClass;
    private IPseudoElementSelectorFactory _pseudoElement;
    [NullableContextAttribute("2")]
internal CssSelectorParser(IBrowsingContext context);
    public sealed virtual ISelector ParseSelector(string selectorText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class AngleSharp.Css.Parser.CssSelectorToken : ValueType {
    private CssTokenType _type;
    private string _data;
    public static CssSelectorToken Whitespace;
    public CssTokenType Type { get; }
    public string Data { get; }
    public CssSelectorToken(CssTokenType type, string data);
    private static CssSelectorToken();
    public CssTokenType get_Type();
    public string get_Data();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Css.Parser.CssStringSourceExtensions : object {
    [ExtensionAttribute]
public static char SkipCssComment(StringSource source);
    [ExtensionAttribute]
public static string ConsumeEscape(StringSource source);
    [ExtensionAttribute]
public static bool IsValidEscape(StringSource source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Css.Parser.CssTokenizer : object {
    private StringSource _source;
    public CssTokenizer(StringSource source);
    public CssSelectorToken Get();
    private CssSelectorToken Data(char current);
    private CssSelectorToken StringDQ();
    private CssSelectorToken StringSQ();
    private CssSelectorToken HashStart();
    private CssSelectorToken HashRest(StringBuilder buffer);
    private CssSelectorToken AtKeywordStart();
    private CssSelectorToken AtKeywordRest(char current);
    private CssSelectorToken IdentStart(char current);
    private CssSelectorToken IdentRest(char current, StringBuilder buffer);
    private CssSelectorToken NumberStart(char current);
    private CssSelectorToken NumberRest(StringBuilder buffer);
    private CssSelectorToken NumberFraction(StringBuilder buffer);
    private CssSelectorToken Dimension(StringBuilder buffer);
    private CssSelectorToken SciNotation(StringBuilder buffer);
    private CssSelectorToken UrlStart();
    private CssSelectorToken UrlDQ();
    private CssSelectorToken UrlSQ();
    private CssSelectorToken UrlUQ(char current);
    private CssSelectorToken UrlEnd();
    private CssSelectorToken UrlBad();
    private CssSelectorToken UnicodeRange(char current);
    private CssSelectorToken NewMatch(string match);
    private CssSelectorToken NewInvalid();
    private CssSelectorToken NewString(string value);
    private CssSelectorToken NewDimension(string value);
    private CssSelectorToken NewNumber(string number);
    private CssSelectorToken NewDelimiter(char c);
    private CssSelectorToken NumberExponential(char letter, StringBuilder buffer);
    private CssSelectorToken NumberDash(StringBuilder buffer);
}
internal enum AngleSharp.Css.Parser.CssTokenType : Enum {
    public byte value__;
    public static CssTokenType String;
    public static CssTokenType Hash;
    public static CssTokenType Class;
    public static CssTokenType Ident;
    public static CssTokenType Function;
    public static CssTokenType Number;
    public static CssTokenType Dimension;
    public static CssTokenType Column;
    public static CssTokenType Descendant;
    public static CssTokenType Deep;
    public static CssTokenType Delim;
    public static CssTokenType Match;
    public static CssTokenType RoundBracketClose;
    public static CssTokenType SquareBracketOpen;
    public static CssTokenType SquareBracketClose;
    public static CssTokenType Colon;
    public static CssTokenType Comma;
    public static CssTokenType Whitespace;
    public static CssTokenType Invalid;
    public static CssTokenType EndOfFile;
}
[NullableContextAttribute("1")]
public interface AngleSharp.Css.Parser.ICssSelectorParser {
    public abstract virtual ISelector ParseSelector(string selectorText);
}
[IsReadOnlyAttribute]
public class AngleSharp.Css.Priority : ValueType {
    private byte _tags;
    private byte _classes;
    private byte _ids;
    private byte _inlines;
    private UInt32 _priority;
    public static Priority Zero;
    public static Priority OneTag;
    public static Priority OneClass;
    public static Priority OneId;
    public static Priority Inline;
    public byte Tags { get; }
    public byte Classes { get; }
    public byte Ids { get; }
    public byte Inlines { get; }
    public Priority(UInt32 priority);
    public Priority(byte inlines, byte ids, byte classes, byte tags);
    private static Priority();
    public byte get_Tags();
    public byte get_Classes();
    public byte get_Ids();
    public byte get_Inlines();
    public static Priority op_Addition(Priority a, Priority b);
    public static bool op_Equality(Priority a, Priority b);
    public static bool op_GreaterThan(Priority a, Priority b);
    public static bool op_GreaterThanOrEqual(Priority a, Priority b);
    public static bool op_LessThan(Priority a, Priority b);
    public static bool op_LessThanOrEqual(Priority a, Priority b);
    public static bool op_Inequality(Priority a, Priority b);
    public sealed virtual bool Equals(Priority other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Priority other);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Css.PseudoClassNames : object {
    public static string Root;
    public static string Scope;
    public static string OnlyType;
    public static string FirstOfType;
    public static string LastOfType;
    public static string OnlyChild;
    public static string FirstChild;
    public static string LastChild;
    public static string Empty;
    public static string AnyLink;
    public static string Link;
    public static string Visited;
    public static string Active;
    public static string Hover;
    public static string Focus;
    public static string Target;
    public static string Enabled;
    public static string Disabled;
    public static string Checked;
    public static string Unchecked;
    public static string Indeterminate;
    public static string PlaceholderShown;
    public static string Default;
    public static string Valid;
    public static string Invalid;
    public static string Required;
    public static string InRange;
    public static string OutOfRange;
    public static string Optional;
    public static string ReadOnly;
    public static string ReadWrite;
    public static string Shadow;
    public static string Dir;
    public static string Has;
    public static string Is;
    public static string Matches;
    public static string NthChild;
    public static string NthLastChild;
    public static string NthOfType;
    public static string NthLastOfType;
    public static string NthColumn;
    public static string NthLastColumn;
    public static string Not;
    public static string Lang;
    public static string Contains;
    public static string Where;
    public static string HostContext;
    public static string FocusVisible;
    public static string FocusWithin;
    public static string Separator;
    private static PseudoClassNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Css.PseudoElementNames : object {
    public static string Before;
    public static string After;
    public static string Slotted;
    public static string Selection;
    public static string FirstLine;
    public static string FirstLetter;
    public static string FootnoteCall;
    public static string FootnoteMarker;
    public static string Content;
    public static string Separator;
    private static PseudoElementNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Css.StyleOptions : object {
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlternate>k__BackingField;
    public IDocument Document { get; }
    [NullableAttribute("2")]
public IElement Element { get; public set; }
    public bool IsDisabled { get; public set; }
    public bool IsAlternate { get; public set; }
    public StyleOptions(IDocument document);
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IElement get_Element();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Element(IElement value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAlternate();
    [CompilerGeneratedAttribute]
public void set_IsAlternate(bool value);
}
public enum AngleSharp.Dom.AdjacentPosition : Enum {
    public byte value__;
    [DomNameAttribute("beforebegin")]
public static AdjacentPosition BeforeBegin;
    [DomNameAttribute("afterbegin")]
public static AdjacentPosition AfterBegin;
    [DomNameAttribute("beforeend")]
public static AdjacentPosition BeforeEnd;
    [DomNameAttribute("afterend")]
public static AdjacentPosition AfterEnd;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.AnyElement : Element {
    public AnyElement(Document owner, string localName, string prefix, string namespaceUri, NodeFlags flags);
    public virtual IElement ParseSubtree(string html);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.Attr : object {
    private string _localName;
    [NullableAttribute("2")]
private string _prefix;
    [NullableAttribute("2")]
private string _namespace;
    private string _value;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamedNodeMap <Container>k__BackingField;
    [NullableAttribute("2")]
internal NamedNodeMap Container { get; internal set; }
    public bool IsSpecified { get; }
    [NullableAttribute("2")]
public IElement OwnerElement { get; }
    [NullableAttribute("2")]
public string Prefix { get; }
    public bool IsId { get; }
    public bool Specified { get; }
    public string Name { get; }
    private StringOrMemory AngleSharp.Html.Construction.IConstructableAttr.Value { get; private set; }
    private StringOrMemory AngleSharp.Html.Construction.IConstructableAttr.Name { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    [NullableAttribute("2")]
public string NamespaceUri { get; }
    private string AngleSharp.Dom.INode.BaseUri { get; }
    [NullableAttribute("2")]
private Url AngleSharp.Dom.INode.BaseUrl { get; }
    private string AngleSharp.Dom.INode.NodeName { get; }
    private INodeList AngleSharp.Dom.INode.ChildNodes { get; }
    [NullableAttribute("2")]
private IDocument AngleSharp.Dom.INode.Owner { get; }
    [NullableAttribute("2")]
private IElement AngleSharp.Dom.INode.ParentElement { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.Parent { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.FirstChild { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.LastChild { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.NextSibling { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.PreviousSibling { get; }
    private NodeType AngleSharp.Dom.INode.NodeType { get; }
    private string AngleSharp.Dom.INode.NodeValue { get; private set; }
    private string AngleSharp.Dom.INode.TextContent { get; private set; }
    private bool AngleSharp.Dom.INode.HasChildNodes { get; }
    private NodeFlags AngleSharp.Dom.INode.Flags { get; }
    public Attr(string localName);
    public Attr(string localName, string value);
    public Attr(string prefix, string localName, string value, string namespaceUri);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NamedNodeMap get_Container();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Container(NamedNodeMap value);
    public sealed virtual bool get_IsSpecified();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_OwnerElement();
    [NullableContextAttribute("2")]
public sealed virtual string get_Prefix();
    public bool get_IsId();
    public bool get_Specified();
    public sealed virtual string get_Name();
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableAttr.get_Value();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableAttr.set_Value(StringOrMemory value);
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableAttr.get_Name();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_LocalName();
    [NullableContextAttribute("2")]
public sealed virtual string get_NamespaceUri();
    private sealed virtual override string AngleSharp.Dom.INode.get_BaseUri();
    [NullableContextAttribute("2")]
private sealed virtual override Url AngleSharp.Dom.INode.get_BaseUrl();
    private sealed virtual override string AngleSharp.Dom.INode.get_NodeName();
    private sealed virtual override INodeList AngleSharp.Dom.INode.get_ChildNodes();
    [NullableContextAttribute("2")]
private sealed virtual override IDocument AngleSharp.Dom.INode.get_Owner();
    [NullableContextAttribute("2")]
private sealed virtual override IElement AngleSharp.Dom.INode.get_ParentElement();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_Parent();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_FirstChild();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_LastChild();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_NextSibling();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_PreviousSibling();
    private sealed virtual override NodeType AngleSharp.Dom.INode.get_NodeType();
    private sealed virtual override string AngleSharp.Dom.INode.get_NodeValue();
    private sealed virtual override void AngleSharp.Dom.INode.set_NodeValue(string value);
    private sealed virtual override string AngleSharp.Dom.INode.get_TextContent();
    private sealed virtual override void AngleSharp.Dom.INode.set_TextContent(string value);
    private sealed virtual override bool AngleSharp.Dom.INode.get_HasChildNodes();
    private sealed virtual override NodeFlags AngleSharp.Dom.INode.get_Flags();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IAttr other);
    public virtual int GetHashCode();
    private sealed virtual override INode AngleSharp.Dom.INode.Clone(bool deep);
    private sealed virtual override bool AngleSharp.Dom.INode.Equals(INode otherNode);
    private sealed virtual override DocumentPositions AngleSharp.Dom.INode.CompareDocumentPosition(INode otherNode);
    private sealed virtual override void AngleSharp.Dom.INode.Normalize();
    private sealed virtual override bool AngleSharp.Dom.INode.Contains(INode otherNode);
    private sealed virtual override bool AngleSharp.Dom.INode.IsDefaultNamespace(string namespaceUri);
    private sealed virtual override string AngleSharp.Dom.INode.LookupNamespaceUri(string prefix);
    [NullableContextAttribute("2")]
private sealed virtual override string AngleSharp.Dom.INode.LookupPrefix(string namespaceUri);
    private sealed virtual override INode AngleSharp.Dom.INode.AppendChild(INode child);
    private sealed virtual override INode AngleSharp.Dom.INode.InsertBefore(INode newElement, INode referenceElement);
    private sealed virtual override INode AngleSharp.Dom.INode.RemoveChild(INode child);
    private sealed virtual override INode AngleSharp.Dom.INode.ReplaceChild(INode newChild, INode oldChild);
    private sealed virtual override void AngleSharp.Dom.IEventTarget.AddEventListener(string type, DomEventHandler callback, bool capture);
    private sealed virtual override void AngleSharp.Dom.IEventTarget.RemoveEventListener(string type, DomEventHandler callback, bool capture);
    private sealed virtual override void AngleSharp.Dom.IEventTarget.InvokeEventListener(Event ev);
    private sealed virtual override bool AngleSharp.Dom.IEventTarget.Dispatch(Event ev);
    private sealed virtual override void AngleSharp.IMarkupFormattable.ToHtml(TextWriter writer, IMarkupFormatter formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.AttrExtensions : object {
    [ExtensionAttribute]
public static bool SameAs(INamedNodeMap sourceAttributes, INamedNodeMap targetAttributes);
    [ExtensionAttribute]
public static INamedNodeMap Clear(INamedNodeMap attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Dom.AttributeNames : object {
    public static string Name;
    public static string HttpEquiv;
    public static string Scheme;
    public static string Content;
    public static string Class;
    public static string Style;
    public static string Label;
    public static string Action;
    public static string Prompt;
    public static string Href;
    public static string HrefLang;
    public static string Lang;
    public static string Disabled;
    public static string Selected;
    public static string Value;
    public static string Title;
    public static string Type;
    public static string Rel;
    public static string Rev;
    public static string AccessKey;
    public static string Download;
    public static string Media;
    public static string Target;
    public static string Charset;
    public static string Alt;
    public static string Coords;
    public static string Shape;
    public static string FormAction;
    public static string FormMethod;
    public static string FormTarget;
    public static string FormEncType;
    public static string FormNoValidate;
    public static string DirName;
    public static string Dir;
    public static string Nonce;
    public static string NoResize;
    public static string Src;
    public static string SrcSet;
    public static string SrcLang;
    public static string SrcDoc;
    public static string Scrolling;
    public static string LongDesc;
    public static string FrameBorder;
    public static string Width;
    public static string Height;
    public static string MarginWidth;
    public static string MarginHeight;
    public static string Cols;
    public static string Rows;
    public static string Align;
    public static string Encoding;
    public static string Standalone;
    public static string Version;
    public static string DropZone;
    public static string Draggable;
    public static string Spellcheck;
    public static string TabIndex;
    public static string ContentEditable;
    public static string Translate;
    public static string ContextMenu;
    public static string Hidden;
    public static string Id;
    public static string Sizes;
    public static string Scoped;
    public static string Reversed;
    public static string Start;
    public static string Ping;
    public static string IsMap;
    public static string UseMap;
    public static string CrossOrigin;
    public static string Sandbox;
    public static string AllowFullscreen;
    public static string AllowPaymentRequest;
    public static string Data;
    public static string TypeMustMatch;
    public static string AutoFocus;
    public static string AcceptCharset;
    public static string Enctype;
    public static string AutoComplete;
    public static string Method;
    public static string NoValidate;
    public static string For;
    public static string Seamless;
    public static string Valign;
    public static string Span;
    public static string BgColor;
    public static string ColSpan;
    public static string ReferrerPolicy;
    public static string RowSpan;
    public static string NoWrap;
    public static string Abbr;
    public static string Scope;
    public static string Headers;
    public static string Axis;
    public static string Border;
    public static string CellPadding;
    public static string Rules;
    public static string Summary;
    public static string CellSpacing;
    public static string Frame;
    public static string Form;
    public static string Required;
    public static string Multiple;
    public static string Min;
    public static string Max;
    public static string Open;
    public static string Challenge;
    public static string Keytype;
    public static string Size;
    public static string Wrap;
    public static string MaxLength;
    public static string MinLength;
    public static string Placeholder;
    public static string Readonly;
    public static string Accept;
    public static string Pattern;
    public static string Step;
    public static string List;
    public static string Checked;
    public static string Kind;
    public static string Default;
    public static string Autoplay;
    public static string Preload;
    public static string Loop;
    public static string Controls;
    public static string Muted;
    public static string MediaGroup;
    public static string Poster;
    public static string Color;
    public static string Face;
    public static string Command;
    public static string Icon;
    public static string Radiogroup;
    public static string Cite;
    public static string Async;
    public static string Defer;
    public static string Language;
    public static string Event;
    public static string Alink;
    public static string Background;
    public static string Link;
    public static string Text;
    public static string Vlink;
    public static string Show;
    public static string Role;
    public static string Actuate;
    public static string Arcrole;
    public static string Space;
    public static string Window;
    public static string Manifest;
    public static string Datetime;
    public static string Low;
    public static string High;
    public static string Optimum;
    public static string Slot;
    public static string Body;
    public static string Integrity;
    public static string Clear;
    public static string Codetype;
    public static string Compact;
    public static string Declare;
    public static string Direction;
    public static string NoHref;
    public static string NoShade;
    public static string ValueType;
    private static AttributeNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class AngleSharp.Dom.CharacterData : Node {
    private string _content;
    [NullableAttribute("2")]
public IElement PreviousElementSibling { get; }
    [NullableAttribute("2")]
public IElement NextElementSibling { get; }
    internal char Item { get; internal set; }
    public int Length { get; }
    public string NodeValue { get; public set; }
    public string TextContent { get; public set; }
    public string Data { get; public set; }
    internal CharacterData(Document owner, string name, NodeType type);
    internal CharacterData(Document owner, string name, NodeType type, string content);
    [NullableContextAttribute("2")]
public sealed virtual IElement get_PreviousElementSibling();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_NextElementSibling();
    internal char get_Item(int index);
    internal void set_Item(int index, char value);
    public sealed virtual int get_Length();
    public sealed virtual string get_NodeValue();
    public sealed virtual void set_NodeValue(string value);
    public sealed virtual string get_TextContent();
    public sealed virtual void set_TextContent(string value);
    public sealed virtual string get_Data();
    public sealed virtual void set_Data(string value);
    public sealed virtual string Substring(int offset, int count);
    public sealed virtual void Append(string value);
    public sealed virtual void Insert(int offset, string data);
    public sealed virtual void Delete(int offset, int count);
    public sealed virtual void Replace(int offset, int count, string data);
    public sealed virtual void Before(INode[] nodes);
    public sealed virtual void After(INode[] nodes);
    public sealed virtual void Replace(INode[] nodes);
    public sealed virtual void Remove();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.CollectionExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> GetNodes(INode parent, bool deep, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IElement GetElementById(INodeList children, string id);
    [ExtensionAttribute]
public static void GetElementsByName(INodeList children, string name, List`1<IElement> result);
    [ExtensionAttribute]
public static bool Accepts(FilterSettings filter, INode node);
    [ExtensionAttribute]
public static T GetElementById(IEnumerable`1<T> elements, string id);
    [ExtensionAttribute]
private static IEnumerable`1<T> GetAllNodes(INode parent, Func`2<T, bool> predicate);
    [IteratorStateMachineAttribute("AngleSharp.Dom.CollectionExtensions/<GetDescendendElements>d__6`1")]
[ExtensionAttribute]
private static IEnumerable`1<T> GetDescendendElements(INode parent, Func`2<T, bool> predicate);
}
internal class AngleSharp.Dom.Comment : CharacterData {
    [NullableContextAttribute("1")]
internal Comment(Document owner);
    [NullableContextAttribute("1")]
internal Comment(Document owner, string data);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.ConcreteNodeListAccessor : ValueType {
    private List`1<Node> _nodeList;
    public int Length { get; }
    public INode Item { get; }
    public ConcreteNodeListAccessor(NodeList nodeList);
    public sealed virtual int get_Length();
    public sealed virtual INode get_Item(int index);
}
internal enum AngleSharp.Dom.ContentEditableMode : Enum {
    public byte value__;
    public static ContentEditableMode False;
    public static ContentEditableMode True;
    public static ContentEditableMode Inherited;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.CreateDocumentOptions : object {
    private IResponse _response;
    private MimeType _contentType;
    private TextSource _source;
    [NullableAttribute("2")]
private IDocument _ancestor;
    public IResponse Response { get; }
    public MimeType ContentType { get; }
    public TextSource Source { get; }
    [NullableAttribute("2")]
public IDocument ImportAncestor { get; }
    [NullableContextAttribute("2")]
public CreateDocumentOptions(IResponse response, Encoding encoding, IDocument ancestor);
    public IResponse get_Response();
    public MimeType get_ContentType();
    public TextSource get_Source();
    [NullableContextAttribute("2")]
public IDocument get_ImportAncestor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.DefaultAttributeObserver : object {
    private List`1<Action`3<IElement, string, string>> _actions;
    protected virtual void RegisterStandardObservers();
    public void RegisterObserver(string expectedName, Action`2<TElement, string> callback);
    private sealed virtual override void AngleSharp.Dom.IAttributeObserver.NotifyChange(IElement host, string name, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.DefaultDocumentFactory : object {
    private Dictionary`2<string, Creator> _creators;
    public virtual void Register(string contentType, Creator creator);
    public virtual Creator Unregister(string contentType);
    protected virtual Task`1<IDocument> CreateDefaultAsync(IBrowsingContext context, CreateDocumentOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IDocument> CreateAsync(IBrowsingContext context, CreateDocumentOptions options, CancellationToken cancellationToken);
    protected static Task`1<IDocument> LoadHtmlAsync(IBrowsingContext context, CreateDocumentOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AngleSharp.Dom.DefaultDocumentFactory/<LoadTextAsync>d__7")]
protected static Task`1<IDocument> LoadTextAsync(IBrowsingContext context, CreateDocumentOptions options, CancellationToken cancellationToken);
}
public enum AngleSharp.Dom.DirectionMode : Enum {
    public byte value__;
    public static DirectionMode Ltr;
    public static DirectionMode Rtl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Dom.Document : Node {
    private List`1<WeakReference> _attachedReferences;
    private Queue`1<HtmlScriptElement> _loadingScripts;
    private MutationHost _mutations;
    private IBrowsingContext _context;
    [NullableAttribute("2")]
private IEventLoop _loop;
    private Window _view;
    [NullableAttribute("2")]
private IResourceLoader _loader;
    private Location _location;
    private TextSource _source;
    private object _importedUrisLock;
    private QuirksMode _quirksMode;
    private Sandboxes _sandbox;
    private bool _async;
    private bool _designMode;
    private bool _shown;
    private bool _salvageable;
    private bool _firedUnload;
    private DocumentReadyState _ready;
    [NullableAttribute("2")]
private IElement _focus;
    [NullableAttribute("2")]
private HtmlAllCollection _all;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlAnchorElement> _anchors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IElement> _children;
    [NullableAttribute("2")]
private DomImplementation _implementation;
    [NullableAttribute("2")]
private IStringList _styleSheetSets;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlImageElement> _images;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlScriptElement> _scripts;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlEmbedElement> _plugins;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IElement> _commands;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IElement> _links;
    [NullableAttribute("2")]
private IStyleSheetList _styleSheets;
    private HttpStatusCode _statusCode;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Uri> _importedUris;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDocument <ImportAncestor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Referrer>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LastStyleSheetSet>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDisposable <AngleSharp.Html.Construction.IConstructableDocument.Builder>k__BackingField;
    public TextSource Source { get; }
    public IEntityProvider Entities { get; }
    [NullableAttribute("2")]
public IDocument ImportAncestor { get; private set; }
    [NullableAttribute("2")]
public IEventLoop Loop { get; }
    public string DesignMode { get; public set; }
    public IHtmlAllCollection All { get; }
    public IHtmlCollection`1<IHtmlAnchorElement> Anchors { get; }
    public int ChildElementCount { get; }
    public IHtmlCollection`1<IElement> Children { get; }
    [NullableAttribute("2")]
public IElement FirstElementChild { get; }
    [NullableAttribute("2")]
public IElement LastElementChild { get; }
    public bool IsAsync { get; }
    [NullableAttribute("2")]
public IHtmlScriptElement CurrentScript { get; }
    public IImplementation Implementation { get; }
    [NullableAttribute("2")]
public string LastModified { get; protected set; }
    public IDocumentType Doctype { get; }
    public string ContentType { get; protected set; }
    public DocumentReadyState ReadyState { get; protected set; }
    public IStyleSheetList StyleSheets { get; }
    public IStringList StyleSheetSets { get; }
    public string Referrer { get; protected set; }
    public ILocation Location { get; }
    public string DocumentUri { get; protected set; }
    public Url DocumentUrl { get; }
    public IWindow DefaultView { get; }
    [NullableAttribute("2")]
public string Direction { get; public set; }
    public string CharacterSet { get; }
    public IElement DocumentElement { get; }
    [NullableAttribute("2")]
public IElement ActiveElement { get; }
    public string CompatMode { get; }
    public string Url { get; }
    public IHtmlCollection`1<IHtmlFormElement> Forms { get; }
    public IHtmlCollection`1<IHtmlImageElement> Images { get; }
    public IHtmlCollection`1<IHtmlScriptElement> Scripts { get; }
    public IHtmlCollection`1<IHtmlEmbedElement> Plugins { get; }
    public IHtmlCollection`1<IElement> Commands { get; }
    public IHtmlCollection`1<IElement> Links { get; }
    [NullableAttribute("2")]
public string Title { get; public set; }
    [NullableAttribute("2")]
public IHtmlHeadElement Head { get; }
    [NullableAttribute("2")]
public IHtmlElement Body { get; public set; }
    public IBrowsingContext Context { get; }
    public HttpStatusCode StatusCode { get; private set; }
    public string Cookie { get; public set; }
    public string Domain { get; public set; }
    [NullableAttribute("2")]
public string Origin { get; }
    [NullableAttribute("2")]
public string SelectedStyleSheetSet { get; public set; }
    [NullableAttribute("2")]
public string LastStyleSheetSet { get; private set; }
    [NullableAttribute("2")]
public string PreferredStyleSheetSet { get; }
    public bool IsReady { get; }
    public bool IsLoading { get; }
    internal MutationHost Mutations { get; }
    internal QuirksMode QuirksMode { get; internal set; }
    internal Sandboxes ActiveSandboxing { get; internal set; }
    internal bool IsInBrowsingContext { get; }
    internal bool IsToBePrinted { get; }
    [NullableAttribute("2")]
internal IElement FocusElement { get; }
    private TextSource AngleSharp.Html.Construction.IConstructableDocument.Source { get; }
    [NullableAttribute("2")]
private IDisposable AngleSharp.Html.Construction.IConstructableDocument.Builder { get; private set; }
    private QuirksMode AngleSharp.Html.Construction.IConstructableDocument.QuirksMode { get; private set; }
    [NullableAttribute("2")]
private IConstructableElement AngleSharp.Html.Construction.IConstructableDocument.Head { get; }
    private IConstructableElement AngleSharp.Html.Construction.IConstructableDocument.DocumentElement { get; }
    private bool AngleSharp.Html.Construction.IConstructableDocument.IsLoading { get; }
    public Document(IBrowsingContext context, TextSource source);
    public sealed virtual void add_ReadyStateChanged(DomEventHandler value);
    public sealed virtual void remove_ReadyStateChanged(DomEventHandler value);
    public sealed virtual void add_Aborted(DomEventHandler value);
    public sealed virtual void remove_Aborted(DomEventHandler value);
    public sealed virtual void add_Blurred(DomEventHandler value);
    public sealed virtual void remove_Blurred(DomEventHandler value);
    public sealed virtual void add_Cancelled(DomEventHandler value);
    public sealed virtual void remove_Cancelled(DomEventHandler value);
    public sealed virtual void add_CanPlay(DomEventHandler value);
    public sealed virtual void remove_CanPlay(DomEventHandler value);
    public sealed virtual void add_CanPlayThrough(DomEventHandler value);
    public sealed virtual void remove_CanPlayThrough(DomEventHandler value);
    public sealed virtual void add_Changed(DomEventHandler value);
    public sealed virtual void remove_Changed(DomEventHandler value);
    public sealed virtual void add_Clicked(DomEventHandler value);
    public sealed virtual void remove_Clicked(DomEventHandler value);
    public sealed virtual void add_CueChanged(DomEventHandler value);
    public sealed virtual void remove_CueChanged(DomEventHandler value);
    public sealed virtual void add_DoubleClick(DomEventHandler value);
    public sealed virtual void remove_DoubleClick(DomEventHandler value);
    public sealed virtual void add_Drag(DomEventHandler value);
    public sealed virtual void remove_Drag(DomEventHandler value);
    public sealed virtual void add_DragEnd(DomEventHandler value);
    public sealed virtual void remove_DragEnd(DomEventHandler value);
    public sealed virtual void add_DragEnter(DomEventHandler value);
    public sealed virtual void remove_DragEnter(DomEventHandler value);
    public sealed virtual void add_DragExit(DomEventHandler value);
    public sealed virtual void remove_DragExit(DomEventHandler value);
    public sealed virtual void add_DragLeave(DomEventHandler value);
    public sealed virtual void remove_DragLeave(DomEventHandler value);
    public sealed virtual void add_DragOver(DomEventHandler value);
    public sealed virtual void remove_DragOver(DomEventHandler value);
    public sealed virtual void add_DragStart(DomEventHandler value);
    public sealed virtual void remove_DragStart(DomEventHandler value);
    public sealed virtual void add_Dropped(DomEventHandler value);
    public sealed virtual void remove_Dropped(DomEventHandler value);
    public sealed virtual void add_DurationChanged(DomEventHandler value);
    public sealed virtual void remove_DurationChanged(DomEventHandler value);
    public sealed virtual void add_Emptied(DomEventHandler value);
    public sealed virtual void remove_Emptied(DomEventHandler value);
    public sealed virtual void add_Ended(DomEventHandler value);
    public sealed virtual void remove_Ended(DomEventHandler value);
    public sealed virtual void add_Error(DomEventHandler value);
    public sealed virtual void remove_Error(DomEventHandler value);
    public sealed virtual void add_Focused(DomEventHandler value);
    public sealed virtual void remove_Focused(DomEventHandler value);
    public sealed virtual void add_Input(DomEventHandler value);
    public sealed virtual void remove_Input(DomEventHandler value);
    public sealed virtual void add_Invalid(DomEventHandler value);
    public sealed virtual void remove_Invalid(DomEventHandler value);
    public sealed virtual void add_KeyDown(DomEventHandler value);
    public sealed virtual void remove_KeyDown(DomEventHandler value);
    public sealed virtual void add_KeyPress(DomEventHandler value);
    public sealed virtual void remove_KeyPress(DomEventHandler value);
    public sealed virtual void add_KeyUp(DomEventHandler value);
    public sealed virtual void remove_KeyUp(DomEventHandler value);
    public sealed virtual void add_Loaded(DomEventHandler value);
    public sealed virtual void remove_Loaded(DomEventHandler value);
    public sealed virtual void add_LoadedData(DomEventHandler value);
    public sealed virtual void remove_LoadedData(DomEventHandler value);
    public sealed virtual void add_LoadedMetadata(DomEventHandler value);
    public sealed virtual void remove_LoadedMetadata(DomEventHandler value);
    public sealed virtual void add_Loading(DomEventHandler value);
    public sealed virtual void remove_Loading(DomEventHandler value);
    public sealed virtual void add_MouseDown(DomEventHandler value);
    public sealed virtual void remove_MouseDown(DomEventHandler value);
    public sealed virtual void add_MouseEnter(DomEventHandler value);
    public sealed virtual void remove_MouseEnter(DomEventHandler value);
    public sealed virtual void add_MouseLeave(DomEventHandler value);
    public sealed virtual void remove_MouseLeave(DomEventHandler value);
    public sealed virtual void add_MouseMove(DomEventHandler value);
    public sealed virtual void remove_MouseMove(DomEventHandler value);
    public sealed virtual void add_MouseOut(DomEventHandler value);
    public sealed virtual void remove_MouseOut(DomEventHandler value);
    public sealed virtual void add_MouseOver(DomEventHandler value);
    public sealed virtual void remove_MouseOver(DomEventHandler value);
    public sealed virtual void add_MouseUp(DomEventHandler value);
    public sealed virtual void remove_MouseUp(DomEventHandler value);
    public sealed virtual void add_MouseWheel(DomEventHandler value);
    public sealed virtual void remove_MouseWheel(DomEventHandler value);
    public sealed virtual void add_Paused(DomEventHandler value);
    public sealed virtual void remove_Paused(DomEventHandler value);
    public sealed virtual void add_Played(DomEventHandler value);
    public sealed virtual void remove_Played(DomEventHandler value);
    public sealed virtual void add_Playing(DomEventHandler value);
    public sealed virtual void remove_Playing(DomEventHandler value);
    public sealed virtual void add_Progress(DomEventHandler value);
    public sealed virtual void remove_Progress(DomEventHandler value);
    public sealed virtual void add_RateChanged(DomEventHandler value);
    public sealed virtual void remove_RateChanged(DomEventHandler value);
    public sealed virtual void add_Resetted(DomEventHandler value);
    public sealed virtual void remove_Resetted(DomEventHandler value);
    public sealed virtual void add_Resized(DomEventHandler value);
    public sealed virtual void remove_Resized(DomEventHandler value);
    public sealed virtual void add_Scrolled(DomEventHandler value);
    public sealed virtual void remove_Scrolled(DomEventHandler value);
    public sealed virtual void add_Seeked(DomEventHandler value);
    public sealed virtual void remove_Seeked(DomEventHandler value);
    public sealed virtual void add_Seeking(DomEventHandler value);
    public sealed virtual void remove_Seeking(DomEventHandler value);
    public sealed virtual void add_Selected(DomEventHandler value);
    public sealed virtual void remove_Selected(DomEventHandler value);
    public sealed virtual void add_Shown(DomEventHandler value);
    public sealed virtual void remove_Shown(DomEventHandler value);
    public sealed virtual void add_Stalled(DomEventHandler value);
    public sealed virtual void remove_Stalled(DomEventHandler value);
    public sealed virtual void add_Submitted(DomEventHandler value);
    public sealed virtual void remove_Submitted(DomEventHandler value);
    public sealed virtual void add_Suspended(DomEventHandler value);
    public sealed virtual void remove_Suspended(DomEventHandler value);
    public sealed virtual void add_TimeUpdated(DomEventHandler value);
    public sealed virtual void remove_TimeUpdated(DomEventHandler value);
    public sealed virtual void add_Toggled(DomEventHandler value);
    public sealed virtual void remove_Toggled(DomEventHandler value);
    public sealed virtual void add_VolumeChanged(DomEventHandler value);
    public sealed virtual void remove_VolumeChanged(DomEventHandler value);
    public sealed virtual void add_Waiting(DomEventHandler value);
    public sealed virtual void remove_Waiting(DomEventHandler value);
    public sealed virtual TextSource get_Source();
    public abstract virtual IEntityProvider get_Entities();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IDocument get_ImportAncestor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ImportAncestor(IDocument value);
    [NullableContextAttribute("2")]
public IEventLoop get_Loop();
    public sealed virtual string get_DesignMode();
    public sealed virtual void set_DesignMode(string value);
    public sealed virtual IHtmlAllCollection get_All();
    public sealed virtual IHtmlCollection`1<IHtmlAnchorElement> get_Anchors();
    public sealed virtual int get_ChildElementCount();
    public sealed virtual IHtmlCollection`1<IElement> get_Children();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_FirstElementChild();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_LastElementChild();
    public bool get_IsAsync();
    [NullableContextAttribute("2")]
public sealed virtual IHtmlScriptElement get_CurrentScript();
    public sealed virtual IImplementation get_Implementation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_LastModified();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_LastModified(string value);
    public sealed virtual IDocumentType get_Doctype();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
protected void set_ContentType(string value);
    public sealed virtual DocumentReadyState get_ReadyState();
    protected void set_ReadyState(DocumentReadyState value);
    public sealed virtual IStyleSheetList get_StyleSheets();
    public sealed virtual IStringList get_StyleSheetSets();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Referrer();
    [CompilerGeneratedAttribute]
protected void set_Referrer(string value);
    public sealed virtual ILocation get_Location();
    public sealed virtual string get_DocumentUri();
    protected void set_DocumentUri(string value);
    public Url get_DocumentUrl();
    public sealed virtual IWindow get_DefaultView();
    [NullableContextAttribute("2")]
public sealed virtual string get_Direction();
    [NullableContextAttribute("2")]
public sealed virtual void set_Direction(string value);
    public sealed virtual string get_CharacterSet();
    public abstract virtual IElement get_DocumentElement();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_ActiveElement();
    public sealed virtual string get_CompatMode();
    public sealed virtual string get_Url();
    public sealed virtual IHtmlCollection`1<IHtmlFormElement> get_Forms();
    public sealed virtual IHtmlCollection`1<IHtmlImageElement> get_Images();
    public sealed virtual IHtmlCollection`1<IHtmlScriptElement> get_Scripts();
    public sealed virtual IHtmlCollection`1<IHtmlEmbedElement> get_Plugins();
    public sealed virtual IHtmlCollection`1<IElement> get_Commands();
    public sealed virtual IHtmlCollection`1<IElement> get_Links();
    [NullableContextAttribute("2")]
public sealed virtual string get_Title();
    [NullableContextAttribute("2")]
public sealed virtual void set_Title(string value);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlHeadElement get_Head();
    [NullableContextAttribute("2")]
public sealed virtual IHtmlElement get_Body();
    [NullableContextAttribute("2")]
public sealed virtual void set_Body(IHtmlElement value);
    public sealed virtual IBrowsingContext get_Context();
    public sealed virtual HttpStatusCode get_StatusCode();
    private void set_StatusCode(HttpStatusCode value);
    public sealed virtual string get_Cookie();
    public sealed virtual void set_Cookie(string value);
    public sealed virtual string get_Domain();
    public sealed virtual void set_Domain(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
public sealed virtual string get_SelectedStyleSheetSet();
    [NullableContextAttribute("2")]
public sealed virtual void set_SelectedStyleSheetSet(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_LastStyleSheetSet();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_LastStyleSheetSet(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_PreferredStyleSheetSet();
    public bool get_IsReady();
    public bool get_IsLoading();
    internal MutationHost get_Mutations();
    internal QuirksMode get_QuirksMode();
    internal void set_QuirksMode(QuirksMode value);
    internal Sandboxes get_ActiveSandboxing();
    internal void set_ActiveSandboxing(Sandboxes value);
    internal void AddScript(HtmlScriptElement script);
    internal bool get_IsInBrowsingContext();
    internal bool get_IsToBePrinted();
    [NullableContextAttribute("2")]
internal IElement get_FocusElement();
    public sealed virtual void Clear();
    public virtual void Dispose();
    public sealed virtual void EnableStyleSheetsForSet(string name);
    public sealed virtual IDocument Open(string type, string replace);
    public sealed virtual void Load(string url);
    private sealed virtual override void AngleSharp.Dom.IDocument.Close();
    public sealed virtual void Write(string content);
    public sealed virtual void WriteLine(string content);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByName(string name);
    public sealed virtual INode Import(INode externalNode, bool deep);
    public sealed virtual INode Adopt(INode externalNode);
    public sealed virtual Event CreateEvent(string type);
    public sealed virtual INodeIterator CreateNodeIterator(INode root, FilterSettings settings, NodeFilter filter);
    public sealed virtual ITreeWalker CreateTreeWalker(INode root, FilterSettings settings, NodeFilter filter);
    public sealed virtual IRange CreateRange();
    public sealed virtual void Prepend(INode[] nodes);
    public sealed virtual void Append(INode[] nodes);
    public sealed virtual IElement CreateElement(string localName);
    public sealed virtual IElement CreateElement(string namespaceUri, string qualifiedName);
    public sealed virtual IComment CreateComment(string data);
    public sealed virtual IDocumentFragment CreateDocumentFragment();
    public sealed virtual IProcessingInstruction CreateProcessingInstruction(string target, string data);
    public sealed virtual IText CreateTextNode(string data);
    public sealed virtual IElement GetElementById(string elementId);
    public sealed virtual IElement QuerySelector(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> QuerySelectorAll(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByTagName(string namespaceURI, string tagName);
    public sealed virtual bool HasFocus();
    public sealed virtual IAttr CreateAttribute(string localName);
    public sealed virtual IAttr CreateAttribute(string namespaceUri, string qualifiedName);
    public void Setup(IResponse response, MimeType contentType, IDocument importAncestor);
    public abstract virtual Element CreateElementFrom(string name, string prefix, NodeFlags flags);
    [NullableContextAttribute("2")]
public void DelayLoad(Task task);
    [IteratorStateMachineAttribute("AngleSharp.Dom.Document/<GetAttachedReferences>d__380`1")]
internal IEnumerable`1<T> GetAttachedReferences();
    internal void AttachReference(object value);
    [NullableContextAttribute("2")]
internal void SetFocus(IElement element);
    [AsyncStateMachineAttribute("AngleSharp.Dom.Document/<FinishLoadingAsync>d__383")]
internal Task FinishLoadingAsync();
    [AsyncStateMachineAttribute("AngleSharp.Dom.Document/<PromptToUnloadAsync>d__384")]
internal Task`1<bool> PromptToUnloadAsync();
    [AsyncStateMachineAttribute("AngleSharp.Dom.Document/<Unload>d__385")]
internal Task Unload(bool recycle);
    private sealed virtual override bool AngleSharp.Dom.IDocument.ExecuteCommand(string commandId, bool showUserInterface, string value);
    private sealed virtual override bool AngleSharp.Dom.IDocument.IsCommandEnabled(string commandId);
    private sealed virtual override bool AngleSharp.Dom.IDocument.IsCommandIndeterminate(string commandId);
    private sealed virtual override bool AngleSharp.Dom.IDocument.IsCommandExecuted(string commandId);
    private sealed virtual override bool AngleSharp.Dom.IDocument.IsCommandSupported(string commandId);
    private sealed virtual override string AngleSharp.Dom.IDocument.GetCommandValue(string commandId);
    private void Abort(bool fromUser);
    private void CancelTasks();
    private static bool IsCommand(IElement element);
    private static bool IsLink(IElement element);
    private static bool IsAnchor(IHtmlAnchorElement element);
    private void EmptyAppCache();
    [AsyncStateMachineAttribute("AngleSharp.Dom.Document/<PrintAsync>d__398")]
private Task PrintAsync();
    [AsyncStateMachineAttribute("AngleSharp.Dom.Document/<LocationChanged>d__399")]
private void LocationChanged(object sender, ChangedEventArgs e);
    protected sealed virtual string LocateNamespace(string prefix);
    protected sealed virtual string LocatePrefix(string namespaceUri);
    protected void CloneDocument(Document document, bool deep);
    protected virtual string GetTitle();
    [NullableContextAttribute("2")]
protected abstract virtual void SetTitle(string value);
    public sealed virtual bool AddImportUrl(Uri uri);
    public sealed virtual bool HasImported(Uri uri);
    private sealed virtual override TextSource AngleSharp.Html.Construction.IConstructableDocument.get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private sealed virtual override IDisposable AngleSharp.Html.Construction.IConstructableDocument.get_Builder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.set_Builder(IDisposable value);
    private sealed virtual override QuirksMode AngleSharp.Html.Construction.IConstructableDocument.get_QuirksMode();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.set_QuirksMode(QuirksMode value);
    [NullableContextAttribute("2")]
private sealed virtual override IConstructableElement AngleSharp.Html.Construction.IConstructableDocument.get_Head();
    private sealed virtual override IConstructableElement AngleSharp.Html.Construction.IConstructableDocument.get_DocumentElement();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.PerformMicrotaskCheckpoint();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.ProvideStableState();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.AddComment(StructHtmlToken& token);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.TrackError(Exception exception);
    private sealed virtual override Task AngleSharp.Html.Construction.IConstructableDocument.WaitForReadyAsync(CancellationToken cancelToken);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableDocument.ApplyManifest();
    private sealed virtual override bool AngleSharp.Html.Construction.IConstructableDocument.get_IsLoading();
    private sealed virtual override Task AngleSharp.Html.Construction.IConstructableDocument.FinishLoadingAsync();
    [CompilerGeneratedAttribute]
private void <Unload>b__385_0(CancellationToken _);
    [CompilerGeneratedAttribute]
private void <Unload>b__385_2(PageTransitionEvent ev);
    [CompilerGeneratedAttribute]
private bool <Unload>b__385_1(CancellationToken _);
    [CompilerGeneratedAttribute]
private bool <Abort>b__392_0(CancellationToken _);
    [CompilerGeneratedAttribute]
private bool <PrintAsync>b__398_0(CancellationToken _);
    [CompilerGeneratedAttribute]
private bool <PrintAsync>b__398_1(CancellationToken _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.DocumentExtensions : object {
    [ExtensionAttribute]
public static TElement CreateElement(IDocument document);
    [ExtensionAttribute]
public static void AdoptNode(IDocument document, INode node);
    [ExtensionAttribute]
internal static void QueueTask(Document document, Action action);
    [ExtensionAttribute]
internal static Task QueueTaskAsync(Document document, Action`1<CancellationToken> action);
    [ExtensionAttribute]
internal static Task`1<T> QueueTaskAsync(Document document, Func`2<CancellationToken, T> func);
    [ExtensionAttribute]
internal static void QueueMutation(Document document, MutationRecord record);
    [ExtensionAttribute]
internal static void AddTransientObserver(Document document, INode node);
    [ExtensionAttribute]
internal static void ApplyManifest(Document document);
    [ExtensionAttribute]
internal static void PerformMicrotaskCheckpoint(Document document);
    [ExtensionAttribute]
internal static void ProvideStableState(Document document);
    [ExtensionAttribute]
public static IEnumerable`1<Task> GetScriptDownloads(IDocument document);
    [ExtensionAttribute]
public static IEnumerable`1<Task> GetStyleSheetDownloads(IDocument document);
    [AsyncStateMachineAttribute("AngleSharp.Dom.DocumentExtensions/<WaitForReadyAsync>d__12")]
[ExtensionAttribute]
public static Task WaitForReadyAsync(IDocument document);
    [IteratorStateMachineAttribute("AngleSharp.Dom.DocumentExtensions/<GetDownloads>d__13")]
[ExtensionAttribute]
public static IEnumerable`1<IDownload> GetDownloads(IDocument document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.DocumentFragment : Node {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IElement> _elements;
    public int ChildElementCount { get; }
    public IHtmlCollection`1<IElement> Children { get; }
    [NullableAttribute("2")]
public IElement FirstElementChild { get; }
    [NullableAttribute("2")]
public IElement LastElementChild { get; }
    public string TextContent { get; public set; }
    internal DocumentFragment(Document owner);
    internal DocumentFragment(Element contextElement, string html);
    public sealed virtual int get_ChildElementCount();
    public sealed virtual IHtmlCollection`1<IElement> get_Children();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_FirstElementChild();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_LastElementChild();
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    public sealed virtual void Prepend(INode[] nodes);
    public sealed virtual void Append(INode[] nodes);
    public sealed virtual IElement QuerySelector(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> QuerySelectorAll(string selectors);
    public IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    public IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    public IHtmlCollection`1<IElement> GetElementsByTagNameNS(string namespaceURI, string tagName);
    public sealed virtual IElement GetElementById(string elementId);
    public virtual Node Clone(Document owner, bool deep);
}
[FlagsAttribute]
[DomNameAttribute("Document")]
public enum AngleSharp.Dom.DocumentPositions : Enum {
    public byte value__;
    public static DocumentPositions Same;
    [DomNameAttribute("DOCUMENT_POSITION_DISCONNECTED")]
public static DocumentPositions Disconnected;
    [DomNameAttribute("DOCUMENT_POSITION_PRECEDING")]
public static DocumentPositions Preceding;
    [DomNameAttribute("DOCUMENT_POSITION_FOLLOWING")]
public static DocumentPositions Following;
    [DomNameAttribute("DOCUMENT_POSITION_CONTAINS")]
public static DocumentPositions Contains;
    [DomNameAttribute("DOCUMENT_POSITION_CONTAINED_BY")]
public static DocumentPositions ContainedBy;
    [DomNameAttribute("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC")]
public static DocumentPositions ImplementationSpecific;
}
public enum AngleSharp.Dom.DocumentReadyState : Enum {
    public byte value__;
    [DomNameAttribute("loading")]
public static DocumentReadyState Loading;
    [DomNameAttribute("interactive")]
public static DocumentReadyState Interactive;
    [DomNameAttribute("complete")]
public static DocumentReadyState Complete;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.DocumentType : Node {
    [CompilerGeneratedAttribute]
private string <PublicIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemIdentifier>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <InternalSubset>k__BackingField;
    [NullableAttribute("2")]
public IElement PreviousElementSibling { get; }
    [NullableAttribute("2")]
public IElement NextElementSibling { get; }
    public IEnumerable`1<Entity> Entities { get; }
    public IEnumerable`1<Notation> Notations { get; }
    public string Name { get; }
    public string PublicIdentifier { get; public set; }
    public string SystemIdentifier { get; public set; }
    [NullableAttribute("2")]
public string InternalSubset { get; public set; }
    internal DocumentType(Document owner, string name);
    [NullableContextAttribute("2")]
public IElement get_PreviousElementSibling();
    [NullableContextAttribute("2")]
public IElement get_NextElementSibling();
    public IEnumerable`1<Entity> get_Entities();
    public IEnumerable`1<Notation> get_Notations();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PublicIdentifier();
    [CompilerGeneratedAttribute]
public void set_PublicIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SystemIdentifier();
    [CompilerGeneratedAttribute]
public void set_SystemIdentifier(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_InternalSubset();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_InternalSubset(string value);
    public sealed virtual void Before(INode[] nodes);
    public sealed virtual void After(INode[] nodes);
    public sealed virtual void Replace(INode[] nodes);
    public sealed virtual void Remove();
    public virtual Node Clone(Document owner, bool deep);
    protected virtual string LocateNamespace(string prefix);
    protected virtual string LocatePrefix(string namespaceUri);
}
[DomNameAttribute("DOMError")]
public enum AngleSharp.Dom.DomError : Enum {
    public byte value__;
    [DomDescriptionAttribute("The index is not in the allowed range.")]
[DomNameAttribute("INDEX_SIZE_ERR")]
public static DomError IndexSizeError;
    [DomDescriptionAttribute("The size of the string is invalid.")]
[DomNameAttribute("DOMSTRING_SIZE_ERR")]
[DomHistoricalAttribute]
public static DomError DomStringSize;
    [DomDescriptionAttribute("The operation would yield an incorrect node tree.")]
[DomNameAttribute("HIERARCHY_REQUEST_ERR")]
public static DomError HierarchyRequest;
    [DomDescriptionAttribute("The object is in the wrong document.")]
[DomNameAttribute("WRONG_DOCUMENT_ERR")]
public static DomError WrongDocument;
    [DomDescriptionAttribute("Invalid character detected.")]
[DomNameAttribute("INVALID_CHARACTER_ERR")]
public static DomError InvalidCharacter;
    [DomDescriptionAttribute("The data is allowed for this object.")]
[DomNameAttribute("NO_DATA_ALLOWED_ERR")]
[DomHistoricalAttribute]
public static DomError NoDataAllowed;
    [DomDescriptionAttribute("The object can not be modified.")]
[DomNameAttribute("NO_MODIFICATION_ALLOWED_ERR")]
public static DomError NoModificationAllowed;
    [DomDescriptionAttribute("The object can not be found here.")]
[DomNameAttribute("NOT_FOUND_ERR")]
public static DomError NotFound;
    [DomDescriptionAttribute("The operation is not supported.")]
[DomNameAttribute("NOT_SUPPORTED_ERR")]
public static DomError NotSupported;
    [DomDescriptionAttribute("The element is already in-use.")]
[DomNameAttribute("INUSE_ATTRIBUTE_ERR")]
[DomHistoricalAttribute]
public static DomError InUse;
    [DomDescriptionAttribute("The object is in an invalid state.")]
[DomNameAttribute("INVALID_STATE_ERR")]
public static DomError InvalidState;
    [DomDescriptionAttribute("The string did not match the expected pattern.")]
[DomNameAttribute("SYNTAX_ERR")]
public static DomError Syntax;
    [DomDescriptionAttribute("The object can not be modified in this way.")]
[DomNameAttribute("INVALID_MODIFICATION_ERR")]
public static DomError InvalidModification;
    [DomDescriptionAttribute("The operation is not allowed by namespaces in XML.")]
[DomNameAttribute("NAMESPACE_ERR")]
public static DomError Namespace;
    [DomDescriptionAttribute("The object does not support the operation or argument.")]
[DomNameAttribute("INVALID_ACCESS_ERR")]
public static DomError InvalidAccess;
    [DomDescriptionAttribute("The validation failed.")]
[DomNameAttribute("VALIDATION_ERR")]
public static DomError Validation;
    [DomDescriptionAttribute("The provided argument type is invalid.")]
[DomNameAttribute("TYPE_MISMATCH_ERR")]
[DomHistoricalAttribute]
public static DomError TypeMismatch;
    [DomDescriptionAttribute("The operation is insecure.")]
[DomNameAttribute("SECURITY_ERR")]
public static DomError Security;
    [DomDescriptionAttribute("A network error occurred.")]
[DomNameAttribute("NETWORK_ERR")]
public static DomError Network;
    [DomDescriptionAttribute("The operation was aborted.")]
[DomNameAttribute("ABORT_ERR")]
public static DomError Abort;
    [DomDescriptionAttribute("The given URL does not match another URL.")]
[DomNameAttribute("URL_MISMATCH_ERR")]
public static DomError UrlMismatch;
    [DomDescriptionAttribute("The quota has been exceeded.")]
[DomNameAttribute("QUOTA_EXCEEDED_ERR")]
public static DomError QuotaExceeded;
    [DomDescriptionAttribute("The operation timed out.")]
[DomNameAttribute("TIMEOUT_ERR")]
public static DomError Timeout;
    [DomDescriptionAttribute("The supplied node is incorrect or has an incorrect ancestor for this operation.")]
[DomNameAttribute("INVALID_NODE_TYPE_ERR")]
public static DomError InvalidNodeType;
    [DomDescriptionAttribute("The object can not be cloned.")]
[DomNameAttribute("DATA_CLONE_ERR")]
public static DomError DataClone;
}
public class AngleSharp.Dom.DomEventHandler : MulticastDelegate {
    public DomEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, Event ev);
    public virtual IAsyncResult BeginInvoke(object sender, Event ev, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.DomException : Exception {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    public string Name { get; }
    public int Code { get; }
    public DomException(DomError code);
    public DomException(string message);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Code();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.DomImplementation : object {
    private static Dictionary`2<string, String[]> features;
    private Document _owner;
    public DomImplementation(Document owner);
    private static DomImplementation();
    public sealed virtual IDocumentType CreateDocumentType(string qualifiedName, string publicId, string systemId);
    public sealed virtual IDocument CreateHtmlDocument(string title);
    public sealed virtual bool HasFeature(string feature, string version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Dom.Element : Node {
    private NamedNodeMap _attributes;
    private string _namespace;
    [NullableAttribute("2")]
private string _prefix;
    private string _localName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IElement> _elements;
    [NullableAttribute("2")]
private TokenList _classList;
    [NullableAttribute("2")]
private IShadowRoot _shadowRoot;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISourceReference <SourceReference>k__BackingField;
    internal IBrowsingContext Context { get; }
    internal NamedNodeMap Attributes { get; }
    [NullableAttribute("2")]
public IElement AssignedSlot { get; }
    [NullableAttribute("2")]
public string Slot { get; public set; }
    [NullableAttribute("2")]
public IShadowRoot ShadowRoot { get; }
    [NullableAttribute("2")]
public string Prefix { get; }
    public string LocalName { get; }
    [NullableAttribute("2")]
public string NamespaceUri { get; }
    [NullableAttribute("2")]
public string GivenNamespaceUri { get; }
    public string TextContent { get; public set; }
    public ITokenList ClassList { get; }
    [NullableAttribute("2")]
public string ClassName { get; public set; }
    [NullableAttribute("2")]
public string Id { get; public set; }
    public string TagName { get; }
    [NullableAttribute("2")]
public ISourceReference SourceReference { get; public set; }
    [NullableAttribute("2")]
public IElement PreviousElementSibling { get; }
    [NullableAttribute("2")]
public IElement NextElementSibling { get; }
    public int ChildElementCount { get; }
    public IHtmlCollection`1<IElement> Children { get; }
    [NullableAttribute("2")]
public IElement FirstElementChild { get; }
    [NullableAttribute("2")]
public IElement LastElementChild { get; }
    public string InnerHtml { get; public set; }
    public string OuterHtml { get; public set; }
    private INamedNodeMap AngleSharp.Dom.IElement.Attributes { get; }
    public bool IsFocused { get; protected set; }
    private StringOrMemory AngleSharp.Html.Construction.IConstructableElement.LocalName { get; }
    private IConstructableNamedNodeMap AngleSharp.Html.Construction.IConstructableElement.Attributes { get; }
    private StringOrMemory AngleSharp.Html.Construction.IConstructableElement.NamespaceUri { get; }
    private StringOrMemory AngleSharp.Html.Construction.IConstructableElement.Prefix { get; }
    public Element(Document owner, string localName, string prefix, string namespaceUri, NodeFlags flags);
    public Element(Document owner, string name, string localName, string prefix, string namespaceUri, NodeFlags flags);
    internal IBrowsingContext get_Context();
    internal NamedNodeMap get_Attributes();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_AssignedSlot();
    [NullableContextAttribute("2")]
public sealed virtual string get_Slot();
    [NullableContextAttribute("2")]
public sealed virtual void set_Slot(string value);
    [NullableContextAttribute("2")]
public sealed virtual IShadowRoot get_ShadowRoot();
    [NullableContextAttribute("2")]
public sealed virtual string get_Prefix();
    public sealed virtual string get_LocalName();
    [NullableContextAttribute("2")]
public sealed virtual string get_NamespaceUri();
    [NullableContextAttribute("2")]
public sealed virtual string get_GivenNamespaceUri();
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    public sealed virtual ITokenList get_ClassList();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    [NullableContextAttribute("2")]
public sealed virtual void set_ClassName(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Id();
    [NullableContextAttribute("2")]
public sealed virtual void set_Id(string value);
    public sealed virtual string get_TagName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ISourceReference get_SourceReference();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_SourceReference(ISourceReference value);
    [NullableContextAttribute("2")]
public sealed virtual IElement get_PreviousElementSibling();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_NextElementSibling();
    public sealed virtual int get_ChildElementCount();
    public sealed virtual IHtmlCollection`1<IElement> get_Children();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_FirstElementChild();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_LastElementChild();
    public sealed virtual string get_InnerHtml();
    public sealed virtual void set_InnerHtml(string value);
    public sealed virtual string get_OuterHtml();
    public sealed virtual void set_OuterHtml(string value);
    private sealed virtual override INamedNodeMap AngleSharp.Dom.IElement.get_Attributes();
    public sealed virtual bool get_IsFocused();
    protected void set_IsFocused(bool value);
    public abstract virtual IElement ParseSubtree(string source);
    public sealed virtual IShadowRoot AttachShadow(ShadowRootMode mode);
    public sealed virtual IElement QuerySelector(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> QuerySelectorAll(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    public sealed virtual IHtmlCollection`1<IElement> GetElementsByTagNameNS(string namespaceURI, string tagName);
    public sealed virtual bool Matches(string selectorText);
    public sealed virtual IElement Closest(string selectorText);
    public sealed virtual bool HasAttribute(string name);
    public sealed virtual bool HasAttribute(StringOrMemory name);
    public sealed virtual bool HasAttribute(string namespaceUri, string localName);
    public sealed virtual string GetAttribute(string name);
    [NullableContextAttribute("2")]
public sealed virtual string GetAttribute(string namespaceUri, string localName);
    public sealed virtual void SetAttribute(string name, string value);
    [NullableContextAttribute("2")]
public sealed virtual void SetAttribute(string namespaceUri, string name, string value);
    public void AddAttribute(Attr attr);
    public sealed virtual bool RemoveAttribute(string name);
    public sealed virtual bool RemoveAttribute(string namespaceUri, string localName);
    public sealed virtual void Prepend(INode[] nodes);
    public sealed virtual void Append(INode[] nodes);
    [NullableContextAttribute("2")]
public virtual bool Equals(INode otherNode);
    public sealed virtual void Before(INode[] nodes);
    public sealed virtual void After(INode[] nodes);
    public sealed virtual void Replace(INode[] nodes);
    public sealed virtual void Remove();
    public sealed virtual void Insert(AdjacentPosition position, string html);
    public virtual Node Clone(Document owner, bool deep);
    internal virtual void SetupElement();
    [NullableContextAttribute("2")]
internal void AttributeChanged(string localName, string namespaceUri, string oldValue, string newValue);
    internal void UpdateClassList(string value);
    protected void UpdateAttribute(string name, string value);
    protected sealed virtual string LocateNamespace(string prefix);
    protected sealed virtual string LocatePrefix(string namespaceUri);
    protected void CloneElement(Element element, Document owner, bool deep);
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableElement.get_LocalName();
    private sealed virtual override IConstructableNamedNodeMap AngleSharp.Html.Construction.IConstructableElement.get_Attributes();
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableElement.get_NamespaceUri();
    [NullableContextAttribute("2")]
private sealed virtual override void AngleSharp.Html.Construction.IConstructableElement.SetAttribute(string ns, StringOrMemory name, StringOrMemory value);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableElement.SetOwnAttribute(StringOrMemory name, StringOrMemory value);
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableElement.GetAttribute(StringOrMemory namespace, StringOrMemory name);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableElement.SetAttributes(StructAttributes tagAttributes);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableElement.SetupElement();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableElement.AddComment(StructHtmlToken& token);
    private sealed virtual override IConstructableNode AngleSharp.Html.Construction.IConstructableElement.ShallowCopy();
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableElement.get_Prefix();
    [CompilerGeneratedAttribute]
private void <get_ClassList>b__32_0(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.ElementExtensions : object {
    [ExtensionAttribute]
public static string LocatePrefixFor(IElement element, string namespaceUri);
    [ExtensionAttribute]
public static string LocateNamespaceFor(IElement element, string prefix);
    [ExtensionAttribute]
public static string GetNamespaceUri(IElement element);
    [ExtensionAttribute]
public static bool TryLocateCustomNamespace(IElement element, string prefix, String& namespaceUri);
    [ExtensionAttribute]
public static bool TryLocateStandardNamespace(IElement element, String& namespaceUri);
    [ExtensionAttribute]
public static ResourceRequest CreateRequestFor(IElement element, Url url);
    [ExtensionAttribute]
public static bool MatchesCssNamespace(IElement el, string prefix);
    [ExtensionAttribute]
public static string GetCssNamespace(IElement el, string prefix);
    [ExtensionAttribute]
public static bool IsHovered(IElement element);
    [ExtensionAttribute]
public static bool IsOnlyOfType(IElement element);
    [ExtensionAttribute]
public static bool IsFirstOfType(IElement element);
    [ExtensionAttribute]
public static bool IsLastOfType(IElement element);
    [ExtensionAttribute]
public static bool IsTarget(IElement element);
    [ExtensionAttribute]
public static bool IsEnabled(IElement element);
    [ExtensionAttribute]
public static bool IsDisabled(IElement element);
    [ExtensionAttribute]
public static bool IsDefault(IElement element);
    [ExtensionAttribute]
public static bool IsPseudo(IElement element, string name);
    [ExtensionAttribute]
public static bool IsChecked(IElement element);
    [ExtensionAttribute]
public static bool IsIndeterminate(IElement element);
    [ExtensionAttribute]
public static bool IsPlaceholderShown(IElement element);
    [ExtensionAttribute]
public static bool IsUnchecked(IElement element);
    [ExtensionAttribute]
public static bool IsActive(IElement element);
    [ExtensionAttribute]
public static bool IsVisited(IElement element);
    private static bool CheckActive(IElement element);
    private static bool CheckVisited(IElement element);
    [ExtensionAttribute]
public static bool IsLink(IElement element);
    [ExtensionAttribute]
public static bool IsShadow(IElement element);
    [ExtensionAttribute]
public static bool IsOptional(IElement element);
    [ExtensionAttribute]
public static bool IsVisible(IElement element);
    [ExtensionAttribute]
public static bool IsRequired(IElement element);
    [ExtensionAttribute]
public static bool IsInvalid(IElement element);
    [ExtensionAttribute]
public static bool IsValid(IElement element);
    [ExtensionAttribute]
public static bool IsReadOnly(IElement element);
    [ExtensionAttribute]
public static bool IsMutable(IHtmlInputElement input);
    [ExtensionAttribute]
public static bool IsMutable(IHtmlTextAreaElement textArea);
    [ExtensionAttribute]
public static bool IsEditable(IElement element);
    [ExtensionAttribute]
public static bool IsOutOfRange(IElement element);
    [ExtensionAttribute]
public static bool IsInRange(IElement element);
    [ExtensionAttribute]
public static bool IsOnlyChild(IElement element);
    [ExtensionAttribute]
public static bool IsFirstChild(IElement element);
    [ExtensionAttribute]
public static bool IsLastChild(IElement element);
    [ExtensionAttribute]
public static T Attr(T elements, string attributeName, string attributeValue);
    [ExtensionAttribute]
public static T Attr(T elements, IEnumerable`1<KeyValuePair`2<string, string>> attributes);
    [ExtensionAttribute]
public static T Attr(T elements, object attributes);
    [ExtensionAttribute]
public static IEnumerable`1<string> Attr(T elements, string attributeName);
    [ExtensionAttribute]
public static IElement ClearAttr(IElement element);
    [ExtensionAttribute]
public static T ClearAttr(T elements);
    [ExtensionAttribute]
public static IElement Empty(IElement element);
    [ExtensionAttribute]
public static T Empty(T elements);
    [ExtensionAttribute]
public static string Html(IElement element);
    [ExtensionAttribute]
public static T Html(T elements, string html);
    [ExtensionAttribute]
public static T AddClass(T elements, string className);
    [ExtensionAttribute]
public static T RemoveClass(T elements, string className);
    [ExtensionAttribute]
public static T ToggleClass(T elements, string className);
    [ExtensionAttribute]
public static bool HasClass(IEnumerable`1<IElement> elements, string className);
    [ExtensionAttribute]
public static T Before(T elements, string html);
    [ExtensionAttribute]
public static T After(T elements, string html);
    [ExtensionAttribute]
public static T Append(T elements, string html);
    [ExtensionAttribute]
public static T Prepend(T elements, string html);
    [ExtensionAttribute]
public static T Wrap(T elements, string html);
    [ExtensionAttribute]
public static T WrapInner(T elements, string html);
    [ExtensionAttribute]
public static T WrapAll(T elements, string html);
    [ExtensionAttribute]
public static IHtmlCollection`1<TElement> ToCollection(IEnumerable`1<TElement> elements);
    [ExtensionAttribute]
public static Task`1<IDocument> NavigateAsync(TElement element);
    [ExtensionAttribute]
public static Task`1<IDocument> NavigateAsync(TElement element, CancellationToken cancel);
    [ExtensionAttribute]
internal static void Process(Element element, IRequestProcessor processor, Url url);
    [ExtensionAttribute]
internal static Url GetImageCandidate(HtmlImageElement img);
    [ExtensionAttribute]
internal static string GetOwnAttribute(Element element, string name);
    [ExtensionAttribute]
internal static bool HasOwnAttribute(Element element, string name);
    [ExtensionAttribute]
internal static string GetUrlAttribute(Element element, string name);
    [ExtensionAttribute]
internal static bool IsBooleanAttribute(IElement element, string name);
    [ExtensionAttribute]
internal static bool GetBoolAttribute(Element element, string name);
    [ExtensionAttribute]
internal static void SetBoolAttribute(Element element, string name, bool value);
    [ExtensionAttribute]
internal static void SetOwnAttribute(Element element, string name, string value, bool suppressCallbacks);
    [ExtensionAttribute]
private static IDocumentFragment CreateFragment(IElement context, string html);
    [ExtensionAttribute]
private static IElement GetInnerMostElement(IDocumentFragment fragment);
    [ExtensionAttribute]
public static string GetSelector(IElement element);
    [ExtensionAttribute]
internal static IElement ParseHtmlSubtree(Element element, string html);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("Entity")]
public class AngleSharp.Dom.Entity : Node {
    private string _publicId;
    private string _systemId;
    private string _notationName;
    private string _inputEncoding;
    private string _xmlVersion;
    private string _xmlEncoding;
    private string _value;
    [DomNameAttribute("publicId")]
public string PublicId { get; }
    [DomNameAttribute("systemId")]
public string SystemId { get; }
    [DomNameAttribute("notationName")]
public string NotationName { get; public set; }
    [DomNameAttribute("inputEncoding")]
public string InputEncoding { get; }
    [DomNameAttribute("xmlEncoding")]
public string XmlEncoding { get; }
    [DomNameAttribute("xmlVersion")]
public string XmlVersion { get; }
    [NullableAttribute("1")]
[DomNameAttribute("textContent")]
public string TextContent { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("nodeValue")]
public string NodeValue { get; public set; }
    [NullableContextAttribute("1")]
public Entity(Document owner);
    [NullableContextAttribute("1")]
public Entity(Document owner, string name);
    public string get_PublicId();
    public string get_SystemId();
    public string get_NotationName();
    public void set_NotationName(string value);
    public string get_InputEncoding();
    public string get_XmlEncoding();
    public string get_XmlVersion();
    [NullableContextAttribute("1")]
public virtual string get_TextContent();
    [NullableContextAttribute("1")]
public virtual void set_TextContent(string value);
    [NullableContextAttribute("1")]
public virtual string get_NodeValue();
    [NullableContextAttribute("1")]
public virtual void set_NodeValue(string value);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document newOwner, bool deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.EntityReference : Node {
    internal EntityReference(Document owner);
    internal EntityReference(Document owner, string name);
    public virtual Node Clone(Document owner, bool deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Dom.EventNames : object {
    public static string Invalid;
    public static string Load;
    public static string DomContentLoaded;
    public static string Error;
    public static string BeforeScriptExecute;
    public static string AfterScriptExecute;
    public static string ReadyStateChanged;
    public static string Abort;
    public static string Blur;
    public static string Cancel;
    public static string Click;
    public static string Change;
    public static string CanPlayThrough;
    public static string CanPlay;
    public static string CueChange;
    public static string DblClick;
    public static string Drag;
    public static string DragEnd;
    public static string DragEnter;
    public static string DragExit;
    public static string DragLeave;
    public static string DragOver;
    public static string DragStart;
    public static string Drop;
    public static string DurationChange;
    public static string Emptied;
    public static string Focus;
    public static string FullscreenChange;
    public static string FullscreenError;
    public static string HashChange;
    public static string Input;
    public static string Message;
    public static string Keydown;
    public static string Keypress;
    public static string Keyup;
    public static string Ended;
    public static string LoadedData;
    public static string LoadedMetaData;
    public static string LoadEnd;
    public static string LoadStart;
    public static string Wheel;
    public static string Mouseup;
    public static string Mouseover;
    public static string Mouseout;
    public static string Mousemove;
    public static string Mouseleave;
    public static string Mouseenter;
    public static string Mousedown;
    public static string Pause;
    public static string Play;
    public static string Playing;
    public static string Progress;
    public static string RateChange;
    public static string Waiting;
    public static string VolumeChange;
    public static string Toggle;
    public static string TimeUpdate;
    public static string Suspend;
    public static string Submit;
    public static string Stalled;
    public static string Show;
    public static string Select;
    public static string Seeking;
    public static string Seeked;
    public static string Scroll;
    public static string Resize;
    public static string Reset;
    public static string AfterPrint;
    public static string Print;
    public static string BeforePrint;
    public static string BeforeUnload;
    public static string Unloading;
    public static string Offline;
    public static string Online;
    public static string PageHide;
    public static string PageShow;
    public static string PopState;
    public static string Unload;
    public static string ConfirmUnload;
    public static string Storage;
    public static string Parsing;
    public static string Parsed;
    public static string Requesting;
    public static string Requested;
    private static EventNames();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("CustomEvent")]
public class AngleSharp.Dom.Events.CustomEvent : Event {
    [CompilerGeneratedAttribute]
private object <Details>k__BackingField;
    [DomNameAttribute("detail")]
public object Details { get; private set; }
    [NullableContextAttribute("1")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public CustomEvent(string type, bool bubbles, bool cancelable, object details);
    [CompilerGeneratedAttribute]
public object get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(object value);
    [NullableContextAttribute("1")]
[DomNameAttribute("initCustomEvent")]
public void Init(string type, bool bubbles, bool cancelable, object details);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.Events.DefaultEventFactory : object {
    private Dictionary`2<string, Creator> _creators;
    public void Register(string name, Creator creator);
    public Creator Unregister(string name);
    protected virtual Event CreateDefault(string name);
    public sealed virtual Event Create(string name);
    private void AddEventAlias(string aliasName, string aliasFor);
}
[DomNameAttribute("ErrorEvent")]
public class AngleSharp.Dom.Events.ErrorEvent : Event {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [DomNameAttribute("message")]
public string Message { get; }
    [DomNameAttribute("filename")]
public string FileName { get; private set; }
    [DomNameAttribute("lineno")]
public int Line { get; private set; }
    [DomNameAttribute("colno")]
public int Column { get; private set; }
    [DomNameAttribute("error")]
public Exception Error { get; private set; }
    public string get_Message();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(int value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    public void Init(string filename, int line, int column, Exception error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DomNameAttribute("Event")]
public class AngleSharp.Dom.Events.Event : EventArgs {
    private EventFlags _flags;
    private EventPhase _phase;
    [NullableAttribute("2")]
private IEventTarget _current;
    [NullableAttribute("2")]
private IEventTarget _target;
    private bool _bubbles;
    private bool _cancelable;
    private bool _composed;
    [NullableAttribute("2")]
private string _type;
    private DateTime _time;
    [NullableAttribute("2")]
private List`1<EventPathItem> _currentPath;
    [CompilerGeneratedAttribute]
private bool <IsTrusted>k__BackingField;
    internal EventFlags Flags { get; }
    [DomNameAttribute("type")]
public string Type { get; }
    [NullableAttribute("2")]
[DomNameAttribute("target")]
public IEventTarget OriginalTarget { get; }
    [NullableAttribute("2")]
[DomNameAttribute("currentTarget")]
public IEventTarget CurrentTarget { get; }
    [DomNameAttribute("eventPhase")]
public EventPhase Phase { get; }
    [DomNameAttribute("composed")]
public bool IsComposed { get; }
    [DomNameAttribute("bubbles")]
public bool IsBubbling { get; }
    [DomNameAttribute("cancelable")]
public bool IsCancelable { get; }
    [DomNameAttribute("defaultPrevented")]
public bool IsDefaultPrevented { get; }
    [DomNameAttribute("isTrusted")]
public bool IsTrusted { get; internal set; }
    [DomNameAttribute("timeStamp")]
public DateTime Time { get; }
    public Event(string type);
    public Event(string type, bool bubbles, bool cancelable);
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public Event(string type, bool bubbles, bool cancelable, bool composed);
    internal EventFlags get_Flags();
    public string get_Type();
    [NullableContextAttribute("2")]
public IEventTarget get_OriginalTarget();
    [NullableContextAttribute("2")]
public IEventTarget get_CurrentTarget();
    public EventPhase get_Phase();
    public bool get_IsComposed();
    public bool get_IsBubbling();
    public bool get_IsCancelable();
    public bool get_IsDefaultPrevented();
    [CompilerGeneratedAttribute]
public bool get_IsTrusted();
    [CompilerGeneratedAttribute]
internal void set_IsTrusted(bool value);
    public DateTime get_Time();
    [DomNameAttribute("composedPath")]
public IEnumerable`1<IEventTarget> GetComposedPath();
    [DomNameAttribute("stopPropagation")]
public void Stop();
    [DomNameAttribute("stopImmediatePropagation")]
public void StopImmediately();
    [DomNameAttribute("preventDefault")]
public void Cancel();
    [DomNameAttribute("initEvent")]
public void Init(string type, bool bubbles, bool cancelable);
    internal bool Dispatch(IEventTarget target);
    private void CallListeners(IEventTarget target);
    private void DispatchAt(IEnumerable`1<EventPathItem> path);
}
[DomNameAttribute("Event")]
public enum AngleSharp.Dom.Events.EventPhase : Enum {
    public byte value__;
    [DomNameAttribute("NONE")]
public static EventPhase None;
    [DomNameAttribute("CAPTURING_PHASE")]
public static EventPhase Capturing;
    [DomNameAttribute("AT_TARGET")]
public static EventPhase AtTarget;
    [DomNameAttribute("BUBBLING_PHASE")]
public static EventPhase Bubbling;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("FocusEvent")]
public class AngleSharp.Dom.Events.FocusEvent : UiEvent {
    [CompilerGeneratedAttribute]
private IEventTarget <Target>k__BackingField;
    [DomNameAttribute("relatedTarget")]
public IEventTarget Target { get; private set; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public FocusEvent(string type, bool bubbles, bool cancelable, IWindow view, int detail, IEventTarget target);
    [CompilerGeneratedAttribute]
public IEventTarget get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(IEventTarget value);
    [DomNameAttribute("initFocusEvent")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, int detail, IEventTarget target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DomNameAttribute("HashChangeEvent")]
public class AngleSharp.Dom.Events.HashChangedEvent : Event {
    [CompilerGeneratedAttribute]
private string <PreviousUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUrl>k__BackingField;
    [DomNameAttribute("oldURL")]
public string PreviousUrl { get; private set; }
    [DomNameAttribute("newURL")]
public string CurrentUrl { get; private set; }
    [NullableContextAttribute("2")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public HashChangedEvent(string type, bool bubbles, bool cancelable, string oldURL, string newURL);
    [CompilerGeneratedAttribute]
public string get_PreviousUrl();
    [CompilerGeneratedAttribute]
private void set_PreviousUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUrl();
    [CompilerGeneratedAttribute]
private void set_CurrentUrl(string value);
    [DomNameAttribute("initHashChangedEvent")]
[MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Init(string type, bool bubbles, bool cancelable, string previousUrl, string currentUrl);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Dom.Events.IEventFactory {
    public abstract virtual Event Create(string name);
}
[NullableContextAttribute("1")]
[DomNameAttribute("GlobalEventHandlers")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.Events.IGlobalEventHandlers {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Aborted(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Aborted(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Blurred(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Blurred(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cancelled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cancelled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanPlay(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanPlay(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanPlayThrough(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanPlayThrough(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Clicked(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Clicked(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CueChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CueChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DoubleClick(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DoubleClick(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Drag(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Drag(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragEnd(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragEnd(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragEnter(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragEnter(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragExit(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragExit(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragLeave(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragLeave(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragOver(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragOver(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragStart(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragStart(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dropped(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dropped(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DurationChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DurationChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Emptied(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Emptied(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Ended(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Ended(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Focused(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Focused(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Input(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Input(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Invalid(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Invalid(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyDown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyDown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyPress(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyPress(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyUp(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyUp(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Loaded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Loaded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadedData(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadedData(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadedMetadata(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadedMetadata(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Loading(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Loading(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseDown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseDown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseEnter(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseEnter(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseLeave(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseLeave(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseMove(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseMove(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseOut(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseOut(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseOver(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseOver(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseUp(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseUp(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseWheel(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseWheel(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Paused(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Paused(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Played(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Played(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Playing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Playing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Progress(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Progress(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RateChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RateChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Resetted(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Resetted(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Resized(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Resized(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Scrolled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Scrolled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Seeked(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Seeked(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Seeking(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Seeking(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Selected(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Selected(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Shown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Shown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Stalled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Stalled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Submitted(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Submitted(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Suspended(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Suspended(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TimeUpdated(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TimeUpdated(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Toggled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Toggled(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_VolumeChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_VolumeChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Waiting(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Waiting(DomEventHandler value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("MessagePort")]
public interface AngleSharp.Dom.Events.IMessagePort {
    [DomNameAttribute("postMessage")]
public abstract virtual void Send(object message);
    [DomNameAttribute("start")]
public abstract virtual void Open();
    [DomNameAttribute("close")]
public abstract virtual void Close();
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReceived(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReceived(DomEventHandler value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("WindowEventHandlers")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.Events.IWindowEventHandlers {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Printed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Printed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Printing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Printing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Unloading(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Unloading(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HashChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HashChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReceived(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReceived(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WentOffline(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WentOffline(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WentOnline(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WentOnline(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PageHidden(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PageHidden(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PageShown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PageShown(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PopState(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PopState(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Storage(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Storage(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Unloaded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Unloaded(DomEventHandler value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DomNameAttribute("MessageEvent")]
public class AngleSharp.Dom.Events.MessageEvent : Event {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastEventId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IWindow <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessagePort[] <Ports>k__BackingField;
    [NullableAttribute("2")]
[DomNameAttribute("data")]
public object Data { get; private set; }
    [DomNameAttribute("origin")]
public string Origin { get; private set; }
    [DomNameAttribute("lastEventId")]
public string LastEventId { get; private set; }
    [NullableAttribute("2")]
[DomNameAttribute("source")]
public IWindow Source { get; private set; }
    [DomNameAttribute("ports")]
public IMessagePort[] Ports { get; private set; }
    [NullableContextAttribute("2")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public MessageEvent(string type, bool bubbles, bool cancelable, object data, string origin, string lastEventId, IWindow source, IMessagePort[] ports);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Data(object value);
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(string value);
    [CompilerGeneratedAttribute]
public string get_LastEventId();
    [CompilerGeneratedAttribute]
private void set_LastEventId(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IWindow get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Source(IWindow value);
    [CompilerGeneratedAttribute]
public IMessagePort[] get_Ports();
    [CompilerGeneratedAttribute]
private void set_Ports(IMessagePort[] value);
    [DomNameAttribute("initMessageEvent")]
[MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Init(string type, bool bubbles, bool cancelable, object data, string origin, string lastEventId, IWindow source, IMessagePort[] ports);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DomNameAttribute("PageTransitionEvent")]
public class AngleSharp.Dom.Events.PageTransitionEvent : Event {
    [CompilerGeneratedAttribute]
private bool <IsPersisted>k__BackingField;
    [DomNameAttribute("persisted")]
public bool IsPersisted { get; private set; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public PageTransitionEvent(string type, bool bubbles, bool cancelable, bool persisted);
    [CompilerGeneratedAttribute]
public bool get_IsPersisted();
    [CompilerGeneratedAttribute]
private void set_IsPersisted(bool value);
    [DomNameAttribute("initPageTransitionEvent")]
public void Init(string type, bool bubbles, bool cancelable, bool persisted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Dom.Events.RequestEvent : Event {
    [CompilerGeneratedAttribute]
private Request <Request>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IResponse <Response>k__BackingField;
    public Request Request { get; }
    [NullableAttribute("2")]
public IResponse Response { get; }
    public RequestEvent(Request request, IResponse response);
    [CompilerGeneratedAttribute]
public Request get_Request();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IResponse get_Response();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("UIEvent")]
public class AngleSharp.Dom.Events.UiEvent : Event {
    [CompilerGeneratedAttribute]
private IWindow <View>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Detail>k__BackingField;
    [DomNameAttribute("view")]
public IWindow View { get; private set; }
    [DomNameAttribute("detail")]
public int Detail { get; private set; }
    [NullableContextAttribute("1")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public UiEvent(string type, bool bubbles, bool cancelable, IWindow view, int detail);
    [CompilerGeneratedAttribute]
public IWindow get_View();
    [CompilerGeneratedAttribute]
private void set_View(IWindow value);
    [CompilerGeneratedAttribute]
public int get_Detail();
    [CompilerGeneratedAttribute]
private void set_Detail(int value);
    [NullableContextAttribute("1")]
[DomNameAttribute("initUIEvent")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, int detail);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Dom.EventTarget : object {
    [NullableAttribute("2")]
private List`1<RegisteredEventListener> _listeners;
    private List`1<RegisteredEventListener> Listeners { get; }
    internal bool HasEventListeners { get; }
    private List`1<RegisteredEventListener> get_Listeners();
    public sealed virtual void AddEventListener(string type, DomEventHandler callback, bool capture);
    public sealed virtual void RemoveEventListener(string type, DomEventHandler callback, bool capture);
    public void RemoveEventListeners();
    public sealed virtual void InvokeEventListener(Event ev);
    public bool HasEventListener(string type);
    internal bool get_HasEventListeners();
    public sealed virtual bool Dispatch(Event ev);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.EventTargetExtensions : object {
    [ExtensionAttribute]
public static bool FireSimpleEvent(IEventTarget target, string eventName, bool bubble, bool cancelable);
    [ExtensionAttribute]
public static bool Fire(IEventTarget target, Event eventData);
    [ExtensionAttribute]
public static bool Fire(IEventTarget target, Action`1<T> initializer, IEventTarget targetOverride);
    [AsyncStateMachineAttribute("AngleSharp.Dom.EventTargetExtensions/<AwaitEventAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<Event> AwaitEventAsync(TEventTarget node, string eventName);
}
[DomNameAttribute("NodeFilter")]
public enum AngleSharp.Dom.FilterResult : Enum {
    public byte value__;
    [DomNameAttribute("FILTER_ACCEPT")]
public static FilterResult Accept;
    [DomNameAttribute("FILTER_REJECT")]
public static FilterResult Reject;
    [DomNameAttribute("FILTER_SKIP")]
public static FilterResult Skip;
}
[FlagsAttribute]
[DomNameAttribute("NodeFilter")]
public enum AngleSharp.Dom.FilterSettings : Enum {
    public ulong value__;
    [DomNameAttribute("SHOW_ALL")]
public static FilterSettings All;
    [DomNameAttribute("SHOW_ELEMENT")]
public static FilterSettings Element;
    [DomNameAttribute("SHOW_ATTRIBUTE")]
[DomHistoricalAttribute]
public static FilterSettings Attribute;
    [DomNameAttribute("SHOW_TEXT")]
public static FilterSettings Text;
    [DomNameAttribute("SHOW_CDATA_SECTION")]
[DomHistoricalAttribute]
public static FilterSettings CharacterData;
    [DomNameAttribute("SHOW_ENTITY_REFERENCE")]
[DomHistoricalAttribute]
public static FilterSettings EntityReference;
    [DomNameAttribute("SHOW_ENTITY")]
[DomHistoricalAttribute]
public static FilterSettings Entity;
    [DomNameAttribute("SHOW_PROCESSING_INSTRUCTION")]
public static FilterSettings ProcessingInstruction;
    [DomNameAttribute("SHOW_COMMENT")]
public static FilterSettings Comment;
    [DomNameAttribute("SHOW_DOCUMENT")]
public static FilterSettings Document;
    [DomNameAttribute("SHOW_DOCUMENT_TYPE")]
public static FilterSettings DocumentType;
    [DomNameAttribute("SHOW_DOCUMENT_FRAGMENT")]
public static FilterSettings DocumentFragment;
    [DomNameAttribute("SHOW_NOTATION")]
[DomHistoricalAttribute]
public static FilterSettings Notation;
}
public enum AngleSharp.Dom.HorizontalAlignment : Enum {
    public byte value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Justify;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.HtmlAllCollection : object {
    private IEnumerable`1<IElement> _elements;
    public IElement Item { get; }
    [NullableAttribute("2")]
public IElement Item { get; }
    public int Length { get; }
    public HtmlAllCollection(IDocument document);
    public sealed virtual IElement get_Item(int index);
    public sealed virtual IElement get_Item(string id);
    public sealed virtual int get_Length();
    public sealed virtual IEnumerator`1<IElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.HtmlCollection`1 : object {
    private IEnumerable`1<T> _elements;
    public T Item { get; }
    [NullableAttribute("2")]
public T Item { get; }
    public int Length { get; }
    public HtmlCollection`1(IEnumerable`1<T> elements);
    public HtmlCollection`1(INode parent, bool deep, Func`2<T, bool> predicate);
    public sealed virtual T get_Item(int index);
    public sealed virtual T get_Item(string id);
    public sealed virtual int get_Length();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.HtmlFormControlsCollection : object {
    private IEnumerable`1<HtmlFormControlElement> _elements;
    public int Length { get; }
    public HtmlFormControlElement Item { get; }
    [NullableAttribute("2")]
public HtmlFormControlElement Item { get; }
    private IHtmlElement AngleSharp.Dom.IHtmlCollection<AngleSharp.Html.Dom.IHtmlElement>.Item { get; }
    [NullableAttribute("2")]
private IHtmlElement AngleSharp.Dom.IHtmlCollection<AngleSharp.Html.Dom.IHtmlElement>.Item { get; }
    public HtmlFormControlsCollection(IElement form, IElement root);
    public sealed virtual int get_Length();
    public HtmlFormControlElement get_Item(int index);
    public HtmlFormControlElement get_Item(string id);
    public IEnumerator`1<HtmlFormControlElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IHtmlElement AngleSharp.Dom.IHtmlCollection<AngleSharp.Html.Dom.IHtmlElement>.get_Item(int index);
    private sealed virtual override IHtmlElement AngleSharp.Dom.IHtmlCollection<AngleSharp.Html.Dom.IHtmlElement>.get_Item(string id);
    private sealed virtual override IEnumerator`1<IHtmlElement> System.Collections.Generic.IEnumerable<AngleSharp.Html.Dom.IHtmlElement>.GetEnumerator();
}
[NullableContextAttribute("1")]
[DomNameAttribute("Attr")]
public interface AngleSharp.Dom.IAttr {
    [DomNameAttribute("localName")]
public string LocalName { get; }
    [DomNameAttribute("name")]
public string Name { get; }
    [DomNameAttribute("value")]
public string Value { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("namespaceURI")]
public string NamespaceUri { get; }
    [NullableAttribute("2")]
[DomNameAttribute("prefix")]
public string Prefix { get; }
    [NullableAttribute("2")]
[DomNameAttribute("ownerElement")]
public IElement OwnerElement { get; }
    [DomNameAttribute("specified")]
public bool IsSpecified { get; }
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_NamespaceUri();
    [NullableContextAttribute("2")]
public abstract virtual string get_Prefix();
    [NullableContextAttribute("2")]
public abstract virtual IElement get_OwnerElement();
    public abstract virtual bool get_IsSpecified();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Dom.IAttributeObserver {
    public abstract virtual void NotifyChange(IElement host, string name, string value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("CharacterData")]
public interface AngleSharp.Dom.ICharacterData {
    [DomNameAttribute("data")]
public string Data { get; public set; }
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual string get_Data();
    public abstract virtual void set_Data(string value);
    public abstract virtual int get_Length();
    [DomNameAttribute("substringData")]
public abstract virtual string Substring(int offset, int count);
    [DomNameAttribute("appendData")]
public abstract virtual void Append(string value);
    [DomNameAttribute("insertData")]
public abstract virtual void Insert(int offset, string value);
    [DomNameAttribute("deleteData")]
public abstract virtual void Delete(int offset, int count);
    [DomNameAttribute("replaceData")]
public abstract virtual void Replace(int offset, int count, string value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("ChildNode")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.IChildNode {
    [DomNameAttribute("before")]
public abstract virtual void Before(INode[] nodes);
    [DomNameAttribute("after")]
public abstract virtual void After(INode[] nodes);
    [DomNameAttribute("replace")]
public abstract virtual void Replace(INode[] nodes);
    [DomNameAttribute("remove")]
public abstract virtual void Remove();
}
[DomNameAttribute("Comment")]
public interface AngleSharp.Dom.IComment {
}
[NullableContextAttribute("1")]
[DomNameAttribute("Document")]
public interface AngleSharp.Dom.IDocument {
    [DomNameAttribute("all")]
public IHtmlAllCollection All { get; }
    [DomNameAttribute("anchors")]
public IHtmlCollection`1<IHtmlAnchorElement> Anchors { get; }
    [DomNameAttribute("implementation")]
public IImplementation Implementation { get; }
    [DomNameAttribute("designMode")]
public string DesignMode { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("dir")]
public string Direction { get; public set; }
    [DomNameAttribute("documentURI")]
public string DocumentUri { get; }
    [DomNameAttribute("characterSet")]
public string CharacterSet { get; }
    [DomNameAttribute("compatMode")]
public string CompatMode { get; }
    [DomNameAttribute("URL")]
public string Url { get; }
    [DomNameAttribute("contentType")]
public string ContentType { get; }
    [DomNameAttribute("doctype")]
public IDocumentType Doctype { get; }
    [DomNameAttribute("documentElement")]
public IElement DocumentElement { get; }
    [NullableAttribute("2")]
[DomNameAttribute("lastModified")]
public string LastModified { get; }
    [DomLenientThisAttribute]
[DomNameAttribute("readyState")]
public DocumentReadyState ReadyState { get; }
    [DomNameAttribute("location")]
[DomPutForwardsAttribute("href")]
public ILocation Location { get; }
    [DomNameAttribute("forms")]
public IHtmlCollection`1<IHtmlFormElement> Forms { get; }
    [DomNameAttribute("images")]
public IHtmlCollection`1<IHtmlImageElement> Images { get; }
    [DomNameAttribute("scripts")]
public IHtmlCollection`1<IHtmlScriptElement> Scripts { get; }
    [DomNameAttribute("embeds")]
[DomNameAttribute("plugins")]
public IHtmlCollection`1<IHtmlEmbedElement> Plugins { get; }
    [DomNameAttribute("commands")]
public IHtmlCollection`1<IElement> Commands { get; }
    [DomNameAttribute("links")]
public IHtmlCollection`1<IElement> Links { get; }
    [NullableAttribute("2")]
[DomNameAttribute("title")]
public string Title { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("head")]
public IHtmlHeadElement Head { get; }
    [NullableAttribute("2")]
[DomNameAttribute("body")]
public IHtmlElement Body { get; public set; }
    [DomNameAttribute("cookie")]
public string Cookie { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("origin")]
public string Origin { get; }
    [DomNameAttribute("domain")]
public string Domain { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("referrer")]
public string Referrer { get; }
    [NullableAttribute("2")]
[DomNameAttribute("activeElement")]
public IElement ActiveElement { get; }
    [NullableAttribute("2")]
[DomNameAttribute("currentScript")]
public IHtmlScriptElement CurrentScript { get; }
    [NullableAttribute("2")]
[DomNameAttribute("defaultView")]
public IWindow DefaultView { get; }
    public IBrowsingContext Context { get; }
    [NullableAttribute("2")]
public IDocument ImportAncestor { get; }
    public TextSource Source { get; }
    public HttpStatusCode StatusCode { get; }
    public IEntityProvider Entities { get; }
    public abstract virtual IHtmlAllCollection get_All();
    public abstract virtual IHtmlCollection`1<IHtmlAnchorElement> get_Anchors();
    public abstract virtual IImplementation get_Implementation();
    public abstract virtual string get_DesignMode();
    public abstract virtual void set_DesignMode(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Direction();
    [NullableContextAttribute("2")]
public abstract virtual void set_Direction(string value);
    public abstract virtual string get_DocumentUri();
    public abstract virtual string get_CharacterSet();
    public abstract virtual string get_CompatMode();
    public abstract virtual string get_Url();
    public abstract virtual string get_ContentType();
    [DomNameAttribute("open")]
public abstract virtual IDocument Open(string type, string replace);
    [DomNameAttribute("close")]
public abstract virtual void Close();
    [DomNameAttribute("write")]
public abstract virtual void Write(string content);
    [DomNameAttribute("writeln")]
public abstract virtual void WriteLine(string content);
    [DomNameAttribute("load")]
public abstract virtual void Load(string url);
    public abstract virtual IDocumentType get_Doctype();
    public abstract virtual IElement get_DocumentElement();
    [DomNameAttribute("getElementsByName")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByName(string name);
    [DomNameAttribute("getElementsByClassName")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    [DomNameAttribute("getElementsByTagName")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    [DomNameAttribute("getElementsByTagNameNS")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByTagName(string namespaceUri, string tagName);
    [DomNameAttribute("createEvent")]
public abstract virtual Event CreateEvent(string type);
    [DomNameAttribute("createRange")]
public abstract virtual IRange CreateRange();
    [DomNameAttribute("createComment")]
public abstract virtual IComment CreateComment(string data);
    [DomNameAttribute("createDocumentFragment")]
public abstract virtual IDocumentFragment CreateDocumentFragment();
    [DomNameAttribute("createElement")]
public abstract virtual IElement CreateElement(string name);
    [DomNameAttribute("createElementNS")]
public abstract virtual IElement CreateElement(string namespaceUri, string name);
    [DomNameAttribute("createAttribute")]
public abstract virtual IAttr CreateAttribute(string name);
    [DomNameAttribute("createAttributeNS")]
public abstract virtual IAttr CreateAttribute(string namespaceUri, string name);
    [DomNameAttribute("createProcessingInstruction")]
public abstract virtual IProcessingInstruction CreateProcessingInstruction(string target, string data);
    [DomNameAttribute("createTextNode")]
public abstract virtual IText CreateTextNode(string data);
    [DomNameAttribute("createNodeIterator")]
public abstract virtual INodeIterator CreateNodeIterator(INode root, FilterSettings settings, NodeFilter filter);
    [DomNameAttribute("createTreeWalker")]
public abstract virtual ITreeWalker CreateTreeWalker(INode root, FilterSettings settings, NodeFilter filter);
    [DomNameAttribute("importNode")]
public abstract virtual INode Import(INode externalNode, bool deep);
    [DomNameAttribute("adoptNode")]
public abstract virtual INode Adopt(INode externalNode);
    [NullableContextAttribute("2")]
public abstract virtual string get_LastModified();
    public abstract virtual DocumentReadyState get_ReadyState();
    public abstract virtual ILocation get_Location();
    public abstract virtual IHtmlCollection`1<IHtmlFormElement> get_Forms();
    public abstract virtual IHtmlCollection`1<IHtmlImageElement> get_Images();
    public abstract virtual IHtmlCollection`1<IHtmlScriptElement> get_Scripts();
    public abstract virtual IHtmlCollection`1<IHtmlEmbedElement> get_Plugins();
    public abstract virtual IHtmlCollection`1<IElement> get_Commands();
    public abstract virtual IHtmlCollection`1<IElement> get_Links();
    [NullableContextAttribute("2")]
public abstract virtual string get_Title();
    [NullableContextAttribute("2")]
public abstract virtual void set_Title(string value);
    [NullableContextAttribute("2")]
public abstract virtual IHtmlHeadElement get_Head();
    [NullableContextAttribute("2")]
public abstract virtual IHtmlElement get_Body();
    [NullableContextAttribute("2")]
public abstract virtual void set_Body(IHtmlElement value);
    public abstract virtual string get_Cookie();
    public abstract virtual void set_Cookie(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Origin();
    public abstract virtual string get_Domain();
    public abstract virtual void set_Domain(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Referrer();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadyStateChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadyStateChanged(DomEventHandler value);
    [NullableContextAttribute("2")]
public abstract virtual IElement get_ActiveElement();
    [NullableContextAttribute("2")]
public abstract virtual IHtmlScriptElement get_CurrentScript();
    [NullableContextAttribute("2")]
public abstract virtual IWindow get_DefaultView();
    [DomNameAttribute("hasFocus")]
public abstract virtual bool HasFocus();
    [DomNameAttribute("execCommand")]
public abstract virtual bool ExecuteCommand(string commandId, bool showUserInterface, string value);
    [DomNameAttribute("queryCommandEnabled")]
public abstract virtual bool IsCommandEnabled(string commandId);
    [DomNameAttribute("queryCommandIndeterm")]
public abstract virtual bool IsCommandIndeterminate(string commandId);
    [DomNameAttribute("queryCommandState")]
public abstract virtual bool IsCommandExecuted(string commandId);
    [DomNameAttribute("queryCommandSupported")]
public abstract virtual bool IsCommandSupported(string commandId);
    [DomNameAttribute("queryCommandValue")]
public abstract virtual string GetCommandValue(string commandId);
    public abstract virtual IBrowsingContext get_Context();
    [NullableContextAttribute("2")]
public abstract virtual IDocument get_ImportAncestor();
    public abstract virtual bool AddImportUrl(Uri uri);
    public abstract virtual bool HasImported(Uri uri);
    public abstract virtual TextSource get_Source();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual IEntityProvider get_Entities();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Dom.IDocumentFactory {
    public abstract virtual Task`1<IDocument> CreateAsync(IBrowsingContext context, CreateDocumentOptions options, CancellationToken cancellationToken);
}
[DomNameAttribute("DocumentFragment")]
public interface AngleSharp.Dom.IDocumentFragment {
}
[NullableContextAttribute("2")]
[DomNameAttribute("DocumentStyle")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.IDocumentStyle {
    [NullableAttribute("1")]
[DomNameAttribute("styleSheets")]
public IStyleSheetList StyleSheets { get; }
    [DomNameAttribute("selectedStyleSheetSet")]
public string SelectedStyleSheetSet { get; public set; }
    [DomNameAttribute("lastStyleSheetSet")]
public string LastStyleSheetSet { get; }
    [DomNameAttribute("preferredStyleSheetSet")]
public string PreferredStyleSheetSet { get; }
    [NullableAttribute("1")]
[DomNameAttribute("styleSheetSets")]
public IStringList StyleSheetSets { get; }
    [NullableContextAttribute("1")]
public abstract virtual IStyleSheetList get_StyleSheets();
    public abstract virtual string get_SelectedStyleSheetSet();
    public abstract virtual void set_SelectedStyleSheetSet(string value);
    public abstract virtual string get_LastStyleSheetSet();
    public abstract virtual string get_PreferredStyleSheetSet();
    [NullableContextAttribute("1")]
public abstract virtual IStringList get_StyleSheetSets();
    [NullableContextAttribute("1")]
[DomNameAttribute("enableStyleSheetsForSet")]
public abstract virtual void EnableStyleSheetsForSet(string name);
}
[NullableContextAttribute("1")]
[DomNameAttribute("DocumentType")]
public interface AngleSharp.Dom.IDocumentType {
    [DomNameAttribute("name")]
public string Name { get; }
    [DomNameAttribute("publicId")]
public string PublicIdentifier { get; }
    [DomNameAttribute("systemId")]
public string SystemIdentifier { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_PublicIdentifier();
    public abstract virtual string get_SystemIdentifier();
}
[DomNameAttribute("DOMException")]
public interface AngleSharp.Dom.IDomException {
    [DomNameAttribute("code")]
public int Code { get; }
    public abstract virtual int get_Code();
}
[NullableContextAttribute("1")]
[DomNameAttribute("Element")]
public interface AngleSharp.Dom.IElement {
    [NullableAttribute("2")]
[DomNameAttribute("prefix")]
public string Prefix { get; }
    [DomNameAttribute("localName")]
public string LocalName { get; }
    [NullableAttribute("2")]
[DomNameAttribute("namespaceURI")]
public string NamespaceUri { get; }
    [NullableAttribute("2")]
public string GivenNamespaceUri { get; }
    [DomNameAttribute("attributes")]
public INamedNodeMap Attributes { get; }
    [DomNameAttribute("classList")]
public ITokenList ClassList { get; }
    [NullableAttribute("2")]
[DomNameAttribute("className")]
public string ClassName { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("id")]
public string Id { get; public set; }
    [DomNameAttribute("innerHTML")]
public string InnerHtml { get; public set; }
    [DomNameAttribute("outerHTML")]
public string OuterHtml { get; public set; }
    [DomNameAttribute("tagName")]
public string TagName { get; }
    [NullableAttribute("2")]
[DomNameAttribute("assignedSlot")]
public IElement AssignedSlot { get; }
    [NullableAttribute("2")]
[DomNameAttribute("slot")]
public string Slot { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("shadowRoot")]
public IShadowRoot ShadowRoot { get; }
    public bool IsFocused { get; }
    [NullableAttribute("2")]
public ISourceReference SourceReference { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    [NullableContextAttribute("2")]
public abstract virtual string get_NamespaceUri();
    [NullableContextAttribute("2")]
public abstract virtual string get_GivenNamespaceUri();
    public abstract virtual INamedNodeMap get_Attributes();
    public abstract virtual ITokenList get_ClassList();
    [NullableContextAttribute("2")]
public abstract virtual string get_ClassName();
    [NullableContextAttribute("2")]
public abstract virtual void set_ClassName(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Id();
    [NullableContextAttribute("2")]
public abstract virtual void set_Id(string value);
    [DomNameAttribute("insertAdjacentHTML")]
public abstract virtual void Insert(AdjacentPosition position, string html);
    [DomNameAttribute("hasAttribute")]
public abstract virtual bool HasAttribute(string name);
    [DomNameAttribute("hasAttributeNS")]
public abstract virtual bool HasAttribute(string namespaceUri, string localName);
    [DomNameAttribute("getAttribute")]
public abstract virtual string GetAttribute(string name);
    [NullableContextAttribute("2")]
[DomNameAttribute("getAttributeNS")]
public abstract virtual string GetAttribute(string namespaceUri, string localName);
    [DomNameAttribute("setAttribute")]
public abstract virtual void SetAttribute(string name, string value);
    [NullableContextAttribute("2")]
[DomNameAttribute("setAttributeNS")]
public abstract virtual void SetAttribute(string namespaceUri, string name, string value);
    [DomNameAttribute("removeAttribute")]
public abstract virtual bool RemoveAttribute(string name);
    [DomNameAttribute("removeAttributeNS")]
public abstract virtual bool RemoveAttribute(string namespaceUri, string localName);
    [DomNameAttribute("getElementsByClassName")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    [DomNameAttribute("getElementsByTagName")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    [DomNameAttribute("getElementsByTagNameNS")]
public abstract virtual IHtmlCollection`1<IElement> GetElementsByTagNameNS(string namespaceUri, string tagName);
    [DomNameAttribute("matches")]
public abstract virtual bool Matches(string selectors);
    [DomNameAttribute("closest")]
public abstract virtual IElement Closest(string selectors);
    public abstract virtual string get_InnerHtml();
    public abstract virtual void set_InnerHtml(string value);
    public abstract virtual string get_OuterHtml();
    public abstract virtual void set_OuterHtml(string value);
    public abstract virtual string get_TagName();
    [DomNameAttribute("attachShadow")]
[DomInitDictAttribute("0", "False")]
public abstract virtual IShadowRoot AttachShadow(ShadowRootMode mode);
    [NullableContextAttribute("2")]
public abstract virtual IElement get_AssignedSlot();
    [NullableContextAttribute("2")]
public abstract virtual string get_Slot();
    [NullableContextAttribute("2")]
public abstract virtual void set_Slot(string value);
    [NullableContextAttribute("2")]
public abstract virtual IShadowRoot get_ShadowRoot();
    public abstract virtual bool get_IsFocused();
    [NullableContextAttribute("2")]
public abstract virtual ISourceReference get_SourceReference();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Dom.IElementFactory`2 {
    public abstract virtual TElement Create(TDocument document, string localName, string prefix, NodeFlags flags);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Dom.IEntityProvider {
    public abstract virtual string GetSymbol(string name);
}
[NullableContextAttribute("2")]
public interface AngleSharp.Dom.IEntityProviderExtended {
    public abstract virtual string GetSymbol(StringOrMemory name);
}
[NullableContextAttribute("1")]
[DomNameAttribute("EventTarget")]
public interface AngleSharp.Dom.IEventTarget {
    [DomNameAttribute("addEventListener")]
public abstract virtual void AddEventListener(string type, DomEventHandler callback, bool capture);
    [DomNameAttribute("removeEventListener")]
public abstract virtual void RemoveEventListener(string type, DomEventHandler callback, bool capture);
    public abstract virtual void InvokeEventListener(Event ev);
    [DomNameAttribute("dispatchEvent")]
public abstract virtual bool Dispatch(Event ev);
}
[DomNameAttribute("HTMLAllCollection")]
public interface AngleSharp.Dom.IHtmlAllCollection {
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("HTMLCollection")]
public interface AngleSharp.Dom.IHtmlCollection`1 {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public T Item { get; }
    [NullableAttribute("2")]
[DomNameAttribute("namedItem")]
[DomAccessorAttribute("1")]
public T Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual T get_Item(int index);
    public abstract virtual T get_Item(string id);
}
[NullableContextAttribute("1")]
[DomNameAttribute("DOMImplementation")]
public interface AngleSharp.Dom.IImplementation {
    [DomNameAttribute("createHTMLDocument")]
public abstract virtual IDocument CreateHtmlDocument(string title);
    [DomNameAttribute("createDocumentType")]
public abstract virtual IDocumentType CreateDocumentType(string qualifiedName, string publicId, string systemId);
    [DomNameAttribute("hasFeature")]
public abstract virtual bool HasFeature(string feature, string version);
}
[NullableContextAttribute("2")]
[DomNameAttribute("LinkImport")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.ILinkImport {
    [DomNameAttribute("import")]
public IDocument Import { get; }
    public abstract virtual IDocument get_Import();
}
[NullableContextAttribute("2")]
[DomNameAttribute("LinkStyle")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.ILinkStyle {
    [DomNameAttribute("sheet")]
public IStyleSheet Sheet { get; }
    public abstract virtual IStyleSheet get_Sheet();
}
[NullableContextAttribute("1")]
[DomNameAttribute("Location")]
public interface AngleSharp.Dom.ILocation {
    [DomNameAttribute("assign")]
public abstract virtual void Assign(string url);
    [DomNameAttribute("replace")]
public abstract virtual void Replace(string url);
    [DomNameAttribute("reload")]
public abstract virtual void Reload();
}
[NullableContextAttribute("2")]
[DomNameAttribute("MutationRecord")]
public interface AngleSharp.Dom.IMutationRecord {
    [NullableAttribute("1")]
[DomNameAttribute("type")]
public string Type { get; }
    [NullableAttribute("1")]
[DomNameAttribute("target")]
public INode Target { get; }
    [DomNameAttribute("addedNodes")]
public INodeList Added { get; }
    [DomNameAttribute("removedNodes")]
public INodeList Removed { get; }
    [DomNameAttribute("previousSibling")]
public INode PreviousSibling { get; }
    [DomNameAttribute("nextSibling")]
public INode NextSibling { get; }
    [DomNameAttribute("attributeName")]
public string AttributeName { get; }
    [DomNameAttribute("attributeNamespace")]
public string AttributeNamespace { get; }
    [DomNameAttribute("oldValue")]
public string PreviousValue { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Type();
    [NullableContextAttribute("1")]
public abstract virtual INode get_Target();
    public abstract virtual INodeList get_Added();
    public abstract virtual INodeList get_Removed();
    public abstract virtual INode get_PreviousSibling();
    public abstract virtual INode get_NextSibling();
    public abstract virtual string get_AttributeName();
    public abstract virtual string get_AttributeNamespace();
    public abstract virtual string get_PreviousValue();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("NamedNodeMap")]
public interface AngleSharp.Dom.INamedNodeMap {
    [NullableAttribute("2")]
[DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public IAttr Item { get; }
    [NullableAttribute("2")]
[DomAccessorAttribute("1")]
public IAttr Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    [NullableContextAttribute("2")]
public abstract virtual IAttr get_Item(int index);
    public abstract virtual IAttr get_Item(string name);
    public abstract virtual int get_Length();
    [DomNameAttribute("getNamedItem")]
public abstract virtual IAttr GetNamedItem(string name);
    [DomNameAttribute("setNamedItem")]
public abstract virtual IAttr SetNamedItem(IAttr item);
    [DomNameAttribute("removeNamedItem")]
public abstract virtual IAttr RemoveNamedItem(string name);
    [NullableContextAttribute("2")]
[DomNameAttribute("getNamedItemNS")]
public abstract virtual IAttr GetNamedItem(string namespaceUri, string localName);
    [DomNameAttribute("setNamedItemNS")]
public abstract virtual IAttr SetNamedItemWithNamespaceUri(IAttr item);
    [DomNameAttribute("removeNamedItemNS")]
public abstract virtual IAttr RemoveNamedItem(string namespaceUri, string localName);
}
[NullableContextAttribute("1")]
[DomNameAttribute("Node")]
public interface AngleSharp.Dom.INode {
    [DomNameAttribute("baseURI")]
public string BaseUri { get; }
    [NullableAttribute("2")]
public Url BaseUrl { get; }
    [DomNameAttribute("nodeName")]
public string NodeName { get; }
    [DomNameAttribute("childNodes")]
public INodeList ChildNodes { get; }
    [NullableAttribute("2")]
[DomNameAttribute("ownerDocument")]
public IDocument Owner { get; }
    [NullableAttribute("2")]
[DomNameAttribute("parentElement")]
public IElement ParentElement { get; }
    [NullableAttribute("2")]
[DomNameAttribute("parentNode")]
public INode Parent { get; }
    [NullableAttribute("2")]
[DomNameAttribute("firstChild")]
public INode FirstChild { get; }
    [NullableAttribute("2")]
[DomNameAttribute("lastChild")]
public INode LastChild { get; }
    [NullableAttribute("2")]
[DomNameAttribute("nextSibling")]
public INode NextSibling { get; }
    [NullableAttribute("2")]
[DomNameAttribute("previousSibling")]
public INode PreviousSibling { get; }
    [DomNameAttribute("nodeType")]
public NodeType NodeType { get; }
    [DomNameAttribute("nodeValue")]
public string NodeValue { get; public set; }
    [DomNameAttribute("textContent")]
public string TextContent { get; public set; }
    [DomNameAttribute("hasChildNodes")]
[MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool HasChildNodes { get; }
    public NodeFlags Flags { get; }
    public abstract virtual string get_BaseUri();
    [NullableContextAttribute("2")]
public abstract virtual Url get_BaseUrl();
    public abstract virtual string get_NodeName();
    public abstract virtual INodeList get_ChildNodes();
    [DomNameAttribute("cloneNode")]
public abstract virtual INode Clone(bool deep);
    [DomNameAttribute("isEqualNode")]
public abstract virtual bool Equals(INode otherNode);
    [DomNameAttribute("compareDocumentPosition")]
public abstract virtual DocumentPositions CompareDocumentPosition(INode otherNode);
    [DomNameAttribute("normalize")]
public abstract virtual void Normalize();
    [NullableContextAttribute("2")]
public abstract virtual IDocument get_Owner();
    [NullableContextAttribute("2")]
public abstract virtual IElement get_ParentElement();
    [NullableContextAttribute("2")]
public abstract virtual INode get_Parent();
    [DomNameAttribute("contains")]
public abstract virtual bool Contains(INode otherNode);
    [NullableContextAttribute("2")]
public abstract virtual INode get_FirstChild();
    [NullableContextAttribute("2")]
public abstract virtual INode get_LastChild();
    [NullableContextAttribute("2")]
public abstract virtual INode get_NextSibling();
    [NullableContextAttribute("2")]
public abstract virtual INode get_PreviousSibling();
    [DomNameAttribute("isDefaultNamespace")]
public abstract virtual bool IsDefaultNamespace(string namespaceUri);
    [DomNameAttribute("lookupNamespaceURI")]
public abstract virtual string LookupNamespaceUri(string prefix);
    [NullableContextAttribute("2")]
[DomNameAttribute("lookupPrefix")]
public abstract virtual string LookupPrefix(string namespaceUri);
    public abstract virtual NodeType get_NodeType();
    public abstract virtual string get_NodeValue();
    public abstract virtual void set_NodeValue(string value);
    public abstract virtual string get_TextContent();
    public abstract virtual void set_TextContent(string value);
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public abstract virtual bool get_HasChildNodes();
    [DomNameAttribute("appendChild")]
public abstract virtual INode AppendChild(INode child);
    [DomNameAttribute("insertBefore")]
public abstract virtual INode InsertBefore(INode newElement, INode referenceElement);
    [DomNameAttribute("removeChild")]
public abstract virtual INode RemoveChild(INode child);
    [DomNameAttribute("replaceChild")]
public abstract virtual INode ReplaceChild(INode newChild, INode oldChild);
    public abstract virtual NodeFlags get_Flags();
}
[NullableContextAttribute("1")]
[DomNameAttribute("NodeIterator")]
public interface AngleSharp.Dom.INodeIterator {
    [DomNameAttribute("root")]
public INode Root { get; }
    [DomNameAttribute("referenceNode")]
public INode Reference { get; }
    [DomNameAttribute("pointerBeforeReferenceNode")]
public bool IsBeforeReference { get; }
    [DomNameAttribute("whatToShow")]
public FilterSettings Settings { get; }
    [DomNameAttribute("filter")]
public NodeFilter Filter { get; }
    public abstract virtual INode get_Root();
    public abstract virtual INode get_Reference();
    public abstract virtual bool get_IsBeforeReference();
    public abstract virtual FilterSettings get_Settings();
    public abstract virtual NodeFilter get_Filter();
    [NullableContextAttribute("2")]
[DomNameAttribute("nextNode")]
public abstract virtual INode Next();
    [NullableContextAttribute("2")]
[DomNameAttribute("previousNode")]
public abstract virtual INode Previous();
}
[DefaultMemberAttribute("Item")]
[DomNameAttribute("NodeList")]
public interface AngleSharp.Dom.INodeList {
    [NullableAttribute("1")]
[DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public INode Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    [NullableContextAttribute("1")]
public abstract virtual INode get_Item(int index);
    public abstract virtual int get_Length();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal interface AngleSharp.Dom.INodeListAccessor {
    public int Length { get; }
    public INode Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual INode get_Item(int index);
}
[NullableContextAttribute("2")]
[DomNameAttribute("NonDocumentTypeChildNode")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.INonDocumentTypeChildNode {
    [DomNameAttribute("nextElementSibling")]
public IElement NextElementSibling { get; }
    [DomNameAttribute("previousElementSibling")]
public IElement PreviousElementSibling { get; }
    public abstract virtual IElement get_NextElementSibling();
    public abstract virtual IElement get_PreviousElementSibling();
}
[NullableContextAttribute("1")]
[DomNameAttribute("NonElementParentNode")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.INonElementParentNode {
    [DomNameAttribute("getElementById")]
public abstract virtual IElement GetElementById(string elementId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.InterfaceNodeListAccessor : ValueType {
    private INodeList _nodeList;
    public int Length { get; }
    public INode Item { get; }
    public InterfaceNodeListAccessor(INodeList nodeList);
    public sealed virtual int get_Length();
    public sealed virtual INode get_Item(int index);
}
[NullableContextAttribute("1")]
[DomNameAttribute("ParentNode")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.IParentNode {
    [DomNameAttribute("children")]
public IHtmlCollection`1<IElement> Children { get; }
    [NullableAttribute("2")]
[DomNameAttribute("firstElementChild")]
public IElement FirstElementChild { get; }
    [NullableAttribute("2")]
[DomNameAttribute("lastElementChild")]
public IElement LastElementChild { get; }
    [DomNameAttribute("childElementCount")]
public int ChildElementCount { get; }
    public abstract virtual IHtmlCollection`1<IElement> get_Children();
    [NullableContextAttribute("2")]
public abstract virtual IElement get_FirstElementChild();
    [NullableContextAttribute("2")]
public abstract virtual IElement get_LastElementChild();
    public abstract virtual int get_ChildElementCount();
    [DomNameAttribute("append")]
public abstract virtual void Append(INode[] nodes);
    [DomNameAttribute("prepend")]
public abstract virtual void Prepend(INode[] nodes);
    [DomNameAttribute("querySelector")]
public abstract virtual IElement QuerySelector(string selectors);
    [DomNameAttribute("querySelectorAll")]
public abstract virtual IHtmlCollection`1<IElement> QuerySelectorAll(string selectors);
}
[DomNameAttribute("ProcessingInstruction")]
public interface AngleSharp.Dom.IProcessingInstruction {
    [NullableAttribute("1")]
[DomNameAttribute("target")]
public string Target { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Target();
}
[DomNameAttribute("PseudoElement")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.IPseudoElement {
    [NullableAttribute("1")]
public string PseudoName { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_PseudoName();
}
[NullableContextAttribute("1")]
[DomNameAttribute("Range")]
public interface AngleSharp.Dom.IRange {
    [DomNameAttribute("startContainer")]
public INode Head { get; }
    [DomNameAttribute("startOffset")]
public int Start { get; }
    [DomNameAttribute("endContainer")]
public INode Tail { get; }
    [DomNameAttribute("endOffset")]
public int End { get; }
    [DomNameAttribute("collapsed")]
public bool IsCollapsed { get; }
    [DomNameAttribute("commonAncestorContainer")]
public INode CommonAncestor { get; }
    public abstract virtual INode get_Head();
    public abstract virtual int get_Start();
    public abstract virtual INode get_Tail();
    public abstract virtual int get_End();
    public abstract virtual bool get_IsCollapsed();
    public abstract virtual INode get_CommonAncestor();
    [DomNameAttribute("setStart")]
public abstract virtual void StartWith(INode refNode, int offset);
    [DomNameAttribute("setEnd")]
public abstract virtual void EndWith(INode refNode, int offset);
    [DomNameAttribute("setStartBefore")]
public abstract virtual void StartBefore(INode refNode);
    [DomNameAttribute("setEndBefore")]
public abstract virtual void EndBefore(INode refNode);
    [DomNameAttribute("setStartAfter")]
public abstract virtual void StartAfter(INode refNode);
    [DomNameAttribute("setEndAfter")]
public abstract virtual void EndAfter(INode refNode);
    [DomNameAttribute("collapse")]
public abstract virtual void Collapse(bool toStart);
    [DomNameAttribute("selectNode")]
public abstract virtual void Select(INode refNode);
    [DomNameAttribute("selectNodeContents")]
public abstract virtual void SelectContent(INode refNode);
    [DomNameAttribute("deleteContents")]
public abstract virtual void ClearContent();
    [DomNameAttribute("extractContents")]
public abstract virtual IDocumentFragment ExtractContent();
    [DomNameAttribute("cloneContents")]
public abstract virtual IDocumentFragment CopyContent();
    [DomNameAttribute("insertNode")]
public abstract virtual void Insert(INode node);
    [DomNameAttribute("surroundContents")]
public abstract virtual void Surround(INode newParent);
    [DomNameAttribute("cloneRange")]
public abstract virtual IRange Clone();
    [DomNameAttribute("detach")]
public abstract virtual void Detach();
    [DomNameAttribute("isPointInRange")]
public abstract virtual bool Contains(INode node, int offset);
    [DomNameAttribute("compareBoundaryPoints")]
public abstract virtual RangePosition CompareBoundaryTo(RangeType how, IRange sourceRange);
    [DomNameAttribute("comparePoint")]
public abstract virtual RangePosition CompareTo(INode node, int offset);
    [DomNameAttribute("intersectsNode")]
public abstract virtual bool Intersects(INode node);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Dom.IReverseEntityProvider {
    public abstract virtual string GetName(string symbol);
}
[NullableContextAttribute("1")]
[DomNameAttribute("DOMSettableTokenList")]
public interface AngleSharp.Dom.ISettableTokenList {
    [DomNameAttribute("value")]
public string Value { get; public set; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("ShadowRoot")]
public interface AngleSharp.Dom.IShadowRoot {
    [NullableAttribute("2")]
[DomNameAttribute("activeElement")]
public IElement ActiveElement { get; }
    [DomNameAttribute("host")]
public IElement Host { get; }
    [DomNameAttribute("innerHTML")]
public string InnerHtml { get; public set; }
    public ShadowRootMode Mode { get; }
    [DomNameAttribute("styleSheets")]
public IStyleSheetList StyleSheets { get; }
    [NullableContextAttribute("2")]
public abstract virtual IElement get_ActiveElement();
    public abstract virtual IElement get_Host();
    public abstract virtual string get_InnerHtml();
    public abstract virtual void set_InnerHtml(string value);
    public abstract virtual ShadowRootMode get_Mode();
    public abstract virtual IStyleSheetList get_StyleSheets();
}
public interface AngleSharp.Dom.ISourceReference {
    public TextPosition Position { get; }
    public abstract virtual TextPosition get_Position();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("DOMStringList")]
public interface AngleSharp.Dom.IStringList {
    [DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public string Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual string get_Item(int index);
    public abstract virtual int get_Length();
    [DomNameAttribute("contains")]
public abstract virtual bool Contains(string entry);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("DOMStringMap")]
public interface AngleSharp.Dom.IStringMap {
    [NullableAttribute("2")]
[DomAccessorAttribute("3")]
public string Item { get; public set; }
    public abstract virtual string get_Item(string name);
    public abstract virtual void set_Item(string name, string value);
    [DomAccessorAttribute("4")]
public abstract virtual void Remove(string name);
}
[NullableContextAttribute("1")]
[DomNameAttribute("StyleSheet")]
public interface AngleSharp.Dom.IStyleSheet {
    [DomNameAttribute("type")]
public string Type { get; }
    [DomNameAttribute("href")]
public string Href { get; }
    [DomNameAttribute("ownerNode")]
public IElement OwnerNode { get; }
    [DomNameAttribute("title")]
public string Title { get; }
    [DomNameAttribute("media")]
[DomPutForwardsAttribute("mediaText")]
public IMediaList Media { get; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    public IBrowsingContext Context { get; }
    public TextSource Source { get; }
    public abstract virtual string get_Type();
    public abstract virtual string get_Href();
    public abstract virtual IElement get_OwnerNode();
    public abstract virtual string get_Title();
    public abstract virtual IMediaList get_Media();
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual IBrowsingContext get_Context();
    public abstract virtual TextSource get_Source();
    public abstract virtual void SetOwner(IElement element);
    public abstract virtual string LocateNamespace(string prefix);
}
[NullableContextAttribute("2")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("StyleSheetList")]
public interface AngleSharp.Dom.IStyleSheetList {
    [DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public IStyleSheet Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual IStyleSheet get_Item(int index);
    public abstract virtual int get_Length();
}
[DomNameAttribute("Text")]
public interface AngleSharp.Dom.IText {
    [NullableAttribute("1")]
[DomNameAttribute("wholeText")]
public string Text { get; }
    [NullableAttribute("2")]
[DomNameAttribute("assignedSlot")]
public IElement AssignedSlot { get; }
    [NullableContextAttribute("1")]
[DomNameAttribute("splitText")]
public abstract virtual IText Split(int offset);
    [NullableContextAttribute("1")]
public abstract virtual string get_Text();
    [NullableContextAttribute("2")]
public abstract virtual IElement get_AssignedSlot();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("DOMTokenList")]
public interface AngleSharp.Dom.ITokenList {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public string Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual string get_Item(int index);
    [DomNameAttribute("contains")]
public abstract virtual bool Contains(string token);
    [DomNameAttribute("add")]
public abstract virtual void Add(String[] tokens);
    [DomNameAttribute("remove")]
public abstract virtual void Remove(String[] tokens);
    [DomNameAttribute("toggle")]
public abstract virtual bool Toggle(string token, bool force);
}
[NullableContextAttribute("1")]
[DomNameAttribute("TreeWalker")]
public interface AngleSharp.Dom.ITreeWalker {
    [DomNameAttribute("root")]
public INode Root { get; }
    [DomNameAttribute("currentNode")]
public INode Current { get; public set; }
    [DomNameAttribute("whatToShow")]
public FilterSettings Settings { get; }
    [DomNameAttribute("filter")]
public NodeFilter Filter { get; }
    public abstract virtual INode get_Root();
    public abstract virtual INode get_Current();
    public abstract virtual void set_Current(INode value);
    public abstract virtual FilterSettings get_Settings();
    public abstract virtual NodeFilter get_Filter();
    [NullableContextAttribute("2")]
[DomNameAttribute("nextNode")]
public abstract virtual INode ToNext();
    [NullableContextAttribute("2")]
[DomNameAttribute("previousNode")]
public abstract virtual INode ToPrevious();
    [NullableContextAttribute("2")]
[DomNameAttribute("parentNode")]
public abstract virtual INode ToParent();
    [NullableContextAttribute("2")]
[DomNameAttribute("firstChild")]
public abstract virtual INode ToFirst();
    [NullableContextAttribute("2")]
[DomNameAttribute("lastChild")]
public abstract virtual INode ToLast();
    [NullableContextAttribute("2")]
[DomNameAttribute("previousSibling")]
public abstract virtual INode ToPreviousSibling();
    [NullableContextAttribute("2")]
[DomNameAttribute("nextSibling")]
public abstract virtual INode ToNextSibling();
}
[NullableContextAttribute("1")]
[DomNameAttribute("URLUtils")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.IUrlUtilities {
    [DomNameAttribute("href")]
public string Href { get; public set; }
    [DomNameAttribute("protocol")]
public string Protocol { get; public set; }
    [DomNameAttribute("host")]
public string Host { get; public set; }
    [DomNameAttribute("hostname")]
public string HostName { get; public set; }
    [DomNameAttribute("port")]
public string Port { get; public set; }
    [DomNameAttribute("pathname")]
public string PathName { get; public set; }
    [DomNameAttribute("search")]
public string Search { get; public set; }
    [DomNameAttribute("hash")]
public string Hash { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("username")]
public string UserName { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("password")]
public string Password { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("origin")]
public string Origin { get; }
    public abstract virtual string get_Href();
    public abstract virtual void set_Href(string value);
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual string get_Host();
    public abstract virtual void set_Host(string value);
    public abstract virtual string get_HostName();
    public abstract virtual void set_HostName(string value);
    public abstract virtual string get_Port();
    public abstract virtual void set_Port(string value);
    public abstract virtual string get_PathName();
    public abstract virtual void set_PathName(string value);
    public abstract virtual string get_Search();
    public abstract virtual void set_Search(string value);
    public abstract virtual string get_Hash();
    public abstract virtual void set_Hash(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_UserName();
    [NullableContextAttribute("2")]
public abstract virtual void set_UserName(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Password();
    [NullableContextAttribute("2")]
public abstract virtual void set_Password(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Origin();
}
[NullableContextAttribute("2")]
[DomNameAttribute("Window")]
public interface AngleSharp.Dom.IWindow {
    [NullableAttribute("1")]
[DomNameAttribute("document")]
public IDocument Document { get; }
    [NullableAttribute("1")]
[DomNameAttribute("location")]
[DomPutForwardsAttribute("href")]
public ILocation Location { get; }
    [DomNameAttribute("closed")]
public bool IsClosed { get; }
    [DomNameAttribute("status")]
public string Status { get; public set; }
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("outerHeight")]
public int OuterHeight { get; }
    [DomNameAttribute("outerWidth")]
public int OuterWidth { get; }
    [DomNameAttribute("screenX")]
public int ScreenX { get; }
    [DomNameAttribute("screenY")]
public int ScreenY { get; }
    [DomNameAttribute("window")]
[DomNameAttribute("frames")]
[DomNameAttribute("self")]
public IWindow Proxy { get; }
    [DomNameAttribute("navigator")]
public INavigator Navigator { get; }
    [DomNameAttribute("history")]
public IHistory History { get; }
    [NullableContextAttribute("1")]
public abstract virtual IDocument get_Document();
    [NullableContextAttribute("1")]
public abstract virtual ILocation get_Location();
    public abstract virtual bool get_IsClosed();
    public abstract virtual string get_Status();
    public abstract virtual void set_Status(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_OuterHeight();
    public abstract virtual int get_OuterWidth();
    public abstract virtual int get_ScreenX();
    public abstract virtual int get_ScreenY();
    public abstract virtual IWindow get_Proxy();
    public abstract virtual INavigator get_Navigator();
    [DomNameAttribute("close")]
public abstract virtual void Close();
    public abstract virtual IWindow Open(string url, string name, string features, string replace);
    [DomNameAttribute("stop")]
public abstract virtual void Stop();
    [DomNameAttribute("focus")]
public abstract virtual void Focus();
    [DomNameAttribute("blur")]
public abstract virtual void Blur();
    [NullableContextAttribute("1")]
[DomNameAttribute("alert")]
public abstract virtual void Alert(string message);
    [NullableContextAttribute("1")]
[DomNameAttribute("confirm")]
public abstract virtual bool Confirm(string message);
    [DomNameAttribute("print")]
public abstract virtual void Print();
    public abstract virtual IHistory get_History();
}
[NullableContextAttribute("1")]
[DomNameAttribute("WindowTimers")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Dom.IWindowTimers {
    [DomNameAttribute("setTimeout")]
public abstract virtual int SetTimeout(Action`1<IWindow> handler, int timeout);
    [DomNameAttribute("clearTimeout")]
public abstract virtual void ClearTimeout(int handle);
    [DomNameAttribute("setInterval")]
public abstract virtual int SetInterval(Action`1<IWindow> handler, int timeout);
    [DomNameAttribute("clearInterval")]
public abstract virtual void ClearInterval(int handle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.Location : object {
    private Url _url;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ChangedEventArgs> Changed;
    public Url Original { get; }
    [NullableAttribute("2")]
public string Origin { get; }
    public bool IsRelative { get; }
    [NullableAttribute("2")]
public string UserName { get; public set; }
    [NullableAttribute("2")]
public string Password { get; public set; }
    public string Hash { get; public set; }
    public string Host { get; public set; }
    public string HostName { get; public set; }
    public string Href { get; public set; }
    public string PathName { get; public set; }
    public string Port { get; public set; }
    public string Protocol { get; public set; }
    public string Search { get; public set; }
    internal Location(string url);
    internal Location(Url url);
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler`1<ChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler`1<ChangedEventArgs> value);
    public Url get_Original();
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    public bool get_IsRelative();
    [NullableContextAttribute("2")]
public sealed virtual string get_UserName();
    [NullableContextAttribute("2")]
public sealed virtual void set_UserName(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Password();
    [NullableContextAttribute("2")]
public sealed virtual void set_Password(string value);
    public sealed virtual string get_Hash();
    public sealed virtual void set_Hash(string value);
    public sealed virtual string get_Host();
    public sealed virtual void set_Host(string value);
    public sealed virtual string get_HostName();
    public sealed virtual void set_HostName(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_PathName();
    public sealed virtual void set_PathName(string value);
    public sealed virtual string get_Port();
    public sealed virtual void set_Port(string value);
    public sealed virtual string get_Protocol();
    public sealed virtual void set_Protocol(string value);
    public sealed virtual string get_Search();
    public sealed virtual void set_Search(string value);
    public sealed virtual void Assign(string url);
    public sealed virtual void Replace(string url);
    public sealed virtual void Reload();
    public virtual string ToString();
    private void RaiseHashChanged(string oldAddress);
    private void RaiseLocationChanged(string oldAddress);
    private static string NonEmptyPrefix(string check, string prefix);
    private static string NonEmptyPostfix(string check, string postfix);
}
public class AngleSharp.Dom.MutationCallback : MulticastDelegate {
    public MutationCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(IMutationRecord[] mutations, MutationObserver observer);
    public virtual IAsyncResult BeginInvoke(IMutationRecord[] mutations, MutationObserver observer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.MutationHost : object {
    private List`1<MutationObserver> _observers;
    private IEventLoop _loop;
    private bool _queued;
    public IEnumerable`1<MutationObserver> Observers { get; }
    public MutationHost(IEventLoop loop);
    public IEnumerable`1<MutationObserver> get_Observers();
    public void Register(MutationObserver observer);
    public void Unregister(MutationObserver observer);
    public void ScheduleCallback();
    private void DispatchCallback();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("MutationObserver")]
public class AngleSharp.Dom.MutationObserver : object {
    private Queue`1<IMutationRecord> _records;
    private MutationCallback _callback;
    private List`1<MutationObserving> _observing;
    [NullableAttribute("2")]
private MutationObserving Item { get; }
    [DomConstructorAttribute]
public MutationObserver(MutationCallback callback);
    private MutationObserving get_Item(INode node);
    internal void Enqueue(MutationRecord record);
    internal void Trigger();
    internal MutationOptions ResolveOptions(INode node);
    internal void AddTransient(INode ancestor, INode node);
    internal void ClearTransients();
    [DomNameAttribute("disconnect")]
public void Disconnect();
    [DomNameAttribute("observe")]
[DomInitDictAttribute("1", "False")]
public void Connect(INode target, bool childList, bool subtree, Nullable`1<bool> attributes, Nullable`1<bool> characterData, Nullable`1<bool> attributeOldValue, Nullable`1<bool> characterDataOldValue, IEnumerable`1<string> attributeFilter);
    [IteratorStateMachineAttribute("AngleSharp.Dom.MutationObserver/<Flush>d__13")]
[DomNameAttribute("takeRecords")]
public IEnumerable`1<IMutationRecord> Flush();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.MutationRecord : object {
    [NullableAttribute("1")]
private static string CharacterDataType;
    [NullableAttribute("1")]
private static string AttributesType;
    [NullableAttribute("1")]
private static string ChildListType;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private INode <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private INodeList <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private INodeList <Removed>k__BackingField;
    [CompilerGeneratedAttribute]
private INode <PreviousSibling>k__BackingField;
    [CompilerGeneratedAttribute]
private INode <NextSibling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousValue>k__BackingField;
    public bool IsAttribute { get; }
    public bool IsCharacterData { get; }
    public bool IsChildList { get; }
    [NullableAttribute("1")]
public string Type { get; private set; }
    [NullableAttribute("1")]
public INode Target { get; private set; }
    public INodeList Added { get; private set; }
    public INodeList Removed { get; private set; }
    public INode PreviousSibling { get; private set; }
    public INode NextSibling { get; private set; }
    public string AttributeName { get; private set; }
    public string AttributeNamespace { get; private set; }
    public string PreviousValue { get; private set; }
    private static MutationRecord();
    [NullableContextAttribute("1")]
public static MutationRecord CharacterData(INode target, string previousValue);
    public static MutationRecord ChildList(INode target, INodeList addedNodes, INodeList removedNodes, INode previousSibling, INode nextSibling);
    public static MutationRecord Attributes(INode target, string attributeName, string attributeNamespace, string previousValue);
    [NullableContextAttribute("1")]
public MutationRecord Copy(bool clearPreviousValue);
    public bool get_IsAttribute();
    public bool get_IsCharacterData();
    public bool get_IsChildList();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Type();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Type(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual INode get_Target();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Target(INode value);
    [CompilerGeneratedAttribute]
public sealed virtual INodeList get_Added();
    [CompilerGeneratedAttribute]
private void set_Added(INodeList value);
    [CompilerGeneratedAttribute]
public sealed virtual INodeList get_Removed();
    [CompilerGeneratedAttribute]
private void set_Removed(INodeList value);
    [CompilerGeneratedAttribute]
public sealed virtual INode get_PreviousSibling();
    [CompilerGeneratedAttribute]
private void set_PreviousSibling(INode value);
    [CompilerGeneratedAttribute]
public sealed virtual INode get_NextSibling();
    [CompilerGeneratedAttribute]
private void set_NextSibling(INode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [CompilerGeneratedAttribute]
private void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeNamespace();
    [CompilerGeneratedAttribute]
private void set_AttributeNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PreviousValue();
    [CompilerGeneratedAttribute]
private void set_PreviousValue(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.NamedNodeMap : object {
    private List`1<Attr> _items;
    private WeakReference`1<Element> _owner;
    [NullableAttribute("2")]
public IAttr Item { get; }
    [NullableAttribute("2")]
public IAttr Item { get; }
    public int Length { get; }
    [NullableAttribute("2")]
public Element Owner { get; }
    [NullableAttribute("2")]
private IConstructableAttr AngleSharp.Html.Construction.IConstructableNamedNodeMap.Item { get; }
    public NamedNodeMap(Element owner);
    public sealed virtual IAttr get_Item(string name);
    [NullableContextAttribute("2")]
public sealed virtual IAttr get_Item(int index);
    public sealed virtual int get_Length();
    [NullableContextAttribute("2")]
public Element get_Owner();
    internal void FastAddItem(Attr attr);
    [NullableContextAttribute("2")]
internal void RaiseChangedEvent(Attr attr, string newValue, string oldValue);
    internal IAttr RemoveNamedItemOrDefault(string name, bool suppressMutationObservers);
    internal IAttr RemoveNamedItemOrDefault(string name);
    [NullableContextAttribute("2")]
internal IAttr RemoveNamedItemOrDefault(string namespaceUri, string localName, bool suppressMutationObservers);
    [NullableContextAttribute("2")]
internal IAttr RemoveNamedItemOrDefault(string namespaceUri, string localName);
    public sealed virtual IAttr GetNamedItem(string name);
    [NullableContextAttribute("2")]
public IAttr GetNamedItem(StringOrMemory name);
    [NullableContextAttribute("2")]
public sealed virtual IAttr GetNamedItem(string namespaceUri, string localName);
    public sealed virtual IAttr SetNamedItem(IAttr item);
    public IAttr SetNamedItemWithNamespaceUri(IAttr item, bool suppressMutationObservers);
    public sealed virtual IAttr SetNamedItemWithNamespaceUri(IAttr item);
    public sealed virtual IAttr RemoveNamedItem(string name);
    public sealed virtual IAttr RemoveNamedItem(string namespaceUri, string localName);
    public sealed virtual IEnumerator`1<IAttr> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private Attr Prepare(IAttr item);
    [NullableContextAttribute("2")]
private sealed virtual override IConstructableAttr AngleSharp.Html.Construction.IConstructableNamedNodeMap.get_Item(StringOrMemory name);
    [NullableContextAttribute("2")]
private sealed virtual override bool AngleSharp.Html.Construction.IConstructableNamedNodeMap.SameAs(IConstructableNamedNodeMap attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Dom.NamespaceNames : object {
    public static string HtmlUri;
    public static string XmlNsUri;
    public static string XLinkUri;
    public static string XmlUri;
    public static string SvgUri;
    public static string MathMlUri;
    public static string XmlNsPrefix;
    public static string XLinkPrefix;
    public static string XmlPrefix;
    private static NamespaceNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Dom.Node : EventTarget {
    private NodeType _type;
    private string _name;
    private NodeFlags _flags;
    [NullableAttribute("2")]
private Url _baseUri;
    [NullableAttribute("2")]
private Node _parent;
    private NodeList _children;
    [NullableAttribute("2")]
private Document _owner;
    public bool HasChildNodes { get; }
    public string BaseUri { get; }
    [NullableAttribute("2")]
public Url BaseUrl { get; public set; }
    public NodeType NodeType { get; }
    public NodeFlags Flags { get; }
    public string NodeValue { get; public set; }
    public string TextContent { get; public set; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.PreviousSibling { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.NextSibling { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.FirstChild { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.LastChild { get; }
    private IDocument AngleSharp.Dom.INode.Owner { get; }
    [NullableAttribute("2")]
private INode AngleSharp.Dom.INode.Parent { get; }
    [NullableAttribute("2")]
public IElement ParentElement { get; }
    private INodeList AngleSharp.Dom.INode.ChildNodes { get; }
    public string NodeName { get; }
    [NullableAttribute("2")]
internal Node PreviousSibling { get; }
    [NullableAttribute("2")]
internal Node NextSibling { get; }
    [NullableAttribute("2")]
internal Node FirstChild { get; }
    [NullableAttribute("2")]
internal Node LastChild { get; }
    internal NodeList ChildNodes { get; internal set; }
    [NullableAttribute("2")]
internal Node Parent { get; internal set; }
    internal Document Owner { get; internal set; }
    private StringOrMemory AngleSharp.Html.Construction.IConstructableNode.NodeName { get; }
    private NodeFlags AngleSharp.Html.Construction.IConstructableNode.Flags { get; }
    [NullableAttribute("2")]
private IConstructableNode AngleSharp.Html.Construction.IConstructableNode.Parent { get; private set; }
    private IConstructableNodeList AngleSharp.Html.Construction.IConstructableNode.ChildNodes { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<char> WhiteSpace { get; }
    public Node(Document owner, string name, NodeType type, NodeFlags flags);
    public sealed virtual bool get_HasChildNodes();
    public sealed virtual string get_BaseUri();
    [NullableContextAttribute("2")]
public sealed virtual Url get_BaseUrl();
    [NullableContextAttribute("2")]
public void set_BaseUrl(Url value);
    public sealed virtual NodeType get_NodeType();
    public sealed virtual NodeFlags get_Flags();
    public virtual string get_NodeValue();
    public virtual void set_NodeValue(string value);
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_PreviousSibling();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_NextSibling();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_FirstChild();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_LastChild();
    private sealed virtual override IDocument AngleSharp.Dom.INode.get_Owner();
    [NullableContextAttribute("2")]
private sealed virtual override INode AngleSharp.Dom.INode.get_Parent();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_ParentElement();
    private sealed virtual override INodeList AngleSharp.Dom.INode.get_ChildNodes();
    public sealed virtual string get_NodeName();
    [NullableContextAttribute("2")]
internal Node get_PreviousSibling();
    [NullableContextAttribute("2")]
internal Node get_NextSibling();
    [NullableContextAttribute("2")]
internal Node get_FirstChild();
    [NullableContextAttribute("2")]
internal Node get_LastChild();
    internal NodeList get_ChildNodes();
    internal void set_ChildNodes(NodeList value);
    [NullableContextAttribute("2")]
internal Node get_Parent();
    [NullableContextAttribute("2")]
internal void set_Parent(Node value);
    internal Document get_Owner();
    internal void set_Owner(Document value);
    [NullableContextAttribute("2")]
internal void ReplaceAll(Node node, bool suppressObservers);
    internal INode InsertBefore(Node newElement, Node referenceElement, bool suppressObservers);
    internal void RemoveChild(Node node, bool suppressObservers);
    internal Node ReplaceChild(Node node, Node child, bool suppressObservers);
    protected virtual void ReplacedAll();
    public abstract virtual Node Clone(Document newOwner, bool deep);
    public void AppendText(string s);
    public void InsertText(int index, string s);
    public void InsertNode(int index, Node node);
    public void AddNode(Node node);
    public void RemoveNode(int index, Node node);
    public sealed virtual void ToHtml(TextWriter writer, IMarkupFormatter formatter);
    public sealed virtual INode AppendChild(INode child);
    public INode InsertChild(int index, INode child);
    public sealed virtual INode InsertBefore(INode newElement, INode referenceElement);
    public sealed virtual INode ReplaceChild(INode newChild, INode oldChild);
    public sealed virtual INode RemoveChild(INode child);
    public sealed virtual INode Clone(bool deep);
    public sealed virtual DocumentPositions CompareDocumentPosition(INode otherNode);
    public sealed virtual bool Contains(INode otherNode);
    public sealed virtual void Normalize();
    [NullableContextAttribute("2")]
public sealed virtual string LookupNamespaceUri(string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string LookupPrefix(string namespaceUri);
    [NullableContextAttribute("2")]
public sealed virtual bool IsDefaultNamespace(string namespaceUri);
    [NullableContextAttribute("2")]
public virtual bool Equals(INode otherNode);
    private static bool IsChangeForbidden(Node node, IDocument parent, Node child);
    protected static void GetPrefixAndLocalName(string qualifiedName, String& namespaceUri, String& prefix, String& localName);
    [NullableContextAttribute("2")]
protected static bool IsNamespaceError(string prefix, string namespaceUri, string qualifiedName);
    protected virtual string LocateNamespace(string prefix);
    protected virtual string LocatePrefix(string namespaceUri);
    protected virtual void NodeIsAdopted(Document oldDocument);
    protected virtual void NodeIsInserted(Node newNode);
    protected virtual void NodeIsRemoved(Node removedNode, Node oldPreviousSibling);
    protected virtual void OnParentChanged();
    protected void CloneNode(Node target, Document owner, bool deep);
    private sealed virtual override StringOrMemory AngleSharp.Html.Construction.IConstructableNode.get_NodeName();
    private sealed virtual override NodeFlags AngleSharp.Html.Construction.IConstructableNode.get_Flags();
    [NullableContextAttribute("2")]
private sealed virtual override IConstructableNode AngleSharp.Html.Construction.IConstructableNode.get_Parent();
    [NullableContextAttribute("2")]
private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.set_Parent(IConstructableNode value);
    private sealed virtual override IConstructableNodeList AngleSharp.Html.Construction.IConstructableNode.get_ChildNodes();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.RemoveFromParent();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.RemoveChild(IConstructableNode childNode);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.RemoveNode(int idx, IConstructableNode childNode);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.InsertNode(int idx, IConstructableNode childNode);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.AddNode(IConstructableNode node);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<char> get_WhiteSpace();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.AppendText(StringOrMemory text, bool emitWhiteSpaceOnly);
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNode.InsertText(int idx, StringOrMemory text, bool emitWhiteSpaceOnly);
}
internal class AngleSharp.Dom.NodeEnumerable : object {
    private INode _startingNode;
    public NodeEnumerable(INode startingNode);
    public sealed virtual IEnumerator`1<INode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.NodeExtensions : object {
    [ExtensionAttribute]
public static INode GetRoot(INode node);
    [ExtensionAttribute]
public static bool IsEndPoint(INode node);
    [ExtensionAttribute]
public static bool IsEndPoint(NodeType type);
    [ExtensionAttribute]
public static bool IsInsertable(INode node);
    [ExtensionAttribute]
public static Url HyperReference(INode node, string url);
    [ExtensionAttribute]
public static bool IsDescendantOf(INode node, INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<INode> GetDescendants(INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<INode> GetDescendantsAndSelf(INode parent);
    [IteratorStateMachineAttribute("AngleSharp.Dom.NodeExtensions/<GetDescendantsAndSelf>d__8`1")]
[ExtensionAttribute]
internal static IEnumerable`1<INode> GetDescendantsAndSelf(INode parent, Stack`1<INode> stack, Func`3<INode, TState, bool> filter, TState state);
    [ExtensionAttribute]
public static bool IsInclusiveDescendantOf(INode node, INode parent);
    [ExtensionAttribute]
public static bool IsAncestorOf(INode parent, INode node);
    [IteratorStateMachineAttribute("AngleSharp.Dom.NodeExtensions/<GetAncestors>d__11")]
[ExtensionAttribute]
public static IEnumerable`1<INode> GetAncestors(INode node);
    [IteratorStateMachineAttribute("AngleSharp.Dom.NodeExtensions/<GetInclusiveAncestors>d__12")]
[ExtensionAttribute]
public static IEnumerable`1<INode> GetInclusiveAncestors(INode node);
    [ExtensionAttribute]
public static bool IsInclusiveAncestorOf(INode parent, INode node);
    [ExtensionAttribute]
public static T GetAncestor(INode node);
    [ExtensionAttribute]
public static bool HasDataListAncestor(INode child);
    [ExtensionAttribute]
public static bool IsSiblingOf(INode node, INode element);
    [ExtensionAttribute]
public static int Index(INode node);
    [ExtensionAttribute]
public static int IndexOf(INode parent, INode node);
    [ExtensionAttribute]
public static bool IsPreceding(INode before, INode after);
    [ExtensionAttribute]
public static bool IsFollowing(INode after, INode before);
    [ExtensionAttribute]
public static INode GetAssociatedHost(INode node);
    [ExtensionAttribute]
public static bool IsHostIncludingInclusiveAncestor(INode parent, INode node);
    [ExtensionAttribute]
public static void EnsurePreInsertionValidity(INode parent, INode node, INode child);
    [ExtensionAttribute]
public static INode PreInsert(INode parent, INode node, INode child);
    [ExtensionAttribute]
public static INode PreRemove(INode parent, INode child);
    [ExtensionAttribute]
public static bool HasTextNodes(INode node);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsFollowedByDoctype(INode child);
    [ExtensionAttribute]
public static bool IsPrecededByElement(INode child);
    [ExtensionAttribute]
public static int GetElementCount(INode parent);
    [ExtensionAttribute]
public static TNode FindChild(INode parent);
    [ExtensionAttribute]
public static TNode FindDescendant(INode parent, int maxDepth);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IElement GetAssignedSlot(IShadowRoot root, string name);
    [ExtensionAttribute]
public static string Text(INode node);
    [ExtensionAttribute]
public static T Text(T nodes, string text);
    [ExtensionAttribute]
public static int Index(IEnumerable`1<INode> nodes, INode item);
    private static bool IsCurrentlySame(Queue`1<INode> after, Queue`1<INode> before);
}
public class AngleSharp.Dom.NodeFilter : MulticastDelegate {
    public NodeFilter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual FilterResult Invoke(INode node);
    public virtual IAsyncResult BeginInvoke(INode node, AsyncCallback callback, object object);
    public virtual FilterResult EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum AngleSharp.Dom.NodeFlags : Enum {
    public UInt32 value__;
    public static NodeFlags None;
    public static NodeFlags SelfClosing;
    public static NodeFlags Special;
    public static NodeFlags LiteralText;
    public static NodeFlags LineTolerance;
    public static NodeFlags ImplicitlyClosed;
    public static NodeFlags ImpliedEnd;
    public static NodeFlags Scoped;
    public static NodeFlags HtmlMember;
    public static NodeFlags HtmlTip;
    public static NodeFlags HtmlFormatting;
    public static NodeFlags HtmlListScoped;
    public static NodeFlags HtmlSelectScoped;
    public static NodeFlags HtmlTableSectionScoped;
    public static NodeFlags HtmlTableScoped;
    public static NodeFlags MathMember;
    public static NodeFlags MathTip;
    public static NodeFlags SvgMember;
    public static NodeFlags SvgTip;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.NodeIterator : object {
    private INode _root;
    private FilterSettings _settings;
    private NodeFilter _filter;
    private IEnumerable`1<INode> _iterator;
    private INode _reference;
    private bool _beforeNode;
    public INode Root { get; }
    public FilterSettings Settings { get; }
    public NodeFilter Filter { get; }
    public INode Reference { get; }
    public bool IsBeforeReference { get; }
    public NodeIterator(INode root, FilterSettings settings, NodeFilter filter);
    public sealed virtual INode get_Root();
    public sealed virtual FilterSettings get_Settings();
    public sealed virtual NodeFilter get_Filter();
    public sealed virtual INode get_Reference();
    public sealed virtual bool get_IsBeforeReference();
    [NullableContextAttribute("2")]
public sealed virtual INode Next();
    [NullableContextAttribute("2")]
public sealed virtual INode Previous();
    [IteratorStateMachineAttribute("AngleSharp.Dom.NodeIterator/<GetNodes>d__19")]
private static IEnumerable`1<INode> GetNodes(INode root);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.NodeList : object {
    internal List`1<Node> _entries;
    internal static NodeList Empty;
    public Node Item { get; public set; }
    private INode AngleSharp.Dom.INodeList.Item { get; }
    public int Length { get; }
    private IConstructableNode AngleSharp.Html.Construction.IConstructableNodeList.Item { get; }
    private static NodeList();
    public Node get_Item(int index);
    public void set_Item(int index, Node value);
    private sealed virtual override INode AngleSharp.Dom.INodeList.get_Item(int index);
    public sealed virtual int get_Length();
    internal void Add(Node node);
    internal void AddRange(NodeList nodeList);
    internal void Insert(int index, Node node);
    internal void Remove(Node node);
    internal void RemoveAt(int index);
    internal bool Contains(Node node);
    public sealed virtual void ToHtml(TextWriter writer, IMarkupFormatter formatter);
    public Enumerator<Node> GetEnumerator();
    private sealed virtual override IEnumerator`1<INode> System.Collections.Generic.IEnumerable<AngleSharp.Dom.INode>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<IConstructableNode> System.Collections.Generic.IEnumerable<AngleSharp.Html.Construction.IConstructableNode>.GetEnumerator();
    private sealed virtual override void AngleSharp.Html.Construction.IConstructableNodeList.Clear();
    private sealed virtual override IConstructableNode AngleSharp.Html.Construction.IConstructableNodeList.get_Item(int index);
}
[DomNameAttribute("Document")]
public enum AngleSharp.Dom.NodeType : Enum {
    public byte value__;
    [DomNameAttribute("ELEMENT_NODE")]
public static NodeType Element;
    [DomNameAttribute("ATTRIBUTE_NODE")]
[DomHistoricalAttribute]
public static NodeType Attribute;
    [DomNameAttribute("TEXT_NODE")]
public static NodeType Text;
    [DomNameAttribute("CDATA_SECTION_NODE")]
[DomHistoricalAttribute]
public static NodeType CharacterData;
    [DomNameAttribute("ENTITY_REFERENCE_NODE")]
[DomHistoricalAttribute]
public static NodeType EntityReference;
    [DomNameAttribute("ENTITY_NODE")]
[DomHistoricalAttribute]
public static NodeType Entity;
    [DomNameAttribute("PROCESSING_INSTRUCTION_NODE")]
[DomHistoricalAttribute]
public static NodeType ProcessingInstruction;
    [DomNameAttribute("COMMENT_NODE")]
public static NodeType Comment;
    [DomNameAttribute("DOCUMENT_NODE")]
public static NodeType Document;
    [DomNameAttribute("DOCUMENT_TYPE_NODE")]
public static NodeType DocumentType;
    [DomNameAttribute("DOCUMENT_FRAGMENT_NODE")]
public static NodeType DocumentFragment;
    [DomNameAttribute("NOTATION_NODE")]
[DomHistoricalAttribute]
public static NodeType Notation;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("Notation")]
public class AngleSharp.Dom.Notation : Node {
    [CompilerGeneratedAttribute]
private string <PublicId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemId>k__BackingField;
    [DomNameAttribute("publicId")]
public string PublicId { get; public set; }
    [DomNameAttribute("systemId")]
public string SystemId { get; public set; }
    [NullableContextAttribute("1")]
public Notation(Document owner, string name);
    [CompilerGeneratedAttribute]
public string get_PublicId();
    [CompilerGeneratedAttribute]
public void set_PublicId(string value);
    [CompilerGeneratedAttribute]
public string get_SystemId();
    [CompilerGeneratedAttribute]
public void set_SystemId(string value);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document newOwner, bool deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.OptionsCollection : object {
    private IElement _parent;
    private IEnumerable`1<IHtmlOptionElement> _options;
    public IHtmlOptionElement Item { get; }
    [NullableAttribute("2")]
public IHtmlOptionElement Item { get; }
    public int SelectedIndex { get; public set; }
    public int Length { get; }
    public OptionsCollection(IElement parent);
    public sealed virtual IHtmlOptionElement get_Item(int index);
    public sealed virtual IHtmlOptionElement get_Item(string name);
    public sealed virtual int get_SelectedIndex();
    public sealed virtual void set_SelectedIndex(int value);
    public sealed virtual int get_Length();
    public sealed virtual IHtmlOptionElement GetOptionAt(int index);
    public sealed virtual void SetOptionAt(int index, IHtmlOptionElement value);
    public sealed virtual void Add(IHtmlOptionElement element, IHtmlElement before);
    public sealed virtual void Add(IHtmlOptionsGroupElement element, IHtmlElement before);
    public sealed virtual void Remove(int index);
    [IteratorStateMachineAttribute("AngleSharp.Dom.OptionsCollection/<GetOptions>d__17")]
private IEnumerable`1<IHtmlOptionElement> GetOptions();
    public sealed virtual IEnumerator`1<IHtmlOptionElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.ParentNodeExtensions : object {
    [ExtensionAttribute]
internal static INode MutationMacro(INode parent, INode[] nodes);
    [ExtensionAttribute]
public static void PrependNodes(INode parent, INode[] nodes);
    [ExtensionAttribute]
public static void AppendNodes(INode parent, INode[] nodes);
    [ExtensionAttribute]
public static void InsertBefore(INode child, INode[] nodes);
    [ExtensionAttribute]
public static void InsertAfter(INode child, INode[] nodes);
    [ExtensionAttribute]
public static void ReplaceWith(INode child, INode[] nodes);
    [ExtensionAttribute]
public static void RemoveFromParent(INode child);
    [ExtensionAttribute]
public static TElement AppendElement(INode parent, TElement element);
    [ExtensionAttribute]
public static TElement InsertElement(INode parent, TElement newElement, INode referenceElement);
    [ExtensionAttribute]
public static TElement RemoveElement(INode parent, TElement element);
    [ExtensionAttribute]
public static TElement QuerySelector(IParentNode parent, string selectors);
    [ExtensionAttribute]
public static IEnumerable`1<TElement> QuerySelectorAll(IParentNode parent, string selectors);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Descendants")]
public static IEnumerable`1<TNode> Descendents(INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<TNode> Descendants(INode parent);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Descendants")]
public static IEnumerable`1<INode> Descendents(INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<INode> Descendants(INode parent);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DescendantsAndSelf")]
public static IEnumerable`1<TNode> DescendentsAndSelf(INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<TNode> DescendantsAndSelf(INode parent);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DescendantsAndSelf")]
public static IEnumerable`1<INode> DescendentsAndSelf(INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<INode> DescendantsAndSelf(INode parent);
    [ExtensionAttribute]
public static IEnumerable`1<TNode> Ancestors(INode child);
    [ExtensionAttribute]
public static IEnumerable`1<INode> Ancestors(INode child);
}
internal class AngleSharp.Dom.ProcessingInstruction : CharacterData {
    [NullableAttribute("1")]
public string Target { get; }
    [NullableContextAttribute("1")]
internal ProcessingInstruction(Document owner, string name);
    [NullableContextAttribute("1")]
public sealed virtual string get_Target();
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
    [NullableContextAttribute("1")]
internal static ProcessingInstruction Create(Document owner, string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.QueryExtensions : object {
    [ExtensionAttribute]
public static IElement QuerySelector(INodeList nodes, string selectorText, INode scopeNode);
    [ExtensionAttribute]
public static IElement QuerySelector(T nodes, string selectorText, INode scopeNode);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> QuerySelectorAll(INodeList nodes, string selectorText, INode scopeNode);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> QuerySelectorAll(T nodes, string selectorText, INode scopeNode);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> GetElementsByClassName(INodeList elements, string classNames);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> GetElementsByClassName(T elements, string classNames);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> GetElementsByTagName(INodeList elements, string tagName);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> GetElementsByTagName(T elements, string tagName);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> GetElementsByTagName(INodeList elements, string namespaceUri, string localName);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> GetElementsByTagName(T elements, string namespaceUri, string localName);
    [ExtensionAttribute]
public static T QuerySelector(INodeList elements, ISelector selectors);
    [ExtensionAttribute]
public static T QuerySelector(TNodeList elements, ISelector selectors);
    [ExtensionAttribute]
public static IElement QuerySelector(INodeList elements, ISelector selector);
    [ExtensionAttribute]
public static IElement QuerySelector(T elements, ISelector selector);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> QuerySelectorAll(INodeList elements, ISelector selector);
    [ExtensionAttribute]
public static IHtmlCollection`1<IElement> QuerySelectorAll(T elements, ISelector selector);
    [ExtensionAttribute]
public static void QuerySelectorAll(INodeList elements, ISelector selector, List`1<IElement> result);
    [ExtensionAttribute]
public static void QuerySelectorAll(T elements, ISelector selector, List`1<IElement> result);
    [ExtensionAttribute]
public static bool Contains(ITokenList list, String[] tokens);
    [ExtensionAttribute]
public static bool Contains(T list, String[] tokens);
    [ExtensionAttribute]
private static void GetElementsByClassName(T elements, String[] classNames, List`1<IElement> result);
    [ExtensionAttribute]
private static void GetElementsByTagName(T elements, string tagName, List`1<IElement> result);
    [ExtensionAttribute]
private static void GetElementsByTagName(T elements, string namespaceUri, string localName, List`1<IElement> result);
    [NullableContextAttribute("2")]
private static IElement GetScope(INode scopeNode);
    private static ISelector CreateSelector(T nodes, INode scope, string selectorText);
}
public enum AngleSharp.Dom.QuirksMode : Enum {
    public byte value__;
    public static QuirksMode Off;
    public static QuirksMode Limited;
    [DomDescriptionAttribute("BackCompat")]
public static QuirksMode On;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.Range : object {
    private Boundary _start;
    private Boundary _end;
    public INode Root { get; }
    public IEnumerable`1<INode> Nodes { get; }
    public INode Head { get; }
    public int Start { get; }
    public INode Tail { get; }
    public int End { get; }
    public bool IsCollapsed { get; }
    public INode CommonAncestor { get; }
    public Range(IDocument document);
    private Range(Boundary start, Boundary end);
    public INode get_Root();
    public IEnumerable`1<INode> get_Nodes();
    public sealed virtual INode get_Head();
    public sealed virtual int get_Start();
    public sealed virtual INode get_Tail();
    public sealed virtual int get_End();
    public sealed virtual bool get_IsCollapsed();
    public sealed virtual INode get_CommonAncestor();
    public sealed virtual void StartWith(INode refNode, int offset);
    public sealed virtual void EndWith(INode refNode, int offset);
    public sealed virtual void StartBefore(INode refNode);
    public sealed virtual void EndBefore(INode refNode);
    public sealed virtual void StartAfter(INode refNode);
    public sealed virtual void EndAfter(INode refNode);
    public sealed virtual void Collapse(bool toStart);
    public sealed virtual void Select(INode refNode);
    public sealed virtual void SelectContent(INode refNode);
    public sealed virtual void ClearContent();
    public sealed virtual IDocumentFragment ExtractContent();
    public sealed virtual IDocumentFragment CopyContent();
    public sealed virtual void Insert(INode node);
    public sealed virtual void Surround(INode newParent);
    public sealed virtual IRange Clone();
    public sealed virtual void Detach();
    public sealed virtual bool Contains(INode node, int offset);
    public sealed virtual RangePosition CompareBoundaryTo(RangeType how, IRange sourceRange);
    public sealed virtual RangePosition CompareTo(INode node, int offset);
    public sealed virtual bool Intersects(INode node);
    public virtual string ToString();
    private static int GetNodeLength(INode node);
    private bool IsStartBefore(INode node, int offset);
    private bool IsStartAfter(INode node, int offset);
    private bool IsEndBefore(INode node, int offset);
    private bool IsEndAfter(INode node, int offset);
    private bool IsPartiallyContained(INode node);
    [CompilerGeneratedAttribute]
private bool <ClearContent>b__29_0(INode node);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ClearContent>b__29_1(INode m);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Surround>b__33_0(INode m);
}
public enum AngleSharp.Dom.RangePosition : Enum {
    public short value__;
    public static RangePosition Before;
    public static RangePosition Equal;
    public static RangePosition After;
}
[DomNameAttribute("Range")]
public enum AngleSharp.Dom.RangeType : Enum {
    public byte value__;
    [DomNameAttribute("START_TO_START")]
public static RangeType StartToStart;
    [DomNameAttribute("START_TO_END")]
public static RangeType StartToEnd;
    [DomNameAttribute("END_TO_END")]
public static RangeType EndToEnd;
    [DomNameAttribute("END_TO_START")]
public static RangeType EndToStart;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Dom.SelectorExtensions : object {
    [ExtensionAttribute]
public static T Eq(IEnumerable`1<T> elements, int index);
    [ExtensionAttribute]
public static IEnumerable`1<T> Gt(IEnumerable`1<T> elements, int index);
    [ExtensionAttribute]
public static IEnumerable`1<T> Lt(IEnumerable`1<T> elements, int index);
    [IteratorStateMachineAttribute("AngleSharp.Dom.SelectorExtensions/<Even>d__3`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Even(IEnumerable`1<T> elements);
    [IteratorStateMachineAttribute("AngleSharp.Dom.SelectorExtensions/<Odd>d__4`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Odd(IEnumerable`1<T> elements);
    [ExtensionAttribute]
public static IEnumerable`1<T> Filter(IEnumerable`1<T> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<T> Not(IEnumerable`1<T> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Children(IEnumerable`1<IElement> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Siblings(IEnumerable`1<IElement> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Parent(IEnumerable`1<IElement> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Next(IEnumerable`1<IElement> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Previous(IEnumerable`1<IElement> elements, string selectorText);
    [ExtensionAttribute]
public static IEnumerable`1<T> Is(IEnumerable`1<T> elements, ISelector selector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Not(IEnumerable`1<T> elements, ISelector selector);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Children(IEnumerable`1<IElement> elements, ISelector selector);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Siblings(IEnumerable`1<IElement> elements, ISelector selector);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Parent(IEnumerable`1<IElement> elements, ISelector selector);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Next(IEnumerable`1<IElement> elements, ISelector selector);
    [ExtensionAttribute]
public static IEnumerable`1<IElement> Previous(IEnumerable`1<IElement> elements, ISelector selector);
    [IteratorStateMachineAttribute("AngleSharp.Dom.SelectorExtensions/<GetMany>d__19")]
[ExtensionAttribute]
private static IEnumerable`1<IElement> GetMany(IEnumerable`1<IElement> elements, Func`2<IElement, IEnumerable`1<IElement>> getter, ISelector selector);
    [ExtensionAttribute]
private static IEnumerable`1<IElement> GetMany(IEnumerable`1<IElement> elements, Func`2<IElement, IEnumerable`1<IElement>> getter, string selectorText);
    [IteratorStateMachineAttribute("AngleSharp.Dom.SelectorExtensions/<Get>d__21")]
[ExtensionAttribute]
private static IEnumerable`1<IElement> Get(IEnumerable`1<IElement> elements, Func`2<IElement, IElement> getter, ISelector selector);
    [ExtensionAttribute]
private static IEnumerable`1<IElement> Get(IEnumerable`1<IElement> elements, Func`2<IElement, IElement> getter, string selectorText);
    [IteratorStateMachineAttribute("AngleSharp.Dom.SelectorExtensions/<Except>d__23")]
[ExtensionAttribute]
private static IEnumerable`1<IElement> Except(IEnumerable`1<IElement> elements, IElement excluded);
    [IteratorStateMachineAttribute("AngleSharp.Dom.SelectorExtensions/<Filter>d__24`1")]
[ExtensionAttribute]
private static IEnumerable`1<T> Filter(IEnumerable`1<T> elements, ISelector selector, bool result);
    [ExtensionAttribute]
private static IEnumerable`1<T> Filter(IEnumerable`1<T> elements, string selectorText, bool result);
    private static ISelector CreateSelector(IEnumerable`1<T> elements, string selector);
}
internal class AngleSharp.Dom.SettableTokenList : TokenList {
    [NullableAttribute("1")]
public string Value { get; public set; }
    [NullableContextAttribute("2")]
internal SettableTokenList(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Value();
    [NullableContextAttribute("1")]
public sealed virtual void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.ShadowRoot : Node {
    private Element _host;
    private IStyleSheetList _styleSheets;
    private ShadowRootMode _mode;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IElement> _elements;
    [NullableAttribute("2")]
public IElement ActiveElement { get; }
    public ShadowRootMode Mode { get; }
    public IElement Host { get; }
    public string InnerHtml { get; public set; }
    public IStyleSheetList StyleSheets { get; }
    public int ChildElementCount { get; }
    public IHtmlCollection`1<IElement> Children { get; }
    [NullableAttribute("2")]
public IElement FirstElementChild { get; }
    [NullableAttribute("2")]
public IElement LastElementChild { get; }
    public string TextContent { get; public set; }
    internal ShadowRoot(Element host, ShadowRootMode mode);
    [NullableContextAttribute("2")]
public sealed virtual IElement get_ActiveElement();
    public sealed virtual ShadowRootMode get_Mode();
    public sealed virtual IElement get_Host();
    public sealed virtual string get_InnerHtml();
    public sealed virtual void set_InnerHtml(string value);
    public sealed virtual IStyleSheetList get_StyleSheets();
    public sealed virtual int get_ChildElementCount();
    public sealed virtual IHtmlCollection`1<IElement> get_Children();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_FirstElementChild();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_LastElementChild();
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    public sealed virtual void Prepend(INode[] nodes);
    public sealed virtual void Append(INode[] nodes);
    public sealed virtual IElement QuerySelector(string selectors);
    public sealed virtual IHtmlCollection`1<IElement> QuerySelectorAll(string selectors);
    public IHtmlCollection`1<IElement> GetElementsByClassName(string classNames);
    public IHtmlCollection`1<IElement> GetElementsByTagName(string tagName);
    public IHtmlCollection`1<IElement> GetElementsByTagNameNS(string namespaceURI, string tagName);
    public sealed virtual IElement GetElementById(string elementId);
    public virtual Node Clone(Document owner, bool deep);
}
[DomNameAttribute("ShadowRootMode")]
[DomLiteralsAttribute]
public enum AngleSharp.Dom.ShadowRootMode : Enum {
    public byte value__;
    [DomNameAttribute("open")]
public static ShadowRootMode Open;
    [DomNameAttribute("closed")]
public static ShadowRootMode Closed;
}
internal enum AngleSharp.Dom.SimpleChoice : Enum {
    public byte value__;
    public static SimpleChoice Yes;
    public static SimpleChoice No;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.StringList : object {
    private IEnumerable`1<string> _list;
    public string Item { get; }
    public int Length { get; }
    internal StringList(IEnumerable`1<string> list);
    public sealed virtual string get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual bool Contains(string entry);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.StringMap : object {
    private string _prefix;
    private Element _parent;
    [NullableAttribute("2")]
public string Item { get; public set; }
    internal StringMap(string prefix, Element parent);
    public sealed virtual string get_Item(string name);
    public sealed virtual void set_Item(string name, string value);
    public sealed virtual void Remove(string name);
    public bool Contains(string name);
    private static string Check(string name);
    [IteratorStateMachineAttribute("AngleSharp.Dom.StringMap/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.StyleSheetList : object {
    private IEnumerable`1<IStyleSheet> _sheets;
    [NullableAttribute("2")]
public IStyleSheet Item { get; }
    public int Length { get; }
    internal StyleSheetList(IEnumerable`1<IStyleSheet> sheets);
    [NullableContextAttribute("2")]
public sealed virtual IStyleSheet get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual IEnumerator`1<IStyleSheet> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Dom.TagNames : object {
    public static string Doctype;
    public static string Html;
    public static string Body;
    public static string Head;
    public static string Meta;
    public static string Title;
    public static string Bgsound;
    public static string Script;
    public static string Style;
    public static string NoEmbed;
    public static string NoScript;
    public static string NoFrames;
    public static string Menu;
    public static string MenuItem;
    public static string Var;
    public static string Ruby;
    public static string Sub;
    public static string Sup;
    public static string Rp;
    public static string Rt;
    public static string Rb;
    public static string Rtc;
    public static string Applet;
    public static string Embed;
    public static string Marquee;
    public static string Param;
    public static string Object;
    public static string Canvas;
    public static string Font;
    public static string Ins;
    public static string Del;
    public static string Template;
    public static string Slot;
    public static string Caption;
    public static string Col;
    public static string Colgroup;
    public static string Table;
    public static string Thead;
    public static string Tbody;
    public static string Tfoot;
    public static string Th;
    public static string Td;
    public static string Tr;
    public static string Input;
    public static string Keygen;
    public static string Textarea;
    public static string P;
    public static string Span;
    public static string Dialog;
    public static string Fieldset;
    public static string Legend;
    public static string Label;
    public static string Details;
    public static string Form;
    public static string IsIndex;
    public static string Pre;
    public static string Data;
    public static string Datalist;
    public static string Ol;
    public static string Ul;
    public static string Dl;
    public static string Li;
    public static string Dd;
    public static string Dt;
    public static string B;
    public static string Big;
    public static string Strike;
    public static string Code;
    public static string Em;
    public static string I;
    public static string S;
    public static string Small;
    public static string Strong;
    public static string U;
    public static string Tt;
    public static string NoBr;
    public static string Select;
    public static string Option;
    public static string Optgroup;
    public static string Link;
    public static string Frameset;
    public static string Frame;
    public static string Iframe;
    public static string Audio;
    public static string Video;
    public static string Source;
    public static string Track;
    public static string H1;
    public static string H2;
    public static string H3;
    public static string H4;
    public static string H5;
    public static string H6;
    public static string Div;
    public static string Quote;
    public static string BlockQuote;
    public static string Q;
    public static string Base;
    public static string BaseFont;
    public static string A;
    public static string Area;
    public static string Button;
    public static string Cite;
    public static string Main;
    public static string Summary;
    public static string Xmp;
    public static string Br;
    public static string Wbr;
    public static string Hr;
    public static string Dir;
    public static string Center;
    public static string Listing;
    public static string Img;
    public static string Image;
    public static string Nav;
    public static string Address;
    public static string Article;
    public static string Aside;
    public static string Figcaption;
    public static string Figure;
    public static string Section;
    public static string Footer;
    public static string Header;
    public static string Hgroup;
    public static string Plaintext;
    public static string Time;
    public static string Progress;
    public static string Meter;
    public static string Output;
    public static string Map;
    public static string Picture;
    public static string Mark;
    public static string Dfn;
    public static string Kbd;
    public static string Samp;
    public static string Abbr;
    public static string Bdi;
    public static string Bdo;
    public static string Math;
    public static string Mi;
    public static string Mo;
    public static string Mn;
    public static string Ms;
    public static string Mtext;
    public static string AnnotationXml;
    public static string Svg;
    public static string ForeignObject;
    public static string Desc;
    public static string Circle;
    public static string Xml;
    internal static HashSet`1<StringOrMemory> AllForeignExceptions;
    internal static HashSet`1<StringOrMemory> AllBeforeHead;
    internal static HashSet`1<StringOrMemory> AllNoShadowRoot;
    internal static HashSet`1<StringOrMemory> AllHead;
    internal static HashSet`1<StringOrMemory> AllHeadNoTemplate;
    internal static HashSet`1<StringOrMemory> AllHeadBase;
    internal static HashSet`1<StringOrMemory> AllBodyBreakrow;
    internal static HashSet`1<StringOrMemory> AllBodyClosed;
    internal static HashSet`1<StringOrMemory> AllNoScript;
    internal static HashSet`1<StringOrMemory> AllHeadings;
    internal static HashSet`1<StringOrMemory> AllBlocks;
    internal static HashSet`1<StringOrMemory> AllBody;
    internal static HashSet`1<StringOrMemory> AllBodyObsolete;
    internal static HashSet`1<StringOrMemory> AllInput;
    internal static HashSet`1<StringOrMemory> AllBasicBlocks;
    internal static HashSet`1<StringOrMemory> AllSemanticFormatting;
    internal static HashSet`1<StringOrMemory> AllClassicFormatting;
    internal static HashSet`1<StringOrMemory> AllFormatting;
    internal static HashSet`1<StringOrMemory> AllNested;
    internal static HashSet`1<StringOrMemory> AllCaptionEnd;
    internal static HashSet`1<StringOrMemory> AllCaptionStart;
    internal static HashSet`1<StringOrMemory> AllTable;
    internal static HashSet`1<StringOrMemory> AllTableRoot;
    internal static HashSet`1<StringOrMemory> AllTableGeneral;
    internal static HashSet`1<StringOrMemory> AllTableSections;
    internal static HashSet`1<StringOrMemory> AllTableMajor;
    internal static HashSet`1<StringOrMemory> AllTableSpecial;
    internal static HashSet`1<StringOrMemory> AllTableCore;
    internal static HashSet`1<StringOrMemory> AllTableInner;
    internal static HashSet`1<StringOrMemory> AllTableSelects;
    internal static HashSet`1<StringOrMemory> AllTableCells;
    internal static HashSet`1<StringOrMemory> AllTableCellsRows;
    internal static HashSet`1<StringOrMemory> AllTableHead;
    internal static HashSet`1<StringOrMemory> DisallowedCustomElementNames;
    private static TagNames();
}
internal class AngleSharp.Dom.TextNode : CharacterData {
    internal bool IsEmpty { get; }
    [NullableAttribute("1")]
public string Text { get; }
    [NullableAttribute("2")]
public IElement AssignedSlot { get; }
    [NullableContextAttribute("1")]
internal TextNode(Document owner);
    [NullableContextAttribute("1")]
internal TextNode(Document owner, string text);
    internal bool get_IsEmpty();
    [NullableContextAttribute("1")]
public sealed virtual string get_Text();
    [NullableContextAttribute("2")]
public sealed virtual IElement get_AssignedSlot();
    [NullableContextAttribute("1")]
public sealed virtual IText Split(int offset);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Dom.TokenList : object {
    private List`1<string> _tokens;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> Changed;
    public string Item { get; }
    public int Length { get; }
    [NullableContextAttribute("2")]
internal TokenList(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(Action`1<string> value);
    public sealed virtual string get_Item(int index);
    public sealed virtual int get_Length();
    [NullableContextAttribute("2")]
public sealed virtual void Update(string value);
    public sealed virtual bool Contains(string token);
    public sealed virtual void Remove(String[] tokens);
    public sealed virtual void Add(String[] tokens);
    public sealed virtual bool Toggle(string token, bool force);
    private void RaiseChanged();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.TreeWalker : object {
    private INode _root;
    private FilterSettings _settings;
    private NodeFilter _filter;
    private INode _current;
    public INode Root { get; }
    public FilterSettings Settings { get; }
    public NodeFilter Filter { get; }
    public INode Current { get; public set; }
    public TreeWalker(INode root, FilterSettings settings, NodeFilter filter);
    public sealed virtual INode get_Root();
    public sealed virtual FilterSettings get_Settings();
    public sealed virtual NodeFilter get_Filter();
    public sealed virtual INode get_Current();
    public sealed virtual void set_Current(INode value);
    [NullableContextAttribute("2")]
public sealed virtual INode ToNext();
    [NullableContextAttribute("2")]
public sealed virtual INode ToPrevious();
    [NullableContextAttribute("2")]
public sealed virtual INode ToParent();
    [NullableContextAttribute("2")]
public sealed virtual INode ToFirst();
    [NullableContextAttribute("2")]
public sealed virtual INode ToLast();
    [NullableContextAttribute("2")]
public sealed virtual INode ToPreviousSibling();
    [NullableContextAttribute("2")]
public sealed virtual INode ToNextSibling();
    private FilterResult Check(INode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DomNameAttribute("URL")]
[DomExposedAttribute("Window")]
[DomExposedAttribute("Worker")]
public class AngleSharp.Dom.Url : object {
    private static string CurrentDirectory;
    private static string CurrentDirectoryAlternative;
    private static string UpperDirectory;
    private static String[] UpperDirectoryAlternatives;
    private static Url DefaultBase;
    private static Char[] C0ControlAndSpace;
    private static IdnMapping DefaultIdnMapping;
    [NullableAttribute("2")]
private string _fragment;
    [NullableAttribute("2")]
private string _query;
    private string _path;
    private string _scheme;
    private string _port;
    private string _host;
    [NullableAttribute("2")]
private string _username;
    [NullableAttribute("2")]
private string _password;
    private bool _relative;
    private string _schemeData;
    [NullableAttribute("2")]
private UrlSearchParams _params;
    private bool _error;
    [NullableAttribute("2")]
[DomNameAttribute("origin")]
public string Origin { get; }
    public bool IsInvalid { get; }
    public bool IsRelative { get; }
    public bool IsAbsolute { get; }
    [NullableAttribute("2")]
[DomNameAttribute("username")]
public string UserName { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("password")]
public string Password { get; public set; }
    public string Data { get; }
    [NullableAttribute("2")]
public string Fragment { get; public set; }
    [DomNameAttribute("hash")]
public string Hash { get; public set; }
    [DomNameAttribute("host")]
public string Host { get; public set; }
    [DomNameAttribute("hostname")]
public string HostName { get; public set; }
    [DomNameAttribute("href")]
public string Href { get; public set; }
    public string Path { get; public set; }
    [DomNameAttribute("pathname")]
public string PathName { get; public set; }
    [DomNameAttribute("port")]
public string Port { get; public set; }
    public string Scheme { get; public set; }
    [DomNameAttribute("protocol")]
public string Protocol { get; public set; }
    [NullableAttribute("2")]
public string Query { get; public set; }
    [DomNameAttribute("search")]
public string Search { get; public set; }
    [DomNameAttribute("searchParams")]
public UrlSearchParams SearchParams { get; }
    private Url(string scheme, string host, string port);
    [NullableContextAttribute("0")]
[DomConstructorAttribute]
public Url(string url, string baseAddress);
    [NullableContextAttribute("0")]
public Url(string address);
    [NullableContextAttribute("0")]
public Url(Url baseAddress, string relativeAddress);
    public Url(Url address);
    private static Url();
    public static Url Create(string address);
    public static Url Convert(Uri uri);
    [NullableContextAttribute("2")]
public string get_Origin();
    public bool get_IsInvalid();
    public bool get_IsRelative();
    public bool get_IsAbsolute();
    [NullableContextAttribute("2")]
public string get_UserName();
    [NullableContextAttribute("2")]
public void set_UserName(string value);
    [NullableContextAttribute("2")]
public string get_Password();
    [NullableContextAttribute("2")]
public void set_Password(string value);
    public string get_Data();
    [NullableContextAttribute("2")]
public string get_Fragment();
    [NullableContextAttribute("2")]
public void set_Fragment(string value);
    public string get_Hash();
    public void set_Hash(string value);
    public string get_Host();
    public void set_Host(string value);
    public string get_HostName();
    public void set_HostName(string value);
    public string get_Href();
    public void set_Href(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_PathName();
    public void set_PathName(string value);
    public string get_Port();
    public void set_Port(string value);
    public string get_Scheme();
    public void set_Scheme(string value);
    public string get_Protocol();
    public void set_Protocol(string value);
    [NullableContextAttribute("2")]
public string get_Query();
    [NullableContextAttribute("2")]
public void set_Query(string value);
    public string get_Search();
    public void set_Search(string value);
    public UrlSearchParams get_SearchParams();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Url other);
    public static Uri op_Implicit(Url value);
    [DomNameAttribute("toJSON")]
public string ToJson();
    public virtual string ToString();
    private string Serialize();
    private bool ParseUrl(string input, Url baseUrl);
    private void Reset(Url baseUrl);
    private bool ParseScheme(string input, int length, bool onlyScheme);
    private bool ParseSchemeData(string input, int index, int length);
    private bool RelativeState(string input, int index, int length);
    private bool IgnoreSlashesState(string input, int index, int length);
    private bool ParseAuthority(string input, int index, int length);
    private bool ParseFileHost(string input, int index, int length);
    private bool ParseHostName(string input, int index, int length, bool onlyHost, bool onlyPort);
    private bool ParsePort(string input, int index, int length, bool onlyPort);
    private bool ParsePath(string input, int index, int length, bool onlyPath);
    internal bool ParseQuery(string input, int index, int length, bool onlyQuery, bool fromParams);
    private bool ParseFragment(string input, int index, int length);
    private static string NormalizeInput(string input);
    private static string Utf8PercentDecode(string source);
    private static int Utf8PercentEncode(StringBuilder buffer, string source, int index);
    private static bool TrySanatizeHost(string hostName, int start, int length, String& sanatizedHostName);
    private static string SanatizePort(string port, int start, int length);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static string <SanatizePort>g__Go|104_0(Span`1<char> chars, <>c__DisplayClass104_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DomNameAttribute("URLSearchParams")]
[DomExposedAttribute("Window")]
[DomExposedAttribute("Worker")]
public class AngleSharp.Dom.UrlSearchParams : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, string>> _values;
    [NullableAttribute("2")]
private Url _parent;
    internal UrlSearchParams(Url parent);
    [DomConstructorAttribute]
public UrlSearchParams(string init);
    internal void Reset();
    internal void ChangeTo(string query, bool fromParent);
    [DomNameAttribute("append")]
public void Append(string name, string value);
    private void AppendCore(string name, string value);
    [DomNameAttribute("delete")]
public void Delete(string name);
    private void DeleteCore(string name);
    [DomNameAttribute("get")]
public string Get(string name);
    [DomNameAttribute("getAll")]
public String[] GetAll(string name);
    [DomNameAttribute("has")]
public bool Has(string name);
    [DomNameAttribute("set")]
public void Set(string name, string value);
    [DomNameAttribute("sort")]
public void Sort();
    public virtual string ToString();
    private static string Encode(string value);
    private static string Decode(string value);
    private void RaiseChanged(bool fromParent);
}
public enum AngleSharp.Dom.VerticalAlignment : Enum {
    public byte value__;
    public static VerticalAlignment Baseline;
    public static VerticalAlignment Sub;
    public static VerticalAlignment Super;
    public static VerticalAlignment TextTop;
    public static VerticalAlignment TextBottom;
    public static VerticalAlignment Middle;
    public static VerticalAlignment Top;
    public static VerticalAlignment Bottom;
}
public enum AngleSharp.Dom.Visibility : Enum {
    public byte value__;
    public static Visibility Visible;
    public static Visibility Hidden;
    public static Visibility Collapse;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Dom.Window : EventTarget {
    private Document _document;
    [NullableAttribute("2")]
private string _name;
    private int _outerHeight;
    private int _outerWidth;
    private int _screenX;
    private int _screenY;
    [NullableAttribute("2")]
private string _status;
    private bool _closed;
    [NullableAttribute("2")]
private INavigator _navigator;
    [NullableAttribute("2")]
public IWindow Proxy { get; }
    [NullableAttribute("2")]
public INavigator Navigator { get; }
    public IDocument Document { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public int OuterHeight { get; public set; }
    public int OuterWidth { get; public set; }
    public int ScreenX { get; public set; }
    public int ScreenY { get; public set; }
    public ILocation Location { get; }
    [NullableAttribute("2")]
public string Status { get; public set; }
    public bool IsClosed { get; }
    [NullableAttribute("2")]
private IHistory AngleSharp.Dom.IWindow.History { get; }
    public Window(Document document);
    [NullableContextAttribute("2")]
public sealed virtual IWindow get_Proxy();
    [NullableContextAttribute("2")]
public sealed virtual INavigator get_Navigator();
    public sealed virtual IDocument get_Document();
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual void set_Name(string value);
    public sealed virtual int get_OuterHeight();
    public void set_OuterHeight(int value);
    public sealed virtual int get_OuterWidth();
    public void set_OuterWidth(int value);
    public sealed virtual int get_ScreenX();
    public void set_ScreenX(int value);
    public sealed virtual int get_ScreenY();
    public void set_ScreenY(int value);
    public sealed virtual ILocation get_Location();
    [NullableContextAttribute("2")]
public sealed virtual string get_Status();
    [NullableContextAttribute("2")]
public sealed virtual void set_Status(string value);
    public sealed virtual bool get_IsClosed();
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Aborted(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Aborted(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Blurred(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Blurred(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Cancelled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Cancelled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_CanPlay(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_CanPlay(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_CanPlayThrough(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_CanPlayThrough(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Changed(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Changed(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Clicked(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Clicked(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_CueChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_CueChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DoubleClick(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DoubleClick(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Drag(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Drag(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DragEnd(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DragEnd(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DragEnter(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DragEnter(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DragExit(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DragExit(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DragLeave(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DragLeave(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DragOver(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DragOver(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DragStart(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DragStart(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Dropped(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Dropped(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_DurationChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_DurationChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Emptied(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Emptied(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Ended(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Ended(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Error(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Error(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Focused(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Focused(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Input(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Input(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Invalid(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Invalid(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_KeyDown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_KeyDown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_KeyPress(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_KeyPress(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_KeyUp(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_KeyUp(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Loaded(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Loaded(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_LoadedData(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_LoadedData(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_LoadedMetadata(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_LoadedMetadata(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Loading(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Loading(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseDown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseDown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseEnter(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseEnter(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseLeave(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseLeave(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseMove(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseMove(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseOut(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseOut(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseOver(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseOver(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseUp(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseUp(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_MouseWheel(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_MouseWheel(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Paused(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Paused(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Played(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Played(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Playing(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Playing(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Progress(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Progress(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_RateChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_RateChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Resetted(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Resetted(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Resized(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Resized(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Scrolled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Scrolled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Seeked(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Seeked(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Seeking(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Seeking(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Selected(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Selected(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Shown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Shown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Stalled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Stalled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Submitted(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Submitted(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Suspended(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Suspended(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_TimeUpdated(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_TimeUpdated(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Toggled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Toggled(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_VolumeChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_VolumeChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.add_Waiting(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IGlobalEventHandlers.remove_Waiting(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_Printed(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_Printed(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_Printing(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_Printing(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_Unloading(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_Unloading(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_HashChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_HashChanged(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_MessageReceived(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_MessageReceived(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_WentOffline(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_WentOffline(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_WentOnline(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_WentOnline(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_PageHidden(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_PageHidden(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_PageShown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_PageShown(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_PopState(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_PopState(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_Storage(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_Storage(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.add_Unloaded(DomEventHandler value);
    private sealed virtual override void AngleSharp.Dom.Events.IWindowEventHandlers.remove_Unloaded(DomEventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override IHistory AngleSharp.Dom.IWindow.get_History();
    [NullableContextAttribute("2")]
private sealed virtual override IWindow AngleSharp.Dom.IWindow.Open(string url, string name, string features, string replace);
    private sealed virtual override void AngleSharp.Dom.IWindow.Close();
    private sealed virtual override void AngleSharp.Dom.IWindow.Stop();
    private sealed virtual override void AngleSharp.Dom.IWindow.Focus();
    private sealed virtual override void AngleSharp.Dom.IWindow.Blur();
    private sealed virtual override void AngleSharp.Dom.IWindow.Alert(string message);
    private sealed virtual override bool AngleSharp.Dom.IWindow.Confirm(string message);
    private sealed virtual override void AngleSharp.Dom.IWindow.Print();
    private sealed virtual override int AngleSharp.Dom.IWindowTimers.SetTimeout(Action`1<IWindow> handler, int timeout);
    private sealed virtual override void AngleSharp.Dom.IWindowTimers.ClearTimeout(int handle);
    private sealed virtual override void AngleSharp.Dom.IWindowTimers.ClearInterval(int handle);
    private sealed virtual override int AngleSharp.Dom.IWindowTimers.SetInterval(Action`1<IWindow> handler, int timeout);
    [AsyncStateMachineAttribute("AngleSharp.Dom.Window/<DoTimeoutAsync>d__262")]
private Task DoTimeoutAsync(Action`1<IWindow> callback, int timeout, CancellationTokenSource cts);
    [AsyncStateMachineAttribute("AngleSharp.Dom.Window/<DoIntervalAsync>d__263")]
private Task DoIntervalAsync(Action`1<IWindow> callback, int timeout, CancellationTokenSource cts);
    private int QueueTask(Func`4<Action`1<IWindow>, int, CancellationTokenSource, Task> taskCreator, Action`1<IWindow> callback, int timeout);
    private void Clear(int handle);
    public sealed virtual void Dispose();
}
public enum AngleSharp.Dom.WordBreak : Enum {
    public byte value__;
    public static WordBreak Normal;
    public static WordBreak BreakAll;
    public static WordBreak KeepAll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.FormatExtensions : object {
    [ExtensionAttribute]
public static string ToCss(IStyleFormattable style);
    [ExtensionAttribute]
public static string ToCss(IStyleFormattable style, IStyleFormatter formatter);
    [ExtensionAttribute]
public static void ToCss(IStyleFormattable style, TextWriter writer);
    [ExtensionAttribute]
public static Task ToCssAsync(IStyleFormattable style, TextWriter writer);
    [AsyncStateMachineAttribute("AngleSharp.FormatExtensions/<ToCssAsync>d__4")]
[ExtensionAttribute]
public static Task ToCssAsync(IStyleFormattable style, Stream stream);
    [ExtensionAttribute]
public static string ToHtml(IMarkupFormattable markup);
    [ExtensionAttribute]
public static string ToHtml(IMarkupFormattable markup, IMarkupFormatter formatter);
    [ExtensionAttribute]
public static void ToHtml(IMarkupFormattable markup, TextWriter writer);
    [ExtensionAttribute]
public static string Minify(IMarkupFormattable markup);
    [ExtensionAttribute]
public static string Prettify(IMarkupFormattable markup);
    [ExtensionAttribute]
public static Task ToHtmlAsync(IMarkupFormattable markup, TextWriter writer);
    [AsyncStateMachineAttribute("AngleSharp.FormatExtensions/<ToHtmlAsync>d__11")]
[ExtensionAttribute]
public static Task ToHtmlAsync(IMarkupFormattable markup, Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Construction.HtmlDomConstructionFactory : object {
    public static IHtmlElementConstructionFactory Instance;
    private IElementFactory`2<Document, HtmlElement> _html;
    private IElementFactory`2<Document, MathElement> _math;
    private IElementFactory`2<Document, SvgElement> _svg;
    public HtmlDomConstructionFactory(IBrowsingContext context);
    public HtmlDomConstructionFactory(IElementFactory`2<Document, HtmlElement> html, IElementFactory`2<Document, MathElement> math, IElementFactory`2<Document, SvgElement> svg);
    private static HtmlDomConstructionFactory();
    public sealed virtual Element Create(Document document, StringOrMemory localName, StringOrMemory prefix, NodeFlags flags);
    public sealed virtual IConstructableMetaElement CreateMeta(Document document);
    public sealed virtual IConstructableScriptElement CreateScript(Document document, bool parserInserted, bool started);
    public sealed virtual IConstructableFrameElement CreateFrame(Document document);
    public sealed virtual IConstructableTemplateElement CreateTemplate(Document document);
    public sealed virtual IConstructableFormElement CreateForm(Document document);
    public sealed virtual Element CreateNoScript(Document document, bool scripting);
    public sealed virtual IConstructableMathElement CreateMath(Document document, StringOrMemory name);
    public sealed virtual IConstructableSvgElement CreateSvg(Document document, StringOrMemory name);
    public sealed virtual Element CreateUnknown(Document document, StringOrMemory tagName);
    public sealed virtual Document CreateDocument(TextSource source, IBrowsingContext context);
    public sealed virtual IConstructableNode CreateDocumentType(Document document, StringOrMemory name, StringOrMemory publicIdentifier, StringOrMemory systemIdentifier);
}
public interface AngleSharp.Html.Construction.IConstructableAttr {
    public StringOrMemory Name { get; }
    public StringOrMemory Value { get; public set; }
    public abstract virtual StringOrMemory get_Name();
    public abstract virtual StringOrMemory get_Value();
    public abstract virtual void set_Value(StringOrMemory value);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.Construction.IConstructableDocument {
    public TextSource Source { get; }
    [NullableAttribute("2")]
public IDisposable Builder { get; public set; }
    public QuirksMode QuirksMode { get; public set; }
    [NullableAttribute("2")]
public IConstructableElement Head { get; }
    public IConstructableElement DocumentElement { get; }
    public bool IsLoading { get; }
    public abstract virtual TextSource get_Source();
    [NullableContextAttribute("2")]
public abstract virtual IDisposable get_Builder();
    [NullableContextAttribute("2")]
public abstract virtual void set_Builder(IDisposable value);
    public abstract virtual QuirksMode get_QuirksMode();
    public abstract virtual void set_QuirksMode(QuirksMode value);
    [NullableContextAttribute("2")]
public abstract virtual IConstructableElement get_Head();
    public abstract virtual IConstructableElement get_DocumentElement();
    public abstract virtual bool get_IsLoading();
    public abstract virtual void PerformMicrotaskCheckpoint();
    public abstract virtual void ProvideStableState();
    public abstract virtual void AddComment(StructHtmlToken& token);
    public abstract virtual void TrackError(Exception exception);
    public abstract virtual Task WaitForReadyAsync(CancellationToken cancelToken);
    public abstract virtual Task FinishLoadingAsync();
    public abstract virtual void ApplyManifest();
    public abstract virtual void Clear();
}
[NullableContextAttribute("2")]
public interface AngleSharp.Html.Construction.IConstructableElement {
    public StringOrMemory NamespaceUri { get; }
    public StringOrMemory LocalName { get; }
    public StringOrMemory Prefix { get; }
    [NullableAttribute("1")]
public IConstructableNamedNodeMap Attributes { get; }
    public ISourceReference SourceReference { get; public set; }
    public abstract virtual StringOrMemory get_NamespaceUri();
    public abstract virtual StringOrMemory get_LocalName();
    public abstract virtual StringOrMemory get_Prefix();
    [NullableContextAttribute("1")]
public abstract virtual IConstructableNamedNodeMap get_Attributes();
    public abstract virtual ISourceReference get_SourceReference();
    public abstract virtual void set_SourceReference(ISourceReference value);
    public abstract virtual void SetAttribute(string namespaceUri, StringOrMemory name, StringOrMemory value);
    public abstract virtual void SetOwnAttribute(StringOrMemory name, StringOrMemory value);
    public abstract virtual StringOrMemory GetAttribute(StringOrMemory namespaceUri, StringOrMemory localName);
    public abstract virtual void SetAttributes(StructAttributes tagAttributes);
    public abstract virtual bool HasAttribute(StringOrMemory name);
    public abstract virtual void SetupElement();
    public abstract virtual void AddComment(StructHtmlToken& token);
    [NullableContextAttribute("1")]
public abstract virtual IConstructableNode ShallowCopy();
}
public interface AngleSharp.Html.Construction.IConstructableFormElement {
}
public interface AngleSharp.Html.Construction.IConstructableFrameElement {
}
public interface AngleSharp.Html.Construction.IConstructableMathElement {
}
public interface AngleSharp.Html.Construction.IConstructableMetaElement {
    public abstract virtual void Handle();
}
[NullableContextAttribute("2")]
[DefaultMemberAttribute("Item")]
public interface AngleSharp.Html.Construction.IConstructableNamedNodeMap {
    public IConstructableAttr Item { get; }
    public int Length { get; }
    public abstract virtual IConstructableAttr get_Item(StringOrMemory name);
    public abstract virtual int get_Length();
    public abstract virtual bool SameAs(IConstructableNamedNodeMap attributes);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.Construction.IConstructableNode {
    public StringOrMemory NodeName { get; }
    public NodeFlags Flags { get; }
    [NullableAttribute("2")]
public IConstructableNode Parent { get; public set; }
    public IConstructableNodeList ChildNodes { get; }
    public abstract virtual StringOrMemory get_NodeName();
    public abstract virtual NodeFlags get_Flags();
    [NullableContextAttribute("2")]
public abstract virtual IConstructableNode get_Parent();
    [NullableContextAttribute("2")]
public abstract virtual void set_Parent(IConstructableNode value);
    public abstract virtual IConstructableNodeList get_ChildNodes();
    public abstract virtual void RemoveFromParent();
    public abstract virtual void RemoveChild(IConstructableNode childNode);
    public abstract virtual void RemoveNode(int idx, IConstructableNode childNode);
    public abstract virtual void InsertNode(int idx, IConstructableNode childNode);
    public abstract virtual void AddNode(IConstructableNode node);
    public abstract virtual void AppendText(StringOrMemory text, bool emitWhiteSpaceOnly);
    public abstract virtual void InsertText(int idx, StringOrMemory text, bool emitWhiteSpaceOnly);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface AngleSharp.Html.Construction.IConstructableNodeList {
    public IConstructableNode Item { get; }
    public int Length { get; }
    public abstract virtual IConstructableNode get_Item(int index);
    public abstract virtual int get_Length();
    public abstract virtual void Clear();
}
public interface AngleSharp.Html.Construction.IConstructableScriptElement {
    [NullableContextAttribute("1")]
public abstract virtual Task RunAsync(CancellationToken cancel);
    [NullableContextAttribute("1")]
public abstract virtual bool Prepare(IConstructableDocument document);
}
public interface AngleSharp.Html.Construction.IConstructableSvgElement {
}
public interface AngleSharp.Html.Construction.IConstructableTemplateElement {
    public abstract virtual void PopulateFragment();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.Construction.IDomConstructionElementFactory`2 {
    public abstract virtual TElement Create(TDocument document, StringOrMemory localName, StringOrMemory prefix, NodeFlags flags);
    public abstract virtual TElement CreateNoScript(TDocument document, bool scripting);
    public abstract virtual IConstructableNode CreateDocumentType(TDocument document, StringOrMemory name, StringOrMemory publicIdentifier, StringOrMemory systemIdentifier);
    public abstract virtual IConstructableMathElement CreateMath(TDocument document, StringOrMemory name);
    public abstract virtual IConstructableSvgElement CreateSvg(TDocument document, StringOrMemory name);
    public abstract virtual IConstructableMetaElement CreateMeta(TDocument document);
    public abstract virtual IConstructableScriptElement CreateScript(TDocument document, bool parserInserted, bool started);
    public abstract virtual IConstructableFrameElement CreateFrame(TDocument document);
    public abstract virtual IConstructableTemplateElement CreateTemplate(TDocument document);
    public abstract virtual IConstructableFormElement CreateForm(TDocument document);
    public abstract virtual TElement CreateUnknown(TDocument document, StringOrMemory tagName);
    public abstract virtual TDocument CreateDocument(TextSource source, IBrowsingContext context);
}
public interface AngleSharp.Html.Construction.IHtmlElementConstructionFactory {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.DefaultInputTypeFactory : object {
    private Dictionary`2<string, Creator> _creators;
    public void Register(string type, Creator creator);
    public Creator Unregister(string type);
    protected virtual BaseInputType CreateDefault(IHtmlInputElement input, string type);
    public sealed virtual BaseInputType Create(IHtmlInputElement input, string type);
}
public class AngleSharp.Html.DefaultLinkRelationFactory : object {
    [NullableAttribute("1")]
private Dictionary`2<string, Creator> _creators;
    [NullableContextAttribute("1")]
public void Register(string rel, Creator creator);
    [NullableContextAttribute("1")]
public Creator Unregister(string rel);
    [NullableContextAttribute("2")]
protected virtual BaseLinkRelation CreateDefault(IHtmlLinkElement link, string rel);
    [NullableContextAttribute("2")]
public sealed virtual BaseLinkRelation Create(IHtmlLinkElement link, string rel);
}
internal enum AngleSharp.Html.Dom.Alignment : Enum {
    public byte value__;
    public static Alignment Bottom;
    public static Alignment Middle;
    public static Alignment Top;
    public static Alignment Left;
    public static Alignment Right;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("CompositionEvent")]
public class AngleSharp.Html.Dom.Events.CompositionEvent : UiEvent {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [DomNameAttribute("data")]
public string Data { get; private set; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public CompositionEvent(string type, bool bubbles, bool cancelable, IWindow view, string data);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    [NullableContextAttribute("1")]
[DomNameAttribute("initCompositionEvent")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Dom.Events.HtmlErrorEvent : Event {
    private HtmlParseError _code;
    private TextPosition _position;
    public TextPosition Position { get; }
    public int Code { get; }
    public string Message { get; }
    public HtmlErrorEvent(HtmlParseError code, TextPosition position);
    public TextPosition get_Position();
    public int get_Code();
    public string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Dom.Events.HtmlParseEvent : Event {
    [CompilerGeneratedAttribute]
private IHtmlDocument <Document>k__BackingField;
    public IHtmlDocument Document { get; private set; }
    public HtmlParseEvent(IHtmlDocument document, bool completed);
    [CompilerGeneratedAttribute]
public IHtmlDocument get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(IHtmlDocument value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("InputEvent")]
public class AngleSharp.Html.Dom.Events.InputEvent : Event {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [DomNameAttribute("data")]
public string Data { get; private set; }
    [NullableContextAttribute("1")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public InputEvent(string type, bool bubbles, bool cancelable, string data);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    [NullableContextAttribute("1")]
[DomNameAttribute("initInputEvent")]
public void Init(string type, bool bubbles, bool cancelable, string data);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("TouchList")]
public interface AngleSharp.Html.Dom.Events.ITouchList {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomAccessorAttribute("1")]
[DomNameAttribute("item")]
public ITouchPoint Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual ITouchPoint get_Item(int index);
}
[NullableContextAttribute("1")]
[DomNameAttribute("Touch")]
public interface AngleSharp.Html.Dom.Events.ITouchPoint {
    [DomNameAttribute("identifier")]
public int Id { get; }
    [DomNameAttribute("target")]
public IEventTarget Target { get; }
    [DomNameAttribute("screenX")]
public int ScreenX { get; }
    [DomNameAttribute("screenY")]
public int ScreenY { get; }
    [DomNameAttribute("clientX")]
public int ClientX { get; }
    [DomNameAttribute("clientY")]
public int ClientY { get; }
    [DomNameAttribute("pageX")]
public int PageX { get; }
    [DomNameAttribute("pageY")]
public int PageY { get; }
    public abstract virtual int get_Id();
    public abstract virtual IEventTarget get_Target();
    public abstract virtual int get_ScreenX();
    public abstract virtual int get_ScreenY();
    public abstract virtual int get_ClientX();
    public abstract virtual int get_ClientY();
    public abstract virtual int get_PageX();
    public abstract virtual int get_PageY();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("KeyboardEvent")]
public class AngleSharp.Html.Dom.Events.KeyboardEvent : UiEvent {
    [NullableAttribute("1")]
private string _modifiers;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyboardLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepeated>k__BackingField;
    [DomNameAttribute("key")]
public string Key { get; private set; }
    [DomNameAttribute("location")]
public KeyboardLocation Location { get; private set; }
    [DomNameAttribute("ctrlKey")]
public bool IsCtrlPressed { get; }
    [DomNameAttribute("shiftKey")]
public bool IsShiftPressed { get; }
    [DomNameAttribute("altKey")]
public bool IsAltPressed { get; }
    [DomNameAttribute("metaKey")]
public bool IsMetaPressed { get; }
    [DomNameAttribute("repeat")]
public bool IsRepeated { get; private set; }
    [DomNameAttribute("locale")]
public string Locale { get; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public KeyboardEvent(string type, bool bubbles, bool cancelable, IWindow view, int detail, string key, KeyboardLocation location, string modifiersList, bool repeat);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public KeyboardLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(KeyboardLocation value);
    public bool get_IsCtrlPressed();
    public bool get_IsShiftPressed();
    public bool get_IsAltPressed();
    public bool get_IsMetaPressed();
    [CompilerGeneratedAttribute]
public bool get_IsRepeated();
    [CompilerGeneratedAttribute]
private void set_IsRepeated(bool value);
    [NullableContextAttribute("1")]
[DomNameAttribute("getModifierState")]
public bool GetModifierState(string key);
    public string get_Locale();
    [NullableContextAttribute("1")]
[DomNameAttribute("initKeyboardEvent")]
[MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, int detail, string key, KeyboardLocation location, string modifiersList, bool repeat);
}
[DomNameAttribute("KeyboardEvent")]
public enum AngleSharp.Html.Dom.Events.KeyboardLocation : Enum {
    public byte value__;
    [DomNameAttribute("DOM_KEY_LOCATION_STANDARD")]
public static KeyboardLocation Standard;
    [DomNameAttribute("DOM_KEY_LOCATION_LEFT")]
public static KeyboardLocation Left;
    [DomNameAttribute("DOM_KEY_LOCATION_RIGHT")]
public static KeyboardLocation Right;
    [DomNameAttribute("DOM_KEY_LOCATION_NUMPAD")]
public static KeyboardLocation NumPad;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class AngleSharp.Html.Dom.Events.ModifierExtensions : object {
    [ExtensionAttribute]
public static bool IsCtrlPressed(string modifierList);
    [ExtensionAttribute]
public static bool IsMetaPressed(string modifierList);
    [ExtensionAttribute]
public static bool IsShiftPressed(string modifierList);
    [ExtensionAttribute]
public static bool IsAltPressed(string modifierList);
    [ExtensionAttribute]
public static bool ContainsKey(string modifierList, string key);
}
public enum AngleSharp.Html.Dom.Events.MouseButton : Enum {
    public byte value__;
    public static MouseButton Primary;
    public static MouseButton Auxiliary;
    public static MouseButton Secondary;
}
[FlagsAttribute]
public enum AngleSharp.Html.Dom.Events.MouseButtons : Enum {
    public byte value__;
    public static MouseButtons None;
    public static MouseButtons Primary;
    public static MouseButtons Secondary;
    public static MouseButtons Auxiliary;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("MouseEvent")]
public class AngleSharp.Html.Dom.Events.MouseEvent : UiEvent {
    [CompilerGeneratedAttribute]
private int <ScreenX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScreenY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClientX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClientY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCtrlPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShiftPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAltPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMetaPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButton <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButtons <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventTarget <Target>k__BackingField;
    [DomNameAttribute("screenX")]
public int ScreenX { get; private set; }
    [DomNameAttribute("screenY")]
public int ScreenY { get; private set; }
    [DomNameAttribute("clientX")]
public int ClientX { get; private set; }
    [DomNameAttribute("clientY")]
public int ClientY { get; private set; }
    [DomNameAttribute("ctrlKey")]
public bool IsCtrlPressed { get; private set; }
    [DomNameAttribute("shiftKey")]
public bool IsShiftPressed { get; private set; }
    [DomNameAttribute("altKey")]
public bool IsAltPressed { get; private set; }
    [DomNameAttribute("metaKey")]
public bool IsMetaPressed { get; private set; }
    [DomNameAttribute("button")]
public MouseButton Button { get; private set; }
    [DomNameAttribute("buttons")]
public MouseButtons Buttons { get; private set; }
    [DomNameAttribute("relatedTarget")]
public IEventTarget Target { get; private set; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public MouseEvent(string type, bool bubbles, bool cancelable, IWindow view, int detail, int screenX, int screenY, int clientX, int clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, MouseButton button, IEventTarget relatedTarget);
    [CompilerGeneratedAttribute]
public int get_ScreenX();
    [CompilerGeneratedAttribute]
private void set_ScreenX(int value);
    [CompilerGeneratedAttribute]
public int get_ScreenY();
    [CompilerGeneratedAttribute]
private void set_ScreenY(int value);
    [CompilerGeneratedAttribute]
public int get_ClientX();
    [CompilerGeneratedAttribute]
private void set_ClientX(int value);
    [CompilerGeneratedAttribute]
public int get_ClientY();
    [CompilerGeneratedAttribute]
private void set_ClientY(int value);
    [CompilerGeneratedAttribute]
public bool get_IsCtrlPressed();
    [CompilerGeneratedAttribute]
private void set_IsCtrlPressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsShiftPressed();
    [CompilerGeneratedAttribute]
private void set_IsShiftPressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAltPressed();
    [CompilerGeneratedAttribute]
private void set_IsAltPressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMetaPressed();
    [CompilerGeneratedAttribute]
private void set_IsMetaPressed(bool value);
    [CompilerGeneratedAttribute]
public MouseButton get_Button();
    [CompilerGeneratedAttribute]
private void set_Button(MouseButton value);
    [CompilerGeneratedAttribute]
public MouseButtons get_Buttons();
    [CompilerGeneratedAttribute]
private void set_Buttons(MouseButtons value);
    [CompilerGeneratedAttribute]
public IEventTarget get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(IEventTarget value);
    [NullableContextAttribute("1")]
[DomNameAttribute("getModifierState")]
public bool GetModifierState(string key);
    [DomNameAttribute("initMouseEvent")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, int detail, int screenX, int screenY, int clientX, int clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, MouseButton button, IEventTarget target);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("TouchEvent")]
public class AngleSharp.Html.Dom.Events.TouchEvent : UiEvent {
    [CompilerGeneratedAttribute]
private ITouchList <Touches>k__BackingField;
    [CompilerGeneratedAttribute]
private ITouchList <TargetTouches>k__BackingField;
    [CompilerGeneratedAttribute]
private ITouchList <ChangedTouches>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAltPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMetaPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCtrlPressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShiftPressed>k__BackingField;
    [DomNameAttribute("touches")]
public ITouchList Touches { get; private set; }
    [DomNameAttribute("targetTouches")]
public ITouchList TargetTouches { get; private set; }
    [DomNameAttribute("changedTouches")]
public ITouchList ChangedTouches { get; private set; }
    [DomNameAttribute("altKey")]
public bool IsAltPressed { get; private set; }
    [DomNameAttribute("metaKey")]
public bool IsMetaPressed { get; private set; }
    [DomNameAttribute("ctrlKey")]
public bool IsCtrlPressed { get; private set; }
    [DomNameAttribute("shiftKey")]
public bool IsShiftPressed { get; private set; }
    [DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public TouchEvent(string type, bool bubbles, bool cancelable, IWindow view, int detail, ITouchList touches, ITouchList targetTouches, ITouchList changedTouches, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey);
    [CompilerGeneratedAttribute]
public ITouchList get_Touches();
    [CompilerGeneratedAttribute]
private void set_Touches(ITouchList value);
    [CompilerGeneratedAttribute]
public ITouchList get_TargetTouches();
    [CompilerGeneratedAttribute]
private void set_TargetTouches(ITouchList value);
    [CompilerGeneratedAttribute]
public ITouchList get_ChangedTouches();
    [CompilerGeneratedAttribute]
private void set_ChangedTouches(ITouchList value);
    [CompilerGeneratedAttribute]
public bool get_IsAltPressed();
    [CompilerGeneratedAttribute]
private void set_IsAltPressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMetaPressed();
    [CompilerGeneratedAttribute]
private void set_IsMetaPressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCtrlPressed();
    [CompilerGeneratedAttribute]
private void set_IsCtrlPressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsShiftPressed();
    [CompilerGeneratedAttribute]
private void set_IsShiftPressed(bool value);
    [DomNameAttribute("initTouchEvent")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, int detail, ITouchList touches, ITouchList targetTouches, ITouchList changedTouches, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DomNameAttribute("TrackEvent")]
public class AngleSharp.Html.Dom.Events.TrackEvent : Event {
    [CompilerGeneratedAttribute]
private object <Track>k__BackingField;
    [DomNameAttribute("track")]
public object Track { get; private set; }
    [NullableContextAttribute("1")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public TrackEvent(string type, bool bubbles, bool cancelable, object track);
    [CompilerGeneratedAttribute]
public object get_Track();
    [CompilerGeneratedAttribute]
private void set_Track(object value);
    [NullableContextAttribute("1")]
[DomNameAttribute("initTrackEvent")]
public void Init(string type, bool bubbles, bool cancelable, object track);
}
[DomNameAttribute("WheelEvent")]
public class AngleSharp.Html.Dom.Events.WheelEvent : MouseEvent {
    [CompilerGeneratedAttribute]
private double <DeltaX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaZ>k__BackingField;
    [CompilerGeneratedAttribute]
private WheelMode <DeltaMode>k__BackingField;
    [DomNameAttribute("deltaX")]
public double DeltaX { get; private set; }
    [DomNameAttribute("deltaY")]
public double DeltaY { get; private set; }
    [DomNameAttribute("deltaZ")]
public double DeltaZ { get; private set; }
    [DomNameAttribute("deltaMode")]
public WheelMode DeltaMode { get; private set; }
    [NullableContextAttribute("2")]
[DomConstructorAttribute]
[DomInitDictAttribute("1", "True")]
public WheelEvent(string type, bool bubbles, bool cancelable, IWindow view, int detail, int screenX, int screenY, int clientX, int clientY, MouseButton button, IEventTarget target, string modifiersList, double deltaX, double deltaY, double deltaZ, WheelMode deltaMode);
    [CompilerGeneratedAttribute]
public double get_DeltaX();
    [CompilerGeneratedAttribute]
private void set_DeltaX(double value);
    [CompilerGeneratedAttribute]
public double get_DeltaY();
    [CompilerGeneratedAttribute]
private void set_DeltaY(double value);
    [CompilerGeneratedAttribute]
public double get_DeltaZ();
    [CompilerGeneratedAttribute]
private void set_DeltaZ(double value);
    [CompilerGeneratedAttribute]
public WheelMode get_DeltaMode();
    [CompilerGeneratedAttribute]
private void set_DeltaMode(WheelMode value);
    [NullableContextAttribute("1")]
[DomNameAttribute("initWheelEvent")]
public void Init(string type, bool bubbles, bool cancelable, IWindow view, int detail, int screenX, int screenY, int clientX, int clientY, MouseButton button, IEventTarget target, string modifiersList, double deltaX, double deltaY, double deltaZ, WheelMode deltaMode);
}
[DomNameAttribute("WheelEvent")]
public enum AngleSharp.Html.Dom.Events.WheelMode : Enum {
    public byte value__;
    [DomNameAttribute("DOM_DELTA_PIXEL")]
public static WheelMode Pixel;
    [DomNameAttribute("DOM_DELTA_LINE")]
public static WheelMode Line;
    [DomNameAttribute("DOM_DELTA_PAGE")]
public static WheelMode Page;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Html.Dom.FormExtensions : object {
    [ExtensionAttribute]
public static IHtmlFormElement SetValues(IHtmlFormElement form, IDictionary`2<string, string> fields, bool createMissing);
    [ExtensionAttribute]
public static Task`1<IDocument> SubmitAsync(IHtmlFormElement form, object fields);
    [ExtensionAttribute]
public static Task`1<IDocument> SubmitAsync(IHtmlFormElement form, IDictionary`2<string, string> fields, bool createMissing);
    [ExtensionAttribute]
public static Task`1<IDocument> SubmitAsync(IHtmlElement element, object fields);
    [ExtensionAttribute]
public static Task`1<IDocument> SubmitAsync(IHtmlElement element, IDictionary`2<string, string> fields, bool createMissing);
}
internal class AngleSharp.Html.Dom.HtmlAddressElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlAddressElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlAnchorElement : HtmlUrlBaseElement {
    [NullableAttribute("2")]
public string Charset { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("1")]
public string Text { get; public set; }
    [NullableContextAttribute("1")]
public HtmlAnchorElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public string get_Charset();
    [NullableContextAttribute("2")]
public void set_Charset(string value);
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
public void set_Name(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Text();
    [NullableContextAttribute("1")]
public void set_Text(string value);
    public virtual void DoFocus();
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlAppletElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlAppletElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlAreaElement : HtmlUrlBaseElement {
    [NullableAttribute("2")]
public string AlternativeText { get; public set; }
    [NullableAttribute("2")]
public string Coordinates { get; public set; }
    [NullableAttribute("2")]
public string Shape { get; public set; }
    [NullableContextAttribute("1")]
public HtmlAreaElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_AlternativeText();
    [NullableContextAttribute("2")]
public sealed virtual void set_AlternativeText(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Coordinates();
    [NullableContextAttribute("2")]
public sealed virtual void set_Coordinates(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Shape();
    [NullableContextAttribute("2")]
public sealed virtual void set_Shape(string value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class AngleSharp.Html.Dom.HtmlAudioElement : HtmlMediaElement`1<IAudioInfo> {
    [NullableAttribute("2")]
private IAudioTrackList _audios;
    [NullableAttribute("2")]
public IAudioTrackList AudioTracks { get; }
    [NullableContextAttribute("1")]
public HtmlAudioElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public virtual IAudioTrackList get_AudioTracks();
}
internal class AngleSharp.Html.Dom.HtmlBaseElement : HtmlElement {
    [NullableAttribute("2")]
public string Href { get; public set; }
    [NullableAttribute("2")]
public string Target { get; public set; }
    [NullableContextAttribute("1")]
public HtmlBaseElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Href();
    [NullableContextAttribute("2")]
public sealed virtual void set_Href(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Target();
    [NullableContextAttribute("2")]
public sealed virtual void set_Target(string value);
    internal virtual void SetupElement();
    [NullableContextAttribute("1")]
internal void UpdateUrl(string url);
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlBaseFontElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlBaseFontElement(Document owner, string prefix);
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlBgsoundElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlBgsoundElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlBigElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlBigElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlBodyElement : HtmlElement {
    [NullableAttribute("2")]
public string ALink { get; public set; }
    [NullableAttribute("2")]
public string Background { get; public set; }
    [NullableAttribute("2")]
public string BgColor { get; public set; }
    [NullableAttribute("2")]
public string Link { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    [NullableAttribute("2")]
public string VLink { get; public set; }
    public HtmlBodyElement(Document owner, string prefix);
    public sealed virtual void add_Printed(DomEventHandler value);
    public sealed virtual void remove_Printed(DomEventHandler value);
    public sealed virtual void add_Printing(DomEventHandler value);
    public sealed virtual void remove_Printing(DomEventHandler value);
    public sealed virtual void add_Unloading(DomEventHandler value);
    public sealed virtual void remove_Unloading(DomEventHandler value);
    public sealed virtual void add_HashChanged(DomEventHandler value);
    public sealed virtual void remove_HashChanged(DomEventHandler value);
    public sealed virtual void add_MessageReceived(DomEventHandler value);
    public sealed virtual void remove_MessageReceived(DomEventHandler value);
    public sealed virtual void add_WentOffline(DomEventHandler value);
    public sealed virtual void remove_WentOffline(DomEventHandler value);
    public sealed virtual void add_WentOnline(DomEventHandler value);
    public sealed virtual void remove_WentOnline(DomEventHandler value);
    public sealed virtual void add_PageHidden(DomEventHandler value);
    public sealed virtual void remove_PageHidden(DomEventHandler value);
    public sealed virtual void add_PageShown(DomEventHandler value);
    public sealed virtual void remove_PageShown(DomEventHandler value);
    public sealed virtual void add_PopState(DomEventHandler value);
    public sealed virtual void remove_PopState(DomEventHandler value);
    public sealed virtual void add_Storage(DomEventHandler value);
    public sealed virtual void remove_Storage(DomEventHandler value);
    public sealed virtual void add_Unloaded(DomEventHandler value);
    public sealed virtual void remove_Unloaded(DomEventHandler value);
    [NullableContextAttribute("2")]
public string get_ALink();
    [NullableContextAttribute("2")]
public void set_ALink(string value);
    [NullableContextAttribute("2")]
public string get_Background();
    [NullableContextAttribute("2")]
public void set_Background(string value);
    [NullableContextAttribute("2")]
public string get_BgColor();
    [NullableContextAttribute("2")]
public void set_BgColor(string value);
    [NullableContextAttribute("2")]
public string get_Link();
    [NullableContextAttribute("2")]
public void set_Link(string value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    [NullableContextAttribute("2")]
public string get_VLink();
    [NullableContextAttribute("2")]
public void set_VLink(string value);
}
internal class AngleSharp.Html.Dom.HtmlBoldElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlBoldElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlBreakRowElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlBreakRowElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlButtonElement : HtmlFormControlElement {
    [CompilerGeneratedAttribute]
private bool <IsVisited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public string Type { get; public set; }
    [NullableAttribute("2")]
public string FormAction { get; public set; }
    public string FormEncType { get; public set; }
    public string FormMethod { get; public set; }
    public bool FormNoValidate { get; public set; }
    public string FormTarget { get; public set; }
    public string Value { get; public set; }
    internal bool IsVisited { get; internal set; }
    internal bool IsActive { get; internal set; }
    public HtmlButtonElement(Document owner, string prefix);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_FormAction();
    [NullableContextAttribute("2")]
public sealed virtual void set_FormAction(string value);
    public sealed virtual string get_FormEncType();
    public sealed virtual void set_FormEncType(string value);
    public sealed virtual string get_FormMethod();
    public sealed virtual void set_FormMethod(string value);
    public sealed virtual bool get_FormNoValidate();
    public sealed virtual void set_FormNoValidate(bool value);
    public sealed virtual string get_FormTarget();
    public sealed virtual void set_FormTarget(string value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsVisited();
    [CompilerGeneratedAttribute]
internal void set_IsVisited(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal void set_IsActive(bool value);
    [AsyncStateMachineAttribute("AngleSharp.Html.Dom.HtmlButtonElement/<DoClick>d__30")]
public virtual void DoClick();
    protected virtual bool CanBeValidated();
    internal virtual void ConstructDataSet(FormDataSet dataSet, IHtmlElement submitter);
}
internal class AngleSharp.Html.Dom.HtmlCanvasElement : HtmlElement {
    [NullableAttribute("1")]
private IEnumerable`1<IRenderingService> _renderServices;
    private ContextMode _mode;
    [NullableAttribute("2")]
private IRenderingContext _current;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [NullableContextAttribute("1")]
public HtmlCanvasElement(Document owner, string prefix);
    public sealed virtual int get_Width();
    public sealed virtual void set_Width(int value);
    public sealed virtual int get_Height();
    public sealed virtual void set_Height(int value);
    [NullableContextAttribute("1")]
public sealed virtual IRenderingContext GetContext(string contextId);
    [NullableContextAttribute("1")]
public sealed virtual bool IsSupportingContext(string contextId);
    [NullableContextAttribute("1")]
public sealed virtual void SetContext(IRenderingContext context);
    [NullableContextAttribute("1")]
public sealed virtual string ToDataUrl(string type);
    [NullableContextAttribute("1")]
public sealed virtual void ToBlob(Action`1<Stream> callback, string type);
    [NullableContextAttribute("1")]
private Byte[] GetImageData(string type);
    [NullableContextAttribute("1")]
private static ContextMode GetModeFrom(string contextId);
}
internal class AngleSharp.Html.Dom.HtmlCodeElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlCodeElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlDataElement : HtmlElement {
    [NullableAttribute("2")]
public string Value { get; public set; }
    [NullableContextAttribute("1")]
public HtmlDataElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void set_Value(string value);
}
internal class AngleSharp.Html.Dom.HtmlDataListElement : HtmlElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlOptionElement> _options;
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlOptionElement> Options { get; }
    [NullableContextAttribute("1")]
public HtmlDataListElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlOptionElement> get_Options();
}
internal class AngleSharp.Html.Dom.HtmlDefinitionListElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlDefinitionListElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlDetailsElement : HtmlElement {
    public bool IsOpen { get; public set; }
    [NullableContextAttribute("1")]
public HtmlDetailsElement(Document owner, string prefix);
    public sealed virtual bool get_IsOpen();
    public sealed virtual void set_IsOpen(bool value);
}
internal class AngleSharp.Html.Dom.HtmlDialogElement : HtmlElement {
    [NullableAttribute("2")]
private string _returnValue;
    public bool Open { get; public set; }
    [NullableAttribute("2")]
public string ReturnValue { get; public set; }
    [NullableContextAttribute("1")]
public HtmlDialogElement(Document owner, string prefix);
    public sealed virtual bool get_Open();
    public sealed virtual void set_Open(bool value);
    [NullableContextAttribute("2")]
public sealed virtual string get_ReturnValue();
    [NullableContextAttribute("2")]
public sealed virtual void set_ReturnValue(string value);
    [NullableContextAttribute("2")]
public sealed virtual void Show(IElement anchor);
    [NullableContextAttribute("2")]
public sealed virtual void ShowModal(IElement anchor);
    [NullableContextAttribute("2")]
public sealed virtual void Close(string returnValue);
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlDirectoryElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlDirectoryElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlDivElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlDivElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlDocument : Document {
    private IElementFactory`2<Document, HtmlElement> _htmlFactory;
    private IElementFactory`2<Document, MathElement> _mathFactory;
    private IElementFactory`2<Document, SvgElement> _svgFactory;
    public IElement DocumentElement { get; }
    public IEntityProvider Entities { get; }
    internal HtmlDocument(IBrowsingContext context, TextSource source);
    [NullableContextAttribute("2")]
internal HtmlDocument(IBrowsingContext context);
    public virtual IElement get_DocumentElement();
    public virtual IEntityProvider get_Entities();
    public HtmlElement CreateHtmlElement(string name, string prefix, NodeFlags flags);
    public MathElement CreateMathElement(string name, string prefix, NodeFlags flags);
    public SvgElement CreateSvgElement(string name, string prefix, NodeFlags flags);
    public virtual Element CreateElementFrom(string name, string prefix, NodeFlags flags);
    public virtual Node Clone(Document owner, bool deep);
    protected virtual string GetTitle();
    [NullableContextAttribute("2")]
protected virtual void SetTitle(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Dom.HtmlElement : Element {
    [NullableAttribute("2")]
private StringMap _dataset;
    [NullableAttribute("2")]
private IHtmlMenuElement _menu;
    [NullableAttribute("2")]
private SettableTokenList _dropZone;
    public bool IsHidden { get; public set; }
    [NullableAttribute("2")]
public IHtmlMenuElement ContextMenu { get; public set; }
    public ISettableTokenList DropZone { get; }
    public bool IsDraggable { get; public set; }
    [NullableAttribute("2")]
public string AccessKey { get; public set; }
    [NullableAttribute("2")]
public string AccessKeyLabel { get; }
    [NullableAttribute("2")]
public string Language { get; public set; }
    [NullableAttribute("2")]
public string Title { get; public set; }
    [NullableAttribute("2")]
public string Direction { get; public set; }
    public bool IsSpellChecked { get; public set; }
    public int TabIndex { get; public set; }
    public IStringMap Dataset { get; }
    [NullableAttribute("2")]
public string ContentEditable { get; public set; }
    public bool IsContentEditable { get; }
    public bool IsTranslated { get; public set; }
    public HtmlElement(Document owner, string localName, string prefix, NodeFlags flags);
    public sealed virtual void add_Aborted(DomEventHandler value);
    public sealed virtual void remove_Aborted(DomEventHandler value);
    public sealed virtual void add_Blurred(DomEventHandler value);
    public sealed virtual void remove_Blurred(DomEventHandler value);
    public sealed virtual void add_Cancelled(DomEventHandler value);
    public sealed virtual void remove_Cancelled(DomEventHandler value);
    public sealed virtual void add_CanPlay(DomEventHandler value);
    public sealed virtual void remove_CanPlay(DomEventHandler value);
    public sealed virtual void add_CanPlayThrough(DomEventHandler value);
    public sealed virtual void remove_CanPlayThrough(DomEventHandler value);
    public sealed virtual void add_Changed(DomEventHandler value);
    public sealed virtual void remove_Changed(DomEventHandler value);
    public sealed virtual void add_Clicked(DomEventHandler value);
    public sealed virtual void remove_Clicked(DomEventHandler value);
    public sealed virtual void add_CueChanged(DomEventHandler value);
    public sealed virtual void remove_CueChanged(DomEventHandler value);
    public sealed virtual void add_DoubleClick(DomEventHandler value);
    public sealed virtual void remove_DoubleClick(DomEventHandler value);
    public sealed virtual void add_Drag(DomEventHandler value);
    public sealed virtual void remove_Drag(DomEventHandler value);
    public sealed virtual void add_DragEnd(DomEventHandler value);
    public sealed virtual void remove_DragEnd(DomEventHandler value);
    public sealed virtual void add_DragEnter(DomEventHandler value);
    public sealed virtual void remove_DragEnter(DomEventHandler value);
    public sealed virtual void add_DragExit(DomEventHandler value);
    public sealed virtual void remove_DragExit(DomEventHandler value);
    public sealed virtual void add_DragLeave(DomEventHandler value);
    public sealed virtual void remove_DragLeave(DomEventHandler value);
    public sealed virtual void add_DragOver(DomEventHandler value);
    public sealed virtual void remove_DragOver(DomEventHandler value);
    public sealed virtual void add_DragStart(DomEventHandler value);
    public sealed virtual void remove_DragStart(DomEventHandler value);
    public sealed virtual void add_Dropped(DomEventHandler value);
    public sealed virtual void remove_Dropped(DomEventHandler value);
    public sealed virtual void add_DurationChanged(DomEventHandler value);
    public sealed virtual void remove_DurationChanged(DomEventHandler value);
    public sealed virtual void add_Emptied(DomEventHandler value);
    public sealed virtual void remove_Emptied(DomEventHandler value);
    public sealed virtual void add_Ended(DomEventHandler value);
    public sealed virtual void remove_Ended(DomEventHandler value);
    public sealed virtual void add_Error(DomEventHandler value);
    public sealed virtual void remove_Error(DomEventHandler value);
    public sealed virtual void add_Focused(DomEventHandler value);
    public sealed virtual void remove_Focused(DomEventHandler value);
    public sealed virtual void add_Input(DomEventHandler value);
    public sealed virtual void remove_Input(DomEventHandler value);
    public sealed virtual void add_Invalid(DomEventHandler value);
    public sealed virtual void remove_Invalid(DomEventHandler value);
    public sealed virtual void add_KeyDown(DomEventHandler value);
    public sealed virtual void remove_KeyDown(DomEventHandler value);
    public sealed virtual void add_KeyPress(DomEventHandler value);
    public sealed virtual void remove_KeyPress(DomEventHandler value);
    public sealed virtual void add_KeyUp(DomEventHandler value);
    public sealed virtual void remove_KeyUp(DomEventHandler value);
    public sealed virtual void add_Loaded(DomEventHandler value);
    public sealed virtual void remove_Loaded(DomEventHandler value);
    public sealed virtual void add_LoadedData(DomEventHandler value);
    public sealed virtual void remove_LoadedData(DomEventHandler value);
    public sealed virtual void add_LoadedMetadata(DomEventHandler value);
    public sealed virtual void remove_LoadedMetadata(DomEventHandler value);
    public sealed virtual void add_Loading(DomEventHandler value);
    public sealed virtual void remove_Loading(DomEventHandler value);
    public sealed virtual void add_MouseDown(DomEventHandler value);
    public sealed virtual void remove_MouseDown(DomEventHandler value);
    public sealed virtual void add_MouseEnter(DomEventHandler value);
    public sealed virtual void remove_MouseEnter(DomEventHandler value);
    public sealed virtual void add_MouseLeave(DomEventHandler value);
    public sealed virtual void remove_MouseLeave(DomEventHandler value);
    public sealed virtual void add_MouseMove(DomEventHandler value);
    public sealed virtual void remove_MouseMove(DomEventHandler value);
    public sealed virtual void add_MouseOut(DomEventHandler value);
    public sealed virtual void remove_MouseOut(DomEventHandler value);
    public sealed virtual void add_MouseOver(DomEventHandler value);
    public sealed virtual void remove_MouseOver(DomEventHandler value);
    public sealed virtual void add_MouseUp(DomEventHandler value);
    public sealed virtual void remove_MouseUp(DomEventHandler value);
    public sealed virtual void add_MouseWheel(DomEventHandler value);
    public sealed virtual void remove_MouseWheel(DomEventHandler value);
    public sealed virtual void add_Paused(DomEventHandler value);
    public sealed virtual void remove_Paused(DomEventHandler value);
    public sealed virtual void add_Played(DomEventHandler value);
    public sealed virtual void remove_Played(DomEventHandler value);
    public sealed virtual void add_Playing(DomEventHandler value);
    public sealed virtual void remove_Playing(DomEventHandler value);
    public sealed virtual void add_Progress(DomEventHandler value);
    public sealed virtual void remove_Progress(DomEventHandler value);
    public sealed virtual void add_RateChanged(DomEventHandler value);
    public sealed virtual void remove_RateChanged(DomEventHandler value);
    public sealed virtual void add_Resetted(DomEventHandler value);
    public sealed virtual void remove_Resetted(DomEventHandler value);
    public sealed virtual void add_Resized(DomEventHandler value);
    public sealed virtual void remove_Resized(DomEventHandler value);
    public sealed virtual void add_Scrolled(DomEventHandler value);
    public sealed virtual void remove_Scrolled(DomEventHandler value);
    public sealed virtual void add_Seeked(DomEventHandler value);
    public sealed virtual void remove_Seeked(DomEventHandler value);
    public sealed virtual void add_Seeking(DomEventHandler value);
    public sealed virtual void remove_Seeking(DomEventHandler value);
    public sealed virtual void add_Selected(DomEventHandler value);
    public sealed virtual void remove_Selected(DomEventHandler value);
    public sealed virtual void add_Shown(DomEventHandler value);
    public sealed virtual void remove_Shown(DomEventHandler value);
    public sealed virtual void add_Stalled(DomEventHandler value);
    public sealed virtual void remove_Stalled(DomEventHandler value);
    public sealed virtual void add_Submitted(DomEventHandler value);
    public sealed virtual void remove_Submitted(DomEventHandler value);
    public sealed virtual void add_Suspended(DomEventHandler value);
    public sealed virtual void remove_Suspended(DomEventHandler value);
    public sealed virtual void add_TimeUpdated(DomEventHandler value);
    public sealed virtual void remove_TimeUpdated(DomEventHandler value);
    public sealed virtual void add_Toggled(DomEventHandler value);
    public sealed virtual void remove_Toggled(DomEventHandler value);
    public sealed virtual void add_VolumeChanged(DomEventHandler value);
    public sealed virtual void remove_VolumeChanged(DomEventHandler value);
    public sealed virtual void add_Waiting(DomEventHandler value);
    public sealed virtual void remove_Waiting(DomEventHandler value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlMenuElement get_ContextMenu();
    [NullableContextAttribute("2")]
public sealed virtual void set_ContextMenu(IHtmlMenuElement value);
    public sealed virtual ISettableTokenList get_DropZone();
    public sealed virtual bool get_IsDraggable();
    public sealed virtual void set_IsDraggable(bool value);
    [NullableContextAttribute("2")]
public sealed virtual string get_AccessKey();
    [NullableContextAttribute("2")]
public sealed virtual void set_AccessKey(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_AccessKeyLabel();
    [NullableContextAttribute("2")]
public sealed virtual string get_Language();
    [NullableContextAttribute("2")]
public sealed virtual void set_Language(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Title();
    [NullableContextAttribute("2")]
public sealed virtual void set_Title(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Direction();
    [NullableContextAttribute("2")]
public sealed virtual void set_Direction(string value);
    public sealed virtual bool get_IsSpellChecked();
    public sealed virtual void set_IsSpellChecked(bool value);
    public sealed virtual int get_TabIndex();
    public sealed virtual void set_TabIndex(int value);
    public sealed virtual IStringMap get_Dataset();
    [NullableContextAttribute("2")]
public sealed virtual string get_ContentEditable();
    [NullableContextAttribute("2")]
public sealed virtual void set_ContentEditable(string value);
    public sealed virtual bool get_IsContentEditable();
    public sealed virtual bool get_IsTranslated();
    public sealed virtual void set_IsTranslated(bool value);
    public virtual IElement ParseSubtree(string html);
    public sealed virtual void DoSpellCheck();
    public virtual void DoClick();
    public virtual void DoFocus();
    public virtual void DoBlur();
    public virtual Node Clone(Document owner, bool deep);
    internal void UpdateDropZone(string value);
    protected Task`1<bool> IsClickedCancelled();
    [NullableContextAttribute("2")]
protected IHtmlFormElement GetAssignedForm();
    [NullableContextAttribute("2")]
private string GetDefaultLanguage();
    private static string Combine(string prefix, string localName);
    [CompilerGeneratedAttribute]
private void <get_DropZone>b__185_0(string value);
    [CompilerGeneratedAttribute]
private bool <IsClickedCancelled>b__226_0(CancellationToken _);
    [CompilerGeneratedAttribute]
private void <IsClickedCancelled>b__226_1(MouseEvent m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlEmbedElement : HtmlElement {
    [NullableAttribute("1")]
private ObjectRequestProcessor _request;
    public IDownload CurrentDownload { get; }
    public string Source { get; public set; }
    public string Type { get; public set; }
    public string DisplayWidth { get; public set; }
    public string DisplayHeight { get; public set; }
    [NullableContextAttribute("1")]
public HtmlEmbedElement(Document owner, string prefix);
    public sealed virtual IDownload get_CurrentDownload();
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_DisplayWidth();
    public sealed virtual void set_DisplayWidth(string value);
    public sealed virtual string get_DisplayHeight();
    public sealed virtual void set_DisplayHeight(string value);
    internal virtual void SetupElement();
    internal void UpdateSource(string value);
}
internal class AngleSharp.Html.Dom.HtmlEmphasizeElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlEmphasizeElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlFieldSetElement : HtmlFormControlElement {
    [NullableAttribute("2")]
private HtmlFormControlsCollection _elements;
    [NullableAttribute("1")]
public string Type { get; }
    [NullableAttribute("1")]
public IHtmlFormControlsCollection Elements { get; }
    [NullableContextAttribute("1")]
public HtmlFieldSetElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public sealed virtual string get_Type();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlFormControlsCollection get_Elements();
    protected virtual bool IsFieldsetDisabled();
    protected virtual bool CanBeValidated();
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlFontElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlFontElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlFormControlElement : HtmlElement {
    private NodeList _labels;
    private ValidityState _vstate;
    [NullableAttribute("2")]
private string _error;
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public IHtmlFormElement Form { get; }
    public bool IsDisabled { get; public set; }
    public bool Autofocus { get; public set; }
    public INodeList Labels { get; }
    [NullableAttribute("2")]
public string ValidationMessage { get; }
    public bool WillValidate { get; }
    public IValidityState Validity { get; }
    public HtmlFormControlElement(Document owner, string name, string prefix, NodeFlags flags);
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlFormElement get_Form();
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
    public sealed virtual bool get_Autofocus();
    public sealed virtual void set_Autofocus(bool value);
    public sealed virtual INodeList get_Labels();
    [NullableContextAttribute("2")]
public sealed virtual string get_ValidationMessage();
    public sealed virtual bool get_WillValidate();
    public sealed virtual IValidityState get_Validity();
    public virtual Node Clone(Document owner, bool deep);
    public sealed virtual bool CheckValidity();
    [NullableContextAttribute("2")]
public sealed virtual void SetCustomValidity(string error);
    protected virtual bool IsFieldsetDisabled();
    internal virtual void ConstructDataSet(FormDataSet dataSet, IHtmlElement submitter);
    internal virtual void Reset();
    protected virtual void Check(ValidityState state);
    protected void ResetValidity(ValidityState state);
    protected abstract virtual bool CanBeValidated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlFormControlElementWithState : HtmlFormControlElement {
    [CompilerGeneratedAttribute]
private bool <CanContainRangeEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldSaveAndRestoreFormControlState>k__BackingField;
    internal bool CanContainRangeEndpoint { get; private set; }
    internal bool ShouldSaveAndRestoreFormControlState { get; private set; }
    public HtmlFormControlElementWithState(Document owner, string name, string prefix, NodeFlags flags);
    [CompilerGeneratedAttribute]
internal bool get_CanContainRangeEndpoint();
    [CompilerGeneratedAttribute]
private void set_CanContainRangeEndpoint(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldSaveAndRestoreFormControlState();
    [CompilerGeneratedAttribute]
private void set_ShouldSaveAndRestoreFormControlState(bool value);
    internal abstract virtual FormControlState SaveControlState();
    internal abstract virtual void RestoreFormControlState(FormControlState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Html.Dom.HtmlFormElement : HtmlElement {
    [NullableAttribute("2")]
private HtmlFormControlsCollection _elements;
    [NullableAttribute("2")]
public IElement Item { get; }
    [NullableAttribute("2")]
public IElement Item { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public int Length { get; }
    public HtmlFormControlsCollection Elements { get; }
    private IHtmlFormControlsCollection AngleSharp.Html.Dom.IHtmlFormElement.Elements { get; }
    [NullableAttribute("2")]
public string AcceptCharset { get; public set; }
    public string Action { get; public set; }
    [NullableAttribute("2")]
public string Autocomplete { get; public set; }
    public string Enctype { get; public set; }
    public string Encoding { get; public set; }
    public string Method { get; public set; }
    public bool NoValidate { get; public set; }
    public string Target { get; public set; }
    public HtmlFormElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual IElement get_Item(int index);
    public sealed virtual IElement get_Item(string name);
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual void set_Name(string value);
    public sealed virtual int get_Length();
    public HtmlFormControlsCollection get_Elements();
    private sealed virtual override IHtmlFormControlsCollection AngleSharp.Html.Dom.IHtmlFormElement.get_Elements();
    [NullableContextAttribute("2")]
public sealed virtual string get_AcceptCharset();
    [NullableContextAttribute("2")]
public sealed virtual void set_AcceptCharset(string value);
    public sealed virtual string get_Action();
    public sealed virtual void set_Action(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Autocomplete();
    [NullableContextAttribute("2")]
public sealed virtual void set_Autocomplete(string value);
    public sealed virtual string get_Enctype();
    public sealed virtual void set_Enctype(string value);
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Method();
    public sealed virtual void set_Method(string value);
    public sealed virtual bool get_NoValidate();
    public sealed virtual void set_NoValidate(bool value);
    public sealed virtual string get_Target();
    public sealed virtual void set_Target(string value);
    public sealed virtual Task`1<IDocument> SubmitAsync();
    public sealed virtual Task`1<IDocument> SubmitAsync(IHtmlElement sourceElement);
    public sealed virtual DocumentRequest GetSubmission();
    public sealed virtual DocumentRequest GetSubmission(IHtmlElement sourceElement);
    public sealed virtual void Reset();
    public sealed virtual bool CheckValidity();
    [IteratorStateMachineAttribute("AngleSharp.Html.Dom.HtmlFormElement/<GetInvalidControls>d__45")]
private IEnumerable`1<HtmlFormControlElement> GetInvalidControls();
    public sealed virtual bool ReportValidity();
    public sealed virtual void RequestAutocomplete();
    private DocumentRequest SubmitForm(IHtmlElement from, bool submittedFromSubmitMethod);
    private DocumentRequest SubmitForm(HttpMethod method, string scheme, Url action, IHtmlElement submitter);
    private DocumentRequest PostToData(Url action, IHtmlElement submitter);
    private DocumentRequest MailWithHeaders(Url action, IHtmlElement submitter);
    private DocumentRequest MailAsBody(Url action, IHtmlElement submitter);
    private DocumentRequest GetActionUrl(Url action);
    private DocumentRequest SubmitAsEntityBody(Url url, IHtmlElement submitter);
    private DocumentRequest MutateActionUrl(Url action, IHtmlElement submitter);
    private FormDataSet ConstructDataSet(IHtmlElement submitter);
}
internal class AngleSharp.Html.Dom.HtmlFrameElement : HtmlFrameElementBase {
    public bool NoResize { get; public set; }
    [NullableContextAttribute("1")]
public HtmlFrameElement(Document owner, string prefix);
    public bool get_NoResize();
    public void set_NoResize(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlFrameElementBase : HtmlFrameOwnerElement {
    private IBrowsingContext _context;
    [NullableAttribute("1")]
private FrameRequestProcessor _request;
    public IDownload CurrentDownload { get; }
    public string Name { get; public set; }
    public string Source { get; public set; }
    public string Scrolling { get; public set; }
    public IDocument ContentDocument { get; }
    public string LongDesc { get; public set; }
    public string FrameBorder { get; public set; }
    [NullableAttribute("1")]
public IBrowsingContext NestedContext { get; }
    [NullableContextAttribute("1")]
public HtmlFrameElementBase(Document owner, string name, string prefix, NodeFlags flags);
    public sealed virtual IDownload get_CurrentDownload();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public string get_Scrolling();
    public void set_Scrolling(string value);
    public sealed virtual IDocument get_ContentDocument();
    public string get_LongDesc();
    public void set_LongDesc(string value);
    public string get_FrameBorder();
    public void set_FrameBorder(string value);
    [NullableContextAttribute("1")]
public IBrowsingContext get_NestedContext();
    [NullableContextAttribute("1")]
internal virtual string GetContentHtml();
    internal virtual void SetupElement();
    internal void UpdateSource();
    [NullableContextAttribute("1")]
private IBrowsingContext NewChildContext();
}
internal abstract class AngleSharp.Html.Dom.HtmlFrameOwnerElement : HtmlElement {
    [CompilerGeneratedAttribute]
private bool <CanContainRangeEndpoint>k__BackingField;
    public bool CanContainRangeEndpoint { get; private set; }
    public int DisplayWidth { get; public set; }
    public int DisplayHeight { get; public set; }
    public int MarginWidth { get; public set; }
    public int MarginHeight { get; public set; }
    [NullableContextAttribute("1")]
public HtmlFrameOwnerElement(Document owner, string name, string prefix, NodeFlags flags);
    [CompilerGeneratedAttribute]
public bool get_CanContainRangeEndpoint();
    [CompilerGeneratedAttribute]
private void set_CanContainRangeEndpoint(bool value);
    public sealed virtual int get_DisplayWidth();
    public sealed virtual void set_DisplayWidth(int value);
    public sealed virtual int get_DisplayHeight();
    public sealed virtual void set_DisplayHeight(int value);
    public int get_MarginWidth();
    public void set_MarginWidth(int value);
    public int get_MarginHeight();
    public void set_MarginHeight(int value);
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlFrameSetElement : HtmlElement {
    public int Columns { get; public set; }
    public int Rows { get; public set; }
    [NullableContextAttribute("1")]
public HtmlFrameSetElement(Document owner, string prefix);
    public int get_Columns();
    public void set_Columns(int value);
    public int get_Rows();
    public void set_Rows(int value);
}
internal class AngleSharp.Html.Dom.HtmlHeadElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlHeadElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlHeadingElement : HtmlElement {
    [NullableContextAttribute("2")]
public HtmlHeadingElement(Document owner, string name, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlHrElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlHrElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlHtmlElement : HtmlElement {
    [NullableAttribute("2")]
public string Manifest { get; public set; }
    [NullableContextAttribute("1")]
public HtmlHtmlElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Manifest();
    [NullableContextAttribute("2")]
public sealed virtual void set_Manifest(string value);
}
internal class AngleSharp.Html.Dom.HtmlIFrameElement : HtmlFrameElementBase {
    [NullableAttribute("2")]
private SettableTokenList _sandbox;
    public Alignment Align { get; public set; }
    [NullableAttribute("2")]
public string ContentHtml { get; public set; }
    [NullableAttribute("1")]
public ISettableTokenList Sandbox { get; }
    public bool IsSeamless { get; public set; }
    public bool IsFullscreenAllowed { get; public set; }
    public bool IsPaymentRequestAllowed { get; public set; }
    [NullableAttribute("2")]
public string ReferrerPolicy { get; public set; }
    [NullableAttribute("2")]
public IWindow ContentWindow { get; }
    [NullableContextAttribute("1")]
public HtmlIFrameElement(Document owner, string prefix);
    public Alignment get_Align();
    public void set_Align(Alignment value);
    [NullableContextAttribute("2")]
public sealed virtual string get_ContentHtml();
    [NullableContextAttribute("2")]
public sealed virtual void set_ContentHtml(string value);
    [NullableContextAttribute("1")]
public sealed virtual ISettableTokenList get_Sandbox();
    public sealed virtual bool get_IsSeamless();
    public sealed virtual void set_IsSeamless(bool value);
    public sealed virtual bool get_IsFullscreenAllowed();
    public sealed virtual void set_IsFullscreenAllowed(bool value);
    public sealed virtual bool get_IsPaymentRequestAllowed();
    public sealed virtual void set_IsPaymentRequestAllowed(bool value);
    [NullableContextAttribute("2")]
public sealed virtual string get_ReferrerPolicy();
    [NullableContextAttribute("2")]
public sealed virtual void set_ReferrerPolicy(string value);
    [NullableContextAttribute("2")]
public sealed virtual IWindow get_ContentWindow();
    [NullableContextAttribute("1")]
internal virtual string GetContentHtml();
    internal virtual void SetupElement();
    [NullableContextAttribute("1")]
internal void UpdateSandbox(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Sandbox>b__9_0(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlImageElement : HtmlElement {
    [NullableAttribute("1")]
private ImageRequestProcessor _request;
    public IDownload CurrentDownload { get; }
    [NullableAttribute("1")]
public string ActualSource { get; }
    public string SourceSet { get; public set; }
    public string Sizes { get; public set; }
    public string Source { get; public set; }
    public string AlternativeText { get; public set; }
    public string CrossOrigin { get; public set; }
    public string UseMap { get; public set; }
    public int DisplayWidth { get; public set; }
    public int DisplayHeight { get; public set; }
    public int OriginalWidth { get; }
    public int OriginalHeight { get; }
    public bool IsCompleted { get; }
    public bool IsMap { get; public set; }
    [NullableContextAttribute("1")]
public HtmlImageElement(Document owner, string prefix);
    public sealed virtual IDownload get_CurrentDownload();
    [NullableContextAttribute("1")]
public sealed virtual string get_ActualSource();
    public sealed virtual string get_SourceSet();
    public sealed virtual void set_SourceSet(string value);
    public sealed virtual string get_Sizes();
    public sealed virtual void set_Sizes(string value);
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_AlternativeText();
    public sealed virtual void set_AlternativeText(string value);
    public sealed virtual string get_CrossOrigin();
    public sealed virtual void set_CrossOrigin(string value);
    public sealed virtual string get_UseMap();
    public sealed virtual void set_UseMap(string value);
    public sealed virtual int get_DisplayWidth();
    public sealed virtual void set_DisplayWidth(int value);
    public sealed virtual int get_DisplayHeight();
    public sealed virtual void set_DisplayHeight(int value);
    public sealed virtual int get_OriginalWidth();
    public sealed virtual int get_OriginalHeight();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual bool get_IsMap();
    public sealed virtual void set_IsMap(bool value);
    internal virtual void SetupElement();
    internal void UpdateSource();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlInputElement : HtmlTextFormControlElement {
    private BaseInputType _type;
    private Nullable`1<bool> _checked;
    [CompilerGeneratedAttribute]
private bool <IsIndeterminate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [NullableAttribute("1")]
public string DefaultValue { get; public set; }
    public bool IsDefaultChecked { get; public set; }
    public bool IsChecked { get; public set; }
    [NullableAttribute("1")]
public string Type { get; public set; }
    public bool IsIndeterminate { get; public set; }
    public bool IsMultiple { get; public set; }
    public Nullable`1<DateTime> ValueAsDate { get; public set; }
    public double ValueAsNumber { get; public set; }
    public string FormAction { get; public set; }
    [NullableAttribute("1")]
public string FormEncType { get; public set; }
    [NullableAttribute("1")]
public string FormMethod { get; public set; }
    public bool FormNoValidate { get; public set; }
    [NullableAttribute("1")]
public string FormTarget { get; public set; }
    public string Accept { get; public set; }
    public Alignment Align { get; public set; }
    public string AlternativeText { get; public set; }
    public string Autocomplete { get; public set; }
    public IFileList Files { get; }
    public IHtmlDataListElement List { get; }
    public string Maximum { get; public set; }
    public string Minimum { get; public set; }
    public string Pattern { get; public set; }
    public int Size { get; public set; }
    public string Source { get; public set; }
    public string Step { get; public set; }
    public string UseMap { get; public set; }
    public int DisplayWidth { get; public set; }
    public int DisplayHeight { get; public set; }
    public int OriginalWidth { get; }
    public int OriginalHeight { get; }
    internal bool IsVisited { get; internal set; }
    internal bool IsActive { get; internal set; }
    [NullableContextAttribute("1")]
public HtmlInputElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public virtual string get_DefaultValue();
    [NullableContextAttribute("1")]
public virtual void set_DefaultValue(string value);
    public sealed virtual bool get_IsDefaultChecked();
    public sealed virtual void set_IsDefaultChecked(bool value);
    public sealed virtual bool get_IsChecked();
    public sealed virtual void set_IsChecked(bool value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Type();
    [NullableContextAttribute("1")]
public sealed virtual void set_Type(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsIndeterminate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsIndeterminate(bool value);
    public sealed virtual bool get_IsMultiple();
    public sealed virtual void set_IsMultiple(bool value);
    public sealed virtual Nullable`1<DateTime> get_ValueAsDate();
    public sealed virtual void set_ValueAsDate(Nullable`1<DateTime> value);
    public sealed virtual double get_ValueAsNumber();
    public sealed virtual void set_ValueAsNumber(double value);
    public sealed virtual string get_FormAction();
    public sealed virtual void set_FormAction(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_FormEncType();
    [NullableContextAttribute("1")]
public sealed virtual void set_FormEncType(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_FormMethod();
    [NullableContextAttribute("1")]
public sealed virtual void set_FormMethod(string value);
    public sealed virtual bool get_FormNoValidate();
    public sealed virtual void set_FormNoValidate(bool value);
    [NullableContextAttribute("1")]
public sealed virtual string get_FormTarget();
    [NullableContextAttribute("1")]
public sealed virtual void set_FormTarget(string value);
    public sealed virtual string get_Accept();
    public sealed virtual void set_Accept(string value);
    public Alignment get_Align();
    public void set_Align(Alignment value);
    public sealed virtual string get_AlternativeText();
    public sealed virtual void set_AlternativeText(string value);
    public sealed virtual string get_Autocomplete();
    public sealed virtual void set_Autocomplete(string value);
    public sealed virtual IFileList get_Files();
    public sealed virtual IHtmlDataListElement get_List();
    public sealed virtual string get_Maximum();
    public sealed virtual void set_Maximum(string value);
    public sealed virtual string get_Minimum();
    public sealed virtual void set_Minimum(string value);
    public sealed virtual string get_Pattern();
    public sealed virtual void set_Pattern(string value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_Step();
    public sealed virtual void set_Step(string value);
    public string get_UseMap();
    public void set_UseMap(string value);
    public sealed virtual int get_DisplayWidth();
    public sealed virtual void set_DisplayWidth(int value);
    public sealed virtual int get_DisplayHeight();
    public sealed virtual void set_DisplayHeight(int value);
    public int get_OriginalWidth();
    public int get_OriginalHeight();
    [CompilerGeneratedAttribute]
internal bool get_IsVisited();
    [CompilerGeneratedAttribute]
internal void set_IsVisited(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal void set_IsActive(bool value);
    [NullableContextAttribute("1")]
public sealed virtual Node Clone(Document owner, bool deep);
    [AsyncStateMachineAttribute("AngleSharp.Html.Dom.HtmlInputElement/<DoClick>d__99")]
public virtual void DoClick();
    [NullableContextAttribute("1")]
internal virtual FormControlState SaveControlState();
    [NullableContextAttribute("1")]
internal virtual void RestoreFormControlState(FormControlState state);
    public sealed virtual void StepUp(int n);
    public sealed virtual void StepDown(int n);
    internal virtual void SetupElement();
    [NullableContextAttribute("1")]
internal void UpdateType(string value);
    [NullableContextAttribute("1")]
internal virtual void ConstructDataSet(FormDataSet dataSet, IHtmlElement submitter);
    internal virtual void Reset();
    [NullableContextAttribute("1")]
protected virtual void Check(ValidityState state);
    protected virtual bool CanBeValidated();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlIsIndexElement : HtmlElement {
    [CompilerGeneratedAttribute]
private IHtmlFormElement <Form>k__BackingField;
    public IHtmlFormElement Form { get; internal set; }
    public string Prompt { get; public set; }
    [NullableContextAttribute("1")]
public HtmlIsIndexElement(Document owner, string prefix);
    [CompilerGeneratedAttribute]
public IHtmlFormElement get_Form();
    [CompilerGeneratedAttribute]
internal void set_Form(IHtmlFormElement value);
    public string get_Prompt();
    public void set_Prompt(string value);
}
internal class AngleSharp.Html.Dom.HtmlItalicElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlItalicElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlKeygenElement : HtmlFormControlElementWithState {
    [NullableAttribute("2")]
public string Challenge { get; public set; }
    [NullableAttribute("2")]
public string KeyEncryption { get; public set; }
    [NullableAttribute("1")]
public string Type { get; }
    [NullableContextAttribute("1")]
public HtmlKeygenElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Challenge();
    [NullableContextAttribute("2")]
public sealed virtual void set_Challenge(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_KeyEncryption();
    [NullableContextAttribute("2")]
public sealed virtual void set_KeyEncryption(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Type();
    [NullableContextAttribute("1")]
internal virtual FormControlState SaveControlState();
    [NullableContextAttribute("1")]
internal virtual void RestoreFormControlState(FormControlState state);
    protected virtual bool CanBeValidated();
}
internal class AngleSharp.Html.Dom.HtmlLabelElement : HtmlElement {
    [NullableAttribute("2")]
public IHtmlElement Control { get; }
    [NullableAttribute("2")]
public string HtmlFor { get; public set; }
    [NullableAttribute("2")]
public IHtmlFormElement Form { get; }
    [NullableContextAttribute("1")]
public HtmlLabelElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlElement get_Control();
    [NullableContextAttribute("2")]
public sealed virtual string get_HtmlFor();
    [NullableContextAttribute("2")]
public sealed virtual void set_HtmlFor(string value);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlFormElement get_Form();
}
internal class AngleSharp.Html.Dom.HtmlLegendElement : HtmlElement {
    [NullableAttribute("2")]
public IHtmlFormElement Form { get; }
    [NullableContextAttribute("1")]
public HtmlLegendElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlFormElement get_Form();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlLinkElement : HtmlElement {
    private BaseLinkRelation _relation;
    private TokenList _relList;
    private SettableTokenList _sizes;
    private string _source;
    private bool _relationLoaded;
    [CompilerGeneratedAttribute]
private bool <IsVisited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    internal bool IsVisited { get; internal set; }
    internal bool IsActive { get; internal set; }
    public IDownload CurrentDownload { get; }
    public string Href { get; public set; }
    public string TargetLanguage { get; public set; }
    public string Charset { get; public set; }
    public string Relation { get; public set; }
    public string ReverseRelation { get; public set; }
    public string NumberUsedOnce { get; public set; }
    [NullableAttribute("1")]
public ITokenList RelationList { get; }
    [NullableAttribute("1")]
public ISettableTokenList Sizes { get; }
    public string Rev { get; public set; }
    public bool IsDisabled { get; public set; }
    public string Target { get; public set; }
    public string Media { get; public set; }
    public string Type { get; public set; }
    public string Integrity { get; public set; }
    public IStyleSheet Sheet { get; }
    public IDocument Import { get; }
    public string CrossOrigin { get; public set; }
    [NullableContextAttribute("1")]
public HtmlLinkElement(Document owner, string prefix);
    [CompilerGeneratedAttribute]
internal bool get_IsVisited();
    [CompilerGeneratedAttribute]
internal void set_IsVisited(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal void set_IsActive(bool value);
    public sealed virtual IDownload get_CurrentDownload();
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_TargetLanguage();
    public sealed virtual void set_TargetLanguage(string value);
    public string get_Charset();
    public void set_Charset(string value);
    public sealed virtual string get_Relation();
    public sealed virtual void set_Relation(string value);
    public sealed virtual string get_ReverseRelation();
    public sealed virtual void set_ReverseRelation(string value);
    public sealed virtual string get_NumberUsedOnce();
    public sealed virtual void set_NumberUsedOnce(string value);
    [NullableContextAttribute("1")]
public sealed virtual ITokenList get_RelationList();
    [NullableContextAttribute("1")]
public sealed virtual ISettableTokenList get_Sizes();
    public string get_Rev();
    public void set_Rev(string value);
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
    public string get_Target();
    public void set_Target(string value);
    public sealed virtual string get_Media();
    public sealed virtual void set_Media(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_Integrity();
    public sealed virtual void set_Integrity(string value);
    public sealed virtual IStyleSheet get_Sheet();
    public sealed virtual IDocument get_Import();
    public sealed virtual string get_CrossOrigin();
    public sealed virtual void set_CrossOrigin(string value);
    [NullableContextAttribute("1")]
internal void UpdateRel(string value);
    [NullableContextAttribute("1")]
internal void UpdateSizes(string value);
    [NullableContextAttribute("1")]
internal void UpdateMedia(string value);
    [NullableContextAttribute("1")]
internal void UpdateDisabled(string value);
    [NullableContextAttribute("1")]
internal void UpdateSource(string value);
    protected virtual void OnParentChanged();
    internal void LoadRelation();
    private BaseLinkRelation CreateFirstLegalRelation();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_RelationList>b__35_0(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Sizes>b__37_0(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Html.Dom.HtmlLinkElementExtensions : object {
    [ExtensionAttribute]
public static bool IsPersistent(IHtmlLinkElement link);
    [ExtensionAttribute]
public static bool IsPreferred(IHtmlLinkElement link);
    [ExtensionAttribute]
public static bool IsAlternate(IHtmlLinkElement link);
}
internal class AngleSharp.Html.Dom.HtmlListItemElement : HtmlElement {
    public Nullable`1<int> Value { get; public set; }
    [NullableContextAttribute("2")]
public HtmlListItemElement(Document owner, string name, string prefix);
    public sealed virtual Nullable`1<int> get_Value();
    public sealed virtual void set_Value(Nullable`1<int> value);
}
internal class AngleSharp.Html.Dom.HtmlMapElement : HtmlElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlAreaElement> _areas;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlImageElement> _images;
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlAreaElement> Areas { get; }
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlImageElement> Images { get; }
    [NullableContextAttribute("1")]
public HtmlMapElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlAreaElement> get_Areas();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlImageElement> get_Images();
    [NullableContextAttribute("1")]
private bool IsAssociatedImage(IHtmlImageElement image);
}
[DomHistoricalAttribute]
internal class AngleSharp.Html.Dom.HtmlMarqueeElement : HtmlElement {
    [CompilerGeneratedAttribute]
private int <MinimumDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScrollAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScrollDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Loop>k__BackingField;
    public int MinimumDelay { get; private set; }
    public int ScrollAmount { get; public set; }
    public int ScrollDelay { get; public set; }
    public int Loop { get; public set; }
    [NullableContextAttribute("1")]
public HtmlMarqueeElement(Document owner, string prefix);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MinimumDelay();
    [CompilerGeneratedAttribute]
private void set_MinimumDelay(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ScrollAmount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScrollAmount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ScrollDelay();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScrollDelay(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Loop();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Loop(int value);
    public void Start();
    public void Stop();
    [CompilerGeneratedAttribute]
private void <Start>b__17_0();
    [CompilerGeneratedAttribute]
private void <Stop>b__18_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlMediaElement`1 : HtmlElement {
    [NullableAttribute("1")]
private MediaRequestProcessor`1<TResource> _request;
    private ITextTrackList _texts;
    [CompilerGeneratedAttribute]
private bool <IsSeeking>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaError <MediaError>k__BackingField;
    public IDownload CurrentDownload { get; }
    public string Source { get; public set; }
    public string CrossOrigin { get; public set; }
    public string Preload { get; public set; }
    public MediaNetworkState NetworkState { get; }
    public TResource Media { get; }
    public MediaReadyState ReadyState { get; }
    public bool IsSeeking { get; protected set; }
    public string CurrentSource { get; }
    public double Duration { get; }
    public double CurrentTime { get; public set; }
    public bool IsAutoplay { get; public set; }
    public bool IsLoop { get; public set; }
    public bool IsShowingControls { get; public set; }
    public bool IsDefaultMuted { get; public set; }
    public bool IsPaused { get; }
    public bool IsEnded { get; }
    public DateTime StartDate { get; }
    public ITimeRanges BufferedTime { get; }
    public ITimeRanges SeekableTime { get; }
    public ITimeRanges PlayedTime { get; }
    public string MediaGroup { get; public set; }
    public double Volume { get; public set; }
    public bool IsMuted { get; public set; }
    public IMediaController Controller { get; }
    public double DefaultPlaybackRate { get; public set; }
    public double PlaybackRate { get; public set; }
    public MediaControllerPlaybackState PlaybackState { get; }
    public IMediaError MediaError { get; private set; }
    public IAudioTrackList AudioTracks { get; }
    public IVideoTrackList VideoTracks { get; }
    public ITextTrackList TextTracks { get; protected set; }
    [NullableContextAttribute("1")]
public HtmlMediaElement`1(Document owner, string name, string prefix);
    public sealed virtual IDownload get_CurrentDownload();
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_CrossOrigin();
    public sealed virtual void set_CrossOrigin(string value);
    public sealed virtual string get_Preload();
    public sealed virtual void set_Preload(string value);
    public sealed virtual MediaNetworkState get_NetworkState();
    public TResource get_Media();
    public sealed virtual MediaReadyState get_ReadyState();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSeeking();
    [CompilerGeneratedAttribute]
protected void set_IsSeeking(bool value);
    public sealed virtual string get_CurrentSource();
    public sealed virtual double get_Duration();
    public sealed virtual double get_CurrentTime();
    public sealed virtual void set_CurrentTime(double value);
    public sealed virtual bool get_IsAutoplay();
    public sealed virtual void set_IsAutoplay(bool value);
    public sealed virtual bool get_IsLoop();
    public sealed virtual void set_IsLoop(bool value);
    public sealed virtual bool get_IsShowingControls();
    public sealed virtual void set_IsShowingControls(bool value);
    public sealed virtual bool get_IsDefaultMuted();
    public sealed virtual void set_IsDefaultMuted(bool value);
    public sealed virtual bool get_IsPaused();
    public sealed virtual bool get_IsEnded();
    public sealed virtual DateTime get_StartDate();
    public sealed virtual ITimeRanges get_BufferedTime();
    public sealed virtual ITimeRanges get_SeekableTime();
    public sealed virtual ITimeRanges get_PlayedTime();
    public sealed virtual string get_MediaGroup();
    public sealed virtual void set_MediaGroup(string value);
    public sealed virtual double get_Volume();
    public sealed virtual void set_Volume(double value);
    public sealed virtual bool get_IsMuted();
    public sealed virtual void set_IsMuted(bool value);
    public sealed virtual IMediaController get_Controller();
    public sealed virtual double get_DefaultPlaybackRate();
    public sealed virtual void set_DefaultPlaybackRate(double value);
    public sealed virtual double get_PlaybackRate();
    public sealed virtual void set_PlaybackRate(double value);
    public sealed virtual MediaControllerPlaybackState get_PlaybackState();
    [CompilerGeneratedAttribute]
public sealed virtual IMediaError get_MediaError();
    [CompilerGeneratedAttribute]
private void set_MediaError(IMediaError value);
    public virtual IAudioTrackList get_AudioTracks();
    public virtual IVideoTrackList get_VideoTracks();
    public sealed virtual ITextTrackList get_TextTracks();
    protected void set_TextTracks(ITextTrackList value);
    public sealed virtual void Load();
    public sealed virtual void Play();
    public sealed virtual void Pause();
    [NullableContextAttribute("1")]
public sealed virtual string CanPlayType(string type);
    [NullableContextAttribute("1")]
public sealed virtual ITextTrack AddTextTrack(string kind, string label, string language);
    internal virtual void SetupElement();
    internal void UpdateSource(string value);
}
internal class AngleSharp.Html.Dom.HtmlMenuElement : HtmlElement {
    [NullableAttribute("2")]
public string Type { get; public set; }
    [NullableAttribute("2")]
public string Label { get; public set; }
    [NullableContextAttribute("1")]
public HtmlMenuElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Type();
    [NullableContextAttribute("2")]
public sealed virtual void set_Type(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Label();
    [NullableContextAttribute("2")]
public sealed virtual void set_Label(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlMenuItemElement : HtmlElement {
    public IHtmlElement Command { get; }
    public string Type { get; public set; }
    public string Label { get; public set; }
    public string Icon { get; public set; }
    public bool IsDisabled { get; public set; }
    public bool IsChecked { get; public set; }
    public bool IsDefault { get; public set; }
    public string RadioGroup { get; public set; }
    [NullableContextAttribute("1")]
public HtmlMenuItemElement(Document owner, string prefix);
    public sealed virtual IHtmlElement get_Command();
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public sealed virtual string get_Icon();
    public sealed virtual void set_Icon(string value);
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
    public sealed virtual bool get_IsChecked();
    public sealed virtual void set_IsChecked(bool value);
    public sealed virtual bool get_IsDefault();
    public sealed virtual void set_IsDefault(bool value);
    public sealed virtual string get_RadioGroup();
    public sealed virtual void set_RadioGroup(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlMetaElement : HtmlElement {
    public string Content { get; public set; }
    public string Charset { get; public set; }
    public string HttpEquivalent { get; public set; }
    public string Scheme { get; public set; }
    public string Name { get; public set; }
    [NullableContextAttribute("1")]
public HtmlMetaElement(Document owner, string prefix);
    public sealed virtual string get_Content();
    public sealed virtual void set_Content(string value);
    public sealed virtual string get_Charset();
    public sealed virtual void set_Charset(string value);
    public sealed virtual string get_HttpEquivalent();
    public sealed virtual void set_HttpEquivalent(string value);
    public string get_Scheme();
    public void set_Scheme(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual void Handle();
}
internal class AngleSharp.Html.Dom.HtmlMeterElement : HtmlElement {
    [NullableAttribute("1")]
private NodeList _labels;
    [NullableAttribute("1")]
public INodeList Labels { get; }
    public double Value { get; public set; }
    public double Maximum { get; public set; }
    public double Minimum { get; public set; }
    public double Low { get; public set; }
    public double High { get; public set; }
    public double Optimum { get; public set; }
    [NullableContextAttribute("1")]
public HtmlMeterElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public sealed virtual INodeList get_Labels();
    public sealed virtual double get_Value();
    public sealed virtual void set_Value(double value);
    public sealed virtual double get_Maximum();
    public sealed virtual void set_Maximum(double value);
    public sealed virtual double get_Minimum();
    public sealed virtual void set_Minimum(double value);
    public sealed virtual double get_Low();
    public sealed virtual void set_Low(double value);
    public sealed virtual double get_High();
    public sealed virtual void set_High(double value);
    public sealed virtual double get_Optimum();
    public sealed virtual void set_Optimum(double value);
}
internal class AngleSharp.Html.Dom.HtmlModElement : HtmlElement {
    [NullableAttribute("2")]
public string Citation { get; public set; }
    [NullableAttribute("2")]
public string DateTime { get; public set; }
    [NullableContextAttribute("2")]
public HtmlModElement(Document owner, string name, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Citation();
    [NullableContextAttribute("2")]
public sealed virtual void set_Citation(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_DateTime();
    [NullableContextAttribute("2")]
public sealed virtual void set_DateTime(string value);
}
internal class AngleSharp.Html.Dom.HtmlNoEmbedElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlNoEmbedElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlNoFramesElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlNoFramesElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlNoNewlineElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlNoNewlineElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlNoScriptElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlNoScriptElement(Document owner, string prefix, Nullable`1<bool> scripting);
    private static NodeFlags GetFlags(bool scripting);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlObjectElement : HtmlFormControlElement {
    [NullableAttribute("1")]
private ObjectRequestProcessor _request;
    public IDownload CurrentDownload { get; }
    public string Source { get; public set; }
    public string Type { get; public set; }
    public bool TypeMustMatch { get; public set; }
    public string UseMap { get; public set; }
    public int DisplayWidth { get; public set; }
    public int DisplayHeight { get; public set; }
    public int OriginalWidth { get; }
    public int OriginalHeight { get; }
    public IDocument ContentDocument { get; }
    public IWindow ContentWindow { get; }
    [NullableContextAttribute("1")]
public HtmlObjectElement(Document owner, string prefix);
    public sealed virtual IDownload get_CurrentDownload();
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual bool get_TypeMustMatch();
    public sealed virtual void set_TypeMustMatch(bool value);
    public sealed virtual string get_UseMap();
    public sealed virtual void set_UseMap(string value);
    public sealed virtual int get_DisplayWidth();
    public sealed virtual void set_DisplayWidth(int value);
    public sealed virtual int get_DisplayHeight();
    public sealed virtual void set_DisplayHeight(int value);
    public int get_OriginalWidth();
    public int get_OriginalHeight();
    public sealed virtual IDocument get_ContentDocument();
    public sealed virtual IWindow get_ContentWindow();
    protected virtual bool CanBeValidated();
    internal virtual void SetupElement();
    internal void UpdateSource(string value);
}
internal class AngleSharp.Html.Dom.HtmlOptionElement : HtmlElement {
    private Nullable`1<bool> _selected;
    public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("1")]
public string Label { get; public set; }
    [NullableAttribute("1")]
public string Value { get; public set; }
    public int Index { get; }
    [NullableAttribute("1")]
public string Text { get; public set; }
    public bool IsDefaultSelected { get; public set; }
    public bool IsSelected { get; public set; }
    [NullableContextAttribute("1")]
public HtmlOptionElement(Document owner, string prefix);
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public sealed virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("1")]
public sealed virtual string get_Label();
    [NullableContextAttribute("1")]
public sealed virtual void set_Label(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Value();
    [NullableContextAttribute("1")]
public sealed virtual void set_Value(string value);
    public sealed virtual int get_Index();
    [NullableContextAttribute("1")]
public sealed virtual string get_Text();
    [NullableContextAttribute("1")]
public sealed virtual void set_Text(string value);
    public sealed virtual bool get_IsDefaultSelected();
    public sealed virtual void set_IsDefaultSelected(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
}
internal class AngleSharp.Html.Dom.HtmlOptionsGroupElement : HtmlElement {
    [NullableAttribute("2")]
public string Label { get; public set; }
    public bool IsDisabled { get; public set; }
    [NullableContextAttribute("1")]
public HtmlOptionsGroupElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Label();
    [NullableContextAttribute("2")]
public sealed virtual void set_Label(string value);
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
}
internal class AngleSharp.Html.Dom.HtmlOrderedListElement : HtmlElement {
    public bool IsReversed { get; public set; }
    public int Start { get; public set; }
    [NullableAttribute("2")]
public string Type { get; public set; }
    [NullableContextAttribute("1")]
public HtmlOrderedListElement(Document owner, string prefix);
    public sealed virtual bool get_IsReversed();
    public sealed virtual void set_IsReversed(bool value);
    public sealed virtual int get_Start();
    public sealed virtual void set_Start(int value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Type();
    [NullableContextAttribute("2")]
public sealed virtual void set_Type(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlOutputElement : HtmlFormControlElement {
    [NullableAttribute("2")]
private string _defaultValue;
    [NullableAttribute("2")]
private string _value;
    [NullableAttribute("2")]
private SettableTokenList _for;
    public string DefaultValue { get; public set; }
    public string TextContent { get; public set; }
    public string Value { get; public set; }
    public ISettableTokenList HtmlFor { get; }
    public string Type { get; }
    public HtmlOutputElement(Document owner, string prefix);
    public sealed virtual string get_DefaultValue();
    public sealed virtual void set_DefaultValue(string value);
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual ISettableTokenList get_HtmlFor();
    public sealed virtual string get_Type();
    internal virtual void Reset();
    internal void UpdateFor(string value);
    protected virtual bool CanBeValidated();
    [CompilerGeneratedAttribute]
private void <get_HtmlFor>b__14_0(string value);
}
internal class AngleSharp.Html.Dom.HtmlParagraphElement : HtmlElement {
    public HorizontalAlignment Align { get; public set; }
    [NullableContextAttribute("1")]
public HtmlParagraphElement(Document owner, string prefix);
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
}
internal class AngleSharp.Html.Dom.HtmlParamElement : HtmlElement {
    [NullableAttribute("2")]
public string Value { get; public set; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableContextAttribute("1")]
public HtmlParamElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void set_Value(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual void set_Name(string value);
}
internal class AngleSharp.Html.Dom.HtmlPictureElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlPictureElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlPlaintextElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlPlaintextElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlPreElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlPreElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlProgressElement : HtmlElement {
    [NullableAttribute("1")]
private NodeList _labels;
    [NullableAttribute("1")]
public INodeList Labels { get; }
    public bool IsDeterminate { get; }
    public double Value { get; public set; }
    public double Maximum { get; public set; }
    public double Position { get; }
    [NullableContextAttribute("1")]
public HtmlProgressElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public sealed virtual INodeList get_Labels();
    public bool get_IsDeterminate();
    public sealed virtual double get_Value();
    public sealed virtual void set_Value(double value);
    public sealed virtual double get_Maximum();
    public sealed virtual void set_Maximum(double value);
    public sealed virtual double get_Position();
}
internal class AngleSharp.Html.Dom.HtmlQuoteElement : HtmlElement {
    [NullableAttribute("2")]
public string Citation { get; public set; }
    [NullableContextAttribute("2")]
public HtmlQuoteElement(Document owner, string name, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Citation();
    [NullableContextAttribute("2")]
public sealed virtual void set_Citation(string value);
}
internal class AngleSharp.Html.Dom.HtmlRbElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlRbElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlRpElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlRpElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlRtcElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlRtcElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlRtElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlRtElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlRubyElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlRubyElement(Document owner, string prefix);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlScriptElement : HtmlElement {
    private bool _parserInserted;
    [NullableAttribute("1")]
private ScriptRequestProcessor _request;
    private bool _started;
    private bool _forceAsync;
    public IDownload CurrentDownload { get; }
    public string Source { get; public set; }
    public string Type { get; public set; }
    public string CharacterSet { get; public set; }
    [NullableAttribute("1")]
public string Text { get; public set; }
    public string CrossOrigin { get; public set; }
    public bool IsDeferred { get; public set; }
    public bool IsAsync { get; public set; }
    public string Integrity { get; public set; }
    [NullableContextAttribute("1")]
public HtmlScriptElement(Document owner, string prefix, bool parserInserted, bool started);
    public sealed virtual IDownload get_CurrentDownload();
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_CharacterSet();
    public sealed virtual void set_CharacterSet(string value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Text();
    [NullableContextAttribute("1")]
public sealed virtual void set_Text(string value);
    public sealed virtual string get_CrossOrigin();
    public sealed virtual void set_CrossOrigin(string value);
    public sealed virtual bool get_IsDeferred();
    public sealed virtual void set_IsDeferred(bool value);
    public sealed virtual bool get_IsAsync();
    public sealed virtual void set_IsAsync(bool value);
    public sealed virtual string get_Integrity();
    public sealed virtual void set_Integrity(string value);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
    protected virtual void OnParentChanged();
    [NullableContextAttribute("1")]
internal Task RunAsync(CancellationToken cancel);
    [NullableContextAttribute("1")]
internal bool Prepare(Document document);
    [NullableContextAttribute("1")]
private bool InvokeLoadingScript(Document document, Url url);
    private void FireErrorEvent();
    [NullableContextAttribute("1")]
private sealed virtual override Task AngleSharp.Html.Construction.IConstructableScriptElement.RunAsync(CancellationToken cancel);
    [NullableContextAttribute("1")]
private sealed virtual override bool AngleSharp.Html.Construction.IConstructableScriptElement.Prepare(IConstructableDocument document);
    [CompilerGeneratedAttribute]
private void <FireErrorEvent>b__36_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Html.Dom.HtmlSelectElement : HtmlFormControlElementWithState {
    [NullableAttribute("2")]
private OptionsCollection _options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlOptionElement> _selected;
    public IHtmlOptionElement Item { get; public set; }
    public int Size { get; public set; }
    public bool IsRequired { get; public set; }
    public IHtmlCollection`1<IHtmlOptionElement> SelectedOptions { get; }
    public int SelectedIndex { get; }
    [NullableAttribute("2")]
public string Value { get; public set; }
    public int Length { get; }
    public bool IsMultiple { get; public set; }
    public IHtmlOptionsCollection Options { get; }
    public string Type { get; }
    public HtmlSelectElement(Document owner, string prefix);
    public sealed virtual IHtmlOptionElement get_Item(int index);
    public sealed virtual void set_Item(int index, IHtmlOptionElement value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    public sealed virtual bool get_IsRequired();
    public sealed virtual void set_IsRequired(bool value);
    public sealed virtual IHtmlCollection`1<IHtmlOptionElement> get_SelectedOptions();
    public sealed virtual int get_SelectedIndex();
    [NullableContextAttribute("2")]
public sealed virtual string get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void set_Value(string value);
    public sealed virtual int get_Length();
    public sealed virtual bool get_IsMultiple();
    public sealed virtual void set_IsMultiple(bool value);
    public sealed virtual IHtmlOptionsCollection get_Options();
    public sealed virtual string get_Type();
    public sealed virtual void AddOption(IHtmlOptionElement element, IHtmlElement before);
    public sealed virtual void AddOption(IHtmlOptionsGroupElement element, IHtmlElement before);
    public sealed virtual void RemoveOptionAt(int index);
    internal virtual FormControlState SaveControlState();
    internal virtual void RestoreFormControlState(FormControlState state);
    internal virtual void ConstructDataSet(FormDataSet dataSet, IHtmlElement submitter);
    [NullableContextAttribute("2")]
private IHtmlOptionElement GetDefaultOptionOrNull();
    internal virtual void SetupElement();
    internal virtual void Reset();
    internal void UpdateValue(string value);
    protected virtual bool CanBeValidated();
    protected virtual void Check(ValidityState state);
}
internal class AngleSharp.Html.Dom.HtmlSemanticElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlSemanticElement(Document owner, string name, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlSlotElement : HtmlElement {
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableContextAttribute("1")]
public HtmlSlotElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<INode> GetDistributedNodes();
    [NullableContextAttribute("1")]
private static IElement GetAssignedSlot(INode node);
}
internal class AngleSharp.Html.Dom.HtmlSmallElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlSmallElement(Document owner, string prefix);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlSourceElement : HtmlElement {
    public string Source { get; public set; }
    public string Media { get; public set; }
    public string Type { get; public set; }
    public string SourceSet { get; public set; }
    public string Sizes { get; public set; }
    [NullableContextAttribute("1")]
public HtmlSourceElement(Document owner, string prefix);
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_Media();
    public sealed virtual void set_Media(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_SourceSet();
    public sealed virtual void set_SourceSet(string value);
    public sealed virtual string get_Sizes();
    public sealed virtual void set_Sizes(string value);
}
internal class AngleSharp.Html.Dom.HtmlSpanElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlSpanElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlStrikeElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlStrikeElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlStrongElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlStrongElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlStruckElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlStruckElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlStyleElement : HtmlElement {
    [NullableAttribute("2")]
private IStyleSheet _sheet;
    public bool IsScoped { get; public set; }
    [NullableAttribute("2")]
public IStyleSheet Sheet { get; }
    public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
public string Media { get; public set; }
    [NullableAttribute("2")]
public string Type { get; public set; }
    [NullableContextAttribute("1")]
public HtmlStyleElement(Document owner, string prefix);
    public sealed virtual bool get_IsScoped();
    public sealed virtual void set_IsScoped(bool value);
    [NullableContextAttribute("2")]
public sealed virtual IStyleSheet get_Sheet();
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Media();
    [NullableContextAttribute("2")]
public sealed virtual void set_Media(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Type();
    [NullableContextAttribute("2")]
public sealed virtual void set_Type(string value);
    internal virtual void SetupElement();
    [NullableContextAttribute("1")]
internal void UpdateMedia(string value);
    [NullableContextAttribute("1")]
protected virtual void NodeIsInserted(Node newNode);
    [NullableContextAttribute("1")]
protected virtual void NodeIsRemoved(Node removedNode, Node oldPreviousSibling);
    private void UpdateSheet();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("AngleSharp.Html.Dom.HtmlStyleElement/<CreateSheetAsync>d__21")]
private Task CreateSheetAsync(IStylingService engine, IDocument document);
    [CompilerGeneratedAttribute]
private void <CreateSheetAsync>b__21_0(VirtualResponse res);
}
internal class AngleSharp.Html.Dom.HtmlTableCaptionElement : HtmlElement {
    [NullableAttribute("1")]
public string Align { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTableCaptionElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public string get_Align();
    [NullableContextAttribute("1")]
public void set_Align(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlTableCellElement : HtmlElement {
    private SettableTokenList _headers;
    public int Index { get; }
    public HorizontalAlignment Align { get; public set; }
    public VerticalAlignment VAlign { get; public set; }
    public string BgColor { get; public set; }
    public string Width { get; public set; }
    public string Height { get; public set; }
    public int ColumnSpan { get; public set; }
    public int RowSpan { get; public set; }
    public bool NoWrap { get; public set; }
    public string Abbr { get; public set; }
    public string Scope { get; public set; }
    [NullableAttribute("1")]
public ISettableTokenList Headers { get; }
    public string Axis { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTableCellElement(Document owner, string name, string prefix);
    public sealed virtual int get_Index();
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
    public VerticalAlignment get_VAlign();
    public void set_VAlign(VerticalAlignment value);
    public string get_BgColor();
    public void set_BgColor(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_Height();
    public void set_Height(string value);
    public sealed virtual int get_ColumnSpan();
    public sealed virtual void set_ColumnSpan(int value);
    public sealed virtual int get_RowSpan();
    public sealed virtual void set_RowSpan(int value);
    public bool get_NoWrap();
    public void set_NoWrap(bool value);
    public string get_Abbr();
    public void set_Abbr(string value);
    public sealed virtual string get_Scope();
    public sealed virtual void set_Scope(string value);
    [NullableContextAttribute("1")]
public sealed virtual ISettableTokenList get_Headers();
    public string get_Axis();
    public void set_Axis(string value);
    [NullableContextAttribute("1")]
internal void UpdateHeaders(string value);
    private static int LimitColSpan(int value);
    private static int LimitRowSpan(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Headers>b__35_0(string value);
}
internal class AngleSharp.Html.Dom.HtmlTableColElement : HtmlElement {
    public HorizontalAlignment Align { get; public set; }
    public int Span { get; public set; }
    public VerticalAlignment VAlign { get; public set; }
    [NullableAttribute("2")]
public string Width { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTableColElement(Document owner, string prefix);
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
    public sealed virtual int get_Span();
    public sealed virtual void set_Span(int value);
    public VerticalAlignment get_VAlign();
    public void set_VAlign(VerticalAlignment value);
    [NullableContextAttribute("2")]
public string get_Width();
    [NullableContextAttribute("2")]
public void set_Width(string value);
}
internal class AngleSharp.Html.Dom.HtmlTableColgroupElement : HtmlElement {
    public HorizontalAlignment Align { get; public set; }
    public int Span { get; public set; }
    public VerticalAlignment VAlign { get; public set; }
    [NullableAttribute("2")]
public string Width { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTableColgroupElement(Document owner, string prefix);
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
    public sealed virtual int get_Span();
    public sealed virtual void set_Span(int value);
    public VerticalAlignment get_VAlign();
    public void set_VAlign(VerticalAlignment value);
    [NullableContextAttribute("2")]
public string get_Width();
    [NullableContextAttribute("2")]
public void set_Width(string value);
}
internal class AngleSharp.Html.Dom.HtmlTableDataCellElement : HtmlTableCellElement {
    [NullableContextAttribute("1")]
public HtmlTableDataCellElement(Document owner, string prefix);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlTableElement : HtmlElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlTableSectionElement> _bodies;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlTableRowElement> _rows;
    public IHtmlTableCaptionElement Caption { get; public set; }
    public IHtmlTableSectionElement Head { get; public set; }
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlTableSectionElement> Bodies { get; }
    public IHtmlTableSectionElement Foot { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IHtmlTableRowElement> AllRows { get; }
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlTableRowElement> Rows { get; }
    public HorizontalAlignment Align { get; public set; }
    public string BgColor { get; public set; }
    public UInt32 Border { get; public set; }
    public int CellPadding { get; public set; }
    public int CellSpacing { get; public set; }
    public TableFrames Frame { get; public set; }
    public TableRules Rules { get; public set; }
    public string Summary { get; public set; }
    public string Width { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTableElement(Document owner, string prefix);
    public sealed virtual IHtmlTableCaptionElement get_Caption();
    public sealed virtual void set_Caption(IHtmlTableCaptionElement value);
    public sealed virtual IHtmlTableSectionElement get_Head();
    public sealed virtual void set_Head(IHtmlTableSectionElement value);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlTableSectionElement> get_Bodies();
    public sealed virtual IHtmlTableSectionElement get_Foot();
    public sealed virtual void set_Foot(IHtmlTableSectionElement value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("AngleSharp.Html.Dom.HtmlTableElement/<get_AllRows>d__15")]
public IEnumerable`1<IHtmlTableRowElement> get_AllRows();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlTableRowElement> get_Rows();
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
    public string get_BgColor();
    public void set_BgColor(string value);
    public sealed virtual UInt32 get_Border();
    public sealed virtual void set_Border(UInt32 value);
    public int get_CellPadding();
    public void set_CellPadding(int value);
    public int get_CellSpacing();
    public void set_CellSpacing(int value);
    public TableFrames get_Frame();
    public void set_Frame(TableFrames value);
    public TableRules get_Rules();
    public void set_Rules(TableRules value);
    public string get_Summary();
    public void set_Summary(string value);
    public string get_Width();
    public void set_Width(string value);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableRowElement InsertRowAt(int index);
    public sealed virtual void RemoveRowAt(int index);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableSectionElement CreateHead();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableSectionElement CreateBody();
    public sealed virtual void DeleteHead();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableSectionElement CreateFoot();
    public sealed virtual void DeleteFoot();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableCaptionElement CreateCaption();
    public sealed virtual void DeleteCaption();
}
internal class AngleSharp.Html.Dom.HtmlTableHeaderCellElement : HtmlTableCellElement {
    [NullableContextAttribute("1")]
public HtmlTableHeaderCellElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlTableRowElement : HtmlElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlTableCellElement> _cells;
    public HorizontalAlignment Align { get; public set; }
    public VerticalAlignment VAlign { get; public set; }
    [NullableAttribute("2")]
public string BgColor { get; public set; }
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlTableCellElement> Cells { get; }
    public int Index { get; }
    public int IndexInSection { get; }
    [NullableContextAttribute("1")]
public HtmlTableRowElement(Document owner, string prefix);
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
    public VerticalAlignment get_VAlign();
    public void set_VAlign(VerticalAlignment value);
    [NullableContextAttribute("2")]
public string get_BgColor();
    [NullableContextAttribute("2")]
public void set_BgColor(string value);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlTableCellElement> get_Cells();
    public sealed virtual int get_Index();
    public sealed virtual int get_IndexInSection();
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableCellElement InsertCellAt(int index, TableCellKind tableCellKind);
    public sealed virtual void RemoveCellAt(int index);
}
internal class AngleSharp.Html.Dom.HtmlTableSectionElement : HtmlElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlCollection`1<IHtmlTableRowElement> _rows;
    public HorizontalAlignment Align { get; public set; }
    [NullableAttribute("1")]
public IHtmlCollection`1<IHtmlTableRowElement> Rows { get; }
    public VerticalAlignment VAlign { get; public set; }
    [NullableContextAttribute("2")]
public HtmlTableSectionElement(Document owner, string name, string prefix);
    public HorizontalAlignment get_Align();
    public void set_Align(HorizontalAlignment value);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlCollection`1<IHtmlTableRowElement> get_Rows();
    public VerticalAlignment get_VAlign();
    public void set_VAlign(VerticalAlignment value);
    [NullableContextAttribute("1")]
public sealed virtual IHtmlTableRowElement InsertRowAt(int index);
    public sealed virtual void RemoveRowAt(int index);
}
internal class AngleSharp.Html.Dom.HtmlTeletypeTextElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlTeletypeTextElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlTemplateElement : HtmlElement {
    [NullableAttribute("1")]
private DocumentFragment _content;
    [NullableAttribute("1")]
public IDocumentFragment Content { get; }
    [NullableContextAttribute("1")]
public HtmlTemplateElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public sealed virtual IDocumentFragment get_Content();
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
    public sealed virtual void PopulateFragment();
    protected virtual void ReplacedAll();
    [NullableContextAttribute("1")]
protected virtual void NodeIsAdopted(Document oldDocument);
}
internal class AngleSharp.Html.Dom.HtmlTextAreaElement : HtmlTextFormControlElement {
    [NullableAttribute("2")]
public string Wrap { get; public set; }
    [NullableAttribute("1")]
public string DefaultValue { get; public set; }
    public int TextLength { get; }
    public int Rows { get; public set; }
    public int Columns { get; public set; }
    [NullableAttribute("1")]
public string Type { get; }
    [NullableContextAttribute("1")]
public HtmlTextAreaElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_Wrap();
    [NullableContextAttribute("2")]
public sealed virtual void set_Wrap(string value);
    [NullableContextAttribute("1")]
public virtual string get_DefaultValue();
    [NullableContextAttribute("1")]
public virtual void set_DefaultValue(string value);
    public sealed virtual int get_TextLength();
    public sealed virtual int get_Rows();
    public sealed virtual void set_Rows(int value);
    public sealed virtual int get_Columns();
    public sealed virtual void set_Columns(int value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Type();
    [NullableContextAttribute("1")]
internal virtual void ConstructDataSet(FormDataSet dataSet, IHtmlElement submitter);
    [NullableContextAttribute("1")]
internal virtual FormControlState SaveControlState();
    [NullableContextAttribute("1")]
internal virtual void RestoreFormControlState(FormControlState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlTextFormControlElement : HtmlFormControlElementWithState {
    private bool _dirty;
    [NullableAttribute("2")]
private string _value;
    private SelectionType _direction;
    private int _start;
    private int _end;
    public bool IsDirty { get; public set; }
    [NullableAttribute("2")]
public string DirectionName { get; public set; }
    public int MaxLength { get; public set; }
    public int MinLength { get; public set; }
    public string DefaultValue { get; public set; }
    public bool HasValue { get; }
    public string Value { get; public set; }
    [NullableAttribute("2")]
public string Placeholder { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsReadOnly { get; public set; }
    public int SelectionStart { get; public set; }
    public int SelectionEnd { get; public set; }
    [NullableAttribute("2")]
public string SelectionDirection { get; }
    public HtmlTextFormControlElement(Document owner, string name, string prefix, NodeFlags flags);
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    [NullableContextAttribute("2")]
public sealed virtual string get_DirectionName();
    [NullableContextAttribute("2")]
public sealed virtual void set_DirectionName(string value);
    public sealed virtual int get_MaxLength();
    public sealed virtual void set_MaxLength(int value);
    public sealed virtual int get_MinLength();
    public sealed virtual void set_MinLength(int value);
    public abstract virtual string get_DefaultValue();
    public abstract virtual void set_DefaultValue(string value);
    public sealed virtual bool get_HasValue();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Placeholder();
    [NullableContextAttribute("2")]
public sealed virtual void set_Placeholder(string value);
    public sealed virtual bool get_IsRequired();
    public sealed virtual void set_IsRequired(bool value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual int get_SelectionStart();
    public sealed virtual void set_SelectionStart(int value);
    public sealed virtual int get_SelectionEnd();
    public sealed virtual void set_SelectionEnd(int value);
    [NullableContextAttribute("2")]
public sealed virtual string get_SelectionDirection();
    public virtual Node Clone(Document owner, bool deep);
    [NullableContextAttribute("2")]
public sealed virtual void Select(int selectionStart, int selectionEnd, string selectionDirection);
    public sealed virtual void SelectAll();
    protected virtual void Check(ValidityState state);
    protected virtual bool CanBeValidated();
    protected void ConstructDataSet(FormDataSet dataSet, string type);
    private void SetSelectionRange(int selectionStart, int selectionEnd, SelectionType selectionType);
    internal virtual void Reset();
}
internal class AngleSharp.Html.Dom.HtmlTimeElement : HtmlElement {
    [NullableAttribute("2")]
public string DateTime { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTimeElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public sealed virtual string get_DateTime();
    [NullableContextAttribute("2")]
public sealed virtual void set_DateTime(string value);
}
internal class AngleSharp.Html.Dom.HtmlTitleElement : HtmlElement {
    [NullableAttribute("1")]
public string Text { get; public set; }
    [NullableContextAttribute("1")]
public HtmlTitleElement(Document owner, string prefix);
    [NullableContextAttribute("1")]
public sealed virtual string get_Text();
    [NullableContextAttribute("1")]
public sealed virtual void set_Text(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Dom.HtmlTrackElement : HtmlElement {
    private TrackReadyState _ready;
    public string Kind { get; public set; }
    public string Source { get; public set; }
    public string SourceLanguage { get; public set; }
    public string Label { get; public set; }
    public bool IsDefault { get; public set; }
    public TrackReadyState ReadyState { get; }
    public ITextTrack Track { get; }
    [NullableContextAttribute("1")]
public HtmlTrackElement(Document owner, string prefix);
    public sealed virtual string get_Kind();
    public sealed virtual void set_Kind(string value);
    public sealed virtual string get_Source();
    public sealed virtual void set_Source(string value);
    public sealed virtual string get_SourceLanguage();
    public sealed virtual void set_SourceLanguage(string value);
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public sealed virtual bool get_IsDefault();
    public sealed virtual void set_IsDefault(bool value);
    public sealed virtual TrackReadyState get_ReadyState();
    public sealed virtual ITextTrack get_Track();
}
internal class AngleSharp.Html.Dom.HtmlUnderlineElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlUnderlineElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlUnknownElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlUnknownElement(Document owner, string localName, string prefix, NodeFlags flags);
}
internal class AngleSharp.Html.Dom.HtmlUnorderedListElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlUnorderedListElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Html.Dom.HtmlUrlBaseElement : HtmlElement {
    [NullableAttribute("2")]
private TokenList _relList;
    [NullableAttribute("2")]
private SettableTokenList _ping;
    [NullableAttribute("2")]
public string Download { get; public set; }
    public string Href { get; public set; }
    public string Hash { get; public set; }
    public string Host { get; public set; }
    public string HostName { get; public set; }
    public string PathName { get; public set; }
    public string Port { get; public set; }
    public string Protocol { get; public set; }
    [NullableAttribute("2")]
public string UserName { get; public set; }
    [NullableAttribute("2")]
public string Password { get; public set; }
    public string Search { get; public set; }
    [NullableAttribute("2")]
public string Origin { get; }
    [NullableAttribute("2")]
public string TargetLanguage { get; public set; }
    [NullableAttribute("2")]
public string Media { get; public set; }
    [NullableAttribute("2")]
public string Relation { get; public set; }
    public ITokenList RelationList { get; }
    public ISettableTokenList Ping { get; }
    [NullableAttribute("2")]
public string Target { get; public set; }
    [NullableAttribute("2")]
public string Type { get; public set; }
    public HtmlUrlBaseElement(Document owner, string name, string prefix, NodeFlags flags);
    [NullableContextAttribute("2")]
public sealed virtual string get_Download();
    [NullableContextAttribute("2")]
public sealed virtual void set_Download(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Hash();
    public sealed virtual void set_Hash(string value);
    public sealed virtual string get_Host();
    public sealed virtual void set_Host(string value);
    public sealed virtual string get_HostName();
    public sealed virtual void set_HostName(string value);
    public sealed virtual string get_PathName();
    public sealed virtual void set_PathName(string value);
    public sealed virtual string get_Port();
    public sealed virtual void set_Port(string value);
    public sealed virtual string get_Protocol();
    public sealed virtual void set_Protocol(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_UserName();
    [NullableContextAttribute("2")]
public sealed virtual void set_UserName(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Password();
    [NullableContextAttribute("2")]
public sealed virtual void set_Password(string value);
    public sealed virtual string get_Search();
    public sealed virtual void set_Search(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Origin();
    [NullableContextAttribute("2")]
public sealed virtual string get_TargetLanguage();
    [NullableContextAttribute("2")]
public sealed virtual void set_TargetLanguage(string value);
    [NullableContextAttribute("2")]
public string get_Media();
    [NullableContextAttribute("2")]
public void set_Media(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Relation();
    [NullableContextAttribute("2")]
public sealed virtual void set_Relation(string value);
    public sealed virtual ITokenList get_RelationList();
    public sealed virtual ISettableTokenList get_Ping();
    [NullableContextAttribute("2")]
public sealed virtual string get_Target();
    [NullableContextAttribute("2")]
public sealed virtual void set_Target(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_Type();
    [NullableContextAttribute("2")]
public sealed virtual void set_Type(string value);
    [AsyncStateMachineAttribute("AngleSharp.Html.Dom.HtmlUrlBaseElement/<DoClick>d__57")]
public virtual void DoClick();
    internal void UpdateRel(string value);
    internal void UpdatePing(string value);
    [NullableContextAttribute("2")]
private string GetLocationPart(Func`2<ILocation, string> getter);
    private void SetLocationPart(Action`1<ILocation> setter);
    [CompilerGeneratedAttribute]
private void <get_RelationList>b__48_0(string value);
    [CompilerGeneratedAttribute]
private void <get_Ping>b__50_0(string value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class AngleSharp.Html.Dom.HtmlVideoElement : HtmlMediaElement`1<IVideoInfo> {
    [NullableAttribute("2")]
private IVideoTrackList _videos;
    [NullableAttribute("2")]
public IVideoTrackList VideoTracks { get; }
    public int DisplayWidth { get; public set; }
    public int DisplayHeight { get; public set; }
    public int OriginalWidth { get; }
    public int OriginalHeight { get; }
    [NullableAttribute("2")]
public string Poster { get; public set; }
    [NullableContextAttribute("1")]
public HtmlVideoElement(Document owner, string prefix);
    [NullableContextAttribute("2")]
public virtual IVideoTrackList get_VideoTracks();
    public sealed virtual int get_DisplayWidth();
    public sealed virtual void set_DisplayWidth(int value);
    public sealed virtual int get_DisplayHeight();
    public sealed virtual void set_DisplayHeight(int value);
    public sealed virtual int get_OriginalWidth();
    public sealed virtual int get_OriginalHeight();
    [NullableContextAttribute("2")]
public sealed virtual string get_Poster();
    [NullableContextAttribute("2")]
public sealed virtual void set_Poster(string value);
}
internal class AngleSharp.Html.Dom.HtmlWbrElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlWbrElement(Document owner, string prefix);
}
internal class AngleSharp.Html.Dom.HtmlXmpElement : HtmlElement {
    [NullableContextAttribute("1")]
public HtmlXmpElement(Document owner, string prefix);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLAnchorElement")]
public interface AngleSharp.Html.Dom.IHtmlAnchorElement {
    [DomNameAttribute("target")]
public string Target { get; public set; }
    [DomNameAttribute("download")]
public string Download { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("ping")]
public ISettableTokenList Ping { get; }
    [DomNameAttribute("rel")]
public string Relation { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("relList")]
public ITokenList RelationList { get; }
    [DomNameAttribute("hreflang")]
public string TargetLanguage { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; }
    [NullableAttribute("1")]
[DomNameAttribute("text")]
public string Text { get; }
    public abstract virtual string get_Target();
    public abstract virtual void set_Target(string value);
    public abstract virtual string get_Download();
    public abstract virtual void set_Download(string value);
    [NullableContextAttribute("1")]
public abstract virtual ISettableTokenList get_Ping();
    public abstract virtual string get_Relation();
    public abstract virtual void set_Relation(string value);
    [NullableContextAttribute("1")]
public abstract virtual ITokenList get_RelationList();
    public abstract virtual string get_TargetLanguage();
    public abstract virtual void set_TargetLanguage(string value);
    public abstract virtual string get_Type();
    [NullableContextAttribute("1")]
public abstract virtual string get_Text();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLAreaElement")]
public interface AngleSharp.Html.Dom.IHtmlAreaElement {
    [DomNameAttribute("alt")]
public string AlternativeText { get; public set; }
    [DomNameAttribute("coords")]
public string Coordinates { get; public set; }
    [DomNameAttribute("shape")]
public string Shape { get; public set; }
    [DomNameAttribute("target")]
public string Target { get; public set; }
    [DomNameAttribute("download")]
public string Download { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("ping")]
public ISettableTokenList Ping { get; }
    [DomNameAttribute("rel")]
public string Relation { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("relList")]
public ITokenList RelationList { get; }
    [DomNameAttribute("hreflang")]
public string TargetLanguage { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    public abstract virtual string get_AlternativeText();
    public abstract virtual void set_AlternativeText(string value);
    public abstract virtual string get_Coordinates();
    public abstract virtual void set_Coordinates(string value);
    public abstract virtual string get_Shape();
    public abstract virtual void set_Shape(string value);
    public abstract virtual string get_Target();
    public abstract virtual void set_Target(string value);
    public abstract virtual string get_Download();
    public abstract virtual void set_Download(string value);
    [NullableContextAttribute("1")]
public abstract virtual ISettableTokenList get_Ping();
    public abstract virtual string get_Relation();
    public abstract virtual void set_Relation(string value);
    [NullableContextAttribute("1")]
public abstract virtual ITokenList get_RelationList();
    public abstract virtual string get_TargetLanguage();
    public abstract virtual void set_TargetLanguage(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
}
[DomNameAttribute("HTMLAudioElement")]
public interface AngleSharp.Html.Dom.IHtmlAudioElement {
}
[DomNameAttribute("HTMLBaseElement")]
public interface AngleSharp.Html.Dom.IHtmlBaseElement {
    [NullableAttribute("2")]
[DomNameAttribute("href")]
public string Href { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("target")]
public string Target { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Href();
    [NullableContextAttribute("2")]
public abstract virtual void set_Href(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Target();
    [NullableContextAttribute("2")]
public abstract virtual void set_Target(string value);
}
[DomNameAttribute("HTMLBodyElement")]
public interface AngleSharp.Html.Dom.IHtmlBodyElement {
}
[DomNameAttribute("HTMLBRElement")]
public interface AngleSharp.Html.Dom.IHtmlBreakRowElement {
}
[NullableContextAttribute("1")]
[DomNameAttribute("HTMLButtonElement")]
public interface AngleSharp.Html.Dom.IHtmlButtonElement {
    [DomNameAttribute("autofocus")]
public bool Autofocus { get; public set; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [DomNameAttribute("labels")]
public INodeList Labels { get; }
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("value")]
public string Value { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("formAction")]
public string FormAction { get; public set; }
    [DomNameAttribute("formEncType")]
public string FormEncType { get; public set; }
    [DomNameAttribute("formMethod")]
public string FormMethod { get; public set; }
    [DomNameAttribute("formNoValidate")]
public bool FormNoValidate { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("formTarget")]
public string FormTarget { get; public set; }
    public abstract virtual bool get_Autofocus();
    public abstract virtual void set_Autofocus(bool value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
    public abstract virtual INodeList get_Labels();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_FormAction();
    [NullableContextAttribute("2")]
public abstract virtual void set_FormAction(string value);
    public abstract virtual string get_FormEncType();
    public abstract virtual void set_FormEncType(string value);
    public abstract virtual string get_FormMethod();
    public abstract virtual void set_FormMethod(string value);
    public abstract virtual bool get_FormNoValidate();
    public abstract virtual void set_FormNoValidate(bool value);
    [NullableContextAttribute("2")]
public abstract virtual string get_FormTarget();
    [NullableContextAttribute("2")]
public abstract virtual void set_FormTarget(string value);
}
[DomNameAttribute("HTMLCanvasElement")]
public interface AngleSharp.Html.Dom.IHtmlCanvasElement {
    [DomNameAttribute("width")]
public int Width { get; public set; }
    [DomNameAttribute("height")]
public int Height { get; public set; }
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    [NullableContextAttribute("1")]
[DomNameAttribute("toDataURL")]
public abstract virtual string ToDataUrl(string type);
    [NullableContextAttribute("1")]
[DomNameAttribute("toBlob")]
public abstract virtual void ToBlob(Action`1<Stream> callback, string type);
    [NullableContextAttribute("1")]
[DomNameAttribute("getContext")]
public abstract virtual IRenderingContext GetContext(string contextId);
    [NullableContextAttribute("1")]
[DomNameAttribute("setContext")]
public abstract virtual void SetContext(IRenderingContext context);
    [NullableContextAttribute("1")]
[DomNameAttribute("probablySupportsContext")]
public abstract virtual bool IsSupportingContext(string contextId);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLCommandElement")]
public interface AngleSharp.Html.Dom.IHtmlCommandElement {
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("label")]
public string Label { get; public set; }
    [DomNameAttribute("icon")]
public string Icon { get; public set; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [DomNameAttribute("checked")]
public bool IsChecked { get; public set; }
    [DomNameAttribute("radiogroup")]
public string RadioGroup { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("command")]
public IHtmlElement Command { get; }
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual string get_Icon();
    public abstract virtual void set_Icon(string value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual string get_RadioGroup();
    public abstract virtual void set_RadioGroup(string value);
    [NullableContextAttribute("1")]
public abstract virtual IHtmlElement get_Command();
}
[DomNameAttribute("HTMLDataElement")]
public interface AngleSharp.Html.Dom.IHtmlDataElement {
    [NullableAttribute("2")]
[DomNameAttribute("value")]
public string Value { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(string value);
}
[DomNameAttribute("HTMLDataListElement")]
public interface AngleSharp.Html.Dom.IHtmlDataListElement {
    [NullableAttribute("1")]
[DomNameAttribute("options")]
public IHtmlCollection`1<IHtmlOptionElement> Options { get; }
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlOptionElement> get_Options();
}
[DomNameAttribute("HTMLDetailsElement")]
public interface AngleSharp.Html.Dom.IHtmlDetailsElement {
    [DomNameAttribute("open")]
public bool IsOpen { get; public set; }
    public abstract virtual bool get_IsOpen();
    public abstract virtual void set_IsOpen(bool value);
}
[DomNameAttribute("HTMLDialogElement")]
public interface AngleSharp.Html.Dom.IHtmlDialogElement {
    [DomNameAttribute("open")]
public bool Open { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("returnValue")]
public string ReturnValue { get; public set; }
    public abstract virtual bool get_Open();
    public abstract virtual void set_Open(bool value);
    [NullableContextAttribute("2")]
public abstract virtual string get_ReturnValue();
    [NullableContextAttribute("2")]
public abstract virtual void set_ReturnValue(string value);
    [NullableContextAttribute("2")]
[DomNameAttribute("show")]
public abstract virtual void Show(IElement anchor);
    [NullableContextAttribute("2")]
[DomNameAttribute("showModal")]
public abstract virtual void ShowModal(IElement anchor);
    [NullableContextAttribute("2")]
[DomNameAttribute("close")]
public abstract virtual void Close(string returnValue);
}
[DomNameAttribute("HTMLDivElement")]
public interface AngleSharp.Html.Dom.IHtmlDivElement {
}
[DomNameAttribute("HTMLDocument")]
public interface AngleSharp.Html.Dom.IHtmlDocument {
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLElement")]
public interface AngleSharp.Html.Dom.IHtmlElement {
    [DomNameAttribute("lang")]
public string Language { get; public set; }
    [DomNameAttribute("title")]
public string Title { get; public set; }
    [DomNameAttribute("dir")]
public string Direction { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("dataset")]
public IStringMap Dataset { get; }
    [DomNameAttribute("translate")]
public bool IsTranslated { get; public set; }
    [DomNameAttribute("tabIndex")]
public int TabIndex { get; public set; }
    [DomNameAttribute("spellcheck")]
public bool IsSpellChecked { get; public set; }
    [DomNameAttribute("contentEditable")]
public string ContentEditable { get; public set; }
    [DomNameAttribute("isContentEditable")]
public bool IsContentEditable { get; }
    [DomNameAttribute("hidden")]
public bool IsHidden { get; public set; }
    [DomNameAttribute("draggable")]
public bool IsDraggable { get; public set; }
    [DomNameAttribute("accessKey")]
public string AccessKey { get; public set; }
    [DomNameAttribute("accessKeyLabel")]
public string AccessKeyLabel { get; }
    [DomNameAttribute("contextMenu")]
public IHtmlMenuElement ContextMenu { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("dropzone")]
[DomPutForwardsAttribute("value")]
public ISettableTokenList DropZone { get; }
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Direction();
    public abstract virtual void set_Direction(string value);
    [NullableContextAttribute("1")]
public abstract virtual IStringMap get_Dataset();
    public abstract virtual bool get_IsTranslated();
    public abstract virtual void set_IsTranslated(bool value);
    public abstract virtual int get_TabIndex();
    public abstract virtual void set_TabIndex(int value);
    public abstract virtual bool get_IsSpellChecked();
    public abstract virtual void set_IsSpellChecked(bool value);
    public abstract virtual string get_ContentEditable();
    public abstract virtual void set_ContentEditable(string value);
    public abstract virtual bool get_IsContentEditable();
    public abstract virtual bool get_IsHidden();
    public abstract virtual void set_IsHidden(bool value);
    public abstract virtual bool get_IsDraggable();
    public abstract virtual void set_IsDraggable(bool value);
    public abstract virtual string get_AccessKey();
    public abstract virtual void set_AccessKey(string value);
    public abstract virtual string get_AccessKeyLabel();
    public abstract virtual IHtmlMenuElement get_ContextMenu();
    public abstract virtual void set_ContextMenu(IHtmlMenuElement value);
    [NullableContextAttribute("1")]
public abstract virtual ISettableTokenList get_DropZone();
    [DomNameAttribute("click")]
public abstract virtual void DoClick();
    [DomNameAttribute("focus")]
public abstract virtual void DoFocus();
    [DomNameAttribute("blur")]
public abstract virtual void DoBlur();
    [DomNameAttribute("forceSpellCheck")]
public abstract virtual void DoSpellCheck();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLEmbedElement")]
public interface AngleSharp.Html.Dom.IHtmlEmbedElement {
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("width")]
public string DisplayWidth { get; public set; }
    [DomNameAttribute("height")]
public string DisplayHeight { get; public set; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_DisplayWidth();
    public abstract virtual void set_DisplayWidth(string value);
    public abstract virtual string get_DisplayHeight();
    public abstract virtual void set_DisplayHeight(string value);
}
[DomNameAttribute("HTMLFieldSetElement")]
public interface AngleSharp.Html.Dom.IHtmlFieldSetElement {
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("type")]
public string Type { get; }
    [NullableAttribute("1")]
[DomNameAttribute("elements")]
public IHtmlFormControlsCollection Elements { get; }
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Type();
    [NullableContextAttribute("1")]
public abstract virtual IHtmlFormControlsCollection get_Elements();
}
[DomNameAttribute("HTMLFormControlsCollection")]
public interface AngleSharp.Html.Dom.IHtmlFormControlsCollection {
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("HTMLFormElement")]
public interface AngleSharp.Html.Dom.IHtmlFormElement {
    [NullableAttribute("2")]
[DomNameAttribute("acceptCharset")]
public string AcceptCharset { get; public set; }
    [DomNameAttribute("action")]
public string Action { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("autocomplete")]
public string Autocomplete { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("enctype")]
public string Enctype { get; public set; }
    [DomNameAttribute("encoding")]
public string Encoding { get; public set; }
    [DomNameAttribute("method")]
public string Method { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("noValidate")]
public bool NoValidate { get; public set; }
    [DomNameAttribute("target")]
public string Target { get; public set; }
    [DomNameAttribute("length")]
public int Length { get; }
    [DomNameAttribute("elements")]
public IHtmlFormControlsCollection Elements { get; }
    [NullableAttribute("2")]
[DomAccessorAttribute("1")]
public IElement Item { get; }
    [NullableAttribute("2")]
[DomAccessorAttribute("1")]
public IElement Item { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_AcceptCharset();
    [NullableContextAttribute("2")]
public abstract virtual void set_AcceptCharset(string value);
    public abstract virtual string get_Action();
    public abstract virtual void set_Action(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Autocomplete();
    [NullableContextAttribute("2")]
public abstract virtual void set_Autocomplete(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Enctype();
    [NullableContextAttribute("2")]
public abstract virtual void set_Enctype(string value);
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    public abstract virtual bool get_NoValidate();
    public abstract virtual void set_NoValidate(bool value);
    public abstract virtual string get_Target();
    public abstract virtual void set_Target(string value);
    public abstract virtual int get_Length();
    public abstract virtual IHtmlFormControlsCollection get_Elements();
    [DomNameAttribute("submit")]
public abstract virtual Task`1<IDocument> SubmitAsync();
    public abstract virtual Task`1<IDocument> SubmitAsync(IHtmlElement sourceElement);
    [NullableContextAttribute("2")]
public abstract virtual DocumentRequest GetSubmission();
    public abstract virtual DocumentRequest GetSubmission(IHtmlElement sourceElement);
    [DomNameAttribute("reset")]
public abstract virtual void Reset();
    [DomNameAttribute("checkValidity")]
public abstract virtual bool CheckValidity();
    [DomNameAttribute("reportValidity")]
public abstract virtual bool ReportValidity();
    [NullableContextAttribute("2")]
public abstract virtual IElement get_Item(int index);
    public abstract virtual IElement get_Item(string name);
    [DomNameAttribute("requestAutocomplete")]
public abstract virtual void RequestAutocomplete();
}
[DomNameAttribute("HTMLHeadElement")]
public interface AngleSharp.Html.Dom.IHtmlHeadElement {
}
[DomNameAttribute("HTMLHeadingElement")]
public interface AngleSharp.Html.Dom.IHtmlHeadingElement {
}
[DomNameAttribute("HTMLHRElement")]
public interface AngleSharp.Html.Dom.IHtmlHrElement {
}
[DomNameAttribute("HTMLHtmlElement")]
public interface AngleSharp.Html.Dom.IHtmlHtmlElement {
    [NullableAttribute("2")]
[DomNameAttribute("manifest")]
public string Manifest { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Manifest();
    [NullableContextAttribute("2")]
public abstract virtual void set_Manifest(string value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLImageElement")]
public interface AngleSharp.Html.Dom.IHtmlImageElement {
    [DomNameAttribute("alt")]
public string AlternativeText { get; public set; }
    [DomNameAttribute("currentSrc")]
public string ActualSource { get; }
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("srcset")]
public string SourceSet { get; public set; }
    [DomNameAttribute("sizes")]
public string Sizes { get; public set; }
    [DomNameAttribute("crossOrigin")]
public string CrossOrigin { get; public set; }
    [DomNameAttribute("useMap")]
public string UseMap { get; public set; }
    [DomNameAttribute("isMap")]
public bool IsMap { get; public set; }
    [DomNameAttribute("width")]
public int DisplayWidth { get; public set; }
    [DomNameAttribute("height")]
public int DisplayHeight { get; public set; }
    [DomNameAttribute("naturalWidth")]
public int OriginalWidth { get; }
    [DomNameAttribute("naturalHeight")]
public int OriginalHeight { get; }
    [DomNameAttribute("complete")]
public bool IsCompleted { get; }
    public abstract virtual string get_AlternativeText();
    public abstract virtual void set_AlternativeText(string value);
    public abstract virtual string get_ActualSource();
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_SourceSet();
    public abstract virtual void set_SourceSet(string value);
    public abstract virtual string get_Sizes();
    public abstract virtual void set_Sizes(string value);
    public abstract virtual string get_CrossOrigin();
    public abstract virtual void set_CrossOrigin(string value);
    public abstract virtual string get_UseMap();
    public abstract virtual void set_UseMap(string value);
    public abstract virtual bool get_IsMap();
    public abstract virtual void set_IsMap(bool value);
    public abstract virtual int get_DisplayWidth();
    public abstract virtual void set_DisplayWidth(int value);
    public abstract virtual int get_DisplayHeight();
    public abstract virtual void set_DisplayHeight(int value);
    public abstract virtual int get_OriginalWidth();
    public abstract virtual int get_OriginalHeight();
    public abstract virtual bool get_IsCompleted();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLIFrameElement")]
public interface AngleSharp.Html.Dom.IHtmlInlineFrameElement {
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("srcdoc")]
public string ContentHtml { get; public set; }
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("sandbox")]
public ISettableTokenList Sandbox { get; }
    [DomNameAttribute("seamless")]
public bool IsSeamless { get; public set; }
    [DomNameAttribute("allowFullscreen")]
public bool IsFullscreenAllowed { get; public set; }
    [DomNameAttribute("allowPaymentRequest")]
public bool IsPaymentRequestAllowed { get; public set; }
    [DomNameAttribute("referrerPolicy")]
public string ReferrerPolicy { get; public set; }
    [DomNameAttribute("width")]
public int DisplayWidth { get; public set; }
    [DomNameAttribute("height")]
public int DisplayHeight { get; public set; }
    [DomNameAttribute("contentDocument")]
public IDocument ContentDocument { get; }
    [DomNameAttribute("contentWindow")]
public IWindow ContentWindow { get; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_ContentHtml();
    public abstract virtual void set_ContentHtml(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual ISettableTokenList get_Sandbox();
    public abstract virtual bool get_IsSeamless();
    public abstract virtual void set_IsSeamless(bool value);
    public abstract virtual bool get_IsFullscreenAllowed();
    public abstract virtual void set_IsFullscreenAllowed(bool value);
    public abstract virtual bool get_IsPaymentRequestAllowed();
    public abstract virtual void set_IsPaymentRequestAllowed(bool value);
    public abstract virtual string get_ReferrerPolicy();
    public abstract virtual void set_ReferrerPolicy(string value);
    public abstract virtual int get_DisplayWidth();
    public abstract virtual void set_DisplayWidth(int value);
    public abstract virtual int get_DisplayHeight();
    public abstract virtual void set_DisplayHeight(int value);
    public abstract virtual IDocument get_ContentDocument();
    public abstract virtual IWindow get_ContentWindow();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLInputElement")]
public interface AngleSharp.Html.Dom.IHtmlInputElement {
    [DomNameAttribute("autofocus")]
public bool Autofocus { get; public set; }
    [DomNameAttribute("accept")]
public string Accept { get; public set; }
    [DomNameAttribute("autocomplete")]
public string Autocomplete { get; public set; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("1")]
[DomNameAttribute("labels")]
public INodeList Labels { get; }
    [DomNameAttribute("files")]
public IFileList Files { get; }
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("required")]
public bool IsRequired { get; public set; }
    [DomNameAttribute("readOnly")]
public bool IsReadOnly { get; public set; }
    [DomNameAttribute("alt")]
public string AlternativeText { get; public set; }
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("max")]
public string Maximum { get; public set; }
    [DomNameAttribute("min")]
public string Minimum { get; public set; }
    [DomNameAttribute("pattern")]
public string Pattern { get; public set; }
    [DomNameAttribute("step")]
public string Step { get; public set; }
    [DomNameAttribute("list")]
public IHtmlDataListElement List { get; }
    [DomNameAttribute("formAction")]
public string FormAction { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("formEncType")]
public string FormEncType { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("formMethod")]
public string FormMethod { get; public set; }
    [DomNameAttribute("formNoValidate")]
public bool FormNoValidate { get; public set; }
    [DomNameAttribute("formTarget")]
public string FormTarget { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("defaultValue")]
public string DefaultValue { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("value")]
public string Value { get; public set; }
    public bool HasValue { get; }
    [DomNameAttribute("valueAsNumber")]
public double ValueAsNumber { get; public set; }
    [DomNameAttribute("valueAsDate")]
public Nullable`1<DateTime> ValueAsDate { get; public set; }
    [DomNameAttribute("indeterminate")]
public bool IsIndeterminate { get; public set; }
    [DomNameAttribute("defaultChecked")]
public bool IsDefaultChecked { get; public set; }
    [DomNameAttribute("checked")]
public bool IsChecked { get; public set; }
    [DomNameAttribute("size")]
public int Size { get; public set; }
    [DomNameAttribute("multiple")]
public bool IsMultiple { get; public set; }
    [DomNameAttribute("maxLength")]
public int MaxLength { get; public set; }
    [DomNameAttribute("minLength")]
public int MinLength { get; public set; }
    [DomNameAttribute("placeholder")]
public string Placeholder { get; public set; }
    [DomNameAttribute("width")]
public int DisplayWidth { get; public set; }
    [DomNameAttribute("height")]
public int DisplayHeight { get; public set; }
    [DomNameAttribute("selectionDirection")]
public string SelectionDirection { get; }
    [DomNameAttribute("dirName")]
public string DirectionName { get; public set; }
    [DomNameAttribute("selectionStart")]
public int SelectionStart { get; public set; }
    [DomNameAttribute("selectionEnd")]
public int SelectionEnd { get; public set; }
    public abstract virtual bool get_Autofocus();
    public abstract virtual void set_Autofocus(bool value);
    public abstract virtual string get_Accept();
    public abstract virtual void set_Accept(string value);
    public abstract virtual string get_Autocomplete();
    public abstract virtual void set_Autocomplete(string value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("1")]
public abstract virtual INodeList get_Labels();
    public abstract virtual IFileList get_Files();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Type();
    [NullableContextAttribute("1")]
public abstract virtual void set_Type(string value);
    public abstract virtual bool get_IsRequired();
    public abstract virtual void set_IsRequired(bool value);
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void set_IsReadOnly(bool value);
    public abstract virtual string get_AlternativeText();
    public abstract virtual void set_AlternativeText(string value);
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_Maximum();
    public abstract virtual void set_Maximum(string value);
    public abstract virtual string get_Minimum();
    public abstract virtual void set_Minimum(string value);
    public abstract virtual string get_Pattern();
    public abstract virtual void set_Pattern(string value);
    public abstract virtual string get_Step();
    public abstract virtual void set_Step(string value);
    [DomNameAttribute("stepUp")]
public abstract virtual void StepUp(int n);
    [DomNameAttribute("stepDown")]
public abstract virtual void StepDown(int n);
    public abstract virtual IHtmlDataListElement get_List();
    public abstract virtual string get_FormAction();
    public abstract virtual void set_FormAction(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_FormEncType();
    [NullableContextAttribute("1")]
public abstract virtual void set_FormEncType(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_FormMethod();
    [NullableContextAttribute("1")]
public abstract virtual void set_FormMethod(string value);
    public abstract virtual bool get_FormNoValidate();
    public abstract virtual void set_FormNoValidate(bool value);
    public abstract virtual string get_FormTarget();
    public abstract virtual void set_FormTarget(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_DefaultValue();
    [NullableContextAttribute("1")]
public abstract virtual void set_DefaultValue(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Value();
    [NullableContextAttribute("1")]
public abstract virtual void set_Value(string value);
    public abstract virtual bool get_HasValue();
    public abstract virtual double get_ValueAsNumber();
    public abstract virtual void set_ValueAsNumber(double value);
    public abstract virtual Nullable`1<DateTime> get_ValueAsDate();
    public abstract virtual void set_ValueAsDate(Nullable`1<DateTime> value);
    public abstract virtual bool get_IsIndeterminate();
    public abstract virtual void set_IsIndeterminate(bool value);
    public abstract virtual bool get_IsDefaultChecked();
    public abstract virtual void set_IsDefaultChecked(bool value);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual bool get_IsMultiple();
    public abstract virtual void set_IsMultiple(bool value);
    public abstract virtual int get_MaxLength();
    public abstract virtual void set_MaxLength(int value);
    public abstract virtual int get_MinLength();
    public abstract virtual void set_MinLength(int value);
    public abstract virtual string get_Placeholder();
    public abstract virtual void set_Placeholder(string value);
    public abstract virtual int get_DisplayWidth();
    public abstract virtual void set_DisplayWidth(int value);
    public abstract virtual int get_DisplayHeight();
    public abstract virtual void set_DisplayHeight(int value);
    public abstract virtual string get_SelectionDirection();
    public abstract virtual string get_DirectionName();
    public abstract virtual void set_DirectionName(string value);
    public abstract virtual int get_SelectionStart();
    public abstract virtual void set_SelectionStart(int value);
    public abstract virtual int get_SelectionEnd();
    public abstract virtual void set_SelectionEnd(int value);
    [DomNameAttribute("select")]
public abstract virtual void SelectAll();
    [DomNameAttribute("setSelectionRange")]
public abstract virtual void Select(int selectionStart, int selectionEnd, string selectionDirection);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLKeygenElement")]
public interface AngleSharp.Html.Dom.IHtmlKeygenElement {
    [DomNameAttribute("autofocus")]
public bool Autofocus { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("labels")]
public INodeList Labels { get; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("type")]
public string Type { get; }
    [DomNameAttribute("keytype")]
public string KeyEncryption { get; public set; }
    [DomNameAttribute("challenge")]
public string Challenge { get; public set; }
    public abstract virtual bool get_Autofocus();
    public abstract virtual void set_Autofocus(bool value);
    [NullableContextAttribute("1")]
public abstract virtual INodeList get_Labels();
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual IHtmlFormElement get_Form();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Type();
    public abstract virtual string get_KeyEncryption();
    public abstract virtual void set_KeyEncryption(string value);
    public abstract virtual string get_Challenge();
    public abstract virtual void set_Challenge(string value);
}
[DomNameAttribute("HTMLLabelElement")]
public interface AngleSharp.Html.Dom.IHtmlLabelElement {
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("2")]
[DomNameAttribute("htmlFor")]
public string HtmlFor { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("control")]
public IHtmlElement Control { get; }
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("2")]
public abstract virtual string get_HtmlFor();
    [NullableContextAttribute("2")]
public abstract virtual void set_HtmlFor(string value);
    [NullableContextAttribute("2")]
public abstract virtual IHtmlElement get_Control();
}
[DomNameAttribute("HTMLLegendElement")]
public interface AngleSharp.Html.Dom.IHtmlLegendElement {
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLLinkElement")]
public interface AngleSharp.Html.Dom.IHtmlLinkElement {
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [DomNameAttribute("href")]
public string Href { get; public set; }
    [DomNameAttribute("rel")]
public string Relation { get; public set; }
    [DomNameAttribute("rev")]
public string ReverseRelation { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("relList")]
public ITokenList RelationList { get; }
    [DomNameAttribute("media")]
public string Media { get; public set; }
    [DomNameAttribute("hreflang")]
public string TargetLanguage { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("sizes")]
public ISettableTokenList Sizes { get; }
    [DomNameAttribute("integrity")]
public string Integrity { get; public set; }
    [DomNameAttribute("crossOrigin")]
public string CrossOrigin { get; public set; }
    [DomNameAttribute("nonce")]
public string NumberUsedOnce { get; public set; }
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual string get_Href();
    public abstract virtual void set_Href(string value);
    public abstract virtual string get_Relation();
    public abstract virtual void set_Relation(string value);
    public abstract virtual string get_ReverseRelation();
    public abstract virtual void set_ReverseRelation(string value);
    [NullableContextAttribute("1")]
public abstract virtual ITokenList get_RelationList();
    public abstract virtual string get_Media();
    public abstract virtual void set_Media(string value);
    public abstract virtual string get_TargetLanguage();
    public abstract virtual void set_TargetLanguage(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    [NullableContextAttribute("1")]
public abstract virtual ISettableTokenList get_Sizes();
    public abstract virtual string get_Integrity();
    public abstract virtual void set_Integrity(string value);
    public abstract virtual string get_CrossOrigin();
    public abstract virtual void set_CrossOrigin(string value);
    public abstract virtual string get_NumberUsedOnce();
    public abstract virtual void set_NumberUsedOnce(string value);
}
[DomNameAttribute("HTMLLIElement")]
public interface AngleSharp.Html.Dom.IHtmlListItemElement {
    [DomNameAttribute("value")]
public Nullable`1<int> Value { get; public set; }
    public abstract virtual Nullable`1<int> get_Value();
    public abstract virtual void set_Value(Nullable`1<int> value);
}
[DomNameAttribute("HTMLMapElement")]
public interface AngleSharp.Html.Dom.IHtmlMapElement {
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("areas")]
public IHtmlCollection`1<IHtmlAreaElement> Areas { get; }
    [NullableAttribute("1")]
[DomNameAttribute("images")]
public IHtmlCollection`1<IHtmlImageElement> Images { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlAreaElement> get_Areas();
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlImageElement> get_Images();
}
[DomNameAttribute("HTMLMarqueeElement")]
public interface AngleSharp.Html.Dom.IHtmlMarqueeElement {
    public int MinimumDelay { get; }
    [DomNameAttribute("scrollamount")]
public int ScrollAmount { get; public set; }
    [DomNameAttribute("scrolldelay")]
public int ScrollDelay { get; public set; }
    [DomNameAttribute("loop")]
public int Loop { get; public set; }
    public abstract virtual int get_MinimumDelay();
    public abstract virtual int get_ScrollAmount();
    public abstract virtual void set_ScrollAmount(int value);
    public abstract virtual int get_ScrollDelay();
    public abstract virtual void set_ScrollDelay(int value);
    public abstract virtual int get_Loop();
    public abstract virtual void set_Loop(int value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLMediaElement")]
public interface AngleSharp.Html.Dom.IHtmlMediaElement {
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("crossOrigin")]
public string CrossOrigin { get; public set; }
    [DomNameAttribute("preload")]
public string Preload { get; public set; }
    [DomNameAttribute("mediaGroup")]
public string MediaGroup { get; public set; }
    [DomNameAttribute("networkState")]
public MediaNetworkState NetworkState { get; }
    [DomNameAttribute("seeking")]
public bool IsSeeking { get; }
    [DomNameAttribute("currentSrc")]
public string CurrentSource { get; }
    [DomNameAttribute("error")]
public IMediaError MediaError { get; }
    [DomNameAttribute("controller")]
public IMediaController Controller { get; }
    [DomNameAttribute("ended")]
public bool IsEnded { get; }
    [DomNameAttribute("autoplay")]
public bool IsAutoplay { get; public set; }
    [DomNameAttribute("loop")]
public bool IsLoop { get; public set; }
    [DomNameAttribute("controls")]
public bool IsShowingControls { get; public set; }
    [DomNameAttribute("defaultMuted")]
public bool IsDefaultMuted { get; public set; }
    [DomNameAttribute("startDate")]
public DateTime StartDate { get; }
    [DomNameAttribute("audioTracks")]
public IAudioTrackList AudioTracks { get; }
    [DomNameAttribute("videoTracks")]
public IVideoTrackList VideoTracks { get; }
    [DomNameAttribute("textTracks")]
public ITextTrackList TextTracks { get; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_CrossOrigin();
    public abstract virtual void set_CrossOrigin(string value);
    public abstract virtual string get_Preload();
    public abstract virtual void set_Preload(string value);
    public abstract virtual string get_MediaGroup();
    public abstract virtual void set_MediaGroup(string value);
    public abstract virtual MediaNetworkState get_NetworkState();
    public abstract virtual bool get_IsSeeking();
    public abstract virtual string get_CurrentSource();
    public abstract virtual IMediaError get_MediaError();
    public abstract virtual IMediaController get_Controller();
    public abstract virtual bool get_IsEnded();
    public abstract virtual bool get_IsAutoplay();
    public abstract virtual void set_IsAutoplay(bool value);
    public abstract virtual bool get_IsLoop();
    public abstract virtual void set_IsLoop(bool value);
    public abstract virtual bool get_IsShowingControls();
    public abstract virtual void set_IsShowingControls(bool value);
    public abstract virtual bool get_IsDefaultMuted();
    public abstract virtual void set_IsDefaultMuted(bool value);
    [DomNameAttribute("load")]
public abstract virtual void Load();
    [NullableContextAttribute("1")]
[DomNameAttribute("canPlayType")]
public abstract virtual string CanPlayType(string type);
    public abstract virtual DateTime get_StartDate();
    public abstract virtual IAudioTrackList get_AudioTracks();
    public abstract virtual IVideoTrackList get_VideoTracks();
    public abstract virtual ITextTrackList get_TextTracks();
    [NullableContextAttribute("1")]
[DomNameAttribute("addTextTrack")]
public abstract virtual ITextTrack AddTextTrack(string kind, string label, string language);
}
[DomNameAttribute("HTMLMenuElement")]
public interface AngleSharp.Html.Dom.IHtmlMenuElement {
    [NullableAttribute("2")]
[DomNameAttribute("label")]
public string Label { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("type")]
public string Type { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Label();
    [NullableContextAttribute("2")]
public abstract virtual void set_Label(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Type();
    [NullableContextAttribute("2")]
public abstract virtual void set_Type(string value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLMenuItemElement")]
public interface AngleSharp.Html.Dom.IHtmlMenuItemElement {
    [DomNameAttribute("command")]
public IHtmlElement Command { get; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("label")]
public string Label { get; public set; }
    [DomNameAttribute("icon")]
public string Icon { get; public set; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [DomNameAttribute("checked")]
public bool IsChecked { get; public set; }
    [DomNameAttribute("default")]
public bool IsDefault { get; public set; }
    [DomNameAttribute("radiogroup")]
public string RadioGroup { get; public set; }
    public abstract virtual IHtmlElement get_Command();
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual string get_Icon();
    public abstract virtual void set_Icon(string value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual string get_RadioGroup();
    public abstract virtual void set_RadioGroup(string value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLMetaElement")]
public interface AngleSharp.Html.Dom.IHtmlMetaElement {
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("httpEquiv")]
public string HttpEquivalent { get; public set; }
    public string Charset { get; public set; }
    [DomNameAttribute("content")]
public string Content { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_HttpEquivalent();
    public abstract virtual void set_HttpEquivalent(string value);
    public abstract virtual string get_Charset();
    public abstract virtual void set_Charset(string value);
    public abstract virtual string get_Content();
    public abstract virtual void set_Content(string value);
}
[DomNameAttribute("HTMLMeterElement")]
public interface AngleSharp.Html.Dom.IHtmlMeterElement {
    [DomNameAttribute("value")]
public double Value { get; public set; }
    [DomNameAttribute("min")]
public double Minimum { get; public set; }
    [DomNameAttribute("max")]
public double Maximum { get; public set; }
    [DomNameAttribute("low")]
public double Low { get; public set; }
    [DomNameAttribute("high")]
public double High { get; public set; }
    [DomNameAttribute("optimum")]
public double Optimum { get; public set; }
    public abstract virtual double get_Value();
    public abstract virtual void set_Value(double value);
    public abstract virtual double get_Minimum();
    public abstract virtual void set_Minimum(double value);
    public abstract virtual double get_Maximum();
    public abstract virtual void set_Maximum(double value);
    public abstract virtual double get_Low();
    public abstract virtual void set_Low(double value);
    public abstract virtual double get_High();
    public abstract virtual void set_High(double value);
    public abstract virtual double get_Optimum();
    public abstract virtual void set_Optimum(double value);
}
[DomNameAttribute("HTMLModElement")]
public interface AngleSharp.Html.Dom.IHtmlModElement {
    [NullableAttribute("2")]
[DomNameAttribute("cite")]
public string Citation { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("datetime")]
public string DateTime { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Citation();
    [NullableContextAttribute("2")]
public abstract virtual void set_Citation(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_DateTime();
    [NullableContextAttribute("2")]
public abstract virtual void set_DateTime(string value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLObjectElement")]
public interface AngleSharp.Html.Dom.IHtmlObjectElement {
    [DomNameAttribute("data")]
public string Source { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("typeMustMatch")]
public bool TypeMustMatch { get; public set; }
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [DomNameAttribute("useMap")]
public string UseMap { get; public set; }
    [DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [DomNameAttribute("width")]
public int DisplayWidth { get; public set; }
    [DomNameAttribute("height")]
public int DisplayHeight { get; public set; }
    [DomNameAttribute("contentDocument")]
public IDocument ContentDocument { get; }
    [DomNameAttribute("contentWindow")]
public IWindow ContentWindow { get; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual bool get_TypeMustMatch();
    public abstract virtual void set_TypeMustMatch(bool value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_UseMap();
    public abstract virtual void set_UseMap(string value);
    public abstract virtual IHtmlFormElement get_Form();
    public abstract virtual int get_DisplayWidth();
    public abstract virtual void set_DisplayWidth(int value);
    public abstract virtual int get_DisplayHeight();
    public abstract virtual void set_DisplayHeight(int value);
    public abstract virtual IDocument get_ContentDocument();
    public abstract virtual IWindow get_ContentWindow();
}
[DomNameAttribute("HTMLOptionElement")]
public interface AngleSharp.Html.Dom.IHtmlOptionElement {
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("2")]
[DomNameAttribute("label")]
public string Label { get; public set; }
    [DomNameAttribute("defaultSelected")]
public bool IsDefaultSelected { get; public set; }
    [DomNameAttribute("selected")]
public bool IsSelected { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("value")]
public string Value { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("text")]
public string Text { get; public set; }
    [DomNameAttribute("index")]
public int Index { get; }
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("2")]
public abstract virtual string get_Label();
    [NullableContextAttribute("2")]
public abstract virtual void set_Label(string value);
    public abstract virtual bool get_IsDefaultSelected();
    public abstract virtual void set_IsDefaultSelected(bool value);
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Value();
    [NullableContextAttribute("1")]
public abstract virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Text();
    [NullableContextAttribute("1")]
public abstract virtual void set_Text(string value);
    public abstract virtual int get_Index();
}
[NullableContextAttribute("1")]
[DomNameAttribute("HTMLOptionsCollection")]
public interface AngleSharp.Html.Dom.IHtmlOptionsCollection {
    [DomNameAttribute("selectedIndex")]
public int SelectedIndex { get; public set; }
    [DomAccessorAttribute("1")]
public abstract virtual IHtmlOptionElement GetOptionAt(int index);
    [DomAccessorAttribute("2")]
public abstract virtual void SetOptionAt(int index, IHtmlOptionElement option);
    [DomNameAttribute("add")]
public abstract virtual void Add(IHtmlOptionElement element, IHtmlElement before);
    [DomNameAttribute("add")]
public abstract virtual void Add(IHtmlOptionsGroupElement element, IHtmlElement before);
    [DomNameAttribute("remove")]
public abstract virtual void Remove(int index);
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
}
[DomNameAttribute("HTMLOptGroupElement")]
public interface AngleSharp.Html.Dom.IHtmlOptionsGroupElement {
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("label")]
public string Label { get; public set; }
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Label();
    [NullableContextAttribute("2")]
public abstract virtual void set_Label(string value);
}
[DomNameAttribute("HTMLOListElement")]
public interface AngleSharp.Html.Dom.IHtmlOrderedListElement {
    [DomNameAttribute("reversed")]
public bool IsReversed { get; public set; }
    [DomNameAttribute("start")]
public int Start { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("type")]
public string Type { get; public set; }
    public abstract virtual bool get_IsReversed();
    public abstract virtual void set_IsReversed(bool value);
    public abstract virtual int get_Start();
    public abstract virtual void set_Start(int value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Type();
    [NullableContextAttribute("2")]
public abstract virtual void set_Type(string value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("HTMLOutputElement")]
public interface AngleSharp.Html.Dom.IHtmlOutputElement {
    [DomNameAttribute("htmlFor")]
public ISettableTokenList HtmlFor { get; }
    [DomNameAttribute("defaultValue")]
public string DefaultValue { get; public set; }
    [DomNameAttribute("value")]
public string Value { get; public set; }
    [DomNameAttribute("labels")]
public INodeList Labels { get; }
    [DomNameAttribute("type")]
public string Type { get; }
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    public abstract virtual ISettableTokenList get_HtmlFor();
    public abstract virtual string get_DefaultValue();
    public abstract virtual void set_DefaultValue(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual INodeList get_Labels();
    public abstract virtual string get_Type();
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
}
[DomNameAttribute("HTMLParagraphElement")]
public interface AngleSharp.Html.Dom.IHtmlParagraphElement {
}
[DomNameAttribute("HTMLParamElement")]
public interface AngleSharp.Html.Dom.IHtmlParamElement {
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("value")]
public string Value { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(string value);
}
[DomNameAttribute("HTMLPictureElement")]
public interface AngleSharp.Html.Dom.IHtmlPictureElement {
}
[DomNameAttribute("HTMLPreElement")]
public interface AngleSharp.Html.Dom.IHtmlPreElement {
}
[DomNameAttribute("HTMLProgressElement")]
public interface AngleSharp.Html.Dom.IHtmlProgressElement {
    [DomNameAttribute("value")]
public double Value { get; public set; }
    [DomNameAttribute("max")]
public double Maximum { get; public set; }
    [DomNameAttribute("position")]
public double Position { get; }
    public abstract virtual double get_Value();
    public abstract virtual void set_Value(double value);
    public abstract virtual double get_Maximum();
    public abstract virtual void set_Maximum(double value);
    public abstract virtual double get_Position();
}
[DomNameAttribute("HTMLQuoteElement")]
public interface AngleSharp.Html.Dom.IHtmlQuoteElement {
    [NullableAttribute("2")]
[DomNameAttribute("cite")]
public string Citation { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Citation();
    [NullableContextAttribute("2")]
public abstract virtual void set_Citation(string value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLScriptElement")]
public interface AngleSharp.Html.Dom.IHtmlScriptElement {
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("async")]
public bool IsAsync { get; public set; }
    [DomNameAttribute("defer")]
public bool IsDeferred { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("charset")]
public string CharacterSet { get; public set; }
    [DomNameAttribute("crossOrigin")]
public string CrossOrigin { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("text")]
public string Text { get; public set; }
    [DomNameAttribute("integrity")]
public string Integrity { get; public set; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual bool get_IsAsync();
    public abstract virtual void set_IsAsync(bool value);
    public abstract virtual bool get_IsDeferred();
    public abstract virtual void set_IsDeferred(bool value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_CharacterSet();
    public abstract virtual void set_CharacterSet(string value);
    public abstract virtual string get_CrossOrigin();
    public abstract virtual void set_CrossOrigin(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Text();
    [NullableContextAttribute("1")]
public abstract virtual void set_Text(string value);
    public abstract virtual string get_Integrity();
    public abstract virtual void set_Integrity(string value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("HTMLSelectElement")]
public interface AngleSharp.Html.Dom.IHtmlSelectElement {
    [DomNameAttribute("autofocus")]
public bool Autofocus { get; public set; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [DomNameAttribute("labels")]
public INodeList Labels { get; }
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("value")]
public string Value { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; }
    [DomNameAttribute("required")]
public bool IsRequired { get; public set; }
    [DomNameAttribute("selectedOptions")]
public IHtmlCollection`1<IHtmlOptionElement> SelectedOptions { get; }
    [DomNameAttribute("size")]
public int Size { get; public set; }
    [DomNameAttribute("options")]
public IHtmlOptionsCollection Options { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    [DomNameAttribute("multiple")]
public bool IsMultiple { get; public set; }
    [DomNameAttribute("selectedIndex")]
public int SelectedIndex { get; }
    [DomAccessorAttribute("3")]
public IHtmlOptionElement Item { get; public set; }
    public abstract virtual bool get_Autofocus();
    public abstract virtual void set_Autofocus(bool value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IHtmlFormElement get_Form();
    public abstract virtual INodeList get_Labels();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(string value);
    public abstract virtual string get_Type();
    public abstract virtual bool get_IsRequired();
    public abstract virtual void set_IsRequired(bool value);
    public abstract virtual IHtmlCollection`1<IHtmlOptionElement> get_SelectedOptions();
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual IHtmlOptionsCollection get_Options();
    public abstract virtual int get_Length();
    public abstract virtual bool get_IsMultiple();
    public abstract virtual void set_IsMultiple(bool value);
    public abstract virtual int get_SelectedIndex();
    public abstract virtual IHtmlOptionElement get_Item(int index);
    public abstract virtual void set_Item(int index, IHtmlOptionElement value);
    [DomNameAttribute("add")]
public abstract virtual void AddOption(IHtmlOptionElement element, IHtmlElement before);
    [DomNameAttribute("add")]
public abstract virtual void AddOption(IHtmlOptionsGroupElement element, IHtmlElement before);
    [DomNameAttribute("remove")]
public abstract virtual void RemoveOptionAt(int index);
}
[DomNameAttribute("HTMLSlotElement")]
public interface AngleSharp.Html.Dom.IHtmlSlotElement {
    [NullableAttribute("2")]
[DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
[DomNameAttribute("getDistributedNodes")]
public abstract virtual IEnumerable`1<INode> GetDistributedNodes();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLSourceElement")]
public interface AngleSharp.Html.Dom.IHtmlSourceElement {
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("srcset")]
public string SourceSet { get; public set; }
    [DomNameAttribute("sizes")]
public string Sizes { get; public set; }
    [DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("media")]
public string Media { get; public set; }
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_SourceSet();
    public abstract virtual void set_SourceSet(string value);
    public abstract virtual string get_Sizes();
    public abstract virtual void set_Sizes(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Media();
    public abstract virtual void set_Media(string value);
}
[DomNameAttribute("HTMLSpanElement")]
public interface AngleSharp.Html.Dom.IHtmlSpanElement {
}
[DomNameAttribute("HTMLStyleElement")]
public interface AngleSharp.Html.Dom.IHtmlStyleElement {
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("media")]
public string Media { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("type")]
public string Type { get; public set; }
    [DomNameAttribute("scoped")]
public bool IsScoped { get; public set; }
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Media();
    [NullableContextAttribute("2")]
public abstract virtual void set_Media(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Type();
    [NullableContextAttribute("2")]
public abstract virtual void set_Type(string value);
    public abstract virtual bool get_IsScoped();
    public abstract virtual void set_IsScoped(bool value);
}
[DomNameAttribute("HTMLTableCaptionElement")]
public interface AngleSharp.Html.Dom.IHtmlTableCaptionElement {
}
[DomNameAttribute("HTMLTableCellElement")]
public interface AngleSharp.Html.Dom.IHtmlTableCellElement {
    [DomNameAttribute("colSpan")]
public int ColumnSpan { get; public set; }
    [DomNameAttribute("rowSpan")]
public int RowSpan { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("headers")]
public ISettableTokenList Headers { get; }
    [DomNameAttribute("cellIndex")]
public int Index { get; }
    public abstract virtual int get_ColumnSpan();
    public abstract virtual void set_ColumnSpan(int value);
    public abstract virtual int get_RowSpan();
    public abstract virtual void set_RowSpan(int value);
    [NullableContextAttribute("1")]
public abstract virtual ISettableTokenList get_Headers();
    public abstract virtual int get_Index();
}
[DomNameAttribute("HTMLTableColElement")]
public interface AngleSharp.Html.Dom.IHtmlTableColumnElement {
    [DomNameAttribute("span")]
public int Span { get; public set; }
    public abstract virtual int get_Span();
    public abstract virtual void set_Span(int value);
}
[DomNameAttribute("HTMLTableDataCellElement")]
public interface AngleSharp.Html.Dom.IHtmlTableDataCellElement {
}
[DomNameAttribute("HTMLTableElement")]
public interface AngleSharp.Html.Dom.IHtmlTableElement {
    [NullableAttribute("2")]
[DomNameAttribute("caption")]
public IHtmlTableCaptionElement Caption { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("tHead")]
public IHtmlTableSectionElement Head { get; public set; }
    [NullableAttribute("2")]
[DomNameAttribute("tFoot")]
public IHtmlTableSectionElement Foot { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("tBodies")]
public IHtmlCollection`1<IHtmlTableSectionElement> Bodies { get; }
    [NullableAttribute("1")]
[DomNameAttribute("rows")]
public IHtmlCollection`1<IHtmlTableRowElement> Rows { get; }
    [DomNameAttribute("border")]
public UInt32 Border { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual IHtmlTableCaptionElement get_Caption();
    [NullableContextAttribute("2")]
public abstract virtual void set_Caption(IHtmlTableCaptionElement value);
    [NullableContextAttribute("1")]
[DomNameAttribute("createCaption")]
public abstract virtual IHtmlTableCaptionElement CreateCaption();
    [DomNameAttribute("deleteCaption")]
public abstract virtual void DeleteCaption();
    [NullableContextAttribute("2")]
public abstract virtual IHtmlTableSectionElement get_Head();
    [NullableContextAttribute("2")]
public abstract virtual void set_Head(IHtmlTableSectionElement value);
    [NullableContextAttribute("1")]
[DomNameAttribute("createTHead")]
public abstract virtual IHtmlTableSectionElement CreateHead();
    [DomNameAttribute("deleteTHead")]
public abstract virtual void DeleteHead();
    [NullableContextAttribute("2")]
public abstract virtual IHtmlTableSectionElement get_Foot();
    [NullableContextAttribute("2")]
public abstract virtual void set_Foot(IHtmlTableSectionElement value);
    [NullableContextAttribute("1")]
[DomNameAttribute("createTFoot")]
public abstract virtual IHtmlTableSectionElement CreateFoot();
    [DomNameAttribute("deleteTFoot")]
public abstract virtual void DeleteFoot();
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlTableSectionElement> get_Bodies();
    [NullableContextAttribute("1")]
[DomNameAttribute("createTBody")]
public abstract virtual IHtmlTableSectionElement CreateBody();
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlTableRowElement> get_Rows();
    [NullableContextAttribute("1")]
[DomNameAttribute("insertRow")]
public abstract virtual IHtmlTableRowElement InsertRowAt(int index);
    [DomNameAttribute("deleteRow")]
public abstract virtual void RemoveRowAt(int index);
    public abstract virtual UInt32 get_Border();
    public abstract virtual void set_Border(UInt32 value);
}
[DomNameAttribute("HTMLTableHeaderCellElement")]
public interface AngleSharp.Html.Dom.IHtmlTableHeaderCellElement {
    [NullableAttribute("2")]
[DomNameAttribute("scope")]
public string Scope { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Scope();
    [NullableContextAttribute("2")]
public abstract virtual void set_Scope(string value);
}
[DomNameAttribute("HTMLTableRowElement")]
public interface AngleSharp.Html.Dom.IHtmlTableRowElement {
    [DomNameAttribute("rowIndex")]
public int Index { get; }
    [DomNameAttribute("sectionRowIndex")]
public int IndexInSection { get; }
    [NullableAttribute("1")]
[DomNameAttribute("cells")]
public IHtmlCollection`1<IHtmlTableCellElement> Cells { get; }
    public abstract virtual int get_Index();
    public abstract virtual int get_IndexInSection();
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlTableCellElement> get_Cells();
    [NullableContextAttribute("1")]
[DomNameAttribute("insertCell")]
public abstract virtual IHtmlTableCellElement InsertCellAt(int index, TableCellKind tableCellKind);
    [DomNameAttribute("deleteCell")]
public abstract virtual void RemoveCellAt(int index);
}
[DomNameAttribute("HTMLTableSectionElement")]
public interface AngleSharp.Html.Dom.IHtmlTableSectionElement {
    [NullableAttribute("1")]
[DomNameAttribute("rows")]
public IHtmlCollection`1<IHtmlTableRowElement> Rows { get; }
    [NullableContextAttribute("1")]
public abstract virtual IHtmlCollection`1<IHtmlTableRowElement> get_Rows();
    [NullableContextAttribute("1")]
[DomNameAttribute("insertRow")]
public abstract virtual IHtmlTableRowElement InsertRowAt(int index);
    [DomNameAttribute("deleteRow")]
public abstract virtual void RemoveRowAt(int index);
}
[DomNameAttribute("HTMLTemplateElement")]
public interface AngleSharp.Html.Dom.IHtmlTemplateElement {
    [NullableAttribute("1")]
[DomNameAttribute("content")]
public IDocumentFragment Content { get; }
    [NullableContextAttribute("1")]
public abstract virtual IDocumentFragment get_Content();
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLTextAreaElement")]
public interface AngleSharp.Html.Dom.IHtmlTextAreaElement {
    [DomNameAttribute("autofocus")]
public bool Autofocus { get; public set; }
    [DomNameAttribute("disabled")]
public bool IsDisabled { get; public set; }
    [DomNameAttribute("form")]
public IHtmlFormElement Form { get; }
    [NullableAttribute("1")]
[DomNameAttribute("labels")]
public INodeList Labels { get; }
    [DomNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("type")]
public string Type { get; }
    [DomNameAttribute("required")]
public bool IsRequired { get; public set; }
    [DomNameAttribute("readOnly")]
public bool IsReadOnly { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("defaultValue")]
public string DefaultValue { get; public set; }
    [NullableAttribute("1")]
[DomNameAttribute("value")]
public string Value { get; public set; }
    [DomNameAttribute("wrap")]
public string Wrap { get; public set; }
    [DomNameAttribute("textLength")]
public int TextLength { get; }
    [DomNameAttribute("rows")]
public int Rows { get; public set; }
    [DomNameAttribute("cols")]
public int Columns { get; public set; }
    [DomNameAttribute("maxLength")]
public int MaxLength { get; public set; }
    [DomNameAttribute("placeholder")]
public string Placeholder { get; public set; }
    [DomNameAttribute("selectionDirection")]
public string SelectionDirection { get; }
    [DomNameAttribute("dirName")]
public string DirectionName { get; public set; }
    [DomNameAttribute("selectionStart")]
public int SelectionStart { get; public set; }
    [DomNameAttribute("selectionEnd")]
public int SelectionEnd { get; public set; }
    public abstract virtual bool get_Autofocus();
    public abstract virtual void set_Autofocus(bool value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual IHtmlFormElement get_Form();
    [NullableContextAttribute("1")]
public abstract virtual INodeList get_Labels();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Type();
    public abstract virtual bool get_IsRequired();
    public abstract virtual void set_IsRequired(bool value);
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void set_IsReadOnly(bool value);
    [NullableContextAttribute("1")]
public abstract virtual string get_DefaultValue();
    [NullableContextAttribute("1")]
public abstract virtual void set_DefaultValue(string value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Value();
    [NullableContextAttribute("1")]
public abstract virtual void set_Value(string value);
    public abstract virtual string get_Wrap();
    public abstract virtual void set_Wrap(string value);
    public abstract virtual int get_TextLength();
    public abstract virtual int get_Rows();
    public abstract virtual void set_Rows(int value);
    public abstract virtual int get_Columns();
    public abstract virtual void set_Columns(int value);
    public abstract virtual int get_MaxLength();
    public abstract virtual void set_MaxLength(int value);
    public abstract virtual string get_Placeholder();
    public abstract virtual void set_Placeholder(string value);
    public abstract virtual string get_SelectionDirection();
    public abstract virtual string get_DirectionName();
    public abstract virtual void set_DirectionName(string value);
    public abstract virtual int get_SelectionStart();
    public abstract virtual void set_SelectionStart(int value);
    public abstract virtual int get_SelectionEnd();
    public abstract virtual void set_SelectionEnd(int value);
    [DomNameAttribute("select")]
public abstract virtual void SelectAll();
    [DomNameAttribute("setSelectionRange")]
public abstract virtual void Select(int selectionStart, int selectionEnd, string selectionDirection);
}
[DomNameAttribute("HTMLTimeElement")]
public interface AngleSharp.Html.Dom.IHtmlTimeElement {
    [NullableAttribute("2")]
[DomNameAttribute("datetime")]
public string DateTime { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string get_DateTime();
    [NullableContextAttribute("2")]
public abstract virtual void set_DateTime(string value);
}
[DomNameAttribute("HTMLTitleElement")]
public interface AngleSharp.Html.Dom.IHtmlTitleElement {
    [NullableAttribute("1")]
[DomNameAttribute("text")]
public string Text { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Text();
    [NullableContextAttribute("1")]
public abstract virtual void set_Text(string value);
}
[NullableContextAttribute("2")]
[DomNameAttribute("HTMLTrackElement")]
public interface AngleSharp.Html.Dom.IHtmlTrackElement {
    [DomNameAttribute("kind")]
public string Kind { get; public set; }
    [DomNameAttribute("src")]
public string Source { get; public set; }
    [DomNameAttribute("srclang")]
public string SourceLanguage { get; public set; }
    [DomNameAttribute("label")]
public string Label { get; public set; }
    [DomNameAttribute("default")]
public bool IsDefault { get; public set; }
    [DomNameAttribute("readyState")]
public TrackReadyState ReadyState { get; }
    [DomNameAttribute("track")]
public ITextTrack Track { get; }
    public abstract virtual string get_Kind();
    public abstract virtual void set_Kind(string value);
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_SourceLanguage();
    public abstract virtual void set_SourceLanguage(string value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual TrackReadyState get_ReadyState();
    public abstract virtual ITextTrack get_Track();
}
[DomNameAttribute("HTMLUnknownElement")]
public interface AngleSharp.Html.Dom.IHtmlUnknownElement {
}
[DomNameAttribute("HTMLUListElement")]
public interface AngleSharp.Html.Dom.IHtmlUnorderedListElement {
}
[DomNameAttribute("HTMLVideoElement")]
public interface AngleSharp.Html.Dom.IHtmlVideoElement {
    [DomNameAttribute("width")]
public int DisplayWidth { get; public set; }
    [DomNameAttribute("height")]
public int DisplayHeight { get; public set; }
    [DomNameAttribute("videoWidth")]
public int OriginalWidth { get; }
    [DomNameAttribute("videoHeight")]
public int OriginalHeight { get; }
    [NullableAttribute("2")]
[DomNameAttribute("poster")]
public string Poster { get; public set; }
    public abstract virtual int get_DisplayWidth();
    public abstract virtual void set_DisplayWidth(int value);
    public abstract virtual int get_DisplayHeight();
    public abstract virtual void set_DisplayHeight(int value);
    public abstract virtual int get_OriginalWidth();
    public abstract virtual int get_OriginalHeight();
    [NullableContextAttribute("2")]
public abstract virtual string get_Poster();
    [NullableContextAttribute("2")]
public abstract virtual void set_Poster(string value);
}
[NullableContextAttribute("1")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Html.Dom.ILabelabelElement {
    [DomNameAttribute("labels")]
public INodeList Labels { get; }
    public abstract virtual INodeList get_Labels();
}
[ExtensionAttribute]
public static class AngleSharp.Html.Dom.ImageExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Stack`1<IHtmlSourceElement> GetSources(IHtmlImageElement img);
}
[NullableContextAttribute("1")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Html.Dom.IValidation {
    [DomNameAttribute("willValidate")]
public bool WillValidate { get; }
    [DomNameAttribute("validity")]
public IValidityState Validity { get; }
    [NullableAttribute("2")]
[DomNameAttribute("validationMessage")]
public string ValidationMessage { get; }
    public abstract virtual bool get_WillValidate();
    public abstract virtual IValidityState get_Validity();
    [NullableContextAttribute("2")]
public abstract virtual string get_ValidationMessage();
    [DomNameAttribute("checkValidity")]
public abstract virtual bool CheckValidity();
    [DomNameAttribute("setCustomValidity")]
public abstract virtual void SetCustomValidity(string error);
}
[DomNameAttribute("ValidityState")]
public interface AngleSharp.Html.Dom.IValidityState {
    [DomNameAttribute("valueMissing")]
public bool IsValueMissing { get; }
    [DomNameAttribute("typeMismatch")]
public bool IsTypeMismatch { get; }
    [DomNameAttribute("patternMismatch")]
public bool IsPatternMismatch { get; }
    [DomNameAttribute("tooLong")]
public bool IsTooLong { get; }
    [DomNameAttribute("tooShort")]
public bool IsTooShort { get; }
    [DomNameAttribute("badInput")]
public bool IsBadInput { get; }
    [DomNameAttribute("rangeUnderflow")]
public bool IsRangeUnderflow { get; }
    [DomNameAttribute("rangeOverflow")]
public bool IsRangeOverflow { get; }
    [DomNameAttribute("stepMismatch")]
public bool IsStepMismatch { get; }
    [DomNameAttribute("customError")]
public bool IsCustomError { get; }
    [DomNameAttribute("valid")]
public bool IsValid { get; }
    public abstract virtual bool get_IsValueMissing();
    public abstract virtual bool get_IsTypeMismatch();
    public abstract virtual bool get_IsPatternMismatch();
    public abstract virtual bool get_IsTooLong();
    public abstract virtual bool get_IsTooShort();
    public abstract virtual bool get_IsBadInput();
    public abstract virtual bool get_IsRangeUnderflow();
    public abstract virtual bool get_IsRangeOverflow();
    public abstract virtual bool get_IsStepMismatch();
    public abstract virtual bool get_IsCustomError();
    public abstract virtual bool get_IsValid();
}
public enum AngleSharp.Html.Dom.TableCellKind : Enum {
    public int value__;
    public static TableCellKind Td;
    public static TableCellKind Th;
}
public enum AngleSharp.Html.Dom.TableFrames : Enum {
    public byte value__;
    public static TableFrames Void;
    public static TableFrames Box;
    public static TableFrames Above;
    public static TableFrames Below;
    public static TableFrames HSides;
    public static TableFrames VSides;
    public static TableFrames LHS;
    public static TableFrames RHS;
    public static TableFrames Border;
}
public enum AngleSharp.Html.Dom.TableRules : Enum {
    public byte value__;
    public static TableRules None;
    public static TableRules Rows;
    public static TableRules Cols;
    public static TableRules Groups;
    public static TableRules All;
}
[DomNameAttribute("HTMLTrackElement")]
public enum AngleSharp.Html.Dom.TrackReadyState : Enum {
    public byte value__;
    [DomNameAttribute("NONE")]
public static TrackReadyState None;
    [DomNameAttribute("LOADING")]
public static TrackReadyState Loading;
    [DomNameAttribute("LOADED")]
public static TrackReadyState Loaded;
    [DomNameAttribute("ERROR")]
public static TrackReadyState Error;
}
internal class AngleSharp.Html.Dom.ValidityState : object {
    private ValidationErrors _err;
    public bool IsValueMissing { get; public set; }
    public bool IsTypeMismatch { get; public set; }
    public bool IsPatternMismatch { get; public set; }
    public bool IsBadInput { get; public set; }
    public bool IsTooLong { get; public set; }
    public bool IsTooShort { get; public set; }
    public bool IsRangeUnderflow { get; public set; }
    public bool IsRangeOverflow { get; public set; }
    public bool IsStepMismatch { get; public set; }
    public bool IsCustomError { get; public set; }
    public bool IsValid { get; }
    public sealed virtual bool get_IsValueMissing();
    public void set_IsValueMissing(bool value);
    public sealed virtual bool get_IsTypeMismatch();
    public void set_IsTypeMismatch(bool value);
    public sealed virtual bool get_IsPatternMismatch();
    public void set_IsPatternMismatch(bool value);
    public sealed virtual bool get_IsBadInput();
    public void set_IsBadInput(bool value);
    public sealed virtual bool get_IsTooLong();
    public void set_IsTooLong(bool value);
    public sealed virtual bool get_IsTooShort();
    public void set_IsTooShort(bool value);
    public sealed virtual bool get_IsRangeUnderflow();
    public void set_IsRangeUnderflow(bool value);
    public sealed virtual bool get_IsRangeOverflow();
    public void set_IsRangeOverflow(bool value);
    public sealed virtual bool get_IsStepMismatch();
    public void set_IsStepMismatch(bool value);
    public sealed virtual bool get_IsCustomError();
    public void set_IsCustomError(bool value);
    public sealed virtual bool get_IsValid();
    public void Reset(ValidationErrors err);
    private void Set(bool oldValue, bool newValue, ValidationErrors err);
}
[FlagsAttribute]
internal enum AngleSharp.Html.EventFlags : Enum {
    public byte value__;
    public static EventFlags None;
    public static EventFlags StopPropagation;
    public static EventFlags StopImmediatePropagation;
    public static EventFlags Canceled;
    public static EventFlags Initialized;
    public static EventFlags Dispatch;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.FormControlState : object {
    private string _name;
    private string _type;
    [NullableAttribute("2")]
private string _value;
    public string Name { get; }
    [NullableAttribute("2")]
public string Value { get; }
    public string Type { get; }
    public FormControlState(string name, string type, string value);
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_Value();
    public string get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.FormDataSet : object {
    private List`1<FormDataSetEntry> _entries;
    private string _boundary;
    public string Boundary { get; }
    public string get_Boundary();
    [NullableContextAttribute("2")]
public Stream AsMultipart(IHtmlEncoder htmlEncoder, Encoding encoding);
    public Stream AsUrlEncoded(Encoding encoding);
    public Stream AsPlaintext(Encoding encoding);
    public Stream AsJson();
    public Stream As(IFormSubmitter submitter, Encoding encoding);
    public void Append(string name, string value, string type);
    public void Append(string name, IFile value, string type);
    private Stream BuildRequestContent(Encoding encoding, Action`1<StreamWriter> process);
    private void Connect(IFormSubmitter submitter, StreamWriter stream);
    private void ReplaceCharset(Encoding encoding);
    private void FixPotentialBoundaryCollisions(Encoding encoding);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private void <AsUrlEncoded>b__6_0(StreamWriter stream);
    [CompilerGeneratedAttribute]
private void <AsPlaintext>b__7_0(StreamWriter stream);
    [CompilerGeneratedAttribute]
private void <AsJson>b__8_0(StreamWriter stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Html.FormMethodNames : object {
    public static string Get;
    public static string Post;
    public static string Dialog;
    private static FormMethodNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.FileDataSetEntry : FormDataSetEntry {
    private IFile _value;
    public string FileName { get; }
    public string ContentType { get; }
    public FileDataSetEntry(string name, IFile value, string type);
    public string get_FileName();
    public string get_ContentType();
    public virtual bool Contains(string boundary, Encoding encoding);
    public virtual void Accept(IFormDataSetVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Html.Forms.FormDataSetEntry : object {
    private string _name;
    private string _type;
    public bool HasName { get; }
    public string Name { get; }
    public string Type { get; }
    public FormDataSetEntry(string name, string type);
    public bool get_HasName();
    public string get_Name();
    public string get_Type();
    public abstract virtual void Accept(IFormDataSetVisitor visitor);
    public abstract virtual bool Contains(string boundary, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class AngleSharp.Html.Forms.FormDataSetExtensions : object {
    [ExtensionAttribute]
public static Stream CreateBody(FormDataSet formDataSet, string enctype, string charset, IHtmlEncoder htmlEncoder);
    [ExtensionAttribute]
public static Stream CreateBody(FormDataSet formDataSet, string enctype, Encoding encoding, IHtmlEncoder htmlEncoder);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.Forms.IFormDataSetVisitor {
    public abstract virtual void Text(FormDataSetEntry entry, string value);
    public abstract virtual void File(FormDataSetEntry entry, string fileName, string contentType, IFile content);
}
public interface AngleSharp.Html.Forms.IFormSubmitter {
    [NullableContextAttribute("1")]
public abstract virtual void Serialize(StreamWriter stream);
}
public class AngleSharp.Html.Forms.Submitters.DefaultHtmlEncoder : object {
    [NullableContextAttribute("1")]
public sealed virtual string Encode(string value, Encoding encoding);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.Forms.Submitters.IHtmlEncoder {
    public abstract virtual string Encode(string value, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Html.Forms.Submitters.Json.JsonArray : JsonElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<JsonElement> _elements;
    public int Length { get; }
    [NullableAttribute("2")]
public JsonElement Item { get; public set; }
    public JsonArray(int capacity);
    public int get_Length();
    public void Push(JsonElement element);
    public void Add(JsonElement element);
    [NullableContextAttribute("2")]
public JsonElement get_Item(int key);
    [NullableContextAttribute("2")]
public void set_Item(int key, JsonElement value);
    public virtual string ToString();
    public sealed virtual IEnumerator`1<JsonElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class AngleSharp.Html.Forms.Submitters.Json.JsonElement : object {
    [NullableAttribute("2")]
public JsonElement Item { get; public set; }
    public virtual JsonElement get_Item(string key);
    public virtual void set_Item(string key, JsonElement value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Html.Forms.Submitters.Json.JsonObject : JsonElement {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, JsonElement> _properties;
    [NullableAttribute("2")]
public JsonElement Item { get; public set; }
    public virtual JsonElement get_Item(string key);
    public virtual void set_Item(string key, JsonElement value);
    public virtual string ToString();
}
internal abstract class AngleSharp.Html.Forms.Submitters.Json.JsonStep : object {
    [CompilerGeneratedAttribute]
private bool <Append>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonStep <Next>k__BackingField;
    public bool Append { get; public set; }
    public JsonStep Next { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(bool value);
    [CompilerGeneratedAttribute]
public JsonStep get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(JsonStep value);
    public static IEnumerable`1<JsonStep> Parse(string path);
    private static IEnumerable`1<JsonStep> FailedJsonSteps(string original);
    protected abstract virtual JsonElement CreateElement();
    protected abstract virtual JsonElement SetValue(JsonElement context, JsonElement value);
    protected abstract virtual JsonElement GetValue(JsonElement context);
    protected abstract virtual JsonElement ConvertArray(JsonArray value);
    public JsonElement Run(JsonElement context, JsonElement value, bool file);
    private JsonElement JsonEncodeValue(JsonElement context, JsonElement value, bool file);
    private JsonElement JsonEncodeLastValue(JsonElement context, JsonElement value, bool file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.Submitters.Json.JsonValue : JsonElement {
    private string _value;
    public JsonValue(string value);
    public JsonValue(double value);
    public JsonValue(bool value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.Submitters.JsonFormDataSetVisitor : object {
    private JsonObject _context;
    public sealed virtual void Text(FormDataSetEntry entry, string value);
    public sealed virtual void File(FormDataSetEntry entry, string fileName, string contentType, IFile file);
    public sealed virtual void Serialize(StreamWriter stream);
    private static JsonValue CreateValue(string type, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.Submitters.MultipartFormDataSetVisitor : object {
    private static string DashDash;
    private IHtmlEncoder _htmlEncoder;
    private Encoding _encoding;
    private List`1<Action`1<StreamWriter>> _writers;
    private string _boundary;
    public MultipartFormDataSetVisitor(IHtmlEncoder htmlEncoder, Encoding encoding, string boundary);
    private static MultipartFormDataSetVisitor();
    public sealed virtual void Text(FormDataSetEntry entry, string value);
    public sealed virtual void File(FormDataSetEntry entry, string fileName, string contentType, IFile content);
    public sealed virtual void Serialize(StreamWriter stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.Submitters.PlaintextFormDataSetVisitor : object {
    private List`1<string> _lines;
    public sealed virtual void Text(FormDataSetEntry entry, string value);
    public sealed virtual void File(FormDataSetEntry entry, string fileName, string contentType, IFile content);
    public sealed virtual void Serialize(StreamWriter stream);
    private void Add(string name, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.Submitters.UrlEncodedFormDataSetVisitor : object {
    private Encoding _encoding;
    private List`1<string> _lines;
    private bool _first;
    private string _index;
    public UrlEncodedFormDataSetVisitor(Encoding encoding);
    public sealed virtual void Text(FormDataSetEntry entry, string value);
    public sealed virtual void File(FormDataSetEntry entry, string fileName, string contentType, IFile content);
    public sealed virtual void Serialize(StreamWriter stream);
    private void Add(Byte[] name, Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Forms.TextDataSetEntry : FormDataSetEntry {
    private string _value;
    public TextDataSetEntry(string name, string value, string type);
    public virtual bool Contains(string boundary, Encoding encoding);
    public virtual void Accept(IFormDataSetVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.HtmlElementFactory : object {
    internal static HtmlElementFactory Instance;
    private Dictionary`2<string, Creator> creators;
    private static HtmlElementFactory();
    public sealed virtual HtmlElement Create(Document document, string localName, string prefix, NodeFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.HtmlEntityProvider : object {
    private Dictionary`2<char, Dictionary`2<StringOrMemory, string>> _entities;
    private static HtmlEntityProvider Instance;
    public static IEntityProvider Resolver;
    public static IEntityProviderExtended ResolverExtended;
    public static IReverseEntityProvider ReverseResolver { get; }
    private static HtmlEntityProvider();
    public static IReverseEntityProvider get_ReverseResolver();
    private Dictionary`2<string, string> GetSymbolLittleA();
    private Dictionary`2<string, string> GetSymbolBigA();
    private Dictionary`2<string, string> GetSymbolLittleB();
    private Dictionary`2<string, string> GetSymbolBigB();
    private Dictionary`2<string, string> GetSymbolLittleC();
    private Dictionary`2<string, string> GetSymbolBigC();
    private Dictionary`2<string, string> GetSymbolLittleD();
    private Dictionary`2<string, string> GetSymbolBigD();
    private Dictionary`2<string, string> GetSymbolLittleE();
    private Dictionary`2<string, string> GetSymbolBigE();
    private Dictionary`2<string, string> GetSymbolLittleF();
    private Dictionary`2<string, string> GetSymbolBigF();
    private Dictionary`2<string, string> GetSymbolLittleG();
    private Dictionary`2<string, string> GetSymbolBigG();
    private Dictionary`2<string, string> GetSymbolLittleH();
    private Dictionary`2<string, string> GetSymbolBigH();
    private Dictionary`2<string, string> GetSymbolLittleI();
    private Dictionary`2<string, string> GetSymbolBigI();
    private Dictionary`2<string, string> GetSymbolLittleJ();
    private Dictionary`2<string, string> GetSymbolBigJ();
    private Dictionary`2<string, string> GetSymbolLittleK();
    private Dictionary`2<string, string> GetSymbolBigK();
    private Dictionary`2<string, string> GetSymbolLittleL();
    private Dictionary`2<string, string> GetSymbolBigL();
    private Dictionary`2<string, string> GetSymbolLittleM();
    private Dictionary`2<string, string> GetSymbolBigM();
    private Dictionary`2<string, string> GetSymbolLittleN();
    private Dictionary`2<string, string> GetSymbolBigN();
    private Dictionary`2<string, string> GetSymbolLittleO();
    private Dictionary`2<string, string> GetSymbolBigO();
    private Dictionary`2<string, string> GetSymbolLittleP();
    private Dictionary`2<string, string> GetSymbolBigP();
    private Dictionary`2<string, string> GetSymbolLittleQ();
    private Dictionary`2<string, string> GetSymbolBigQ();
    private Dictionary`2<string, string> GetSymbolLittleR();
    private Dictionary`2<string, string> GetSymbolBigR();
    private Dictionary`2<string, string> GetSymbolLittleS();
    private Dictionary`2<string, string> GetSymbolBigS();
    private Dictionary`2<string, string> GetSymbolLittleT();
    private Dictionary`2<string, string> GetSymbolBigT();
    private Dictionary`2<string, string> GetSymbolLittleU();
    private Dictionary`2<string, string> GetSymbolBigU();
    private Dictionary`2<string, string> GetSymbolLittleV();
    private Dictionary`2<string, string> GetSymbolBigV();
    private Dictionary`2<string, string> GetSymbolLittleW();
    private Dictionary`2<string, string> GetSymbolBigW();
    private Dictionary`2<string, string> GetSymbolLittleX();
    private Dictionary`2<string, string> GetSymbolBigX();
    private Dictionary`2<string, string> GetSymbolLittleY();
    private Dictionary`2<string, string> GetSymbolBigY();
    private Dictionary`2<string, string> GetSymbolLittleZ();
    private Dictionary`2<string, string> GetSymbolBigZ();
    public sealed virtual string GetSymbol(string name);
    [NullableContextAttribute("2")]
public sealed virtual string GetSymbol(StringOrMemory name);
    public sealed virtual string GetName(string symbol);
    private static string Convert(int code);
    private static string Convert(int leading, int trailing);
    public static bool IsInvalidNumber(int code);
    public static bool IsInCharacterTable(int code);
    [NullableContextAttribute("2")]
public static string GetSymbolFromTable(int code);
    public static bool IsInInvalidRange(int code);
    private static void AddSingle(Dictionary`2<string, string> symbols, string key, string value);
    private static void AddBoth(Dictionary`2<string, string> symbols, string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.HtmlMarkupFormatter : object {
    public static IMarkupFormatter Instance;
    private static HtmlMarkupFormatter();
    public virtual string Comment(IComment comment);
    public virtual string Doctype(IDocumentType doctype);
    public virtual string Processing(IProcessingInstruction processing);
    public virtual string LiteralText(ICharacterData text);
    public virtual string Text(ICharacterData text);
    public virtual string OpenTag(IElement element, bool selfClosing);
    public virtual string CloseTag(IElement element, bool selfClosing);
    protected virtual string Attribute(IAttr attr);
    internal static void WriteAttributeName(IAttr attr, StringBuilder stringBuilder);
    internal static void WriteAttributeValue(IAttr attr, StringBuilder stringBuilder);
    public static string EscapeText(string content);
    public static string GetIds(string publicId, string systemId);
    public static string XmlNamespaceLocalName(string name);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.IInputTypeFactory {
    public abstract virtual BaseInputType Create(IHtmlInputElement input, string type);
}
[NullableContextAttribute("2")]
public interface AngleSharp.Html.ILinkRelationFactory {
    public abstract virtual BaseLinkRelation Create(IHtmlLinkElement link, string relation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Html.InputTypeNames : object {
    public static string Hidden;
    public static string Text;
    public static string Search;
    public static string Tel;
    public static string Url;
    public static string Email;
    public static string Password;
    public static string Datetime;
    public static string DatetimeLocal;
    public static string Date;
    public static string Month;
    public static string Week;
    public static string Time;
    public static string Number;
    public static string Range;
    public static string Color;
    public static string Checkbox;
    public static string Radio;
    public static string File;
    public static string Submit;
    public static string Image;
    public static string Reset;
    public static string Button;
    public static string SelectMultiple;
    public static string SelectOne;
    private static InputTypeNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Html.InputTypes.BaseInputType : object {
    protected static DateTime UnixEpoch;
    protected static Regex NumberPattern;
    private IHtmlInputElement _input;
    private bool _validate;
    private string _name;
    public string Name { get; }
    public bool CanBeValidated { get; }
    public IHtmlInputElement Input { get; }
    public BaseInputType(IHtmlInputElement input, string name, bool validate);
    private static BaseInputType();
    public string get_Name();
    public bool get_CanBeValidated();
    public IHtmlInputElement get_Input();
    public virtual bool IsAppendingData(IHtmlElement submitter);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void ConstructDataSet(FormDataSet dataSet);
    public virtual void DoStep(int n);
    protected bool IsStepMismatch();
    protected double GetStep();
    private double GetStepBase();
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    protected static ValidationErrors GetErrorsFrom(IValidityState state);
    protected ValidationErrors CheckTime(IValidityState state, string value, Nullable`1<DateTime> date, Nullable`1<DateTime> min, Nullable`1<DateTime> max);
    [NullableContextAttribute("2")]
protected static bool IsInvalidPattern(string pattern, string value);
    [NullableContextAttribute("2")]
protected static Nullable`1<double> ToNumber(string value);
    protected static Nullable`1<TimeSpan> ToTime(string value, Int32& position);
    protected static int GetWeekOfYear(DateTime value);
    protected static bool IsLegalHour(int value);
    protected static bool IsLegalSecond(int value);
    protected static bool IsLegalMinute(int value);
    protected static bool IsLegalMonth(int value);
    protected static bool IsLegalYear(int value);
    protected static bool IsLegalDay(int day, int month, int year);
    protected static bool IsLegalWeek(int week, int year);
    protected static bool IsTimeSeparator(char chr);
    protected static int FetchDigits(string value);
    protected static bool PositionIsValidForDateTime(string value, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.ButtonInputType : BaseInputType {
    public ButtonInputType(IHtmlInputElement input, string name);
    public virtual bool IsAppendingData(IHtmlElement submitter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.CheckedInputType : BaseInputType {
    public CheckedInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    public virtual void ConstructDataSet(FormDataSet dataSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.ColorInputType : BaseInputType {
    private static Regex hexColorPattern;
    public ColorInputType(IHtmlInputElement input, string name);
    private static ColorInputType();
    public virtual ValidationErrors Check(IValidityState current);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.DateInputType : BaseInputType {
    public DateInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    [NullableContextAttribute("2")]
protected static Nullable`1<DateTime> ConvertFromDate(string value);
    private static bool IsLegalPosition(string value, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.DatetimeInputType : BaseInputType {
    public DatetimeInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    [NullableContextAttribute("2")]
protected static Nullable`1<DateTime> ConvertFromDateTime(string value);
    private static bool IsLegalPosition(string value, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.DatetimeLocalInputType : BaseInputType {
    public DatetimeLocalInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    [NullableContextAttribute("2")]
protected static Nullable`1<DateTime> ConvertFromDateTime(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.EmailInputType : BaseInputType {
    private static Regex emailPattern;
    public EmailInputType(IHtmlInputElement input, string name);
    private static EmailInputType();
    public virtual ValidationErrors Check(IValidityState current);
    private static bool IsInvalidEmail(bool multiple, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.FileInputType : BaseInputType {
    private FileList _files;
    public FileList Files { get; }
    public FileInputType(IHtmlInputElement input, string name);
    public FileList get_Files();
    public virtual void ConstructDataSet(FormDataSet dataSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.ImageInputType : BaseInputType {
    [NullableAttribute("2")]
private ImageRequestProcessor _request;
    public int Width { get; }
    public int Height { get; }
    public ImageInputType(IHtmlInputElement input, string name);
    public int get_Width();
    public int get_Height();
    public virtual bool IsAppendingData(IHtmlElement submitter);
    public virtual void ConstructDataSet(FormDataSet dataSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.MonthInputType : BaseInputType {
    public MonthInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    [NullableContextAttribute("2")]
protected static Nullable`1<DateTime> ConvertFromMonth(string value);
    private static bool IsLegalPosition(string value, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.NumberInputType : BaseInputType {
    public NumberInputType(IHtmlInputElement input, string name);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual ValidationErrors Check(IValidityState current);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.PatternInputType : BaseInputType {
    public PatternInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.SubmitInputType : BaseInputType {
    public SubmitInputType(IHtmlInputElement input, string name);
    public virtual bool IsAppendingData(IHtmlElement submitter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.TextInputType : BaseInputType {
    public TextInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    public virtual void ConstructDataSet(FormDataSet dataSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.TimeInputType : BaseInputType {
    public TimeInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    [NullableContextAttribute("2")]
protected static Nullable`1<DateTime> ConvertFromTime(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.UrlInputType : BaseInputType {
    public UrlInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    private static bool IsInvalidUrl(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.InputTypes.WeekInputType : BaseInputType {
    public WeekInputType(IHtmlInputElement input, string name);
    public virtual ValidationErrors Check(IValidityState current);
    [NullableContextAttribute("2")]
public virtual Nullable`1<double> ConvertToNumber(string value);
    public virtual string ConvertFromNumber(double value);
    public virtual Nullable`1<DateTime> ConvertToDate(string value);
    public virtual string ConvertFromDate(DateTime value);
    public virtual void DoStep(int n);
    protected virtual double GetDefaultStepBase();
    protected virtual double GetDefaultStep();
    protected virtual double GetStepScaleFactor();
    [NullableContextAttribute("2")]
protected static Nullable`1<DateTime> ConvertFromWeek(string value);
    private static bool IsLegalPosition(string value, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Html.LinkRelNames : object {
    public static string StyleSheet;
    public static string Import;
    public static string Author;
    public static string Prefetch;
    public static string Icon;
    public static string Prev;
    public static string Next;
    public static string License;
    public static string Alternate;
    public static string Search;
    public static string Pingback;
    public static string Sidebar;
    private static LinkRelNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Html.LinkRels.BaseLinkRelation : object {
    private IHtmlLinkElement _link;
    private IRequestProcessor _processor;
    public IRequestProcessor Processor { get; }
    public IHtmlLinkElement Link { get; }
    [NullableAttribute("2")]
public Url Url { get; }
    public BaseLinkRelation(IHtmlLinkElement link, IRequestProcessor processor);
    public IRequestProcessor get_Processor();
    public IHtmlLinkElement get_Link();
    [NullableContextAttribute("2")]
public Url get_Url();
    public abstract virtual Task LoadAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.LinkRels.ImportLinkRelation : BaseLinkRelation {
    private ConditionalWeakTable`2<IDocument, HashSet`1<Uri>> ImportLists;
    private bool _async;
    [NullableAttribute("2")]
public IDocument Import { get; }
    public bool IsAsync { get; }
    public ImportLinkRelation(IHtmlLinkElement link);
    [NullableContextAttribute("2")]
public IDocument get_Import();
    public bool get_IsAsync();
    public virtual Task LoadAsync();
    private bool CheckCycle(IDocument document, Url location);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.LinkRels.StyleSheetLinkRelation : BaseLinkRelation {
    [NullableAttribute("2")]
public IStyleSheet Sheet { get; }
    public StyleSheetLinkRelation(IHtmlLinkElement link);
    [NullableContextAttribute("2")]
public IStyleSheet get_Sheet();
    [AsyncStateMachineAttribute("AngleSharp.Html.LinkRels.StyleSheetLinkRelation/<LoadAsync>d__3")]
public virtual Task LoadAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.MinifyMarkupFormatter : HtmlMarkupFormatter {
    private IEnumerable`1<string> _preservedTags;
    [CompilerGeneratedAttribute]
private bool <ShouldKeepStandardElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldKeepComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldKeepAttributeQuotes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldKeepEmptyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldKeepImpliedEndTag>k__BackingField;
    public IEnumerable`1<string> PreservedTags { get; public set; }
    public bool ShouldKeepStandardElements { get; public set; }
    public bool ShouldKeepComments { get; public set; }
    public bool ShouldKeepAttributeQuotes { get; public set; }
    public bool ShouldKeepEmptyAttributes { get; public set; }
    public bool ShouldKeepImpliedEndTag { get; public set; }
    public IEnumerable`1<string> get_PreservedTags();
    public void set_PreservedTags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepStandardElements();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepStandardElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepComments();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepAttributeQuotes();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepAttributeQuotes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepEmptyAttributes();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepEmptyAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldKeepImpliedEndTag();
    [CompilerGeneratedAttribute]
public void set_ShouldKeepImpliedEndTag(bool value);
    public virtual string Comment(IComment comment);
    public virtual string Text(ICharacterData text);
    public virtual string OpenTag(IElement element, bool selfClosing);
    public virtual string CloseTag(IElement element, bool selfClosing);
    protected virtual string Attribute(IAttr attr);
    private bool CanBeRemoved(IElement element);
    private bool CanBeSkipped(IElement element);
    private static bool ShouldOutput(ICharacterData text);
    private static bool ShouldKeep(IElement element, IAttr attribute);
    private static bool IsStandardScript(IElement element, IAttr attr);
    private static bool IsStandardStyle(IElement element, IAttr attr);
    private static bool MustBeQuotedAttributeValue(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.OrdinalStringOrMemoryComparer : object {
    [CompilerGeneratedAttribute]
private static OrdinalStringOrMemoryComparer <Instance>k__BackingField;
    public static OrdinalStringOrMemoryComparer Instance { get; }
    private static OrdinalStringOrMemoryComparer();
    [CompilerGeneratedAttribute]
public static OrdinalStringOrMemoryComparer get_Instance();
    public sealed virtual int GetHashCode(StringOrMemory obj);
    public sealed virtual bool Equals(StringOrMemory x, StringOrMemory y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AngleSharp.Html.Parser.HtmlAttributesLookup : object {
    private static Dictionary`2<StringOrMemory, string> WellKnownAttributeNames;
    private static int MaxLength;
    private static HtmlAttributesLookup();
    public static string TryGetWellKnownAttributeName(ICharBuffer builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class AngleSharp.Html.Parser.HtmlDomBuilder : HtmlDomBuilder`2<Document, Element> {
    public HtmlDomBuilder(IHtmlElementConstructionFactory elementFactory, HtmlDocument document, Nullable`1<HtmlTokenizerOptions> maybeOptions, string stopAt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Html.Parser.HtmlDomBuilder`2 : object {
    private TokenConsumer _consumeAsDelegate;
    private HtmlTokenizer _tokenizer;
    private TDocument _document;
    private List`1<IConstructableElement> _openElements;
    private List`1<IConstructableElement> _formattingElements;
    private Stack`1<HtmlTreeMode> _templateModes;
    [NullableAttribute("2")]
private IConstructableElement _currentFormElement;
    private HtmlTreeMode _currentMode;
    private HtmlTreeMode _previousMode;
    private HtmlParserOptions _options;
    [NullableAttribute("2")]
private IConstructableElement _fragmentContext;
    private bool _foster;
    private bool _frameset;
    private bool _ended;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IConstructableElement, bool> _shouldEnd;
    private IDomConstructionElementFactory`2<TDocument, TElement> _elementFactory;
    [NullableAttribute("2")]
private Task _waiting;
    private bool _emitWhitespaceTextNodes;
    public bool IsFragmentCase { get; }
    [NullableAttribute("2")]
public IConstructableElement AdjustedCurrentNode { get; }
    public IConstructableElement CurrentNode { get; }
    public HtmlDomBuilder`2(IDomConstructionElementFactory`2<TDocument, TElement> elementFactory, TDocument document, Nullable`1<HtmlTokenizerOptions> maybeOptions, bool emitWhitespaceTextNodes, Func`2<IConstructableElement, bool> shouldEnd);
    public void add_Error(EventHandler`1<HtmlErrorEvent> value);
    public void remove_Error(EventHandler`1<HtmlErrorEvent> value);
    public bool get_IsFragmentCase();
    [NullableContextAttribute("2")]
public IConstructableElement get_AdjustedCurrentNode();
    public IConstructableElement get_CurrentNode();
    public TDocument Parse(HtmlParserOptions options, TokenizerMiddleware middleware);
    [AsyncStateMachineAttribute("AngleSharp.Html.Parser.HtmlDomBuilder`2/<ParseAsync>d__29")]
public Task`1<TDocument> ParseAsync(HtmlParserOptions options, TokenizerMiddleware middleware, CancellationToken cancelToken);
    private void Restart();
    private void Reset();
    public TDocument ParseFragment(HtmlParserOptions options, TElement context);
    private void Consume(StructHtmlToken& token);
    private void SetOptions(HtmlParserOptions options);
    private void Home(StructHtmlToken& token);
    private void Initial(StructHtmlToken& token);
    private void BeforeHtml(StructHtmlToken& token);
    private void BeforeHead(StructHtmlToken& token);
    private void InHead(StructHtmlToken& token);
    private void InHeadNoScript(StructHtmlToken& token);
    private void AfterHead(StructHtmlToken& token);
    private void InBodyStartTag(StructHtmlToken& tag);
    private void InBodyEndTag(StructHtmlToken& tag);
    private void InBody(StructHtmlToken& token);
    private void Text(StructHtmlToken& token);
    private void InTable(StructHtmlToken& token);
    private void InTableText(StructHtmlToken& token);
    private void InCaption(StructHtmlToken& token);
    private void InColumnGroup(StructHtmlToken& token);
    private void InTableBody(StructHtmlToken& token);
    private void InRow(StructHtmlToken& token);
    private void InCell(StructHtmlToken& token);
    private void InSelect(StructHtmlToken& token);
    private void InSelectInTable(StructHtmlToken& token);
    private void InTemplate(StructHtmlToken& token);
    private void AfterBody(StructHtmlToken& token);
    private void InFrameset(StructHtmlToken& token);
    private void AfterFrameset(StructHtmlToken& token);
    private void AfterAfterBody(StructHtmlToken& token);
    private void AfterAfterFrameset(StructHtmlToken& token);
    private void TemplateStep(StructHtmlToken& token, HtmlTreeMode mode);
    private void CloseTemplate();
    private void CloseTemplateMode();
    private void InTableBodyCloseTable(StructHtmlToken& tag);
    private void InSelectEndTagOption(StructHtmlToken& token);
    private void InSelectEndTagOptgroup(StructHtmlToken& token);
    private bool InColumnGroupEndTagColgroup(StructHtmlToken& token);
    private void AfterHeadStartTagBody(StructHtmlToken& token);
    private void RawtextAlgorithm(StructHtmlToken& tag);
    private void SwitchToRawtext();
    private void RCDataAlgorithm(StructHtmlToken& tag);
    private void InBodyStartTagListItem(StructHtmlToken& tag);
    private void InBodyStartTagDefinitionItem(StructHtmlToken& tag);
    private bool InBodyEndTagBlock(StructHtmlToken& tag);
    private void HeisenbergAlgorithm(StructHtmlToken& tag);
    private IConstructableElement CopyElement(IConstructableElement element);
    private void InBodyWithFoster(StructHtmlToken& token);
    private void InBodyEndTagAnythingElse(StructHtmlToken& tag);
    private bool InBodyEndTagBody(StructHtmlToken& token);
    private void InBodyStartTagBreakrow(StructHtmlToken& tag);
    private bool InBodyEndTagParagraph(StructHtmlToken& token);
    private bool InTableEndTagTable(StructHtmlToken& token);
    private bool InRowEndTagTablerow(StructHtmlToken& token);
    private void InSelectEndTagSelect();
    private bool InCaptionEndTagCaption(StructHtmlToken& token);
    private void InCellEndTagCell(StructHtmlToken& token);
    private void Foreign(StructHtmlToken& token);
    private void ForeignSpecialTag(StructHtmlToken& tag);
    [NullableContextAttribute("2")]
private IConstructableElement CreateForeignElementFrom(StructHtmlToken& tag);
    private void ForeignNormalTag(StructHtmlToken& tag);
    private bool IsInScope(StringOrMemory tagName);
    private bool IsInScope(HashSet`1<StringOrMemory> tags);
    private bool IsInListItemScope();
    private bool IsInButtonScope();
    private bool IsInTableScope(HashSet`1<StringOrMemory> tags);
    private bool IsInTableScope(StringOrMemory tagName);
    private bool IsInSelectScope(StringOrMemory tagName);
    private bool IsCustomElementEverywhere(StringOrMemory tagName);
    private void HandleScript(IConstructableScriptElement script);
    [AsyncStateMachineAttribute("AngleSharp.Html.Parser.HtmlDomBuilder`2/<RunScript>d__100")]
private Task RunScript(IConstructableScriptElement script);
    private void CheckBodyOnClosing(StructHtmlToken& token);
    private bool TagCurrentlyOpen(StringOrMemory tagName);
    private void PreventNewLine();
    private void End();
    private void AddRoot(StructHtmlToken& tag);
    private void CheckEnded(IConstructableElement element);
    private void CloseNodeAt(int index);
    private void CloseNode(IConstructableElement element);
    private void CloseNodesFrom(int index);
    private void CloseCurrentNode();
    private void SetupElement(IConstructableElement element, StructHtmlToken& tag, bool acknowledgeSelfClosing);
    private TElement AddElement(StructHtmlToken& tag, bool acknowledgeSelfClosing);
    private void AddTemplateElement(StructHtmlToken& tag);
    private void AddElement(IConstructableElement element, StructHtmlToken& tag, bool acknowledgeSelfClosing);
    private void AddElement(IConstructableElement element);
    private void AddElementWithFoster(IConstructableElement element);
    private void AddCharacters(StringOrMemory text);
    private void AddCharactersWithFoster(StringOrMemory text);
    private void AuxiliarySetupSteps(IConstructableElement element, StructHtmlToken& tag);
    private void ClearStackBackTo(StringOrMemory tagName);
    private void ClearStackBackTo(HashSet`1<StringOrMemory> tags);
    private void GenerateImpliedEndTagsExceptFor(StringOrMemory tagName);
    private void GenerateImpliedEndTags();
    private void ReconstructFormatting();
    private void RaiseErrorOccurred(HtmlParseError code, StructHtmlToken& token);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <ParseAsync>g__Worker|29_1(TokenizerMiddleware middleware);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class AngleSharp.Html.Parser.HtmlDomBuilderExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<HtmlTreeMode> SelectMode(IConstructableElement element, bool isLast, Stack`1<HtmlTreeMode> templateModes);
    [ExtensionAttribute]
public static int GetCode(HtmlParseError code);
    [ExtensionAttribute]
public static void SetUniqueAttributes(TElement element, StructHtmlToken& token);
    [ExtensionAttribute]
public static void AddFormatting(List`1<Element> formatting, Element element);
    [ExtensionAttribute]
public static void AddFormatting(List`1<TElement> formatting, TElement element);
    [ExtensionAttribute]
public static void ClearFormatting(List`1<Element> formatting);
    [ExtensionAttribute]
public static void ClearFormatting(List`1<TElement> formatting);
    [ExtensionAttribute]
public static void AddScopeMarker(List`1<Element> formatting);
    [ExtensionAttribute]
public static void AddScopeMarker(List`1<TElement> formatting);
    [ExtensionAttribute]
public static void AddComment(Element parent, HtmlToken token);
    [ExtensionAttribute]
public static void AddComment(Element parent, StructHtmlToken& token);
    [ExtensionAttribute]
public static void AddComment(Document parent, HtmlToken token);
    [ExtensionAttribute]
public static void AddComment(Document parent, StructHtmlToken& token);
    [ExtensionAttribute]
public static QuirksMode GetQuirksMode(HtmlDoctypeToken doctype);
    [ExtensionAttribute]
public static QuirksMode GetQuirksMode(StructHtmlToken& doctype);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class AngleSharp.Html.Parser.HtmlForeignExtensions : object {
    private static Dictionary`2<StringOrMemory, string> svgAttributeNames;
    private static Dictionary`2<StringOrMemory, string> svgAdjustedTagNames;
    private static HtmlForeignExtensions();
    [ExtensionAttribute]
public static StringOrMemory SanatizeSvgTagName(StringOrMemory localName);
    [ExtensionAttribute]
public static IConstructableMathElement Setup(IConstructableMathElement element, StructHtmlToken& tag);
    [ExtensionAttribute]
public static IConstructableSvgElement Setup(IConstructableSvgElement element, StructHtmlToken& tag);
    [ExtensionAttribute]
public static void AdjustAttribute(IConstructableElement element, StringOrMemory name, StringOrMemory value);
    [ExtensionAttribute]
public static StringOrMemory AdjustToMathAttribute(StringOrMemory attributeName);
    [ExtensionAttribute]
public static StringOrMemory AdjustToSvgAttribute(StringOrMemory attributeName);
    private static bool IsXmlNamespaceAttribute(StringOrMemory name);
    private static bool IsXmlAttribute(StringOrMemory name);
    private static bool IsXLinkAttribute(StringOrMemory name);
    [ExtensionAttribute]
private static bool EqualsSubset(string a, StringOrMemory b, int index, int length);
}
public enum AngleSharp.Html.Parser.HtmlParseError : Enum {
    public byte value__;
    [DomDescriptionAttribute("Unexpected end of the given file.")]
public static HtmlParseError EOF;
    [DomDescriptionAttribute("NULL character replaced by repl. character.")]
public static HtmlParseError Null;
    [DomDescriptionAttribute("Bogus comment detected.")]
public static HtmlParseError BogusComment;
    [DomDescriptionAttribute("Ambiguous open tag.")]
public static HtmlParseError AmbiguousOpenTag;
    [DomDescriptionAttribute("The tag has been closed unexpectedly.")]
public static HtmlParseError TagClosedWrong;
    [DomDescriptionAttribute("The closing slash has been misplaced.")]
public static HtmlParseError ClosingSlashMisplaced;
    [DomDescriptionAttribute("Undefined markup declaration found.")]
public static HtmlParseError UndefinedMarkupDeclaration;
    [DomDescriptionAttribute("Comment ended with an exclamation mark.")]
public static HtmlParseError CommentEndedWithEM;
    [DomDescriptionAttribute("Comment ended with a dash.")]
public static HtmlParseError CommentEndedWithDash;
    [DomDescriptionAttribute("Comment ended with an unexpected character.")]
public static HtmlParseError CommentEndedUnexpected;
    [DomDescriptionAttribute("The given tag cannot be self-closed.")]
public static HtmlParseError TagCannotBeSelfClosed;
    [DomDescriptionAttribute("End tags can never be self-closed.")]
public static HtmlParseError EndTagCannotBeSelfClosed;
    [DomDescriptionAttribute("End tags cannot carry attributes.")]
public static HtmlParseError EndTagCannotHaveAttributes;
    [DomDescriptionAttribute("No caption tag has been found within the local scope.")]
public static HtmlParseError CaptionNotInScope;
    [DomDescriptionAttribute("No select tag has been found within the local scope.")]
public static HtmlParseError SelectNotInScope;
    [DomDescriptionAttribute("No table row has been found within the local scope.")]
public static HtmlParseError TableRowNotInScope;
    [DomDescriptionAttribute("No table has been found within the local scope.")]
public static HtmlParseError TableNotInScope;
    [DomDescriptionAttribute("No paragraph has been found within the local scope.")]
public static HtmlParseError ParagraphNotInScope;
    [DomDescriptionAttribute("No body has been found within the local scope.")]
public static HtmlParseError BodyNotInScope;
    [DomDescriptionAttribute("No block element has been found within the local scope.")]
public static HtmlParseError BlockNotInScope;
    [DomDescriptionAttribute("No table cell has been found within the local scope.")]
public static HtmlParseError TableCellNotInScope;
    [DomDescriptionAttribute("No table section has been found within the local scope.")]
public static HtmlParseError TableSectionNotInScope;
    [DomDescriptionAttribute("No object element has been found within the local scope.")]
public static HtmlParseError ObjectNotInScope;
    [DomDescriptionAttribute("No heading element has been found within the local scope.")]
public static HtmlParseError HeadingNotInScope;
    [DomDescriptionAttribute("No list item has been found within the local scope.")]
public static HtmlParseError ListItemNotInScope;
    [DomDescriptionAttribute("No form has been found within the local scope.")]
public static HtmlParseError FormNotInScope;
    [DomDescriptionAttribute("No button has been found within the local scope.")]
public static HtmlParseError ButtonInScope;
    [DomDescriptionAttribute("No nobr element has been found within the local scope.")]
public static HtmlParseError NobrInScope;
    [DomDescriptionAttribute("No element has been found within the local scope.")]
public static HtmlParseError ElementNotInScope;
    [DomDescriptionAttribute("Character reference found no numbers.")]
public static HtmlParseError CharacterReferenceWrongNumber;
    [DomDescriptionAttribute("Character reference found no semicolon.")]
public static HtmlParseError CharacterReferenceSemicolonMissing;
    [DomDescriptionAttribute("Character reference within an invalid range.")]
public static HtmlParseError CharacterReferenceInvalidRange;
    [DomDescriptionAttribute("Character reference is an invalid number.")]
public static HtmlParseError CharacterReferenceInvalidNumber;
    [DomDescriptionAttribute("Character reference is an invalid code.")]
public static HtmlParseError CharacterReferenceInvalidCode;
    [DomDescriptionAttribute("Character reference is not terminated by a semicolon.")]
public static HtmlParseError CharacterReferenceNotTerminated;
    [DomDescriptionAttribute("Character reference in attribute contains an invalid character (=).")]
public static HtmlParseError CharacterReferenceAttributeEqualsFound;
    [DomDescriptionAttribute("The specified item has not been found.")]
public static HtmlParseError ItemNotFound;
    [DomDescriptionAttribute("The encoding operation (either encoded or decoding) failed.")]
public static HtmlParseError EncodingError;
    [DomDescriptionAttribute("Doctype unexpected character after the name detected.")]
public static HtmlParseError DoctypeUnexpectedAfterName;
    [DomDescriptionAttribute("Invalid character in the public identifier detected.")]
public static HtmlParseError DoctypePublicInvalid;
    [DomDescriptionAttribute("Invalid character in the doctype detected.")]
public static HtmlParseError DoctypeInvalidCharacter;
    [DomDescriptionAttribute("Invalid character in the system identifier detected.")]
public static HtmlParseError DoctypeSystemInvalid;
    [DomDescriptionAttribute("The doctype tag is misplaced and ignored.")]
public static HtmlParseError DoctypeTagInappropriate;
    [DomDescriptionAttribute("The given doctype tag is invalid.")]
public static HtmlParseError DoctypeInvalid;
    [DomDescriptionAttribute("Doctype encountered unexpected character.")]
public static HtmlParseError DoctypeUnexpected;
    [DomDescriptionAttribute("The doctype tag is missing.")]
public static HtmlParseError DoctypeMissing;
    [DomDescriptionAttribute("The given public identifier for the notation declaration is invalid.")]
public static HtmlParseError NotationPublicInvalid;
    [DomDescriptionAttribute("The given system identifier for the notation declaration is invalid.")]
public static HtmlParseError NotationSystemInvalid;
    [DomDescriptionAttribute("The type declaration is missing a valid definition.")]
public static HtmlParseError TypeDeclarationUndefined;
    [DomDescriptionAttribute("A required quantifier is missing in the provided expression.")]
public static HtmlParseError QuantifierMissing;
    [DomDescriptionAttribute("The double quotation marks have been misplaced.")]
public static HtmlParseError DoubleQuotationMarkUnexpected;
    [DomDescriptionAttribute("The single quotation marks have been misplaced.")]
public static HtmlParseError SingleQuotationMarkUnexpected;
    [DomDescriptionAttribute("The attribute's name contains an invalid character.")]
public static HtmlParseError AttributeNameInvalid;
    [DomDescriptionAttribute("The attribute's value contains an invalid character.")]
public static HtmlParseError AttributeValueInvalid;
    [DomDescriptionAttribute("The beginning of a new attribute has been expected.")]
public static HtmlParseError AttributeNameExpected;
    [DomDescriptionAttribute("The attribute has already been added.")]
public static HtmlParseError AttributeDuplicateOmitted;
    [DomDescriptionAttribute("The given tag must be placed in head tag.")]
public static HtmlParseError TagMustBeInHead;
    [DomDescriptionAttribute("The given tag is not appropriate for the current position.")]
public static HtmlParseError TagInappropriate;
    [DomDescriptionAttribute("The given tag cannot end at the current position.")]
public static HtmlParseError TagCannotEndHere;
    [DomDescriptionAttribute("The given tag cannot start at the current position.")]
public static HtmlParseError TagCannotStartHere;
    [DomDescriptionAttribute("The given form cannot be placed at the current position.")]
public static HtmlParseError FormInappropriate;
    [DomDescriptionAttribute("The given input cannot be placed at the current position.")]
public static HtmlParseError InputUnexpected;
    [DomDescriptionAttribute("The closing tag and the currently open tag do not match.")]
public static HtmlParseError TagClosingMismatch;
    [DomDescriptionAttribute("The given end tag does not match the current node.")]
public static HtmlParseError TagDoesNotMatchCurrentNode;
    [DomDescriptionAttribute("This position does not support a linebreak (LF, FF).")]
public static HtmlParseError LineBreakUnexpected;
    [DomDescriptionAttribute("The head tag can only be placed once inside the html tag.")]
public static HtmlParseError HeadTagMisplaced;
    [DomDescriptionAttribute("The html tag can only be placed once as the root element.")]
public static HtmlParseError HtmlTagMisplaced;
    [DomDescriptionAttribute("The body tag can only be placed once inside the html tag.")]
public static HtmlParseError BodyTagMisplaced;
    [DomDescriptionAttribute("The image tag has been named image instead of img.")]
public static HtmlParseError ImageTagNamedWrong;
    [DomDescriptionAttribute("Tables cannot be nested.")]
public static HtmlParseError TableNesting;
    [DomDescriptionAttribute("An illegal element has been detected in a table.")]
public static HtmlParseError IllegalElementInTableDetected;
    [DomDescriptionAttribute("Select elements cannot be nested.")]
public static HtmlParseError SelectNesting;
    [DomDescriptionAttribute("An illegal element has been detected in a select.")]
public static HtmlParseError IllegalElementInSelectDetected;
    [DomDescriptionAttribute("The frameset element has been misplaced.")]
public static HtmlParseError FramesetMisplaced;
    [DomDescriptionAttribute("Headings cannot be nested.")]
public static HtmlParseError HeadingNested;
    [DomDescriptionAttribute("Anchor elements cannot be nested.")]
public static HtmlParseError AnchorNested;
    [DomDescriptionAttribute("The given token cannot be inserted here.")]
public static HtmlParseError TokenNotPossible;
    [DomDescriptionAttribute("The current node is not the root element.")]
public static HtmlParseError CurrentNodeIsNotRoot;
    [DomDescriptionAttribute("The current node is the root element.")]
public static HtmlParseError CurrentNodeIsRoot;
    [DomDescriptionAttribute("This tag is invalid in fragment mode.")]
public static HtmlParseError TagInvalidInFragmentMode;
    [DomDescriptionAttribute("There is already an open form.")]
public static HtmlParseError FormAlreadyOpen;
    [DomDescriptionAttribute("The form has been closed wrong.")]
public static HtmlParseError FormClosedWrong;
    [DomDescriptionAttribute("The body has been closed wrong.")]
public static HtmlParseError BodyClosedWrong;
    [DomDescriptionAttribute("An expected formatting element has not been found.")]
public static HtmlParseError FormattingElementNotFound;
}
public class AngleSharp.Html.Parser.HtmlParseException : Exception {
    [CompilerGeneratedAttribute]
private TextPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    public TextPosition Position { get; }
    public int Code { get; }
    [NullableContextAttribute("1")]
public HtmlParseException(int code, string message, TextPosition position);
    [CompilerGeneratedAttribute]
public TextPosition get_Position();
    [CompilerGeneratedAttribute]
public int get_Code();
}
public enum AngleSharp.Html.Parser.HtmlParseMode : Enum {
    public byte value__;
    public static HtmlParseMode PCData;
    public static HtmlParseMode RCData;
    public static HtmlParseMode Plaintext;
    public static HtmlParseMode Rawtext;
    public static HtmlParseMode Script;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.HtmlParser : EventTarget {
    private HtmlParserOptions _options;
    private IBrowsingContext _context;
    public HtmlParserOptions Options { get; }
    public HtmlParser(HtmlParserOptions options);
    [NullableContextAttribute("2")]
internal HtmlParser(IBrowsingContext context);
    [NullableContextAttribute("2")]
public HtmlParser(HtmlParserOptions options, IBrowsingContext context);
    public sealed virtual void add_Parsing(DomEventHandler value);
    public sealed virtual void remove_Parsing(DomEventHandler value);
    public sealed virtual void add_Parsed(DomEventHandler value);
    public sealed virtual void remove_Parsed(DomEventHandler value);
    public sealed virtual void add_Error(DomEventHandler value);
    public sealed virtual void remove_Error(DomEventHandler value);
    public HtmlParserOptions get_Options();
    public sealed virtual IHtmlDocument ParseDocument(string source);
    public sealed virtual IHtmlHeadElement ParseHead(string source);
    public sealed virtual INodeList ParseFragment(Stream source, IElement contextElement);
    public sealed virtual INodeList ParseFragment(string source, IElement contextElement);
    public sealed virtual IHtmlDocument ParseDocument(Stream source);
    public sealed virtual IHtmlDocument ParseDocument(Char[] source, int length);
    [NullableContextAttribute("0")]
public sealed virtual IHtmlDocument ParseDocument(ReadOnlyMemory`1<char> chars);
    public sealed virtual IHtmlDocument ParseDocument(TextSource source);
    public sealed virtual TDocument ParseDocument(TextSource source, TokenizerMiddleware middleware);
    public sealed virtual IHtmlHeadElement ParseHead(Stream source);
    public sealed virtual Task`1<IHtmlDocument> ParseDocumentAsync(string source, CancellationToken cancel);
    public sealed virtual Task`1<IHtmlDocument> ParseDocumentAsync(Stream source, CancellationToken cancel);
    [AsyncStateMachineAttribute("AngleSharp.Html.Parser.HtmlParser/<ParseHeadAsync>d__29")]
public sealed virtual Task`1<IHtmlHeadElement> ParseHeadAsync(string source, CancellationToken cancel);
    [AsyncStateMachineAttribute("AngleSharp.Html.Parser.HtmlParser/<ParseHeadAsync>d__30")]
public sealed virtual Task`1<IHtmlHeadElement> ParseHeadAsync(Stream source, CancellationToken cancel);
    [AsyncStateMachineAttribute("AngleSharp.Html.Parser.HtmlParser/<AngleSharp-Html-Parser-IHtmlParser-ParseDocumentAsync>d__31")]
private sealed virtual override Task`1<IDocument> AngleSharp.Html.Parser.IHtmlParser.ParseDocumentAsync(IDocument document, CancellationToken cancel);
    private HtmlDocument CreateDocument(string source);
    private HtmlDocument CreateDocument(Stream source);
    [NullableContextAttribute("0")]
private HtmlDocument CreateDocument(ReadOnlyMemory`1<char> chars);
    private HtmlDocument CreateDocument(Char[] source, int length);
    private HtmlDocument CreateDocument(TextSource textSource);
    private HtmlDomBuilder CreateBuilder(HtmlDocument document, string stopAt);
    private IHtmlDocument Parse(HtmlDocument document, string stopAt);
    [AsyncStateMachineAttribute("AngleSharp.Html.Parser.HtmlParser/<ParseAsync>d__39")]
private Task`1<IHtmlDocument> ParseAsync(HtmlDocument document, CancellationToken cancel, string stopAt);
    private void InvokeHtmlParseEvent(HtmlDocument document, bool completed);
    private INodeList ParseFragment(HtmlDocument document, IElement contextElement);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <ParseDocument>b__25_0(object _, HtmlErrorEvent ev);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateBuilder>b__37_0(object _, HtmlErrorEvent ev);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Html.Parser.HtmlParserExtensions : object {
    [ExtensionAttribute]
public static Task`1<IHtmlDocument> ParseDocumentAsync(IHtmlParser parser, string source);
    [ExtensionAttribute]
public static Task`1<IHtmlDocument> ParseDocumentAsync(IHtmlParser parser, Stream source);
    [ExtensionAttribute]
public static Task`1<IHtmlHeadElement> ParseHeadAsync(IHtmlParser parser, string source);
    [ExtensionAttribute]
public static Task`1<IHtmlHeadElement> ParseHeadAsync(IHtmlParser parser, Stream source);
    [ExtensionAttribute]
public static Task`1<IDocument> ParseDocumentAsync(IHtmlParser parser, IDocument document);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.HtmlParserOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsEmbedded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAcceptingCustomElementsEverywhere>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreservingAttributeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotSupportingFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScripting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrictMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSupportingProcessingInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKeepingSourceReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotConsumingCharacterReferences>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IElement, TextPosition> <OnCreated>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<HtmlToken, TextRange> <OnToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableElementPositionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipPlaintext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipRCDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipCDATA>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipProcessingInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private ShouldEmitAttribute <ShouldEmitAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipScriptText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipRawText>k__BackingField;
    public bool IsEmbedded { get; public set; }
    public bool IsAcceptingCustomElementsEverywhere { get; public set; }
    public bool IsPreservingAttributeNames { get; public set; }
    public bool IsNotSupportingFrames { get; public set; }
    public bool IsScripting { get; public set; }
    public bool IsStrictMode { get; public set; }
    public bool IsSupportingProcessingInstructions { get; public set; }
    public bool IsKeepingSourceReferences { get; public set; }
    public bool IsNotConsumingCharacterReferences { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<IElement, TextPosition> OnCreated { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<HtmlToken, TextRange> OnToken { get; public set; }
    public bool DisableElementPositionTracking { get; public set; }
    public bool SkipComments { get; public set; }
    public bool SkipPlaintext { get; public set; }
    public bool SkipRCDataText { get; public set; }
    public bool SkipCDATA { get; public set; }
    public bool SkipProcessingInstructions { get; public set; }
    public ShouldEmitAttribute ShouldEmitAttribute { get; public set; }
    public bool SkipDataText { get; public set; }
    public bool SkipScriptText { get; public set; }
    public bool SkipRawText { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsEmbedded();
    [CompilerGeneratedAttribute]
public void set_IsEmbedded(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsAcceptingCustomElementsEverywhere();
    [CompilerGeneratedAttribute]
public void set_IsAcceptingCustomElementsEverywhere(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsPreservingAttributeNames();
    [CompilerGeneratedAttribute]
public void set_IsPreservingAttributeNames(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsNotSupportingFrames();
    [CompilerGeneratedAttribute]
public void set_IsNotSupportingFrames(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsScripting();
    [CompilerGeneratedAttribute]
public void set_IsScripting(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsStrictMode();
    [CompilerGeneratedAttribute]
public void set_IsStrictMode(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsSupportingProcessingInstructions();
    [CompilerGeneratedAttribute]
public void set_IsSupportingProcessingInstructions(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsKeepingSourceReferences();
    [CompilerGeneratedAttribute]
public void set_IsKeepingSourceReferences(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsNotConsumingCharacterReferences();
    [CompilerGeneratedAttribute]
public void set_IsNotConsumingCharacterReferences(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Action`2<IElement, TextPosition> get_OnCreated();
    [CompilerGeneratedAttribute]
public void set_OnCreated(Action`2<IElement, TextPosition> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Action`2<HtmlToken, TextRange> get_OnToken();
    [CompilerGeneratedAttribute]
public void set_OnToken(Action`2<HtmlToken, TextRange> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_DisableElementPositionTracking();
    [CompilerGeneratedAttribute]
public void set_DisableElementPositionTracking(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipComments();
    [CompilerGeneratedAttribute]
public void set_SkipComments(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipPlaintext();
    [CompilerGeneratedAttribute]
public void set_SkipPlaintext(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipRCDataText();
    [CompilerGeneratedAttribute]
public void set_SkipRCDataText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipCDATA();
    [CompilerGeneratedAttribute]
public void set_SkipCDATA(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipProcessingInstructions();
    [CompilerGeneratedAttribute]
public void set_SkipProcessingInstructions(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ShouldEmitAttribute get_ShouldEmitAttribute();
    [CompilerGeneratedAttribute]
public void set_ShouldEmitAttribute(ShouldEmitAttribute value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipDataText();
    [CompilerGeneratedAttribute]
public void set_SkipDataText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipScriptText();
    [CompilerGeneratedAttribute]
public void set_SkipScriptText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipRawText();
    [CompilerGeneratedAttribute]
public void set_SkipRawText(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AngleSharp.Html.Parser.HtmlTagNameLookup : object {
    public static string TryGetWellKnownTagName(ICharBuffer builder);
    private static bool CharsAreEqual(ICharBuffer builder, string tagName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.HtmlTokenizer : BaseTokenizer {
    private EntityProvider _resolver;
    private StringOrMemory _lastStartTag;
    private TextPosition _position;
    private StructHtmlToken _token;
    private ShouldEmitAttribute _shouldEmitAttribute;
    [NullableAttribute("2")]
private Char[] _characterReferenceBuffer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<HtmlErrorEvent> Error;
    [CompilerGeneratedAttribute]
private bool <SkipDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipScriptText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipRawText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipPlaintext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipRCDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipCDATA>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipProcessingInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAcceptingCharacterData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreservingAttributeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotConsumingCharacterReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlParseMode <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrictMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSupportingProcessingInstructions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<HtmlToken, TextRange> <OnToken>k__BackingField;
    public bool SkipDataText { get; public set; }
    public bool SkipScriptText { get; public set; }
    public bool SkipRawText { get; public set; }
    public bool SkipComments { get; public set; }
    public bool SkipPlaintext { get; public set; }
    public bool SkipRCDataText { get; public set; }
    public bool SkipCDATA { get; public set; }
    public bool SkipProcessingInstructions { get; public set; }
    public ShouldEmitAttribute ShouldEmitAttribute { get; public set; }
    public bool IsAcceptingCharacterData { get; public set; }
    public bool IsPreservingAttributeNames { get; public set; }
    public bool IsNotConsumingCharacterReferences { get; public set; }
    public HtmlParseMode State { get; public set; }
    public bool IsStrictMode { get; public set; }
    public bool IsSupportingProcessingInstructions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<HtmlToken, TextRange> OnToken { get; public set; }
    public HtmlTokenizer(TextSource source, IEntityProvider resolver);
    public HtmlTokenizer(TextSource source, IEntityProviderExtended resolver);
    [CompilerGeneratedAttribute]
public void add_Error(EventHandler`1<HtmlErrorEvent> value);
    [CompilerGeneratedAttribute]
public void remove_Error(EventHandler`1<HtmlErrorEvent> value);
    [CompilerGeneratedAttribute]
public bool get_SkipDataText();
    [CompilerGeneratedAttribute]
public void set_SkipDataText(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipScriptText();
    [CompilerGeneratedAttribute]
public void set_SkipScriptText(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipRawText();
    [CompilerGeneratedAttribute]
public void set_SkipRawText(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipComments();
    [CompilerGeneratedAttribute]
public void set_SkipComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipPlaintext();
    [CompilerGeneratedAttribute]
public void set_SkipPlaintext(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipRCDataText();
    [CompilerGeneratedAttribute]
public void set_SkipRCDataText(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipCDATA();
    [CompilerGeneratedAttribute]
public void set_SkipCDATA(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipProcessingInstructions();
    [CompilerGeneratedAttribute]
public void set_SkipProcessingInstructions(bool value);
    public ShouldEmitAttribute get_ShouldEmitAttribute();
    public void set_ShouldEmitAttribute(ShouldEmitAttribute value);
    [CompilerGeneratedAttribute]
public bool get_IsAcceptingCharacterData();
    [CompilerGeneratedAttribute]
public void set_IsAcceptingCharacterData(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPreservingAttributeNames();
    [CompilerGeneratedAttribute]
public void set_IsPreservingAttributeNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNotConsumingCharacterReferences();
    [CompilerGeneratedAttribute]
public void set_IsNotConsumingCharacterReferences(bool value);
    [CompilerGeneratedAttribute]
public HtmlParseMode get_State();
    [CompilerGeneratedAttribute]
public void set_State(HtmlParseMode value);
    [CompilerGeneratedAttribute]
public bool get_IsStrictMode();
    [CompilerGeneratedAttribute]
public void set_IsStrictMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSupportingProcessingInstructions();
    [CompilerGeneratedAttribute]
public void set_IsSupportingProcessingInstructions(bool value);
    [CompilerGeneratedAttribute]
public Action`2<HtmlToken, TextRange> get_OnToken();
    [CompilerGeneratedAttribute]
public void set_OnToken(Action`2<HtmlToken, TextRange> value);
    public HtmlToken Get();
    public StructHtmlToken& GetStructToken();
    internal void RaiseErrorOccurred(HtmlParseError code, TextPosition position);
    private StructHtmlToken& Data(char c);
    private StructHtmlToken& DataText(char c);
    private StructHtmlToken& Plaintext(char c);
    private StructHtmlToken& RCData(char c);
    private StructHtmlToken& RCDataText(char c);
    private StructHtmlToken& RCDataLt(char c);
    private StructHtmlToken& RCDataNameEndTag(char c);
    private StructHtmlToken& Rawtext(char c);
    private StructHtmlToken& RawtextText(char c);
    private StructHtmlToken& RawtextLT(char c);
    private StructHtmlToken& RawtextNameEndTag(char c);
    private StructHtmlToken& CharacterData(char c);
    private void AppendCharacterReference(char c, char allowedCharacter, bool isAttribute);
    [NullableContextAttribute("2")]
private string GetNumericCharacterReference(char c, bool isAttribute);
    [NullableContextAttribute("2")]
private string GetLookupCharacterReference(char allowedCharacter, bool isAttribute);
    private StructHtmlToken& TagOpen(char c);
    private StructHtmlToken& TagEnd(char c);
    private StructHtmlToken& TagName(StructHtmlToken& tag);
    private StructHtmlToken& TagSelfClosing(StructHtmlToken& tag);
    private bool TagSelfClosingInner(StructHtmlToken& tag);
    private StructHtmlToken& MarkupDeclaration(char c);
    private StructHtmlToken& ProcessingInstruction(char c);
    private StructHtmlToken& BogusComment(char c);
    private StructHtmlToken& CommentStart(char c);
    private bool CommentDashStart(char c, StructHtmlToken& token);
    private StructHtmlToken& Comment(char c);
    private bool CommentDashEnd(char c, StructHtmlToken& token);
    private bool CommentEnd(char c, StructHtmlToken& token);
    private bool CommentBangEnd(char c, StructHtmlToken& token);
    private StructHtmlToken& Doctype(char c);
    private StructHtmlToken& DoctypeNameBefore(char c);
    private StructHtmlToken& DoctypeName(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeNameAfter(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypePublic(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypePublicIdentifierBefore(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypePublicIdentifierDoubleQuoted(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypePublicIdentifierSingleQuoted(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypePublicIdentifierAfter(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeBetween(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeSystem(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeSystemIdentifierBefore(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeSystemIdentifierDoubleQuoted(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeSystemIdentifierSingleQuoted(StructHtmlToken& doctype);
    private StructHtmlToken& DoctypeSystemIdentifierAfter(StructHtmlToken& doctype);
    private StructHtmlToken& BogusDoctype(StructHtmlToken& doctype);
    private StructHtmlToken& ParseAttributes(StructHtmlToken& tag);
    private StructHtmlToken& ScriptData(char c);
    private StructHtmlToken& GetNextStructToken();
    private StructHtmlToken& NewSkippedContent(HtmlTokenType htmlTokenType);
    private StructHtmlToken& NewCharacter();
    private StructHtmlToken& NewProcessingInstruction();
    private StructHtmlToken& NewComment();
    private StructHtmlToken& NewEof(bool acceptable);
    private StructHtmlToken& NewDoctype(bool quirksForced);
    private StructHtmlToken& NewTagOpen();
    private StructHtmlToken& NewTagClose();
    private void RaiseErrorOccurred(HtmlParseError code);
    private void AppendReplacement();
    private bool CreateIfAppropriate(char c, StructHtmlToken& token);
    private StructHtmlToken& EmitTag(StructHtmlToken& tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.HtmlTokenizerOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <DisableElementPositionTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipPlaintext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipRCDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipCDATA>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipProcessingInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private ShouldEmitAttribute <ShouldEmitAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipScriptText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipRawText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreservingAttributeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotConsumingCharacterReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSupportingProcessingInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrictMode>k__BackingField;
    public bool DisableElementPositionTracking { get; public set; }
    public bool SkipComments { get; public set; }
    public bool SkipPlaintext { get; public set; }
    public bool SkipRCDataText { get; public set; }
    public bool SkipCDATA { get; public set; }
    public bool SkipProcessingInstructions { get; public set; }
    public ShouldEmitAttribute ShouldEmitAttribute { get; public set; }
    public bool SkipDataText { get; public set; }
    public bool SkipScriptText { get; public set; }
    public bool SkipRawText { get; public set; }
    public bool IsPreservingAttributeNames { get; public set; }
    public bool IsNotConsumingCharacterReferences { get; public set; }
    public bool IsSupportingProcessingInstructions { get; public set; }
    public bool IsStrictMode { get; public set; }
    public HtmlTokenizerOptions(HtmlParserOptions htmlParserOptions);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_DisableElementPositionTracking();
    [CompilerGeneratedAttribute]
public void set_DisableElementPositionTracking(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipComments();
    [CompilerGeneratedAttribute]
public void set_SkipComments(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipPlaintext();
    [CompilerGeneratedAttribute]
public void set_SkipPlaintext(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipRCDataText();
    [CompilerGeneratedAttribute]
public void set_SkipRCDataText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipCDATA();
    [CompilerGeneratedAttribute]
public void set_SkipCDATA(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipProcessingInstructions();
    [CompilerGeneratedAttribute]
public void set_SkipProcessingInstructions(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ShouldEmitAttribute get_ShouldEmitAttribute();
    [CompilerGeneratedAttribute]
public void set_ShouldEmitAttribute(ShouldEmitAttribute value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipDataText();
    [CompilerGeneratedAttribute]
public void set_SkipDataText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipScriptText();
    [CompilerGeneratedAttribute]
public void set_SkipScriptText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipRawText();
    [CompilerGeneratedAttribute]
public void set_SkipRawText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsPreservingAttributeNames();
    [CompilerGeneratedAttribute]
public void set_IsPreservingAttributeNames(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsNotConsumingCharacterReferences();
    [CompilerGeneratedAttribute]
public void set_IsNotConsumingCharacterReferences(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsSupportingProcessingInstructions();
    [CompilerGeneratedAttribute]
public void set_IsSupportingProcessingInstructions(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsStrictMode();
    [CompilerGeneratedAttribute]
public void set_IsStrictMode(bool value);
}
public enum AngleSharp.Html.Parser.HtmlTokenType : Enum {
    public byte value__;
    public static HtmlTokenType Doctype;
    public static HtmlTokenType StartTag;
    public static HtmlTokenType EndTag;
    public static HtmlTokenType Comment;
    public static HtmlTokenType Character;
    public static HtmlTokenType EndOfFile;
}
internal enum AngleSharp.Html.Parser.HtmlTreeMode : Enum {
    public byte value__;
    public static HtmlTreeMode Initial;
    public static HtmlTreeMode BeforeHtml;
    public static HtmlTreeMode BeforeHead;
    public static HtmlTreeMode InHead;
    public static HtmlTreeMode InHeadNoScript;
    public static HtmlTreeMode AfterHead;
    public static HtmlTreeMode InBody;
    public static HtmlTreeMode Text;
    public static HtmlTreeMode InTable;
    public static HtmlTreeMode InCaption;
    public static HtmlTreeMode InColumnGroup;
    public static HtmlTreeMode InTableBody;
    public static HtmlTreeMode InRow;
    public static HtmlTreeMode InCell;
    public static HtmlTreeMode InSelect;
    public static HtmlTreeMode InSelectInTable;
    public static HtmlTreeMode InTemplate;
    public static HtmlTreeMode AfterBody;
    public static HtmlTreeMode InFrameset;
    public static HtmlTreeMode AfterFrameset;
    public static HtmlTreeMode AfterAfterBody;
    public static HtmlTreeMode AfterAfterFrameset;
}
[NullableContextAttribute("1")]
public interface AngleSharp.Html.Parser.IHtmlParser {
    public abstract virtual IHtmlDocument ParseDocument(string source);
    public abstract virtual IHtmlDocument ParseDocument(Stream source);
    public abstract virtual INodeList ParseFragment(string source, IElement contextElement);
    public abstract virtual INodeList ParseFragment(Stream source, IElement contextElement);
    public abstract virtual IHtmlHeadElement ParseHead(string source);
    public abstract virtual IHtmlHeadElement ParseHead(Stream source);
    public abstract virtual Task`1<IHtmlDocument> ParseDocumentAsync(string source, CancellationToken cancel);
    public abstract virtual Task`1<IHtmlDocument> ParseDocumentAsync(Stream source, CancellationToken cancel);
    public abstract virtual Task`1<IHtmlHeadElement> ParseHeadAsync(string source, CancellationToken cancel);
    public abstract virtual Task`1<IHtmlHeadElement> ParseHeadAsync(Stream source, CancellationToken cancel);
    public abstract virtual Task`1<IDocument> ParseDocumentAsync(IDocument document, CancellationToken cancel);
    public abstract virtual IHtmlDocument ParseDocument(Char[] source, int length);
    public abstract virtual IHtmlDocument ParseDocument(TextSource source);
    [NullableContextAttribute("0")]
public abstract virtual IHtmlDocument ParseDocument(ReadOnlyMemory`1<char> chars);
    public abstract virtual TDocument ParseDocument(TextSource source, TokenizerMiddleware middleware);
}
public class AngleSharp.Html.Parser.ShouldEmitAttribute : MulticastDelegate {
    public ShouldEmitAttribute(object object, IntPtr method);
    public virtual bool Invoke(StructHtmlToken& token, ReadOnlyMemory`1<char> attributeName);
    public virtual IAsyncResult BeginInvoke(StructHtmlToken& token, ReadOnlyMemory`1<char> attributeName, AsyncCallback callback, object object);
    public virtual bool EndInvoke(StructHtmlToken& token, IAsyncResult result);
}
public class AngleSharp.Html.Parser.TokenConsumer : MulticastDelegate {
    public TokenConsumer(object object, IntPtr method);
    public virtual void Invoke(StructHtmlToken& token);
    public virtual IAsyncResult BeginInvoke(StructHtmlToken& token, AsyncCallback callback, object object);
    public virtual void EndInvoke(StructHtmlToken& token, IAsyncResult result);
}
public enum AngleSharp.Html.Parser.TokenConsumptionResult : Enum {
    public int value__;
    public static TokenConsumptionResult Continue;
    public static TokenConsumptionResult Stop;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Html.Parser.TokenizerExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<HtmlToken> Tokenize(TextSource source, IEntityProvider provider, EventHandler`1<HtmlErrorEvent> errorHandler);
    [IteratorStateMachineAttribute("AngleSharp.Html.Parser.TokenizerExtensions/<Tokenize>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<HtmlToken> Tokenize(TextSource source, Nullable`1<HtmlTokenizerOptions> options, IEntityProvider provider, EventHandler`1<HtmlErrorEvent> errorHandler);
}
public class AngleSharp.Html.Parser.TokenizerMiddleware : MulticastDelegate {
    public TokenizerMiddleware(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TokenConsumptionResult Invoke(StructHtmlToken& token, TokenConsumer next);
    public virtual IAsyncResult BeginInvoke(StructHtmlToken& token, TokenConsumer next, AsyncCallback callback, object object);
    public virtual TokenConsumptionResult EndInvoke(StructHtmlToken& token, IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class AngleSharp.Html.Parser.Tokens.HtmlAttributeToken : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TextPosition <Position>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public TextPosition Position { get; }
    public HtmlAttributeToken(TextPosition position, string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public TextPosition get_Position();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.Tokens.HtmlDoctypeToken : HtmlToken {
    private bool _quirks;
    [NullableAttribute("2")]
private string _publicIdentifier;
    [NullableAttribute("2")]
private string _systemIdentifier;
    public bool IsQuirksForced { get; public set; }
    public bool IsPublicIdentifierMissing { get; }
    public bool IsSystemIdentifierMissing { get; }
    public string PublicIdentifier { get; public set; }
    public string SystemIdentifier { get; public set; }
    public bool IsLimitedQuirks { get; }
    public bool IsFullQuirks { get; }
    public bool IsValid { get; }
    public HtmlDoctypeToken(bool quirksForced, TextPosition position);
    public bool get_IsQuirksForced();
    public void set_IsQuirksForced(bool value);
    public bool get_IsPublicIdentifierMissing();
    public bool get_IsSystemIdentifierMissing();
    public string get_PublicIdentifier();
    public void set_PublicIdentifier(string value);
    public string get_SystemIdentifier();
    public void set_SystemIdentifier(string value);
    public bool get_IsLimitedQuirks();
    public bool get_IsFullQuirks();
    public bool get_IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.Tokens.HtmlTagToken : HtmlToken {
    private List`1<HtmlAttributeToken> _attributes;
    private bool _selfClosing;
    public bool IsSelfClosing { get; public set; }
    public List`1<HtmlAttributeToken> Attributes { get; }
    public HtmlTagToken(HtmlTokenType type, TextPosition position);
    public HtmlTagToken(HtmlTokenType type, TextPosition position, string name);
    public static HtmlTagToken Open(string name);
    public static HtmlTagToken Close(string name);
    public bool get_IsSelfClosing();
    public void set_IsSelfClosing(bool value);
    public List`1<HtmlAttributeToken> get_Attributes();
    public void AddAttribute(string name, TextPosition position);
    public void AddAttribute(string name, string value);
    public void SetAttributeValue(string value);
    public string GetAttribute(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.Tokens.HtmlToken : object {
    private HtmlTokenType _type;
    private TextPosition _position;
    private string _name;
    [CompilerGeneratedAttribute]
private bool <IsProcessingInstruction>k__BackingField;
    public bool HasContent { get; }
    public string Name { get; public set; }
    public bool IsEmpty { get; }
    public string Data { get; }
    public TextPosition Position { get; }
    public bool IsHtmlCompatible { get; }
    public bool IsSvg { get; }
    public bool IsMathCompatible { get; }
    public HtmlTokenType Type { get; }
    public bool IsProcessingInstruction { get; internal set; }
    [NullableContextAttribute("2")]
public HtmlToken(HtmlTokenType type, TextPosition position, string name);
    public bool get_HasContent();
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsEmpty();
    public string get_Data();
    public sealed virtual TextPosition get_Position();
    public bool get_IsHtmlCompatible();
    public bool get_IsSvg();
    public bool get_IsMathCompatible();
    public HtmlTokenType get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsProcessingInstruction();
    [CompilerGeneratedAttribute]
internal void set_IsProcessingInstruction(bool value);
    public string TrimStart();
    public void RemoveNewLine();
    public HtmlTagToken AsTag();
    public bool IsStartTag(string name);
}
[IsReadOnlyAttribute]
public class AngleSharp.Html.Parser.Tokens.Struct.MemoryHtmlAttributeToken : ValueType {
    [CompilerGeneratedAttribute]
private StringOrMemory <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StringOrMemory <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TextPosition <Position>k__BackingField;
    public StringOrMemory Name { get; }
    public StringOrMemory Value { get; }
    public TextPosition Position { get; }
    public MemoryHtmlAttributeToken(TextPosition position, StringOrMemory name, StringOrMemory value);
    [CompilerGeneratedAttribute]
public StringOrMemory get_Name();
    [CompilerGeneratedAttribute]
public StringOrMemory get_Value();
    [CompilerGeneratedAttribute]
public TextPosition get_Position();
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Html.Parser.Tokens.Struct.StructAttributes : ValueType {
    private int _count;
    private MemoryHtmlAttributeToken _t0;
    private MemoryHtmlAttributeToken _t1;
    private MemoryHtmlAttributeToken _t2;
    private MemoryHtmlAttributeToken _t3;
    [NullableAttribute("1")]
private List`1<MemoryHtmlAttributeToken> _tail;
    public int Count { get; }
    public MemoryHtmlAttributeToken Item { get; public set; }
    public void Add(MemoryHtmlAttributeToken item);
    public int get_Count();
    public void RemoveAt(int index);
    public MemoryHtmlAttributeToken get_Item(int id);
    public void set_Item(int id, MemoryHtmlAttributeToken value);
    public bool HasAttribute(StringOrMemory name, StringOrMemory value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.Parser.Tokens.Struct.StructHtmlToken : ValueType {
    private HtmlTokenType _type;
    private TextPosition _position;
    private StringOrMemory _name;
    private StructAttributes _attributes;
    private bool _selfClosing;
    [NullableAttribute("2")]
private StructTokenDoctypeData _structTokenDoctypeData;
    [CompilerGeneratedAttribute]
private bool <IsProcessingInstruction>k__BackingField;
    private static Char[] Spaces;
    public bool IsDoctype { get; }
    public bool IsTag { get; }
    public bool HasContent { get; }
    public StringOrMemory Name { get; public set; }
    public bool IsEmpty { get; }
    public StringOrMemory Data { get; }
    public TextPosition Position { get; }
    public bool IsHtmlCompatible { get; }
    public bool IsSvg { get; }
    public bool IsMathCompatible { get; }
    public HtmlTokenType Type { get; }
    public bool IsProcessingInstruction { get; internal set; }
    public bool IsSelfClosing { get; public set; }
    public StructAttributes Attributes { get; }
    public bool IsQuirksForced { get; public set; }
    public bool IsPublicIdentifierMissing { get; }
    public bool IsSystemIdentifierMissing { get; }
    public StringOrMemory PublicIdentifier { get; public set; }
    public StringOrMemory SystemIdentifier { get; public set; }
    public bool IsLimitedQuirks { get; }
    public bool IsFullQuirks { get; }
    public bool IsValid { get; }
    private StructHtmlToken(HtmlTokenType type, TextPosition position, StringOrMemory name);
    private static StructHtmlToken();
    internal static StructHtmlToken Skipped(HtmlTokenType htmlTokenType, TextPosition position);
    internal static StructHtmlToken Doctype(bool quirksForced, TextPosition position);
    internal static StructHtmlToken TagOpen(TextPosition position);
    internal static StructHtmlToken Open(StringOrMemory name);
    internal static StructHtmlToken TagClose(TextPosition position);
    internal static StructHtmlToken Close(StringOrMemory s);
    internal static StructHtmlToken Character(StringOrMemory name, TextPosition position);
    internal static StructHtmlToken Comment(StringOrMemory name, TextPosition position);
    internal static StructHtmlToken ProcessingInstruction(StringOrMemory name, TextPosition position);
    internal static StructHtmlToken EndOfFile(TextPosition position);
    public bool get_IsDoctype();
    public bool get_IsTag();
    public bool get_HasContent();
    public StringOrMemory get_Name();
    public void set_Name(StringOrMemory value);
    public bool get_IsEmpty();
    public StringOrMemory get_Data();
    public TextPosition get_Position();
    public bool get_IsHtmlCompatible();
    public bool get_IsSvg();
    public bool get_IsMathCompatible();
    public HtmlTokenType get_Type();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsProcessingInstruction();
    [CompilerGeneratedAttribute]
internal void set_IsProcessingInstruction(bool value);
    public bool get_IsSelfClosing();
    public void set_IsSelfClosing(bool value);
    public StructAttributes get_Attributes();
    public bool get_IsQuirksForced();
    public void set_IsQuirksForced(bool value);
    public bool get_IsPublicIdentifierMissing();
    public bool get_IsSystemIdentifierMissing();
    public StringOrMemory get_PublicIdentifier();
    public void set_PublicIdentifier(StringOrMemory value);
    public StringOrMemory get_SystemIdentifier();
    public void set_SystemIdentifier(StringOrMemory value);
    public bool get_IsLimitedQuirks();
    public bool get_IsFullQuirks();
    public bool get_IsValid();
    public StringOrMemory TrimStart();
    public void CleanStart();
    public void RemoveNewLine();
    public bool IsStartTag(string name);
    public void AddAttribute(StringOrMemory name, TextPosition position);
    public void AddAttribute(StringOrMemory name, StringOrMemory value);
    public void SetAttributeValue(StringOrMemory value);
    public StringOrMemory GetAttribute(StringOrMemory name);
    public void RemoveAttributeAt(int i);
    public HtmlToken ToHtmlToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.PrettyMarkupFormatter : HtmlMarkupFormatter {
    private string _indentString;
    private string _newLineString;
    private int _indentCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<INode> _preserveTextFormatting;
    public string Indentation { get; public set; }
    public string NewLine { get; public set; }
    public PrettyMarkupFormatter(IEnumerable`1<INode> preserveTextFormatting);
    public string get_Indentation();
    public void set_Indentation(string value);
    public string get_NewLine();
    public void set_NewLine(string value);
    public virtual string Comment(IComment comment);
    public virtual string Doctype(IDocumentType doctype);
    public virtual string Processing(IProcessingInstruction processing);
    public virtual string Text(ICharacterData text);
    public virtual string OpenTag(IElement element, bool selfClosing);
    public virtual string CloseTag(IElement element, bool selfClosing);
    private static bool EndsWithSpace(ICharacterData text);
    private string IndentBefore(int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Html.SourceSet : object {
    private static string FullWidth;
    private static Regex SizeParser;
    private static SourceSet();
    private static Regex CreateRegex();
    [IteratorStateMachineAttribute("AngleSharp.Html.SourceSet/<Parse>d__3")]
public static IEnumerable`1<ImageCandidate> Parse(string srcset);
    private static MediaSize ParseSize(string sourceSizeStr);
    private double ParseDescriptor(string descriptor, string sizesattr);
    private double GetWidthFromLength(string length);
    private double GetWidthFromSourceSize(string sourceSizes);
    [NullableContextAttribute("2")]
[IteratorStateMachineAttribute("AngleSharp.Html.SourceSet/<GetCandidates>d__8")]
public IEnumerable`1<string> GetCandidates(string srcset, string sizes);
}
[FlagsAttribute]
public enum AngleSharp.Html.ValidationErrors : Enum {
    public ushort value__;
    public static ValidationErrors None;
    public static ValidationErrors ValueMissing;
    public static ValidationErrors TypeMismatch;
    public static ValidationErrors PatternMismatch;
    public static ValidationErrors TooLong;
    public static ValidationErrors TooShort;
    public static ValidationErrors RangeUnderflow;
    public static ValidationErrors RangeOverflow;
    public static ValidationErrors StepMismatch;
    public static ValidationErrors BadInput;
    public static ValidationErrors Custom;
}
[NullableContextAttribute("2")]
public interface AngleSharp.IBrowsingContext {
    public IWindow Current { get; }
    public IDocument Active { get; public set; }
    public IHistory SessionHistory { get; }
    public Sandboxes Security { get; }
    public IBrowsingContext Parent { get; }
    public IDocument Creator { get; }
    [NullableAttribute("1")]
public IEnumerable`1<object> OriginalServices { get; }
    public abstract virtual IWindow get_Current();
    public abstract virtual IDocument get_Active();
    public abstract virtual void set_Active(IDocument value);
    public abstract virtual IHistory get_SessionHistory();
    public abstract virtual Sandboxes get_Security();
    public abstract virtual IBrowsingContext get_Parent();
    public abstract virtual IDocument get_Creator();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<object> get_OriginalServices();
    [NullableContextAttribute("1")]
public abstract virtual T GetService();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<T> GetServices();
    [NullableContextAttribute("1")]
public abstract virtual IBrowsingContext CreateChild(string name, Sandboxes security);
    [NullableContextAttribute("1")]
public abstract virtual IBrowsingContext FindChild(string name);
}
[NullableContextAttribute("1")]
public interface AngleSharp.IConfiguration {
    public IEnumerable`1<object> Services { get; }
    public abstract virtual IEnumerable`1<object> get_Services();
}
[NullableContextAttribute("1")]
public interface AngleSharp.IMarkupFormattable {
    public abstract virtual void ToHtml(TextWriter writer, IMarkupFormatter formatter);
}
[NullableContextAttribute("1")]
public interface AngleSharp.IMarkupFormatter {
    public abstract virtual string Text(ICharacterData text);
    public abstract virtual string LiteralText(ICharacterData text);
    public abstract virtual string Comment(IComment comment);
    public abstract virtual string Processing(IProcessingInstruction processing);
    public abstract virtual string Doctype(IDocumentType doctype);
    public abstract virtual string OpenTag(IElement element, bool selfClosing);
    public abstract virtual string CloseTag(IElement element, bool selfClosing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Io.BaseLoader : object {
    private IBrowsingContext _context;
    private Predicate`1<Request> _filter;
    private List`1<IDownload> _downloads;
    [CompilerGeneratedAttribute]
private int <MaxRedirects>k__BackingField;
    public int MaxRedirects { get; protected set; }
    public BaseLoader(IBrowsingContext context, Predicate`1<Request> filter);
    [CompilerGeneratedAttribute]
public int get_MaxRedirects();
    [CompilerGeneratedAttribute]
protected void set_MaxRedirects(int value);
    protected virtual void Add(IDownload download);
    protected virtual void Remove(IDownload download);
    protected virtual string GetCookie(Url url);
    protected virtual void SetCookie(Url url, string value);
    protected virtual IDownload DownloadAsync(Request request, INode originator);
    public sealed virtual IEnumerable`1<IDownload> GetDownloads();
    [AsyncStateMachineAttribute("AngleSharp.Io.BaseLoader/<LoadAsync>d__14")]
protected Task`1<IResponse> LoadAsync(Request request, CancellationToken cancel);
    protected static Request CreateNewRequest(Request request, IResponse response);
    private void AppendCookieTo(Request request);
    private void ExtractCookieFrom(IResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Io.BaseRequester : EventTarget {
    public sealed virtual void add_Requesting(DomEventHandler value);
    public sealed virtual void remove_Requesting(DomEventHandler value);
    public sealed virtual void add_Requested(DomEventHandler value);
    public sealed virtual void remove_Requested(DomEventHandler value);
    [AsyncStateMachineAttribute("AngleSharp.Io.BaseRequester/<RequestAsync>d__6")]
public sealed virtual Task`1<IResponse> RequestAsync(Request request, CancellationToken cancel);
    public abstract virtual bool SupportsProtocol(string protocol);
    protected abstract virtual Task`1<IResponse> PerformRequestAsync(Request request, CancellationToken cancel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Io.CorsRequest : object {
    [CompilerGeneratedAttribute]
private ResourceRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private CorsSetting <Setting>k__BackingField;
    [CompilerGeneratedAttribute]
private OriginBehavior <Behavior>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IIntegrityProvider <Integrity>k__BackingField;
    public ResourceRequest Request { get; }
    public CorsSetting Setting { get; public set; }
    public OriginBehavior Behavior { get; public set; }
    [NullableAttribute("2")]
public IIntegrityProvider Integrity { get; public set; }
    public CorsRequest(ResourceRequest request);
    [CompilerGeneratedAttribute]
public ResourceRequest get_Request();
    [CompilerGeneratedAttribute]
public CorsSetting get_Setting();
    [CompilerGeneratedAttribute]
public void set_Setting(CorsSetting value);
    [CompilerGeneratedAttribute]
public OriginBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(OriginBehavior value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IIntegrityProvider get_Integrity();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Integrity(IIntegrityProvider value);
}
public enum AngleSharp.Io.CorsSetting : Enum {
    public byte value__;
    public static CorsSetting None;
    public static CorsSetting Anonymous;
    public static CorsSetting UseCredentials;
}
public class AngleSharp.Io.DefaultDocumentLoader : BaseLoader {
    [NullableContextAttribute("1")]
public DefaultDocumentLoader(IBrowsingContext context, Predicate`1<Request> filter);
    [NullableContextAttribute("1")]
public virtual IDownload FetchAsync(DocumentRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Io.DefaultHttpRequester : BaseRequester {
    private static int BufferSize;
    [NullableAttribute("2")]
private static string Version;
    private static string AgentName;
    private TimeSpan _timeOut;
    private Action`1<HttpWebRequest> _setup;
    private Dictionary`2<string, string> _headers;
    public IDictionary`2<string, string> Headers { get; }
    public TimeSpan Timeout { get; public set; }
    [NullableContextAttribute("2")]
public DefaultHttpRequester(string userAgent, Action`1<HttpWebRequest> setup);
    private static DefaultHttpRequester();
    public IDictionary`2<string, string> get_Headers();
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public virtual bool SupportsProtocol(string protocol);
    [AsyncStateMachineAttribute("AngleSharp.Io.DefaultHttpRequester/<PerformRequestAsync>d__13")]
protected virtual Task`1<IResponse> PerformRequestAsync(Request request, CancellationToken cancellationToken);
    private static void RaiseConnectionLimit(HttpWebRequest http);
}
public class AngleSharp.Io.DefaultResourceLoader : BaseLoader {
    [NullableContextAttribute("1")]
public DefaultResourceLoader(IBrowsingContext context, Predicate`1<Request> filter);
    [NullableContextAttribute("1")]
public virtual IDownload FetchAsync(ResourceRequest request);
}
public class AngleSharp.Io.DefaultResponse : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Url <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Content>k__BackingField;
    public HttpStatusCode StatusCode { get; public set; }
    public Url Address { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    public Stream Content { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual Url get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Url value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(Stream value);
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Io.DocumentRequest : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INode <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Url <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [NullableAttribute("2")]
public INode Source { get; public set; }
    public Url Target { get; }
    [NullableAttribute("2")]
public string Referer { get; public set; }
    public HttpMethod Method { get; public set; }
    public Stream Body { get; public set; }
    [NullableAttribute("2")]
public string MimeType { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public DocumentRequest(Url target);
    public static DocumentRequest Get(Url target, INode source, string referer);
    public static DocumentRequest Post(Url target, Stream body, string type, INode source, string referer);
    public static DocumentRequest PostAsPlaintext(Url target, IDictionary`2<string, string> fields);
    public static DocumentRequest PostAsUrlencoded(Url target, IDictionary`2<string, string> fields);
    public static DocumentRequest PostAsMultipart(Url target, FormDataSet form);
    public static DocumentRequest PostAsMultipart(Url target, Stream formBody, string formBoundary);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INode get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(INode value);
    [CompilerGeneratedAttribute]
public Url get_Target();
    [NullableContextAttribute("2")]
public string get_Referer();
    [NullableContextAttribute("2")]
public void set_Referer(string value);
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public Stream get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Stream value);
    [NullableContextAttribute("2")]
public string get_MimeType();
    [NullableContextAttribute("2")]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    private void SetHeader(string name, string value);
    private string GetHeader(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Io.Dom.FileList : object {
    private List`1<IFile> _entries;
    public IFile Item { get; }
    public int Length { get; }
    public sealed virtual IFile get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual void Add(IFile item);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(IFile item);
    public sealed virtual IEnumerator`1<IFile> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[DomNameAttribute("Blob")]
public interface AngleSharp.Io.Dom.IBlob {
    [DomNameAttribute("size")]
public int Length { get; }
    [DomNameAttribute("type")]
public string Type { get; }
    [DomNameAttribute("isClosed")]
public bool IsClosed { get; }
    public Stream Body { get; }
    public abstract virtual int get_Length();
    public abstract virtual string get_Type();
    public abstract virtual bool get_IsClosed();
    public abstract virtual Stream get_Body();
    [DomNameAttribute("slice")]
public abstract virtual IBlob Slice(int start, int end, string contentType);
    [DomNameAttribute("close")]
public abstract virtual void Close();
}
[DomNameAttribute("File")]
public interface AngleSharp.Io.Dom.IFile {
    [NullableAttribute("1")]
[DomNameAttribute("name")]
public string Name { get; }
    [DomNameAttribute("lastModified")]
public DateTime LastModified { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    public abstract virtual DateTime get_LastModified();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("FileList")]
public interface AngleSharp.Io.Dom.IFileList {
    [DomNameAttribute("item")]
[DomAccessorAttribute("1")]
public IFile Item { get; }
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual IFile get_Item(int index);
    public abstract virtual int get_Length();
    public abstract virtual void Add(IFile file);
    public abstract virtual bool Remove(IFile file);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Io.Download : object {
    private CancellationTokenSource _cts;
    private Task`1<IResponse> _task;
    private Url _target;
    [NullableAttribute("2")]
private object _source;
    [NullableAttribute("2")]
public object Source { get; }
    public Url Target { get; }
    public Task`1<IResponse> Task { get; }
    public bool IsRunning { get; }
    public bool IsCompleted { get; }
    public Download(Task`1<IResponse> task, CancellationTokenSource cts, Url target, object source);
    [NullableContextAttribute("2")]
public sealed virtual object get_Source();
    public sealed virtual Url get_Target();
    public sealed virtual Task`1<IResponse> get_Task();
    public sealed virtual bool get_IsRunning();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual void Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Io.HeaderNames : object {
    public static string CacheControl;
    public static string Connection;
    public static string ContentLength;
    public static string ContentMd5;
    public static string ContentType;
    public static string Date;
    public static string Pragma;
    public static string Via;
    public static string Warning;
    public static string Accept;
    public static string AcceptCharset;
    public static string AcceptEncoding;
    public static string AcceptLanguage;
    public static string AcceptDatetime;
    public static string Authorization;
    public static string Cookie;
    public static string Expect;
    public static string From;
    public static string Host;
    public static string IfMatch;
    public static string IfModifiedSince;
    public static string IfNoneMatch;
    public static string IfRange;
    public static string IfUnmodifiedSince;
    public static string MaxForwards;
    public static string Origin;
    public static string ProxyAuthorization;
    public static string Range;
    public static string Referer;
    public static string Te;
    public static string Upgrade;
    public static string UserAgent;
    public static string AccessControlAllowOrigin;
    public static string AcceptRanges;
    public static string Age;
    public static string Allow;
    public static string ContentEncoding;
    public static string ContentLanguage;
    public static string ContentLocation;
    public static string ContentDisposition;
    public static string ContentRange;
    public static string ETag;
    public static string Expires;
    public static string LastModified;
    public static string Link;
    public static string Location;
    public static string P3p;
    public static string ProxyAuthenticate;
    public static string Refresh;
    public static string RetryAfter;
    public static string Server;
    public static string SetCookie;
    public static string Status;
    public static string StrictTransportSecurity;
    public static string Trailer;
    public static string TransferEncoding;
    public static string Vary;
    public static string WwwAuthenticate;
    private static HeaderNames();
}
public enum AngleSharp.Io.HttpMethod : Enum {
    public byte value__;
    public static HttpMethod Get;
    public static HttpMethod Post;
    public static HttpMethod Put;
    public static HttpMethod Delete;
    public static HttpMethod Options;
    public static HttpMethod Head;
    public static HttpMethod Trace;
    public static HttpMethod Connect;
}
[NullableContextAttribute("1")]
public interface AngleSharp.Io.ICookieProvider {
    public abstract virtual string GetCookie(Url url);
    public abstract virtual void SetCookie(Url url, string value);
}
public interface AngleSharp.Io.IDocumentLoader {
    [NullableContextAttribute("1")]
public abstract virtual IDownload FetchAsync(DocumentRequest request);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Io.IDownload {
    public Url Target { get; }
    [NullableAttribute("2")]
public object Source { get; }
    public abstract virtual Url get_Target();
    [NullableContextAttribute("2")]
public abstract virtual object get_Source();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Io.IIntegrityProvider {
    public abstract virtual bool IsSatisfied(Byte[] content, string integrity);
}
[NullableContextAttribute("2")]
[DomNoInterfaceObjectAttribute]
public interface AngleSharp.Io.ILoadableElement {
    public IDownload CurrentDownload { get; }
    public abstract virtual IDownload get_CurrentDownload();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Io.ILoader {
    public abstract virtual IEnumerable`1<IDownload> GetDownloads();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Io.IRequester {
    public abstract virtual bool SupportsProtocol(string protocol);
    public abstract virtual Task`1<IResponse> RequestAsync(Request request, CancellationToken cancel);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Requesting(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Requesting(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Requested(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Requested(DomEventHandler value);
}
public interface AngleSharp.Io.IResourceLoader {
    [NullableContextAttribute("1")]
public abstract virtual IDownload FetchAsync(ResourceRequest request);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Io.IResponse {
    public HttpStatusCode StatusCode { get; }
    public Url Address { get; }
    public IDictionary`2<string, string> Headers { get; }
    public Stream Content { get; }
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual Url get_Address();
    public abstract virtual IDictionary`2<string, string> get_Headers();
    public abstract virtual Stream get_Content();
}
public class AngleSharp.Io.LoaderOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsNavigationDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResourceLoadingEnabled>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Predicate`1<Request> <Filter>k__BackingField;
    public bool IsNavigationDisabled { get; public set; }
    public bool IsResourceLoadingEnabled { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<Request> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsNavigationDisabled();
    [CompilerGeneratedAttribute]
public void set_IsNavigationDisabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResourceLoadingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsResourceLoadingEnabled(bool value);
    [CompilerGeneratedAttribute]
public Predicate`1<Request> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Predicate`1<Request> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Io.MemoryCookieProvider : object {
    private CookieContainer _container;
    public CookieContainer Container { get; }
    public CookieContainer get_Container();
    public sealed virtual string GetCookie(Url url);
    public sealed virtual void SetCookie(Url url, string value);
    private static string Sanatize(string host, string cookie);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Io.MimeType : object {
    private string _general;
    private string _media;
    private string _suffix;
    private string _params;
    private static Char[] s_semicolon;
    public string Content { get; }
    public string GeneralType { get; }
    public string MediaType { get; }
    public string Suffix { get; }
    public IEnumerable`1<string> Keys { get; }
    public MimeType(string value);
    private static MimeType();
    public string get_Content();
    public string get_GeneralType();
    public string get_MediaType();
    public string get_Suffix();
    [IteratorStateMachineAttribute("AngleSharp.Io.MimeType/<get_Keys>d__15")]
public IEnumerable`1<string> get_Keys();
    public string GetParameter(string key);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MimeType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MimeType a, MimeType b);
    public static bool op_Inequality(MimeType a, MimeType b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Io.MimeTypeNames : object {
    private static String[] CommonJsTypes;
    private static Dictionary`2<string, string> Extensions;
    public static string Html;
    public static string Png;
    public static string Plain;
    public static string Xml;
    public static string Svg;
    public static string Css;
    public static string DefaultJavaScript;
    public static string ApplicationJson;
    public static string ApplicationXml;
    public static string ApplicationXHtml;
    public static string Binary;
    public static string UrlencodedForm;
    public static string MultipartForm;
    private static MimeTypeNames();
    public static string FromExtension(string extension);
    public static string GetExtension(string mimeType);
    public static bool IsJavaScript(string type);
    [ExtensionAttribute]
public static bool Represents(MimeType type, string content);
}
public enum AngleSharp.Io.OriginBehavior : Enum {
    public byte value__;
    public static OriginBehavior Taint;
    public static OriginBehavior Fail;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AngleSharp.Io.PortNumbers : object {
    private static Dictionary`2<string, string> Ports;
    private static PortNumbers();
    public static string GetDefaultPort(string protocol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class AngleSharp.Io.Processors.BaseRequestProcessor : object {
    private IResourceLoader _loader;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDownload <Download>k__BackingField;
    public bool IsAvailable { get; }
    [NullableAttribute("2")]
public IDownload Download { get; protected set; }
    public BaseRequestProcessor(IResourceLoader loader);
    public bool get_IsAvailable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IDownload get_Download();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_Download(IDownload value);
    public virtual Task ProcessAsync(ResourceRequest request);
    protected abstract virtual Task ProcessResponseAsync(IResponse response);
    [AsyncStateMachineAttribute("AngleSharp.Io.Processors.BaseRequestProcessor/<FinishDownloadAsync>d__10")]
protected Task FinishDownloadAsync();
    protected IDownload DownloadWithCors(CorsRequest request);
    protected void CancelDownload();
    protected bool IsDifferentToCurrentDownloadUrl(Url target);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class AngleSharp.Io.Processors.DocumentRequestProcessor : BaseRequestProcessor {
    private IDocument _parentDocument;
    [NullableAttribute("1")]
private IBrowsingContext _context;
    [CompilerGeneratedAttribute]
private IDocument <ChildDocument>k__BackingField;
    public IDocument ChildDocument { get; private set; }
    [NullableContextAttribute("1")]
public DocumentRequestProcessor(IBrowsingContext context);
    [CompilerGeneratedAttribute]
public IDocument get_ChildDocument();
    [CompilerGeneratedAttribute]
private void set_ChildDocument(IDocument value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("AngleSharp.Io.Processors.DocumentRequestProcessor/<ProcessResponseAsync>d__7")]
protected virtual Task ProcessResponseAsync(IResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Io.Processors.FrameRequestProcessor : BaseRequestProcessor {
    private HtmlFrameElementBase _element;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [NullableAttribute("2")]
public IDocument Document { get; private set; }
    public FrameRequestProcessor(IBrowsingContext context, HtmlFrameElementBase element);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IDocument get_Document();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Document(IDocument value);
    public virtual Task ProcessAsync(ResourceRequest request);
    protected virtual Task ProcessResponseAsync(IResponse response);
    private Task ProcessResponse(string response, string referer);
    [AsyncStateMachineAttribute("AngleSharp.Io.Processors.FrameRequestProcessor/<WaitResponse>d__9")]
private Task WaitResponse(Task`1<IDocument> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class AngleSharp.Io.Processors.ImageRequestProcessor : ResourceRequestProcessor`1<IImageInfo> {
    public int Width { get; }
    public int Height { get; }
    public ImageRequestProcessor(IBrowsingContext context);
    public int get_Width();
    public int get_Height();
    [AsyncStateMachineAttribute("AngleSharp.Io.Processors.ImageRequestProcessor/<ProcessResponseAsync>d__5")]
protected virtual Task ProcessResponseAsync(IResponse response);
}
[NullableContextAttribute("2")]
public interface AngleSharp.Io.Processors.IRequestProcessor {
    public IDownload Download { get; }
    public abstract virtual IDownload get_Download();
    [NullableContextAttribute("1")]
public abstract virtual Task ProcessAsync(ResourceRequest request);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class AngleSharp.Io.Processors.MediaRequestProcessor`1 : ResourceRequestProcessor`1<TMediaInfo> {
    [CompilerGeneratedAttribute]
private TMediaInfo <Media>k__BackingField;
    public TMediaInfo Media { get; private set; }
    public MediaNetworkState NetworkState { get; }
    [NullableContextAttribute("1")]
public MediaRequestProcessor`1(IBrowsingContext context);
    [CompilerGeneratedAttribute]
public TMediaInfo get_Media();
    [CompilerGeneratedAttribute]
private void set_Media(TMediaInfo value);
    public MediaNetworkState get_NetworkState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("AngleSharp.Io.Processors.MediaRequestProcessor`1/<ProcessResponseAsync>d__7")]
protected virtual Task ProcessResponseAsync(IResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class AngleSharp.Io.Processors.ObjectRequestProcessor : ResourceRequestProcessor`1<IObjectInfo> {
    public int Width { get; }
    public int Height { get; }
    public ObjectRequestProcessor(IBrowsingContext context);
    public int get_Width();
    public int get_Height();
    [AsyncStateMachineAttribute("AngleSharp.Io.Processors.ObjectRequestProcessor/<ProcessResponseAsync>d__5")]
protected virtual Task ProcessResponseAsync(IResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class AngleSharp.Io.Processors.ResourceRequestProcessor`1 : BaseRequestProcessor {
    private IBrowsingContext _context;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TResource <Resource>k__BackingField;
    public string Source { get; }
    [MemberNotNullWhenAttribute("True", "Resource")]
public bool IsReady { get; }
    [NullableAttribute("2")]
public TResource Resource { get; protected set; }
    public ResourceRequestProcessor`1(IBrowsingContext context);
    public string get_Source();
    [MemberNotNullWhenAttribute("True", "Resource")]
public bool get_IsReady();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TResource get_Resource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_Resource(TResource value);
    public virtual Task ProcessAsync(ResourceRequest request);
    protected IResourceService`1<TResource> GetService(IResponse response);
    private bool IsDifferentToCurrentResourceUrl(Url target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Io.Processors.ScriptRequestProcessor : object {
    private IBrowsingContext _context;
    private Document _document;
    private HtmlScriptElement _script;
    private IResourceLoader _loader;
    [NullableAttribute("2")]
private IResponse _response;
    [NullableAttribute("2")]
private IScriptingService _engine;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDownload <Download>k__BackingField;
    [NullableAttribute("2")]
public IDownload Download { get; private set; }
    [NullableAttribute("2")]
public IScriptingService Engine { get; }
    [NullableAttribute("2")]
public string AlternativeLanguage { get; }
    public string ScriptLanguage { get; }
    public ScriptRequestProcessor(IBrowsingContext context, HtmlScriptElement script);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IDownload get_Download();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Download(IDownload value);
    [NullableContextAttribute("2")]
public IScriptingService get_Engine();
    [NullableContextAttribute("2")]
public string get_AlternativeLanguage();
    public string get_ScriptLanguage();
    [AsyncStateMachineAttribute("AngleSharp.Io.Processors.ScriptRequestProcessor/<RunAsync>d__17")]
public Task RunAsync(CancellationToken cancel);
    public void Process(string content);
    public sealed virtual Task ProcessAsync(ResourceRequest request);
    private ScriptOptions CreateOptions();
    private void FireLoadEvent(CancellationToken _);
    private void FireErrorEvent(CancellationToken _);
    private bool FireBeforeScriptExecuteEvent(CancellationToken _);
    private void FireAfterScriptExecuteEvent(CancellationToken _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Io.Processors.StyleSheetRequestProcessor : BaseRequestProcessor {
    private IHtmlLinkElement _link;
    private IBrowsingContext _context;
    [NullableAttribute("2")]
private IStylingService _engine;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IStyleSheet <Sheet>k__BackingField;
    [NullableAttribute("2")]
public IStyleSheet Sheet { get; private set; }
    [NullableAttribute("2")]
public IStylingService Engine { get; }
    public string LinkType { get; }
    public StyleSheetRequestProcessor(IBrowsingContext context, IHtmlLinkElement link);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IStyleSheet get_Sheet();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Sheet(IStyleSheet value);
    [NullableContextAttribute("2")]
public IStylingService get_Engine();
    public string get_LinkType();
    public virtual Task ProcessAsync(ResourceRequest request);
    [AsyncStateMachineAttribute("AngleSharp.Io.Processors.StyleSheetRequestProcessor/<ProcessResponseAsync>d__13")]
protected virtual Task ProcessResponseAsync(IResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Io.ProtocolNames : object {
    public static string Http;
    public static string Https;
    public static string Ftp;
    public static string JavaScript;
    public static string Data;
    public static string Mailto;
    public static string File;
    public static string Ws;
    public static string Wss;
    public static string Telnet;
    public static string Ssh;
    public static string Gopher;
    public static string Blob;
    private static String[] RelativeProtocols;
    private static String[] OriginalableProtocols;
    private static ProtocolNames();
    public static bool IsRelative(string protocol);
    public static bool IsOriginable(string protocol);
}
public class AngleSharp.Io.Request : object {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Url <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Content>k__BackingField;
    public HttpMethod Method { get; public set; }
    public Url Address { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    public Stream Content { get; public set; }
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public Url get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Url value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Stream get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(Stream value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Io.RequesterExtensions : object {
    [ExtensionAttribute]
public static bool IsRedirected(HttpStatusCode status);
    [ExtensionAttribute]
public static IDownload FetchWithCorsAsync(IResourceLoader loader, CorsRequest cors);
    [ExtensionAttribute]
private static IDownload FetchFromSameOriginAsync(IResourceLoader loader, Url url, CorsRequest cors);
    [ExtensionAttribute]
private static IDownload FetchFromDifferentOriginAsync(IResourceLoader loader, CorsRequest cors);
    [ExtensionAttribute]
private static IDownload FetchWithoutCorsAsync(IResourceLoader loader, ResourceRequest request, OriginBehavior behavior);
    [ExtensionAttribute]
private static bool IsAnonymous(CorsRequest cors);
    [ExtensionAttribute]
private static IDownload Wrap(IDownload download, Func`2<IResponse, IDownload> callback);
    [ExtensionAttribute]
private static IDownload Wrap(IDownload download, IResponse response);
    [AsyncStateMachineAttribute("AngleSharp.Io.RequesterExtensions/<Wrap>d__8")]
[ExtensionAttribute]
private static Task`1<IResponse> Wrap(Task`1<IResponse> task, Func`2<IResponse, IDownload> callback);
    [ExtensionAttribute]
private static bool IsRedirected(IResponse response);
    [ExtensionAttribute]
private static CorsRequest RedirectTo(CorsRequest cors, Url url);
    [ExtensionAttribute]
private static IDownload CheckIntegrity(CorsRequest cors, IDownload download);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Io.ResourceRequest : object {
    [CompilerGeneratedAttribute]
private IElement <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Url <Target>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsManualRedirectDesired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSameOriginForced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCredentialOmitted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCookieBlocked>k__BackingField;
    public IElement Source { get; }
    public Url Target { get; }
    [NullableAttribute("2")]
public string Origin { get; public set; }
    public bool IsManualRedirectDesired { get; public set; }
    public bool IsSameOriginForced { get; public set; }
    public bool IsCredentialOmitted { get; public set; }
    public bool IsCookieBlocked { get; public set; }
    public ResourceRequest(IElement source, Url target);
    [CompilerGeneratedAttribute]
public IElement get_Source();
    [CompilerGeneratedAttribute]
public Url get_Target();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Origin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public bool get_IsManualRedirectDesired();
    [CompilerGeneratedAttribute]
public void set_IsManualRedirectDesired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSameOriginForced();
    [CompilerGeneratedAttribute]
public void set_IsSameOriginForced(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCredentialOmitted();
    [CompilerGeneratedAttribute]
public void set_IsCredentialOmitted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCookieBlocked();
    [CompilerGeneratedAttribute]
public void set_IsCookieBlocked(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Io.ResponseExtensions : object {
    [ExtensionAttribute]
public static MimeType GetContentType(IResponse response);
    [ExtensionAttribute]
public static MimeType GetContentType(IResponse response, string defaultType);
}
public class AngleSharp.Io.VirtualResponse : object {
    private Url _address;
    private HttpStatusCode _status;
    private Dictionary`2<string, string> _headers;
    private Stream _content;
    private bool _dispose;
    private Url AngleSharp.Io.IResponse.Address { get; }
    private Stream AngleSharp.Io.IResponse.Content { get; }
    private IDictionary`2<string, string> AngleSharp.Io.IResponse.Headers { get; }
    private HttpStatusCode AngleSharp.Io.IResponse.StatusCode { get; }
    public static IResponse Create(Action`1<VirtualResponse> request);
    private sealed virtual override Url AngleSharp.Io.IResponse.get_Address();
    private sealed virtual override Stream AngleSharp.Io.IResponse.get_Content();
    private sealed virtual override IDictionary`2<string, string> AngleSharp.Io.IResponse.get_Headers();
    private sealed virtual override HttpStatusCode AngleSharp.Io.IResponse.get_StatusCode();
    public VirtualResponse Address(Url url);
    public VirtualResponse Address(string address);
    public VirtualResponse Address(Uri url);
    public VirtualResponse Cookie(string value);
    public VirtualResponse Status(HttpStatusCode code);
    public VirtualResponse Status(int code);
    public VirtualResponse Header(string name, string value);
    public VirtualResponse Headers(object obj);
    public VirtualResponse Headers(IDictionary`2<string, string> headers);
    public VirtualResponse Content(string text);
    public VirtualResponse Content(Stream stream, bool shouldDispose);
    private void Release();
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
public interface AngleSharp.IStyleFormattable {
    public abstract virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[NullableContextAttribute("1")]
public interface AngleSharp.IStyleFormatter {
    public abstract virtual string Sheet(IEnumerable`1<IStyleFormattable> rules);
    public abstract virtual string Declaration(string name, string value, bool important);
    public abstract virtual string BlockDeclarations(IEnumerable`1<IStyleFormattable> declarations);
    public abstract virtual string Rule(string name, string value);
    public abstract virtual string Rule(string name, string prelude, string rules);
    public abstract virtual string BlockRules(IEnumerable`1<IStyleFormattable> rules);
    public abstract virtual string Comment(string data);
}
internal class AngleSharp.Mathml.Dom.MathAnnotationXmlElement : MathElement {
    [NullableContextAttribute("1")]
public MathAnnotationXmlElement(Document owner, string prefix);
}
public class AngleSharp.Mathml.Dom.MathElement : Element {
    [NullableContextAttribute("1")]
public MathElement(Document owner, string name, string prefix, NodeFlags flags);
    [NullableContextAttribute("1")]
public virtual IElement ParseSubtree(string html);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
}
internal class AngleSharp.Mathml.Dom.MathIdentifierElement : MathElement {
    [NullableContextAttribute("1")]
public MathIdentifierElement(Document owner, string prefix);
}
internal class AngleSharp.Mathml.Dom.MathNumberElement : MathElement {
    [NullableContextAttribute("1")]
public MathNumberElement(Document owner, string prefix);
}
internal class AngleSharp.Mathml.Dom.MathOperatorElement : MathElement {
    [NullableContextAttribute("1")]
public MathOperatorElement(Document owner, string prefix);
}
internal class AngleSharp.Mathml.Dom.MathStringElement : MathElement {
    [NullableContextAttribute("1")]
public MathStringElement(Document owner, string prefix);
}
internal class AngleSharp.Mathml.Dom.MathTextElement : MathElement {
    [NullableContextAttribute("1")]
public MathTextElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Mathml.MathElementFactory : object {
    private Dictionary`2<string, Creator> creators;
    internal static MathElementFactory Instance;
    private static MathElementFactory();
    public sealed virtual MathElement Create(Document document, string localName, string prefix, NodeFlags flags);
}
[NullableContextAttribute("2")]
[DomNameAttribute("AudioTrack")]
public interface AngleSharp.Media.Dom.IAudioTrack {
    [DomNameAttribute("id")]
public string Id { get; }
    [DomNameAttribute("kind")]
public string Kind { get; }
    [DomNameAttribute("label")]
public string Label { get; }
    [DomNameAttribute("language")]
public string Language { get; }
    [DomNameAttribute("enabled")]
public bool IsEnabled { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Kind();
    public abstract virtual string get_Label();
    public abstract virtual string get_Language();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("AudioTrackList")]
public interface AngleSharp.Media.Dom.IAudioTrackList {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomAccessorAttribute("1")]
public IAudioTrack Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual IAudioTrack get_Item(int index);
    [DomNameAttribute("getTrackById")]
public abstract virtual IAudioTrack GetTrackById(string id);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackAdded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackAdded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackRemoved(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackRemoved(DomEventHandler value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("CanvasRenderingContext2D")]
public interface AngleSharp.Media.Dom.ICanvasRenderingContext2D {
    [DomNameAttribute("canvas")]
public IHtmlCanvasElement Canvas { get; }
    [DomNameAttribute("width")]
public int Width { get; public set; }
    [DomNameAttribute("height")]
public int Height { get; public set; }
    public abstract virtual IHtmlCanvasElement get_Canvas();
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    [DomNameAttribute("save")]
public abstract virtual void SaveState();
    [DomNameAttribute("restore")]
public abstract virtual void RestoreState();
}
[NullableContextAttribute("1")]
[DomNameAttribute("MediaController")]
public interface AngleSharp.Media.Dom.IMediaController {
    [NullableAttribute("2")]
[DomNameAttribute("buffered")]
public ITimeRanges BufferedTime { get; }
    [NullableAttribute("2")]
[DomNameAttribute("seekable")]
public ITimeRanges SeekableTime { get; }
    [NullableAttribute("2")]
[DomNameAttribute("played")]
public ITimeRanges PlayedTime { get; }
    [DomNameAttribute("duration")]
public double Duration { get; }
    [DomNameAttribute("currentTime")]
public double CurrentTime { get; public set; }
    [DomNameAttribute("defaultPlaybackRate")]
public double DefaultPlaybackRate { get; public set; }
    [DomNameAttribute("playbackRate")]
public double PlaybackRate { get; public set; }
    [DomNameAttribute("volume")]
public double Volume { get; public set; }
    [DomNameAttribute("muted")]
public bool IsMuted { get; public set; }
    [DomNameAttribute("paused")]
public bool IsPaused { get; }
    [DomNameAttribute("readyState")]
public MediaReadyState ReadyState { get; }
    [DomNameAttribute("playbackState")]
public MediaControllerPlaybackState PlaybackState { get; }
    [NullableContextAttribute("2")]
public abstract virtual ITimeRanges get_BufferedTime();
    [NullableContextAttribute("2")]
public abstract virtual ITimeRanges get_SeekableTime();
    [NullableContextAttribute("2")]
public abstract virtual ITimeRanges get_PlayedTime();
    public abstract virtual double get_Duration();
    public abstract virtual double get_CurrentTime();
    public abstract virtual void set_CurrentTime(double value);
    public abstract virtual double get_DefaultPlaybackRate();
    public abstract virtual void set_DefaultPlaybackRate(double value);
    public abstract virtual double get_PlaybackRate();
    public abstract virtual void set_PlaybackRate(double value);
    public abstract virtual double get_Volume();
    public abstract virtual void set_Volume(double value);
    public abstract virtual bool get_IsMuted();
    public abstract virtual void set_IsMuted(bool value);
    public abstract virtual bool get_IsPaused();
    [DomNameAttribute("play")]
public abstract virtual void Play();
    [DomNameAttribute("pause")]
public abstract virtual void Pause();
    public abstract virtual MediaReadyState get_ReadyState();
    public abstract virtual MediaControllerPlaybackState get_PlaybackState();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Emptied(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Emptied(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadedMetadata(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadedMetadata(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadedData(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadedData(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanPlay(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanPlay(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanPlayThrough(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanPlayThrough(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Ended(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Ended(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Waiting(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Waiting(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DurationChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DurationChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TimeUpdated(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TimeUpdated(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Paused(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Paused(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Played(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Played(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Playing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Playing(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RateChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RateChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_VolumeChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_VolumeChanged(DomEventHandler value);
}
[DomNameAttribute("MediaError")]
public interface AngleSharp.Media.Dom.IMediaError {
    [DomNameAttribute("code")]
public MediaErrorCode Code { get; }
    public abstract virtual MediaErrorCode get_Code();
}
[NullableContextAttribute("1")]
[DomNameAttribute("RenderingContext")]
public interface AngleSharp.Media.Dom.IRenderingContext {
    public string ContextId { get; }
    public bool IsFixed { get; }
    public IHtmlCanvasElement Host { get; }
    public abstract virtual string get_ContextId();
    public abstract virtual bool get_IsFixed();
    public abstract virtual IHtmlCanvasElement get_Host();
    public abstract virtual Byte[] ToImage(string type);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Media.Dom.IRenderingService {
    public abstract virtual bool IsSupportingContext(string contextId);
    public abstract virtual IRenderingContext CreateContext(IHtmlCanvasElement host, string contextId);
}
[NullableContextAttribute("1")]
[DomNameAttribute("TextTrack")]
public interface AngleSharp.Media.Dom.ITextTrack {
    [NullableAttribute("2")]
[DomNameAttribute("kind")]
public string Kind { get; }
    [NullableAttribute("2")]
[DomNameAttribute("label")]
public string Label { get; }
    [NullableAttribute("2")]
[DomNameAttribute("language")]
public string Language { get; }
    [DomNameAttribute("mode")]
public TextTrackMode Mode { get; public set; }
    [DomNameAttribute("cues")]
public ITextTrackCueList Cues { get; }
    [DomNameAttribute("activeCues")]
public ITextTrackCueList ActiveCues { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Kind();
    [NullableContextAttribute("2")]
public abstract virtual string get_Label();
    [NullableContextAttribute("2")]
public abstract virtual string get_Language();
    public abstract virtual TextTrackMode get_Mode();
    public abstract virtual void set_Mode(TextTrackMode value);
    public abstract virtual ITextTrackCueList get_Cues();
    public abstract virtual ITextTrackCueList get_ActiveCues();
    [DomNameAttribute("addCue")]
public abstract virtual void Add(ITextTrackCue cue);
    [DomNameAttribute("removeCue")]
public abstract virtual void Remove(ITextTrackCue cue);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CueChanged(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CueChanged(DomEventHandler value);
}
[NullableContextAttribute("1")]
[DomNameAttribute("TextTrackCue")]
public interface AngleSharp.Media.Dom.ITextTrackCue {
    [DomNameAttribute("id")]
public string Id { get; public set; }
    [DomNameAttribute("track")]
public ITextTrack Track { get; }
    [DomNameAttribute("startTime")]
public double StartTime { get; public set; }
    [DomNameAttribute("endTime")]
public double EndTime { get; public set; }
    [DomNameAttribute("pauseOnExit")]
public bool IsPausedOnExit { get; public set; }
    [DomNameAttribute("vertical")]
public string Vertical { get; public set; }
    [DomNameAttribute("snapToLines")]
public bool IsSnappedToLines { get; public set; }
    [DomNameAttribute("line")]
public int Line { get; public set; }
    [DomNameAttribute("position")]
public int Position { get; public set; }
    [DomNameAttribute("size")]
public int Size { get; public set; }
    [DomNameAttribute("align")]
public string Alignment { get; public set; }
    [DomNameAttribute("text")]
public string Text { get; public set; }
    [DomNameAttribute("onenter")]
public DomEventHandler Entered { get; public set; }
    [DomNameAttribute("onexit")]
public DomEventHandler Exited { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual ITextTrack get_Track();
    public abstract virtual double get_StartTime();
    public abstract virtual void set_StartTime(double value);
    public abstract virtual double get_EndTime();
    public abstract virtual void set_EndTime(double value);
    public abstract virtual bool get_IsPausedOnExit();
    public abstract virtual void set_IsPausedOnExit(bool value);
    public abstract virtual string get_Vertical();
    public abstract virtual void set_Vertical(string value);
    public abstract virtual bool get_IsSnappedToLines();
    public abstract virtual void set_IsSnappedToLines(bool value);
    public abstract virtual int get_Line();
    public abstract virtual void set_Line(int value);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual string get_Alignment();
    public abstract virtual void set_Alignment(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    [DomNameAttribute("getCueAsHTML")]
public abstract virtual IDocumentFragment AsHtml();
    public abstract virtual DomEventHandler get_Entered();
    public abstract virtual void set_Entered(DomEventHandler value);
    public abstract virtual DomEventHandler get_Exited();
    public abstract virtual void set_Exited(DomEventHandler value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("TextTrackCueList")]
public interface AngleSharp.Media.Dom.ITextTrackCueList {
    [DomNameAttribute("length")]
public int Length { get; }
    public ITextTrackCue Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual ITextTrackCue get_Item(int index);
    [DomNameAttribute("getCueById")]
public abstract virtual IVideoTrack GetCueById(string id);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("TextTrackList")]
public interface AngleSharp.Media.Dom.ITextTrackList {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomAccessorAttribute("1")]
public ITextTrack Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual ITextTrack get_Item(int index);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackAdded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackAdded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackRemoved(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackRemoved(DomEventHandler value);
}
[DomNameAttribute("TimeRanges")]
public interface AngleSharp.Media.Dom.ITimeRanges {
    [DomNameAttribute("length")]
public int Length { get; }
    public abstract virtual int get_Length();
    [DomNameAttribute("start")]
public abstract virtual double Start(int index);
    [DomNameAttribute("end")]
public abstract virtual double End(int index);
}
[NullableContextAttribute("2")]
[DomNameAttribute("VideoTrack")]
public interface AngleSharp.Media.Dom.IVideoTrack {
    [DomNameAttribute("id")]
public string Id { get; }
    [DomNameAttribute("kind")]
public string Kind { get; }
    [DomNameAttribute("label")]
public string Label { get; }
    [DomNameAttribute("language")]
public string Language { get; }
    [DomNameAttribute("selected")]
public bool IsSelected { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Kind();
    public abstract virtual string get_Label();
    public abstract virtual string get_Language();
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[DomNameAttribute("VideoTrackList")]
public interface AngleSharp.Media.Dom.IVideoTrackList {
    [DomNameAttribute("length")]
public int Length { get; }
    [DomNameAttribute("selectedIndex")]
public int SelectedIndex { get; }
    [DomAccessorAttribute("1")]
public IVideoTrack Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual int get_SelectedIndex();
    public abstract virtual IVideoTrack get_Item(int index);
    [DomNameAttribute("getTrackById")]
public abstract virtual IVideoTrack GetTrackById(string id);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackAdded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackAdded(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackRemoved(DomEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackRemoved(DomEventHandler value);
}
[DomNameAttribute("MediaControllerPlaybackState")]
public enum AngleSharp.Media.Dom.MediaControllerPlaybackState : Enum {
    public byte value__;
    [DomNameAttribute("waiting")]
public static MediaControllerPlaybackState Waiting;
    [DomNameAttribute("playing")]
public static MediaControllerPlaybackState Playing;
    [DomNameAttribute("ended")]
public static MediaControllerPlaybackState Ended;
}
[DomNameAttribute("MediaError")]
public enum AngleSharp.Media.Dom.MediaErrorCode : Enum {
    public byte value__;
    [DomNameAttribute("MEDIA_ERR_ABORTED")]
public static MediaErrorCode Aborted;
    [DomNameAttribute("MEDIA_ERR_NETWORK")]
public static MediaErrorCode Network;
    [DomNameAttribute("MEDIA_ERR_DECODE")]
public static MediaErrorCode Decode;
    [DomNameAttribute("MEDIA_ERR_SRC_NOT_SUPPORTED")]
public static MediaErrorCode SourceNotSupported;
}
[DomNameAttribute("HTMLMediaElement")]
public enum AngleSharp.Media.Dom.MediaNetworkState : Enum {
    public byte value__;
    [DomNameAttribute("NETWORK_EMPTY")]
public static MediaNetworkState Empty;
    [DomNameAttribute("NETWORK_IDLE")]
public static MediaNetworkState Idle;
    [DomNameAttribute("NETWORK_LOADING")]
public static MediaNetworkState Loading;
    [DomNameAttribute("NETWORK_NO_SOURCE")]
public static MediaNetworkState NoSource;
}
[DomNameAttribute("HTMLMediaElement")]
public enum AngleSharp.Media.Dom.MediaReadyState : Enum {
    public byte value__;
    [DomNameAttribute("HAVE_NOTHING")]
public static MediaReadyState Nothing;
    [DomNameAttribute("HAVE_METADATA")]
public static MediaReadyState Metadata;
    [DomNameAttribute("HAVE_CURRENT_DATA")]
public static MediaReadyState CurrentData;
    [DomNameAttribute("HAVE_FUTURE_DATA")]
public static MediaReadyState FutureData;
    [DomNameAttribute("HAVE_ENOUGH_DATA")]
public static MediaReadyState EnoughData;
}
[DomNameAttribute("TextTrackMode")]
public enum AngleSharp.Media.Dom.TextTrackMode : Enum {
    public byte value__;
    [DomNameAttribute("disabled")]
public static TextTrackMode Disabled;
    [DomNameAttribute("hidden")]
public static TextTrackMode Hidden;
    [DomNameAttribute("showing")]
public static TextTrackMode Showing;
}
public interface AngleSharp.Media.IAudioInfo {
}
public interface AngleSharp.Media.IImageInfo {
    public int Width { get; }
    public int Height { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Media.IMediaInfo {
    public IMediaController Controller { get; }
    public abstract virtual IMediaController get_Controller();
}
public interface AngleSharp.Media.IObjectInfo {
    public int Width { get; }
    public int Height { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Media.IResourceInfo {
    public Url Source { get; public set; }
    public abstract virtual Url get_Source();
    public abstract virtual void set_Source(Url value);
}
[NullableContextAttribute("1")]
public interface AngleSharp.Media.IResourceService`1 {
    public abstract virtual bool SupportsType(string mimeType);
    public abstract virtual Task`1<TResource> CreateAsync(IResponse response, CancellationToken cancel);
}
public interface AngleSharp.Media.IVideoInfo {
    public int Width { get; }
    public int Height { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
}
[NullableContextAttribute("1")]
public interface AngleSharp.Scripting.IScriptingService {
    public abstract virtual bool SupportsType(string mimeType);
    public abstract virtual Task EvaluateScriptAsync(IResponse response, ScriptOptions options, CancellationToken cancel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class AngleSharp.Scripting.ScriptOptions : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IEventLoop <EventLoop>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private IHtmlScriptElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [NullableAttribute("1")]
public IEventLoop EventLoop { get; }
    [NullableAttribute("1")]
public IDocument Document { get; }
    public IHtmlScriptElement Element { get; public set; }
    public Encoding Encoding { get; public set; }
    [NullableContextAttribute("1")]
public ScriptOptions(IDocument document, IEventLoop loop);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IEventLoop get_EventLoop();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public IHtmlScriptElement get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(IHtmlScriptElement value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
}
[DomNameAttribute("SVGCircleElement")]
public interface AngleSharp.Svg.Dom.ISvgCircleElement {
}
[DomNameAttribute("SVGDescElement")]
public interface AngleSharp.Svg.Dom.ISvgDescriptionElement {
}
[DomNameAttribute("SVGElement")]
public interface AngleSharp.Svg.Dom.ISvgElement {
}
[DomNameAttribute("SVGForeignObjectElement")]
public interface AngleSharp.Svg.Dom.ISvgForeignObjectElement {
}
[DomNameAttribute("SVGSVGElement")]
public interface AngleSharp.Svg.Dom.ISvgSvgElement {
}
[DomNameAttribute("SVGTitleElement")]
public interface AngleSharp.Svg.Dom.ISvgTitleElement {
}
internal class AngleSharp.Svg.Dom.SvgCircleElement : SvgElement {
    [NullableContextAttribute("1")]
public SvgCircleElement(Document owner, string prefix);
}
internal class AngleSharp.Svg.Dom.SvgDescElement : SvgElement {
    [NullableContextAttribute("1")]
public SvgDescElement(Document owner, string prefix);
}
public class AngleSharp.Svg.Dom.SvgElement : Element {
    [NullableContextAttribute("1")]
public SvgElement(Document owner, string name, string prefix, NodeFlags flags);
    [NullableContextAttribute("1")]
public virtual IElement ParseSubtree(string html);
    [NullableContextAttribute("1")]
public virtual Node Clone(Document owner, bool deep);
}
internal class AngleSharp.Svg.Dom.SvgForeignObjectElement : SvgElement {
    [NullableContextAttribute("1")]
public SvgForeignObjectElement(Document owner, string prefix);
}
internal class AngleSharp.Svg.Dom.SvgSvgElement : SvgElement {
    [NullableContextAttribute("1")]
public SvgSvgElement(Document owner, string prefix);
}
internal class AngleSharp.Svg.Dom.SvgTitleElement : SvgElement {
    [NullableContextAttribute("1")]
public SvgTitleElement(Document owner, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AngleSharp.Svg.SvgElementFactory : object {
    private Dictionary`2<string, Creator> creators;
    internal static SvgElementFactory Instance;
    private static SvgElementFactory();
    public sealed virtual SvgElement Create(Document document, string localName, string prefix, NodeFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class AngleSharp.Text.CharArrayTextSource : object {
    private int _index;
    [NullableAttribute("2")]
private string _content;
    private Char[] _array;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<char> _memory;
    private int _length;
    public string Text { get; }
    public char Item { get; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    public int Index { get; public set; }
    public CharArrayTextSource(Char[] array, int length);
    public sealed virtual string get_Text();
    public sealed virtual char get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual Encoding get_CurrentEncoding();
    public sealed virtual void set_CurrentEncoding(Encoding value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
    public sealed virtual void Dispose();
    public sealed virtual char ReadCharacter();
    public sealed virtual string ReadCharacters(int characters);
    public sealed virtual StringOrMemory ReadMemory(int characters);
    public sealed virtual Task PrefetchAsync(int length, CancellationToken cancellationToken);
    public sealed virtual Task PrefetchAllAsync(CancellationToken cancellationToken);
    public sealed virtual bool TryGetContentLength(Int32& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Text.CharExtensions : object {
    [ExtensionAttribute]
public static int FromHex(char c);
    [ExtensionAttribute]
public static string ToHex(byte num);
    [ExtensionAttribute]
public static string ToHex(char character);
    [ExtensionAttribute]
public static bool IsInRange(char c, int lower, int upper);
    [ExtensionAttribute]
public static bool IsNormalQueryCharacter(char c);
    [ExtensionAttribute]
public static bool IsNormalPathCharacter(char c);
    [ExtensionAttribute]
public static bool IsUppercaseAscii(char c);
    [ExtensionAttribute]
public static bool IsLowercaseAscii(char c);
    [ExtensionAttribute]
public static bool IsAlphanumericAscii(char c);
    [ExtensionAttribute]
public static bool IsHex(char c);
    [ExtensionAttribute]
public static bool IsNonAscii(char c);
    [ExtensionAttribute]
public static bool IsNonPrintable(char c);
    [ExtensionAttribute]
public static bool IsLetter(char c);
    [ExtensionAttribute]
public static bool IsName(char c);
    [ExtensionAttribute]
public static bool IsCustomElementName(char c);
    [ExtensionAttribute]
public static bool IsNameStart(char c);
    [ExtensionAttribute]
public static bool IsLineBreak(char c);
    [ExtensionAttribute]
public static bool IsSpaceCharacter(char c);
    [ExtensionAttribute]
public static bool IsWhiteSpaceCharacter(char c);
    [ExtensionAttribute]
public static bool IsDigit(char c);
    [ExtensionAttribute]
public static bool IsUrlCodePoint(char c);
    [ExtensionAttribute]
public static bool IsInvalid(int c);
}
[DefaultMemberAttribute("Item")]
public interface AngleSharp.Text.IReadOnlyTextSource {
    public string Text { get; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    public int Index { get; public set; }
    public char Item { get; }
    public abstract virtual string get_Text();
    public abstract virtual int get_Length();
    public abstract virtual Encoding get_CurrentEncoding();
    public abstract virtual void set_CurrentEncoding(Encoding value);
    public abstract virtual int get_Index();
    public abstract virtual void set_Index(int value);
    public abstract virtual char get_Item(int index);
    public abstract virtual char ReadCharacter();
    public abstract virtual string ReadCharacters(int characters);
    public abstract virtual StringOrMemory ReadMemory(int characters);
    public abstract virtual Task PrefetchAsync(int length, CancellationToken cancellationToken);
    public abstract virtual Task PrefetchAllAsync(CancellationToken cancellationToken);
    public abstract virtual bool TryGetContentLength(Int32& length);
}
public interface AngleSharp.Text.ITextSource {
    public abstract virtual void InsertText(string content);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AngleSharp.Text.Punycode : object {
    private static int PunycodeBase;
    private static int Tmin;
    private static int Tmax;
    private static string acePrefix;
    private static Char[] possibleDots;
    public static IDictionary`2<char, char> Symbols;
    private static Punycode();
    public static string Encode(string text);
    private static bool IsSupplementary(int test);
    private static bool IsDot(char c);
    private static char EncodeDigit(int digit);
    private static char EncodeBasic(char character);
    private static int AdaptChar(int delta, int numPoints, bool firstTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class AngleSharp.Text.ReadOnlyMemoryTextSource : object {
    private int _index;
    [NullableAttribute("2")]
private string _content;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<char> _memory;
    private int _length;
    public string Text { get; }
    public char Item { get; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    public int Index { get; public set; }
    [NullableContextAttribute("0")]
public ReadOnlyMemoryTextSource(ReadOnlyMemory`1<char> memory);
    public ReadOnlyMemoryTextSource(string str);
    public sealed virtual string get_Text();
    public sealed virtual char get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual Encoding get_CurrentEncoding();
    public sealed virtual void set_CurrentEncoding(Encoding value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
    public sealed virtual void Dispose();
    public sealed virtual char ReadCharacter();
    public sealed virtual string ReadCharacters(int characters);
    public sealed virtual StringOrMemory ReadMemory(int characters);
    public sealed virtual Task PrefetchAsync(int length, CancellationToken cancellationToken);
    public sealed virtual Task PrefetchAllAsync(CancellationToken cancellationToken);
    public sealed virtual bool TryGetContentLength(Int32& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Text.StringBuilderPool : object {
    private static Stack`1<StringBuilder> _builder;
    private static object _lock;
    private static int _count;
    private static int _limit;
    public static int MaxCount { get; public set; }
    public static int SizeLimit { get; public set; }
    private static StringBuilderPool();
    public static int get_MaxCount();
    public static void set_MaxCount(int value);
    public static int get_SizeLimit();
    public static void set_SizeLimit(int value);
    public static StringBuilder Obtain();
    [ExtensionAttribute]
public static string ToPool(StringBuilder sb);
    [ExtensionAttribute]
internal static void ReturnToPool(StringBuilder sb);
    private static void DropMinimum(StringBuilder sb);
    private static void RebuildPool(StringBuilder sb, StringBuilder[] instances, int index);
    private static int FindIndex(StringBuilder[] instances, int minimum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Text.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Has(string value, char chr, int index);
    [ExtensionAttribute]
internal static string GetCompatiblity(QuirksMode mode);
    [ExtensionAttribute]
public static StringOrMemory HtmlLower(StringOrMemory value);
    [ExtensionAttribute]
public static string HtmlLower(string value);
    [ExtensionAttribute]
public static Sandboxes ParseSecuritySettings(string value, bool allowFullscreen);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T ToEnum(string value, T defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static double ToDouble(string value, double defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int ToInteger(string value, int defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static UInt32 ToInteger(string value, UInt32 defaultValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool ToBoolean(string value, bool defaultValue);
    [ExtensionAttribute]
public static string ReplaceFirst(string text, string search, string replace);
    [ExtensionAttribute]
public static string CollapseAndStrip(string str);
    [ExtensionAttribute]
public static string Collapse(string str);
    [ExtensionAttribute]
public static bool Contains(String[] list, string element, StringComparison comparison);
    [ExtensionAttribute]
public static bool IsCustomElement(string tag);
    [ExtensionAttribute]
public static bool IsCustomElement(StringOrMemory tag);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Is(string current, string other);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Is(string current, StringOrMemory other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Is(Span`1<char> current, string other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Is(ReadOnlySpan`1<char> current, ReadOnlyMemory`1<char> other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Is(ReadOnlySpan`1<char> current, ReadOnlySpan`1<char> other);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Isi(string current, string other);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Isi(string current, StringOrMemory other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Isi(Span`1<char> current, string other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Isi(Span`1<char> current, ReadOnlySpan`1<char> other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Isi(Span`1<char> current, ReadOnlyMemory`1<char> other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool Isi(ReadOnlySpan`1<char> current, string other);
    [ExtensionAttribute]
public static bool IsOneOf(string element, string item1, string item2);
    [ExtensionAttribute]
public static bool IsOneOf(string element, string item1, string item2, string item3);
    [ExtensionAttribute]
public static bool IsOneOf(string element, string item1, string item2, string item3, string item4);
    [ExtensionAttribute]
public static bool IsOneOf(string element, string item1, string item2, string item3, string item4, string item5);
    [ExtensionAttribute]
public static string StripLineBreaks(string str);
    [ExtensionAttribute]
public static string StripLeadingTrailingSpaces(string str);
    [ExtensionAttribute]
public static String[] SplitWithoutTrimming(string str, char c);
    [ExtensionAttribute]
public static String[] SplitCommas(string str);
    [ExtensionAttribute]
public static bool HasHyphen(string str, string value, StringComparison comparison);
    [ExtensionAttribute]
public static String[] SplitSpaces(string str);
    [ExtensionAttribute]
public static String[] SplitWithTrimming(string str, char ch);
    [ExtensionAttribute]
public static int FromHex(string s);
    [ExtensionAttribute]
public static int FromDec(string s);
    [ExtensionAttribute]
public static string HtmlEncode(string value, Encoding encoding);
    [ExtensionAttribute]
public static string CssString(string value);
    [ExtensionAttribute]
public static string CssFunction(string value, string argument);
    [ExtensionAttribute]
public static string UrlEncode(Byte[] content);
    [ExtensionAttribute]
public static Byte[] UrlDecode(string value);
    [ExtensionAttribute]
public static string NormalizeLineEndings(string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToEncodingType(string encType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToFormMethod(string method);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static string <HtmlLower>g__Slow|2_0(StringOrMemory value, int i, Span`1<char> result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Text.StringSource : object {
    private string _content;
    private int _last;
    private int _index;
    private char _current;
    public char Current { get; }
    public bool IsDone { get; }
    public int Index { get; }
    public string Content { get; }
    public StringSource(string content);
    public char get_Current();
    public bool get_IsDone();
    public int get_Index();
    public string get_Content();
    public char Next();
    public char Back();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Text.StringSourceExtensions : object {
    [ExtensionAttribute]
public static char SkipSpaces(StringSource source);
    [ExtensionAttribute]
public static char Next(StringSource source, int n);
    [ExtensionAttribute]
public static char Back(StringSource source, int n);
    [ExtensionAttribute]
public static char Peek(StringSource source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class AngleSharp.Text.StringTextSource : object {
    private string _string;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<char> _memory;
    private int _length;
    private int _index;
    public string Text { get; }
    public char Item { get; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    public int Index { get; public set; }
    public StringTextSource(string source);
    public sealed virtual string get_Text();
    public sealed virtual char get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual Encoding get_CurrentEncoding();
    public sealed virtual void set_CurrentEncoding(Encoding value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
    public sealed virtual void Dispose();
    public sealed virtual char ReadCharacter();
    public sealed virtual string ReadCharacters(int characters);
    public sealed virtual StringOrMemory ReadMemory(int characters);
    public sealed virtual Task PrefetchAsync(int length, CancellationToken cancellationToken);
    public sealed virtual Task PrefetchAllAsync(CancellationToken cancellationToken);
    public sealed virtual bool TryGetContentLength(Int32& length);
}
public static class AngleSharp.Text.Symbols : object {
    public static char EndOfFile;
    public static char Tilde;
    public static char Pipe;
    public static char Null;
    public static char Ampersand;
    public static char Num;
    public static char Dollar;
    public static char Semicolon;
    public static char Asterisk;
    public static char Equality;
    public static char Plus;
    public static char Minus;
    public static char Comma;
    public static char Dot;
    public static char Accent;
    public static char At;
    public static char LessThan;
    public static char GreaterThan;
    public static char SingleQuote;
    public static char DoubleQuote;
    public static char CurvedQuote;
    public static char QuestionMark;
    public static char Tab;
    public static char LineFeed;
    public static char CarriageReturn;
    public static char FormFeed;
    public static char Space;
    public static char Solidus;
    public static char NoBreakSpace;
    public static char ReverseSolidus;
    public static char Colon;
    public static char ExclamationMark;
    public static char Replacement;
    public static char Underscore;
    public static char RoundBracketOpen;
    public static char RoundBracketClose;
    public static char SquareBracketOpen;
    public static char SquareBracketClose;
    public static char CurlyBracketOpen;
    public static char CurlyBracketClose;
    public static char Percent;
    public static int MaximumCodepoint;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Text.TextEncoding : object {
    public static Encoding Utf8;
    public static Encoding Utf16Be;
    public static Encoding Utf16Le;
    public static Encoding Utf32Le;
    public static Encoding Utf32Be;
    public static Encoding Gb18030;
    public static Encoding Big5;
    public static Encoding Windows874;
    public static Encoding Windows1250;
    public static Encoding Windows1251;
    public static Encoding Windows1252;
    public static Encoding Windows1253;
    public static Encoding Windows1254;
    public static Encoding Windows1255;
    public static Encoding Windows1256;
    public static Encoding Windows1257;
    public static Encoding Windows1258;
    public static Encoding Latin2;
    public static Encoding Latin3;
    public static Encoding Latin4;
    public static Encoding Latin5;
    public static Encoding Latin13;
    public static Encoding UsAscii;
    public static Encoding Korean;
    private static Dictionary`2<string, Encoding> encodings;
    private static TextEncoding();
    [ExtensionAttribute]
public static bool IsUnicode(Encoding encoding);
    public static Encoding Parse(string content);
    public static bool IsSupported(string charset);
    public static Encoding Resolve(string charset);
    private static Encoding GetEncoding(string name, Encoding fallback);
    private static Dictionary`2<string, Encoding> CreateEncodings();
}
[IsReadOnlyAttribute]
public class AngleSharp.Text.TextPosition : ValueType {
    public static TextPosition Empty;
    private ushort _line;
    private ushort _column;
    private int _position;
    public int Line { get; }
    public int Column { get; }
    public int Position { get; }
    public int Index { get; }
    public TextPosition(ushort line, ushort column, int position);
    private static TextPosition();
    public int get_Line();
    public int get_Column();
    public int get_Position();
    public int get_Index();
    public TextPosition Shift(int columns);
    public TextPosition After(char chr);
    [NullableContextAttribute("1")]
public TextPosition After(string str);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TextPosition other);
    public static bool op_GreaterThan(TextPosition a, TextPosition b);
    public static bool op_LessThan(TextPosition a, TextPosition b);
    public sealed virtual int CompareTo(TextPosition other);
}
[IsReadOnlyAttribute]
[DebuggerStepThroughAttribute]
public class AngleSharp.Text.TextRange : ValueType {
    private TextPosition _start;
    private TextPosition _end;
    public TextPosition Start { get; }
    public TextPosition End { get; }
    public TextRange(TextPosition start, TextPosition end);
    public TextPosition get_Start();
    public TextPosition get_End();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TextRange other);
    public static bool op_GreaterThan(TextRange a, TextRange b);
    public static bool op_LessThan(TextRange a, TextRange b);
    public sealed virtual int CompareTo(TextRange other);
}
[DefaultMemberAttribute("Item")]
public class AngleSharp.Text.TextSource : object {
    private WritableTextSource _writableSource;
    private IReadOnlyTextSource _readOnlyTextSource;
    public string Text { get; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    public int Index { get; public set; }
    public char Item { get; }
    public TextSource(string source);
    public TextSource(Stream baseStream, Encoding encoding);
    public TextSource(ReadOnlyMemoryTextSource source);
    public TextSource(CharArrayTextSource source);
    public TextSource(StringTextSource source);
    public sealed virtual string get_Text();
    public sealed virtual int get_Length();
    public sealed virtual Encoding get_CurrentEncoding();
    public sealed virtual void set_CurrentEncoding(Encoding value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
    public sealed virtual char get_Item(int index);
    public sealed virtual char ReadCharacter();
    public sealed virtual string ReadCharacters(int characters);
    public sealed virtual StringOrMemory ReadMemory(int characters);
    public sealed virtual Task PrefetchAsync(int length, CancellationToken cancellationToken);
    public sealed virtual Task PrefetchAllAsync(CancellationToken cancellationToken);
    public sealed virtual bool TryGetContentLength(Int32& length);
    public sealed virtual void InsertText(string content);
    public sealed virtual void Dispose();
    public IReadOnlyTextSource GetUnderlyingTextSource();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Text.TextView : object {
    private TextSource _source;
    private TextRange _range;
    public TextRange Range { get; }
    public string Text { get; }
    public TextView(TextSource source, TextRange range);
    public TextRange get_Range();
    public string get_Text();
}
[DefaultMemberAttribute("Item")]
internal class AngleSharp.Text.WritableTextSource : object {
    private static int BufferSize;
    private Stream _baseStream;
    private MemoryStream _raw;
    private Byte[] _buffer;
    private Char[] _chars;
    private StringBuilder _content;
    private EncodingConfidence _confidence;
    private bool _finished;
    private Encoding _encoding;
    private Decoder _decoder;
    private int _index;
    [MemberNotNullAttribute("_content")]
public string Text { get; }
    public char Item { get; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    public int Index { get; public set; }
    private WritableTextSource(Encoding encoding, bool allocateBuffers);
    public WritableTextSource(string source);
    public WritableTextSource(Stream baseStream, Encoding encoding);
    [MemberNotNullAttribute("_content")]
public sealed virtual string get_Text();
    public sealed virtual char get_Item(int index);
    public sealed virtual int get_Length();
    public sealed virtual Encoding get_CurrentEncoding();
    public sealed virtual void set_CurrentEncoding(Encoding value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
    public sealed virtual void Dispose();
    public sealed virtual char ReadCharacter();
    public sealed virtual string ReadCharacters(int characters);
    public sealed virtual StringOrMemory ReadMemory(int characters);
    public sealed virtual Task PrefetchAsync(int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AngleSharp.Text.WritableTextSource/<PrefetchAllAsync>d__31")]
public sealed virtual Task PrefetchAllAsync(CancellationToken cancellationToken);
    public sealed virtual bool TryGetContentLength(Int32& length);
    public sealed virtual void InsertText(string content);
    private static char Replace(char c);
    [AsyncStateMachineAttribute("AngleSharp.Text.WritableTextSource/<DetectByteOrderMarkAsync>d__35")]
private Task DetectByteOrderMarkAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AngleSharp.Text.WritableTextSource/<ExpandBufferAsync>d__36")]
private Task ExpandBufferAsync(long size, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("AngleSharp.Text.WritableTextSource/<ReadIntoBufferAsync>d__37")]
private Task ReadIntoBufferAsync(CancellationToken cancellationToken);
    private void ExpandBuffer(long size);
    private void ReadIntoBuffer();
    private void AppendContentFromBuffer(int size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AngleSharp.Text.XmlExtensions : object {
    [ExtensionAttribute]
public static bool IsPubidChar(char c);
    [ExtensionAttribute]
public static bool IsXmlNameStart(char c);
    [ExtensionAttribute]
public static bool IsXmlName(char c);
    [ExtensionAttribute]
public static bool IsXmlName(string str);
    [ExtensionAttribute]
public static bool IsXmlName(StringOrMemory str);
    [ExtensionAttribute]
public static bool IsQualifiedName(string str);
    [ExtensionAttribute]
public static bool IsQualifiedName(StringOrMemory str);
    [ExtensionAttribute]
public static bool IsXmlChar(char chr);
    [ExtensionAttribute]
public static bool IsValidAsCharRef(int chr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AngleSharp.Xhtml.XhtmlMarkupFormatter : object {
    public static IMarkupFormatter Instance;
    private bool _emptyTagsToSelfClosing;
    public bool IsSelfClosingEmptyTags { get; }
    public XhtmlMarkupFormatter(bool emptyTagsToSelfClosing);
    private static XhtmlMarkupFormatter();
    public bool get_IsSelfClosingEmptyTags();
    public virtual string CloseTag(IElement element, bool selfClosing);
    public virtual string Comment(IComment comment);
    public virtual string Doctype(IDocumentType doctype);
    public virtual string OpenTag(IElement element, bool selfClosing);
    public virtual string Processing(IProcessingInstruction processing);
    public virtual string LiteralText(ICharacterData text);
    public virtual string Text(ICharacterData text);
    protected virtual string Attribute(IAttr attribute);
    public static string EscapeText(string content);
    public static string XmlNamespaceLocalName(string localName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
