[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`10 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private TFifth _fifth;
    private TSixth _sixth;
    private TSeventh _seventh;
    private TEighth _eighth;
    private TNinth _ninth;
    private TTenth _tenth;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public bool IsFifth { get; }
    public bool IsSixth { get; }
    public bool IsSeventh { get; }
    public bool IsEighth { get; }
    public bool IsNinth { get; }
    public bool IsTenth { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public TFifth Fifth { get; }
    public TSixth Sixth { get; }
    public TSeventh Seventh { get; }
    public TEighth Eighth { get; }
    public TNinth Ninth { get; }
    public TTenth Tenth { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`10(TFirst value);
    public AnyOf`10(TSecond value);
    public AnyOf`10(TThird value);
    public AnyOf`10(TFourth value);
    public AnyOf`10(TFifth value);
    public AnyOf`10(TSixth value);
    public AnyOf`10(TSeventh value);
    public AnyOf`10(TEighth value);
    public AnyOf`10(TNinth value);
    public AnyOf`10(TTenth value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public bool get_IsFifth();
    public bool get_IsSixth();
    public bool get_IsSeventh();
    public bool get_IsEighth();
    public bool get_IsNinth();
    public bool get_IsTenth();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TFirst get_First();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TSecond get_Second();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TThird get_Third();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TFourth get_Fourth();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TFifth value);
    public static TFifth op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TFifth get_Fifth();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TSixth value);
    public static TSixth op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TSixth get_Sixth();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TSeventh value);
    public static TSeventh op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TSeventh get_Seventh();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TEighth value);
    public static TEighth op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TEighth get_Eighth();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TNinth value);
    public static TNinth op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TNinth get_Ninth();
    public static AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> op_Implicit(TTenth value);
    public static TTenth op_Implicit(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> this);
    public TTenth get_Tenth();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> other);
    public static bool op_Equality(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> obj1, AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> obj2);
    public static bool op_Inequality(AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> obj1, AnyOf`10<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth, TTenth> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`2 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`2(TFirst value);
    public AnyOf`2(TSecond value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public static AnyOf`2<TFirst, TSecond> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`2<TFirst, TSecond> this);
    public TFirst get_First();
    public static AnyOf`2<TFirst, TSecond> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`2<TFirst, TSecond> this);
    public TSecond get_Second();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`2<TFirst, TSecond> other);
    public static bool op_Equality(AnyOf`2<TFirst, TSecond> obj1, AnyOf`2<TFirst, TSecond> obj2);
    public static bool op_Inequality(AnyOf`2<TFirst, TSecond> obj1, AnyOf`2<TFirst, TSecond> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`3 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`3(TFirst value);
    public AnyOf`3(TSecond value);
    public AnyOf`3(TThird value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public static AnyOf`3<TFirst, TSecond, TThird> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`3<TFirst, TSecond, TThird> this);
    public TFirst get_First();
    public static AnyOf`3<TFirst, TSecond, TThird> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`3<TFirst, TSecond, TThird> this);
    public TSecond get_Second();
    public static AnyOf`3<TFirst, TSecond, TThird> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`3<TFirst, TSecond, TThird> this);
    public TThird get_Third();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`3<TFirst, TSecond, TThird> other);
    public static bool op_Equality(AnyOf`3<TFirst, TSecond, TThird> obj1, AnyOf`3<TFirst, TSecond, TThird> obj2);
    public static bool op_Inequality(AnyOf`3<TFirst, TSecond, TThird> obj1, AnyOf`3<TFirst, TSecond, TThird> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`4 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`4(TFirst value);
    public AnyOf`4(TSecond value);
    public AnyOf`4(TThird value);
    public AnyOf`4(TFourth value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public static AnyOf`4<TFirst, TSecond, TThird, TFourth> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`4<TFirst, TSecond, TThird, TFourth> this);
    public TFirst get_First();
    public static AnyOf`4<TFirst, TSecond, TThird, TFourth> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`4<TFirst, TSecond, TThird, TFourth> this);
    public TSecond get_Second();
    public static AnyOf`4<TFirst, TSecond, TThird, TFourth> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`4<TFirst, TSecond, TThird, TFourth> this);
    public TThird get_Third();
    public static AnyOf`4<TFirst, TSecond, TThird, TFourth> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`4<TFirst, TSecond, TThird, TFourth> this);
    public TFourth get_Fourth();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`4<TFirst, TSecond, TThird, TFourth> other);
    public static bool op_Equality(AnyOf`4<TFirst, TSecond, TThird, TFourth> obj1, AnyOf`4<TFirst, TSecond, TThird, TFourth> obj2);
    public static bool op_Inequality(AnyOf`4<TFirst, TSecond, TThird, TFourth> obj1, AnyOf`4<TFirst, TSecond, TThird, TFourth> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`5 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private TFifth _fifth;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public bool IsFifth { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public TFifth Fifth { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`5(TFirst value);
    public AnyOf`5(TSecond value);
    public AnyOf`5(TThird value);
    public AnyOf`5(TFourth value);
    public AnyOf`5(TFifth value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public bool get_IsFifth();
    public static AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> this);
    public TFirst get_First();
    public static AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> this);
    public TSecond get_Second();
    public static AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> this);
    public TThird get_Third();
    public static AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> this);
    public TFourth get_Fourth();
    public static AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> op_Implicit(TFifth value);
    public static TFifth op_Implicit(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> this);
    public TFifth get_Fifth();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> other);
    public static bool op_Equality(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> obj1, AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> obj2);
    public static bool op_Inequality(AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> obj1, AnyOf`5<TFirst, TSecond, TThird, TFourth, TFifth> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`6 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private TFifth _fifth;
    private TSixth _sixth;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public bool IsFifth { get; }
    public bool IsSixth { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public TFifth Fifth { get; }
    public TSixth Sixth { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`6(TFirst value);
    public AnyOf`6(TSecond value);
    public AnyOf`6(TThird value);
    public AnyOf`6(TFourth value);
    public AnyOf`6(TFifth value);
    public AnyOf`6(TSixth value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public bool get_IsFifth();
    public bool get_IsSixth();
    public static AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> this);
    public TFirst get_First();
    public static AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> this);
    public TSecond get_Second();
    public static AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> this);
    public TThird get_Third();
    public static AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> this);
    public TFourth get_Fourth();
    public static AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> op_Implicit(TFifth value);
    public static TFifth op_Implicit(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> this);
    public TFifth get_Fifth();
    public static AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> op_Implicit(TSixth value);
    public static TSixth op_Implicit(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> this);
    public TSixth get_Sixth();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> other);
    public static bool op_Equality(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> obj1, AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> obj2);
    public static bool op_Inequality(AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> obj1, AnyOf`6<TFirst, TSecond, TThird, TFourth, TFifth, TSixth> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`7 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private TFifth _fifth;
    private TSixth _sixth;
    private TSeventh _seventh;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public bool IsFifth { get; }
    public bool IsSixth { get; }
    public bool IsSeventh { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public TFifth Fifth { get; }
    public TSixth Sixth { get; }
    public TSeventh Seventh { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`7(TFirst value);
    public AnyOf`7(TSecond value);
    public AnyOf`7(TThird value);
    public AnyOf`7(TFourth value);
    public AnyOf`7(TFifth value);
    public AnyOf`7(TSixth value);
    public AnyOf`7(TSeventh value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public bool get_IsFifth();
    public bool get_IsSixth();
    public bool get_IsSeventh();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TFirst get_First();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TSecond get_Second();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TThird get_Third();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TFourth get_Fourth();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TFifth value);
    public static TFifth op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TFifth get_Fifth();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TSixth value);
    public static TSixth op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TSixth get_Sixth();
    public static AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> op_Implicit(TSeventh value);
    public static TSeventh op_Implicit(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> this);
    public TSeventh get_Seventh();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> other);
    public static bool op_Equality(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> obj1, AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> obj2);
    public static bool op_Inequality(AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> obj1, AnyOf`7<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`8 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private TFifth _fifth;
    private TSixth _sixth;
    private TSeventh _seventh;
    private TEighth _eighth;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public bool IsFifth { get; }
    public bool IsSixth { get; }
    public bool IsSeventh { get; }
    public bool IsEighth { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public TFifth Fifth { get; }
    public TSixth Sixth { get; }
    public TSeventh Seventh { get; }
    public TEighth Eighth { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`8(TFirst value);
    public AnyOf`8(TSecond value);
    public AnyOf`8(TThird value);
    public AnyOf`8(TFourth value);
    public AnyOf`8(TFifth value);
    public AnyOf`8(TSixth value);
    public AnyOf`8(TSeventh value);
    public AnyOf`8(TEighth value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public bool get_IsFifth();
    public bool get_IsSixth();
    public bool get_IsSeventh();
    public bool get_IsEighth();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TFirst get_First();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TSecond get_Second();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TThird get_Third();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TFourth get_Fourth();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TFifth value);
    public static TFifth op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TFifth get_Fifth();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TSixth value);
    public static TSixth op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TSixth get_Sixth();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TSeventh value);
    public static TSeventh op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TSeventh get_Seventh();
    public static AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> op_Implicit(TEighth value);
    public static TEighth op_Implicit(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> this);
    public TEighth get_Eighth();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> other);
    public static bool op_Equality(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> obj1, AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> obj2);
    public static bool op_Inequality(AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> obj1, AnyOf`8<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{_thisType}, AnyOfType = {_currentType}; Type = {_currentValueType?.Name}; Value = '{ToString()}'")]
public class AnyOfTypes.AnyOf`9 : ValueType {
    private int _numberOfTypes;
    private object _currentValue;
    private Type _currentValueType;
    private AnyOfType _currentType;
    private TFirst _first;
    private TSecond _second;
    private TThird _third;
    private TFourth _fourth;
    private TFifth _fifth;
    private TSixth _sixth;
    private TSeventh _seventh;
    private TEighth _eighth;
    private TNinth _ninth;
    private string _thisType { get; }
    public AnyOfType[] AnyOfTypes { get; }
    public Type[] Types { get; }
    public bool IsUndefined { get; }
    public bool IsFirst { get; }
    public bool IsSecond { get; }
    public bool IsThird { get; }
    public bool IsFourth { get; }
    public bool IsFifth { get; }
    public bool IsSixth { get; }
    public bool IsSeventh { get; }
    public bool IsEighth { get; }
    public bool IsNinth { get; }
    public TFirst First { get; }
    public TSecond Second { get; }
    public TThird Third { get; }
    public TFourth Fourth { get; }
    public TFifth Fifth { get; }
    public TSixth Sixth { get; }
    public TSeventh Seventh { get; }
    public TEighth Eighth { get; }
    public TNinth Ninth { get; }
    public AnyOfType CurrentType { get; }
    public object CurrentValue { get; }
    public Type CurrentValueType { get; }
    public AnyOf`9(TFirst value);
    public AnyOf`9(TSecond value);
    public AnyOf`9(TThird value);
    public AnyOf`9(TFourth value);
    public AnyOf`9(TFifth value);
    public AnyOf`9(TSixth value);
    public AnyOf`9(TSeventh value);
    public AnyOf`9(TEighth value);
    public AnyOf`9(TNinth value);
    [IsReadOnlyAttribute]
private string get__thisType();
    [IsReadOnlyAttribute]
public AnyOfType[] get_AnyOfTypes();
    [IsReadOnlyAttribute]
public Type[] get_Types();
    public bool get_IsUndefined();
    public bool get_IsFirst();
    public bool get_IsSecond();
    public bool get_IsThird();
    public bool get_IsFourth();
    public bool get_IsFifth();
    public bool get_IsSixth();
    public bool get_IsSeventh();
    public bool get_IsEighth();
    public bool get_IsNinth();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TFirst value);
    public static TFirst op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TFirst get_First();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TSecond value);
    public static TSecond op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TSecond get_Second();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TThird value);
    public static TThird op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TThird get_Third();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TFourth value);
    public static TFourth op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TFourth get_Fourth();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TFifth value);
    public static TFifth op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TFifth get_Fifth();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TSixth value);
    public static TSixth op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TSixth get_Sixth();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TSeventh value);
    public static TSeventh op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TSeventh get_Seventh();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TEighth value);
    public static TEighth op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TEighth get_Eighth();
    public static AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> op_Implicit(TNinth value);
    public static TNinth op_Implicit(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> this);
    public TNinth get_Ninth();
    private void Validate(AnyOfType desiredType);
    public AnyOfType get_CurrentType();
    public object get_CurrentValue();
    public Type get_CurrentValueType();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> other);
    public static bool op_Equality(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> obj1, AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> obj2);
    public static bool op_Inequality(AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> obj1, AnyOf`9<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TEighth, TNinth> obj2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class AnyOfTypes.AnyOfConverter`2 : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum AnyOfTypes.AnyOfType : Enum {
    public int value__;
    public static AnyOfType Undefined;
    public static AnyOfType First;
    public static AnyOfType Second;
    public static AnyOfType Third;
    public static AnyOfType Fourth;
    public static AnyOfType Fifth;
    public static AnyOfType Sixth;
    public static AnyOfType Seventh;
    public static AnyOfType Eighth;
    public static AnyOfType Ninth;
    public static AnyOfType Tenth;
}
internal static class AnyOfTypes.HashCodeCalculator : object {
    public static int GetHashCode(IEnumerable`1<object> hashFieldValues);
    [CompilerGeneratedAttribute]
internal static int <GetHashCode>g__HashCodeAggregator|0_0(int hashCode, object value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
