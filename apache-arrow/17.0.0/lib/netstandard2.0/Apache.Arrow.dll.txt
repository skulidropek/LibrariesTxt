public abstract class Apache.Arrow.Array : object {
    [CompilerGeneratedAttribute]
private ArrayData <Data>k__BackingField;
    public ArrayData Data { get; }
    public int Length { get; }
    public int Offset { get; }
    public int NullCount { get; }
    public ArrowBuffer NullBitmapBuffer { get; }
    protected Array(ArrayData data);
    [CompilerGeneratedAttribute]
public sealed virtual ArrayData get_Data();
    public sealed virtual int get_Length();
    public sealed virtual int get_Offset();
    public sealed virtual int get_NullCount();
    public ArrowBuffer get_NullBitmapBuffer();
    public virtual void Accept(IArrowArrayVisitor visitor);
    public sealed virtual bool IsValid(int index);
    public sealed virtual bool IsNull(int index);
    internal static void Accept(T array, IArrowArrayVisitor visitor);
    public Array Slice(int offset, int length);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Apache.Arrow.ArrayData : object {
    private static int RecalculateNullCount;
    public IArrowType DataType;
    public int Length;
    public int NullCount;
    public int Offset;
    public ArrowBuffer[] Buffers;
    public ArrayData[] Children;
    public ArrayData Dictionary;
    public ArrayData(IArrowType dataType, int length, int nullCount, int offset, IEnumerable`1<ArrowBuffer> buffers, IEnumerable`1<ArrayData> children);
    public ArrayData(IArrowType dataType, int length, int nullCount, int offset, ArrowBuffer[] buffers, ArrayData[] children);
    public ArrayData(IArrowType dataType, int length, int nullCount, int offset, IEnumerable`1<ArrowBuffer> buffers, IEnumerable`1<ArrayData> children, ArrayData dictionary);
    public ArrayData(IArrowType dataType, int length, int nullCount, int offset, ArrowBuffer[] buffers, ArrayData[] children, ArrayData dictionary);
    public int GetNullCount();
    public sealed virtual void Dispose();
    public ArrayData Slice(int offset, int length);
    public ArrayData Clone(MemoryAllocator allocator);
    private int ComputeNullCount();
}
public class Apache.Arrow.ArrayDataConcatenator : object {
    public static ArrayData Concatenate(IReadOnlyList`1<ArrayData> arrayDataList, MemoryAllocator allocator);
}
[ExtensionAttribute]
internal static class Apache.Arrow.ArrayDataExtensions : object {
    [ExtensionAttribute]
public static void EnsureBufferCount(ArrayData data, int count);
    [ExtensionAttribute]
public static void EnsureVariadicBufferCount(ArrayData data, int count);
    [ExtensionAttribute]
public static void EnsureDataType(ArrayData data, ArrowTypeId id);
}
internal class Apache.Arrow.ArrayDataTypeComparer : object {
    private IArrowType _expectedType;
    private bool _dataTypeMatch;
    public bool DataTypeMatch { get; }
    public ArrayDataTypeComparer(IArrowType expectedType);
    public bool get_DataTypeMatch();
    public sealed virtual void Visit(TimestampType actualType);
    public sealed virtual void Visit(Date32Type actualType);
    public sealed virtual void Visit(Date64Type actualType);
    public sealed virtual void Visit(TimeBasedType actualType);
    public sealed virtual void Visit(FixedSizeBinaryType actualType);
    public sealed virtual void Visit(ListType actualType);
    public sealed virtual void Visit(FixedSizeListType actualType);
    public sealed virtual void Visit(StructType actualType);
    public sealed virtual void Visit(UnionType actualType);
    public sealed virtual void Visit(MapType actualType);
    public sealed virtual void Visit(IntervalType actualType);
    private static bool CompareNested(NestedType expectedType, NestedType actualType);
    public sealed virtual void Visit(IArrowType actualType);
}
[ExtensionAttribute]
internal static class Apache.Arrow.ArrayPoolExtensions : object {
    [ExtensionAttribute]
public static ArrayLease RentReturn(ArrayPool`1<byte> pool, int length, Memory`1& buffer);
}
public class Apache.Arrow.Arrays.FixedSizeBinaryArray : Array {
    public ArrowBuffer ValueBuffer { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Byte[]>.Count { get; }
    private Byte[] System.Collections.Generic.IReadOnlyList<System.Byte[]>.Item { get; }
    public FixedSizeBinaryArray(ArrayData data);
    public FixedSizeBinaryArray(ArrowTypeId typeId, ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public ArrowBuffer get_ValueBuffer();
    public ReadOnlySpan`1<byte> GetBytes(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Byte[]>.get_Count();
    private sealed virtual override Byte[] System.Collections.Generic.IReadOnlyList<System.Byte[]>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.Arrays.FixedSizeBinaryArray/<System-Collections-Generic-IEnumerable<System-Byte[]>-GetEnumerator>d__10")]
private sealed virtual override IEnumerator`1<Byte[]> System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Apache.Arrow.ArrowArrayBuilderFactory : object {
    internal static IArrowArrayBuilder`2<IArrowArray, IArrowArrayBuilder`1<IArrowArray>> Build(IArrowType dataType);
}
public static class Apache.Arrow.ArrowArrayConcatenator : object {
    public static IArrowArray Concatenate(IReadOnlyList`1<IArrowArray> arrowArrayList, MemoryAllocator allocator);
}
public static class Apache.Arrow.ArrowArrayFactory : object {
    public static IArrowArray BuildArray(ArrayData data);
    public static IArrowArray Slice(IArrowArray array, int offset, int length);
}
public abstract class Apache.Arrow.ArrowArrayVisitor : object {
    public virtual void Visit(IArrowArray array);
}
[IsReadOnlyAttribute]
public class Apache.Arrow.ArrowBuffer : ValueType {
    private IMemoryOwner`1<byte> _memoryOwner;
    private ReadOnlyMemory`1<byte> _memory;
    public static ArrowBuffer Empty { get; }
    public ReadOnlyMemory`1<byte> Memory { get; }
    public bool IsEmpty { get; }
    public int Length { get; }
    public ReadOnlySpan`1<byte> Span { get; }
    public ArrowBuffer(ReadOnlyMemory`1<byte> data);
    internal ArrowBuffer(IMemoryOwner`1<byte> memoryOwner);
    public static ArrowBuffer get_Empty();
    public ReadOnlyMemory`1<byte> get_Memory();
    public bool get_IsEmpty();
    public int get_Length();
    public ReadOnlySpan`1<byte> get_Span();
    public ArrowBuffer Clone(MemoryAllocator allocator);
    public sealed virtual bool Equals(ArrowBuffer other);
    public sealed virtual void Dispose();
    internal bool TryExport(ExportedAllocationOwner newOwner, IntPtr& ptr);
}
[ExtensionAttribute]
public static class Apache.Arrow.ArrowTypeExtensions : object {
    private static ISet`1<ArrowTypeId> s_integralTypes;
    private static ISet`1<ArrowTypeId> s_floatingPointTypes;
    private static ArrowTypeExtensions();
    [ExtensionAttribute]
public static bool IsIntegral(IArrowType type);
    [ExtensionAttribute]
public static bool IsFloatingPoint(IArrowType type);
}
public class Apache.Arrow.BinaryArray : Array {
    public ArrowBuffer ValueOffsetsBuffer { get; }
    public ArrowBuffer ValueBuffer { get; }
    public ReadOnlySpan`1<int> ValueOffsets { get; }
    public ReadOnlySpan`1<byte> Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Byte[]>.Count { get; }
    private Byte[] System.Collections.Generic.IReadOnlyList<System.Byte[]>.Item { get; }
    private int System.Collections.Generic.ICollection<System.Byte[]>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Byte[]>.IsReadOnly { get; }
    public BinaryArray(ArrayData data);
    public BinaryArray(ArrowTypeId typeId, ArrayData data);
    public BinaryArray(IArrowType dataType, int length, ArrowBuffer valueOffsetsBuffer, ArrowBuffer dataBuffer, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public ArrowBuffer get_ValueOffsetsBuffer();
    public ArrowBuffer get_ValueBuffer();
    public ReadOnlySpan`1<int> get_ValueOffsets();
    public ReadOnlySpan`1<byte> get_Values();
    [ObsoleteAttribute("This method has been deprecated. Please use ValueOffsets[index] instead.")]
public int GetValueOffset(int index);
    public int GetValueLength(int index);
    public ReadOnlySpan`1<byte> GetBytes(int index);
    public ReadOnlySpan`1<byte> GetBytes(int index, Boolean& isNull);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Byte[]>.get_Count();
    private sealed virtual override Byte[] System.Collections.Generic.IReadOnlyList<System.Byte[]>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.BinaryArray/<System-Collections-Generic-IEnumerable<System-Byte[]>-GetEnumerator>d__22")]
private sealed virtual override IEnumerator`1<Byte[]> System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Byte[]>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Byte[]>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Byte[]>.Add(Byte[] item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Byte[]>.Remove(Byte[] item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Byte[]>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Byte[]>.Contains(Byte[] item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Byte[]>.CopyTo(Byte[][] array, int arrayIndex);
}
public class Apache.Arrow.BinaryViewArray : Array {
    public ArrowBuffer ViewsBuffer { get; }
    public int DataBufferCount { get; }
    public ReadOnlySpan`1<BinaryView> Views { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Byte[]>.Count { get; }
    private Byte[] System.Collections.Generic.IReadOnlyList<System.Byte[]>.Item { get; }
    public BinaryViewArray(ArrayData data);
    public BinaryViewArray(ArrowTypeId typeId, ArrayData data);
    public BinaryViewArray(IArrowType dataType, int length, ArrowBuffer binaryViewsBuffer, ArrowBuffer dataBuffer, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public ArrowBuffer get_ViewsBuffer();
    public int get_DataBufferCount();
    public ArrowBuffer DataBuffer(int index);
    public ReadOnlySpan`1<BinaryView> get_Views();
    public int GetValueLength(int index);
    public ReadOnlySpan`1<byte> GetBytes(int index);
    public ReadOnlySpan`1<byte> GetBytes(int index, Boolean& isNull);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Byte[]>.get_Count();
    private sealed virtual override Byte[] System.Collections.Generic.IReadOnlyList<System.Byte[]>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.BinaryViewArray/<System-Collections-Generic-IEnumerable<System-Byte[]>-GetEnumerator>d__20")]
private sealed virtual override IEnumerator`1<Byte[]> System.Collections.Generic.IEnumerable<System.Byte[]>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class Apache.Arrow.BitUtility : object {
    private static ReadOnlySpan`1<byte> PopcountTable { get; }
    private static ReadOnlySpan`1<byte> BitMask { get; }
    private static ReadOnlySpan`1<byte> get_PopcountTable();
    private static ReadOnlySpan`1<byte> get_BitMask();
    public static bool GetBit(byte data, int index);
    public static bool GetBit(ReadOnlySpan`1<byte> data, int index);
    public static void ClearBit(Span`1<byte> data, int index);
    public static void SetBit(Span`1<byte> data, int index);
    public static void SetBit(Span`1<byte> data, int index, bool value);
    internal static void SetBits(Span`1<byte> data, int index, int length, bool value);
    public static void ToggleBit(Span`1<byte> data, int index);
    public static int CountBits(ReadOnlySpan`1<byte> data, int index);
    public static int CountBits(ReadOnlySpan`1<byte> data, int index, int length);
    public static int CountBits(ReadOnlySpan`1<byte> data);
    public static long RoundUpToMultipleOf64(long n);
    public static long RoundUpToMultipleOf8(long n);
    public static long RoundUpToMultiplePowerOfTwo(long n, int factor);
    internal static bool IsMultipleOf8(long n);
    public static int ByteCount(int n);
    internal static int ReadInt32(ReadOnlyMemory`1<byte> value);
}
public class Apache.Arrow.BooleanArray : Array {
    public ArrowBuffer ValueBuffer { get; }
    public ReadOnlySpan`1<byte> Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Boolean?>.Count { get; }
    private Nullable`1<bool> System.Collections.Generic.IReadOnlyList<System.Boolean?>.Item { get; }
    private int System.Collections.Generic.ICollection<System.Boolean?>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Boolean?>.IsReadOnly { get; }
    public BooleanArray(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public BooleanArray(ArrayData data);
    public ArrowBuffer get_ValueBuffer();
    public ReadOnlySpan`1<byte> get_Values();
    public virtual void Accept(IArrowArrayVisitor visitor);
    [ObsoleteAttribute("GetBoolean does not support null values. Use GetValue instead (which this method invokes internally).")]
public bool GetBoolean(int index);
    public Nullable`1<bool> GetValue(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Boolean?>.get_Count();
    private sealed virtual override Nullable`1<bool> System.Collections.Generic.IReadOnlyList<System.Boolean?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.BooleanArray/<System-Collections-Generic-IEnumerable<System-Boolean?>-GetEnumerator>d__14")]
private sealed virtual override IEnumerator`1<Nullable`1<bool>> System.Collections.Generic.IEnumerable<System.Boolean?>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Boolean?>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Boolean?>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Boolean?>.Add(Nullable`1<bool> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Boolean?>.Remove(Nullable`1<bool> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Boolean?>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Boolean?>.Contains(Nullable`1<bool> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Boolean?>.CopyTo(Nullable`1[] array, int arrayIndex);
}
public class Apache.Arrow.C.CArrowArray : ValueType {
    public long length;
    public long null_count;
    public long offset;
    public long n_buffers;
    public long n_children;
    public Byte** buffers;
    public CArrowArray** children;
    public CArrowArray* dictionary;
    internal IntPtr release;
    public Void* private_data;
    public static CArrowArray* Create();
    public static void Free(CArrowArray* array);
    public static void CallReleaseFunc(CArrowArray* array);
}
public static class Apache.Arrow.C.CArrowArrayExporter : object {
    private static NativeDelegate`1<ReleaseArrowArray> s_releaseArray;
    private static IntPtr ReleaseArrayPtr { get; }
    private static CArrowArrayExporter();
    private static IntPtr get_ReleaseArrayPtr();
    public static void ExportArray(IArrowArray array, CArrowArray* cArray);
    public static void ExportRecordBatch(RecordBatch batch, CArrowArray* cArray);
    private static void ConvertArray(ExportedAllocationOwner sharedOwner, ArrayData array, CArrowArray* cArray);
    private static void ConvertRecordBatch(ExportedAllocationOwner sharedOwner, RecordBatch batch, CArrowArray* cArray);
    private static void ReleaseArray(CArrowArray* cArray);
    private static CArrowArray* MakeArray(ExportedAllocationOwner sharedOwner);
    private static Void* MakePrivateData(ExportedAllocationOwner sharedOwner);
    private static void DisposePrivateData(Void** ptr);
}
public static class Apache.Arrow.C.CArrowArrayImporter : object {
    public static IArrowArray ImportArray(CArrowArray* ptr, IArrowType type);
    public static RecordBatch ImportRecordBatch(CArrowArray* ptr, Schema schema);
}
public class Apache.Arrow.C.CArrowArrayStream : ValueType {
    internal IntPtr get_schema;
    internal IntPtr get_next;
    internal IntPtr get_last_error;
    internal IntPtr release;
    public Void* private_data;
    public static CArrowArrayStream* Create();
    public static void Free(CArrowArrayStream* arrayStream);
}
public static class Apache.Arrow.C.CArrowArrayStreamExporter : object {
    private static NativeDelegate`1<GetSchemaArrayStream> s_getSchemaArrayStream;
    private static NativeDelegate`1<GetNextArrayStream> s_getNextArrayStream;
    private static NativeDelegate`1<GetLastErrorArrayStream> s_getLastErrorArrayStream;
    private static NativeDelegate`1<ReleaseArrayStream> s_releaseArrayStream;
    private static IntPtr GetSchemaPtr { get; }
    private static IntPtr GetNextPtr { get; }
    private static IntPtr GetLastErrorPtr { get; }
    private static IntPtr ReleasePtr { get; }
    private static CArrowArrayStreamExporter();
    private static IntPtr get_GetSchemaPtr();
    private static IntPtr get_GetNextPtr();
    private static IntPtr get_GetLastErrorPtr();
    private static IntPtr get_ReleasePtr();
    public static void ExportArrayStream(IArrowArrayStream arrayStream, CArrowArrayStream* cArrayStream);
    private static int GetSchema(CArrowArrayStream* cArrayStream, CArrowSchema* cSchema);
    private static int GetNext(CArrowArrayStream* cArrayStream, CArrowArray* cArray);
    private static Byte* GetLastError(CArrowArrayStream* cArrayStream);
    private static void Release(CArrowArrayStream* cArrayStream);
}
public static class Apache.Arrow.C.CArrowArrayStreamImporter : object {
    public static IArrowArrayStream ImportArrayStream(CArrowArrayStream* ptr);
}
public class Apache.Arrow.C.CArrowSchema : ValueType {
    public Byte* format;
    public Byte* name;
    public Byte* metadata;
    public long flags;
    public long n_children;
    public CArrowSchema** children;
    public CArrowSchema* dictionary;
    internal IntPtr release;
    public Void* private_data;
    public static long ArrowFlagDictionaryOrdered;
    public static long ArrowFlagNullable;
    public static long ArrowFlagMapKeysSorted;
    public static CArrowSchema* Create();
    public static void Free(CArrowSchema* schema);
    [IsReadOnlyAttribute]
public bool GetFlag(long flag);
    [IsReadOnlyAttribute]
internal CArrowSchema* GetChild(long i);
}
public static class Apache.Arrow.C.CArrowSchemaExporter : object {
    private static NativeDelegate`1<ReleaseArrowSchema> s_releaseSchema;
    private static IntPtr ReleaseSchemaPtr { get; }
    private static CArrowSchemaExporter();
    private static IntPtr get_ReleaseSchemaPtr();
    public static void ExportType(IArrowType datatype, CArrowSchema* schema);
    public static void ExportField(Field field, CArrowSchema* schema);
    public static void ExportSchema(Schema schema, CArrowSchema* out_schema);
    private static char FormatTimeUnit(TimeUnit unit);
    private static string FormatUnion(UnionType unionType);
    private static string GetFormat(IArrowType datatype);
    private static long GetFlags(IArrowType datatype, bool nullable);
    private static CArrowSchema** ConstructChildren(IArrowType datatype, Int64& numChildren);
    private static CArrowSchema* ConstructDictionary(IArrowType datatype);
    private static Byte* ConstructMetadata(IReadOnlyDictionary`2<string, string> metadata);
    private static void WriteMetadataString(Byte*& ptr, int length, string str);
    private static void ReleaseCArrowSchema(CArrowSchema* schema);
}
public static class Apache.Arrow.C.CArrowSchemaImporter : object {
    public static ArrowType ImportType(CArrowSchema* ptr);
    public static Field ImportField(CArrowSchema* ptr);
    public static Schema ImportSchema(CArrowSchema* ptr);
}
[IsReadOnlyAttribute]
internal class Apache.Arrow.C.NativeDelegate`1 : ValueType {
    private T _managedDelegate;
    [CompilerGeneratedAttribute]
private IntPtr <Pointer>k__BackingField;
    public IntPtr Pointer { get; }
    public NativeDelegate`1(T managedDelegate);
    [CompilerGeneratedAttribute]
public IntPtr get_Pointer();
}
internal static class Apache.Arrow.C.StringUtil : object {
    public static Byte* ToCStringUtf8(string str);
    public static string PtrToStringUtf8(Byte* ptr);
}
public class Apache.Arrow.ChunkedArray : object {
    [CompilerGeneratedAttribute]
private IList`1<IArrowArray> <Arrays>k__BackingField;
    [CompilerGeneratedAttribute]
private IArrowType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NullCount>k__BackingField;
    private IList`1<IArrowArray> Arrays { get; }
    public IArrowType DataType { get; }
    public long Length { get; }
    public long NullCount { get; }
    public int ArrayCount { get; }
    public ChunkedArray(IList`1<Array> arrays);
    public ChunkedArray(IList`1<IArrowArray> arrays);
    public ChunkedArray(Array array);
    [CompilerGeneratedAttribute]
private IList`1<IArrowArray> get_Arrays();
    [CompilerGeneratedAttribute]
public IArrowType get_DataType();
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
public long get_NullCount();
    public int get_ArrayCount();
    public Array Array(int index);
    public IArrowArray ArrowArray(int index);
    public ChunkedArray Slice(long offset, long length);
    public ChunkedArray Slice(long offset);
    public virtual string ToString();
    private static IArrowArray[] Cast(IList`1<Array> arrays);
}
public class Apache.Arrow.Column : object {
    [CompilerGeneratedAttribute]
private Field <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private ChunkedArray <Data>k__BackingField;
    public Field Field { get; }
    public ChunkedArray Data { get; }
    public long Length { get; }
    public long NullCount { get; }
    public string Name { get; }
    public IArrowType Type { get; }
    public Column(Field field, IList`1<Array> arrays);
    public Column(Field field, IList`1<IArrowArray> arrays);
    private Column(Field field, ChunkedArray data, bool doValidation);
    [CompilerGeneratedAttribute]
public Field get_Field();
    [CompilerGeneratedAttribute]
public ChunkedArray get_Data();
    public long get_Length();
    public long get_NullCount();
    public string get_Name();
    public IArrowType get_Type();
    public Column Slice(int offset, int length);
    public Column Slice(int offset);
    private bool ValidateArrayDataTypes();
}
public class Apache.Arrow.Date32Array : PrimitiveArray`1<int> {
    private static DateTime _epochDate;
    private int System.Collections.Generic.IReadOnlyCollection<System.DateTime?>.Count { get; }
    private Nullable`1<DateTime> System.Collections.Generic.IReadOnlyList<System.DateTime?>.Item { get; }
    private int System.Collections.Generic.ICollection<System.DateTime?>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.DateTime?>.IsReadOnly { get; }
    public Date32Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Date32Array(ArrayData data);
    private static Date32Array();
    public virtual void Accept(IArrowArrayVisitor visitor);
    [ObsoleteAttribute("Use `GetDateTimeOffset()` instead")]
public Nullable`1<DateTimeOffset> GetDate(int index);
    public Nullable`1<DateTime> GetDateTime(int index);
    public Nullable`1<DateTimeOffset> GetDateTimeOffset(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.DateTime?>.get_Count();
    private sealed virtual override Nullable`1<DateTime> System.Collections.Generic.IReadOnlyList<System.DateTime?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.Date32Array/<System-Collections-Generic-IEnumerable<System-DateTime?>-GetEnumerator>d__12")]
private sealed virtual override IEnumerator`1<Nullable`1<DateTime>> System.Collections.Generic.IEnumerable<System.DateTime?>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.DateTime?>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime?>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime?>.Add(Nullable`1<DateTime> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime?>.Remove(Nullable`1<DateTime> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime?>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime?>.Contains(Nullable`1<DateTime> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime?>.CopyTo(Nullable`1[] array, int arrayIndex);
}
public class Apache.Arrow.Date64Array : PrimitiveArray`1<long> {
    private static long MillisecondsPerDay;
    private int System.Collections.Generic.IReadOnlyCollection<System.DateTime?>.Count { get; }
    private Nullable`1<DateTime> System.Collections.Generic.IReadOnlyList<System.DateTime?>.Item { get; }
    private int System.Collections.Generic.ICollection<System.DateTime?>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.DateTime?>.IsReadOnly { get; }
    public Date64Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Date64Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
    [ObsoleteAttribute("Use `GetDateTimeOffset()` instead")]
public Nullable`1<DateTimeOffset> GetDate(int index);
    public Nullable`1<DateTime> GetDateTime(int index);
    public Nullable`1<DateTimeOffset> GetDateTimeOffset(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.DateTime?>.get_Count();
    private sealed virtual override Nullable`1<DateTime> System.Collections.Generic.IReadOnlyList<System.DateTime?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.Date64Array/<System-Collections-Generic-IEnumerable<System-DateTime?>-GetEnumerator>d__12")]
private sealed virtual override IEnumerator`1<Nullable`1<DateTime>> System.Collections.Generic.IEnumerable<System.DateTime?>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.DateTime?>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime?>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime?>.Add(Nullable`1<DateTime> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime?>.Remove(Nullable`1<DateTime> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime?>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime?>.Contains(Nullable`1<DateTime> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime?>.CopyTo(Nullable`1[] array, int arrayIndex);
}
public abstract class Apache.Arrow.DateArrayBuilder`3 : DelegatingArrayBuilder`3<TUnderlying, TArray, TBuilder> {
    protected DateArrayBuilder`3(IArrowArrayBuilder`3<TUnderlying, TArray, IArrowArrayBuilder`1<TArray>> innerBuilder);
    public sealed virtual TBuilder Append(DateTime value);
    public sealed virtual TBuilder Append(DateTimeOffset value);
    public sealed virtual TBuilder Append(ReadOnlySpan`1<DateTime> span);
    public sealed virtual TBuilder Append(ReadOnlySpan`1<DateTimeOffset> span);
    public virtual TBuilder AppendNull();
    public sealed virtual TBuilder AppendRange(IEnumerable`1<DateTime> values);
    public sealed virtual TBuilder AppendRange(IEnumerable`1<DateTimeOffset> values);
    public sealed virtual TBuilder Set(int index, DateTime value);
    public sealed virtual TBuilder Set(int index, DateTimeOffset value);
    public sealed virtual TBuilder Swap(int i, int j);
    protected abstract virtual TUnderlying Convert(DateTime dateTime);
    protected abstract virtual TUnderlying Convert(DateTimeOffset dateTimeOffset);
}
public class Apache.Arrow.DayTimeIntervalArray : IntervalArray`1<DayTimeInterval> {
    public DayTimeIntervalArray(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public DayTimeIntervalArray(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.Decimal128Array : FixedSizeBinaryArray {
    public int Scale { get; }
    public int Precision { get; }
    public int ByteWidth { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Data.SqlTypes.SqlDecimal?>.Count { get; }
    private Nullable`1<SqlDecimal> System.Collections.Generic.IReadOnlyList<System.Data.SqlTypes.SqlDecimal?>.Item { get; }
    public Decimal128Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public int get_Scale();
    public int get_Precision();
    public int get_ByteWidth();
    public Nullable`1<decimal> GetValue(int index);
    public IList`1<Nullable`1<decimal>> ToList(bool includeNulls);
    public string GetString(int index);
    public Nullable`1<SqlDecimal> GetSqlDecimal(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Data.SqlTypes.SqlDecimal?>.get_Count();
    private sealed virtual override Nullable`1<SqlDecimal> System.Collections.Generic.IReadOnlyList<System.Data.SqlTypes.SqlDecimal?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.Decimal128Array/<System-Collections-Generic-IEnumerable<System-Data-SqlTypes-SqlDecimal?>-GetEnumerator>d__17")]
private sealed virtual override IEnumerator`1<Nullable`1<SqlDecimal>> System.Collections.Generic.IEnumerable<System.Data.SqlTypes.SqlDecimal?>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Apache.Arrow.Decimal256Array : FixedSizeBinaryArray {
    public int Scale { get; }
    public int Precision { get; }
    public int ByteWidth { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Data.SqlTypes.SqlDecimal?>.Count { get; }
    private Nullable`1<SqlDecimal> System.Collections.Generic.IReadOnlyList<System.Data.SqlTypes.SqlDecimal?>.Item { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.String>.Count { get; }
    [NullableAttribute("2")]
private string System.Collections.Generic.IReadOnlyList<System.String>.Item { get; }
    public Decimal256Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public int get_Scale();
    public int get_Precision();
    public int get_ByteWidth();
    public Nullable`1<decimal> GetValue(int index);
    public IList`1<Nullable`1<decimal>> ToList(bool includeNulls);
    [NullableContextAttribute("2")]
public string GetString(int index);
    public bool TryGetSqlDecimal(int index, Nullable`1& value);
    private Nullable`1<SqlDecimal> GetSqlDecimal(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Data.SqlTypes.SqlDecimal?>.get_Count();
    private sealed virtual override Nullable`1<SqlDecimal> System.Collections.Generic.IReadOnlyList<System.Data.SqlTypes.SqlDecimal?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.Decimal256Array/<System-Collections-Generic-IEnumerable<System-Data-SqlTypes-SqlDecimal?>-GetEnumerator>d__18")]
private sealed virtual override IEnumerator`1<Nullable`1<SqlDecimal>> System.Collections.Generic.IEnumerable<System.Data.SqlTypes.SqlDecimal?>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.String>.get_Count();
    [NullableContextAttribute("2")]
private sealed virtual override string System.Collections.Generic.IReadOnlyList<System.String>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.Decimal256Array/<System-Collections-Generic-IEnumerable<System-String>-GetEnumerator>d__23")]
private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Apache.Arrow.DecimalUtility : object {
    private static BigInteger _maxDecimal;
    private static BigInteger _minDecimal;
    private static UInt64[] s_powersOfTen;
    private static int PowersOfTenLength { get; }
    private static DecimalUtility();
    private static int get_PowersOfTenLength();
    internal static decimal GetDecimal(ArrowBuffer& valueBuffer, int index, int scale, int byteWidth);
    internal static string GetString(ArrowBuffer& valueBuffer, int index, int precision, int scale, int byteWidth);
    internal static SqlDecimal GetSqlDecimal128(ArrowBuffer& valueBuffer, int index, int precision, int scale);
    private static decimal DivideByScale(BigInteger integerValue, int scale);
    internal static void GetBytes(decimal value, int precision, int scale, int byteWidth, Span`1<byte> bytes);
    internal static void GetBytes(string value, int precision, int scale, int byteWidth, Span`1<byte> bytes);
    internal static void GetBytes(SqlDecimal value, int precision, int scale, Span`1<byte> bytes);
}
public abstract class Apache.Arrow.DelegatingArrayBuilder`3 : object {
    [CompilerGeneratedAttribute]
private IArrowArrayBuilder`3<T, TArray, IArrowArrayBuilder`1<TArray>> <InnerBuilder>k__BackingField;
    protected IArrowArrayBuilder`3<T, TArray, IArrowArrayBuilder`1<TArray>> InnerBuilder { get; }
    public int Length { get; }
    protected DelegatingArrayBuilder`3(IArrowArrayBuilder`3<T, TArray, IArrowArrayBuilder`1<TArray>> innerBuilder);
    [CompilerGeneratedAttribute]
protected IArrowArrayBuilder`3<T, TArray, IArrowArrayBuilder`1<TArray>> get_InnerBuilder();
    public sealed virtual int get_Length();
    public sealed virtual TArray Build(MemoryAllocator allocator);
    public sealed virtual TBuilder Reserve(int additionalCapacity);
    public sealed virtual TBuilder Resize(int capacity);
    public sealed virtual TBuilder Clear();
    public abstract virtual TBuilder AppendNull();
}
public class Apache.Arrow.DenseUnionArray : UnionArray {
    public ArrowBuffer ValueOffsetBuffer { get; }
    public ReadOnlySpan`1<int> ValueOffsets { get; }
    public DenseUnionArray(IArrowType dataType, int length, IEnumerable`1<IArrowArray> children, ArrowBuffer typeIds, ArrowBuffer valuesOffsetBuffer, int nullCount, int offset);
    public DenseUnionArray(ArrayData data);
    public ArrowBuffer get_ValueOffsetBuffer();
    public ReadOnlySpan`1<int> get_ValueOffsets();
    protected virtual bool FieldIsValid(IArrowArray fieldArray, int index);
    internal static int ComputeNullCount(ArrayData data);
}
public class Apache.Arrow.DictionaryArray : Array {
    [CompilerGeneratedAttribute]
private IArrowArray <Dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private IArrowArray <Indices>k__BackingField;
    public IArrowArray Dictionary { get; }
    public IArrowArray Indices { get; }
    public ArrowBuffer IndicesBuffer { get; }
    public DictionaryArray(ArrayData data);
    public DictionaryArray(DictionaryType dataType, IArrowArray indicesArray, IArrowArray dictionary);
    [CompilerGeneratedAttribute]
public IArrowArray get_Dictionary();
    [CompilerGeneratedAttribute]
public IArrowArray get_Indices();
    public ArrowBuffer get_IndicesBuffer();
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.DoubleArray : PrimitiveArray`1<double> {
    public DoubleArray(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public DoubleArray(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.DurationArray : PrimitiveArray`1<long> {
    public DurationType DataType { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.TimeSpan?>.Count { get; }
    private Nullable`1<TimeSpan> System.Collections.Generic.IReadOnlyList<System.TimeSpan?>.Item { get; }
    public DurationArray(DurationType type, ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public DurationArray(ArrayData data);
    public DurationType get_DataType();
    public Nullable`1<TimeSpan> GetTimeSpan(int index);
    public virtual void Accept(IArrowArrayVisitor visitor);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.TimeSpan?>.get_Count();
    private sealed virtual override Nullable`1<TimeSpan> System.Collections.Generic.IReadOnlyList<System.TimeSpan?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.DurationArray/<System-Collections-Generic-IEnumerable<System-TimeSpan?>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<Nullable`1<TimeSpan>> System.Collections.Generic.IEnumerable<System.TimeSpan?>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Apache.Arrow.Field : object {
    [CompilerGeneratedAttribute]
private IArrowType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    public IArrowType DataType { get; }
    public string Name { get; }
    public bool IsNullable { get; }
    public bool HasMetadata { get; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; }
    public Field(string name, IArrowType dataType, bool nullable, IEnumerable`1<KeyValuePair`2<string, string>> metadata);
    internal Field(string name, IArrowType dataType, bool nullable, IReadOnlyDictionary`2<string, string> metadata, bool copyCollections);
    private Field(string name, IArrowType dataType, bool nullable);
    [CompilerGeneratedAttribute]
public IArrowType get_DataType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    public bool get_HasMetadata();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    public virtual string ToString();
}
internal static class Apache.Arrow.FieldComparer : object {
    public static bool Compare(Field expected, Field actual);
}
public class Apache.Arrow.FixedSizeListArray : Array {
    [CompilerGeneratedAttribute]
private IArrowArray <Values>k__BackingField;
    public IArrowArray Values { get; }
    public FixedSizeListArray(IArrowType dataType, int length, IArrowArray values, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public FixedSizeListArray(ArrayData data);
    private FixedSizeListArray(ArrayData data, IArrowArray values);
    [CompilerGeneratedAttribute]
public IArrowArray get_Values();
    public virtual void Accept(IArrowArrayVisitor visitor);
    public IArrowArray GetSlicedValues(int index);
    protected virtual void Dispose(bool disposing);
}
internal class Apache.Arrow.Flatbuf.Binary : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Binary GetRootAsBinary(ByteBuffer _bb);
    public static Binary GetRootAsBinary(ByteBuffer _bb, Binary obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Binary __assign(int _i, ByteBuffer _bb);
    public static void StartBinary(FlatBufferBuilder builder);
    public static Offset`1<Binary> EndBinary(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.BinaryVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.BinaryView : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static BinaryView GetRootAsBinaryView(ByteBuffer _bb);
    public static BinaryView GetRootAsBinaryView(ByteBuffer _bb, BinaryView obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public BinaryView __assign(int _i, ByteBuffer _bb);
    public static void StartBinaryView(FlatBufferBuilder builder);
    public static Offset`1<BinaryView> EndBinaryView(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.BinaryViewVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Block : ValueType {
    private Struct __p;
    public ByteBuffer ByteBuffer { get; }
    public long Offset { get; }
    public int MetaDataLength { get; }
    public long BodyLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Block __assign(int _i, ByteBuffer _bb);
    public long get_Offset();
    public int get_MetaDataLength();
    public long get_BodyLength();
    public static Offset`1<Block> CreateBlock(FlatBufferBuilder builder, long Offset, int MetaDataLength, long BodyLength);
}
internal class Apache.Arrow.Flatbuf.BodyCompression : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public CompressionType Codec { get; }
    public BodyCompressionMethod Method { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static BodyCompression GetRootAsBodyCompression(ByteBuffer _bb);
    public static BodyCompression GetRootAsBodyCompression(ByteBuffer _bb, BodyCompression obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public BodyCompression __assign(int _i, ByteBuffer _bb);
    public CompressionType get_Codec();
    public BodyCompressionMethod get_Method();
    public static Offset`1<BodyCompression> CreateBodyCompression(FlatBufferBuilder builder, CompressionType codec, BodyCompressionMethod method);
    public static void StartBodyCompression(FlatBufferBuilder builder);
    public static void AddCodec(FlatBufferBuilder builder, CompressionType codec);
    public static void AddMethod(FlatBufferBuilder builder, BodyCompressionMethod method);
    public static Offset`1<BodyCompression> EndBodyCompression(FlatBufferBuilder builder);
}
internal enum Apache.Arrow.Flatbuf.BodyCompressionMethod : Enum {
    public sbyte value__;
    public static BodyCompressionMethod BUFFER;
}
internal static class Apache.Arrow.Flatbuf.BodyCompressionVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Bool : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Bool GetRootAsBool(ByteBuffer _bb);
    public static Bool GetRootAsBool(ByteBuffer _bb, Bool obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Bool __assign(int _i, ByteBuffer _bb);
    public static void StartBool(FlatBufferBuilder builder);
    public static Offset`1<Bool> EndBool(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.BoolVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Buffer : ValueType {
    private Struct __p;
    public ByteBuffer ByteBuffer { get; }
    public long Offset { get; }
    public long Length { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Buffer __assign(int _i, ByteBuffer _bb);
    public long get_Offset();
    public long get_Length();
    public static Offset`1<Buffer> CreateBuffer(FlatBufferBuilder builder, long Offset, long Length);
}
internal enum Apache.Arrow.Flatbuf.CompressionType : Enum {
    public sbyte value__;
    public static CompressionType LZ4_FRAME;
    public static CompressionType ZSTD;
}
internal class Apache.Arrow.Flatbuf.Date : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public DateUnit Unit { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Date GetRootAsDate(ByteBuffer _bb);
    public static Date GetRootAsDate(ByteBuffer _bb, Date obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Date __assign(int _i, ByteBuffer _bb);
    public DateUnit get_Unit();
    public static Offset`1<Date> CreateDate(FlatBufferBuilder builder, DateUnit unit);
    public static void StartDate(FlatBufferBuilder builder);
    public static void AddUnit(FlatBufferBuilder builder, DateUnit unit);
    public static Offset`1<Date> EndDate(FlatBufferBuilder builder);
}
internal enum Apache.Arrow.Flatbuf.DateUnit : Enum {
    public short value__;
    public static DateUnit DAY;
    public static DateUnit MILLISECOND;
}
internal static class Apache.Arrow.Flatbuf.DateVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Decimal : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public int Precision { get; }
    public int Scale { get; }
    public int BitWidth { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Decimal GetRootAsDecimal(ByteBuffer _bb);
    public static Decimal GetRootAsDecimal(ByteBuffer _bb, Decimal obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Decimal __assign(int _i, ByteBuffer _bb);
    public int get_Precision();
    public int get_Scale();
    public int get_BitWidth();
    public static Offset`1<Decimal> CreateDecimal(FlatBufferBuilder builder, int precision, int scale, int bitWidth);
    public static void StartDecimal(FlatBufferBuilder builder);
    public static void AddPrecision(FlatBufferBuilder builder, int precision);
    public static void AddScale(FlatBufferBuilder builder, int scale);
    public static void AddBitWidth(FlatBufferBuilder builder, int bitWidth);
    public static Offset`1<Decimal> EndDecimal(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.DecimalVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.DictionaryBatch : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public long Id { get; }
    public Nullable`1<RecordBatch> Data { get; }
    public bool IsDelta { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static DictionaryBatch GetRootAsDictionaryBatch(ByteBuffer _bb);
    public static DictionaryBatch GetRootAsDictionaryBatch(ByteBuffer _bb, DictionaryBatch obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public DictionaryBatch __assign(int _i, ByteBuffer _bb);
    public long get_Id();
    public Nullable`1<RecordBatch> get_Data();
    public bool get_IsDelta();
    public static Offset`1<DictionaryBatch> CreateDictionaryBatch(FlatBufferBuilder builder, long id, Offset`1<RecordBatch> dataOffset, bool isDelta);
    public static void StartDictionaryBatch(FlatBufferBuilder builder);
    public static void AddId(FlatBufferBuilder builder, long id);
    public static void AddData(FlatBufferBuilder builder, Offset`1<RecordBatch> dataOffset);
    public static void AddIsDelta(FlatBufferBuilder builder, bool isDelta);
    public static Offset`1<DictionaryBatch> EndDictionaryBatch(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.DictionaryBatchVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.DictionaryEncoding : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public long Id { get; }
    public Nullable`1<Int> IndexType { get; }
    public bool IsOrdered { get; }
    public DictionaryKind DictionaryKind { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static DictionaryEncoding GetRootAsDictionaryEncoding(ByteBuffer _bb);
    public static DictionaryEncoding GetRootAsDictionaryEncoding(ByteBuffer _bb, DictionaryEncoding obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public DictionaryEncoding __assign(int _i, ByteBuffer _bb);
    public long get_Id();
    public Nullable`1<Int> get_IndexType();
    public bool get_IsOrdered();
    public DictionaryKind get_DictionaryKind();
    public static Offset`1<DictionaryEncoding> CreateDictionaryEncoding(FlatBufferBuilder builder, long id, Offset`1<Int> indexTypeOffset, bool isOrdered, DictionaryKind dictionaryKind);
    public static void StartDictionaryEncoding(FlatBufferBuilder builder);
    public static void AddId(FlatBufferBuilder builder, long id);
    public static void AddIndexType(FlatBufferBuilder builder, Offset`1<Int> indexTypeOffset);
    public static void AddIsOrdered(FlatBufferBuilder builder, bool isOrdered);
    public static void AddDictionaryKind(FlatBufferBuilder builder, DictionaryKind dictionaryKind);
    public static Offset`1<DictionaryEncoding> EndDictionaryEncoding(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.DictionaryEncodingVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.DictionaryKind : Enum {
    public short value__;
    public static DictionaryKind DenseArray;
}
internal class Apache.Arrow.Flatbuf.Duration : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public TimeUnit Unit { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Duration GetRootAsDuration(ByteBuffer _bb);
    public static Duration GetRootAsDuration(ByteBuffer _bb, Duration obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Duration __assign(int _i, ByteBuffer _bb);
    public TimeUnit get_Unit();
    public static Offset`1<Duration> CreateDuration(FlatBufferBuilder builder, TimeUnit unit);
    public static void StartDuration(FlatBufferBuilder builder);
    public static void AddUnit(FlatBufferBuilder builder, TimeUnit unit);
    public static Offset`1<Duration> EndDuration(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.DurationVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.Endianness : Enum {
    public short value__;
    public static Endianness Little;
    public static Endianness Big;
}
internal enum Apache.Arrow.Flatbuf.Feature : Enum {
    public long value__;
    public static Feature UNUSED;
    public static Feature DICTIONARY_REPLACEMENT;
    public static Feature COMPRESSED_BODY;
}
internal class Apache.Arrow.Flatbuf.Field : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public Type TypeType { get; }
    public Nullable`1<DictionaryEncoding> Dictionary { get; }
    public int ChildrenLength { get; }
    public int CustomMetadataLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Field GetRootAsField(ByteBuffer _bb);
    public static Field GetRootAsField(ByteBuffer _bb, Field obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Field __assign(int _i, ByteBuffer _bb);
    public string get_Name();
    public Span`1<byte> GetNameBytes();
    public Byte[] GetNameArray();
    public bool get_Nullable();
    public Type get_TypeType();
    public Nullable`1<TTable> Type();
    public Null TypeAsNull();
    public Int TypeAsInt();
    public FloatingPoint TypeAsFloatingPoint();
    public Binary TypeAsBinary();
    public Utf8 TypeAsUtf8();
    public Bool TypeAsBool();
    public Decimal TypeAsDecimal();
    public Date TypeAsDate();
    public Time TypeAsTime();
    public Timestamp TypeAsTimestamp();
    public Interval TypeAsInterval();
    public List TypeAsList();
    public Struct_ TypeAsStruct_();
    public Union TypeAsUnion();
    public FixedSizeBinary TypeAsFixedSizeBinary();
    public FixedSizeList TypeAsFixedSizeList();
    public Map TypeAsMap();
    public Duration TypeAsDuration();
    public LargeBinary TypeAsLargeBinary();
    public LargeUtf8 TypeAsLargeUtf8();
    public LargeList TypeAsLargeList();
    public RunEndEncoded TypeAsRunEndEncoded();
    public BinaryView TypeAsBinaryView();
    public Utf8View TypeAsUtf8View();
    public ListView TypeAsListView();
    public LargeListView TypeAsLargeListView();
    public Nullable`1<DictionaryEncoding> get_Dictionary();
    public Nullable`1<Field> Children(int j);
    public int get_ChildrenLength();
    public Nullable`1<KeyValue> CustomMetadata(int j);
    public int get_CustomMetadataLength();
    public static Offset`1<Field> CreateField(FlatBufferBuilder builder, StringOffset nameOffset, bool nullable, Type type_type, int typeOffset, Offset`1<DictionaryEncoding> dictionaryOffset, VectorOffset childrenOffset, VectorOffset custom_metadataOffset);
    public static void StartField(FlatBufferBuilder builder);
    public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset);
    public static void AddNullable(FlatBufferBuilder builder, bool nullable);
    public static void AddTypeType(FlatBufferBuilder builder, Type typeType);
    public static void AddType(FlatBufferBuilder builder, int typeOffset);
    public static void AddDictionary(FlatBufferBuilder builder, Offset`1<DictionaryEncoding> dictionaryOffset);
    public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset);
    public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<Field>> data);
    public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartChildrenVector(FlatBufferBuilder builder, int numElems);
    public static void AddCustomMetadata(FlatBufferBuilder builder, VectorOffset customMetadataOffset);
    public static VectorOffset CreateCustomMetadataVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<KeyValue>> data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartCustomMetadataVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<Field> EndField(FlatBufferBuilder builder);
}
internal class Apache.Arrow.Flatbuf.FieldNode : ValueType {
    private Struct __p;
    public ByteBuffer ByteBuffer { get; }
    public long Length { get; }
    public long NullCount { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public FieldNode __assign(int _i, ByteBuffer _bb);
    public long get_Length();
    public long get_NullCount();
    public static Offset`1<FieldNode> CreateFieldNode(FlatBufferBuilder builder, long Length, long NullCount);
}
internal static class Apache.Arrow.Flatbuf.FieldVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.FixedSizeBinary : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public int ByteWidth { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static FixedSizeBinary GetRootAsFixedSizeBinary(ByteBuffer _bb);
    public static FixedSizeBinary GetRootAsFixedSizeBinary(ByteBuffer _bb, FixedSizeBinary obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public FixedSizeBinary __assign(int _i, ByteBuffer _bb);
    public int get_ByteWidth();
    public static Offset`1<FixedSizeBinary> CreateFixedSizeBinary(FlatBufferBuilder builder, int byteWidth);
    public static void StartFixedSizeBinary(FlatBufferBuilder builder);
    public static void AddByteWidth(FlatBufferBuilder builder, int byteWidth);
    public static Offset`1<FixedSizeBinary> EndFixedSizeBinary(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.FixedSizeBinaryVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.FixedSizeList : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public int ListSize { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static FixedSizeList GetRootAsFixedSizeList(ByteBuffer _bb);
    public static FixedSizeList GetRootAsFixedSizeList(ByteBuffer _bb, FixedSizeList obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public FixedSizeList __assign(int _i, ByteBuffer _bb);
    public int get_ListSize();
    public static Offset`1<FixedSizeList> CreateFixedSizeList(FlatBufferBuilder builder, int listSize);
    public static void StartFixedSizeList(FlatBufferBuilder builder);
    public static void AddListSize(FlatBufferBuilder builder, int listSize);
    public static Offset`1<FixedSizeList> EndFixedSizeList(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.FixedSizeListVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.FloatingPoint : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public Precision Precision { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static FloatingPoint GetRootAsFloatingPoint(ByteBuffer _bb);
    public static FloatingPoint GetRootAsFloatingPoint(ByteBuffer _bb, FloatingPoint obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public FloatingPoint __assign(int _i, ByteBuffer _bb);
    public Precision get_Precision();
    public static Offset`1<FloatingPoint> CreateFloatingPoint(FlatBufferBuilder builder, Precision precision);
    public static void StartFloatingPoint(FlatBufferBuilder builder);
    public static void AddPrecision(FlatBufferBuilder builder, Precision precision);
    public static Offset`1<FloatingPoint> EndFloatingPoint(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.FloatingPointVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Footer : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public MetadataVersion Version { get; }
    public Nullable`1<Schema> Schema { get; }
    public int DictionariesLength { get; }
    public int RecordBatchesLength { get; }
    public int CustomMetadataLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Footer GetRootAsFooter(ByteBuffer _bb);
    public static Footer GetRootAsFooter(ByteBuffer _bb, Footer obj);
    public static bool VerifyFooter(ByteBuffer _bb);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Footer __assign(int _i, ByteBuffer _bb);
    public MetadataVersion get_Version();
    public Nullable`1<Schema> get_Schema();
    public Nullable`1<Block> Dictionaries(int j);
    public int get_DictionariesLength();
    public Nullable`1<Block> RecordBatches(int j);
    public int get_RecordBatchesLength();
    public Nullable`1<KeyValue> CustomMetadata(int j);
    public int get_CustomMetadataLength();
    public static Offset`1<Footer> CreateFooter(FlatBufferBuilder builder, MetadataVersion version, Offset`1<Schema> schemaOffset, VectorOffset dictionariesOffset, VectorOffset recordBatchesOffset, VectorOffset custom_metadataOffset);
    public static void StartFooter(FlatBufferBuilder builder);
    public static void AddVersion(FlatBufferBuilder builder, MetadataVersion version);
    public static void AddSchema(FlatBufferBuilder builder, Offset`1<Schema> schemaOffset);
    public static void AddDictionaries(FlatBufferBuilder builder, VectorOffset dictionariesOffset);
    public static void StartDictionariesVector(FlatBufferBuilder builder, int numElems);
    public static void AddRecordBatches(FlatBufferBuilder builder, VectorOffset recordBatchesOffset);
    public static void StartRecordBatchesVector(FlatBufferBuilder builder, int numElems);
    public static void AddCustomMetadata(FlatBufferBuilder builder, VectorOffset customMetadataOffset);
    public static VectorOffset CreateCustomMetadataVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<KeyValue>> data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartCustomMetadataVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<Footer> EndFooter(FlatBufferBuilder builder);
    public static void FinishFooterBuffer(FlatBufferBuilder builder, Offset`1<Footer> offset);
    public static void FinishSizePrefixedFooterBuffer(FlatBufferBuilder builder, Offset`1<Footer> offset);
}
internal static class Apache.Arrow.Flatbuf.FooterVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Int : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Int GetRootAsInt(ByteBuffer _bb);
    public static Int GetRootAsInt(ByteBuffer _bb, Int obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Int __assign(int _i, ByteBuffer _bb);
    public int get_BitWidth();
    public bool get_IsSigned();
    public static Offset`1<Int> CreateInt(FlatBufferBuilder builder, int bitWidth, bool is_signed);
    public static void StartInt(FlatBufferBuilder builder);
    public static void AddBitWidth(FlatBufferBuilder builder, int bitWidth);
    public static void AddIsSigned(FlatBufferBuilder builder, bool isSigned);
    public static Offset`1<Int> EndInt(FlatBufferBuilder builder);
}
internal class Apache.Arrow.Flatbuf.Interval : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public IntervalUnit Unit { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Interval GetRootAsInterval(ByteBuffer _bb);
    public static Interval GetRootAsInterval(ByteBuffer _bb, Interval obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Interval __assign(int _i, ByteBuffer _bb);
    public IntervalUnit get_Unit();
    public static Offset`1<Interval> CreateInterval(FlatBufferBuilder builder, IntervalUnit unit);
    public static void StartInterval(FlatBufferBuilder builder);
    public static void AddUnit(FlatBufferBuilder builder, IntervalUnit unit);
    public static Offset`1<Interval> EndInterval(FlatBufferBuilder builder);
}
internal enum Apache.Arrow.Flatbuf.IntervalUnit : Enum {
    public short value__;
    public static IntervalUnit YEAR_MONTH;
    public static IntervalUnit DAY_TIME;
    public static IntervalUnit MONTH_DAY_NANO;
}
internal static class Apache.Arrow.Flatbuf.IntervalVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal static class Apache.Arrow.Flatbuf.IntVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.KeyValue : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public string Key { get; }
    public string Value { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static KeyValue GetRootAsKeyValue(ByteBuffer _bb);
    public static KeyValue GetRootAsKeyValue(ByteBuffer _bb, KeyValue obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public KeyValue __assign(int _i, ByteBuffer _bb);
    public string get_Key();
    public Span`1<byte> GetKeyBytes();
    public Byte[] GetKeyArray();
    public string get_Value();
    public Span`1<byte> GetValueBytes();
    public Byte[] GetValueArray();
    public static Offset`1<KeyValue> CreateKeyValue(FlatBufferBuilder builder, StringOffset keyOffset, StringOffset valueOffset);
    public static void StartKeyValue(FlatBufferBuilder builder);
    public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset);
    public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset);
    public static Offset`1<KeyValue> EndKeyValue(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.KeyValueVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.LargeBinary : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static LargeBinary GetRootAsLargeBinary(ByteBuffer _bb);
    public static LargeBinary GetRootAsLargeBinary(ByteBuffer _bb, LargeBinary obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public LargeBinary __assign(int _i, ByteBuffer _bb);
    public static void StartLargeBinary(FlatBufferBuilder builder);
    public static Offset`1<LargeBinary> EndLargeBinary(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.LargeBinaryVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.LargeList : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static LargeList GetRootAsLargeList(ByteBuffer _bb);
    public static LargeList GetRootAsLargeList(ByteBuffer _bb, LargeList obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public LargeList __assign(int _i, ByteBuffer _bb);
    public static void StartLargeList(FlatBufferBuilder builder);
    public static Offset`1<LargeList> EndLargeList(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.LargeListVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.LargeListView : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static LargeListView GetRootAsLargeListView(ByteBuffer _bb);
    public static LargeListView GetRootAsLargeListView(ByteBuffer _bb, LargeListView obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public LargeListView __assign(int _i, ByteBuffer _bb);
    public static void StartLargeListView(FlatBufferBuilder builder);
    public static Offset`1<LargeListView> EndLargeListView(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.LargeListViewVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.LargeUtf8 : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static LargeUtf8 GetRootAsLargeUtf8(ByteBuffer _bb);
    public static LargeUtf8 GetRootAsLargeUtf8(ByteBuffer _bb, LargeUtf8 obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public LargeUtf8 __assign(int _i, ByteBuffer _bb);
    public static void StartLargeUtf8(FlatBufferBuilder builder);
    public static Offset`1<LargeUtf8> EndLargeUtf8(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.LargeUtf8Verify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.List : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static List GetRootAsList(ByteBuffer _bb);
    public static List GetRootAsList(ByteBuffer _bb, List obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public List __assign(int _i, ByteBuffer _bb);
    public static void StartList(FlatBufferBuilder builder);
    public static Offset`1<List> EndList(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.ListVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.ListView : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static ListView GetRootAsListView(ByteBuffer _bb);
    public static ListView GetRootAsListView(ByteBuffer _bb, ListView obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public ListView __assign(int _i, ByteBuffer _bb);
    public static void StartListView(FlatBufferBuilder builder);
    public static Offset`1<ListView> EndListView(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.ListViewVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Map : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public bool KeysSorted { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Map GetRootAsMap(ByteBuffer _bb);
    public static Map GetRootAsMap(ByteBuffer _bb, Map obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Map __assign(int _i, ByteBuffer _bb);
    public bool get_KeysSorted();
    public static Offset`1<Map> CreateMap(FlatBufferBuilder builder, bool keysSorted);
    public static void StartMap(FlatBufferBuilder builder);
    public static void AddKeysSorted(FlatBufferBuilder builder, bool keysSorted);
    public static Offset`1<Map> EndMap(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.MapVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Message : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public MetadataVersion Version { get; }
    public MessageHeader HeaderType { get; }
    public long BodyLength { get; }
    public int CustomMetadataLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Message GetRootAsMessage(ByteBuffer _bb);
    public static Message GetRootAsMessage(ByteBuffer _bb, Message obj);
    public static bool VerifyMessage(ByteBuffer _bb);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Message __assign(int _i, ByteBuffer _bb);
    public MetadataVersion get_Version();
    public MessageHeader get_HeaderType();
    public Nullable`1<TTable> Header();
    public Schema HeaderAsSchema();
    public DictionaryBatch HeaderAsDictionaryBatch();
    public RecordBatch HeaderAsRecordBatch();
    public Tensor HeaderAsTensor();
    public SparseTensor HeaderAsSparseTensor();
    public long get_BodyLength();
    public Nullable`1<KeyValue> CustomMetadata(int j);
    public int get_CustomMetadataLength();
    public static Offset`1<Message> CreateMessage(FlatBufferBuilder builder, MetadataVersion version, MessageHeader header_type, int headerOffset, long bodyLength, VectorOffset custom_metadataOffset);
    public static void StartMessage(FlatBufferBuilder builder);
    public static void AddVersion(FlatBufferBuilder builder, MetadataVersion version);
    public static void AddHeaderType(FlatBufferBuilder builder, MessageHeader headerType);
    public static void AddHeader(FlatBufferBuilder builder, int headerOffset);
    public static void AddBodyLength(FlatBufferBuilder builder, long bodyLength);
    public static void AddCustomMetadata(FlatBufferBuilder builder, VectorOffset customMetadataOffset);
    public static VectorOffset CreateCustomMetadataVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<KeyValue>> data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartCustomMetadataVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<Message> EndMessage(FlatBufferBuilder builder);
    public static void FinishMessageBuffer(FlatBufferBuilder builder, Offset`1<Message> offset);
    public static void FinishSizePrefixedMessageBuffer(FlatBufferBuilder builder, Offset`1<Message> offset);
}
internal enum Apache.Arrow.Flatbuf.MessageHeader : Enum {
    public byte value__;
    public static MessageHeader NONE;
    public static MessageHeader Schema;
    public static MessageHeader DictionaryBatch;
    public static MessageHeader RecordBatch;
    public static MessageHeader Tensor;
    public static MessageHeader SparseTensor;
}
internal static class Apache.Arrow.Flatbuf.MessageHeaderVerify : object {
    public static bool Verify(Verifier verifier, byte typeId, UInt32 tablePos);
}
internal static class Apache.Arrow.Flatbuf.MessageVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.MetadataVersion : Enum {
    public short value__;
    public static MetadataVersion V1;
    public static MetadataVersion V2;
    public static MetadataVersion V3;
    public static MetadataVersion V4;
    public static MetadataVersion V5;
}
internal class Apache.Arrow.Flatbuf.Null : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Null GetRootAsNull(ByteBuffer _bb);
    public static Null GetRootAsNull(ByteBuffer _bb, Null obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Null __assign(int _i, ByteBuffer _bb);
    public static void StartNull(FlatBufferBuilder builder);
    public static Offset`1<Null> EndNull(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.NullVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.Precision : Enum {
    public short value__;
    public static Precision HALF;
    public static Precision SINGLE;
    public static Precision DOUBLE;
}
internal class Apache.Arrow.Flatbuf.RecordBatch : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public long Length { get; }
    public int NodesLength { get; }
    public int BuffersLength { get; }
    public Nullable`1<BodyCompression> Compression { get; }
    public int VariadicBufferCountsLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static RecordBatch GetRootAsRecordBatch(ByteBuffer _bb);
    public static RecordBatch GetRootAsRecordBatch(ByteBuffer _bb, RecordBatch obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public RecordBatch __assign(int _i, ByteBuffer _bb);
    public long get_Length();
    public Nullable`1<FieldNode> Nodes(int j);
    public int get_NodesLength();
    public Nullable`1<Buffer> Buffers(int j);
    public int get_BuffersLength();
    public Nullable`1<BodyCompression> get_Compression();
    public long VariadicBufferCounts(int j);
    public int get_VariadicBufferCountsLength();
    public Span`1<long> GetVariadicCountsBytes();
    public Int64[] GetVariadicCountsArray();
    public static Offset`1<RecordBatch> CreateRecordBatch(FlatBufferBuilder builder, long length, VectorOffset nodesOffset, VectorOffset buffersOffset, Offset`1<BodyCompression> compressionOffset, VectorOffset variadicCountsOffset);
    public static void StartRecordBatch(FlatBufferBuilder builder);
    public static void AddLength(FlatBufferBuilder builder, long length);
    public static void AddNodes(FlatBufferBuilder builder, VectorOffset nodesOffset);
    public static void StartNodesVector(FlatBufferBuilder builder, int numElems);
    public static void AddBuffers(FlatBufferBuilder builder, VectorOffset buffersOffset);
    public static void StartBuffersVector(FlatBufferBuilder builder, int numElems);
    public static void AddCompression(FlatBufferBuilder builder, Offset`1<BodyCompression> compressionOffset);
    public static void AddVariadicCounts(FlatBufferBuilder builder, VectorOffset variadicCountsOffset);
    public static VectorOffset CreateVariadicCountsVector(FlatBufferBuilder builder, Int64[] data);
    public static VectorOffset CreateVariadicCountsVectorBlock(FlatBufferBuilder builder, Int64[] data);
    public static VectorOffset CreateVariadicCountsVectorBlock(FlatBufferBuilder builder, ArraySegment`1<long> data);
    public static VectorOffset CreateVariadicCountsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartVariadicCountsVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<RecordBatch> EndRecordBatch(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.RecordBatchVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.RunEndEncoded : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static RunEndEncoded GetRootAsRunEndEncoded(ByteBuffer _bb);
    public static RunEndEncoded GetRootAsRunEndEncoded(ByteBuffer _bb, RunEndEncoded obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public RunEndEncoded __assign(int _i, ByteBuffer _bb);
    public static void StartRunEndEncoded(FlatBufferBuilder builder);
    public static Offset`1<RunEndEncoded> EndRunEndEncoded(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.RunEndEncodedVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Schema : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public Endianness Endianness { get; }
    public int FieldsLength { get; }
    public int CustomMetadataLength { get; }
    public int FeaturesLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Schema GetRootAsSchema(ByteBuffer _bb);
    public static Schema GetRootAsSchema(ByteBuffer _bb, Schema obj);
    public static bool VerifySchema(ByteBuffer _bb);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Schema __assign(int _i, ByteBuffer _bb);
    public Endianness get_Endianness();
    public Nullable`1<Field> Fields(int j);
    public int get_FieldsLength();
    public Nullable`1<KeyValue> CustomMetadata(int j);
    public int get_CustomMetadataLength();
    public Feature Features(int j);
    public int get_FeaturesLength();
    public Span`1<Feature> GetFeaturesBytes();
    public Feature[] GetFeaturesArray();
    public static Offset`1<Schema> CreateSchema(FlatBufferBuilder builder, Endianness endianness, VectorOffset fieldsOffset, VectorOffset custom_metadataOffset, VectorOffset featuresOffset);
    public static void StartSchema(FlatBufferBuilder builder);
    public static void AddEndianness(FlatBufferBuilder builder, Endianness endianness);
    public static void AddFields(FlatBufferBuilder builder, VectorOffset fieldsOffset);
    public static VectorOffset CreateFieldsVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<Field>> data);
    public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartFieldsVector(FlatBufferBuilder builder, int numElems);
    public static void AddCustomMetadata(FlatBufferBuilder builder, VectorOffset customMetadataOffset);
    public static VectorOffset CreateCustomMetadataVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<KeyValue>> data);
    public static VectorOffset CreateCustomMetadataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartCustomMetadataVector(FlatBufferBuilder builder, int numElems);
    public static void AddFeatures(FlatBufferBuilder builder, VectorOffset featuresOffset);
    public static VectorOffset CreateFeaturesVector(FlatBufferBuilder builder, Feature[] data);
    public static VectorOffset CreateFeaturesVectorBlock(FlatBufferBuilder builder, Feature[] data);
    public static VectorOffset CreateFeaturesVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Feature> data);
    public static VectorOffset CreateFeaturesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartFeaturesVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<Schema> EndSchema(FlatBufferBuilder builder);
    public static void FinishSchemaBuffer(FlatBufferBuilder builder, Offset`1<Schema> offset);
    public static void FinishSizePrefixedSchemaBuffer(FlatBufferBuilder builder, Offset`1<Schema> offset);
}
internal static class Apache.Arrow.Flatbuf.SchemaVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.SparseMatrixCompressedAxis : Enum {
    public short value__;
    public static SparseMatrixCompressedAxis Row;
    public static SparseMatrixCompressedAxis Column;
}
internal class Apache.Arrow.Flatbuf.SparseMatrixIndexCSX : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public SparseMatrixCompressedAxis CompressedAxis { get; }
    public Nullable`1<Int> IndptrType { get; }
    public Nullable`1<Buffer> IndptrBuffer { get; }
    public Nullable`1<Int> IndicesType { get; }
    public Nullable`1<Buffer> IndicesBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static SparseMatrixIndexCSX GetRootAsSparseMatrixIndexCSX(ByteBuffer _bb);
    public static SparseMatrixIndexCSX GetRootAsSparseMatrixIndexCSX(ByteBuffer _bb, SparseMatrixIndexCSX obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public SparseMatrixIndexCSX __assign(int _i, ByteBuffer _bb);
    public SparseMatrixCompressedAxis get_CompressedAxis();
    public Nullable`1<Int> get_IndptrType();
    public Nullable`1<Buffer> get_IndptrBuffer();
    public Nullable`1<Int> get_IndicesType();
    public Nullable`1<Buffer> get_IndicesBuffer();
    public static void StartSparseMatrixIndexCSX(FlatBufferBuilder builder);
    public static void AddCompressedAxis(FlatBufferBuilder builder, SparseMatrixCompressedAxis compressedAxis);
    public static void AddIndptrType(FlatBufferBuilder builder, Offset`1<Int> indptrTypeOffset);
    public static void AddIndptrBuffer(FlatBufferBuilder builder, Offset`1<Buffer> indptrBufferOffset);
    public static void AddIndicesType(FlatBufferBuilder builder, Offset`1<Int> indicesTypeOffset);
    public static void AddIndicesBuffer(FlatBufferBuilder builder, Offset`1<Buffer> indicesBufferOffset);
    public static Offset`1<SparseMatrixIndexCSX> EndSparseMatrixIndexCSX(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.SparseMatrixIndexCSXVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.SparseTensor : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public Type TypeType { get; }
    public int ShapeLength { get; }
    public long NonZeroLength { get; }
    public SparseTensorIndex SparseIndexType { get; }
    public Nullable`1<Buffer> Data { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static SparseTensor GetRootAsSparseTensor(ByteBuffer _bb);
    public static SparseTensor GetRootAsSparseTensor(ByteBuffer _bb, SparseTensor obj);
    public static bool VerifySparseTensor(ByteBuffer _bb);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public SparseTensor __assign(int _i, ByteBuffer _bb);
    public Type get_TypeType();
    public Nullable`1<TTable> Type();
    public Null TypeAsNull();
    public Int TypeAsInt();
    public FloatingPoint TypeAsFloatingPoint();
    public Binary TypeAsBinary();
    public Utf8 TypeAsUtf8();
    public Bool TypeAsBool();
    public Decimal TypeAsDecimal();
    public Date TypeAsDate();
    public Time TypeAsTime();
    public Timestamp TypeAsTimestamp();
    public Interval TypeAsInterval();
    public List TypeAsList();
    public Struct_ TypeAsStruct_();
    public Union TypeAsUnion();
    public FixedSizeBinary TypeAsFixedSizeBinary();
    public FixedSizeList TypeAsFixedSizeList();
    public Map TypeAsMap();
    public Duration TypeAsDuration();
    public LargeBinary TypeAsLargeBinary();
    public LargeUtf8 TypeAsLargeUtf8();
    public LargeList TypeAsLargeList();
    public RunEndEncoded TypeAsRunEndEncoded();
    public BinaryView TypeAsBinaryView();
    public Utf8View TypeAsUtf8View();
    public ListView TypeAsListView();
    public LargeListView TypeAsLargeListView();
    public Nullable`1<TensorDim> Shape(int j);
    public int get_ShapeLength();
    public long get_NonZeroLength();
    public SparseTensorIndex get_SparseIndexType();
    public Nullable`1<TTable> SparseIndex();
    public SparseTensorIndexCOO SparseIndexAsSparseTensorIndexCOO();
    public SparseMatrixIndexCSX SparseIndexAsSparseMatrixIndexCSX();
    public SparseTensorIndexCSF SparseIndexAsSparseTensorIndexCSF();
    public Nullable`1<Buffer> get_Data();
    public static void StartSparseTensor(FlatBufferBuilder builder);
    public static void AddTypeType(FlatBufferBuilder builder, Type typeType);
    public static void AddType(FlatBufferBuilder builder, int typeOffset);
    public static void AddShape(FlatBufferBuilder builder, VectorOffset shapeOffset);
    public static VectorOffset CreateShapeVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<TensorDim>> data);
    public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartShapeVector(FlatBufferBuilder builder, int numElems);
    public static void AddNonZeroLength(FlatBufferBuilder builder, long nonZeroLength);
    public static void AddSparseIndexType(FlatBufferBuilder builder, SparseTensorIndex sparseIndexType);
    public static void AddSparseIndex(FlatBufferBuilder builder, int sparseIndexOffset);
    public static void AddData(FlatBufferBuilder builder, Offset`1<Buffer> dataOffset);
    public static Offset`1<SparseTensor> EndSparseTensor(FlatBufferBuilder builder);
    public static void FinishSparseTensorBuffer(FlatBufferBuilder builder, Offset`1<SparseTensor> offset);
    public static void FinishSizePrefixedSparseTensorBuffer(FlatBufferBuilder builder, Offset`1<SparseTensor> offset);
}
internal enum Apache.Arrow.Flatbuf.SparseTensorIndex : Enum {
    public byte value__;
    public static SparseTensorIndex NONE;
    public static SparseTensorIndex SparseTensorIndexCOO;
    public static SparseTensorIndex SparseMatrixIndexCSX;
    public static SparseTensorIndex SparseTensorIndexCSF;
}
internal class Apache.Arrow.Flatbuf.SparseTensorIndexCOO : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public Nullable`1<Int> IndicesType { get; }
    public int IndicesStridesLength { get; }
    public Nullable`1<Buffer> IndicesBuffer { get; }
    public bool IsCanonical { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static SparseTensorIndexCOO GetRootAsSparseTensorIndexCOO(ByteBuffer _bb);
    public static SparseTensorIndexCOO GetRootAsSparseTensorIndexCOO(ByteBuffer _bb, SparseTensorIndexCOO obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public SparseTensorIndexCOO __assign(int _i, ByteBuffer _bb);
    public Nullable`1<Int> get_IndicesType();
    public long IndicesStrides(int j);
    public int get_IndicesStridesLength();
    public Span`1<long> GetIndicesStridesBytes();
    public Int64[] GetIndicesStridesArray();
    public Nullable`1<Buffer> get_IndicesBuffer();
    public bool get_IsCanonical();
    public static void StartSparseTensorIndexCOO(FlatBufferBuilder builder);
    public static void AddIndicesType(FlatBufferBuilder builder, Offset`1<Int> indicesTypeOffset);
    public static void AddIndicesStrides(FlatBufferBuilder builder, VectorOffset indicesStridesOffset);
    public static VectorOffset CreateIndicesStridesVector(FlatBufferBuilder builder, Int64[] data);
    public static VectorOffset CreateIndicesStridesVectorBlock(FlatBufferBuilder builder, Int64[] data);
    public static VectorOffset CreateIndicesStridesVectorBlock(FlatBufferBuilder builder, ArraySegment`1<long> data);
    public static VectorOffset CreateIndicesStridesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartIndicesStridesVector(FlatBufferBuilder builder, int numElems);
    public static void AddIndicesBuffer(FlatBufferBuilder builder, Offset`1<Buffer> indicesBufferOffset);
    public static void AddIsCanonical(FlatBufferBuilder builder, bool isCanonical);
    public static Offset`1<SparseTensorIndexCOO> EndSparseTensorIndexCOO(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.SparseTensorIndexCOOVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.SparseTensorIndexCSF : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public Nullable`1<Int> IndptrType { get; }
    public int IndptrBuffersLength { get; }
    public Nullable`1<Int> IndicesType { get; }
    public int IndicesBuffersLength { get; }
    public int AxisOrderLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static SparseTensorIndexCSF GetRootAsSparseTensorIndexCSF(ByteBuffer _bb);
    public static SparseTensorIndexCSF GetRootAsSparseTensorIndexCSF(ByteBuffer _bb, SparseTensorIndexCSF obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public SparseTensorIndexCSF __assign(int _i, ByteBuffer _bb);
    public Nullable`1<Int> get_IndptrType();
    public Nullable`1<Buffer> IndptrBuffers(int j);
    public int get_IndptrBuffersLength();
    public Nullable`1<Int> get_IndicesType();
    public Nullable`1<Buffer> IndicesBuffers(int j);
    public int get_IndicesBuffersLength();
    public int AxisOrder(int j);
    public int get_AxisOrderLength();
    public Span`1<int> GetAxisOrderBytes();
    public Int32[] GetAxisOrderArray();
    public static Offset`1<SparseTensorIndexCSF> CreateSparseTensorIndexCSF(FlatBufferBuilder builder, Offset`1<Int> indptrTypeOffset, VectorOffset indptrBuffersOffset, Offset`1<Int> indicesTypeOffset, VectorOffset indicesBuffersOffset, VectorOffset axisOrderOffset);
    public static void StartSparseTensorIndexCSF(FlatBufferBuilder builder);
    public static void AddIndptrType(FlatBufferBuilder builder, Offset`1<Int> indptrTypeOffset);
    public static void AddIndptrBuffers(FlatBufferBuilder builder, VectorOffset indptrBuffersOffset);
    public static void StartIndptrBuffersVector(FlatBufferBuilder builder, int numElems);
    public static void AddIndicesType(FlatBufferBuilder builder, Offset`1<Int> indicesTypeOffset);
    public static void AddIndicesBuffers(FlatBufferBuilder builder, VectorOffset indicesBuffersOffset);
    public static void StartIndicesBuffersVector(FlatBufferBuilder builder, int numElems);
    public static void AddAxisOrder(FlatBufferBuilder builder, VectorOffset axisOrderOffset);
    public static VectorOffset CreateAxisOrderVector(FlatBufferBuilder builder, Int32[] data);
    public static VectorOffset CreateAxisOrderVectorBlock(FlatBufferBuilder builder, Int32[] data);
    public static VectorOffset CreateAxisOrderVectorBlock(FlatBufferBuilder builder, ArraySegment`1<int> data);
    public static VectorOffset CreateAxisOrderVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartAxisOrderVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<SparseTensorIndexCSF> EndSparseTensorIndexCSF(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.SparseTensorIndexCSFVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal static class Apache.Arrow.Flatbuf.SparseTensorIndexVerify : object {
    public static bool Verify(Verifier verifier, byte typeId, UInt32 tablePos);
}
internal static class Apache.Arrow.Flatbuf.SparseTensorVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Struct_ : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Struct_ GetRootAsStruct_(ByteBuffer _bb);
    public static Struct_ GetRootAsStruct_(ByteBuffer _bb, Struct_ obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Struct_ __assign(int _i, ByteBuffer _bb);
    public static void StartStruct_(FlatBufferBuilder builder);
    public static Offset`1<Struct_> EndStruct_(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.Struct_Verify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Tensor : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public Type TypeType { get; }
    public int ShapeLength { get; }
    public int StridesLength { get; }
    public Nullable`1<Buffer> Data { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Tensor GetRootAsTensor(ByteBuffer _bb);
    public static Tensor GetRootAsTensor(ByteBuffer _bb, Tensor obj);
    public static bool VerifyTensor(ByteBuffer _bb);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Tensor __assign(int _i, ByteBuffer _bb);
    public Type get_TypeType();
    public Nullable`1<TTable> Type();
    public Null TypeAsNull();
    public Int TypeAsInt();
    public FloatingPoint TypeAsFloatingPoint();
    public Binary TypeAsBinary();
    public Utf8 TypeAsUtf8();
    public Bool TypeAsBool();
    public Decimal TypeAsDecimal();
    public Date TypeAsDate();
    public Time TypeAsTime();
    public Timestamp TypeAsTimestamp();
    public Interval TypeAsInterval();
    public List TypeAsList();
    public Struct_ TypeAsStruct_();
    public Union TypeAsUnion();
    public FixedSizeBinary TypeAsFixedSizeBinary();
    public FixedSizeList TypeAsFixedSizeList();
    public Map TypeAsMap();
    public Duration TypeAsDuration();
    public LargeBinary TypeAsLargeBinary();
    public LargeUtf8 TypeAsLargeUtf8();
    public LargeList TypeAsLargeList();
    public RunEndEncoded TypeAsRunEndEncoded();
    public BinaryView TypeAsBinaryView();
    public Utf8View TypeAsUtf8View();
    public ListView TypeAsListView();
    public LargeListView TypeAsLargeListView();
    public Nullable`1<TensorDim> Shape(int j);
    public int get_ShapeLength();
    public long Strides(int j);
    public int get_StridesLength();
    public Span`1<long> GetStridesBytes();
    public Int64[] GetStridesArray();
    public Nullable`1<Buffer> get_Data();
    public static void StartTensor(FlatBufferBuilder builder);
    public static void AddTypeType(FlatBufferBuilder builder, Type typeType);
    public static void AddType(FlatBufferBuilder builder, int typeOffset);
    public static void AddShape(FlatBufferBuilder builder, VectorOffset shapeOffset);
    public static VectorOffset CreateShapeVector(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, Offset`1[] data);
    public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, ArraySegment`1<Offset`1<TensorDim>> data);
    public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartShapeVector(FlatBufferBuilder builder, int numElems);
    public static void AddStrides(FlatBufferBuilder builder, VectorOffset stridesOffset);
    public static VectorOffset CreateStridesVector(FlatBufferBuilder builder, Int64[] data);
    public static VectorOffset CreateStridesVectorBlock(FlatBufferBuilder builder, Int64[] data);
    public static VectorOffset CreateStridesVectorBlock(FlatBufferBuilder builder, ArraySegment`1<long> data);
    public static VectorOffset CreateStridesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartStridesVector(FlatBufferBuilder builder, int numElems);
    public static void AddData(FlatBufferBuilder builder, Offset`1<Buffer> dataOffset);
    public static Offset`1<Tensor> EndTensor(FlatBufferBuilder builder);
    public static void FinishTensorBuffer(FlatBufferBuilder builder, Offset`1<Tensor> offset);
    public static void FinishSizePrefixedTensorBuffer(FlatBufferBuilder builder, Offset`1<Tensor> offset);
}
internal class Apache.Arrow.Flatbuf.TensorDim : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public long Size { get; }
    public string Name { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static TensorDim GetRootAsTensorDim(ByteBuffer _bb);
    public static TensorDim GetRootAsTensorDim(ByteBuffer _bb, TensorDim obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public TensorDim __assign(int _i, ByteBuffer _bb);
    public long get_Size();
    public string get_Name();
    public Span`1<byte> GetNameBytes();
    public Byte[] GetNameArray();
    public static Offset`1<TensorDim> CreateTensorDim(FlatBufferBuilder builder, long size, StringOffset nameOffset);
    public static void StartTensorDim(FlatBufferBuilder builder);
    public static void AddSize(FlatBufferBuilder builder, long size);
    public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset);
    public static Offset`1<TensorDim> EndTensorDim(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.TensorDimVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal static class Apache.Arrow.Flatbuf.TensorVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Time : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public TimeUnit Unit { get; }
    public int BitWidth { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Time GetRootAsTime(ByteBuffer _bb);
    public static Time GetRootAsTime(ByteBuffer _bb, Time obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Time __assign(int _i, ByteBuffer _bb);
    public TimeUnit get_Unit();
    public int get_BitWidth();
    public static Offset`1<Time> CreateTime(FlatBufferBuilder builder, TimeUnit unit, int bitWidth);
    public static void StartTime(FlatBufferBuilder builder);
    public static void AddUnit(FlatBufferBuilder builder, TimeUnit unit);
    public static void AddBitWidth(FlatBufferBuilder builder, int bitWidth);
    public static Offset`1<Time> EndTime(FlatBufferBuilder builder);
}
internal class Apache.Arrow.Flatbuf.Timestamp : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public TimeUnit Unit { get; }
    public string Timezone { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Timestamp GetRootAsTimestamp(ByteBuffer _bb);
    public static Timestamp GetRootAsTimestamp(ByteBuffer _bb, Timestamp obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Timestamp __assign(int _i, ByteBuffer _bb);
    public TimeUnit get_Unit();
    public string get_Timezone();
    public Span`1<byte> GetTimezoneBytes();
    public Byte[] GetTimezoneArray();
    public static Offset`1<Timestamp> CreateTimestamp(FlatBufferBuilder builder, TimeUnit unit, StringOffset timezoneOffset);
    public static void StartTimestamp(FlatBufferBuilder builder);
    public static void AddUnit(FlatBufferBuilder builder, TimeUnit unit);
    public static void AddTimezone(FlatBufferBuilder builder, StringOffset timezoneOffset);
    public static Offset`1<Timestamp> EndTimestamp(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.TimestampVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.TimeUnit : Enum {
    public short value__;
    public static TimeUnit SECOND;
    public static TimeUnit MILLISECOND;
    public static TimeUnit MICROSECOND;
    public static TimeUnit NANOSECOND;
}
internal static class Apache.Arrow.Flatbuf.TimeVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal enum Apache.Arrow.Flatbuf.Type : Enum {
    public byte value__;
    public static Type NONE;
    public static Type Null;
    public static Type Int;
    public static Type FloatingPoint;
    public static Type Binary;
    public static Type Utf8;
    public static Type Bool;
    public static Type Decimal;
    public static Type Date;
    public static Type Time;
    public static Type Timestamp;
    public static Type Interval;
    public static Type List;
    public static Type Struct_;
    public static Type Union;
    public static Type FixedSizeBinary;
    public static Type FixedSizeList;
    public static Type Map;
    public static Type Duration;
    public static Type LargeBinary;
    public static Type LargeUtf8;
    public static Type LargeList;
    public static Type RunEndEncoded;
    public static Type BinaryView;
    public static Type Utf8View;
    public static Type ListView;
    public static Type LargeListView;
}
internal static class Apache.Arrow.Flatbuf.TypeVerify : object {
    public static bool Verify(Verifier verifier, byte typeId, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Union : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public UnionMode Mode { get; }
    public int TypeIdsLength { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Union GetRootAsUnion(ByteBuffer _bb);
    public static Union GetRootAsUnion(ByteBuffer _bb, Union obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Union __assign(int _i, ByteBuffer _bb);
    public UnionMode get_Mode();
    public int TypeIds(int j);
    public int get_TypeIdsLength();
    public Span`1<int> GetTypeIdsBytes();
    public Int32[] GetTypeIdsArray();
    public static Offset`1<Union> CreateUnion(FlatBufferBuilder builder, UnionMode mode, VectorOffset typeIdsOffset);
    public static void StartUnion(FlatBufferBuilder builder);
    public static void AddMode(FlatBufferBuilder builder, UnionMode mode);
    public static void AddTypeIds(FlatBufferBuilder builder, VectorOffset typeIdsOffset);
    public static VectorOffset CreateTypeIdsVector(FlatBufferBuilder builder, Int32[] data);
    public static VectorOffset CreateTypeIdsVectorBlock(FlatBufferBuilder builder, Int32[] data);
    public static VectorOffset CreateTypeIdsVectorBlock(FlatBufferBuilder builder, ArraySegment`1<int> data);
    public static VectorOffset CreateTypeIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes);
    public static void StartTypeIdsVector(FlatBufferBuilder builder, int numElems);
    public static Offset`1<Union> EndUnion(FlatBufferBuilder builder);
}
internal enum Apache.Arrow.Flatbuf.UnionMode : Enum {
    public short value__;
    public static UnionMode Sparse;
    public static UnionMode Dense;
}
internal static class Apache.Arrow.Flatbuf.UnionVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Utf8 : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Utf8 GetRootAsUtf8(ByteBuffer _bb);
    public static Utf8 GetRootAsUtf8(ByteBuffer _bb, Utf8 obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Utf8 __assign(int _i, ByteBuffer _bb);
    public static void StartUtf8(FlatBufferBuilder builder);
    public static Offset`1<Utf8> EndUtf8(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.Utf8Verify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
internal class Apache.Arrow.Flatbuf.Utf8View : ValueType {
    private Table __p;
    public ByteBuffer ByteBuffer { get; }
    public sealed virtual ByteBuffer get_ByteBuffer();
    public static void ValidateVersion();
    public static Utf8View GetRootAsUtf8View(ByteBuffer _bb);
    public static Utf8View GetRootAsUtf8View(ByteBuffer _bb, Utf8View obj);
    public sealed virtual void __init(int _i, ByteBuffer _bb);
    public Utf8View __assign(int _i, ByteBuffer _bb);
    public static void StartUtf8View(FlatBufferBuilder builder);
    public static Offset`1<Utf8View> EndUtf8View(FlatBufferBuilder builder);
}
internal static class Apache.Arrow.Flatbuf.Utf8ViewVerify : object {
    public static bool Verify(Verifier verifier, UInt32 tablePos);
}
[ExtensionAttribute]
internal static class Apache.Arrow.FlatbufExtensions : object {
    [ExtensionAttribute]
public static IntervalUnit ToArrow(IntervalUnit unit);
    [ExtensionAttribute]
public static DateUnit ToArrow(DateUnit unit);
    [ExtensionAttribute]
public static TimeUnit ToArrow(TimeUnit unit);
    [ExtensionAttribute]
public static UnionMode ToArrow(UnionMode mode);
}
public class Apache.Arrow.FloatArray : PrimitiveArray`1<float> {
    public FloatArray(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public FloatArray(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public interface Apache.Arrow.IArrowArray {
    public int Length { get; }
    public int Offset { get; }
    public int NullCount { get; }
    public ArrayData Data { get; }
    public abstract virtual bool IsNull(int index);
    public abstract virtual bool IsValid(int index);
    public abstract virtual int get_Length();
    public abstract virtual int get_Offset();
    public abstract virtual int get_NullCount();
    public abstract virtual ArrayData get_Data();
    public abstract virtual void Accept(IArrowArrayVisitor visitor);
}
public interface Apache.Arrow.IArrowArrayBuilder {
    public int Length { get; }
    public abstract virtual int get_Length();
}
public interface Apache.Arrow.IArrowArrayBuilder`1 {
    public abstract virtual TArray Build(MemoryAllocator allocator);
}
public interface Apache.Arrow.IArrowArrayBuilder`2 {
    public abstract virtual TBuilder Reserve(int capacity);
    public abstract virtual TBuilder Resize(int length);
    public abstract virtual TBuilder Clear();
    public abstract virtual TBuilder AppendNull();
}
public interface Apache.Arrow.IArrowArrayBuilder`3 {
    public abstract virtual TBuilder Append(T value);
    public abstract virtual TBuilder Append(ReadOnlySpan`1<T> span);
    public abstract virtual TBuilder AppendRange(IEnumerable`1<T> values);
    public abstract virtual TBuilder Swap(int i, int j);
    public abstract virtual TBuilder Set(int index, T value);
}
public interface Apache.Arrow.IArrowArrayVisitor {
    public abstract virtual void Visit(IArrowArray array);
}
public interface Apache.Arrow.IArrowArrayVisitor`1 {
    public abstract virtual void Visit(T array);
}
public interface Apache.Arrow.IArrowRecord {
    public IRecordType Schema { get; }
    public int ColumnCount { get; }
    public abstract virtual IRecordType get_Schema();
    public abstract virtual int get_ColumnCount();
    public abstract virtual IArrowArray Column(string columnName, IEqualityComparer`1<string> comparer);
    public abstract virtual IArrowArray Column(int columnIndex);
}
public class Apache.Arrow.Int16Array : PrimitiveArray`1<short> {
    public Int16Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Int16Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.Int32Array : PrimitiveArray`1<int> {
    public Int32Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Int32Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.Int64Array : PrimitiveArray`1<long> {
    public Int64Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Int64Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.Int8Array : PrimitiveArray`1<sbyte> {
    public Int8Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Int8Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
internal static class Apache.Arrow.IntervalArray : object {
    internal static IArrowArray Create(ArrayData data);
}
public abstract class Apache.Arrow.IntervalArray`1 : PrimitiveArray`1<T> {
    public IntervalType Type { get; }
    public IntervalUnit Unit { get; }
    protected IntervalArray`1(ArrayData data);
    public IntervalType get_Type();
    public IntervalUnit get_Unit();
    internal static IArrowArray Create(ArrayData data);
    internal static void ValidateUnit(IntervalUnit expected, IntervalUnit actual);
}
internal static class Apache.Arrow.Ipc.ArrowFileConstants : object {
    public static Byte[] Magic;
    private static ArrowFileConstants();
}
public class Apache.Arrow.Ipc.ArrowFileReader : ArrowStreamReader {
    private ArrowFileReaderImplementation Implementation { get; }
    public bool IsFileValid { get; }
    public ArrowFileReader(Stream stream);
    public ArrowFileReader(Stream stream, ICompressionCodecFactory compressionCodecFactory);
    public ArrowFileReader(Stream stream, MemoryAllocator allocator);
    public ArrowFileReader(Stream stream, MemoryAllocator allocator, ICompressionCodecFactory compressionCodecFactory);
    public ArrowFileReader(Stream stream, bool leaveOpen);
    public ArrowFileReader(Stream stream, MemoryAllocator allocator, bool leaveOpen);
    public ArrowFileReader(Stream stream, MemoryAllocator allocator, ICompressionCodecFactory compressionCodecFactory, bool leaveOpen);
    private ArrowFileReaderImplementation get_Implementation();
    public bool get_IsFileValid();
    public static ArrowFileReader FromFile(string filename);
    public ValueTask`1<int> RecordBatchCountAsync();
    public ValueTask`1<RecordBatch> ReadRecordBatchAsync(int index, CancellationToken cancellationToken);
}
internal class Apache.Arrow.Ipc.ArrowFileReaderImplementation : ArrowStreamReaderImplementation {
    [CompilerGeneratedAttribute]
private bool <IsFileValid>k__BackingField;
    private int _recordBatchIndex;
    private ArrowFooter _footer;
    public bool IsFileValid { get; private set; }
    private bool HasReadDictionaries { get; }
    public ArrowFileReaderImplementation(Stream stream, MemoryAllocator allocator, ICompressionCodecFactory compressionCodecFactory, bool leaveOpen);
    [CompilerGeneratedAttribute]
public bool get_IsFileValid();
    [CompilerGeneratedAttribute]
private void set_IsFileValid(bool value);
    private bool get_HasReadDictionaries();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<RecordBatchCountAsync>d__9")]
public ValueTask`1<int> RecordBatchCountAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<ReadSchemaAsync>d__10")]
public virtual ValueTask ReadSchemaAsync(CancellationToken cancellationToken);
    public virtual void ReadSchema();
    private long GetFooterLengthPosition();
    private static int ReadFooterLength(Memory`1<byte> buffer);
    private void ReadSchema(Memory`1<byte> buffer);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<ReadRecordBatchAsync>d__15")]
public ValueTask`1<RecordBatch> ReadRecordBatchAsync(int index, CancellationToken cancellationToken);
    public RecordBatch ReadRecordBatch(int index);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<ReadNextRecordBatchAsync>d__17")]
public virtual ValueTask`1<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);
    public virtual RecordBatch ReadNextRecordBatch();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<ReadDictionariesAsync>d__19")]
private ValueTask ReadDictionariesAsync(CancellationToken cancellationToken);
    private void ReadDictionaries();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<ValidateFileAsync>d__21")]
private ValueTask ValidateFileAsync(CancellationToken cancellationToken);
    private void ValidateFile();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileReaderImplementation/<ValidateMagicAsync>d__23")]
private ValueTask ValidateMagicAsync(CancellationToken cancellationToken);
    private void ValidateMagic();
    private void VerifyMagic(Memory`1<byte> buffer);
}
public class Apache.Arrow.Ipc.ArrowFileWriter : ArrowStreamWriter {
    private long _currentRecordBatchOffset;
    private long _currentDictionaryOffset;
    [CompilerGeneratedAttribute]
private List`1<Block> <DictionaryBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Block> <RecordBatchBlocks>k__BackingField;
    private List`1<Block> DictionaryBlocks { get; private set; }
    private List`1<Block> RecordBatchBlocks { get; }
    public ArrowFileWriter(Stream stream, Schema schema);
    public ArrowFileWriter(Stream stream, Schema schema, bool leaveOpen);
    public ArrowFileWriter(Stream stream, Schema schema, bool leaveOpen, IpcOptions options);
    public ArrowFileWriter(Stream stream, Schema schema, bool leaveOpen, IpcOptions options, MemoryAllocator allocator);
    [CompilerGeneratedAttribute]
private List`1<Block> get_DictionaryBlocks();
    [CompilerGeneratedAttribute]
private void set_DictionaryBlocks(List`1<Block> value);
    [CompilerGeneratedAttribute]
private List`1<Block> get_RecordBatchBlocks();
    public virtual void WriteRecordBatch(RecordBatch recordBatch);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileWriter/<WriteRecordBatchAsync>d__14")]
public virtual Task WriteRecordBatchAsync(RecordBatch recordBatch, CancellationToken cancellationToken);
    private protected virtual void StartingWritingRecordBatch();
    private protected virtual void FinishedWritingRecordBatch(long bodyLength, long metadataLength);
    private protected virtual void StartingWritingDictionary();
    private protected virtual void FinishedWritingDictionary(long bodyLength, long metadataLength);
    private protected virtual void WriteEndInternal();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileWriter/<WriteEndInternalAsync>d__20")]
private protected virtual ValueTask WriteEndInternalAsync(CancellationToken cancellationToken);
    private protected virtual void WriteStartInternal();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileWriter/<WriteStartInternalAsync>d__22")]
private protected virtual ValueTask WriteStartInternalAsync(CancellationToken cancellationToken);
    private void WriteFooter(Schema schema);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowFileWriter/<WriteFooterAsync>d__24")]
private Task WriteFooterAsync(Schema schema, CancellationToken cancellationToken);
    private void WriteMagic();
    private ValueTask WriteMagicAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(CancellationToken cancellationToken);
}
internal class Apache.Arrow.Ipc.ArrowFooter : object {
    [CompilerGeneratedAttribute]
private Schema <Schema>k__BackingField;
    private List`1<Block> _dictionaries;
    private List`1<Block> _recordBatches;
    public Schema Schema { get; }
    public IReadOnlyList`1<Block> Dictionaries { get; }
    public IReadOnlyList`1<Block> RecordBatches { get; }
    public int RecordBatchCount { get; }
    public int DictionaryCount { get; }
    public ArrowFooter(Schema schema, IEnumerable`1<Block> dictionaries, IEnumerable`1<Block> recordBatches);
    public ArrowFooter(Footer footer, DictionaryMemo& dictionaryMemo);
    [CompilerGeneratedAttribute]
public Schema get_Schema();
    public IReadOnlyList`1<Block> get_Dictionaries();
    public IReadOnlyList`1<Block> get_RecordBatches();
    public Block GetRecordBatchBlock(int i);
    public Block GetDictionaryBlock(int i);
    public int get_RecordBatchCount();
    public int get_DictionaryCount();
    [IteratorStateMachineAttribute("Apache.Arrow.Ipc.ArrowFooter/<GetDictionaries>d__17")]
private static IEnumerable`1<Block> GetDictionaries(Footer footer);
    [IteratorStateMachineAttribute("Apache.Arrow.Ipc.ArrowFooter/<GetRecordBatches>d__18")]
private static IEnumerable`1<Block> GetRecordBatches(Footer footer);
}
internal class Apache.Arrow.Ipc.ArrowMemoryReaderImplementation : ArrowReaderImplementation {
    private ReadOnlyMemory`1<byte> _buffer;
    private int _bufferPosition;
    public ArrowMemoryReaderImplementation(ReadOnlyMemory`1<byte> buffer, ICompressionCodecFactory compressionCodecFactory);
    public virtual ValueTask ReadSchemaAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);
    public virtual RecordBatch ReadNextRecordBatch();
    public virtual void ReadSchema();
}
internal abstract class Apache.Arrow.Ipc.ArrowReaderImplementation : object {
    private protected DictionaryMemo _dictionaryMemo;
    private protected MemoryAllocator _allocator;
    private ICompressionCodecFactory _compressionCodecFactory;
    private protected Schema _schema;
    public Schema Schema { get; }
    protected internal bool HasReadSchema { get; }
    private protected DictionaryMemo DictionaryMemo { get; }
    private protected ArrowReaderImplementation(MemoryAllocator allocator, ICompressionCodecFactory compressionCodecFactory);
    public Schema get_Schema();
    protected internal bool get_HasReadSchema();
    private protected DictionaryMemo get_DictionaryMemo();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual ValueTask ReadSchemaAsync(CancellationToken cancellationToken);
    public abstract virtual void ReadSchema();
    public abstract virtual ValueTask`1<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);
    public abstract virtual RecordBatch ReadNextRecordBatch();
    internal static T ReadMessage(ByteBuffer bb);
    private static bool MatchEnum(MessageHeader messageHeader, Type flatBuffType);
    protected RecordBatch CreateArrowObjectFromMessage(Message message, ByteBuffer bodyByteBuffer, IMemoryOwner`1<byte> memoryOwner);
    internal static ByteBuffer CreateByteBuffer(ReadOnlyMemory`1<byte> buffer);
    private void ReadDictionaryBatch(MetadataVersion version, DictionaryBatch dictionaryBatch, ByteBuffer bodyByteBuffer, IMemoryOwner`1<byte> memoryOwner);
    private List`1<IArrowArray> BuildArrays(MetadataVersion version, Schema schema, ByteBuffer messageBuffer, RecordBatch recordBatchMessage);
    private IBufferCreator GetBufferCreator(Nullable`1<BodyCompression> compression);
    private ArrayData LoadField(MetadataVersion version, RecordBatchEnumerator& recordBatchEnumerator, Field field, FieldNode& fieldNode, ByteBuffer bodyData, IBufferCreator bufferCreator);
    private ArrayData[] GetChildren(MetadataVersion version, RecordBatchEnumerator& recordBatchEnumerator, Field field, ByteBuffer bodyData, IBufferCreator bufferCreator);
    private ArrowBuffer BuildArrowBuffer(ByteBuffer bodyData, Buffer buffer, IBufferCreator bufferCreator);
}
public class Apache.Arrow.Ipc.ArrowStreamReader : object {
    private protected ArrowReaderImplementation _implementation;
    public Schema Schema { get; }
    public ArrowStreamReader(Stream stream);
    public ArrowStreamReader(Stream stream, MemoryAllocator allocator);
    public ArrowStreamReader(Stream stream, ICompressionCodecFactory compressionCodecFactory);
    public ArrowStreamReader(Stream stream, bool leaveOpen);
    public ArrowStreamReader(Stream stream, MemoryAllocator allocator, bool leaveOpen);
    public ArrowStreamReader(Stream stream, ICompressionCodecFactory compressionCodecFactory, bool leaveOpen);
    public ArrowStreamReader(Stream stream, MemoryAllocator allocator, ICompressionCodecFactory compressionCodecFactory, bool leaveOpen);
    public ArrowStreamReader(ReadOnlyMemory`1<byte> buffer);
    public ArrowStreamReader(ReadOnlyMemory`1<byte> buffer, ICompressionCodecFactory compressionCodecFactory);
    private protected ArrowStreamReader(ArrowReaderImplementation implementation);
    public sealed virtual Schema get_Schema();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamReader/<GetSchema>d__15")]
public ValueTask`1<Schema> GetSchema(CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);
    public RecordBatch ReadNextRecordBatch();
}
internal class Apache.Arrow.Ipc.ArrowStreamReaderImplementation : ArrowReaderImplementation {
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    private bool _leaveOpen;
    public Stream BaseStream { get; }
    public ArrowStreamReaderImplementation(Stream stream, MemoryAllocator allocator, ICompressionCodecFactory compressionCodecFactory, bool leaveOpen);
    [CompilerGeneratedAttribute]
public Stream get_BaseStream();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamReaderImplementation/<ReadNextRecordBatchAsync>d__6")]
public virtual ValueTask`1<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);
    public virtual RecordBatch ReadNextRecordBatch();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamReaderImplementation/<ReadRecordBatchAsync>d__8")]
protected ValueTask`1<RecordBatch> ReadRecordBatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamReaderImplementation/<ReadMessageAsync>d__9")]
protected ValueTask`1<ReadResult> ReadMessageAsync(CancellationToken cancellationToken);
    protected RecordBatch ReadRecordBatch();
    protected ReadResult ReadMessage();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamReaderImplementation/<ReadSchemaAsync>d__12")]
public virtual ValueTask ReadSchemaAsync(CancellationToken cancellationToken);
    public virtual void ReadSchema();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamReaderImplementation/<ReadMessageLengthAsync>d__14")]
private ValueTask`1<int> ReadMessageLengthAsync(bool throwOnFullRead, CancellationToken cancellationToken);
    private int ReadMessageLength(bool throwOnFullRead);
    internal static void EnsureFullRead(Memory`1<byte> buffer, int bytesRead);
}
public class Apache.Arrow.Ipc.ArrowStreamWriter : object {
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayPool`1<byte> <Buffers>k__BackingField;
    [CompilerGeneratedAttribute]
private FlatBufferBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWrittenSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWrittenDictionaryBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWrittenStart>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWrittenEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private Schema <Schema>k__BackingField;
    private bool _leaveOpen;
    private IpcOptions _options;
    private MemoryAllocator _allocator;
    private MemoryStream _compressionStream;
    private protected static MetadataVersion CurrentMetadataVersion;
    private static Byte[] s_padding;
    private ArrowTypeFlatbufferBuilder _fieldTypeBuilder;
    private DictionaryMemo _dictionaryMemo;
    protected Stream BaseStream { get; }
    protected ArrayPool`1<byte> Buffers { get; }
    private protected FlatBufferBuilder Builder { get; }
    protected bool HasWrittenSchema { get; protected set; }
    private bool HasWrittenDictionaryBatch { get; private set; }
    private bool HasWrittenStart { get; private set; }
    private bool HasWrittenEnd { get; private set; }
    protected Schema Schema { get; }
    private DictionaryMemo DictionaryMemo { get; }
    public ArrowStreamWriter(Stream baseStream, Schema schema);
    public ArrowStreamWriter(Stream baseStream, Schema schema, bool leaveOpen);
    public ArrowStreamWriter(Stream baseStream, Schema schema, bool leaveOpen, IpcOptions options);
    public ArrowStreamWriter(Stream baseStream, Schema schema, bool leaveOpen, IpcOptions options, MemoryAllocator allocator);
    private static ArrowStreamWriter();
    [CompilerGeneratedAttribute]
protected Stream get_BaseStream();
    [CompilerGeneratedAttribute]
protected ArrayPool`1<byte> get_Buffers();
    [CompilerGeneratedAttribute]
private protected FlatBufferBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected bool get_HasWrittenSchema();
    [CompilerGeneratedAttribute]
protected void set_HasWrittenSchema(bool value);
    [CompilerGeneratedAttribute]
private bool get_HasWrittenDictionaryBatch();
    [CompilerGeneratedAttribute]
private void set_HasWrittenDictionaryBatch(bool value);
    [CompilerGeneratedAttribute]
private bool get_HasWrittenStart();
    [CompilerGeneratedAttribute]
private void set_HasWrittenStart(bool value);
    [CompilerGeneratedAttribute]
private bool get_HasWrittenEnd();
    [CompilerGeneratedAttribute]
private void set_HasWrittenEnd(bool value);
    [CompilerGeneratedAttribute]
protected Schema get_Schema();
    private DictionaryMemo get_DictionaryMemo();
    private Offset`1<BodyCompression> GetBodyCompression();
    private protected void WriteRecordBatchInternal(RecordBatch recordBatch);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteRecordBatchInternalAsync>d__45")]
private protected Task WriteRecordBatchInternalAsync(RecordBatch recordBatch, CancellationToken cancellationToken);
    private long WriteBufferData(IReadOnlyList`1<Buffer> buffers);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteBufferDataAsync>d__47")]
private ValueTask`1<long> WriteBufferDataAsync(IReadOnlyList`1<Buffer> buffers, CancellationToken cancellationToken);
    private Tuple`3<ArrowRecordBatchFlatBufferBuilder, VectorOffset, VectorOffset> PrepareWritingRecordBatch(RecordBatch recordBatch);
    private Tuple`3<ArrowRecordBatchFlatBufferBuilder, VectorOffset, VectorOffset> PrepareWritingRecordBatch(IReadOnlyList`1<Field> fields, IReadOnlyList`1<IArrowArray> arrays);
    private protected virtual void StartingWritingDictionary();
    private protected virtual void FinishedWritingDictionary(long bodyLength, long metadataLength);
    private protected void WriteDictionaries(DictionaryMemo dictionaryMemo);
    private protected void WriteDictionary(long id, IArrowType valueType, IArrowArray dictionary);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteDictionariesAsync>d__54")]
private protected Task WriteDictionariesAsync(DictionaryMemo dictionaryMemo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteDictionaryAsync>d__55")]
private protected Task WriteDictionaryAsync(long id, IArrowType valueType, IArrowArray dictionary, CancellationToken cancellationToken);
    private Tuple`2<ArrowRecordBatchFlatBufferBuilder, Offset`1<DictionaryBatch>> CreateDictionaryBatchOffset(long id, IArrowType valueType, IArrowArray dictionary);
    private protected virtual void WriteStartInternal();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteStartInternalAsync>d__58")]
private protected virtual ValueTask WriteStartInternalAsync(CancellationToken cancellationToken);
    private protected virtual void WriteEndInternal();
    private protected virtual ValueTask WriteEndInternalAsync(CancellationToken cancellationToken);
    private protected virtual void StartingWritingRecordBatch();
    private protected virtual void FinishedWritingRecordBatch(long bodyLength, long metadataLength);
    public virtual void WriteRecordBatch(RecordBatch recordBatch);
    public virtual Task WriteRecordBatchAsync(RecordBatch recordBatch, CancellationToken cancellationToken);
    public void WriteStart();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteStartAsync>d__66")]
public Task WriteStartAsync(CancellationToken cancellationToken);
    public void WriteEnd();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteEndAsync>d__68")]
public Task WriteEndAsync(CancellationToken cancellationToken);
    private protected Offset`1<Schema> SerializeSchema(Schema schema);
    private VectorOffset GetChildrenFieldOffset(Field field);
    private VectorOffset GetFieldMetadataOffset(Field field);
    private Offset`1<DictionaryEncoding> GetDictionaryOffset(Field field);
    private Offset`1[] GetMetadataOffsets(IReadOnlyDictionary`2<string, string> metadata);
    private Offset`1<Schema> WriteSchema(Schema schema);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteSchemaAsync>d__75")]
private ValueTask`1<Offset`1<Schema>> WriteSchemaAsync(Schema schema, CancellationToken cancellationToken);
    private protected long WriteMessage(MessageHeader headerType, Offset`1<T> headerOffset, int bodyLength);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteMessageAsync>d__77`1")]
private protected virtual ValueTask`1<long> WriteMessageAsync(MessageHeader headerType, Offset`1<T> headerOffset, int bodyLength, CancellationToken cancellationToken);
    private protected void WriteFlatBuffer();
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteFlatBufferAsync>d__79")]
private protected ValueTask WriteFlatBufferAsync(CancellationToken cancellationToken);
    private void WriteIpcMessageLength(int length);
    [AsyncStateMachineAttribute("Apache.Arrow.Ipc.ArrowStreamWriter/<WriteIpcMessageLengthAsync>d__81")]
private ValueTask WriteIpcMessageLengthAsync(int length, CancellationToken cancellationToken);
    protected int CalculatePadding(long offset, int alignment);
    private static int CalculatePaddedBufferLength(int length);
    private protected void WritePadding(int length);
    private protected ValueTask WritePaddingAsync(int length);
    public virtual void Dispose();
}
internal class Apache.Arrow.Ipc.ArrowTypeFlatbufferBuilder : object {
    private TypeVisitor _visitor;
    public ArrowTypeFlatbufferBuilder(FlatBufferBuilder builder);
    public FieldType BuildFieldType(Field field);
    private static TimeUnit ToFlatBuffer(TimeUnit unit);
    private static UnionMode ToFlatBuffer(UnionMode mode);
    private static IntervalUnit ToFlatBuffer(IntervalUnit unit);
}
[IsReadOnlyAttribute]
internal class Apache.Arrow.Ipc.Block : ValueType {
    public long Offset;
    public long BodyLength;
    public int MetadataLength;
    public Block(long offset, long length, int metadataLength);
    public Block(Block block);
}
public enum Apache.Arrow.Ipc.CompressionCodecType : Enum {
    public int value__;
    public static CompressionCodecType Lz4Frame;
    public static CompressionCodecType Zstd;
}
internal class Apache.Arrow.Ipc.DecompressingBufferCreator : object {
    private ICompressionCodec _compressionCodec;
    private MemoryAllocator _allocator;
    public DecompressingBufferCreator(ICompressionCodec compressionCodec, MemoryAllocator allocator);
    public sealed virtual ArrowBuffer CreateBuffer(ReadOnlyMemory`1<byte> source);
    public sealed virtual void Dispose();
}
internal static class Apache.Arrow.Ipc.DictionaryCollector : object {
    internal static void Collect(RecordBatch recordBatch, DictionaryMemo& dictionaryMemo);
    private static void CollectDictionary(Field field, ArrayData arrayData, DictionaryMemo& dictionaryMemo);
    private static void WalkChildren(ArrayData arrayData, DictionaryMemo& dictionaryMemo);
}
internal class Apache.Arrow.Ipc.DictionaryMemo : object {
    private Dictionary`2<long, IArrowArray> _idToDictionary;
    private Dictionary`2<long, IArrowType> _idToValueType;
    private Dictionary`2<Field, long> _fieldToId;
    public int DictionaryCount { get; }
    public int LoadedDictionaryCount { get; }
    public int get_DictionaryCount();
    public int get_LoadedDictionaryCount();
    public IArrowType GetDictionaryType(long id);
    public IArrowArray GetDictionary(long id);
    public void AddField(long id, Field field);
    public long GetId(Field field);
    public long GetOrAssignId(Field field);
    public void AddOrReplaceDictionary(long id, IArrowArray dictionary);
    public void AddDeltaDictionary(long id, IArrowArray deltaDictionary, MemoryAllocator allocator);
}
public interface Apache.Arrow.Ipc.IArrowArrayStream {
    public Schema Schema { get; }
    public abstract virtual Schema get_Schema();
}
public interface Apache.Arrow.Ipc.IArrowReader {
    public abstract virtual ValueTask`1<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);
}
internal interface Apache.Arrow.Ipc.IBufferCreator {
    public abstract virtual ArrowBuffer CreateBuffer(ReadOnlyMemory`1<byte> source);
}
public interface Apache.Arrow.Ipc.ICompressionCodec {
    public abstract virtual int Decompress(ReadOnlyMemory`1<byte> source, Memory`1<byte> destination);
    public abstract virtual void Compress(ReadOnlyMemory`1<byte> source, Stream destination);
}
public interface Apache.Arrow.Ipc.ICompressionCodecFactory {
    public abstract virtual ICompressionCodec CreateCodec(CompressionCodecType compressionCodecType);
    public abstract virtual ICompressionCodec CreateCodec(CompressionCodecType compressionCodecType, Nullable`1<int> compressionLevel);
}
public class Apache.Arrow.Ipc.IpcOptions : object {
    [CompilerGeneratedAttribute]
private static IpcOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteLegacyIpcFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionCodecType> <CompressionCodec>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompressionCodecFactory <CompressionCodecFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CompressionLevel>k__BackingField;
    internal static IpcOptions Default { get; }
    public bool WriteLegacyIpcFormat { get; public set; }
    public Nullable`1<CompressionCodecType> CompressionCodec { get; public set; }
    public ICompressionCodecFactory CompressionCodecFactory { get; public set; }
    public Nullable`1<int> CompressionLevel { get; public set; }
    internal int SizeOfIpcLength { get; }
    private static IpcOptions();
    [CompilerGeneratedAttribute]
internal static IpcOptions get_Default();
    [CompilerGeneratedAttribute]
public bool get_WriteLegacyIpcFormat();
    [CompilerGeneratedAttribute]
public void set_WriteLegacyIpcFormat(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<CompressionCodecType> get_CompressionCodec();
    [CompilerGeneratedAttribute]
public void set_CompressionCodec(Nullable`1<CompressionCodecType> value);
    [CompilerGeneratedAttribute]
public ICompressionCodecFactory get_CompressionCodecFactory();
    [CompilerGeneratedAttribute]
public void set_CompressionCodecFactory(ICompressionCodecFactory value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CompressionLevel();
    [CompilerGeneratedAttribute]
public void set_CompressionLevel(Nullable`1<int> value);
    internal int get_SizeOfIpcLength();
}
internal class Apache.Arrow.Ipc.MessageSerializer : object {
    public static int IpcContinuationToken;
    public static NumberType GetNumberType(int bitWidth, bool signed);
    internal static Schema GetSchema(Schema schema, DictionaryMemo& dictionaryMemo);
    private static Field FieldFromFlatbuffer(Field flatbufField, DictionaryMemo& dictionaryMemo);
    private static IArrowType GetFieldArrowType(Field field, Field[] childFields);
}
internal class Apache.Arrow.Ipc.NoOpBufferCreator : object {
    public static NoOpBufferCreator Instance;
    private static NoOpBufferCreator();
    public sealed virtual ArrowBuffer CreateBuffer(ReadOnlyMemory`1<byte> source);
    public sealed virtual void Dispose();
}
internal class Apache.Arrow.Ipc.ReadOnlyMemoryBufferAllocator : ByteBufferAllocator {
    private ReadOnlyMemory`1<byte> _buffer;
    public ReadOnlySpan`1<byte> ReadOnlySpan { get; }
    public ReadOnlyMemory`1<byte> ReadOnlyMemory { get; }
    public Memory`1<byte> Memory { get; }
    public Span`1<byte> Span { get; }
    public ReadOnlyMemoryBufferAllocator(ReadOnlyMemory`1<byte> buffer);
    public virtual ReadOnlySpan`1<byte> get_ReadOnlySpan();
    public virtual ReadOnlyMemory`1<byte> get_ReadOnlyMemory();
    public virtual Memory`1<byte> get_Memory();
    public virtual Span`1<byte> get_Span();
    public virtual void GrowFront(int newSize);
}
internal class Apache.Arrow.Ipc.RecordBatchEnumerator : ValueType {
    [CompilerGeneratedAttribute]
private RecordBatch <RecordBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentBufferIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentNodeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentVariadicCountIndex>k__BackingField;
    private RecordBatch RecordBatch { get; }
    internal int CurrentBufferIndex { get; private set; }
    internal int CurrentNodeIndex { get; private set; }
    internal int CurrentVariadicCountIndex { get; private set; }
    internal Buffer CurrentBuffer { get; }
    internal FieldNode CurrentNode { get; }
    internal long CurrentVariadicCount { get; }
    internal RecordBatchEnumerator(RecordBatch& recordBatch);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private RecordBatch get_RecordBatch();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_CurrentBufferIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentBufferIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_CurrentNodeIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentNodeIndex(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_CurrentVariadicCountIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentVariadicCountIndex(int value);
    internal Buffer get_CurrentBuffer();
    internal FieldNode get_CurrentNode();
    internal long get_CurrentVariadicCount();
    internal bool MoveNextBuffer();
    internal bool MoveNextNode();
    internal bool MoveNextVariadicCount();
}
public class Apache.Arrow.ListArray : Array {
    [CompilerGeneratedAttribute]
private IArrowArray <Values>k__BackingField;
    public IArrowArray Values { get; }
    public ArrowBuffer ValueOffsetsBuffer { get; }
    public ReadOnlySpan`1<int> ValueOffsets { get; }
    public ListArray(IArrowType dataType, int length, ArrowBuffer valueOffsetsBuffer, IArrowArray values, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public ListArray(ArrayData data);
    private ListArray(ArrayData data, IArrowArray values);
    internal ListArray(ArrayData data, IArrowArray values, ArrowTypeId typeId);
    [CompilerGeneratedAttribute]
public IArrowArray get_Values();
    public ArrowBuffer get_ValueOffsetsBuffer();
    public ReadOnlySpan`1<int> get_ValueOffsets();
    public virtual void Accept(IArrowArrayVisitor visitor);
    [ObsoleteAttribute("This method has been deprecated. Please use ValueOffsets[index] instead.")]
public int GetValueOffset(int index);
    public int GetValueLength(int index);
    public IArrowArray GetSlicedValues(int index);
    protected virtual void Dispose(bool disposing);
}
public class Apache.Arrow.ListViewArray : Array {
    [CompilerGeneratedAttribute]
private IArrowArray <Values>k__BackingField;
    public IArrowArray Values { get; }
    public ArrowBuffer ValueOffsetsBuffer { get; }
    public ReadOnlySpan`1<int> ValueOffsets { get; }
    public ArrowBuffer SizesBuffer { get; }
    public ReadOnlySpan`1<int> Sizes { get; }
    public ListViewArray(IArrowType dataType, int length, ArrowBuffer valueOffsetsBuffer, ArrowBuffer sizesBuffer, IArrowArray values, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public ListViewArray(ArrayData data);
    private ListViewArray(ArrayData data, IArrowArray values);
    [CompilerGeneratedAttribute]
public IArrowArray get_Values();
    public ArrowBuffer get_ValueOffsetsBuffer();
    public ReadOnlySpan`1<int> get_ValueOffsets();
    public ArrowBuffer get_SizesBuffer();
    public ReadOnlySpan`1<int> get_Sizes();
    public virtual void Accept(IArrowArrayVisitor visitor);
    public int GetValueLength(int index);
    public IArrowArray GetSlicedValues(int index);
    protected virtual void Dispose(bool disposing);
}
public class Apache.Arrow.MapArray : ListArray {
    public StructArray KeyValues { get; }
    public IArrowArray Keys { get; }
    public IArrowArray Values { get; }
    public MapArray(IArrowType dataType, int length, ArrowBuffer valueOffsetsBuffer, IArrowArray structs, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public MapArray(ArrayData data);
    private MapArray(ArrayData data, IArrowArray structs);
    public StructArray get_KeyValues();
    public IArrowArray get_Keys();
    public IArrowArray get_Values();
    public virtual void Accept(IArrowArrayVisitor visitor);
    [IteratorStateMachineAttribute("Apache.Arrow.MapArray/<GetTuples>d__11`4")]
public IEnumerable`1<Tuple`2<K, V>> GetTuples(int index, Func`3<TKeyArray, int, K> getKey, Func`3<TValueArray, int, V> getValue);
    [IteratorStateMachineAttribute("Apache.Arrow.MapArray/<GetKeyValuePairs>d__12`4")]
public IEnumerable`1<KeyValuePair`2<K, V>> GetKeyValuePairs(int index, Func`3<TKeyArray, int, K> getKey, Func`3<TValueArray, int, V> getValue);
}
internal class Apache.Arrow.Memory.ExportedAllocationOwner : object {
    private List`1<IntPtr> _pointers;
    private int _allocationSize;
    private long _referenceCount;
    private bool _disposed;
    protected virtual override void Finalize();
    public IntPtr Allocate(int size);
    public IntPtr Acquire(IntPtr ptr, int offset, int length);
    public sealed virtual void Release(IntPtr ptr, int offset, int length);
    public void IncRef();
    public void DecRef();
    public sealed virtual void Dispose();
}
internal abstract class Apache.Arrow.Memory.ImportedAllocationOwner : object {
    private long _referenceCount;
    private long _managedMemory;
    public IMemoryOwner`1<byte> AddMemory(IntPtr ptr, int offset, int length);
    public sealed virtual void Release(IntPtr ptr, int offset, int length);
    public void Release();
    protected abstract virtual void FinalRelease();
}
internal interface Apache.Arrow.Memory.INativeAllocationOwner {
    public abstract virtual void Release(IntPtr ptr, int offset, int length);
}
internal interface Apache.Arrow.Memory.IOwnableAllocation {
    public abstract virtual bool TryAcquire(IntPtr& ptr, Int32& offset, Int32& length);
}
public abstract class Apache.Arrow.Memory.MemoryAllocator : object {
    public static int DefaultAlignment;
    [CompilerGeneratedAttribute]
private static IMemoryOwner`1<byte> <NullMemoryOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<MemoryAllocator> <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Stats <Statistics>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Alignment>k__BackingField;
    private static IMemoryOwner`1<byte> NullMemoryOwner { get; }
    public static Lazy`1<MemoryAllocator> Default { get; }
    public Stats Statistics { get; }
    protected int Alignment { get; }
    protected MemoryAllocator(int alignment);
    private static MemoryAllocator();
    [CompilerGeneratedAttribute]
private static IMemoryOwner`1<byte> get_NullMemoryOwner();
    [CompilerGeneratedAttribute]
public static Lazy`1<MemoryAllocator> get_Default();
    [CompilerGeneratedAttribute]
public Stats get_Statistics();
    [CompilerGeneratedAttribute]
protected int get_Alignment();
    public IMemoryOwner`1<byte> Allocate(int length);
    private static MemoryAllocator BuildDefault();
    protected abstract virtual IMemoryOwner`1<byte> AllocateInternal(int length, Int32& bytesAllocated);
}
public class Apache.Arrow.Memory.NativeMemoryAllocator : MemoryAllocator {
    internal static INativeAllocationOwner ExclusiveOwner;
    public NativeMemoryAllocator(int alignment);
    private static NativeMemoryAllocator();
    protected virtual IMemoryOwner`1<byte> AllocateInternal(int length, Int32& bytesAllocated);
}
public class Apache.Arrow.Memory.NativeMemoryManager : MemoryManager`1<byte> {
    private IntPtr _ptr;
    private int _offset;
    private int _length;
    private INativeAllocationOwner _owner;
    public NativeMemoryManager(IntPtr ptr, int offset, int length);
    internal NativeMemoryManager(INativeAllocationOwner owner, IntPtr ptr, int offset, int length);
    protected virtual override void Finalize();
    public virtual Span`1<byte> GetSpan();
    public virtual MemoryHandle Pin(int elementIndex);
    public virtual void Unpin();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool Apache.Arrow.Memory.IOwnableAllocation.TryAcquire(IntPtr& ptr, Int32& offset, Int32& length);
    private Void* CalculatePointer(int index);
}
internal class Apache.Arrow.Memory.NullMemoryOwner : object {
    public Memory`1<byte> Memory { get; }
    public sealed virtual Memory`1<byte> get_Memory();
    public sealed virtual void Dispose();
}
public class Apache.Arrow.MonthDayNanosecondIntervalArray : IntervalArray`1<MonthDayNanosecondInterval> {
    public MonthDayNanosecondIntervalArray(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public MonthDayNanosecondIntervalArray(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.NullArray : object {
    [CompilerGeneratedAttribute]
private ArrayData <Data>k__BackingField;
    public ArrayData Data { get; }
    public int Length { get; }
    public int Offset { get; }
    public int NullCount { get; }
    public NullArray(ArrayData data);
    public NullArray(int length);
    [CompilerGeneratedAttribute]
public sealed virtual ArrayData get_Data();
    public sealed virtual int get_Length();
    public sealed virtual int get_Offset();
    public sealed virtual int get_NullCount();
    public sealed virtual void Dispose();
    public sealed virtual bool IsNull(int index);
    public sealed virtual bool IsValid(int index);
    public sealed virtual void Accept(IArrowArrayVisitor visitor);
}
public abstract class Apache.Arrow.PrimitiveArray`1 : Array {
    public ArrowBuffer ValueBuffer { get; }
    public ReadOnlySpan`1<T> Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<T?>.Count { get; }
    private Nullable`1<T> System.Collections.Generic.IReadOnlyList<T?>.Item { get; }
    private int System.Collections.Generic.ICollection<T?>.Count { get; }
    private bool System.Collections.Generic.ICollection<T?>.IsReadOnly { get; }
    protected PrimitiveArray`1(ArrayData data);
    public ArrowBuffer get_ValueBuffer();
    public ReadOnlySpan`1<T> get_Values();
    public Nullable`1<T> GetValue(int index);
    public IList`1<Nullable`1<T>> ToList(bool includeNulls);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<T?>.get_Count();
    private sealed virtual override Nullable`1<T> System.Collections.Generic.IReadOnlyList<T?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.PrimitiveArray`1/<System-Collections-Generic-IEnumerable<T?>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<Nullable`1<T>> System.Collections.Generic.IEnumerable<T?>.GetEnumerator();
    [IteratorStateMachineAttribute("Apache.Arrow.PrimitiveArray`1/<System-Collections-IEnumerable-GetEnumerator>d__12")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<T?>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T?>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T?>.Add(Nullable`1<T> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T?>.Remove(Nullable`1<T> item);
    private sealed virtual override void System.Collections.Generic.ICollection<T?>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T?>.Contains(Nullable`1<T> item);
    private sealed virtual override void System.Collections.Generic.ICollection<T?>.CopyTo(Nullable`1[] array, int arrayIndex);
}
public abstract class Apache.Arrow.PrimitiveArrayBuilder`3 : object {
    [CompilerGeneratedAttribute]
private Builder`1<T> <ValueBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private BitmapBuilder <ValidityBuffer>k__BackingField;
    protected TBuilder Instance { get; }
    protected Builder`1<T> ValueBuffer { get; }
    protected BitmapBuilder ValidityBuffer { get; }
    public int Length { get; }
    protected int NullCount { get; }
    protected TBuilder get_Instance();
    [CompilerGeneratedAttribute]
protected Builder`1<T> get_ValueBuffer();
    [CompilerGeneratedAttribute]
protected BitmapBuilder get_ValidityBuffer();
    public sealed virtual int get_Length();
    protected int get_NullCount();
    public sealed virtual TBuilder Resize(int length);
    public sealed virtual TBuilder Reserve(int capacity);
    public sealed virtual TBuilder Append(T value);
    public TBuilder Append(Nullable`1<T> value);
    public sealed virtual TBuilder Append(ReadOnlySpan`1<T> span);
    public sealed virtual TBuilder AppendRange(IEnumerable`1<T> values);
    public sealed virtual TBuilder AppendNull();
    public sealed virtual TBuilder Clear();
    public sealed virtual TBuilder Set(int index, T value);
    public sealed virtual TBuilder Swap(int i, int j);
    public sealed virtual TArray Build(MemoryAllocator allocator);
    protected abstract virtual TArray Build(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
}
public abstract class Apache.Arrow.PrimitiveArrayBuilder`4 : object {
    [CompilerGeneratedAttribute]
private IArrowArrayBuilder`3<TTo, TArray, IArrowArrayBuilder`1<TArray>> <ArrayBuilder>k__BackingField;
    protected TBuilder Instance { get; }
    protected IArrowArrayBuilder`3<TTo, TArray, IArrowArrayBuilder`1<TArray>> ArrayBuilder { get; }
    public int Length { get; }
    internal PrimitiveArrayBuilder`4(IArrowArrayBuilder`3<TTo, TArray, IArrowArrayBuilder`1<TArray>> builder);
    protected TBuilder get_Instance();
    [CompilerGeneratedAttribute]
protected IArrowArrayBuilder`3<TTo, TArray, IArrowArrayBuilder`1<TArray>> get_ArrayBuilder();
    public sealed virtual int get_Length();
    public sealed virtual TArray Build(MemoryAllocator allocator);
    public sealed virtual TBuilder Append(TFrom value);
    public sealed virtual TBuilder Append(ReadOnlySpan`1<TFrom> span);
    public sealed virtual TBuilder AppendRange(IEnumerable`1<TFrom> values);
    public sealed virtual TBuilder AppendNull();
    public sealed virtual TBuilder Reserve(int capacity);
    public sealed virtual TBuilder Resize(int length);
    public sealed virtual TBuilder Swap(int i, int j);
    public sealed virtual TBuilder Set(int index, TFrom value);
    public sealed virtual TBuilder Clear();
    protected abstract virtual TTo ConvertTo(TFrom value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Apache.Arrow.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExceptionArrayDataInvalidType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExceptionArrayDataInvalidType();
}
public class Apache.Arrow.RecordBatch : object {
    [CompilerGeneratedAttribute]
private Schema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    private IMemoryOwner`1<byte> _memoryOwner;
    private List`1<IArrowArray> _arrays;
    public Schema Schema { get; }
    public int ColumnCount { get; }
    public IEnumerable`1<IArrowArray> Arrays { get; }
    public int Length { get; }
    internal IReadOnlyList`1<IArrowArray> ArrayList { get; }
    private IRecordType Apache.Arrow.IArrowRecord.Schema { get; }
    private int Apache.Arrow.IArrowArray.NullCount { get; }
    private int Apache.Arrow.IArrowArray.Offset { get; }
    private ArrayData Apache.Arrow.IArrowArray.Data { get; }
    public RecordBatch(Schema schema, IEnumerable`1<IArrowArray> data, int length);
    internal RecordBatch(Schema schema, IMemoryOwner`1<byte> memoryOwner, List`1<IArrowArray> arrays, int length);
    [CompilerGeneratedAttribute]
public Schema get_Schema();
    public sealed virtual int get_ColumnCount();
    public IEnumerable`1<IArrowArray> get_Arrays();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    internal IReadOnlyList`1<IArrowArray> get_ArrayList();
    public sealed virtual IArrowArray Column(int i);
    public IArrowArray Column(string columnName);
    public sealed virtual IArrowArray Column(string columnName, IEqualityComparer`1<string> comparer);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public RecordBatch Clone(MemoryAllocator allocator);
    public sealed virtual void Accept(IArrowArrayVisitor visitor);
    public virtual string ToString();
    private sealed virtual override IRecordType Apache.Arrow.IArrowRecord.get_Schema();
    private sealed virtual override int Apache.Arrow.IArrowArray.get_NullCount();
    private sealed virtual override int Apache.Arrow.IArrowArray.get_Offset();
    private sealed virtual override ArrayData Apache.Arrow.IArrowArray.get_Data();
    private sealed virtual override bool Apache.Arrow.IArrowArray.IsNull(int index);
    private sealed virtual override bool Apache.Arrow.IArrowArray.IsValid(int index);
}
public class Apache.Arrow.Scalars.BinaryView : ValueType {
    public static int PrefixLength;
    public static int MaxInlineLength;
    public int Length;
    internal int _prefix;
    internal int _bufferIndex;
    internal int _bufferOffset;
    [FixedBufferAttribute("System.Byte", "12")]
internal <_inline>e__FixedBuffer _inline;
    public bool IsInline { get; }
    public ReadOnlySpan`1<byte> Bytes { get; }
    public int BufferIndex { get; }
    public int BufferOffset { get; }
    public BinaryView(ReadOnlySpan`1<byte> inline);
    public BinaryView(int length, ReadOnlySpan`1<byte> prefix, int bufferIndex, int bufferOffset);
    private BinaryView(int length, int prefix, int bufferIndex, int offset);
    public bool get_IsInline();
    public ReadOnlySpan`1<byte> get_Bytes();
    public int get_BufferIndex();
    public int get_BufferOffset();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BinaryView other);
    internal BinaryView AdjustBufferIndex(int bufferOffset);
}
public class Apache.Arrow.Scalars.DayTimeInterval : ValueType {
    public int Days;
    public int Milliseconds;
    public DayTimeInterval(int days, int milliseconds);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(DayTimeInterval interval);
    public static DateTime op_Addition(DateTime dateTime, DayTimeInterval interval);
    public static DateTime op_Addition(DayTimeInterval interval, DateTime dateTime);
    public static DateTime op_Subtraction(DateTime dateTime, DayTimeInterval interval);
    public static DateTimeOffset op_Addition(DateTimeOffset dateTime, DayTimeInterval interval);
    public static DateTimeOffset op_Addition(DayTimeInterval interval, DateTimeOffset dateTime);
    public static DateTimeOffset op_Subtraction(DateTimeOffset dateTime, DayTimeInterval interval);
}
public class Apache.Arrow.Scalars.MonthDayNanosecondInterval : ValueType {
    public int Months;
    public int Days;
    public long Nanoseconds;
    public MonthDayNanosecondInterval(int months, int days, long nanoseconds);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MonthDayNanosecondInterval interval);
    public static DateTime op_Addition(DateTime dateTime, MonthDayNanosecondInterval interval);
    public static DateTime op_Addition(MonthDayNanosecondInterval interval, DateTime dateTime);
    public static DateTime op_Subtraction(DateTime dateTime, MonthDayNanosecondInterval interval);
    public static DateTimeOffset op_Addition(DateTimeOffset dateTime, MonthDayNanosecondInterval interval);
    public static DateTimeOffset op_Addition(MonthDayNanosecondInterval interval, DateTimeOffset dateTime);
    public static DateTimeOffset op_Subtraction(DateTimeOffset dateTime, MonthDayNanosecondInterval interval);
}
public class Apache.Arrow.Scalars.YearMonthInterval : ValueType {
    private static int MonthsPerYear;
    public int Months;
    public YearMonthInterval(int totalMonths);
    public YearMonthInterval(int years, int months);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(YearMonthInterval interval);
    public static DateTime op_Addition(DateTime dateTime, YearMonthInterval interval);
    public static DateTime op_Addition(YearMonthInterval interval, DateTime dateTime);
    public static DateTime op_Subtraction(DateTime dateTime, YearMonthInterval interval);
    public static DateTimeOffset op_Addition(DateTimeOffset dateTime, YearMonthInterval interval);
    public static DateTimeOffset op_Addition(YearMonthInterval interval, DateTimeOffset dateTime);
    public static DateTimeOffset op_Subtraction(DateTimeOffset dateTime, YearMonthInterval interval);
}
[DefaultMemberAttribute("Item")]
public class Apache.Arrow.Schema : object {
    private Dictionary`2<string, Field> _fieldsDictionary;
    private List`1<Field> _fieldsList;
    [CompilerGeneratedAttribute]
private ILookup`2<string, Field> <FieldsLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    [ObsoleteAttribute("Use `FieldsList` or `FieldsLookup` instead")]
public IReadOnlyDictionary`2<string, Field> Fields { get; }
    public IReadOnlyList`1<Field> FieldsList { get; }
    public ILookup`2<string, Field> FieldsLookup { get; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; }
    public bool HasMetadata { get; }
    public Field Item { get; }
    public Field Item { get; }
    private int Apache.Arrow.Types.IRecordType.FieldCount { get; }
    private string Apache.Arrow.Types.IArrowType.Name { get; }
    private ArrowTypeId Apache.Arrow.Types.IArrowType.TypeId { get; }
    private bool Apache.Arrow.Types.IArrowType.IsFixedWidth { get; }
    public Schema(IEnumerable`1<Field> fields, IEnumerable`1<KeyValuePair`2<string, string>> metadata);
    internal Schema(List`1<Field> fieldsList, IReadOnlyDictionary`2<string, string> metadata, bool copyCollections);
    public IReadOnlyDictionary`2<string, Field> get_Fields();
    public IReadOnlyList`1<Field> get_FieldsList();
    [CompilerGeneratedAttribute]
public ILookup`2<string, Field> get_FieldsLookup();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    public bool get_HasMetadata();
    public Field get_Item(int index);
    public Field get_Item(string name);
    public sealed virtual Field GetFieldByIndex(int i);
    public sealed virtual Field GetFieldByName(string name);
    public int GetFieldIndex(string name, StringComparer comparer);
    public sealed virtual int GetFieldIndex(string name, IEqualityComparer`1<string> comparer);
    public Schema RemoveField(int fieldIndex);
    public Schema InsertField(int fieldIndex, Field newField);
    public Schema SetField(int fieldIndex, Field newField);
    public sealed virtual void Accept(IArrowTypeVisitor visitor);
    public virtual string ToString();
    private sealed virtual override int Apache.Arrow.Types.IRecordType.get_FieldCount();
    private sealed virtual override string Apache.Arrow.Types.IArrowType.get_Name();
    private sealed virtual override ArrowTypeId Apache.Arrow.Types.IArrowType.get_TypeId();
    private sealed virtual override bool Apache.Arrow.Types.IArrowType.get_IsFixedWidth();
}
[ExtensionAttribute]
public static class Apache.Arrow.SpanExtensions : object {
    [ExtensionAttribute]
public static Span`1<T> CastTo(Span`1<byte> span);
    [ExtensionAttribute]
public static ReadOnlySpan`1<T> CastTo(ReadOnlySpan`1<byte> span);
}
public class Apache.Arrow.SparseUnionArray : UnionArray {
    public SparseUnionArray(IArrowType dataType, int length, IEnumerable`1<IArrowArray> children, ArrowBuffer typeIds, int nullCount, int offset);
    public SparseUnionArray(ArrayData data);
    protected virtual bool FieldIsValid(IArrowArray fieldArray, int index);
    internal static int ComputeNullCount(ArrayData data);
}
[ExtensionAttribute]
internal static class Apache.Arrow.StreamExtensions : object {
    [AsyncStateMachineAttribute("Apache.Arrow.StreamExtensions/<ReadFullBufferAsync>d__0")]
[ExtensionAttribute]
public static ValueTask`1<int> ReadFullBufferAsync(Stream stream, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int ReadFullBuffer(Stream stream, Memory`1<byte> buffer);
    [ExtensionAttribute]
public static int Read(Stream stream, Memory`1<byte> buffer);
    [ExtensionAttribute]
public static ValueTask`1<int> ReadAsync(Stream stream, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Write(Stream stream, ReadOnlyMemory`1<byte> buffer);
    [ExtensionAttribute]
public static ValueTask WriteAsync(Stream stream, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Apache.Arrow.StreamExtensions/<FinishWriteAsync>d__6")]
private static ValueTask FinishWriteAsync(Task writeTask, Byte[] localBuffer);
    [AsyncStateMachineAttribute("Apache.Arrow.StreamExtensions/<<ReadAsync>g__FinishReadAsync|3_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<int> <ReadAsync>g__FinishReadAsync|3_0(Task`1<int> readTask, Byte[] localBuffer, Memory`1<byte> localDestination);
}
public class Apache.Arrow.StringArray : BinaryArray {
    public static Encoding DefaultEncoding;
    private Dictionary`2<Encoding, String[]> materializedStringStore;
    private int System.Collections.Generic.IReadOnlyCollection<System.String>.Count { get; }
    private string System.Collections.Generic.IReadOnlyList<System.String>.Item { get; }
    private int System.Collections.Generic.ICollection<System.String>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.String>.IsReadOnly { get; }
    public StringArray(ArrayData data);
    public StringArray(int length, ArrowBuffer valueOffsetsBuffer, ArrowBuffer dataBuffer, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    private static StringArray();
    public virtual void Accept(IArrowArrayVisitor visitor);
    public string GetString(int index, Encoding encoding);
    public void Materialize(Encoding encoding);
    public bool IsMaterialized(Encoding encoding);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.String>.get_Count();
    private sealed virtual override string System.Collections.Generic.IReadOnlyList<System.String>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.StringArray/<System-Collections-Generic-IEnumerable<System-String>-GetEnumerator>d__13")]
private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.String>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Remove(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Contains(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.CopyTo(String[] array, int arrayIndex);
}
public class Apache.Arrow.StringViewArray : BinaryViewArray {
    public static Encoding DefaultEncoding;
    private int System.Collections.Generic.IReadOnlyCollection<System.String>.Count { get; }
    private string System.Collections.Generic.IReadOnlyList<System.String>.Item { get; }
    public StringViewArray(ArrayData data);
    public StringViewArray(int length, ArrowBuffer valueOffsetsBuffer, ArrowBuffer dataBuffer, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    private static StringViewArray();
    public virtual void Accept(IArrowArrayVisitor visitor);
    public string GetString(int index, Encoding encoding);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.String>.get_Count();
    private sealed virtual override string System.Collections.Generic.IReadOnlyList<System.String>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.StringViewArray/<System-Collections-Generic-IEnumerable<System-String>-GetEnumerator>d__10")]
private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Apache.Arrow.StructArray : Array {
    private IReadOnlyList`1<IArrowArray> _fields;
    public IReadOnlyList`1<IArrowArray> Fields { get; }
    private IRecordType Apache.Arrow.IArrowRecord.Schema { get; }
    private int Apache.Arrow.IArrowRecord.ColumnCount { get; }
    public StructArray(IArrowType dataType, int length, IEnumerable`1<IArrowArray> children, ArrowBuffer nullBitmapBuffer, int nullCount, int offset);
    public StructArray(ArrayData data);
    public IReadOnlyList`1<IArrowArray> get_Fields();
    public virtual void Accept(IArrowArrayVisitor visitor);
    private IReadOnlyList`1<IArrowArray> InitializeFields();
    private sealed virtual override IRecordType Apache.Arrow.IArrowRecord.get_Schema();
    private sealed virtual override int Apache.Arrow.IArrowRecord.get_ColumnCount();
    private sealed virtual override IArrowArray Apache.Arrow.IArrowRecord.Column(string columnName, IEqualityComparer`1<string> comparer);
    private sealed virtual override IArrowArray Apache.Arrow.IArrowRecord.Column(int columnIndex);
}
public class Apache.Arrow.Table : object {
    [CompilerGeneratedAttribute]
private Schema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnCount>k__BackingField;
    private IList`1<Column> _columns;
    public Schema Schema { get; }
    public long RowCount { get; }
    public int ColumnCount { get; private set; }
    public Table(Schema schema, IList`1<Column> columns);
    [CompilerGeneratedAttribute]
public Schema get_Schema();
    [CompilerGeneratedAttribute]
public long get_RowCount();
    [CompilerGeneratedAttribute]
public int get_ColumnCount();
    [CompilerGeneratedAttribute]
private void set_ColumnCount(int value);
    public Column Column(int columnIndex);
    public static Table TableFromRecordBatches(Schema schema, IList`1<RecordBatch> recordBatches);
    public Table RemoveColumn(int columnIndex);
    public Table InsertColumn(int columnIndex, Column column);
    public Table SetColumn(int columnIndex, Column column);
    public virtual string ToString();
}
public class Apache.Arrow.Time32Array : PrimitiveArray`1<int> {
    public Time32Array(Time32Type type, ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Time32Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public Nullable`1<int> GetSeconds(int index);
    public Nullable`1<int> GetMilliSeconds(int index);
}
public class Apache.Arrow.Time64Array : PrimitiveArray`1<long> {
    public Time64Array(Time64Type type, ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public Time64Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
    public Nullable`1<long> GetMicroSeconds(int index);
    public Nullable`1<long> GetNanoSeconds(int index);
}
public abstract class Apache.Arrow.TimeArrayBuilder`3 : DelegatingArrayBuilder`3<TUnderlying, TArray, TBuilder> {
    protected TimeArrayBuilder`3(IArrowArrayBuilder`3<TUnderlying, TArray, IArrowArrayBuilder`1<TArray>> innerBuilder);
    public TBuilder Append(TUnderlying value);
    public TBuilder Append(ReadOnlySpan`1<TUnderlying> values);
    public virtual TBuilder AppendNull();
    public TBuilder AppendRange(IEnumerable`1<TUnderlying> values);
    public TBuilder Set(int index, TUnderlying value);
    public TBuilder Swap(int i, int j);
}
[ExtensionAttribute]
public static class Apache.Arrow.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static string ToTimeZoneOffsetString(TimeSpan timeSpan);
}
public class Apache.Arrow.TimestampArray : PrimitiveArray`1<long> {
    private static DateTimeOffset s_epoch;
    private int System.Collections.Generic.IReadOnlyCollection<System.DateTimeOffset?>.Count { get; }
    private Nullable`1<DateTimeOffset> System.Collections.Generic.IReadOnlyList<System.DateTimeOffset?>.Item { get; }
    private int System.Collections.Generic.ICollection<System.DateTimeOffset?>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.DateTimeOffset?>.IsReadOnly { get; }
    public TimestampArray(TimestampType type, ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public TimestampArray(ArrayData data);
    private static TimestampArray();
    public virtual void Accept(IArrowArrayVisitor visitor);
    public DateTimeOffset GetTimestampUnchecked(int index);
    public Nullable`1<DateTimeOffset> GetTimestamp(int index);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.DateTimeOffset?>.get_Count();
    private sealed virtual override Nullable`1<DateTimeOffset> System.Collections.Generic.IReadOnlyList<System.DateTimeOffset?>.get_Item(int index);
    [IteratorStateMachineAttribute("Apache.Arrow.TimestampArray/<System-Collections-Generic-IEnumerable<System-DateTimeOffset?>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<Nullable`1<DateTimeOffset>> System.Collections.Generic.IEnumerable<System.DateTimeOffset?>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.DateTimeOffset?>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTimeOffset?>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTimeOffset?>.Add(Nullable`1<DateTimeOffset> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTimeOffset?>.Remove(Nullable`1<DateTimeOffset> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTimeOffset?>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTimeOffset?>.Contains(Nullable`1<DateTimeOffset> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTimeOffset?>.CopyTo(Nullable`1[] array, int arrayIndex);
}
[ExtensionAttribute]
internal static class Apache.Arrow.TupleExtensions : object {
    [ExtensionAttribute]
public static void Deconstruct(Tuple`2<T1, T2> value, T1& item1, T2& item2);
    [ExtensionAttribute]
public static void Deconstruct(Tuple`3<T1, T2, T3> value, T1& item1, T2& item2, T3& item3);
}
public abstract class Apache.Arrow.Types.ArrowType : object {
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public bool IsFixedWidth { get; }
    public abstract virtual ArrowTypeId get_TypeId();
    public abstract virtual string get_Name();
    public virtual bool get_IsFixedWidth();
    public abstract virtual void Accept(IArrowTypeVisitor visitor);
    internal static void Accept(T type, IArrowTypeVisitor visitor);
}
public enum Apache.Arrow.Types.ArrowTypeId : Enum {
    public int value__;
    public static ArrowTypeId Null;
    public static ArrowTypeId Boolean;
    public static ArrowTypeId UInt8;
    public static ArrowTypeId Int8;
    public static ArrowTypeId UInt16;
    public static ArrowTypeId Int16;
    public static ArrowTypeId UInt32;
    public static ArrowTypeId Int32;
    public static ArrowTypeId UInt64;
    public static ArrowTypeId Int64;
    public static ArrowTypeId HalfFloat;
    public static ArrowTypeId Float;
    public static ArrowTypeId Double;
    public static ArrowTypeId String;
    public static ArrowTypeId Binary;
    public static ArrowTypeId FixedSizedBinary;
    public static ArrowTypeId Date32;
    public static ArrowTypeId Date64;
    public static ArrowTypeId Timestamp;
    public static ArrowTypeId Time32;
    public static ArrowTypeId Time64;
    public static ArrowTypeId Interval;
    public static ArrowTypeId Decimal128;
    public static ArrowTypeId Decimal256;
    public static ArrowTypeId List;
    public static ArrowTypeId Struct;
    public static ArrowTypeId Union;
    public static ArrowTypeId Dictionary;
    public static ArrowTypeId Map;
    public static ArrowTypeId FixedSizeList;
    public static ArrowTypeId Duration;
    public static ArrowTypeId RecordBatch;
    public static ArrowTypeId BinaryView;
    public static ArrowTypeId StringView;
    public static ArrowTypeId ListView;
}
public class Apache.Arrow.Types.BinaryType : ArrowType {
    public static BinaryType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    private static BinaryType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.BinaryViewType : ArrowType {
    public static BinaryViewType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    private static BinaryViewType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.BooleanType : NumberType {
    public static BooleanType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static BooleanType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Date32Type : DateType {
    public static Date32Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public DateUnit Unit { get; }
    private static Date32Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual DateUnit get_Unit();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Date64Type : DateType {
    public static Date64Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public DateUnit Unit { get; }
    private static Date64Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual DateUnit get_Unit();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public abstract class Apache.Arrow.Types.DateType : FixedWidthType {
    public DateUnit Unit { get; }
    public abstract virtual DateUnit get_Unit();
}
public enum Apache.Arrow.Types.DateUnit : Enum {
    public int value__;
    public static DateUnit Day;
    public static DateUnit Milliseconds;
}
public class Apache.Arrow.Types.Decimal128Type : FixedSizeBinaryType {
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int Precision { get; }
    public int Scale { get; }
    public Decimal128Type(int precision, int scale);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public int get_Scale();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Decimal256Type : FixedSizeBinaryType {
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int Precision { get; }
    public int Scale { get; }
    public Decimal256Type(int precision, int scale);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public int get_Scale();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.DictionaryType : FixedWidthType {
    [ObsoleteAttribute]
public static DictionaryType Default;
    [CompilerGeneratedAttribute]
private IArrowType <IndexType>k__BackingField;
    [CompilerGeneratedAttribute]
private IArrowType <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ordered>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public IArrowType IndexType { get; private set; }
    public IArrowType ValueType { get; private set; }
    public bool Ordered { get; private set; }
    public DictionaryType(IArrowType indexType, IArrowType valueType, bool ordered);
    private static DictionaryType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual void Accept(IArrowTypeVisitor visitor);
    [CompilerGeneratedAttribute]
public IArrowType get_IndexType();
    [CompilerGeneratedAttribute]
private void set_IndexType(IArrowType value);
    [CompilerGeneratedAttribute]
public IArrowType get_ValueType();
    [CompilerGeneratedAttribute]
private void set_ValueType(IArrowType value);
    [CompilerGeneratedAttribute]
public bool get_Ordered();
    [CompilerGeneratedAttribute]
private void set_Ordered(bool value);
}
public class Apache.Arrow.Types.DoubleType : FloatingPointType {
    public static DoubleType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    public PrecisionKind Precision { get; }
    private static DoubleType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual PrecisionKind get_Precision();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.DurationType : TimeBasedType {
    public static DurationType Second;
    public static DurationType Millisecond;
    public static DurationType Microsecond;
    public static DurationType Nanosecond;
    private static DurationType[] _types;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    private DurationType(TimeUnit unit);
    private static DurationType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public static DurationType FromTimeUnit(TimeUnit unit);
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.FixedSizeBinaryType : FixedWidthType {
    [CompilerGeneratedAttribute]
private int <ByteWidth>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int ByteWidth { get; }
    public int BitWidth { get; }
    public FixedSizeBinaryType(int byteWidth);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_ByteWidth();
    public virtual int get_BitWidth();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.FixedSizeListType : NestedType {
    [CompilerGeneratedAttribute]
private int <ListSize>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int ListSize { get; }
    public Field ValueField { get; }
    public IArrowType ValueDataType { get; }
    public FixedSizeListType(Field valueField, int listSize);
    public FixedSizeListType(IArrowType valueDataType, int listSize);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_ListSize();
    public Field get_ValueField();
    public IArrowType get_ValueDataType();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public abstract class Apache.Arrow.Types.FixedWidthType : ArrowType {
    public bool IsFixedWidth { get; }
    public int BitWidth { get; }
    public virtual bool get_IsFixedWidth();
    public abstract virtual int get_BitWidth();
}
public abstract class Apache.Arrow.Types.FloatingPointType : NumberType {
    public PrecisionKind Precision { get; }
    public abstract virtual PrecisionKind get_Precision();
}
public class Apache.Arrow.Types.FloatType : FloatingPointType {
    public static FloatType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    public PrecisionKind Precision { get; }
    private static FloatType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual PrecisionKind get_Precision();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.HalfFloatType : FloatingPointType {
    public static HalfFloatType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    public PrecisionKind Precision { get; }
    private static HalfFloatType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual PrecisionKind get_Precision();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public interface Apache.Arrow.Types.IArrowType {
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public bool IsFixedWidth { get; }
    public abstract virtual ArrowTypeId get_TypeId();
    public abstract virtual string get_Name();
    public abstract virtual void Accept(IArrowTypeVisitor visitor);
    public abstract virtual bool get_IsFixedWidth();
}
public interface Apache.Arrow.Types.IArrowTypeVisitor {
    public abstract virtual void Visit(IArrowType type);
}
public interface Apache.Arrow.Types.IArrowTypeVisitor`1 {
    public abstract virtual void Visit(T type);
}
public class Apache.Arrow.Types.Int16Type : IntegerType {
    public static Int16Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static Int16Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Int32Type : IntegerType {
    public static Int32Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static Int32Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Int64Type : IntegerType {
    public static Int64Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static Int64Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Int8Type : IntegerType {
    public static Int8Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static Int8Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public abstract class Apache.Arrow.Types.IntegerType : NumberType {
}
public class Apache.Arrow.Types.IntervalType : FixedWidthType {
    public static IntervalType YearMonth;
    public static IntervalType DayTime;
    public static IntervalType MonthDayNanosecond;
    private static IntervalType[] _types;
    [CompilerGeneratedAttribute]
private IntervalUnit <Unit>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public IntervalUnit Unit { get; }
    public IntervalType(IntervalUnit unit);
    private static IntervalType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    [CompilerGeneratedAttribute]
public IntervalUnit get_Unit();
    public virtual void Accept(IArrowTypeVisitor visitor);
    public static IntervalType FromIntervalUnit(IntervalUnit unit);
}
public enum Apache.Arrow.Types.IntervalUnit : Enum {
    public int value__;
    public static IntervalUnit YearMonth;
    public static IntervalUnit DayTime;
    public static IntervalUnit MonthDayNanosecond;
}
public interface Apache.Arrow.Types.IRecordType {
    public int FieldCount { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual Field GetFieldByIndex(int index);
    public abstract virtual Field GetFieldByName(string name);
    public abstract virtual int GetFieldIndex(string name, IEqualityComparer`1<string> comparer);
}
public class Apache.Arrow.Types.ListType : NestedType {
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public Field ValueField { get; }
    public IArrowType ValueDataType { get; }
    public ListType(Field valueField);
    public ListType(IArrowType valueDataType);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public Field get_ValueField();
    public IArrowType get_ValueDataType();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.ListViewType : NestedType {
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public Field ValueField { get; }
    public IArrowType ValueDataType { get; }
    public ListViewType(Field valueField);
    public ListViewType(IArrowType valueDataType);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public Field get_ValueField();
    public IArrowType get_ValueDataType();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.MapType : NestedType {
    private static string EntriesKey;
    private static string KeyKey;
    private static string ValueKey;
    public bool KeySorted;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public StructType KeyValueType { get; }
    public Field KeyField { get; }
    public Field ValueField { get; }
    public MapType(IArrowType key, IArrowType value, bool nullable, bool keySorted);
    public MapType(Field key, Field value, bool keySorted);
    public MapType(StructType entries, bool keySorted);
    public MapType(Field entries, bool keySorted);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public StructType get_KeyValueType();
    public Field get_KeyField();
    public Field get_ValueField();
    public virtual void Accept(IArrowTypeVisitor visitor);
    public MapType UnsortedKey();
    private static Field Entries(IArrowType key, IArrowType value, bool nullable);
    private static Field Entries(Field key, Field value);
    private static Field Entries(StructType entries);
    private static StructType NewStruct(Field key, Field value);
    private static StructType Struct(StructType entries);
    private static Field Entries(Field entries);
    private static Field NamedField(string name, Field field);
}
public abstract class Apache.Arrow.Types.NestedType : ArrowType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Field> <Fields>k__BackingField;
    [ObsoleteAttribute("Use `Fields` instead")]
public IReadOnlyList`1<Field> Children { get; }
    public IReadOnlyList`1<Field> Fields { get; }
    protected NestedType(IReadOnlyList`1<Field> fields);
    protected NestedType(Field field);
    public IReadOnlyList`1<Field> get_Children();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Field> get_Fields();
}
public class Apache.Arrow.Types.NullType : ArrowType {
    public static NullType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    private static NullType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public abstract class Apache.Arrow.Types.NumberType : FixedWidthType {
    public bool IsSigned { get; }
    public abstract virtual bool get_IsSigned();
}
public class Apache.Arrow.Types.StringType : ArrowType {
    public static StringType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    private static StringType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.StringViewType : ArrowType {
    public static StringViewType Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    private static StringViewType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.StructType : NestedType {
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    private int Apache.Arrow.Types.IRecordType.FieldCount { get; }
    public StructType(IReadOnlyList`1<Field> fields);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public sealed virtual Field GetFieldByIndex(int index);
    public Field GetFieldByName(string name, IEqualityComparer`1<string> comparer);
    public sealed virtual int GetFieldIndex(string name, IEqualityComparer`1<string> comparer);
    public virtual void Accept(IArrowTypeVisitor visitor);
    private sealed virtual override int Apache.Arrow.Types.IRecordType.get_FieldCount();
    private sealed virtual override Field Apache.Arrow.Types.IRecordType.GetFieldByName(string name);
}
public class Apache.Arrow.Types.Time32Type : TimeType {
    public static Time32Type Default { get; }
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public Time32Type(TimeUnit unit);
    public static Time32Type get_Default();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.Time64Type : TimeType {
    public static Time64Type Default { get; }
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public Time64Type(TimeUnit unit);
    public static Time64Type get_Default();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public abstract class Apache.Arrow.Types.TimeBasedType : FixedWidthType {
    [CompilerGeneratedAttribute]
private TimeUnit <Unit>k__BackingField;
    public TimeUnit Unit { get; }
    protected TimeBasedType(TimeUnit unit);
    [CompilerGeneratedAttribute]
public TimeUnit get_Unit();
}
public class Apache.Arrow.Types.TimestampType : TimeBasedType {
    public static TimestampType Default;
    [CompilerGeneratedAttribute]
private string <Timezone>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public string Timezone { get; }
    public bool IsTimeZoneAware { get; }
    public TimestampType(TimeUnit unit, string timezone);
    public TimestampType(TimeUnit unit, TimeZoneInfo timezone);
    private static TimestampType();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    [CompilerGeneratedAttribute]
public string get_Timezone();
    public bool get_IsTimeZoneAware();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public abstract class Apache.Arrow.Types.TimeType : TimeBasedType {
    public static Time32Type Second;
    public static Time32Type Millisecond;
    public static Time64Type Microsecond;
    public static Time64Type Nanosecond;
    private static TimeType[] _types;
    protected TimeType(TimeUnit unit);
    private static TimeType();
    public static TimeType FromTimeUnit(TimeUnit unit);
}
public enum Apache.Arrow.Types.TimeUnit : Enum {
    public int value__;
    public static TimeUnit Second;
    public static TimeUnit Millisecond;
    public static TimeUnit Microsecond;
    public static TimeUnit Nanosecond;
}
[ExtensionAttribute]
internal static class Apache.Arrow.Types.TimeUnitExtensions : object {
    private static long TicksPerMicrosecond;
    private static long NanosecondsPerTick;
    [ExtensionAttribute]
public static long ConvertFromTicks(TimeUnit unit, long ticks);
    [ExtensionAttribute]
public static long ConvertToTicks(TimeUnit unit, long units);
}
public class Apache.Arrow.Types.UInt16Type : IntegerType {
    public static UInt16Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static UInt16Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.UInt32Type : IntegerType {
    public static UInt32Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static UInt32Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.UInt64Type : IntegerType {
    public static UInt64Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static UInt64Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.Types.UInt8Type : IntegerType {
    public static UInt8Type Default;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public int BitWidth { get; }
    public bool IsSigned { get; }
    private static UInt8Type();
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    public virtual int get_BitWidth();
    public virtual bool get_IsSigned();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public enum Apache.Arrow.Types.UnionMode : Enum {
    public int value__;
    public static UnionMode Sparse;
    public static UnionMode Dense;
}
public class Apache.Arrow.Types.UnionType : NestedType {
    [CompilerGeneratedAttribute]
private UnionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <TypeIds>k__BackingField;
    public ArrowTypeId TypeId { get; }
    public string Name { get; }
    public UnionMode Mode { get; }
    public Int32[] TypeIds { get; }
    public UnionType(IEnumerable`1<Field> fields, IEnumerable`1<int> typeIds, UnionMode mode);
    public virtual ArrowTypeId get_TypeId();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public UnionMode get_Mode();
    [CompilerGeneratedAttribute]
public Int32[] get_TypeIds();
    public virtual void Accept(IArrowTypeVisitor visitor);
}
public class Apache.Arrow.UInt16Array : PrimitiveArray`1<ushort> {
    public UInt16Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public UInt16Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.UInt32Array : PrimitiveArray`1<UInt32> {
    public UInt32Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public UInt32Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.UInt64Array : PrimitiveArray`1<ulong> {
    public UInt64Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public UInt64Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public class Apache.Arrow.UInt8Array : PrimitiveArray`1<byte> {
    public UInt8Array(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public UInt8Array(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
public abstract class Apache.Arrow.UnionArray : object {
    protected IReadOnlyList`1<IArrowArray> _fields;
    [CompilerGeneratedAttribute]
private ArrayData <Data>k__BackingField;
    public IReadOnlyList`1<IArrowArray> Fields { get; }
    public ArrayData Data { get; }
    public UnionType Type { get; }
    public UnionMode Mode { get; }
    public ArrowBuffer TypeBuffer { get; }
    public ReadOnlySpan`1<byte> TypeIds { get; }
    public int Length { get; }
    public int Offset { get; }
    public int NullCount { get; }
    protected UnionArray(ArrayData data);
    public IReadOnlyList`1<IArrowArray> get_Fields();
    [CompilerGeneratedAttribute]
public sealed virtual ArrayData get_Data();
    public UnionType get_Type();
    public UnionMode get_Mode();
    public ArrowBuffer get_TypeBuffer();
    public ReadOnlySpan`1<byte> get_TypeIds();
    public sealed virtual int get_Length();
    public sealed virtual int get_Offset();
    public sealed virtual int get_NullCount();
    public sealed virtual bool IsValid(int index);
    public sealed virtual bool IsNull(int index);
    public static UnionArray Create(ArrayData data);
    public sealed virtual void Accept(IArrowArrayVisitor visitor);
    protected abstract virtual bool FieldIsValid(IArrowArray field, int index);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected static void ValidateMode(UnionMode expected, UnionMode actual);
    internal static int ComputeNullCount(ArrayData data);
    private IReadOnlyList`1<IArrowArray> InitializeFields();
}
internal static class Apache.Arrow.Utility : object {
    public static IList`1<T> DeleteListElement(IList`1<T> values, int index);
    public static IList`1<T> AddListElement(IList`1<T> values, int index, T newElement);
    public static IList`1<T> SetListElement(IList`1<T> values, int index, T newElement);
}
public class Apache.Arrow.YearMonthIntervalArray : IntervalArray`1<YearMonthInterval> {
    public YearMonthIntervalArray(ArrowBuffer valueBuffer, ArrowBuffer nullBitmapBuffer, int length, int nullCount, int offset);
    public YearMonthIntervalArray(ArrayData data);
    public virtual void Accept(IArrowArrayVisitor visitor);
}
internal class Google.FlatBuffers.ByteArrayAllocator : ByteBufferAllocator {
    private Byte[] _buffer;
    public Span`1<byte> Span { get; }
    public ReadOnlySpan`1<byte> ReadOnlySpan { get; }
    public Memory`1<byte> Memory { get; }
    public ReadOnlyMemory`1<byte> ReadOnlyMemory { get; }
    public ByteArrayAllocator(Byte[] buffer);
    public virtual void GrowFront(int newSize);
    public virtual Span`1<byte> get_Span();
    public virtual ReadOnlySpan`1<byte> get_ReadOnlySpan();
    public virtual Memory`1<byte> get_Memory();
    public virtual ReadOnlyMemory`1<byte> get_ReadOnlyMemory();
    private void InitBuffer();
}
internal class Google.FlatBuffers.ByteBuffer : object {
    private ByteBufferAllocator _buffer;
    private int _pos;
    private static Dictionary`2<Type, int> genericSizes;
    public int Position { get; public set; }
    public int Length { get; }
    public ByteBuffer(ByteBufferAllocator allocator, int position);
    public ByteBuffer(int size);
    public ByteBuffer(Byte[] buffer);
    public ByteBuffer(Byte[] buffer, int pos);
    private static ByteBuffer();
    public int get_Position();
    public void set_Position(int value);
    public int get_Length();
    public void Reset();
    public ByteBuffer Duplicate();
    public void GrowFront(int newSize);
    public Byte[] ToArray(int pos, int len);
    public static int SizeOf();
    public static bool IsSupportedType();
    public static int ArraySize(T[] x);
    public static int ArraySize(ArraySegment`1<T> x);
    public static int ArraySize(Span`1<T> x);
    public T[] ToArray(int pos, int len);
    public Byte[] ToSizedArray();
    public Byte[] ToFullArray();
    public ReadOnlyMemory`1<byte> ToReadOnlyMemory(int pos, int len);
    public Memory`1<byte> ToMemory(int pos, int len);
    public Span`1<byte> ToSpan(int pos, int len);
    public static ushort ReverseBytes(ushort input);
    public static UInt32 ReverseBytes(UInt32 input);
    public static ulong ReverseBytes(ulong input);
    private void AssertOffsetAndLength(int offset, int length);
    public void PutSbyte(int offset, sbyte value);
    public void PutByte(int offset, byte value);
    public void PutByte(int offset, byte value, int count);
    public void Put(int offset, byte value);
    public void PutStringUTF8(int offset, string value);
    public void PutShort(int offset, short value);
    public void PutUshort(int offset, ushort value);
    public void PutInt(int offset, int value);
    public void PutUint(int offset, UInt32 value);
    public void PutLong(int offset, long value);
    public void PutUlong(int offset, ulong value);
    public void PutFloat(int offset, float value);
    public void PutDouble(int offset, double value);
    public sbyte GetSbyte(int index);
    public byte Get(int index);
    public string GetStringUTF8(int startPos, int len);
    public short GetShort(int offset);
    public ushort GetUshort(int offset);
    public int GetInt(int offset);
    public UInt32 GetUint(int offset);
    public long GetLong(int offset);
    public ulong GetUlong(int offset);
    public float GetFloat(int offset);
    public double GetDouble(int offset);
    public int Put(int offset, T[] x);
    public int Put(int offset, ArraySegment`1<T> x);
    public int Put(int offset, IntPtr ptr, int sizeInBytes);
    public int Put(int offset, Span`1<T> x);
}
internal abstract class Google.FlatBuffers.ByteBufferAllocator : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public Span`1<byte> Span { get; }
    public ReadOnlySpan`1<byte> ReadOnlySpan { get; }
    public Memory`1<byte> Memory { get; }
    public ReadOnlyMemory`1<byte> ReadOnlyMemory { get; }
    public int Length { get; protected set; }
    public abstract virtual Span`1<byte> get_Span();
    public abstract virtual ReadOnlySpan`1<byte> get_ReadOnlySpan();
    public abstract virtual Memory`1<byte> get_Memory();
    public abstract virtual ReadOnlyMemory`1<byte> get_ReadOnlyMemory();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
protected void set_Length(int value);
    public abstract virtual void GrowFront(int newSize);
}
internal class Google.FlatBuffers.ByteBufferUtil : object {
    public static int GetSizePrefix(ByteBuffer bb);
    public static ByteBuffer RemoveSizePrefix(ByteBuffer bb);
}
internal class Google.FlatBuffers.checkElementStruct : ValueType {
    public bool elementValid;
    public UInt32 elementOffset;
}
internal class Google.FlatBuffers.FlatBufferBuilder : object {
    private int _space;
    private ByteBuffer _bb;
    private int _minAlign;
    private Int32[] _vtable;
    private int _vtableSize;
    private int _objectStart;
    private Int32[] _vtables;
    private int _numVtables;
    private int _vectorNumElems;
    private Dictionary`2<string, StringOffset> _sharedStringMap;
    [CompilerGeneratedAttribute]
private bool <ForceDefaults>k__BackingField;
    public bool ForceDefaults { get; public set; }
    public int Offset { get; }
    public ByteBuffer DataBuffer { get; }
    public FlatBufferBuilder(int initialSize);
    public FlatBufferBuilder(ByteBuffer buffer);
    public void Clear();
    [CompilerGeneratedAttribute]
public bool get_ForceDefaults();
    [CompilerGeneratedAttribute]
public void set_ForceDefaults(bool value);
    public int get_Offset();
    public void Pad(int size);
    private void GrowBuffer();
    public void Prep(int size, int additionalBytes);
    public void PutBool(bool x);
    public void PutSbyte(sbyte x);
    public void PutByte(byte x);
    public void PutShort(short x);
    public void PutUshort(ushort x);
    public void PutInt(int x);
    public void PutUint(UInt32 x);
    public void PutLong(long x);
    public void PutUlong(ulong x);
    public void PutFloat(float x);
    public void Put(T[] x);
    public void Put(ArraySegment`1<T> x);
    public void Put(IntPtr ptr, int sizeInBytes);
    public void Put(Span`1<T> x);
    public void PutDouble(double x);
    public void AddBool(bool x);
    public void AddSbyte(sbyte x);
    public void AddByte(byte x);
    public void AddShort(short x);
    public void AddUshort(ushort x);
    public void AddInt(int x);
    public void AddUint(UInt32 x);
    public void AddLong(long x);
    public void AddUlong(ulong x);
    public void AddFloat(float x);
    public void Add(T[] x);
    public void Add(ArraySegment`1<T> x);
    public void Add(IntPtr ptr, int sizeInBytes);
    public void Add(Span`1<T> x);
    public void AddDouble(double x);
    public void AddOffset(int off);
    public void StartVector(int elemSize, int count, int alignment);
    public VectorOffset EndVector();
    public VectorOffset CreateVectorOfTables(Offset`1[] offsets);
    public void Nested(int obj);
    public void NotNested();
    public void StartTable(int numfields);
    public void Slot(int voffset);
    public void AddBool(int o, bool x, bool d);
    public void AddBool(int o, Nullable`1<bool> x);
    public void AddSbyte(int o, sbyte x, sbyte d);
    public void AddSbyte(int o, Nullable`1<sbyte> x);
    public void AddByte(int o, byte x, byte d);
    public void AddByte(int o, Nullable`1<byte> x);
    public void AddShort(int o, short x, int d);
    public void AddShort(int o, Nullable`1<short> x);
    public void AddUshort(int o, ushort x, ushort d);
    public void AddUshort(int o, Nullable`1<ushort> x);
    public void AddInt(int o, int x, int d);
    public void AddInt(int o, Nullable`1<int> x);
    public void AddUint(int o, UInt32 x, UInt32 d);
    public void AddUint(int o, Nullable`1<UInt32> x);
    public void AddLong(int o, long x, long d);
    public void AddLong(int o, Nullable`1<long> x);
    public void AddUlong(int o, ulong x, ulong d);
    public void AddUlong(int o, Nullable`1<ulong> x);
    public void AddFloat(int o, float x, double d);
    public void AddFloat(int o, Nullable`1<float> x);
    public void AddDouble(int o, double x, double d);
    public void AddDouble(int o, Nullable`1<double> x);
    public void AddOffset(int o, int x, int d);
    public StringOffset CreateString(string s);
    public StringOffset CreateUTF8String(Span`1<byte> chars);
    public StringOffset CreateSharedString(string s);
    public void AddStruct(int voffset, int x, int d);
    public int EndTable();
    public void Required(int table, int field);
    protected void Finish(int rootTable, bool sizePrefix);
    public void Finish(int rootTable);
    public void FinishSizePrefixed(int rootTable);
    public ByteBuffer get_DataBuffer();
    public Byte[] SizedByteArray();
    protected void Finish(int rootTable, string fileIdentifier, bool sizePrefix);
    public void Finish(int rootTable, string fileIdentifier);
    public void FinishSizePrefixed(int rootTable, string fileIdentifier);
}
internal static class Google.FlatBuffers.FlatBufferConstants : object {
    public static int FileIdentifierLength;
    public static int SizePrefixLength;
    public static void FLATBUFFERS_23_5_9();
}
internal interface Google.FlatBuffers.IFlatbufferObject {
    public ByteBuffer ByteBuffer { get; }
    public abstract virtual void __init(int _i, ByteBuffer _bb);
    public abstract virtual ByteBuffer get_ByteBuffer();
}
internal class Google.FlatBuffers.Offset`1 : ValueType {
    public int Value;
    public Offset`1(int value);
}
internal class Google.FlatBuffers.Options : object {
    public static int DEFAULT_MAX_DEPTH;
    public static int DEFAULT_MAX_TABLES;
    private int max_depth;
    private int max_tables;
    private bool string_end_check;
    private bool alignment_check;
    public int maxDepth { get; public set; }
    public int maxTables { get; public set; }
    public bool stringEndCheck { get; public set; }
    public bool alignmentCheck { get; public set; }
    public Options(int maxDepth, int maxTables, bool stringEndCheck, bool alignmentCheck);
    public int get_maxDepth();
    public void set_maxDepth(int value);
    public int get_maxTables();
    public void set_maxTables(int value);
    public bool get_stringEndCheck();
    public void set_stringEndCheck(bool value);
    public bool get_alignmentCheck();
    public void set_alignmentCheck(bool value);
}
internal class Google.FlatBuffers.StringOffset : ValueType {
    public int Value;
    public StringOffset(int value);
}
internal class Google.FlatBuffers.Struct : ValueType {
    [CompilerGeneratedAttribute]
private int <bb_pos>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteBuffer <bb>k__BackingField;
    public int bb_pos { get; private set; }
    public ByteBuffer bb { get; private set; }
    public Struct(int _i, ByteBuffer _bb);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_bb_pos();
    [CompilerGeneratedAttribute]
private void set_bb_pos(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ByteBuffer get_bb();
    [CompilerGeneratedAttribute]
private void set_bb(ByteBuffer value);
}
internal class Google.FlatBuffers.Table : ValueType {
    [CompilerGeneratedAttribute]
private int <bb_pos>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteBuffer <bb>k__BackingField;
    public int bb_pos { get; private set; }
    public ByteBuffer bb { get; private set; }
    public ByteBuffer ByteBuffer { get; }
    public Table(int _i, ByteBuffer _bb);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_bb_pos();
    [CompilerGeneratedAttribute]
private void set_bb_pos(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ByteBuffer get_bb();
    [CompilerGeneratedAttribute]
private void set_bb(ByteBuffer value);
    public ByteBuffer get_ByteBuffer();
    public int __offset(int vtableOffset);
    public static int __offset(int vtableOffset, int offset, ByteBuffer bb);
    public int __indirect(int offset);
    public static int __indirect(int offset, ByteBuffer bb);
    public string __string(int offset);
    public int __vector_len(int offset);
    public int __vector(int offset);
    public Span`1<T> __vector_as_span(int offset, int elementSize);
    public T[] __vector_as_array(int offset);
    public T __union(int offset);
    public static bool __has_identifier(ByteBuffer bb, string ident);
    public static int CompareStrings(int offset_1, int offset_2, ByteBuffer bb);
    public static int CompareStrings(int offset_1, Byte[] key, ByteBuffer bb);
}
internal class Google.FlatBuffers.VectorOffset : ValueType {
    public int Value;
    public VectorOffset(int value);
}
internal class Google.FlatBuffers.Verifier : object {
    private ByteBuffer verifier_buffer;
    private Options verifier_options;
    private int depth_cnt;
    private int num_tables_cnt;
    public static int SIZE_BYTE;
    public static int SIZE_INT;
    public static int SIZE_U_OFFSET;
    public static int SIZE_S_OFFSET;
    public static int SIZE_V_OFFSET;
    public static int SIZE_PREFIX_LENGTH;
    public static int FLATBUFFERS_MAX_BUFFER_SIZE;
    public static int FILE_IDENTIFIER_LENGTH;
    public ByteBuffer Buf { get; public set; }
    public Options options { get; public set; }
    public int depth { get; public set; }
    public int numTables { get; public set; }
    public Verifier(ByteBuffer buf, Options options);
    public ByteBuffer get_Buf();
    public void set_Buf(ByteBuffer value);
    public Options get_options();
    public void set_options(Options value);
    public int get_depth();
    public void set_depth(int value);
    public int get_numTables();
    public void set_numTables(int value);
    public Verifier SetMaxDepth(int value);
    public Verifier SetMaxTables(int value);
    public Verifier SetAlignmentCheck(bool value);
    public Verifier SetStringCheck(bool value);
    private bool BufferHasIdentifier(ByteBuffer buf, UInt32 startPos, string identifier);
    private UInt32 ReadUOffsetT(ByteBuffer buf, UInt32 pos);
    private int ReadSOffsetT(ByteBuffer buf, int pos);
    private short ReadVOffsetT(ByteBuffer buf, int pos);
    private short GetVRelOffset(int pos, short vtableOffset);
    private UInt32 GetVOffset(UInt32 tablePos, short vtableOffset);
    private bool CheckComplexity();
    private bool CheckAlignment(UInt32 element, ulong align);
    private bool CheckElement(UInt32 pos, ulong elementSize);
    private bool CheckScalar(UInt32 pos, ulong elementSize);
    private bool CheckOffset(UInt32 offset);
    private checkElementStruct CheckVectorOrString(UInt32 pos, ulong elementSize);
    private bool CheckString(UInt32 pos);
    private bool CheckVector(UInt32 pos, ulong elementSize);
    private bool CheckTable(UInt32 tablePos, VerifyTableAction verifyAction);
    private bool CheckStringFunc(Verifier verifier, UInt32 pos);
    private bool CheckVectorOfObjects(UInt32 pos, VerifyTableAction verifyAction);
    private bool CheckIndirectOffset(UInt32 pos);
    private bool CheckBufferFromStart(string identifier, UInt32 startPos, VerifyTableAction verifyAction);
    private UInt32 GetIndirectOffset(UInt32 pos);
    public bool VerifyTableStart(UInt32 tablePos);
    public bool VerifyTableEnd(UInt32 tablePos);
    public bool VerifyField(UInt32 tablePos, short offsetId, ulong elementSize, ulong align, bool required);
    public bool VerifyString(UInt32 tablePos, short vOffset, bool required);
    public bool VerifyVectorOfData(UInt32 tablePos, short vOffset, ulong elementSize, bool required);
    public bool VerifyVectorOfStrings(UInt32 tablePos, short offsetId, bool required);
    public bool VerifyVectorOfTables(UInt32 tablePos, short offsetId, VerifyTableAction verifyAction, bool required);
    public bool VerifyTable(UInt32 tablePos, short offsetId, VerifyTableAction verifyAction, bool required);
    public bool VerifyNestedBuffer(UInt32 tablePos, short offsetId, VerifyTableAction verifyAction, bool required);
    public bool VerifyUnionData(UInt32 pos, ulong elementSize, ulong align);
    public bool VerifyUnionString(UInt32 pos);
    public bool VerifyUnion(UInt32 tablePos, short typeIdVOffset, short valueVOffset, VerifyUnionAction verifyAction, bool required);
    public bool VerifyVectorOfUnion(UInt32 tablePos, short typeOffsetId, short offsetId, VerifyUnionAction verifyAction, bool required);
    public bool VerifyBuffer(string identifier, bool sizePrefixed, VerifyTableAction verifyAction);
}
internal class Google.FlatBuffers.VerifyTableAction : MulticastDelegate {
    public VerifyTableAction(object object, IntPtr method);
    public virtual bool Invoke(Verifier verifier, UInt32 tablePos);
    public virtual IAsyncResult BeginInvoke(Verifier verifier, UInt32 tablePos, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Google.FlatBuffers.VerifyUnionAction : MulticastDelegate {
    public VerifyUnionAction(object object, IntPtr method);
    public virtual bool Invoke(Verifier verifier, byte typeId, UInt32 tablePos);
    public virtual IAsyncResult BeginInvoke(Verifier verifier, byte typeId, UInt32 tablePos, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
