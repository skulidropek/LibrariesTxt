public class ActiveMQ.Dispatcher : object {
    private Queue queue;
    private ArrayList messagesToRedeliver;
    private AutoResetEvent messageReceivedEventHandle;
    private EventSemaphore semaphore;
    private bool m_bAsyncDelivery;
    private bool m_bClosed;
    public void SetAsyncDelivery(AutoResetEvent eventHandle);
    public void RedeliverRolledBackMessages();
    public void Redeliver(ActiveMQMessage message);
    public void Enqueue(ActiveMQMessage message);
    public IMessage DequeueNoWait();
    public IMessage Dequeue(TimeSpan timeout);
    public IMessage Dequeue();
    internal void Close();
    protected void PulseSemaphore();
}
internal class ActiveMQ.DispatchingThread : object {
    private AutoResetEvent eventHandle;
    private EventSemaphore m_event;
    private bool m_bStopFlag;
    private Thread m_thread;
    private DispatchFunction m_dispatchFunc;
    [CompilerGeneratedAttribute]
private ExceptionHandler m_exceptionListener;
    public AutoResetEvent EventHandle { get; }
    public DispatchingThread(DispatchFunction dispatchFunc);
    [CompilerGeneratedAttribute]
private void add_m_exceptionListener(ExceptionHandler value);
    [CompilerGeneratedAttribute]
private void remove_m_exceptionListener(ExceptionHandler value);
    public AutoResetEvent get_EventHandle();
    internal void add_ExceptionListener(ExceptionHandler value);
    internal void remove_ExceptionListener(ExceptionHandler value);
    internal void Start();
    internal void Stop();
    internal void Stop(int timeoutMilliseconds);
    private void MyThreadFunc();
}
public class ActiveMQ.Transport.FutureResponse : object {
    private static TimeSpan maxWait;
    private CountDownLatch latch;
    private Response response;
    public Response Response { get; public set; }
    private static FutureResponse();
    public Response get_Response();
    public void set_Response(Response value);
}
internal class ActiveMQ.Util.CountDownLatch2 : object {
    private EventSemaphore mutex;
    private int remaining;
    public int Remaining { get; }
    public CountDownLatch2(int i);
    public void countDown();
    public int get_Remaining();
    public bool Await();
    public bool Await(TimeSpan timeout);
    public bool Await(int millis);
}
internal class ActiveMQ.Util.EventSemaphore : object {
    public void PulseAll();
    public void Wait();
    public void Wait(TimeSpan timeout);
}
public enum Apache.NMS.ActiveMQ.AckType : Enum {
    public int value__;
    public static AckType DeliveredAck;
    public static AckType PoisonAck;
    public static AckType ConsumedAck;
    public static AckType RedeliveredAck;
    public static AckType IndividualAck;
    public static AckType UnmatchedAck;
    public static AckType ExpiredAck;
}
internal class Apache.NMS.ActiveMQ.AdvisoryConsumer : object {
    private Connection connection;
    private ConsumerInfo info;
    private bool closed;
    private int deliveredCounter;
    private AdvisoryConsumer(Connection connection, ConsumerId consumerId);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.AdvisoryConsumer/<CreateAsync>d__4")]
internal static Task`1<AdvisoryConsumer> CreateAsync(Connection connection, ConsumerId consumerId);
    internal void Dispose();
    public sealed virtual Task Dispatch_Async(MessageDispatch messageDispatch);
    private void ProcessDestinationInfo(DestinationInfo destInfo);
}
public class Apache.NMS.ActiveMQ.AdvisorySupport : object {
    public static string ADVISORY_TOPIC_PREFIX;
    public static ActiveMQTopic CONNECTION_ADVISORY_TOPIC;
    public static ActiveMQTopic QUEUE_ADVISORY_TOPIC;
    public static ActiveMQTopic TOPIC_ADVISORY_TOPIC;
    public static ActiveMQTopic TEMP_QUEUE_ADVISORY_TOPIC;
    public static ActiveMQTopic TEMP_TOPIC_ADVISORY_TOPIC;
    public static string PRODUCER_ADVISORY_TOPIC_PREFIX;
    public static string QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX;
    public static string TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX;
    public static string CONSUMER_ADVISORY_TOPIC_PREFIX;
    public static string QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX;
    public static string TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX;
    public static string EXPIRED_TOPIC_MESSAGES_TOPIC_PREFIX;
    public static string EXPIRED_QUEUE_MESSAGES_TOPIC_PREFIX;
    public static string NO_TOPIC_CONSUMERS_TOPIC_PREFIX;
    public static string NO_QUEUE_CONSUMERS_TOPIC_PREFIX;
    public static string SLOW_CONSUMER_TOPIC_PREFIX;
    public static string FAST_PRODUCER_TOPIC_PREFIX;
    public static string MESSAGE_DISCAREDED_TOPIC_PREFIX;
    public static string FULL_TOPIC_PREFIX;
    public static string MESSAGE_DELIVERED_TOPIC_PREFIX;
    public static string MESSAGE_CONSUMED_TOPIC_PREFIX;
    public static string MESSAGE_DLQ_TOPIC_PREFIX;
    public static string MASTER_BROKER_TOPIC_PREFIX;
    public static string NETWORK_BRIDGE_TOPIC_PREFIX;
    public static string AGENT_TOPIC;
    public static string ADIVSORY_MESSAGE_TYPE;
    public static string MSG_PROPERTY_ORIGIN_BROKER_ID;
    public static string MSG_PROPERTY_ORIGIN_BROKER_NAME;
    public static string MSG_PROPERTY_ORIGIN_BROKER_URL;
    public static string MSG_PROPERTY_USAGE_NAME;
    public static string MSG_PROPERTY_CONSUMER_ID;
    public static string MSG_PROPERTY_PRODUCER_ID;
    public static string MSG_PROPERTY_MESSAGE_ID;
    public static string MSG_PROPERTY_CONSUMER_COUNT;
    public static string MSG_PROPERTY_DISCARDED_COUNT;
    public static ActiveMQTopic TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC;
    private static AdvisorySupport();
    public static ActiveMQTopic GetConnectionAdvisoryTopic();
    public static ActiveMQTopic GetConsumerAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetConsumerAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetProducerAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetProducerAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetExpiredMessageTopic(IDestination destination);
    public static ActiveMQTopic GetExpiredMessageTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetExpiredTopicMessageAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetExpiredQueueMessageAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetExpiredQueueMessageAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetNoTopicConsumersAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetNoTopicConsumersAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetNoQueueConsumersAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetNoQueueConsumersAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetSlowConsumerAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetSlowConsumerAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetFastProducerAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetFastProducerAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetMessageDiscardedAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetMessageDiscardedAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetMessageDeliveredAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetMessageDeliveredAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetMessageConsumedAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetMessageConsumedAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetMessageDLQdAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetMasterBrokerAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetMasterBrokerAdvisoryTopic();
    public static ActiveMQTopic GetNetworkBridgeAdvisoryTopic();
    public static ActiveMQTopic GetFullAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetFullAdvisoryTopic(ActiveMQDestination destination);
    public static ActiveMQTopic GetDestinationAdvisoryTopic(IDestination destination);
    public static ActiveMQTopic GetDestinationAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsDestinationAdvisoryTopic(IDestination destination);
    public static bool IsTempDestinationAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsDestinationAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsAdvisoryTopic(IDestination destination);
    public static bool IsAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsConnectionAdvisoryTopic(IDestination destination);
    public static bool IsConnectionAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsProducerAdvisoryTopic(IDestination destination);
    public static bool IsProducerAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsConsumerAdvisoryTopic(IDestination destination);
    public static bool IsConsumerAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsSlowConsumerAdvisoryTopic(IDestination destination);
    public static bool IsSlowConsumerAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsFastProducerAdvisoryTopic(IDestination destination);
    public static bool IsFastProducerAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsMessageConsumedAdvisoryTopic(IDestination destination);
    public static bool IsMessageConsumedAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsMasterBrokerAdvisoryTopic(IDestination destination);
    public static bool IsMasterBrokerAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsMessageDeliveredAdvisoryTopic(IDestination destination);
    public static bool IsMessageDeliveredAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsMessageDiscardedAdvisoryTopic(IDestination destination);
    public static bool IsMessageDiscardedAdvisoryTopic(ActiveMQDestination destination);
    public static bool IsFullAdvisoryTopic(IDestination destination);
    public static bool IsFullAdvisoryTopic(ActiveMQDestination destination);
}
public class Apache.NMS.ActiveMQ.BrokerException : NMSException {
    private BrokerError brokerError;
    public BrokerError BrokerError { get; }
    public string JavaStackTrace { get; }
    public BrokerException(BrokerError brokerError);
    public BrokerException(BrokerError brokerError, Exception innerException);
    protected BrokerException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static string StackTraceDump(StackTraceElement[] elements);
    public BrokerError get_BrokerError();
    public virtual string get_JavaStackTrace();
}
public class Apache.NMS.ActiveMQ.Commands.AcknowledgeHandler : MulticastDelegate {
    public AcknowledgeHandler(object object, IntPtr method);
    public virtual void Invoke(ActiveMQMessage message);
    public virtual IAsyncResult BeginInvoke(ActiveMQMessage message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQBlobMessage : ActiveMQMessage {
    public static byte ID_ACTIVEMQBLOBMESSAGE;
    public string RemoteBlobUrl { get; public set; }
    public string MimeType { get; public set; }
    public string Name { get; public set; }
    public bool DeletedByBroker { get; public set; }
    public virtual byte GetDataStructureType();
    public string get_RemoteBlobUrl();
    public void set_RemoteBlobUrl(string value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_DeletedByBroker();
    public void set_DeletedByBroker(bool value);
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQBytesMessage : ActiveMQMessage {
    public static byte ID_ACTIVEMQBYTESMESSAGE;
    private EndianBinaryReader dataIn;
    private EndianBinaryWriter dataOut;
    private MemoryStream outputBuffer;
    private int length;
    public long BodyLength { get; }
    public Byte[] Content { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual object Clone();
    public virtual void OnSend();
    public virtual void ClearBody();
    public sealed virtual long get_BodyLength();
    public sealed virtual byte ReadByte();
    public sealed virtual void WriteByte(byte value);
    public sealed virtual bool ReadBoolean();
    public sealed virtual void WriteBoolean(bool value);
    public sealed virtual char ReadChar();
    public sealed virtual void WriteChar(char value);
    public sealed virtual short ReadInt16();
    public sealed virtual void WriteInt16(short value);
    public sealed virtual int ReadInt32();
    public sealed virtual void WriteInt32(int value);
    public sealed virtual long ReadInt64();
    public sealed virtual void WriteInt64(long value);
    public sealed virtual float ReadSingle();
    public sealed virtual void WriteSingle(float value);
    public sealed virtual double ReadDouble();
    public sealed virtual void WriteDouble(double value);
    public sealed virtual int ReadBytes(Byte[] value);
    public sealed virtual int ReadBytes(Byte[] value, int length);
    public sealed virtual void WriteBytes(Byte[] value);
    public sealed virtual void WriteBytes(Byte[] value, int offset, int length);
    public sealed virtual string ReadString();
    public sealed virtual void WriteString(string value);
    public sealed virtual void WriteObject(object value);
    public sealed virtual Byte[] get_Content();
    public sealed virtual void set_Content(Byte[] value);
    public sealed virtual void Reset();
    private void InitializeReading();
    private void InitializeWriting();
    private void StoreContent();
    public virtual bool IsBodyAssignableTo(Type type);
    protected virtual T GetBody();
}
public abstract class Apache.NMS.ActiveMQ.Commands.ActiveMQDestination : BaseDataStructure {
    public static int ACTIVEMQ_TOPIC;
    public static int ACTIVEMQ_TEMPORARY_TOPIC;
    public static int ACTIVEMQ_QUEUE;
    public static int ACTIVEMQ_TEMPORARY_QUEUE;
    public static string ADVISORY_PREFIX;
    public static string CONSUMER_ADVISORY_PREFIX;
    public static string PRODUCER_ADVISORY_PREFIX;
    public static string CONNECTION_ADVISORY_PREFIX;
    public static string DEFAULT_ORDERED_TARGET;
    private static string TEMP_PREFIX;
    private static string TEMP_POSTFIX;
    private static string COMPOSITE_SEPARATOR;
    private string physicalName;
    private StringDictionary options;
    private bool exclusive;
    private bool ordered;
    private bool advisory;
    private string orderedTarget;
    public bool IsTopic { get; }
    public bool IsQueue { get; }
    public bool IsTemporary { get; }
    internal StringDictionary Options { get; }
    public string PhysicalName { get; public set; }
    public bool IsComposite { get; }
    public DestinationType DestinationType { get; }
    protected ActiveMQDestination(string name);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsTopic();
    public sealed virtual bool get_IsQueue();
    public sealed virtual bool get_IsTemporary();
    internal StringDictionary get_Options();
    private void setPhysicalName(string name);
    public bool IsAdvisory();
    public void SetAdvisory(bool advisory);
    public bool IsConsumerAdvisory();
    public bool IsProducerAdvisory();
    public bool IsConnectionAdvisory();
    public bool IsExclusive();
    public void SetExclusive(bool exclusive);
    public bool IsOrdered();
    public void SetOrdered(bool ordered);
    public string GetOrderedTarget();
    public void SetOrderedTarget(string orderedTarget);
    public static string Inspect(ActiveMQDestination destination);
    public static ActiveMQDestination Transform(IDestination destination);
    public static ActiveMQDestination CreateDestination(int type, string pyhsicalName);
    public static string CreateTemporaryName(string clientId);
    public static string GetClientId(ActiveMQDestination destination);
    public int CompareTo(object o);
    public int CompareTo(ActiveMQDestination that);
    public abstract virtual int GetDestinationType();
    public string get_PhysicalName();
    public void set_PhysicalName(string value);
    public string GetDestinationTypeAsString();
    public bool get_IsComposite();
    public ActiveMQDestination[] GetCompositeDestinations();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool IsWildcard();
    public abstract virtual ActiveMQDestination CreateDestination(string name);
    public abstract virtual DestinationType get_DestinationType();
    public virtual object Clone();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQMapMessage : ActiveMQMessage {
    public static byte ID_ACTIVEMQMAPMESSAGE;
    private PrimitiveMap body;
    private PrimitiveMapInterceptor typeConverter;
    public bool ReadOnlyBody { get; public set; }
    public IPrimitiveMap Body { get; }
    public virtual byte GetDataStructureType();
    public virtual void ClearBody();
    public virtual bool get_ReadOnlyBody();
    public virtual void set_ReadOnlyBody(bool value);
    public sealed virtual IPrimitiveMap get_Body();
    public virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public virtual bool IsBodyAssignableTo(Type type);
    protected virtual T GetBody();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQMessage : Message {
    public static byte ID_ACTIVEMQMESSAGE;
    private MessagePropertyIntercepter propertyHelper;
    private PrimitiveMap properties;
    private Connection connection;
    [CompilerGeneratedAttribute]
private AcknowledgeHandler Acknowledger;
    private TimeSpan timeToLive;
    public bool ReadOnlyProperties { get; public set; }
    public IPrimitiveMap Properties { get; }
    public IDestination FromDestination { get; public set; }
    public Connection Connection { get; public set; }
    public string NMSCorrelationID { get; public set; }
    public IDestination NMSDestination { get; public set; }
    public TimeSpan NMSTimeToLive { get; public set; }
    public string NMSMessageId { get; public set; }
    public MsgDeliveryMode NMSDeliveryMode { get; public set; }
    public MsgPriority NMSPriority { get; public set; }
    public bool NMSRedelivered { get; public set; }
    public IDestination NMSReplyTo { get; public set; }
    public DateTime NMSTimestamp { get; public set; }
    public string NMSType { get; public set; }
    public DateTime NMSDeliveryTime { get; public set; }
    public int NMSXDeliveryCount { get; }
    public string NMSXGroupID { get; public set; }
    public int NMSXGroupSeq { get; public set; }
    public string NMSXProducerTXID { get; }
    [CompilerGeneratedAttribute]
public void add_Acknowledger(AcknowledgeHandler value);
    [CompilerGeneratedAttribute]
public void remove_Acknowledger(AcknowledgeHandler value);
    public static ActiveMQMessage Transform(IMessage message);
    public virtual int GetHashCode();
    public virtual byte GetDataStructureType();
    public virtual object Clone();
    public virtual bool Equals(object that);
    public virtual bool Equals(ActiveMQMessage that);
    public sealed virtual void Acknowledge();
    public sealed virtual Task AcknowledgeAsync();
    public virtual void ClearBody();
    public virtual void ClearProperties();
    public sealed virtual T Body();
    public virtual bool IsBodyAssignableTo(Type type);
    protected virtual T GetBody();
    protected void FailIfReadOnlyBody();
    protected void FailIfWriteOnlyBody();
    public virtual bool get_ReadOnlyProperties();
    public virtual void set_ReadOnlyProperties(bool value);
    public sealed virtual IPrimitiveMap get_Properties();
    public IDestination get_FromDestination();
    public void set_FromDestination(IDestination value);
    public Connection get_Connection();
    public void set_Connection(Connection value);
    public sealed virtual string get_NMSCorrelationID();
    public sealed virtual void set_NMSCorrelationID(string value);
    public sealed virtual IDestination get_NMSDestination();
    public sealed virtual void set_NMSDestination(IDestination value);
    public sealed virtual TimeSpan get_NMSTimeToLive();
    public sealed virtual void set_NMSTimeToLive(TimeSpan value);
    public sealed virtual string get_NMSMessageId();
    public sealed virtual void set_NMSMessageId(string value);
    public sealed virtual MsgDeliveryMode get_NMSDeliveryMode();
    public sealed virtual void set_NMSDeliveryMode(MsgDeliveryMode value);
    public sealed virtual MsgPriority get_NMSPriority();
    public sealed virtual void set_NMSPriority(MsgPriority value);
    public sealed virtual bool get_NMSRedelivered();
    public sealed virtual void set_NMSRedelivered(bool value);
    public sealed virtual IDestination get_NMSReplyTo();
    public sealed virtual void set_NMSReplyTo(IDestination value);
    public sealed virtual DateTime get_NMSTimestamp();
    public sealed virtual void set_NMSTimestamp(DateTime value);
    public sealed virtual string get_NMSType();
    public sealed virtual void set_NMSType(string value);
    public sealed virtual DateTime get_NMSDeliveryTime();
    public sealed virtual void set_NMSDeliveryTime(DateTime value);
    public int get_NMSXDeliveryCount();
    public string get_NMSXGroupID();
    public void set_NMSXGroupID(string value);
    public int get_NMSXGroupSeq();
    public void set_NMSXGroupSeq(int value);
    public string get_NMSXProducerTXID();
    public object GetObjectProperty(string name);
    public void SetObjectProperty(string name, object value);
    public virtual bool IsMarshallAware();
    public virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQObjectMessage : ActiveMQMessage {
    public static byte ID_ACTIVEMQOBJECTMESSAGE;
    private object body;
    private IFormatter formatter;
    public object Body { get; public set; }
    public IFormatter Formatter { get; public set; }
    public virtual string ToString();
    public virtual byte GetDataStructureType();
    public sealed virtual object get_Body();
    public sealed virtual void set_Body(object value);
    public virtual bool IsBodyAssignableTo(Type type);
    protected virtual T GetBody();
    public virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public IFormatter get_Formatter();
    public void set_Formatter(IFormatter value);
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQQueue : ActiveMQDestination {
    public static byte ID_ACTIVEMQQUEUE;
    public DestinationType DestinationType { get; }
    public string QueueName { get; }
    public ActiveMQQueue(string name);
    public virtual DestinationType get_DestinationType();
    public sealed virtual string get_QueueName();
    public virtual byte GetDataStructureType();
    public virtual int GetDestinationType();
    public virtual ActiveMQDestination CreateDestination(string name);
    public virtual object Clone();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQStreamMessage : ActiveMQMessage {
    private EndianBinaryReader dataIn;
    private EndianBinaryWriter dataOut;
    private MemoryStream byteBuffer;
    private int bytesRemaining;
    public static byte ID_ACTIVEMQSTREAMMESSAGE;
    public virtual byte GetDataStructureType();
    public sealed virtual bool ReadBoolean();
    public sealed virtual byte ReadByte();
    public sealed virtual char ReadChar();
    public sealed virtual short ReadInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual long ReadInt64();
    public sealed virtual float ReadSingle();
    public sealed virtual double ReadDouble();
    public sealed virtual string ReadString();
    public sealed virtual int ReadBytes(Byte[] value);
    public sealed virtual object ReadObject();
    public sealed virtual void WriteBoolean(bool value);
    public sealed virtual void WriteByte(byte value);
    public sealed virtual void WriteBytes(Byte[] value);
    public sealed virtual void WriteBytes(Byte[] value, int offset, int length);
    public sealed virtual void WriteChar(char value);
    public sealed virtual void WriteInt16(short value);
    public sealed virtual void WriteInt32(int value);
    public sealed virtual void WriteInt64(long value);
    public sealed virtual void WriteSingle(float value);
    public sealed virtual void WriteDouble(double value);
    public sealed virtual void WriteString(string value);
    public sealed virtual void WriteObject(object value);
    public virtual object Clone();
    public virtual void OnSend();
    public virtual void ClearBody();
    public sealed virtual void Reset();
    private void InitializeReading();
    private void InitializeWriting();
    private void StoreContent();
    public virtual bool IsBodyAssignableTo(Type type);
}
public abstract class Apache.NMS.ActiveMQ.Commands.ActiveMQTempDestination : ActiveMQDestination {
    private Connection connection;
    public static byte ID_ActiveMQTempDestination;
    public DestinationType DestinationType { get; }
    public Connection Connection { get; public set; }
    protected ActiveMQTempDestination(string name);
    public virtual int GetDestinationType();
    public virtual ActiveMQDestination CreateDestination(string name);
    public abstract virtual DestinationType get_DestinationType();
    public Connection get_Connection();
    public void set_Connection(Connection value);
    public virtual byte GetDataStructureType();
    public virtual object Clone();
    public sealed virtual Task DeleteAsync();
    public sealed virtual void Delete();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQTempQueue : ActiveMQTempDestination {
    public static byte ID_ACTIVEMQTEMPQUEUE;
    public DestinationType DestinationType { get; }
    public string QueueName { get; }
    public ActiveMQTempQueue(string name);
    public virtual DestinationType get_DestinationType();
    public sealed virtual string get_QueueName();
    public string GetQueueName();
    public virtual byte GetDataStructureType();
    public virtual int GetDestinationType();
    public virtual ActiveMQDestination CreateDestination(string name);
    public virtual object Clone();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQTempTopic : ActiveMQTempDestination {
    public static byte ID_ACTIVEMQTEMPTOPIC;
    public DestinationType DestinationType { get; }
    public string TopicName { get; }
    public ActiveMQTempTopic(string name);
    public virtual DestinationType get_DestinationType();
    public sealed virtual string get_TopicName();
    public string GetTopicName();
    public virtual byte GetDataStructureType();
    public virtual int GetDestinationType();
    public virtual ActiveMQDestination CreateDestination(string name);
    public virtual object Clone();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQTextMessage : ActiveMQMessage {
    public static byte ID_ACTIVEMQTEXTMESSAGE;
    private string text;
    public string Text { get; public set; }
    public ActiveMQTextMessage(string text);
    public virtual string ToString();
    public virtual void ClearBody();
    public virtual byte GetDataStructureType();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public virtual int Size();
    public virtual bool IsBodyAssignableTo(Type type);
    protected virtual T GetBody();
}
public class Apache.NMS.ActiveMQ.Commands.ActiveMQTopic : ActiveMQDestination {
    public static byte ID_ACTIVEMQTOPIC;
    public DestinationType DestinationType { get; }
    public string TopicName { get; }
    public ActiveMQTopic(string name);
    public virtual DestinationType get_DestinationType();
    public sealed virtual string get_TopicName();
    public virtual byte GetDataStructureType();
    public virtual int GetDestinationType();
    public virtual ActiveMQDestination CreateDestination(string name);
    public virtual object Clone();
}
public abstract class Apache.NMS.ActiveMQ.Commands.BaseCommand : BaseDataStructure {
    private int commandId;
    private bool responseRequired;
    public int CommandId { get; public set; }
    public bool IsBrokerInfo { get; }
    public bool IsConnectionControl { get; }
    public bool IsConnectionInfo { get; }
    public bool IsConnectionError { get; }
    public bool IsConsumerControl { get; }
    public bool IsConsumerInfo { get; }
    public bool IsControlCommand { get; }
    public bool IsDestinationInfo { get; }
    public bool IsFlushCommand { get; }
    public bool IsKeepAliveInfo { get; }
    public bool IsMessage { get; }
    public bool IsMessageAck { get; }
    public bool IsMessageDispatch { get; }
    public bool IsMessageDispatchNotification { get; }
    public bool IsMessagePull { get; }
    public bool IsProducerAck { get; }
    public bool IsProducerInfo { get; }
    public bool IsRemoveInfo { get; }
    public bool IsRemoveSubscriptionInfo { get; }
    public bool IsReplayCommand { get; }
    public bool IsResponse { get; }
    public bool IsSessionInfo { get; }
    public bool IsShutdownInfo { get; }
    public bool IsTransactionInfo { get; }
    public bool IsWireFormatInfo { get; }
    public bool ResponseRequired { get; public set; }
    public sealed virtual int get_CommandId();
    public sealed virtual void set_CommandId(int value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual string ToString();
    public static string GetDataStructureTypeAsString(int type);
    public virtual Response Visit(ICommandVisitor visitor);
    public virtual bool get_IsBrokerInfo();
    public virtual bool get_IsConnectionControl();
    public virtual bool get_IsConnectionInfo();
    public virtual bool get_IsConnectionError();
    public virtual bool get_IsConsumerControl();
    public virtual bool get_IsConsumerInfo();
    public virtual bool get_IsControlCommand();
    public virtual bool get_IsDestinationInfo();
    public virtual bool get_IsFlushCommand();
    public virtual bool get_IsKeepAliveInfo();
    public virtual bool get_IsMessage();
    public virtual bool get_IsMessageAck();
    public virtual bool get_IsMessageDispatch();
    public virtual bool get_IsMessageDispatchNotification();
    public virtual bool get_IsMessagePull();
    public virtual bool get_IsProducerAck();
    public virtual bool get_IsProducerInfo();
    public virtual bool get_IsRemoveInfo();
    public virtual bool get_IsRemoveSubscriptionInfo();
    public virtual bool get_IsReplayCommand();
    public virtual bool get_IsResponse();
    public virtual bool get_IsSessionInfo();
    public virtual bool get_IsShutdownInfo();
    public virtual bool get_IsTransactionInfo();
    public virtual bool get_IsWireFormatInfo();
    public virtual bool get_ResponseRequired();
    public virtual void set_ResponseRequired(bool value);
    public virtual object Clone();
}
public abstract class Apache.NMS.ActiveMQ.Commands.BaseDataStructure : object {
    public virtual byte GetDataStructureType();
    public virtual bool IsMarshallAware();
    public virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public virtual void AfterMarshall(OpenWireFormat wireFormat);
    public virtual void BeforeUnmarshall(OpenWireFormat wireFormat);
    public virtual void AfterUnmarshall(OpenWireFormat wireFormat);
    public virtual void SetMarshalledForm(OpenWireFormat wireFormat, Byte[] data);
    public virtual Byte[] GetMarshalledForm(OpenWireFormat wireFormat);
    public int HashCode(object value);
    public virtual object Clone();
    internal static bool ArrayEquals(T[] a, T[] b);
}
public interface Apache.NMS.ActiveMQ.Commands.BooleanExpression {
}
public class Apache.NMS.ActiveMQ.Commands.BrokerError : BaseCommand {
    private string message;
    private string exceptionClass;
    private StackTraceElement[] stackTraceElements;
    private BrokerError cause;
    public string Message { get; public set; }
    public string ExceptionClass { get; public set; }
    public StackTraceElement[] StackTraceElements { get; public set; }
    public BrokerError Cause { get; public set; }
    public string StackTrace { get; }
    public string get_Message();
    public void set_Message(string value);
    public string get_ExceptionClass();
    public void set_ExceptionClass(string value);
    public StackTraceElement[] get_StackTraceElements();
    public void set_StackTraceElements(StackTraceElement[] value);
    public BrokerError get_Cause();
    public void set_Cause(BrokerError value);
    public string get_StackTrace();
    public void PrintStackTrace(TextWriter writer);
}
public class Apache.NMS.ActiveMQ.Commands.BrokerId : BaseDataStructure {
    public static byte ID_BROKERID;
    private string value;
    public string Value { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public string get_Value();
    public void set_Value(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(BrokerId that);
}
public class Apache.NMS.ActiveMQ.Commands.BrokerInfo : BaseCommand {
    public static byte ID_BROKERINFO;
    private BrokerId brokerId;
    private string brokerURL;
    private BrokerInfo[] peerBrokerInfos;
    private string brokerName;
    private bool slaveBroker;
    private bool masterBroker;
    private bool faultTolerantConfiguration;
    private bool duplexConnection;
    private bool networkConnection;
    private long connectionId;
    private string brokerUploadUrl;
    private string networkProperties;
    public BrokerId BrokerId { get; public set; }
    public string BrokerURL { get; public set; }
    public BrokerInfo[] PeerBrokerInfos { get; public set; }
    public string BrokerName { get; public set; }
    public bool SlaveBroker { get; public set; }
    public bool MasterBroker { get; public set; }
    public bool FaultTolerantConfiguration { get; public set; }
    public bool DuplexConnection { get; public set; }
    public bool NetworkConnection { get; public set; }
    public long ConnectionId { get; public set; }
    public string BrokerUploadUrl { get; public set; }
    public string NetworkProperties { get; public set; }
    public bool IsBrokerInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public BrokerId get_BrokerId();
    public void set_BrokerId(BrokerId value);
    public string get_BrokerURL();
    public void set_BrokerURL(string value);
    public BrokerInfo[] get_PeerBrokerInfos();
    public void set_PeerBrokerInfos(BrokerInfo[] value);
    public string get_BrokerName();
    public void set_BrokerName(string value);
    public bool get_SlaveBroker();
    public void set_SlaveBroker(bool value);
    public bool get_MasterBroker();
    public void set_MasterBroker(bool value);
    public bool get_FaultTolerantConfiguration();
    public void set_FaultTolerantConfiguration(bool value);
    public bool get_DuplexConnection();
    public void set_DuplexConnection(bool value);
    public bool get_NetworkConnection();
    public void set_NetworkConnection(bool value);
    public long get_ConnectionId();
    public void set_ConnectionId(long value);
    public string get_BrokerUploadUrl();
    public void set_BrokerUploadUrl(string value);
    public string get_NetworkProperties();
    public void set_NetworkProperties(string value);
    public virtual bool get_IsBrokerInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public interface Apache.NMS.ActiveMQ.Commands.Command {
    public int CommandId { get; public set; }
    public bool ResponseRequired { get; public set; }
    public bool IsBrokerInfo { get; }
    public bool IsConnectionControl { get; }
    public bool IsConnectionInfo { get; }
    public bool IsConnectionError { get; }
    public bool IsConsumerControl { get; }
    public bool IsConsumerInfo { get; }
    public bool IsControlCommand { get; }
    public bool IsDestinationInfo { get; }
    public bool IsFlushCommand { get; }
    public bool IsKeepAliveInfo { get; }
    public bool IsMessage { get; }
    public bool IsMessageAck { get; }
    public bool IsMessageDispatch { get; }
    public bool IsMessageDispatchNotification { get; }
    public bool IsMessagePull { get; }
    public bool IsProducerAck { get; }
    public bool IsProducerInfo { get; }
    public bool IsRemoveInfo { get; }
    public bool IsRemoveSubscriptionInfo { get; }
    public bool IsReplayCommand { get; }
    public bool IsResponse { get; }
    public bool IsSessionInfo { get; }
    public bool IsShutdownInfo { get; }
    public bool IsTransactionInfo { get; }
    public bool IsWireFormatInfo { get; }
    public abstract virtual int get_CommandId();
    public abstract virtual void set_CommandId(int value);
    public abstract virtual bool get_ResponseRequired();
    public abstract virtual void set_ResponseRequired(bool value);
    public abstract virtual bool get_IsBrokerInfo();
    public abstract virtual bool get_IsConnectionControl();
    public abstract virtual bool get_IsConnectionInfo();
    public abstract virtual bool get_IsConnectionError();
    public abstract virtual bool get_IsConsumerControl();
    public abstract virtual bool get_IsConsumerInfo();
    public abstract virtual bool get_IsControlCommand();
    public abstract virtual bool get_IsDestinationInfo();
    public abstract virtual bool get_IsFlushCommand();
    public abstract virtual bool get_IsKeepAliveInfo();
    public abstract virtual bool get_IsMessage();
    public abstract virtual bool get_IsMessageAck();
    public abstract virtual bool get_IsMessageDispatch();
    public abstract virtual bool get_IsMessageDispatchNotification();
    public abstract virtual bool get_IsMessagePull();
    public abstract virtual bool get_IsProducerAck();
    public abstract virtual bool get_IsProducerInfo();
    public abstract virtual bool get_IsRemoveInfo();
    public abstract virtual bool get_IsRemoveSubscriptionInfo();
    public abstract virtual bool get_IsReplayCommand();
    public abstract virtual bool get_IsResponse();
    public abstract virtual bool get_IsSessionInfo();
    public abstract virtual bool get_IsShutdownInfo();
    public abstract virtual bool get_IsTransactionInfo();
    public abstract virtual bool get_IsWireFormatInfo();
    public abstract virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ConnectionControl : BaseCommand {
    public static byte ID_CONNECTIONCONTROL;
    private bool close;
    private bool exit;
    private bool faultTolerant;
    private bool resume;
    private bool suspend;
    private string connectedBrokers;
    private string reconnectTo;
    private bool rebalanceConnection;
    private Byte[] token;
    public bool Close { get; public set; }
    public bool Exit { get; public set; }
    public bool FaultTolerant { get; public set; }
    public bool Resume { get; public set; }
    public bool Suspend { get; public set; }
    public string ConnectedBrokers { get; public set; }
    public string ReconnectTo { get; public set; }
    public bool RebalanceConnection { get; public set; }
    public Byte[] Token { get; public set; }
    public bool IsConnectionControl { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public bool get_Close();
    public void set_Close(bool value);
    public bool get_Exit();
    public void set_Exit(bool value);
    public bool get_FaultTolerant();
    public void set_FaultTolerant(bool value);
    public bool get_Resume();
    public void set_Resume(bool value);
    public bool get_Suspend();
    public void set_Suspend(bool value);
    public string get_ConnectedBrokers();
    public void set_ConnectedBrokers(string value);
    public string get_ReconnectTo();
    public void set_ReconnectTo(string value);
    public bool get_RebalanceConnection();
    public void set_RebalanceConnection(bool value);
    public Byte[] get_Token();
    public void set_Token(Byte[] value);
    public virtual bool get_IsConnectionControl();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ConnectionError : BaseCommand {
    public static byte ID_CONNECTIONERROR;
    private BrokerError exception;
    private ConnectionId connectionId;
    public BrokerError Exception { get; public set; }
    public ConnectionId ConnectionId { get; public set; }
    public bool IsConnectionError { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public BrokerError get_Exception();
    public void set_Exception(BrokerError value);
    public ConnectionId get_ConnectionId();
    public void set_ConnectionId(ConnectionId value);
    public virtual bool get_IsConnectionError();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ConnectionId : BaseDataStructure {
    public static byte ID_CONNECTIONID;
    private string value;
    public string Value { get; public set; }
    public ConnectionId(SessionId sessionId);
    public ConnectionId(ProducerId producerId);
    public ConnectionId(ConsumerId consumerId);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public string get_Value();
    public void set_Value(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(ConnectionId that);
}
public class Apache.NMS.ActiveMQ.Commands.ConnectionInfo : BaseCommand {
    public static byte ID_CONNECTIONINFO;
    private ConnectionId connectionId;
    private string clientId;
    private string password;
    private string userName;
    private BrokerId[] brokerPath;
    private bool brokerMasterConnector;
    private bool manageable;
    private bool clientMaster;
    private bool faultTolerant;
    private bool failoverReconnect;
    private string clientIp;
    public ConnectionId ConnectionId { get; public set; }
    public string ClientId { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public BrokerId[] BrokerPath { get; public set; }
    public bool BrokerMasterConnector { get; public set; }
    public bool Manageable { get; public set; }
    public bool ClientMaster { get; public set; }
    public bool FaultTolerant { get; public set; }
    public bool FailoverReconnect { get; public set; }
    public string ClientIp { get; public set; }
    public bool IsConnectionInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConnectionId get_ConnectionId();
    public void set_ConnectionId(ConnectionId value);
    public string get_ClientId();
    public void set_ClientId(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public BrokerId[] get_BrokerPath();
    public void set_BrokerPath(BrokerId[] value);
    public bool get_BrokerMasterConnector();
    public void set_BrokerMasterConnector(bool value);
    public bool get_Manageable();
    public void set_Manageable(bool value);
    public bool get_ClientMaster();
    public void set_ClientMaster(bool value);
    public bool get_FaultTolerant();
    public void set_FaultTolerant(bool value);
    public bool get_FailoverReconnect();
    public void set_FailoverReconnect(bool value);
    public string get_ClientIp();
    public void set_ClientIp(string value);
    public virtual bool get_IsConnectionInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ConsumerControl : BaseCommand {
    public static byte ID_CONSUMERCONTROL;
    private ActiveMQDestination destination;
    private bool close;
    private ConsumerId consumerId;
    private int prefetch;
    private bool flush;
    private bool start;
    private bool stop;
    public ActiveMQDestination Destination { get; public set; }
    public bool Close { get; public set; }
    public ConsumerId ConsumerId { get; public set; }
    public int Prefetch { get; public set; }
    public bool Flush { get; public set; }
    public bool Start { get; public set; }
    public bool Stop { get; public set; }
    public bool IsConsumerControl { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public bool get_Close();
    public void set_Close(bool value);
    public ConsumerId get_ConsumerId();
    public void set_ConsumerId(ConsumerId value);
    public int get_Prefetch();
    public void set_Prefetch(int value);
    public bool get_Flush();
    public void set_Flush(bool value);
    public bool get_Start();
    public void set_Start(bool value);
    public bool get_Stop();
    public void set_Stop(bool value);
    public virtual bool get_IsConsumerControl();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ConsumerId : BaseDataStructure {
    public static byte ID_CONSUMERID;
    private SessionId parentId;
    private string connectionId;
    private long sessionId;
    private long value;
    public SessionId ParentId { get; }
    public string ConnectionId { get; public set; }
    public long SessionId { get; public set; }
    public long Value { get; public set; }
    public ConsumerId(SessionId sessionId, long consumerId);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public SessionId get_ParentId();
    public string get_ConnectionId();
    public void set_ConnectionId(string value);
    public long get_SessionId();
    public void set_SessionId(long value);
    public long get_Value();
    public void set_Value(long value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(ConsumerId that);
}
public class Apache.NMS.ActiveMQ.Commands.ConsumerInfo : BaseCommand {
    public static byte ID_CONSUMERINFO;
    private ConsumerId consumerId;
    private bool browser;
    private ActiveMQDestination destination;
    private int prefetchSize;
    private int maximumPendingMessageLimit;
    private bool dispatchAsync;
    private string selector;
    private string clientId;
    private string subscriptionName;
    private bool noLocal;
    private bool exclusive;
    private bool retroactive;
    private byte priority;
    private BrokerId[] brokerPath;
    private BooleanExpression additionalPredicate;
    private bool networkSubscription;
    private bool optimizedAcknowledge;
    private bool noRangeAcks;
    private ConsumerId[] networkConsumerPath;
    public ConsumerId ConsumerId { get; public set; }
    public bool Browser { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public int PrefetchSize { get; public set; }
    public int MaximumPendingMessageLimit { get; public set; }
    public bool DispatchAsync { get; public set; }
    public string Selector { get; public set; }
    public string ClientId { get; public set; }
    public string SubscriptionName { get; public set; }
    public bool NoLocal { get; public set; }
    public bool Exclusive { get; public set; }
    public bool Retroactive { get; public set; }
    public byte Priority { get; public set; }
    public BrokerId[] BrokerPath { get; public set; }
    public BooleanExpression AdditionalPredicate { get; public set; }
    public bool NetworkSubscription { get; public set; }
    public bool OptimizedAcknowledge { get; public set; }
    public bool NoRangeAcks { get; public set; }
    public ConsumerId[] NetworkConsumerPath { get; public set; }
    public bool IsConsumerInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConsumerId get_ConsumerId();
    public void set_ConsumerId(ConsumerId value);
    public bool get_Browser();
    public void set_Browser(bool value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public int get_PrefetchSize();
    public void set_PrefetchSize(int value);
    public int get_MaximumPendingMessageLimit();
    public void set_MaximumPendingMessageLimit(int value);
    public bool get_DispatchAsync();
    public void set_DispatchAsync(bool value);
    public string get_Selector();
    public void set_Selector(string value);
    public string get_ClientId();
    public void set_ClientId(string value);
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    public bool get_NoLocal();
    public void set_NoLocal(bool value);
    public bool get_Exclusive();
    public void set_Exclusive(bool value);
    public bool get_Retroactive();
    public void set_Retroactive(bool value);
    public byte get_Priority();
    public void set_Priority(byte value);
    public BrokerId[] get_BrokerPath();
    public void set_BrokerPath(BrokerId[] value);
    public BooleanExpression get_AdditionalPredicate();
    public void set_AdditionalPredicate(BooleanExpression value);
    public bool get_NetworkSubscription();
    public void set_NetworkSubscription(bool value);
    public bool get_OptimizedAcknowledge();
    public void set_OptimizedAcknowledge(bool value);
    public bool get_NoRangeAcks();
    public void set_NoRangeAcks(bool value);
    public ConsumerId[] get_NetworkConsumerPath();
    public void set_NetworkConsumerPath(ConsumerId[] value);
    public virtual bool get_IsConsumerInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ControlCommand : BaseCommand {
    public static byte ID_CONTROLCOMMAND;
    private string command;
    public string Command { get; public set; }
    public bool IsControlCommand { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public string get_Command();
    public void set_Command(string value);
    public virtual bool get_IsControlCommand();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.DataArrayResponse : Response {
    public static byte ID_DATAARRAYRESPONSE;
    private DataStructure[] data;
    public DataStructure[] Data { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public DataStructure[] get_Data();
    public void set_Data(DataStructure[] value);
}
public class Apache.NMS.ActiveMQ.Commands.DataResponse : Response {
    public static byte ID_DATARESPONSE;
    private DataStructure data;
    public DataStructure Data { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public DataStructure get_Data();
    public void set_Data(DataStructure value);
}
public interface Apache.NMS.ActiveMQ.Commands.DataStructure {
    public abstract virtual byte GetDataStructureType();
    public abstract virtual bool IsMarshallAware();
}
public abstract class Apache.NMS.ActiveMQ.Commands.DataStructureSupport : object {
    public virtual byte GetDataStructureType();
    public virtual bool IsMarshallAware();
    public virtual object Clone();
}
public class Apache.NMS.ActiveMQ.Commands.DestinationInfo : BaseCommand {
    public static byte ID_DESTINATIONINFO;
    public static byte ADD_OPERATION_TYPE;
    public static byte REMOVE_OPERATION_TYPE;
    private ConnectionId connectionId;
    private ActiveMQDestination destination;
    private byte operationType;
    private long timeout;
    private BrokerId[] brokerPath;
    public bool IsAddOperation { get; }
    public bool IsRemoveOperation { get; }
    public ConnectionId ConnectionId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public byte OperationType { get; public set; }
    public long Timeout { get; public set; }
    public BrokerId[] BrokerPath { get; public set; }
    public bool IsDestinationInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public bool get_IsAddOperation();
    public bool get_IsRemoveOperation();
    public ConnectionId get_ConnectionId();
    public void set_ConnectionId(ConnectionId value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public byte get_OperationType();
    public void set_OperationType(byte value);
    public long get_Timeout();
    public void set_Timeout(long value);
    public BrokerId[] get_BrokerPath();
    public void set_BrokerPath(BrokerId[] value);
    public virtual bool get_IsDestinationInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.DiscoveryEvent : BaseDataStructure {
    public static byte ID_DISCOVERYEVENT;
    private string serviceName;
    private string brokerName;
    public string ServiceName { get; public set; }
    public string BrokerName { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public string get_BrokerName();
    public void set_BrokerName(string value);
}
public class Apache.NMS.ActiveMQ.Commands.ExceptionResponse : Response {
    public static byte ID_EXCEPTIONRESPONSE;
    private BrokerError exception;
    public BrokerError Exception { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public BrokerError get_Exception();
    public void set_Exception(BrokerError value);
}
public class Apache.NMS.ActiveMQ.Commands.FlushCommand : BaseCommand {
    public static byte ID_FLUSHCOMMAND;
    public bool IsFlushCommand { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public virtual bool get_IsFlushCommand();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.IntegerResponse : Response {
    public static byte ID_INTEGERRESPONSE;
    private int result;
    public int Result { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public int get_Result();
    public void set_Result(int value);
}
public class Apache.NMS.ActiveMQ.Commands.JournalQueueAck : BaseDataStructure {
    public static byte ID_JOURNALQUEUEACK;
    private ActiveMQDestination destination;
    private MessageAck messageAck;
    public ActiveMQDestination Destination { get; public set; }
    public MessageAck MessageAck { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public MessageAck get_MessageAck();
    public void set_MessageAck(MessageAck value);
}
public class Apache.NMS.ActiveMQ.Commands.JournalTopicAck : BaseDataStructure {
    public static byte ID_JOURNALTOPICACK;
    private ActiveMQDestination destination;
    private MessageId messageId;
    private long messageSequenceId;
    private string subscritionName;
    private string clientId;
    private TransactionId transactionId;
    public ActiveMQDestination Destination { get; public set; }
    public MessageId MessageId { get; public set; }
    public long MessageSequenceId { get; public set; }
    public string SubscritionName { get; public set; }
    public string ClientId { get; public set; }
    public TransactionId TransactionId { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public MessageId get_MessageId();
    public void set_MessageId(MessageId value);
    public long get_MessageSequenceId();
    public void set_MessageSequenceId(long value);
    public string get_SubscritionName();
    public void set_SubscritionName(string value);
    public string get_ClientId();
    public void set_ClientId(string value);
    public TransactionId get_TransactionId();
    public void set_TransactionId(TransactionId value);
}
public class Apache.NMS.ActiveMQ.Commands.JournalTrace : BaseDataStructure {
    public static byte ID_JOURNALTRACE;
    private string message;
    public string Message { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public string get_Message();
    public void set_Message(string value);
}
public class Apache.NMS.ActiveMQ.Commands.JournalTransaction : BaseDataStructure {
    public static byte ID_JOURNALTRANSACTION;
    private TransactionId transactionId;
    private byte type;
    private bool wasPrepared;
    public TransactionId TransactionId { get; public set; }
    public byte Type { get; public set; }
    public bool WasPrepared { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public TransactionId get_TransactionId();
    public void set_TransactionId(TransactionId value);
    public byte get_Type();
    public void set_Type(byte value);
    public bool get_WasPrepared();
    public void set_WasPrepared(bool value);
}
public class Apache.NMS.ActiveMQ.Commands.KeepAliveInfo : BaseCommand {
    public static byte ID_KEEPALIVEINFO;
    public bool IsKeepAliveInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public virtual bool get_IsKeepAliveInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.LastPartialCommand : PartialCommand {
    public static byte ID_LASTPARTIALCOMMAND;
    public virtual byte GetDataStructureType();
    public virtual string ToString();
}
public class Apache.NMS.ActiveMQ.Commands.LocalTransactionId : TransactionId {
    public static byte ID_LOCALTRANSACTIONID;
    private long value;
    private ConnectionId connectionId;
    public long Value { get; public set; }
    public ConnectionId ConnectionId { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public long get_Value();
    public void set_Value(long value);
    public ConnectionId get_ConnectionId();
    public void set_ConnectionId(ConnectionId value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(LocalTransactionId that);
}
public interface Apache.NMS.ActiveMQ.Commands.MarshallAware {
    public abstract virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public abstract virtual void AfterMarshall(OpenWireFormat wireFormat);
    public abstract virtual void BeforeUnmarshall(OpenWireFormat wireFormat);
    public abstract virtual void AfterUnmarshall(OpenWireFormat wireFormat);
    public abstract virtual void SetMarshalledForm(OpenWireFormat wireFormat, Byte[] data);
    public abstract virtual Byte[] GetMarshalledForm(OpenWireFormat wireFormat);
}
public class Apache.NMS.ActiveMQ.Commands.Message : BaseCommand {
    public static byte ID_MESSAGE;
    private ProducerId producerId;
    private ActiveMQDestination destination;
    private TransactionId transactionId;
    private ActiveMQDestination originalDestination;
    private MessageId messageId;
    private TransactionId originalTransactionId;
    private string groupID;
    private int groupSequence;
    private string correlationId;
    private bool persistent;
    private long expiration;
    private byte priority;
    private ActiveMQDestination replyTo;
    private long timestamp;
    private string type;
    private Byte[] content;
    private Byte[] marshalledProperties;
    private DataStructure dataStructure;
    private ConsumerId targetConsumerId;
    private bool compressed;
    private int redeliveryCounter;
    private BrokerId[] brokerPath;
    private long arrival;
    private string userID;
    private bool recievedByDFBridge;
    private bool droppable;
    private BrokerId[] cluster;
    private long brokerInTime;
    private long brokerOutTime;
    private bool jMSXGroupFirstForConsumer;
    private bool readOnlyMsgProperties;
    private bool readOnlyMsgBody;
    public static int DEFAULT_MINIMUM_MESSAGE_SIZE;
    public ProducerId ProducerId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public TransactionId TransactionId { get; public set; }
    public ActiveMQDestination OriginalDestination { get; public set; }
    public MessageId MessageId { get; public set; }
    public TransactionId OriginalTransactionId { get; public set; }
    public string GroupID { get; public set; }
    public int GroupSequence { get; public set; }
    public string CorrelationId { get; public set; }
    public bool Persistent { get; public set; }
    public long Expiration { get; public set; }
    public byte Priority { get; public set; }
    public ActiveMQDestination ReplyTo { get; public set; }
    public long Timestamp { get; public set; }
    public string Type { get; public set; }
    public Byte[] Content { get; public set; }
    public Byte[] MarshalledProperties { get; public set; }
    public DataStructure DataStructure { get; public set; }
    public ConsumerId TargetConsumerId { get; public set; }
    public bool Compressed { get; public set; }
    public int RedeliveryCounter { get; public set; }
    public BrokerId[] BrokerPath { get; public set; }
    public long Arrival { get; public set; }
    public string UserID { get; public set; }
    public bool RecievedByDFBridge { get; public set; }
    public bool Droppable { get; public set; }
    public BrokerId[] Cluster { get; public set; }
    public long BrokerInTime { get; public set; }
    public long BrokerOutTime { get; public set; }
    public bool JMSXGroupFirstForConsumer { get; public set; }
    public bool ReadOnlyProperties { get; public set; }
    public bool ReadOnlyBody { get; public set; }
    public bool IsMessage { get; }
    public virtual byte GetDataStructureType();
    public virtual object Clone();
    public virtual string ToString();
    public virtual int Size();
    public virtual void OnSend();
    public virtual void OnMessageRollback();
    public bool IsExpired();
    public ProducerId get_ProducerId();
    public void set_ProducerId(ProducerId value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public TransactionId get_TransactionId();
    public void set_TransactionId(TransactionId value);
    public ActiveMQDestination get_OriginalDestination();
    public void set_OriginalDestination(ActiveMQDestination value);
    public MessageId get_MessageId();
    public void set_MessageId(MessageId value);
    public TransactionId get_OriginalTransactionId();
    public void set_OriginalTransactionId(TransactionId value);
    public string get_GroupID();
    public void set_GroupID(string value);
    public int get_GroupSequence();
    public void set_GroupSequence(int value);
    public string get_CorrelationId();
    public void set_CorrelationId(string value);
    public bool get_Persistent();
    public void set_Persistent(bool value);
    public long get_Expiration();
    public void set_Expiration(long value);
    public byte get_Priority();
    public void set_Priority(byte value);
    public ActiveMQDestination get_ReplyTo();
    public void set_ReplyTo(ActiveMQDestination value);
    public long get_Timestamp();
    public void set_Timestamp(long value);
    public string get_Type();
    public void set_Type(string value);
    public Byte[] get_Content();
    public void set_Content(Byte[] value);
    public Byte[] get_MarshalledProperties();
    public void set_MarshalledProperties(Byte[] value);
    public DataStructure get_DataStructure();
    public void set_DataStructure(DataStructure value);
    public ConsumerId get_TargetConsumerId();
    public void set_TargetConsumerId(ConsumerId value);
    public bool get_Compressed();
    public void set_Compressed(bool value);
    public int get_RedeliveryCounter();
    public void set_RedeliveryCounter(int value);
    public BrokerId[] get_BrokerPath();
    public void set_BrokerPath(BrokerId[] value);
    public long get_Arrival();
    public void set_Arrival(long value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_RecievedByDFBridge();
    public void set_RecievedByDFBridge(bool value);
    public bool get_Droppable();
    public void set_Droppable(bool value);
    public BrokerId[] get_Cluster();
    public void set_Cluster(BrokerId[] value);
    public long get_BrokerInTime();
    public void set_BrokerInTime(long value);
    public long get_BrokerOutTime();
    public void set_BrokerOutTime(long value);
    public bool get_JMSXGroupFirstForConsumer();
    public void set_JMSXGroupFirstForConsumer(bool value);
    public virtual bool get_ReadOnlyProperties();
    public virtual void set_ReadOnlyProperties(bool value);
    public virtual bool get_ReadOnlyBody();
    public virtual void set_ReadOnlyBody(bool value);
    public virtual bool get_IsMessage();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.MessageAck : BaseCommand {
    public static byte ID_MESSAGEACK;
    private ActiveMQDestination destination;
    private TransactionId transactionId;
    private ConsumerId consumerId;
    private byte ackType;
    private MessageId firstMessageId;
    private MessageId lastMessageId;
    private int messageCount;
    private BrokerError poisonCause;
    public ActiveMQDestination Destination { get; public set; }
    public TransactionId TransactionId { get; public set; }
    public ConsumerId ConsumerId { get; public set; }
    public byte AckType { get; public set; }
    public MessageId FirstMessageId { get; public set; }
    public MessageId LastMessageId { get; public set; }
    public int MessageCount { get; public set; }
    public BrokerError PoisonCause { get; public set; }
    public bool IsMessageAck { get; }
    public MessageAck(MessageDispatch dispatch, byte ackType, int messageCount);
    public MessageAck(Message message, byte ackType, int messageCount);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public TransactionId get_TransactionId();
    public void set_TransactionId(TransactionId value);
    public ConsumerId get_ConsumerId();
    public void set_ConsumerId(ConsumerId value);
    public byte get_AckType();
    public void set_AckType(byte value);
    public MessageId get_FirstMessageId();
    public void set_FirstMessageId(MessageId value);
    public MessageId get_LastMessageId();
    public void set_LastMessageId(MessageId value);
    public int get_MessageCount();
    public void set_MessageCount(int value);
    public BrokerError get_PoisonCause();
    public void set_PoisonCause(BrokerError value);
    public virtual bool get_IsMessageAck();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.MessageDispatch : BaseCommand {
    public static byte ID_MESSAGEDISPATCH;
    private Exception rollbackCause;
    private long deliverySequenceId;
    private object consumer;
    private ConsumerId consumerId;
    private ActiveMQDestination destination;
    private Message message;
    private int redeliveryCounter;
    public Exception RollbackCause { get; public set; }
    public long DeliverySequenceId { get; public set; }
    public object Consumer { get; public set; }
    public ConsumerId ConsumerId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public Message Message { get; public set; }
    public int RedeliveryCounter { get; public set; }
    public bool IsMessageDispatch { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public Exception get_RollbackCause();
    public void set_RollbackCause(Exception value);
    public long get_DeliverySequenceId();
    public void set_DeliverySequenceId(long value);
    public object get_Consumer();
    public void set_Consumer(object value);
    public ConsumerId get_ConsumerId();
    public void set_ConsumerId(ConsumerId value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public Message get_Message();
    public void set_Message(Message value);
    public int get_RedeliveryCounter();
    public void set_RedeliveryCounter(int value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(MessageDispatch that);
    public virtual bool get_IsMessageDispatch();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.MessageDispatchNotification : BaseCommand {
    public static byte ID_MESSAGEDISPATCHNOTIFICATION;
    private ConsumerId consumerId;
    private ActiveMQDestination destination;
    private long deliverySequenceId;
    private MessageId messageId;
    public ConsumerId ConsumerId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public long DeliverySequenceId { get; public set; }
    public MessageId MessageId { get; public set; }
    public bool IsMessageDispatchNotification { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConsumerId get_ConsumerId();
    public void set_ConsumerId(ConsumerId value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public long get_DeliverySequenceId();
    public void set_DeliverySequenceId(long value);
    public MessageId get_MessageId();
    public void set_MessageId(MessageId value);
    public virtual bool get_IsMessageDispatchNotification();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.MessageId : BaseDataStructure {
    public static byte ID_MESSAGEID;
    private string textView;
    private ProducerId producerId;
    private long producerSequenceId;
    private long brokerSequenceId;
    private string key;
    public string TextView { get; public set; }
    public ProducerId ProducerId { get; public set; }
    public long ProducerSequenceId { get; public set; }
    public long BrokerSequenceId { get; public set; }
    public MessageId(ProducerId producerId, long producerSequenceId);
    public MessageId(string value);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public void SetValue(string messageKey);
    public string get_TextView();
    public void set_TextView(string value);
    public ProducerId get_ProducerId();
    public void set_ProducerId(ProducerId value);
    public long get_ProducerSequenceId();
    public void set_ProducerSequenceId(long value);
    public long get_BrokerSequenceId();
    public void set_BrokerSequenceId(long value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(MessageId that);
}
public class Apache.NMS.ActiveMQ.Commands.MessagePull : BaseCommand {
    public static byte ID_MESSAGEPULL;
    private ConsumerId consumerId;
    private ActiveMQDestination destination;
    private long timeout;
    private string correlationId;
    private MessageId messageId;
    public ConsumerId ConsumerId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public long Timeout { get; public set; }
    public string CorrelationId { get; public set; }
    public MessageId MessageId { get; public set; }
    public bool IsMessagePull { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConsumerId get_ConsumerId();
    public void set_ConsumerId(ConsumerId value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public long get_Timeout();
    public void set_Timeout(long value);
    public string get_CorrelationId();
    public void set_CorrelationId(string value);
    public MessageId get_MessageId();
    public void set_MessageId(MessageId value);
    public virtual bool get_IsMessagePull();
    public virtual Response Visit(ICommandVisitor visitor);
}
public interface Apache.NMS.ActiveMQ.Commands.MessageReference {
}
public class Apache.NMS.ActiveMQ.Commands.NetworkBridgeFilter : BaseDataStructure {
    public static byte ID_NETWORKBRIDGEFILTER;
    private BrokerId networkBrokerId;
    private int messageTTL;
    private int consumerTTL;
    public BrokerId NetworkBrokerId { get; public set; }
    public int MessageTTL { get; public set; }
    public int ConsumerTTL { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public BrokerId get_NetworkBrokerId();
    public void set_NetworkBrokerId(BrokerId value);
    public int get_MessageTTL();
    public void set_MessageTTL(int value);
    public int get_ConsumerTTL();
    public void set_ConsumerTTL(int value);
}
public class Apache.NMS.ActiveMQ.Commands.PartialCommand : BaseDataStructure {
    public static byte ID_PARTIALCOMMAND;
    private int commandId;
    private Byte[] data;
    public int CommandId { get; public set; }
    public Byte[] Data { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public int get_CommandId();
    public void set_CommandId(int value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
}
public class Apache.NMS.ActiveMQ.Commands.ProducerAck : BaseCommand {
    public static byte ID_PRODUCERACK;
    private ProducerId producerId;
    private int size;
    public ProducerId ProducerId { get; public set; }
    public int Size { get; public set; }
    public bool IsProducerAck { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ProducerId get_ProducerId();
    public void set_ProducerId(ProducerId value);
    public int get_Size();
    public void set_Size(int value);
    public virtual bool get_IsProducerAck();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ProducerId : BaseDataStructure {
    public static byte ID_PRODUCERID;
    private SessionId parentId;
    private string connectionId;
    private long value;
    private long sessionId;
    public SessionId ParentId { get; }
    public string ConnectionId { get; public set; }
    public long Value { get; public set; }
    public long SessionId { get; public set; }
    public ProducerId(SessionId sessionId, long consumerId);
    public ProducerId(string producerKey);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public SessionId get_ParentId();
    public string get_ConnectionId();
    public void set_ConnectionId(string value);
    public long get_Value();
    public void set_Value(long value);
    public long get_SessionId();
    public void set_SessionId(long value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(ProducerId that);
}
public class Apache.NMS.ActiveMQ.Commands.ProducerInfo : BaseCommand {
    public static byte ID_PRODUCERINFO;
    private ProducerId producerId;
    private ActiveMQDestination destination;
    private BrokerId[] brokerPath;
    private bool dispatchAsync;
    private int windowSize;
    public ProducerId ProducerId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public BrokerId[] BrokerPath { get; public set; }
    public bool DispatchAsync { get; public set; }
    public int WindowSize { get; public set; }
    public bool IsProducerInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ProducerId get_ProducerId();
    public void set_ProducerId(ProducerId value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public BrokerId[] get_BrokerPath();
    public void set_BrokerPath(BrokerId[] value);
    public bool get_DispatchAsync();
    public void set_DispatchAsync(bool value);
    public int get_WindowSize();
    public void set_WindowSize(int value);
    public virtual bool get_IsProducerInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.RemoveInfo : BaseCommand {
    public static byte ID_REMOVEINFO;
    private DataStructure objectId;
    private long lastDeliveredSequenceId;
    public DataStructure ObjectId { get; public set; }
    public long LastDeliveredSequenceId { get; public set; }
    public bool IsRemoveInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public DataStructure get_ObjectId();
    public void set_ObjectId(DataStructure value);
    public long get_LastDeliveredSequenceId();
    public void set_LastDeliveredSequenceId(long value);
    public virtual bool get_IsRemoveInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.RemoveSubscriptionInfo : BaseCommand {
    public static byte ID_REMOVESUBSCRIPTIONINFO;
    private ConnectionId connectionId;
    private string subcriptionName;
    private string clientId;
    public ConnectionId ConnectionId { get; public set; }
    public string SubcriptionName { get; public set; }
    public string ClientId { get; public set; }
    public bool IsRemoveSubscriptionInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConnectionId get_ConnectionId();
    public void set_ConnectionId(ConnectionId value);
    public string get_SubcriptionName();
    public void set_SubcriptionName(string value);
    public string get_ClientId();
    public void set_ClientId(string value);
    public virtual bool get_IsRemoveSubscriptionInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ReplayCommand : BaseCommand {
    public static byte ID_REPLAYCOMMAND;
    private int firstNakNumber;
    private int lastNakNumber;
    public int FirstNakNumber { get; public set; }
    public int LastNakNumber { get; public set; }
    public bool IsReplayCommand { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public int get_FirstNakNumber();
    public void set_FirstNakNumber(int value);
    public int get_LastNakNumber();
    public void set_LastNakNumber(int value);
    public virtual bool get_IsReplayCommand();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.Response : BaseCommand {
    public static byte ID_RESPONSE;
    private int correlationId;
    public int CorrelationId { get; public set; }
    public bool IsResponse { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public int get_CorrelationId();
    public void set_CorrelationId(int value);
    public virtual bool get_IsResponse();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.SessionId : BaseDataStructure {
    public static byte ID_SESSIONID;
    private ConnectionId parentId;
    private string connectionId;
    private long value;
    public ConnectionId ParentId { get; }
    public string ConnectionId { get; public set; }
    public long Value { get; public set; }
    public SessionId(ConnectionId connectionId, long sessionId);
    public SessionId(ProducerId producerId);
    public SessionId(ConsumerId consumerId);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConnectionId get_ParentId();
    public string get_ConnectionId();
    public void set_ConnectionId(string value);
    public long get_Value();
    public void set_Value(long value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(SessionId that);
}
public class Apache.NMS.ActiveMQ.Commands.SessionInfo : BaseCommand {
    public static byte ID_SESSIONINFO;
    private SessionId sessionId;
    public SessionId SessionId { get; public set; }
    public bool IsSessionInfo { get; }
    public SessionInfo(ConnectionInfo connectionInfo, long sessionId);
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public SessionId get_SessionId();
    public void set_SessionId(SessionId value);
    public virtual bool get_IsSessionInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.ShutdownInfo : BaseCommand {
    public static byte ID_SHUTDOWNINFO;
    public bool IsShutdownInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public virtual bool get_IsShutdownInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.StackTraceElement : ValueType {
    public string ClassName;
    public string FileName;
    public string MethodName;
    public int LineNumber;
}
public class Apache.NMS.ActiveMQ.Commands.SubscriptionInfo : BaseDataStructure {
    public static byte ID_SUBSCRIPTIONINFO;
    private string clientId;
    private ActiveMQDestination destination;
    private string selector;
    private string subcriptionName;
    private ActiveMQDestination subscribedDestination;
    public string ClientId { get; public set; }
    public ActiveMQDestination Destination { get; public set; }
    public string Selector { get; public set; }
    public string SubcriptionName { get; public set; }
    public ActiveMQDestination SubscribedDestination { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public string get_ClientId();
    public void set_ClientId(string value);
    public ActiveMQDestination get_Destination();
    public void set_Destination(ActiveMQDestination value);
    public string get_Selector();
    public void set_Selector(string value);
    public string get_SubcriptionName();
    public void set_SubcriptionName(string value);
    public ActiveMQDestination get_SubscribedDestination();
    public void set_SubscribedDestination(ActiveMQDestination value);
}
public class Apache.NMS.ActiveMQ.Commands.TransactionId : BaseDataStructure {
    public static byte ID_TRANSACTIONID;
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(TransactionId that);
}
public class Apache.NMS.ActiveMQ.Commands.TransactionInfo : BaseCommand {
    public static byte ID_TRANSACTIONINFO;
    public static byte BEGIN;
    public static byte PREPARE;
    public static byte COMMIT_ONE_PHASE;
    public static byte COMMIT_TWO_PHASE;
    public static byte ROLLBACK;
    public static byte RECOVER;
    public static byte FORGET;
    public static byte END;
    private ConnectionId connectionId;
    private TransactionId transactionId;
    private byte type;
    public ConnectionId ConnectionId { get; public set; }
    public TransactionId TransactionId { get; public set; }
    public byte Type { get; public set; }
    public bool IsTransactionInfo { get; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public ConnectionId get_ConnectionId();
    public void set_ConnectionId(ConnectionId value);
    public TransactionId get_TransactionId();
    public void set_TransactionId(TransactionId value);
    public byte get_Type();
    public void set_Type(byte value);
    public virtual bool get_IsTransactionInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
internal class Apache.NMS.ActiveMQ.Commands.TrustedClassFilter : SerializationBinder {
    private INmsDeserializationPolicy deserializationPolicy;
    private IDestination destination;
    public TrustedClassFilter(INmsDeserializationPolicy deserializationPolicy, IDestination destination);
    public virtual Type BindToType(string assemblyName, string typeName);
}
public class Apache.NMS.ActiveMQ.Commands.WireFormatInfo : BaseCommand {
    public static byte ID_WIREFORMATINFO;
    private static Byte[] MAGIC;
    private Byte[] magic;
    private int version;
    private Byte[] marshalledProperties;
    private PrimitiveMap properties;
    public Byte[] Magic { get; public set; }
    public bool Valid { get; }
    public int Version { get; public set; }
    public Byte[] MarshalledProperties { get; public set; }
    public IPrimitiveMap Properties { get; }
    public bool CacheEnabled { get; public set; }
    public bool StackTraceEnabled { get; public set; }
    public bool TcpNoDelayEnabled { get; public set; }
    public bool SizePrefixDisabled { get; public set; }
    public bool TightEncodingEnabled { get; public set; }
    public long MaxInactivityDuration { get; public set; }
    public long MaxInactivityDurationInitialDelay { get; public set; }
    public int CacheSize { get; public set; }
    public bool IsWireFormatInfo { get; }
    private static WireFormatInfo();
    public virtual string ToString();
    public virtual byte GetDataStructureType();
    public Byte[] get_Magic();
    public void set_Magic(Byte[] value);
    public bool get_Valid();
    public int get_Version();
    public void set_Version(int value);
    public Byte[] get_MarshalledProperties();
    public void set_MarshalledProperties(Byte[] value);
    public IPrimitiveMap get_Properties();
    public bool get_CacheEnabled();
    public void set_CacheEnabled(bool value);
    public bool get_StackTraceEnabled();
    public void set_StackTraceEnabled(bool value);
    public bool get_TcpNoDelayEnabled();
    public void set_TcpNoDelayEnabled(bool value);
    public bool get_SizePrefixDisabled();
    public void set_SizePrefixDisabled(bool value);
    public bool get_TightEncodingEnabled();
    public void set_TightEncodingEnabled(bool value);
    public long get_MaxInactivityDuration();
    public void set_MaxInactivityDuration(long value);
    public long get_MaxInactivityDurationInitialDelay();
    public void set_MaxInactivityDurationInitialDelay(long value);
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public virtual bool IsMarshallAware();
    public virtual void BeforeMarshall(OpenWireFormat wireFormat);
    public virtual bool get_IsWireFormatInfo();
    public virtual Response Visit(ICommandVisitor visitor);
}
public class Apache.NMS.ActiveMQ.Commands.XATransactionId : TransactionId {
    public static byte ID_XATRANSACTIONID;
    private int formatId;
    private Byte[] globalTransactionId;
    private Byte[] branchQualifier;
    public int FormatId { get; public set; }
    public Byte[] GlobalTransactionId { get; public set; }
    public Byte[] BranchQualifier { get; public set; }
    public virtual byte GetDataStructureType();
    public virtual string ToString();
    public int get_FormatId();
    public void set_FormatId(int value);
    public Byte[] get_GlobalTransactionId();
    public void set_GlobalTransactionId(Byte[] value);
    public Byte[] get_BranchQualifier();
    public void set_BranchQualifier(Byte[] value);
    public virtual int GetHashCode();
    public virtual bool Equals(object that);
    public virtual bool Equals(XATransactionId that);
}
public interface Apache.NMS.ActiveMQ.Commands.Xid {
}
public class Apache.NMS.ActiveMQ.CompressionPolicy : object {
    public sealed virtual Stream CreateCompressionStream(Stream data);
    public sealed virtual Stream CreateDecompressionStream(Stream data);
    public sealed virtual object Clone();
}
public class Apache.NMS.ActiveMQ.Connection : object {
    private static IdGenerator CONNECTION_ID_GENERATOR;
    private static TimeSpan InfiniteTimeSpan;
    private AcknowledgementMode acknowledgementMode;
    private bool asyncSend;
    private bool alwaysSyncSend;
    private bool asyncClose;
    private bool useCompression;
    private bool copyMessageOnSend;
    private bool sendAcksAsync;
    private bool dispatchAsync;
    private int producerWindowSize;
    private bool messagePrioritySupported;
    private bool watchTopicAdviosires;
    private bool optimizeAcknowledge;
    private long optimizeAcknowledgeTimeOut;
    private long optimizedAckScheduledAckInterval;
    private bool useRetroactiveConsumer;
    private bool exclusiveConsumer;
    private long consumerFailoverRedeliveryWaitPeriod;
    private bool checkForDuplicates;
    private bool transactedIndividualAck;
    private bool nonBlockingRedelivery;
    private bool userSpecifiedClientID;
    private Uri brokerUri;
    private ITransport transport;
    private ConnectionInfo info;
    private TimeSpan requestTimeout;
    private BrokerInfo brokerInfo;
    private CountDownLatch brokerInfoReceived;
    private WireFormatInfo brokerWireFormatInfo;
    private IList sessions;
    private IDictionary producers;
    private NmsSynchronizationMonitor dispatchersLock;
    private IDictionary dispatchers;
    private IDictionary tempDests;
    private NmsSynchronizationMonitor connectedLock;
    private Atomic`1<bool> connected;
    private Atomic`1<bool> closed;
    private Atomic`1<bool> closing;
    private Atomic`1<bool> transportFailed;
    private Exception firstFailureError;
    private int sessionCounter;
    private int temporaryDestinationCounter;
    private int localTransactionCounter;
    private Atomic`1<bool> started;
    private ConnectionMetaData metaData;
    private bool disposed;
    private IRedeliveryPolicy redeliveryPolicy;
    private PrefetchPolicy prefetchPolicy;
    private ICompressionPolicy compressionPolicy;
    private IdGenerator clientIdGenerator;
    private int consumerIdCounter;
    private long transportInterruptionProcessingComplete;
    private MessageTransformation messageTransformation;
    private ThreadPoolExecutor executor;
    private AdvisoryConsumer advisoryConsumer;
    private Scheduler scheduler;
    private ConnectionAudit connectionAudit;
    [CompilerGeneratedAttribute]
private ExceptionListener ExceptionListener;
    [CompilerGeneratedAttribute]
private ConnectionInterruptedListener ConnectionInterruptedListener;
    [CompilerGeneratedAttribute]
private ConnectionResumedListener ConnectionResumedListener;
    private ConsumerTransformerDelegate consumerTransformer;
    private ProducerTransformerDelegate producerTransformer;
    [CompilerGeneratedAttribute]
private INmsDeserializationPolicy <DeserializationPolicy>k__BackingField;
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public int ProtocolVersion { get; }
    public bool AsyncSend { get; public set; }
    public bool AsyncClose { get; public set; }
    public bool SendAcksAsync { get; public set; }
    unknown string AckMode {public set; }
    public int ProducerWindowSize { get; public set; }
    public bool AlwaysSyncSend { get; public set; }
    public bool CopyMessageOnSend { get; public set; }
    public bool UseCompression { get; public set; }
    public bool MessagePrioritySupported { get; public set; }
    public bool OptimizeAcknowledge { get; public set; }
    public long OptimizeAcknowledgeTimeOut { get; public set; }
    public long OptimizedAckScheduledAckInterval { get; public set; }
    public bool UseRetroactiveConsumer { get; public set; }
    public bool ExclusiveConsumer { get; public set; }
    public long ConsumerFailoverRedeliveryWaitPeriod { get; public set; }
    public bool CheckForDuplicates { get; public set; }
    public bool TransactedIndividualAck { get; public set; }
    public bool NonBlockingRedelivery { get; public set; }
    public int AuditDepth { get; public set; }
    public int AuditMaximumProducerNumber { get; public set; }
    public IConnectionMetaData MetaData { get; }
    public Uri BrokerUri { get; }
    public ITransport ITransport { get; public set; }
    public bool TransportFailed { get; }
    public Exception FirstFailureError { get; }
    public TimeSpan RequestTimeout { get; public set; }
    public AcknowledgementMode AcknowledgementMode { get; public set; }
    public bool DispatchAsync { get; public set; }
    public bool WatchTopicAdvisories { get; public set; }
    public string ClientId { get; public set; }
    unknown string DefaultClientId {public set; }
    public ConnectionId ConnectionId { get; }
    public BrokerInfo BrokerInfo { get; }
    public WireFormatInfo BrokerWireFormat { get; }
    public string ResourceManagerId { get; }
    public IRedeliveryPolicy RedeliveryPolicy { get; public set; }
    public PrefetchPolicy PrefetchPolicy { get; public set; }
    public ICompressionPolicy CompressionPolicy { get; public set; }
    public INmsDeserializationPolicy DeserializationPolicy { get; public set; }
    internal MessageTransformation MessageTransformation { get; }
    internal Scheduler Scheduler { get; }
    internal List`1<Session> Sessions { get; }
    public bool IsStarted { get; }
    protected SessionId NextSessionId { get; }
    public Connection(Uri connectionUri, ITransport transport, IdGenerator clientIdGenerator);
    private static Connection();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExceptionListener(ExceptionListener value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExceptionListener(ExceptionListener value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectionResumedListener(ConnectionResumedListener value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectionResumedListener(ConnectionResumedListener value);
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public int get_ProtocolVersion();
    public bool get_AsyncSend();
    public void set_AsyncSend(bool value);
    public bool get_AsyncClose();
    public void set_AsyncClose(bool value);
    public bool get_SendAcksAsync();
    public void set_SendAcksAsync(bool value);
    public void set_AckMode(string value);
    public int get_ProducerWindowSize();
    public void set_ProducerWindowSize(int value);
    public bool get_AlwaysSyncSend();
    public void set_AlwaysSyncSend(bool value);
    public bool get_CopyMessageOnSend();
    public void set_CopyMessageOnSend(bool value);
    public bool get_UseCompression();
    public void set_UseCompression(bool value);
    public bool get_MessagePrioritySupported();
    public void set_MessagePrioritySupported(bool value);
    public bool get_OptimizeAcknowledge();
    public void set_OptimizeAcknowledge(bool value);
    public long get_OptimizeAcknowledgeTimeOut();
    public void set_OptimizeAcknowledgeTimeOut(long value);
    public long get_OptimizedAckScheduledAckInterval();
    public void set_OptimizedAckScheduledAckInterval(long value);
    public bool get_UseRetroactiveConsumer();
    public void set_UseRetroactiveConsumer(bool value);
    public bool get_ExclusiveConsumer();
    public void set_ExclusiveConsumer(bool value);
    public long get_ConsumerFailoverRedeliveryWaitPeriod();
    public void set_ConsumerFailoverRedeliveryWaitPeriod(long value);
    public bool get_CheckForDuplicates();
    public void set_CheckForDuplicates(bool value);
    public bool get_TransactedIndividualAck();
    public void set_TransactedIndividualAck(bool value);
    public bool get_NonBlockingRedelivery();
    public void set_NonBlockingRedelivery(bool value);
    public int get_AuditDepth();
    public void set_AuditDepth(int value);
    public int get_AuditMaximumProducerNumber();
    public void set_AuditMaximumProducerNumber(int value);
    public sealed virtual IConnectionMetaData get_MetaData();
    public Uri get_BrokerUri();
    public ITransport get_ITransport();
    public void set_ITransport(ITransport value);
    public bool get_TransportFailed();
    public Exception get_FirstFailureError();
    public sealed virtual TimeSpan get_RequestTimeout();
    public sealed virtual void set_RequestTimeout(TimeSpan value);
    public sealed virtual AcknowledgementMode get_AcknowledgementMode();
    public sealed virtual void set_AcknowledgementMode(AcknowledgementMode value);
    public bool get_DispatchAsync();
    public void set_DispatchAsync(bool value);
    public bool get_WatchTopicAdvisories();
    public void set_WatchTopicAdvisories(bool value);
    public sealed virtual string get_ClientId();
    public sealed virtual void set_ClientId(string value);
    public void set_DefaultClientId(string value);
    public ConnectionId get_ConnectionId();
    public BrokerInfo get_BrokerInfo();
    public WireFormatInfo get_BrokerWireFormat();
    public string get_ResourceManagerId();
    public sealed virtual IRedeliveryPolicy get_RedeliveryPolicy();
    public sealed virtual void set_RedeliveryPolicy(IRedeliveryPolicy value);
    public PrefetchPolicy get_PrefetchPolicy();
    public void set_PrefetchPolicy(PrefetchPolicy value);
    public ICompressionPolicy get_CompressionPolicy();
    public void set_CompressionPolicy(ICompressionPolicy value);
    [CompilerGeneratedAttribute]
public INmsDeserializationPolicy get_DeserializationPolicy();
    [CompilerGeneratedAttribute]
public void set_DeserializationPolicy(INmsDeserializationPolicy value);
    internal MessageTransformation get_MessageTransformation();
    internal Scheduler get_Scheduler();
    internal List`1<Session> get_Sessions();
    private void SetTransport(ITransport newTransport);
    public sealed virtual void Start();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<StartAsync>d__201")]
public sealed virtual Task StartAsync();
    public sealed virtual bool get_IsStarted();
    public sealed virtual void Stop();
    public sealed virtual Task StopAsync();
    public sealed virtual ISession CreateSession();
    public sealed virtual ISession CreateSession(AcknowledgementMode sessionAcknowledgementMode);
    public sealed virtual Task`1<ISession> CreateSessionAsync();
    public sealed virtual Task`1<ISession> CreateSessionAsync(AcknowledgementMode acknowledgementMode);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<CreateActiveMQSessionAsync>d__210")]
protected virtual Task`1<ISession> CreateActiveMQSessionAsync(AcknowledgementMode ackMode);
    internal void AddSession(Session session);
    internal void RemoveSession(Session session);
    internal void AddDispatcher(ConsumerId id, IDispatcher dispatcher);
    internal void RemoveDispatcher(ConsumerId id);
    internal void AddProducer(ProducerId id, MessageProducer producer);
    internal void RemoveProducer(ProducerId id);
    internal void RemoveDispatcher(IDispatcher dispatcher);
    internal bool IsDuplicate(IDispatcher dispatcher, Message message);
    internal void RollbackDuplicate(IDispatcher dispatcher, Message message);
    public sealed virtual void Close();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<CloseAsync>d__221")]
public sealed virtual Task CloseAsync();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public sealed virtual void PurgeTempDestinations();
    public Task`1<Response> SyncRequestAsync(Command command);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<SyncRequestAsync>d__226")]
public Task`1<Response> SyncRequestAsync(Command command, TimeSpan requestTimeout);
    public void Oneway(Command command);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<DisposeOfAsync>d__228")]
private Task DisposeOfAsync(DataStructure objectId, long lastDeliveredSequenceId);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<CheckConnectedAsync>d__229")]
internal Task CheckConnectedAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<OnCommandAsync>d__230")]
protected Task OnCommandAsync(ITransport commandTransport, Command command);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<DispatchMessageAsync>d__231")]
protected Task DispatchMessageAsync(MessageDispatch dispatch);
    protected void OnKeepAliveCommand(ITransport commandTransport, KeepAliveInfo info);
    internal void OnAsyncException(Exception error);
    private void AsyncCallExceptionListener(object error);
    internal void OnTransportException(ITransport source, Exception cause);
    internal void OnException(Exception error);
    private void AsyncOnExceptionHandler(object error);
    private void MarkTransportFailed(Exception error);
    protected void OnTransportInterrupted(ITransport sender);
    protected void OnTransportResumed(ITransport sender);
    internal void OnSessionException(Session sender, Exception exception);
    public LocalTransactionId CreateLocalTransactionId();
    protected SessionId get_NextSessionId();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Connection/<CreateTemporaryDestinationAsync>d__245")]
public Task`1<ActiveMQTempDestination> CreateTemporaryDestinationAsync(bool topic);
    public void DeleteTemporaryDestination(IDestination destination);
    public void DeleteDestination(IDestination destination);
    private void WaitForTransportInterruptionProcessingToComplete();
    internal void TransportInterruptionProcessingComplete();
    private void SignalInterruptionProcessingComplete();
    private void SignalInterruptionProcessingNeeded();
    internal ActiveMQTempDestination AddTempDestination(ActiveMQTempDestination dest);
    internal void RemoveTempDestination(ActiveMQTempDestination dest);
    internal bool IsTempDestinationActive(ActiveMQTempDestination dest);
    protected void CheckClosedOrFailed();
    protected void CheckClosed();
    private NMSException CreateExceptionFromBrokerError(BrokerError brokerError);
}
public class Apache.NMS.ActiveMQ.ConnectionClosedException : NMSException {
    public ConnectionClosedException(string message);
    public ConnectionClosedException(string message, string errorCode);
    public ConnectionClosedException(string message, Exception innerException);
    public ConnectionClosedException(string message, string errorCode, Exception innerException);
    protected ConnectionClosedException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.ActiveMQ.ConnectionFactory : object {
    public static string DEFAULT_BROKER_URL;
    public static string ENV_BROKER_URL;
    [CompilerGeneratedAttribute]
private static ExceptionListener onException;
    private Uri brokerUri;
    private string connectionUserName;
    private string connectionPassword;
    private string clientId;
    private string clientIdPrefix;
    private IdGenerator clientIdGenerator;
    private bool useCompression;
    private bool copyMessageOnSend;
    private bool dispatchAsync;
    private bool asyncSend;
    private bool asyncClose;
    private bool alwaysSyncSend;
    private bool sendAcksAsync;
    private int producerWindowSize;
    private AcknowledgementMode acknowledgementMode;
    private TimeSpan requestTimeout;
    private bool messagePrioritySupported;
    private bool watchTopicAdvisories;
    private bool optimizeAcknowledge;
    private long optimizeAcknowledgeTimeOut;
    private long optimizedAckScheduledAckInterval;
    private bool useRetroactiveConsumer;
    private bool exclusiveConsumer;
    private long consumerFailoverRedeliveryWaitPeriod;
    private bool checkForDuplicates;
    private bool transactedIndividualAck;
    private bool nonBlockingRedelivery;
    private int auditDepth;
    private int auditMaximumProducerNumber;
    private IRedeliveryPolicy redeliveryPolicy;
    private PrefetchPolicy prefetchPolicy;
    private ICompressionPolicy compressionPolicy;
    [CompilerGeneratedAttribute]
private INmsDeserializationPolicy <DeserializationPolicy>k__BackingField;
    private ConsumerTransformerDelegate consumerTransformer;
    private ProducerTransformerDelegate producerTransformer;
    public Uri BrokerUri { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string ClientId { get; public set; }
    public string ClientIdPrefix { get; public set; }
    public bool UseCompression { get; public set; }
    public bool CopyMessageOnSend { get; public set; }
    public bool AlwaysSyncSend { get; public set; }
    public bool AsyncClose { get; public set; }
    public bool SendAcksAsync { get; public set; }
    public bool AsyncSend { get; public set; }
    public bool DispatchAsync { get; public set; }
    public bool WatchTopicAdvisories { get; public set; }
    public bool MessagePrioritySupported { get; public set; }
    public int RequestTimeout { get; public set; }
    unknown string AckMode {public set; }
    public AcknowledgementMode AcknowledgementMode { get; public set; }
    public int ProducerWindowSize { get; public set; }
    public PrefetchPolicy PrefetchPolicy { get; public set; }
    public IRedeliveryPolicy RedeliveryPolicy { get; public set; }
    public ICompressionPolicy CompressionPolicy { get; public set; }
    public INmsDeserializationPolicy DeserializationPolicy { get; public set; }
    public IdGenerator ClientIdGenerator { get; public set; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public bool OptimizeAcknowledge { get; public set; }
    public long OptimizeAcknowledgeTimeOut { get; public set; }
    public long OptimizedAckScheduledAckInterval { get; public set; }
    public bool UseRetroactiveConsumer { get; public set; }
    public bool ExclusiveConsumer { get; public set; }
    public long ConsumerFailoverRedeliveryWaitPeriod { get; public set; }
    public bool CheckForDuplicates { get; public set; }
    public bool TransactedIndividualAck { get; public set; }
    public bool NonBlockingRedelivery { get; public set; }
    public int AuditDepth { get; public set; }
    public int AuditMaximumProducerNumber { get; public set; }
    private static ConnectionFactory();
    public ConnectionFactory(string brokerUri);
    public ConnectionFactory(string brokerUri, string clientID);
    public ConnectionFactory(Uri brokerUri);
    public ConnectionFactory(Uri brokerUri, string clientID);
    [CompilerGeneratedAttribute]
private static void add_onException(ExceptionListener value);
    [CompilerGeneratedAttribute]
private static void remove_onException(ExceptionListener value);
    public static string GetDefaultBrokerUrl();
    public sealed virtual IConnection CreateConnection();
    public sealed virtual IConnection CreateConnection(string userName, string password);
    public sealed virtual Task`1<IConnection> CreateConnectionAsync();
    public sealed virtual Task`1<IConnection> CreateConnectionAsync(string userName, string password);
    public sealed virtual INMSContext CreateContext();
    public sealed virtual INMSContext CreateContext(AcknowledgementMode ackMode);
    public sealed virtual INMSContext CreateContext(string userName, string password);
    public sealed virtual INMSContext CreateContext(string userName, string password, AcknowledgementMode ackMode);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.ConnectionFactory/<CreateContextAsync>d__52")]
public sealed virtual Task`1<INMSContext> CreateContextAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.ConnectionFactory/<CreateContextAsync>d__53")]
public sealed virtual Task`1<INMSContext> CreateContextAsync(AcknowledgementMode ackMode);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.ConnectionFactory/<CreateContextAsync>d__54")]
public sealed virtual Task`1<INMSContext> CreateContextAsync(string userName, string password);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.ConnectionFactory/<CreateContextAsync>d__55")]
public sealed virtual Task`1<INMSContext> CreateContextAsync(string userName, string password, AcknowledgementMode ackMode);
    protected virtual Connection CreateActiveMQConnection();
    protected virtual Connection CreateActiveMQConnection(string userName, string password);
    protected virtual Connection CreateActiveMQConnection(ITransport transport);
    public sealed virtual Uri get_BrokerUri();
    public sealed virtual void set_BrokerUri(Uri value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_ClientId();
    public void set_ClientId(string value);
    public string get_ClientIdPrefix();
    public void set_ClientIdPrefix(string value);
    public bool get_UseCompression();
    public void set_UseCompression(bool value);
    public bool get_CopyMessageOnSend();
    public void set_CopyMessageOnSend(bool value);
    public bool get_AlwaysSyncSend();
    public void set_AlwaysSyncSend(bool value);
    public bool get_AsyncClose();
    public void set_AsyncClose(bool value);
    public bool get_SendAcksAsync();
    public void set_SendAcksAsync(bool value);
    public bool get_AsyncSend();
    public void set_AsyncSend(bool value);
    public bool get_DispatchAsync();
    public void set_DispatchAsync(bool value);
    public bool get_WatchTopicAdvisories();
    public void set_WatchTopicAdvisories(bool value);
    public bool get_MessagePrioritySupported();
    public void set_MessagePrioritySupported(bool value);
    public int get_RequestTimeout();
    public void set_RequestTimeout(int value);
    public void set_AckMode(string value);
    public AcknowledgementMode get_AcknowledgementMode();
    public void set_AcknowledgementMode(AcknowledgementMode value);
    public int get_ProducerWindowSize();
    public void set_ProducerWindowSize(int value);
    public PrefetchPolicy get_PrefetchPolicy();
    public void set_PrefetchPolicy(PrefetchPolicy value);
    public sealed virtual IRedeliveryPolicy get_RedeliveryPolicy();
    public sealed virtual void set_RedeliveryPolicy(IRedeliveryPolicy value);
    public ICompressionPolicy get_CompressionPolicy();
    public void set_CompressionPolicy(ICompressionPolicy value);
    [CompilerGeneratedAttribute]
public INmsDeserializationPolicy get_DeserializationPolicy();
    [CompilerGeneratedAttribute]
public void set_DeserializationPolicy(INmsDeserializationPolicy value);
    public void set_ClientIdGenerator(IdGenerator value);
    public IdGenerator get_ClientIdGenerator();
    public void add_OnException(ExceptionListener value);
    public void remove_OnException(ExceptionListener value);
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public bool get_OptimizeAcknowledge();
    public void set_OptimizeAcknowledge(bool value);
    public long get_OptimizeAcknowledgeTimeOut();
    public void set_OptimizeAcknowledgeTimeOut(long value);
    public long get_OptimizedAckScheduledAckInterval();
    public void set_OptimizedAckScheduledAckInterval(long value);
    public bool get_UseRetroactiveConsumer();
    public void set_UseRetroactiveConsumer(bool value);
    public bool get_ExclusiveConsumer();
    public void set_ExclusiveConsumer(bool value);
    public long get_ConsumerFailoverRedeliveryWaitPeriod();
    public void set_ConsumerFailoverRedeliveryWaitPeriod(long value);
    public bool get_CheckForDuplicates();
    public void set_CheckForDuplicates(bool value);
    public bool get_TransactedIndividualAck();
    public void set_TransactedIndividualAck(bool value);
    public bool get_NonBlockingRedelivery();
    public void set_NonBlockingRedelivery(bool value);
    public int get_AuditDepth();
    public void set_AuditDepth(int value);
    public int get_AuditMaximumProducerNumber();
    public void set_AuditMaximumProducerNumber(int value);
    protected virtual void ConfigureConnection(Connection connection);
    protected static void ExceptionHandler(Exception ex);
}
public class Apache.NMS.ActiveMQ.ConnectionFailedException : NMSException {
    public ConnectionFailedException(string message);
    public ConnectionFailedException(string message, string errorCode);
    public ConnectionFailedException(string message, Exception innerException);
    public ConnectionFailedException(string message, string errorCode, Exception innerException);
    protected ConnectionFailedException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.ActiveMQ.ConnectionMetaData : object {
    private int nmsMajorVersion;
    private int nmsMinorVersion;
    private string nmsProviderName;
    private string nmsVersion;
    private int providerMajorVersion;
    private int providerMinorVersion;
    private string providerVersion;
    private String[] nmsxProperties;
    public int NMSMajorVersion { get; }
    public int NMSMinorVersion { get; }
    public string NMSProviderName { get; }
    public string NMSVersion { get; }
    public String[] NMSXPropertyNames { get; }
    public int ProviderMajorVersion { get; }
    public int ProviderMinorVersion { get; }
    public string ProviderVersion { get; }
    public sealed virtual int get_NMSMajorVersion();
    public sealed virtual int get_NMSMinorVersion();
    public sealed virtual string get_NMSProviderName();
    public sealed virtual string get_NMSVersion();
    public sealed virtual String[] get_NMSXPropertyNames();
    public sealed virtual int get_ProviderMajorVersion();
    public sealed virtual int get_ProviderMinorVersion();
    public sealed virtual string get_ProviderVersion();
}
public class Apache.NMS.ActiveMQ.ConsumerClosedException : NMSException {
    public ConsumerClosedException(string message);
    public ConsumerClosedException(string message, string errorCode);
    public ConsumerClosedException(string message, Exception innerException);
    public ConsumerClosedException(string message, string errorCode, Exception innerException);
    protected ConsumerClosedException(SerializationInfo info, StreamingContext context);
}
public abstract class Apache.NMS.ActiveMQ.DestinationFilter : object {
    public static string ANY_DESCENDENT;
    public static string ANY_CHILD;
    public bool matches(ActiveMQMessage message);
    public abstract virtual bool matches(ActiveMQDestination destination);
}
public interface Apache.NMS.ActiveMQ.ICompressionPolicy {
    public abstract virtual Stream CreateCompressionStream(Stream data);
    public abstract virtual Stream CreateDecompressionStream(Stream data);
}
public interface Apache.NMS.ActiveMQ.IDispatcher {
    public abstract virtual Task Dispatch_Async(MessageDispatch messageDispatch);
}
public interface Apache.NMS.ActiveMQ.INmsDeserializationPolicy {
    public abstract virtual bool IsTrustedType(IDestination destination, Type type);
    public abstract virtual INmsDeserializationPolicy Clone();
}
public class Apache.NMS.ActiveMQ.IOException : NMSException {
    public IOException(string msg);
    public IOException(string msg, Exception inner);
}
public interface Apache.NMS.ActiveMQ.ISuspendable {
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
}
public interface Apache.NMS.ActiveMQ.ISynchronization {
    public abstract virtual Task BeforeEndAsync();
    public abstract virtual Task AfterCommitAsync();
    public abstract virtual Task AfterRollbackAsync();
}
public class Apache.NMS.ActiveMQ.MessageConsumer : object {
    private static int NO_MAXIMUM_REDELIVERIES;
    private MessageTransformation messageTransformation;
    private MessageDispatchChannel unconsumedMessages;
    private NmsSynchronizationMonitor deliveredMessagesLock;
    private LinkedList`1<MessageDispatch> deliveredMessages;
    private ConsumerInfo info;
    private Session session;
    private MessageAck pendingAck;
    private Atomic`1<bool> started;
    private Atomic`1<bool> deliveringAcks;
    private int redeliveryTimeout;
    protected bool disposed;
    private long lastDeliveredSequenceId;
    private int ackCounter;
    private int deliveredCounter;
    private int additionalWindowSize;
    private long redeliveryDelay;
    private int dispatchedCount;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) synchronizationRegistered;
    private bool clearDeliveredList;
    private bool inProgressClearRequiredFlag;
    private bool optimizeAcknowledge;
    private DateTime optimizeAckTimestamp;
    private long optimizeAcknowledgeTimeOut;
    private long optimizedAckScheduledAckInterval;
    private WaitCallback optimizedAckTask;
    private long failoverRedeliveryWaitPeriod;
    private bool transactedIndividualAck;
    private bool nonBlockingRedelivery;
    private Exception failureError;
    private ThreadPoolExecutor executor;
    [CompilerGeneratedAttribute]
private MessageListener listener;
    private IRedeliveryPolicy redeliveryPolicy;
    private PreviouslyDeliveredMap previouslyDeliveredMessages;
    private bool ignoreExpiration;
    private ConsumerTransformerDelegate consumerTransformer;
    public long LastDeliveredSequenceId { get; }
    public ConsumerId ConsumerId { get; }
    public ConsumerInfo ConsumerInfo { get; }
    public int RedeliveryTimeout { get; public set; }
    public int PrefetchSize { get; }
    public IRedeliveryPolicy RedeliveryPolicy { get; public set; }
    public long UnconsumedMessageCount { get; }
    public bool IgnoreExpiration { get; public set; }
    public Exception FailureError { get; public set; }
    public bool OptimizeAcknowledge { get; public set; }
    public long OptimizeAcknowledgeTimeOut { get; public set; }
    public long OptimizedAckScheduledAckInterval { get; public set; }
    public long FailoverRedeliveryWaitPeriod { get; public set; }
    public bool TransactedIndividualAck { get; public set; }
    public bool NonBlockingRedelivery { get; public set; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public string MessageSelector { get; }
    protected bool IsAutoAcknowledgeEach { get; }
    protected bool IsAutoAcknowledgeBatch { get; }
    protected bool IsIndividualAcknowledge { get; }
    protected bool IsClientAcknowledge { get; }
    internal bool Closed { get; }
    internal MessageConsumer(Session session, ConsumerId id, ActiveMQDestination destination, string name, string selector, int prefetch, int maxPendingMessageCount, bool noLocal, bool browser, bool dispatchAsync);
    [CompilerGeneratedAttribute]
private void add_listener(MessageListener value);
    [CompilerGeneratedAttribute]
private void remove_listener(MessageListener value);
    protected virtual override void Finalize();
    public long get_LastDeliveredSequenceId();
    public ConsumerId get_ConsumerId();
    public ConsumerInfo get_ConsumerInfo();
    public int get_RedeliveryTimeout();
    public void set_RedeliveryTimeout(int value);
    public int get_PrefetchSize();
    public IRedeliveryPolicy get_RedeliveryPolicy();
    public void set_RedeliveryPolicy(IRedeliveryPolicy value);
    public long get_UnconsumedMessageCount();
    public bool get_IgnoreExpiration();
    public void set_IgnoreExpiration(bool value);
    public Exception get_FailureError();
    public void set_FailureError(Exception value);
    public bool get_OptimizeAcknowledge();
    public void set_OptimizeAcknowledge(bool value);
    public long get_OptimizeAcknowledgeTimeOut();
    public void set_OptimizeAcknowledgeTimeOut(long value);
    public long get_OptimizedAckScheduledAckInterval();
    public void set_OptimizedAckScheduledAckInterval(long value);
    public long get_FailoverRedeliveryWaitPeriod();
    public void set_FailoverRedeliveryWaitPeriod(long value);
    public bool get_TransactedIndividualAck();
    public void set_TransactedIndividualAck(bool value);
    public bool get_NonBlockingRedelivery();
    public void set_NonBlockingRedelivery(bool value);
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public sealed virtual string get_MessageSelector();
    public sealed virtual void add_Listener(MessageListener value);
    public sealed virtual void remove_Listener(MessageListener value);
    public sealed virtual IMessage Receive();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<ReceiveAsync>d__89")]
public sealed virtual Task`1<IMessage> ReceiveAsync();
    public sealed virtual IMessage Receive(TimeSpan timeout);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<ReceiveAsync>d__91")]
public sealed virtual Task`1<IMessage> ReceiveAsync(TimeSpan timeout);
    public sealed virtual IMessage ReceiveNoWait();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<ReceiveNoWaitAsync>d__93")]
public Task`1<IMessage> ReceiveNoWaitAsync();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public virtual void Close();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<CloseAsync>d__97")]
public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<DoCloseAsync>d__98")]
internal Task DoCloseAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<ShutdownAsync>d__99")]
internal Task ShutdownAsync();
    protected void SendPullRequest(long timeout);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<DoIndividualAcknowledgeAsync>d__101")]
protected Task DoIndividualAcknowledgeAsync(ActiveMQMessage message);
    protected void DoNothingAcknowledge(ActiveMQMessage message);
    protected void DoClientAcknowledge(ActiveMQMessage message);
    public void Start();
    public void Stop();
    public void DeliverAcks();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<AsyncDeliverAckAsync>d__107")]
private Task AsyncDeliverAckAsync(object ack);
    internal void InProgressClearRequired();
    internal void ClearMessagesInProgress();
    private void ClearDeliveredList();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<Dispatch_Async>d__111")]
public virtual Task Dispatch_Async(MessageDispatch dispatch);
    private bool RedeliveryExpectedInCurrentTransaction(MessageDispatch dispatch, bool markReceipt);
    private ConsumerId RedeliveryPendingInCompetingTransaction(MessageDispatch dispatch);
    public bool Iterate();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<DequeueAsync>d__115")]
private Task`1<MessageDispatch> DequeueAsync(TimeSpan timeout);
    private bool ConsumeExpiredMessage(MessageDispatch dispatch);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<BeforeMessageIsConsumedAsync>d__117")]
public virtual Task BeforeMessageIsConsumedAsync(MessageDispatch dispatch);
    private bool IsOptimizedAckTime();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<AfterMessageIsConsumedAsync>d__119")]
public virtual Task AfterMessageIsConsumedAsync(MessageDispatch dispatch, bool expired);
    private MessageAck MakeAckForAllDeliveredMessages(AckType type);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<AckLaterAsync>d__121")]
private Task AckLaterAsync(MessageDispatch dispatch, AckType type);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<ImmediateIndividualTransactedAckAsync>d__122")]
private Task ImmediateIndividualTransactedAckAsync(MessageDispatch dispatch);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<PosionAckAsync>d__123")]
private Task PosionAckAsync(MessageDispatch dispatch, string cause);
    private void RegisterSync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<AcknowledgeAsync>d__125")]
private Task AcknowledgeAsync(MessageDispatch dispatch, AckType ackType);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<AcknowledgeAsync>d__126")]
internal Task AcknowledgeAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<CommitAsync>d__127")]
internal Task CommitAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageConsumer/<RollbackAsync>d__128")]
internal Task RollbackAsync();
    private void RollbackHelper(object arg);
    private void NonBlockingRedeliveryCallback(object arg);
    private ActiveMQMessage CreateActiveMQMessage(MessageDispatch dispatch);
    private void CheckClosed();
    private void CheckMessageListener();
    internal bool HasMessageListener();
    protected bool get_IsAutoAcknowledgeEach();
    protected bool get_IsAutoAcknowledgeBatch();
    protected bool get_IsIndividualAcknowledge();
    protected bool get_IsClientAcknowledge();
    internal bool IsInUse(ActiveMQTempDestination dest);
    internal bool get_Closed();
    private void DoOptimizedAck(object state);
    private void WaitForRedeliveries();
    private void RollbackOnFailedRecoveryRedelivery();
    private void RollbackPreviouslyDeliveredAndNotRedelivered();
    private void RemoveFromDeliveredMessages(MessageId key);
    private void ClearPreviouslyDelivered();
    private bool RedeliveryExceeded(MessageDispatch dispatch);
    [CompilerGeneratedAttribute]
private void <DeliverAcks>b__106_0(object obj);
    [CompilerGeneratedAttribute]
private void <CreateActiveMQMessage>b__131_0(ActiveMQMessage message);
}
public class Apache.NMS.ActiveMQ.MessageProducer : object {
    private Session session;
    private MemoryUsage usage;
    private NmsSynchronizationMonitor closedLock;
    private bool closed;
    private ProducerInfo info;
    private int producerSequenceId;
    private MsgDeliveryMode msgDeliveryMode;
    private TimeSpan requestTimeout;
    private TimeSpan msgTimeToLive;
    private MsgPriority msgPriority;
    private bool disableMessageID;
    private bool disableMessageTimestamp;
    protected bool disposed;
    private MessageTransformation messageTransformation;
    private ProducerTransformerDelegate producerTransformer;
    public ProducerId ProducerId { get; }
    public ProducerInfo ProducerInfo { get; }
    public MsgDeliveryMode DeliveryMode { get; public set; }
    public TimeSpan TimeToLive { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public MsgPriority Priority { get; public set; }
    public bool DisableMessageID { get; public set; }
    public bool DisableMessageTimestamp { get; public set; }
    public TimeSpan DeliveryDelay { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public MessageProducer(Session session, ProducerId id, ActiveMQDestination destination, TimeSpan requestTimeout);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public sealed virtual void Close();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageProducer/<CloseAsync>d__19")]
public sealed virtual Task CloseAsync();
    internal void Shutdown();
    public sealed virtual void Send(IMessage message);
    public sealed virtual void Send(IDestination destination, IMessage message);
    public sealed virtual void Send(IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public sealed virtual void Send(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public sealed virtual Task SendAsync(IMessage message);
    public sealed virtual Task SendAsync(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public sealed virtual Task SendAsync(IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public sealed virtual Task SendAsync(IDestination destination, IMessage message);
    protected void Send(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive, bool specifiedTimeToLive);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.MessageProducer/<SendAsync>d__30")]
protected Task SendAsync(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive, bool specifiedTimeToLive);
    public ProducerId get_ProducerId();
    public ProducerInfo get_ProducerInfo();
    public sealed virtual MsgDeliveryMode get_DeliveryMode();
    public sealed virtual void set_DeliveryMode(MsgDeliveryMode value);
    public sealed virtual TimeSpan get_TimeToLive();
    public sealed virtual void set_TimeToLive(TimeSpan value);
    public sealed virtual TimeSpan get_RequestTimeout();
    public sealed virtual void set_RequestTimeout(TimeSpan value);
    public sealed virtual MsgPriority get_Priority();
    public sealed virtual void set_Priority(MsgPriority value);
    public sealed virtual bool get_DisableMessageID();
    public sealed virtual void set_DisableMessageID(bool value);
    public sealed virtual bool get_DisableMessageTimestamp();
    public sealed virtual void set_DisableMessageTimestamp(bool value);
    public sealed virtual TimeSpan get_DeliveryDelay();
    public sealed virtual void set_DeliveryDelay(TimeSpan value);
    public sealed virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public sealed virtual IMessage CreateMessage();
    public sealed virtual Task`1<IMessage> CreateMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage();
    public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage(string text);
    public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public sealed virtual IMapMessage CreateMapMessage();
    public sealed virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public sealed virtual IObjectMessage CreateObjectMessage(object body);
    public sealed virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public sealed virtual IBytesMessage CreateBytesMessage();
    public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public sealed virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public sealed virtual IStreamMessage CreateStreamMessage();
    internal void OnProducerAck(ProducerAck ack);
}
public class Apache.NMS.ActiveMQ.NetTxConnection : Connection {
    private NetTxRecoveryPolicy recoveryPolicy;
    private Guid configuredResourceManagerId;
    public NetTxRecoveryPolicy RecoveryPolicy { get; public set; }
    public Guid ConfiguredResourceManagerId { get; public set; }
    internal Guid ResourceManagerGuid { get; }
    public NetTxConnection(Uri connectionUri, ITransport transport, IdGenerator clientIdGenerator);
    public sealed virtual INetTxSession CreateNetTxSession();
    public sealed virtual Task`1<INetTxSession> CreateNetTxSessionAsync();
    public sealed virtual INetTxSession CreateNetTxSession(Transaction tx);
    public sealed virtual Task`1<INetTxSession> CreateNetTxSessionAsync(Transaction tx);
    public sealed virtual Task`1<INetTxSession> CreateNetTxSessionAsync(bool enlistsNativeMsDtcResource);
    public sealed virtual INetTxSession CreateNetTxSession(Transaction tx, bool enlistNativeMsDtcResource);
    public sealed virtual Task`1<INetTxSession> CreateNetTxSessionAsync(Transaction tx, bool enlistsNativeMsDtcResource);
    public sealed virtual INetTxSession CreateNetTxSession(bool enlistNativeMsDtcResource);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxConnection/<CreateActiveMQSessionAsync>d__11")]
protected virtual Task`1<ISession> CreateActiveMQSessionAsync(AcknowledgementMode ackMode);
    public NetTxRecoveryPolicy get_RecoveryPolicy();
    public void set_RecoveryPolicy(NetTxRecoveryPolicy value);
    public Guid get_ConfiguredResourceManagerId();
    public void set_ConfiguredResourceManagerId(Guid value);
    internal Guid get_ResourceManagerGuid();
    private static Guid GuidFromId(string id);
}
public class Apache.NMS.ActiveMQ.NetTxConnectionFactory : ConnectionFactory {
    private NetTxRecoveryPolicy recoveryPolicy;
    private Guid configuredResourceManagerId;
    public string ConfiguredResourceManagerId { get; public set; }
    public NetTxRecoveryPolicy RecoveryPolicy { get; public set; }
    public NetTxConnectionFactory(string brokerUri);
    public NetTxConnectionFactory(string brokerUri, string clientID);
    public NetTxConnectionFactory(Uri brokerUri);
    public NetTxConnectionFactory(Uri brokerUri, string clientID);
    public string get_ConfiguredResourceManagerId();
    public void set_ConfiguredResourceManagerId(string value);
    public sealed virtual INetTxConnection CreateNetTxConnection();
    public sealed virtual INetTxConnection CreateNetTxConnection(string userName, string password);
    protected virtual Connection CreateActiveMQConnection(ITransport transport);
    public NetTxRecoveryPolicy get_RecoveryPolicy();
    public void set_RecoveryPolicy(NetTxRecoveryPolicy value);
}
public class Apache.NMS.ActiveMQ.NetTxMessageConsumer : MessageConsumer {
    private NetTxSession session;
    private NetTxTransactionContext transactionContext;
    internal NetTxMessageConsumer(Session session, ConsumerId id, ActiveMQDestination destination, string name, string selector, int prefetch, int maxPendingMessageCount, bool noLocal, bool browser, bool dispatchAsync);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxMessageConsumer/<CloseAsync>d__3")]
public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxMessageConsumer/<BeforeMessageIsConsumedAsync>d__4")]
public virtual Task BeforeMessageIsConsumedAsync(MessageDispatch dispatch);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(MessageDispatch dispatch);
}
public class Apache.NMS.ActiveMQ.NetTxRecoveryPolicy : object {
    private static FactoryFinder`2<RecoveryLoggerFactoryAttribute, IRecoveryLoggerFactory> FACTORY_FINDER;
    private static IDictionary`2<string, Type> LOGGER_FACTORY_TYPES;
    private IRecoveryLogger recoveryLogger;
    public string RecoveryLoggerType { get; public set; }
    public IRecoveryLogger RecoveryLogger { get; public set; }
    private static NetTxRecoveryPolicy();
    public void RegisterRecoveryLoggerFactory(string scheme, Type factoryType);
    public string get_RecoveryLoggerType();
    public void set_RecoveryLoggerType(string value);
    public IRecoveryLogger get_RecoveryLogger();
    public void set_RecoveryLogger(IRecoveryLogger value);
    private static IRecoveryLoggerFactory NewInstance(string scheme);
    private static Type FindLoggerFactory(string scheme);
    public sealed virtual object Clone();
}
public class Apache.NMS.ActiveMQ.NetTxSession : Session {
    private NetTxTransactionContext transactionContext;
    private string currentTransactionId;
    private bool enlistMsDtcNativeResources;
    public bool EnlistsMsDtcNativeResource { get; public set; }
    public bool IsTransacted { get; }
    public bool IsAutoAcknowledge { get; }
    public NetTxSession(Connection connection, SessionId id);
    public sealed virtual void Enlist(Transaction tx);
    public sealed virtual Task EnlistAsync(Transaction tx);
    public sealed virtual bool get_EnlistsMsDtcNativeResource();
    public sealed virtual void set_EnlistsMsDtcNativeResource(bool value);
    public virtual bool get_IsTransacted();
    public virtual bool get_IsAutoAcknowledge();
    public virtual void Close();
    internal virtual MessageConsumer DoCreateMessageConsumer(ConsumerId id, ActiveMQDestination destination, string name, string selector, int prefetch, int maxPending, bool noLocal);
    protected virtual TransactionContext CreateTransactionContext();
    internal virtual void DoRollback();
    internal virtual void DoCommit();
    internal virtual void DoStartTransaction();
    private void EnrollInSpecifiedTransaction(Transaction tx);
}
public class Apache.NMS.ActiveMQ.NetTxTransactionContext : TransactionContext {
    private static int XA_OK;
    private static int XA_READONLY;
    private Enlistment currentEnlistment;
    private static NmsSynchronizationMonitor recoveredResourceManagerIdsLock;
    private static Dictionary`2<string, bool> recoveredResourceManagerIds;
    private ManualResetEvent dtcControlEvent;
    private NmsSynchronizationMonitor syncObject;
    private TxState netTxState;
    private CountDownLatch modreq(System.Runtime.CompilerServices.IsVolatile) recoveryComplete;
    public bool InLocalTransaction { get; }
    public NmsSynchronizationMonitor SyncRoot { get; }
    public bool InNetTransaction { get; }
    public TxState NetTxState { get; }
    public WaitHandle DtcWaitHandle { get; }
    internal IRecoveryLogger RecoveryLogger { get; }
    internal string ResourceManagerId { get; }
    internal Guid ResourceManagerGuid { get; }
    public NetTxTransactionContext(Session session);
    private static NetTxTransactionContext();
    public static void ResetDtcRecovery();
    public virtual bool get_InLocalTransaction();
    public virtual void Begin();
    public virtual void Commit();
    public virtual void Rollback();
    public NmsSynchronizationMonitor get_SyncRoot();
    public bool get_InNetTransaction();
    public TxState get_NetTxState();
    public WaitHandle get_DtcWaitHandle();
    public void Begin(Transaction transaction);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<PrepareAsync>d__26")]
public Task PrepareAsync(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Commit(Enlistment enlistment);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<CommitAsync>d__28")]
public Task CommitAsync(Enlistment enlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment enlistment);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<SinglePhaseCommitAsync>d__30")]
public Task SinglePhaseCommitAsync(SinglePhaseEnlistment enlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<RollbackAsync>d__32")]
public Task RollbackAsync(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<InDoubtAsync>d__34")]
public Task InDoubtAsync(Enlistment enlistment);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<InitializeDtcTxContextAsync>d__36")]
public Task InitializeDtcTxContextAsync();
    private void RecoveryCompleteAwait();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NetTxTransactionContext/<TryRecoverBrokerTXIdsAsync>d__38")]
private Task`1<XATransactionId[]> TryRecoverBrokerTXIdsAsync();
    internal IRecoveryLogger get_RecoveryLogger();
    internal string get_ResourceManagerId();
    internal Guid get_ResourceManagerGuid();
}
public class Apache.NMS.ActiveMQ.NmsConsumer : object {
    private ISession session;
    private MessageConsumer consumer;
    public string MessageSelector { get; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public NmsConsumer(ISession session, MessageConsumer consumer);
    public sealed virtual void Dispose();
    public sealed virtual IMessage Receive();
    public sealed virtual Task`1<IMessage> ReceiveAsync();
    public sealed virtual IMessage Receive(TimeSpan timeout);
    public sealed virtual Task`1<IMessage> ReceiveAsync(TimeSpan timeout);
    public sealed virtual IMessage ReceiveNoWait();
    public sealed virtual T ReceiveBody();
    public sealed virtual Task`1<T> ReceiveBodyAsync();
    public sealed virtual T ReceiveBody(TimeSpan timeout);
    public sealed virtual Task`1<T> ReceiveBodyAsync(TimeSpan timeout);
    public sealed virtual T ReceiveBodyNoWait();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsConsumer/<ReceiveBodyCore>d__14`1")]
private Task`1<T> ReceiveBodyCore(Func`1<Task`1<IMessage>> getMessageFunc);
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync();
    public sealed virtual string get_MessageSelector();
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    private sealed virtual override void Apache.NMS.INMSConsumer.add_Listener(MessageListener value);
    private sealed virtual override void Apache.NMS.INMSConsumer.remove_Listener(MessageListener value);
    [CompilerGeneratedAttribute]
private Task`1<IMessage> <ReceiveBody>b__9_0();
    [CompilerGeneratedAttribute]
private Task`1<IMessage> <ReceiveBodyAsync>b__10_0();
    [CompilerGeneratedAttribute]
private Task`1<IMessage> <ReceiveBodyNoWait>b__13_0();
}
public class Apache.NMS.ActiveMQ.NmsContext : object {
    private NmsSynchronizationMonitor syncRoot;
    private Connection connection;
    private Atomic`1<long> connectionRefCount;
    private Session session;
    private MessageProducer sharedProducer;
    private bool autoStart;
    [CompilerGeneratedAttribute]
private AcknowledgementMode <AcknowledgementMode>k__BackingField;
    public AcknowledgementMode AcknowledgementMode { get; }
    public bool IsStarted { get; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public bool Transacted { get; }
    public string ClientId { get; public set; }
    public bool AutoStart { get; public set; }
    public NmsContext(Connection connection, AcknowledgementMode acknowledgementMode);
    private NmsContext(Connection connection, AcknowledgementMode acknowledgementMode, Atomic`1<long> connectionRefCount);
    [CompilerGeneratedAttribute]
public sealed virtual AcknowledgementMode get_AcknowledgementMode();
    public sealed virtual void Dispose();
    public sealed virtual void Start();
    public sealed virtual Task StartAsync();
    public sealed virtual bool get_IsStarted();
    public sealed virtual void Stop();
    public sealed virtual Task StopAsync();
    public sealed virtual INMSContext CreateContext(AcknowledgementMode acknowledgementMode);
    public sealed virtual INMSProducer CreateProducer();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateProducerAsync>d__20")]
public sealed virtual Task`1<INMSProducer> CreateProducerAsync();
    public sealed virtual INMSConsumer CreateConsumer(IDestination destination);
    public sealed virtual INMSConsumer CreateConsumer(IDestination destination, string selector);
    public sealed virtual INMSConsumer CreateConsumer(IDestination destination, string selector, bool noLocal);
    public sealed virtual INMSConsumer CreateDurableConsumer(ITopic destination, string subscriptionName);
    public sealed virtual INMSConsumer CreateDurableConsumer(ITopic destination, string subscriptionName, string selector);
    public sealed virtual INMSConsumer CreateDurableConsumer(ITopic destination, string subscriptionName, string selector, bool noLocal);
    public sealed virtual INMSConsumer CreateSharedConsumer(ITopic destination, string subscriptionName);
    public sealed virtual INMSConsumer CreateSharedConsumer(ITopic destination, string subscriptionName, string selector);
    public sealed virtual INMSConsumer CreateSharedDurableConsumer(ITopic destination, string subscriptionName);
    public sealed virtual INMSConsumer CreateSharedDurableConsumer(ITopic destination, string subscriptionName, string selector);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateConsumerAsync>d__31")]
public sealed virtual Task`1<INMSConsumer> CreateConsumerAsync(IDestination destination);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateConsumerAsync>d__32")]
public sealed virtual Task`1<INMSConsumer> CreateConsumerAsync(IDestination destination, string selector);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateConsumerAsync>d__33")]
public sealed virtual Task`1<INMSConsumer> CreateConsumerAsync(IDestination destination, string selector, bool noLocal);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateDurableConsumerAsync>d__34")]
public sealed virtual Task`1<INMSConsumer> CreateDurableConsumerAsync(ITopic destination, string subscriptionName);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateDurableConsumerAsync>d__35")]
public sealed virtual Task`1<INMSConsumer> CreateDurableConsumerAsync(ITopic destination, string subscriptionName, string selector);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateDurableConsumerAsync>d__36")]
public sealed virtual Task`1<INMSConsumer> CreateDurableConsumerAsync(ITopic destination, string subscriptionName, string selector, bool noLocal);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateSharedConsumerAsync>d__37")]
public sealed virtual Task`1<INMSConsumer> CreateSharedConsumerAsync(ITopic destination, string subscriptionName);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateSharedConsumerAsync>d__38")]
public sealed virtual Task`1<INMSConsumer> CreateSharedConsumerAsync(ITopic destination, string subscriptionName, string selector);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateSharedDurableConsumerAsync>d__39")]
public sealed virtual Task`1<INMSConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string subscriptionName);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateSharedDurableConsumerAsync>d__40")]
public sealed virtual Task`1<INMSConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string subscriptionName, string selector);
    public sealed virtual void Unsubscribe(string name);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<UnsubscribeAsync>d__42")]
public sealed virtual Task UnsubscribeAsync(string name);
    public sealed virtual IQueueBrowser CreateBrowser(IQueue queue);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateBrowserAsync>d__44")]
public sealed virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue);
    public sealed virtual IQueueBrowser CreateBrowser(IQueue queue, string selector);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateBrowserAsync>d__46")]
public sealed virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue, string selector);
    public sealed virtual IQueue GetQueue(string name);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<GetQueueAsync>d__48")]
public sealed virtual Task`1<IQueue> GetQueueAsync(string name);
    public sealed virtual ITopic GetTopic(string name);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<GetTopicAsync>d__50")]
public sealed virtual Task`1<ITopic> GetTopicAsync(string name);
    public sealed virtual ITemporaryQueue CreateTemporaryQueue();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateTemporaryQueueAsync>d__52")]
public sealed virtual Task`1<ITemporaryQueue> CreateTemporaryQueueAsync();
    public sealed virtual ITemporaryTopic CreateTemporaryTopic();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateTemporaryTopicAsync>d__54")]
public sealed virtual Task`1<ITemporaryTopic> CreateTemporaryTopicAsync();
    public sealed virtual IMessage CreateMessage();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateMessageAsync>d__56")]
public sealed virtual Task`1<IMessage> CreateMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateTextMessageAsync>d__58")]
public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage(string text);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateTextMessageAsync>d__60")]
public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public sealed virtual IMapMessage CreateMapMessage();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateMapMessageAsync>d__62")]
public sealed virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public sealed virtual IObjectMessage CreateObjectMessage(object body);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateObjectMessageAsync>d__64")]
public sealed virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public sealed virtual IBytesMessage CreateBytesMessage();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateBytesMessageAsync>d__66")]
public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public sealed virtual IBytesMessage CreateBytesMessage(Byte[] body);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateBytesMessageAsync>d__68")]
public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public sealed virtual IStreamMessage CreateStreamMessage();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CreateStreamMessageAsync>d__70")]
public sealed virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CloseInternal>d__73")]
public Task CloseInternal(bool sync);
    public sealed virtual void Recover();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<RecoverAsync>d__75")]
public sealed virtual Task RecoverAsync();
    public sealed virtual void Acknowledge();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<AcknowledgeAsync>d__77")]
public sealed virtual Task AcknowledgeAsync();
    public sealed virtual void Commit();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<CommitAsync>d__79")]
public sealed virtual Task CommitAsync();
    public sealed virtual void Rollback();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<RollbackAsync>d__81")]
public sealed virtual Task RollbackAsync();
    public sealed virtual void PurgeTempDestinations();
    private Session GetSession();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<GetSessionAsync>d__84")]
private Task`1<Session> GetSessionAsync();
    private NmsConsumer PrepareConsumer(NmsConsumer consumer);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsContext/<PrepareConsumerAsync>d__86")]
private Task`1<NmsConsumer> PrepareConsumerAsync(NmsConsumer consumer);
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public sealed virtual TimeSpan get_RequestTimeout();
    public sealed virtual void set_RequestTimeout(TimeSpan value);
    public sealed virtual bool get_Transacted();
    public sealed virtual string get_ClientId();
    public sealed virtual void set_ClientId(string value);
    public sealed virtual bool get_AutoStart();
    public sealed virtual void set_AutoStart(bool value);
    public sealed virtual void add_TransactionStartedListener(SessionTxEventDelegate value);
    public sealed virtual void remove_TransactionStartedListener(SessionTxEventDelegate value);
    public sealed virtual void add_TransactionCommittedListener(SessionTxEventDelegate value);
    public sealed virtual void remove_TransactionCommittedListener(SessionTxEventDelegate value);
    public sealed virtual void add_TransactionRolledBackListener(SessionTxEventDelegate value);
    public sealed virtual void remove_TransactionRolledBackListener(SessionTxEventDelegate value);
    public sealed virtual void add_ExceptionListener(ExceptionListener value);
    public sealed virtual void remove_ExceptionListener(ExceptionListener value);
    public sealed virtual void add_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    public sealed virtual void remove_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    public sealed virtual void add_ConnectionResumedListener(ConnectionResumedListener value);
    public sealed virtual void remove_ConnectionResumedListener(ConnectionResumedListener value);
}
public class Apache.NMS.ActiveMQ.NmsDefaultDeserializationPolicy : object {
    public static string CATCH_ALL_WILDCARD;
    private IReadOnlyList`1<string> denyList;
    private IReadOnlyList`1<string> allowList;
    public string DenyList { get; public set; }
    public string AllowList { get; public set; }
    public sealed virtual bool IsTrustedType(IDestination destination, Type type);
    private bool IsTypeOrNamespaceMatch(string typeName, string listEntry);
    public sealed virtual INmsDeserializationPolicy Clone();
    public string get_DenyList();
    public void set_DenyList(string value);
    public string get_AllowList();
    public void set_AllowList(string value);
}
public class Apache.NMS.ActiveMQ.NmsProducer : object {
    private ISession session;
    private MessageProducer producer;
    private string correlationId;
    private string type;
    private IDestination replyTo;
    private IPrimitiveMap messageProperties;
    public string NMSCorrelationID { get; public set; }
    public IDestination NMSReplyTo { get; public set; }
    public string NMSType { get; public set; }
    public MsgDeliveryMode DeliveryMode { get; public set; }
    public TimeSpan TimeToLive { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public MsgPriority Priority { get; public set; }
    public bool DisableMessageID { get; public set; }
    public bool DisableMessageTimestamp { get; public set; }
    public TimeSpan DeliveryDelay { get; public set; }
    public IPrimitiveMap Properties { get; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public NmsProducer(ISession session, MessageProducer producer);
    public sealed virtual void Dispose();
    public sealed virtual INMSProducer Send(IDestination destination, IMessage message);
    public sealed virtual INMSProducer Send(IDestination destination, string body);
    public sealed virtual INMSProducer Send(IDestination destination, IPrimitiveMap body);
    public sealed virtual INMSProducer Send(IDestination destination, Byte[] body);
    public sealed virtual INMSProducer Send(IDestination destination, object body);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.NmsProducer/<SendAsync>d__13")]
public sealed virtual Task`1<INMSProducer> SendAsync(IDestination destination, IMessage message);
    public sealed virtual Task`1<INMSProducer> SendAsync(IDestination destination, string body);
    public sealed virtual Task`1<INMSProducer> SendAsync(IDestination destination, IPrimitiveMap body);
    public sealed virtual Task`1<INMSProducer> SendAsync(IDestination destination, Byte[] body);
    public sealed virtual Task`1<INMSProducer> SendAsync(IDestination destination, object body);
    public sealed virtual INMSProducer ClearProperties();
    public sealed virtual IMessage CreateMessage();
    public sealed virtual Task`1<IMessage> CreateMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage();
    public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage(string text);
    public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public sealed virtual IMapMessage CreateMapMessage();
    public sealed virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public sealed virtual IObjectMessage CreateObjectMessage(object body);
    public sealed virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public sealed virtual IBytesMessage CreateBytesMessage();
    public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public sealed virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public sealed virtual IStreamMessage CreateStreamMessage();
    public sealed virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public sealed virtual void Close();
    public sealed virtual Task CloseAsync();
    public sealed virtual string get_NMSCorrelationID();
    public sealed virtual void set_NMSCorrelationID(string value);
    public sealed virtual INMSProducer SetNMSCorrelationID(string correlationID);
    public sealed virtual IDestination get_NMSReplyTo();
    public sealed virtual void set_NMSReplyTo(IDestination value);
    public sealed virtual INMSProducer SetNMSReplyTo(IDestination replyTo);
    public sealed virtual string get_NMSType();
    public sealed virtual void set_NMSType(string value);
    public sealed virtual INMSProducer SetNMSType(string type);
    public sealed virtual MsgDeliveryMode get_DeliveryMode();
    public sealed virtual void set_DeliveryMode(MsgDeliveryMode value);
    public sealed virtual INMSProducer SetDeliveryMode(MsgDeliveryMode deliveryMode);
    public sealed virtual TimeSpan get_TimeToLive();
    public sealed virtual void set_TimeToLive(TimeSpan value);
    public sealed virtual INMSProducer SetTimeToLive(TimeSpan timeToLive);
    public sealed virtual TimeSpan get_RequestTimeout();
    public sealed virtual void set_RequestTimeout(TimeSpan value);
    public sealed virtual MsgPriority get_Priority();
    public sealed virtual void set_Priority(MsgPriority value);
    public sealed virtual INMSProducer SetPriority(MsgPriority priority);
    public sealed virtual bool get_DisableMessageID();
    public sealed virtual void set_DisableMessageID(bool value);
    public sealed virtual INMSProducer SetDisableMessageID(bool value);
    public sealed virtual bool get_DisableMessageTimestamp();
    public sealed virtual void set_DisableMessageTimestamp(bool value);
    public sealed virtual INMSProducer SetDisableMessageTimestamp(bool value);
    public sealed virtual TimeSpan get_DeliveryDelay();
    public sealed virtual void set_DeliveryDelay(TimeSpan value);
    public sealed virtual INMSProducer SetDeliveryDelay(TimeSpan deliveryDelay);
    public sealed virtual IPrimitiveMap get_Properties();
    public sealed virtual INMSProducer SetProperty(string name, bool value);
    public sealed virtual INMSProducer SetProperty(string name, byte value);
    public sealed virtual INMSProducer SetProperty(string name, double value);
    public sealed virtual INMSProducer SetProperty(string name, float value);
    public sealed virtual INMSProducer SetProperty(string name, int value);
    public sealed virtual INMSProducer SetProperty(string name, long value);
    public sealed virtual INMSProducer SetProperty(string name, short value);
    public sealed virtual INMSProducer SetProperty(string name, char value);
    public sealed virtual INMSProducer SetProperty(string name, string value);
    public sealed virtual INMSProducer SetProperty(string name, Byte[] value);
    public sealed virtual INMSProducer SetProperty(string name, IList value);
    public sealed virtual INMSProducer SetProperty(string name, IDictionary value);
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
}
public abstract class Apache.NMS.ActiveMQ.OpenWire.BaseDataStreamMarshaller : object {
    private static String[] HEX_TABLE;
    private static BaseDataStreamMarshaller();
    public abstract virtual DataStructure CreateObject();
    public abstract virtual byte GetDataStructureType();
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    protected virtual DataStructure TightUnmarshalNestedObject(OpenWireFormat wireFormat, BinaryReader dataIn, BooleanStream bs);
    protected virtual int TightMarshalNestedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs);
    protected virtual void TightMarshalNestedObject2(OpenWireFormat wireFormat, DataStructure o, BinaryWriter dataOut, BooleanStream bs);
    protected virtual DataStructure TightUnmarshalCachedObject(OpenWireFormat wireFormat, BinaryReader dataIn, BooleanStream bs);
    protected virtual int TightMarshalCachedObject1(OpenWireFormat wireFormat, DataStructure o, BooleanStream bs);
    protected virtual void TightMarshalCachedObject2(OpenWireFormat wireFormat, DataStructure o, BinaryWriter dataOut, BooleanStream bs);
    protected virtual string TightUnmarshalString(BinaryReader dataIn, BooleanStream bs);
    protected virtual int TightMarshalString1(string value, BooleanStream bs);
    public static void TightMarshalString2(string value, BinaryWriter dataOut, BooleanStream bs);
    public virtual int TightMarshalLong1(OpenWireFormat wireFormat, long o, BooleanStream bs);
    public virtual void TightMarshalLong2(OpenWireFormat wireFormat, long o, BinaryWriter dataOut, BooleanStream bs);
    public virtual long TightUnmarshalLong(OpenWireFormat wireFormat, BinaryReader dataIn, BooleanStream bs);
    protected virtual int TightMarshalObjectArray1(OpenWireFormat wireFormat, DataStructure[] objects, BooleanStream bs);
    protected virtual void TightMarshalObjectArray2(OpenWireFormat wireFormat, DataStructure[] objects, BinaryWriter dataOut, BooleanStream bs);
    protected virtual BrokerError TightUnmarshalBrokerError(OpenWireFormat wireFormat, BinaryReader dataIn, BooleanStream bs);
    protected int TightMarshalBrokerError1(OpenWireFormat wireFormat, BrokerError o, BooleanStream bs);
    protected void TightMarshalBrokerError2(OpenWireFormat wireFormat, BrokerError o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    protected virtual DataStructure LooseUnmarshalNestedObject(OpenWireFormat wireFormat, BinaryReader dataIn);
    protected virtual void LooseMarshalNestedObject(OpenWireFormat wireFormat, DataStructure o, BinaryWriter dataOut);
    protected virtual DataStructure LooseUnmarshalCachedObject(OpenWireFormat wireFormat, BinaryReader dataIn);
    protected virtual void LooseMarshalCachedObject(OpenWireFormat wireFormat, DataStructure o, BinaryWriter dataOut);
    protected virtual string LooseUnmarshalString(BinaryReader dataIn);
    public static void LooseMarshalString(string value, BinaryWriter dataOut);
    public virtual void LooseMarshalLong(OpenWireFormat wireFormat, long o, BinaryWriter dataOut);
    public virtual long LooseUnmarshalLong(OpenWireFormat wireFormat, BinaryReader dataIn);
    protected virtual void LooseMarshalObjectArray(OpenWireFormat wireFormat, DataStructure[] objects, BinaryWriter dataOut);
    protected virtual BrokerError LooseUnmarshalBrokerError(OpenWireFormat wireFormat, BinaryReader dataIn);
    protected void LooseMarshalBrokerError(OpenWireFormat wireFormat, BrokerError o, BinaryWriter dataOut);
    protected virtual Byte[] ReadBytes(BinaryReader dataIn, bool flag);
    protected virtual Byte[] ReadBytes(BinaryReader dataIn);
    protected virtual Byte[] ReadBytes(BinaryReader dataIn, int size);
    protected virtual void WriteBytes(Byte[] command, BinaryWriter dataOut);
    protected virtual string ReadAsciiString(BinaryReader dataIn);
    public static string ToString(MessageId id);
    public static string ToString(ProducerId id);
    public static string ToString(TransactionId txnId);
    public static string ToHexFromBytes(Byte[] data);
}
public class Apache.NMS.ActiveMQ.OpenWire.BooleanStream : object {
    private Byte[] data;
    private short arrayLimit;
    private short arrayPos;
    private byte bytePos;
    public bool ReadBoolean();
    public void WriteBoolean(bool value);
    public void Marshal(BinaryWriter dataOut);
    public void Unmarshal(BinaryReader dataIn);
    public void Clear();
    public int MarshalledSize();
}
internal interface Apache.NMS.ActiveMQ.OpenWire.IMarshallerFactory {
    public abstract virtual void configure(OpenWireFormat format);
}
public class Apache.NMS.ActiveMQ.OpenWire.OpenWireFormat : object {
    private BaseDataStreamMarshaller[] dataMarshallers;
    private static byte NULL_TYPE;
    private int version;
    private bool cacheEnabled;
    private bool stackTraceEnabled;
    private bool tcpNoDelayEnabled;
    private bool sizePrefixDisabled;
    private bool tightEncodingEnabled;
    private long maxInactivityDuration;
    private long maxInactivityDurationInitialDelay;
    private int cacheSize;
    private static int minimumVersion;
    private WireFormatInfo preferredWireFormatInfo;
    private ITransport transport;
    public ITransport Transport { get; public set; }
    public int Version { get; public set; }
    public bool CacheEnabled { get; public set; }
    public bool StackTraceEnabled { get; public set; }
    public bool TcpNoDelayEnabled { get; public set; }
    public bool SizePrefixDisabled { get; public set; }
    public bool TightEncodingEnabled { get; public set; }
    public long MaxInactivityDuration { get; public set; }
    public long MaxInactivityDurationInitialDelay { get; public set; }
    public int CacheSize { get; public set; }
    public WireFormatInfo PreferredWireFormatInfo { get; public set; }
    public sealed virtual ITransport get_Transport();
    public sealed virtual void set_Transport(ITransport value);
    public sealed virtual int get_Version();
    public void set_Version(int value);
    public bool get_CacheEnabled();
    public void set_CacheEnabled(bool value);
    public bool get_StackTraceEnabled();
    public void set_StackTraceEnabled(bool value);
    public bool get_TcpNoDelayEnabled();
    public void set_TcpNoDelayEnabled(bool value);
    public bool get_SizePrefixDisabled();
    public void set_SizePrefixDisabled(bool value);
    public bool get_TightEncodingEnabled();
    public void set_TightEncodingEnabled(bool value);
    public long get_MaxInactivityDuration();
    public void set_MaxInactivityDuration(long value);
    public long get_MaxInactivityDurationInitialDelay();
    public void set_MaxInactivityDurationInitialDelay(long value);
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public WireFormatInfo get_PreferredWireFormatInfo();
    public void set_PreferredWireFormatInfo(WireFormatInfo value);
    public void clearMarshallers();
    public void addMarshaller(BaseDataStreamMarshaller marshaller);
    private BaseDataStreamMarshaller GetDataStreamMarshallerForType(byte dataType);
    public sealed virtual void Marshal(object o, BinaryWriter ds);
    public sealed virtual object Unmarshal(BinaryReader dis);
    public int TightMarshalNestedObject1(DataStructure o, BooleanStream bs);
    public void TightMarshalNestedObject2(DataStructure o, BinaryWriter ds, BooleanStream bs);
    public DataStructure TightUnmarshalNestedObject(BinaryReader dis, BooleanStream bs);
    public void LooseMarshalNestedObject(DataStructure o, BinaryWriter dataOut);
    public DataStructure LooseUnmarshalNestedObject(BinaryReader dis);
    public void RenegotiateWireFormat(WireFormatInfo info);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V1.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public abstract class Apache.NMS.ActiveMQ.OpenWire.V1.DataStructureSupportMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V1.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V1.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V1.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V1.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V10.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V10.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V10.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V10.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V10.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V2.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V2.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V2.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V2.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V2.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V3.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V3.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V3.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V3.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V3.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V4.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V4.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V4.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V4.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V4.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V5.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V5.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V5.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V5.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V5.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V6.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V6.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V6.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V6.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V6.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V7.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V7.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V7.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V7.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V7.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V8.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V8.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V8.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V8.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V8.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQBlobMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQBytesMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQDestinationMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQMapMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQMessageMarshaller : MessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQObjectMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQQueueMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQStreamMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQTempDestinationMarshaller : ActiveMQDestinationMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQTempQueueMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQTempTopicMarshaller : ActiveMQTempDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQTextMessageMarshaller : ActiveMQMessageMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ActiveMQTopicMarshaller : ActiveMQDestinationMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V9.BaseCommandMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.BrokerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.BrokerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConnectionControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConnectionErrorMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConnectionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConnectionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConsumerControlMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConsumerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ConsumerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ControlCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.DataArrayResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.DataResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.DestinationInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.DiscoveryEventMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ExceptionResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.FlushCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.IntegerResponseMarshaller : ResponseMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.JournalQueueAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.JournalTopicAckMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.JournalTraceMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.JournalTransactionMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.KeepAliveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.LastPartialCommandMarshaller : PartialCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.LocalTransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.OpenWire.V9.MarshallerFactory : object {
    public sealed virtual void configure(OpenWireFormat format);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.MessageAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.MessageDispatchMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.MessageDispatchNotificationMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.MessageIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V9.MessageMarshaller : BaseCommandMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.MessagePullMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.NetworkBridgeFilterMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.PartialCommandMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ProducerAckMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ProducerIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ProducerInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.RemoveInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.RemoveSubscriptionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ReplayCommandMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ResponseMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.SessionIdMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.SessionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.ShutdownInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.SubscriptionInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal abstract class Apache.NMS.ActiveMQ.OpenWire.V9.TransactionIdMarshaller : BaseDataStreamMarshaller {
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.TransactionInfoMarshaller : BaseCommandMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.WireFormatInfoMarshaller : BaseDataStreamMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
internal class Apache.NMS.ActiveMQ.OpenWire.V9.XATransactionIdMarshaller : TransactionIdMarshaller {
    public virtual DataStructure CreateObject();
    public virtual byte GetDataStructureType();
    public virtual void TightUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn, BooleanStream bs);
    public virtual int TightMarshal1(OpenWireFormat wireFormat, object o, BooleanStream bs);
    public virtual void TightMarshal2(OpenWireFormat wireFormat, object o, BinaryWriter dataOut, BooleanStream bs);
    public virtual void LooseUnmarshal(OpenWireFormat wireFormat, object o, BinaryReader dataIn);
    public virtual void LooseMarshal(OpenWireFormat wireFormat, object o, BinaryWriter dataOut);
}
public class Apache.NMS.ActiveMQ.PrefetchPolicy : object {
    public static int MAX_PREFETCH_SIZE;
    public static int DEFAULT_QUEUE_PREFETCH;
    public static int DEFAULT_QUEUE_BROWSER_PREFETCH;
    public static int DEFAULT_DURABLE_TOPIC_PREFETCH;
    public static int DEFAULT_TOPIC_PREFETCH;
    private int queuePrefetch;
    private int queueBrowserPrefetch;
    private int topicPrefetch;
    private int durableTopicPrefetch;
    private int maximumPendingMessageLimit;
    public int QueuePrefetch { get; public set; }
    public int QueueBrowserPrefetch { get; public set; }
    public int TopicPrefetch { get; public set; }
    public int DurableTopicPrefetch { get; public set; }
    public int MaximumPendingMessageLimit { get; public set; }
    unknown int All {public set; }
    public int get_QueuePrefetch();
    public void set_QueuePrefetch(int value);
    public int get_QueueBrowserPrefetch();
    public void set_QueueBrowserPrefetch(int value);
    public int get_TopicPrefetch();
    public void set_TopicPrefetch(int value);
    public int get_DurableTopicPrefetch();
    public void set_DurableTopicPrefetch(int value);
    public int get_MaximumPendingMessageLimit();
    public void set_MaximumPendingMessageLimit(int value);
    public void set_All(int value);
    public void SetAll(int value);
    private static int RestrictToMaximum(int value);
    public sealed virtual object Clone();
}
public class Apache.NMS.ActiveMQ.QueueBrowser : object {
    private Session session;
    private ActiveMQDestination destination;
    private string selector;
    private MessageConsumer consumer;
    private bool disposed;
    private bool closed;
    private ConsumerId consumerId;
    private Atomic`1<bool> browseDone;
    private bool dispatchAsync;
    private object semaphore;
    private object myLock;
    public object Current { get; }
    public IQueue Queue { get; }
    public string MessageSelector { get; }
    internal QueueBrowser(Session session, ConsumerId consumerId, ActiveMQDestination destination, string selector, bool dispatchAsync);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.QueueBrowser/<CreateConsumerAsync>d__15")]
private Task`1<MessageConsumer> CreateConsumerAsync();
    private void DestroyConsumer();
    public sealed virtual IEnumerator GetEnumerator();
    private void CheckClosed();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
    public sealed virtual Task CloseAsync();
    public sealed virtual void Close();
    public sealed virtual IQueue get_Queue();
    public sealed virtual string get_MessageSelector();
    protected void WaitForMessage();
    protected void NotifyMessageAvailable();
    public virtual string ToString();
    public sealed virtual void Reset();
}
public class Apache.NMS.ActiveMQ.RequestTimedOutException : IOException {
    public RequestTimedOutException(TimeSpan interval);
    public RequestTimedOutException(string msg);
    public RequestTimedOutException(string msg, Exception inner);
}
public class Apache.NMS.ActiveMQ.Session : object {
    private NmsSynchronizationMonitor myLock;
    private NmsSynchronizationMonitor consumersLock;
    private IDictionary consumers;
    private NmsSynchronizationMonitor producersLock;
    private IDictionary producers;
    private SessionExecutor executor;
    private TransactionContext transactionContext;
    private Connection connection;
    private bool dispatchAsync;
    private bool exclusive;
    private bool retroactive;
    private byte priority;
    private SessionInfo info;
    private int consumerCounter;
    private int producerCounter;
    private long nextDeliveryId;
    private long lastDeliveredSequenceId;
    protected bool disposed;
    protected bool closed;
    protected bool closing;
    protected Atomic`1<bool> clearInProgress;
    private TimeSpan disposeStopTimeout;
    private TimeSpan closeStopTimeout;
    private TimeSpan requestTimeout;
    private AcknowledgementMode acknowledgementMode;
    private ConsumerTransformerDelegate consumerTransformer;
    private ProducerTransformerDelegate producerTransformer;
    unknown int MaximumPendingMessageLimit {public set; }
    public bool DispatchAsync { get; public set; }
    public bool Exclusive { get; public set; }
    public bool Retroactive { get; public set; }
    public byte Priority { get; public set; }
    public Connection Connection { get; }
    public SessionId SessionId { get; }
    public TransactionContext TransactionContext { get; }
    public TimeSpan RequestTimeout { get; public set; }
    public bool Transacted { get; }
    public AcknowledgementMode AcknowledgementMode { get; }
    public bool IsClientAcknowledge { get; }
    public bool IsAutoAcknowledge { get; }
    public bool IsDupsOkAcknowledge { get; }
    public bool IsIndividualAcknowledge { get; }
    public bool IsTransacted { get; }
    public SessionExecutor Executor { get; }
    public long NextDeliveryId { get; }
    public long DisposeStopTimeout { get; public set; }
    public long CloseStopTimeout { get; public set; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    internal Scheduler Scheduler { get; }
    internal List`1<MessageConsumer> Consumers { get; }
    internal long LastDeliveredSequenceId { get; }
    public bool Started { get; }
    public Session(Connection connection, SessionId sessionId, AcknowledgementMode acknowledgementMode);
    protected virtual override void Finalize();
    public sealed virtual void add_TransactionStartedListener(SessionTxEventDelegate value);
    public sealed virtual void remove_TransactionStartedListener(SessionTxEventDelegate value);
    public sealed virtual void add_TransactionCommittedListener(SessionTxEventDelegate value);
    public sealed virtual void remove_TransactionCommittedListener(SessionTxEventDelegate value);
    public sealed virtual void add_TransactionRolledBackListener(SessionTxEventDelegate value);
    public sealed virtual void remove_TransactionRolledBackListener(SessionTxEventDelegate value);
    public void set_MaximumPendingMessageLimit(int value);
    public bool get_DispatchAsync();
    public void set_DispatchAsync(bool value);
    public bool get_Exclusive();
    public void set_Exclusive(bool value);
    public bool get_Retroactive();
    public void set_Retroactive(bool value);
    public byte get_Priority();
    public void set_Priority(byte value);
    public Connection get_Connection();
    public SessionId get_SessionId();
    public TransactionContext get_TransactionContext();
    public sealed virtual TimeSpan get_RequestTimeout();
    public sealed virtual void set_RequestTimeout(TimeSpan value);
    public sealed virtual bool get_Transacted();
    public virtual AcknowledgementMode get_AcknowledgementMode();
    public virtual bool get_IsClientAcknowledge();
    public virtual bool get_IsAutoAcknowledge();
    public virtual bool get_IsDupsOkAcknowledge();
    public virtual bool get_IsIndividualAcknowledge();
    public virtual bool get_IsTransacted();
    public SessionExecutor get_Executor();
    public long get_NextDeliveryId();
    public long get_DisposeStopTimeout();
    public void set_DisposeStopTimeout(long value);
    public long get_CloseStopTimeout();
    public void set_CloseStopTimeout(long value);
    public sealed virtual Task RollbackAsync();
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    internal Scheduler get_Scheduler();
    internal List`1<MessageConsumer> get_Consumers();
    internal long get_LastDeliveredSequenceId();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public sealed virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public virtual void Close();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<CloseAsync>d__102")]
public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<DoCloseAsync>d__103")]
internal Task DoCloseAsync();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<ShutdownAsync>d__104")]
internal Task ShutdownAsync();
    public sealed virtual IMessageProducer CreateProducer();
    public sealed virtual Task`1<IMessageProducer> CreateProducerAsync();
    public sealed virtual IMessageProducer CreateProducer(IDestination destination);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<CreateProducerAsync>d__108")]
public sealed virtual Task`1<IMessageProducer> CreateProducerAsync(IDestination destination);
    internal virtual MessageProducer DoCreateMessageProducer(ProducerId id, ActiveMQDestination destination);
    public sealed virtual IMessageConsumer CreateConsumer(IDestination destination);
    public sealed virtual Task`1<IMessageConsumer> CreateConsumerAsync(IDestination destination);
    public sealed virtual IMessageConsumer CreateConsumer(IDestination destination, string selector);
    public sealed virtual Task`1<IMessageConsumer> CreateConsumerAsync(IDestination destination, string selector);
    public sealed virtual IMessageConsumer CreateConsumer(IDestination destination, string selector, bool noLocal);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<CreateConsumerAsync>d__115")]
public sealed virtual Task`1<IMessageConsumer> CreateConsumerAsync(IDestination destination, string selector, bool noLocal);
    public sealed virtual IMessageConsumer CreateDurableConsumer(ITopic destination, string name);
    public sealed virtual Task`1<IMessageConsumer> CreateDurableConsumerAsync(ITopic destination, string name);
    public sealed virtual IMessageConsumer CreateDurableConsumer(ITopic destination, string name, string selector);
    public sealed virtual Task`1<IMessageConsumer> CreateDurableConsumerAsync(ITopic destination, string name, string selector);
    public sealed virtual IMessageConsumer CreateDurableConsumer(ITopic destination, string name, string selector, bool noLocal);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<CreateDurableConsumerAsync>d__121")]
public sealed virtual Task`1<IMessageConsumer> CreateDurableConsumerAsync(ITopic destination, string name, string selector, bool noLocal);
    public sealed virtual IMessageConsumer CreateSharedConsumer(ITopic destination, string name);
    public sealed virtual Task`1<IMessageConsumer> CreateSharedConsumerAsync(ITopic destination, string name);
    public sealed virtual IMessageConsumer CreateSharedConsumer(ITopic destination, string name, string selector);
    public sealed virtual Task`1<IMessageConsumer> CreateSharedConsumerAsync(ITopic destination, string name, string selector);
    public sealed virtual IMessageConsumer CreateSharedDurableConsumer(ITopic destination, string name);
    public sealed virtual Task`1<IMessageConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string name);
    public sealed virtual IMessageConsumer CreateSharedDurableConsumer(ITopic destination, string name, string selector);
    public sealed virtual Task`1<IMessageConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string name, string selector);
    internal virtual MessageConsumer DoCreateMessageConsumer(ConsumerId id, ActiveMQDestination destination, string name, string selector, int prefetch, int maxPending, bool noLocal);
    public sealed virtual void Unsubscribe(string name);
    public sealed virtual Task UnsubscribeAsync(string name);
    public sealed virtual void DeleteDurableConsumer(string name);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<DeleteDurableConsumerAsync>d__134")]
public Task DeleteDurableConsumerAsync(string name);
    public sealed virtual IQueueBrowser CreateBrowser(IQueue queue);
    public sealed virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue);
    public sealed virtual IQueueBrowser CreateBrowser(IQueue queue, string selector);
    public sealed virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue, string selector);
    public sealed virtual IQueue GetQueue(string name);
    public sealed virtual Task`1<IQueue> GetQueueAsync(string name);
    public sealed virtual ITopic GetTopic(string name);
    public sealed virtual Task`1<ITopic> GetTopicAsync(string name);
    public sealed virtual ITemporaryQueue CreateTemporaryQueue();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<CreateTemporaryQueueAsync>d__144")]
public sealed virtual Task`1<ITemporaryQueue> CreateTemporaryQueueAsync();
    public sealed virtual ITemporaryTopic CreateTemporaryTopic();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<CreateTemporaryTopicAsync>d__146")]
public sealed virtual Task`1<ITemporaryTopic> CreateTemporaryTopicAsync();
    public sealed virtual void DeleteDestination(IDestination destination);
    public sealed virtual Task DeleteDestinationAsync(IDestination destination);
    public sealed virtual IMessage CreateMessage();
    public sealed virtual Task`1<IMessage> CreateMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage();
    public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public sealed virtual ITextMessage CreateTextMessage(string text);
    public sealed virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public sealed virtual IMapMessage CreateMapMessage();
    public sealed virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public sealed virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public sealed virtual IBytesMessage CreateBytesMessage();
    public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public sealed virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public sealed virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public sealed virtual IStreamMessage CreateStreamMessage();
    public sealed virtual IObjectMessage CreateObjectMessage(object body);
    public sealed virtual Task AcknowledgeAsync();
    public sealed virtual void Commit();
    public sealed virtual Task CommitAsync();
    public sealed virtual void Rollback();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<RecoverAsync>d__168")]
public sealed virtual Task RecoverAsync();
    public sealed virtual void Recover();
    private sealed virtual override void Apache.NMS.ISession.Acknowledge();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<DoSendAsync>d__171")]
internal Task DoSendAsync(ActiveMQDestination destination, ActiveMQMessage message, MessageProducer producer, MemoryUsage producerWindow, TimeSpan sendTimeout);
    internal virtual void DoCommit();
    internal virtual void DoRollback();
    internal virtual void DoStartTransaction();
    public void AddConsumer(MessageConsumer consumer);
    public void RemoveConsumer(MessageConsumer consumer);
    public void AddProducer(MessageProducer producer);
    public void RemoveProducer(ProducerId objectId);
    public ConsumerId GetNextConsumerId();
    public ProducerId GetNextProducerId();
    public void Stop();
    public void Start();
    public bool get_Started();
    internal void Redispatch(IDispatcher dispatcher, MessageDispatchChannel channel);
    public sealed virtual Task Dispatch_Async(MessageDispatch dispatch);
    internal void ClearMessagesInProgress(Int64& transportInterruptionProcessingComplete);
    private static void ClearMessages(object value);
    private static void ResetClearInProgressFlag(object value);
    internal void Acknowledge();
    private ActiveMQMessage ConfigureMessage(ActiveMQMessage message);
    internal Task SendAckAsync(MessageAck ack);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Session/<SendAckAsync>d__193")]
internal Task SendAckAsync(MessageAck ack, bool lazy);
    protected virtual TransactionContext CreateTransactionContext();
    private void CheckClosed();
    private static void DoNothingAcknowledge(ActiveMQMessage message);
    internal bool IsInUse(ActiveMQTempDestination dest);
}
public class Apache.NMS.ActiveMQ.SessionExecutor : object {
    private MessageDispatchChannel messageQueue;
    private TaskRunner taskRunner;
    private Session session;
    private IDictionary consumers;
    public MessageDispatch[] UnconsumedMessages { get; }
    public bool HasUncomsumedMessages { get; }
    public bool Running { get; }
    public bool Empty { get; }
    public SessionExecutor(Session session, IDictionary consumers);
    protected virtual override void Finalize();
    public void Execute(MessageDispatch dispatch);
    public void ExecuteFirst(MessageDispatch dispatch);
    public void Wakeup();
    public void Start();
    public void Stop();
    public void Stop(TimeSpan timeout);
    public void Close();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.SessionExecutor/<DispatchAsync>d__13")]
public Task DispatchAsync(MessageDispatch dispatch);
    public sealed virtual bool Iterate();
    public void ClearMessagesInProgress();
    public void Clear();
    public MessageDispatch[] get_UnconsumedMessages();
    public bool get_HasUncomsumedMessages();
    public bool get_Running();
    public bool get_Empty();
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.ActiveMQ.State.AtomicCollection`1 : object {
    private ArrayList _collection;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public AtomicCollection`1(ICollection c);
    public int get_Count();
    public bool get_IsReadOnly();
    public int Add(TValue v);
    public void Clear();
    public bool Contains(TValue v);
    public void CopyTo(TValue[] a, int index);
    public void Remove(TValue v);
    public void RemoveAt(int index);
    public TValue get_Item(int index);
    public void set_Item(int index, TValue value);
    public IEnumerator GetEnumerator();
    public IEnumerator GetEnumerator(int index, int count);
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.ActiveMQ.State.AtomicDictionary`2 : object {
    private Dictionary`2<TKey, TValue> _dictionary;
    public TValue Item { get; public set; }
    public AtomicCollection`1<TKey> Keys { get; }
    public AtomicCollection`1<TValue> Values { get; }
    public void Clear();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& val);
    public AtomicCollection`1<TKey> get_Keys();
    public AtomicCollection`1<TValue> get_Values();
    public void Add(TKey k, TValue v);
    public bool Remove(TKey v);
    public bool ContainsKey(TKey k);
    public bool ContainsValue(TValue v);
}
public class Apache.NMS.ActiveMQ.State.CommandVisitorAdapter : object {
    public virtual Response ProcessAddConnection(ConnectionInfo info);
    public virtual Response ProcessAddConsumer(ConsumerInfo info);
    public virtual Response ProcessAddDestination(DestinationInfo info);
    public virtual Response ProcessAddProducer(ProducerInfo info);
    public virtual Response ProcessAddSession(SessionInfo info);
    public virtual Response ProcessBeginTransaction(TransactionInfo info);
    public virtual Response ProcessBrokerInfo(BrokerInfo info);
    public virtual Response ProcessCommitTransactionOnePhase(TransactionInfo info);
    public virtual Response ProcessCommitTransactionTwoPhase(TransactionInfo info);
    public virtual Response ProcessEndTransaction(TransactionInfo info);
    public virtual Response ProcessFlushCommand(FlushCommand command);
    public virtual Response ProcessForgetTransaction(TransactionInfo info);
    public virtual Response ProcessKeepAliveInfo(KeepAliveInfo info);
    public virtual Response ProcessMessage(Message send);
    public virtual Response ProcessMessageAck(MessageAck ack);
    public virtual Response ProcessMessageDispatchNotification(MessageDispatchNotification notification);
    public virtual Response ProcessMessagePull(MessagePull pull);
    public virtual Response ProcessPrepareTransaction(TransactionInfo info);
    public virtual Response ProcessProducerAck(ProducerAck ack);
    public virtual Response ProcessRecoverTransactions(TransactionInfo info);
    public virtual Response ProcessRemoveConnection(ConnectionId id);
    public virtual Response ProcessRemoveConsumer(ConsumerId id);
    public virtual Response ProcessRemoveDestination(DestinationInfo info);
    public virtual Response ProcessRemoveProducer(ProducerId id);
    public virtual Response ProcessRemoveSession(SessionId id);
    public virtual Response ProcessRemoveSubscriptionInfo(RemoveSubscriptionInfo info);
    public virtual Response ProcessRollbackTransaction(TransactionInfo info);
    public virtual Response ProcessShutdownInfo(ShutdownInfo info);
    public virtual Response ProcessWireFormat(WireFormatInfo info);
    public virtual Response ProcessMessageDispatch(MessageDispatch dispatch);
    public virtual Response ProcessControlCommand(ControlCommand command);
    public virtual Response ProcessConnectionControl(ConnectionControl control);
    public virtual Response ProcessConnectionError(ConnectionError error);
    public virtual Response ProcessConsumerControl(ConsumerControl control);
    public virtual Response ProcessResponse(Response response);
    public virtual Response ProcessReplayCommand(ReplayCommand replayCommand);
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.ActiveMQ.State.ConnectionState : object {
    private ConnectionInfo info;
    private AtomicDictionary`2<TransactionId, TransactionState> transactions;
    private AtomicDictionary`2<SessionId, SessionState> sessions;
    private AtomicCollection`1<DestinationInfo> tempDestinations;
    private Atomic`1<bool> isShutdown;
    private bool connectionInterruptProcessingComplete;
    private Dictionary`2<ConsumerId, ConsumerInfo> recoveringPullConsumers;
    public TransactionState Item { get; }
    public AtomicCollection`1<TransactionState> TransactionStates { get; }
    public SessionState Item { get; }
    public ConnectionInfo Info { get; }
    public AtomicCollection`1<SessionId> SessionIds { get; }
    public AtomicCollection`1<DestinationInfo> TempDestinations { get; }
    public AtomicCollection`1<SessionState> SessionStates { get; }
    public Dictionary`2<ConsumerId, ConsumerInfo> RecoveringPullConsumers { get; }
    public bool ConnectionInterruptProcessingComplete { get; public set; }
    public ConnectionState(ConnectionInfo info);
    public virtual string ToString();
    public void Reset(ConnectionInfo info);
    public void AddTempDestination(DestinationInfo info);
    public void RemoveTempDestination(IDestination destination);
    public void AddTransactionState(TransactionId id);
    public TransactionState get_Item(TransactionId id);
    public AtomicCollection`1<TransactionState> get_TransactionStates();
    public SessionState get_Item(SessionId id);
    public TransactionState RemoveTransactionState(TransactionId id);
    public void AddSession(SessionInfo info);
    public SessionState RemoveSession(SessionId id);
    public ConnectionInfo get_Info();
    public AtomicCollection`1<SessionId> get_SessionIds();
    public AtomicCollection`1<DestinationInfo> get_TempDestinations();
    public AtomicCollection`1<SessionState> get_SessionStates();
    private void CheckShutdown();
    public Dictionary`2<ConsumerId, ConsumerInfo> get_RecoveringPullConsumers();
    public bool get_ConnectionInterruptProcessingComplete();
    public void set_ConnectionInterruptProcessingComplete(bool value);
    public void Shutdown();
}
public class Apache.NMS.ActiveMQ.State.ConnectionStateTracker : CommandVisitorAdapter {
    private static Tracked TRACKED_RESPONSE_MARKER;
    protected Dictionary`2<ConnectionId, ConnectionState> connectionStates;
    private bool isTrackTransactions;
    private bool isTrackTransactionProducers;
    private bool isRestoreSessions;
    private bool isRestoreConsumers;
    private bool isRestoreProducers;
    private bool isRestoreTransaction;
    private bool isTrackMessages;
    private int maxCacheSize;
    private LRUCache`2<object, Command> messageCache;
    public bool RestoreConsumers { get; public set; }
    public bool RestoreProducers { get; public set; }
    public bool RestoreSessions { get; public set; }
    public bool TrackTransactions { get; public set; }
    public bool TrackTransactionProducers { get; public set; }
    public bool RestoreTransaction { get; public set; }
    public bool TrackMessages { get; public set; }
    public int MaxCacheSize { get; public set; }
    private static ConnectionStateTracker();
    public Tracked Track(Command command);
    public void TrackBack(Command command);
    public void DoRestore(ITransport transport);
    private void DoRestoreTransactions(ITransport transport, ConnectionState connectionState);
    protected void DoRestoreSessions(ITransport transport, ConnectionState connectionState);
    protected void DoRestoreConsumers(ITransport transport, SessionState sessionState);
    protected void DoRestoreProducers(ITransport transport, SessionState sessionState);
    protected void DoRestoreTempDestinations(ITransport transport, ConnectionState connectionState);
    public virtual Response ProcessAddDestination(DestinationInfo info);
    public virtual Response ProcessRemoveDestination(DestinationInfo info);
    public virtual Response ProcessAddProducer(ProducerInfo info);
    public virtual Response ProcessRemoveProducer(ProducerId id);
    public virtual Response ProcessAddConsumer(ConsumerInfo info);
    public virtual Response ProcessRemoveConsumer(ConsumerId id);
    public virtual Response ProcessAddSession(SessionInfo info);
    public virtual Response ProcessRemoveSession(SessionId id);
    public virtual Response ProcessAddConnection(ConnectionInfo info);
    public virtual Response ProcessRemoveConnection(ConnectionId id);
    public virtual Response ProcessMessage(Message send);
    public virtual Response ProcessMessageAck(MessageAck ack);
    public virtual Response ProcessBeginTransaction(TransactionInfo info);
    public virtual Response ProcessPrepareTransaction(TransactionInfo info);
    public virtual Response ProcessCommitTransactionOnePhase(TransactionInfo info);
    public virtual Response ProcessCommitTransactionTwoPhase(TransactionInfo info);
    public virtual Response ProcessRollbackTransaction(TransactionInfo info);
    public virtual Response ProcessEndTransaction(TransactionInfo info);
    public virtual Response ProcessMessagePull(MessagePull pull);
    public bool get_RestoreConsumers();
    public void set_RestoreConsumers(bool value);
    public bool get_RestoreProducers();
    public void set_RestoreProducers(bool value);
    public bool get_RestoreSessions();
    public void set_RestoreSessions(bool value);
    public bool get_TrackTransactions();
    public void set_TrackTransactions(bool value);
    public bool get_TrackTransactionProducers();
    public void set_TrackTransactionProducers(bool value);
    public bool get_RestoreTransaction();
    public void set_RestoreTransaction(bool value);
    public bool get_TrackMessages();
    public void set_TrackMessages(bool value);
    public int get_MaxCacheSize();
    public void set_MaxCacheSize(int value);
    public void ConnectionInterruptProcessingComplete(ITransport transport, ConnectionId connectionId);
    public void TransportInterrupted(ConnectionId id);
}
public class Apache.NMS.ActiveMQ.State.ConsumerState : object {
    private ConsumerInfo info;
    public ConsumerInfo Info { get; }
    public ConsumerState(ConsumerInfo info);
    public virtual string ToString();
    public ConsumerInfo get_Info();
}
public interface Apache.NMS.ActiveMQ.State.ICommandVisitor {
    public abstract virtual Response ProcessAddConnection(ConnectionInfo info);
    public abstract virtual Response ProcessAddSession(SessionInfo info);
    public abstract virtual Response ProcessAddProducer(ProducerInfo info);
    public abstract virtual Response ProcessAddConsumer(ConsumerInfo info);
    public abstract virtual Response ProcessRemoveConnection(ConnectionId id);
    public abstract virtual Response ProcessRemoveSession(SessionId id);
    public abstract virtual Response ProcessRemoveProducer(ProducerId id);
    public abstract virtual Response ProcessRemoveConsumer(ConsumerId id);
    public abstract virtual Response ProcessAddDestination(DestinationInfo info);
    public abstract virtual Response ProcessRemoveDestination(DestinationInfo info);
    public abstract virtual Response ProcessRemoveSubscriptionInfo(RemoveSubscriptionInfo info);
    public abstract virtual Response ProcessMessage(Message send);
    public abstract virtual Response ProcessMessageAck(MessageAck ack);
    public abstract virtual Response ProcessMessagePull(MessagePull pull);
    public abstract virtual Response ProcessBeginTransaction(TransactionInfo info);
    public abstract virtual Response ProcessPrepareTransaction(TransactionInfo info);
    public abstract virtual Response ProcessCommitTransactionOnePhase(TransactionInfo info);
    public abstract virtual Response ProcessCommitTransactionTwoPhase(TransactionInfo info);
    public abstract virtual Response ProcessRollbackTransaction(TransactionInfo info);
    public abstract virtual Response ProcessWireFormat(WireFormatInfo info);
    public abstract virtual Response ProcessKeepAliveInfo(KeepAliveInfo info);
    public abstract virtual Response ProcessShutdownInfo(ShutdownInfo info);
    public abstract virtual Response ProcessFlushCommand(FlushCommand command);
    public abstract virtual Response ProcessBrokerInfo(BrokerInfo info);
    public abstract virtual Response ProcessRecoverTransactions(TransactionInfo info);
    public abstract virtual Response ProcessForgetTransaction(TransactionInfo info);
    public abstract virtual Response ProcessEndTransaction(TransactionInfo info);
    public abstract virtual Response ProcessMessageDispatchNotification(MessageDispatchNotification notification);
    public abstract virtual Response ProcessProducerAck(ProducerAck ack);
    public abstract virtual Response ProcessMessageDispatch(MessageDispatch dispatch);
    public abstract virtual Response ProcessControlCommand(ControlCommand command);
    public abstract virtual Response ProcessConnectionError(ConnectionError error);
    public abstract virtual Response ProcessConnectionControl(ConnectionControl control);
    public abstract virtual Response ProcessConsumerControl(ConsumerControl control);
    public abstract virtual Response ProcessResponse(Response response);
    public abstract virtual Response ProcessReplayCommand(ReplayCommand replayCommand);
}
public class Apache.NMS.ActiveMQ.State.ProducerState : object {
    private ProducerInfo info;
    private TransactionState transactionState;
    public ProducerInfo Info { get; }
    public TransactionState TransactionState { get; public set; }
    public ProducerState(ProducerInfo info);
    public virtual string ToString();
    public ProducerInfo get_Info();
    public TransactionState get_TransactionState();
    public void set_TransactionState(TransactionState value);
}
public abstract class Apache.NMS.ActiveMQ.State.ResponseHandler : object {
    public virtual void OnResponse();
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.ActiveMQ.State.SessionState : object {
    private SessionInfo info;
    private AtomicDictionary`2<ProducerId, ProducerState> producers;
    private AtomicDictionary`2<ConsumerId, ConsumerState> consumers;
    private Atomic`1<bool> isShutdown;
    public SessionInfo Info { get; }
    public AtomicCollection`1<ConsumerId> ConsumerIds { get; }
    public AtomicCollection`1<ProducerId> ProducerIds { get; }
    public AtomicCollection`1<ProducerState> ProducerStates { get; }
    public ProducerState Item { get; }
    public AtomicCollection`1<ConsumerState> ConsumerStates { get; }
    public ConsumerState Item { get; }
    public SessionState(SessionInfo info);
    public virtual string ToString();
    public void AddProducer(ProducerInfo info);
    public ProducerState RemoveProducer(ProducerId id);
    public void AddConsumer(ConsumerInfo info);
    public ConsumerState RemoveConsumer(ConsumerId id);
    public SessionInfo get_Info();
    public AtomicCollection`1<ConsumerId> get_ConsumerIds();
    public AtomicCollection`1<ProducerId> get_ProducerIds();
    public AtomicCollection`1<ProducerState> get_ProducerStates();
    public ProducerState getProducerState(ProducerId producerId);
    public ProducerState get_Item(ProducerId producerId);
    public AtomicCollection`1<ConsumerState> get_ConsumerStates();
    public ConsumerState getConsumerState(ConsumerId consumerId);
    public ConsumerState get_Item(ConsumerId consumerId);
    private void CheckShutdown();
    public void Shutdown();
}
public class Apache.NMS.ActiveMQ.State.Tracked : Response {
    private ResponseHandler handler;
    public bool WaitingForResponse { get; }
    public Tracked(ResponseHandler handler);
    public void OnResponse();
    public virtual bool get_WaitingForResponse();
}
public class Apache.NMS.ActiveMQ.State.TransactionState : object {
    private List`1<Command> commands;
    private TransactionId id;
    private Atomic`1<bool> isShutdown;
    private bool prepared;
    private int preparedResult;
    private AtomicDictionary`2<ProducerId, ProducerState> producers;
    public List`1<Command> Commands { get; }
    public TransactionId Id { get; }
    public bool Prepared { get; public set; }
    public int PreparedResult { get; public set; }
    public AtomicCollection`1<ProducerState> ProducerStates { get; }
    public TransactionState(TransactionId id);
    public virtual string ToString();
    public void AddCommand(Command operation);
    public List`1<Command> get_Commands();
    private void CheckShutdown();
    public void Shutdown();
    public TransactionId get_Id();
    public bool get_Prepared();
    public void set_Prepared(bool value);
    public int get_PreparedResult();
    public void set_PreparedResult(int value);
    public void AddProducer(ProducerState producer);
    public AtomicCollection`1<ProducerState> get_ProducerStates();
}
public interface Apache.NMS.ActiveMQ.Threads.CompositeTask {
    public bool IsPending { get; }
    public abstract virtual bool get_IsPending();
}
public class Apache.NMS.ActiveMQ.Threads.CompositeTaskRunner : object {
    private Mutex mutex;
    private Thread theThread;
    private AsyncLocal`1<bool> workExecutionContextCurrentlyProcessing;
    private LinkedList`1<CompositeTask> tasks;
    private bool terminated;
    private bool pending;
    private bool shutdown;
    private string name;
    public CompositeTaskRunner(string name);
    public void AddTask(CompositeTask task);
    public void RemoveTask(CompositeTask task);
    public sealed virtual void Shutdown(TimeSpan timeout);
    public sealed virtual void Shutdown();
    public sealed virtual void ShutdownWithAbort(TimeSpan timeout);
    public sealed virtual void Wakeup();
    internal void Run();
    private bool Iterate();
}
public class Apache.NMS.ActiveMQ.Threads.DedicatedTaskRunner : object {
    private Mutex mutex;
    private Thread theThread;
    private AsyncLocal`1<bool> workExecutionContextCurrentlyProcessing;
    private Task task;
    private bool terminated;
    private bool pending;
    private bool shutdown;
    public DedicatedTaskRunner(Task task);
    public DedicatedTaskRunner(Task task, string taskName, ThreadPriority taskPriority);
    public sealed virtual void Shutdown(TimeSpan timeout);
    public sealed virtual void Shutdown();
    public sealed virtual void ShutdownWithAbort(TimeSpan timeout);
    public sealed virtual void Wakeup();
    internal void Run();
}
public class Apache.NMS.ActiveMQ.Threads.DefaultThreadPools : object {
    private static TaskRunnerFactory taskRunnerFactory;
    public static TaskRunnerFactory DefaultTaskRunnerFactory { get; }
    private static DefaultThreadPools();
    public static TaskRunnerFactory get_DefaultTaskRunnerFactory();
}
internal class Apache.NMS.ActiveMQ.Threads.PooledTaskRunner : object {
    private int maxIterationsPerRun;
    private Task task;
    private object runable;
    private bool queued;
    private bool _shutdown;
    private bool iterating;
    private AsyncLocal`1<bool> workExecutionContextCurrentlyProcessing;
    private Thread modreq(System.Runtime.CompilerServices.IsVolatile) runningThread;
    public PooledTaskRunner(Task task, int maxIterationsPerRun);
    public void Run(object o);
    public sealed virtual void Wakeup();
    public sealed virtual void Shutdown(TimeSpan timeout);
    public sealed virtual void ShutdownWithAbort(TimeSpan timeout);
    public sealed virtual void Shutdown();
    internal void RunTask();
}
public class Apache.NMS.ActiveMQ.Threads.Scheduler : object {
    private object syncRoot;
    private string name;
    private TimerEx timer;
    private Dictionary`2<object, TimerTask> timerTasks;
    private bool started;
    public string Name { get; }
    public bool Started { get; }
    public Scheduler(string name);
    public void ExecutePeriodically(WaitCallback task, object arg, int period);
    public void ExecutePeriodically(WaitCallback task, object arg, TimeSpan period);
    public void ExecuteAfterDelay(WaitCallback task, object arg, int delay);
    public void ExecuteAfterDelay(WaitCallback task, object arg, TimeSpan delay);
    public void Cancel(object task);
    public void Start();
    public void Stop();
    public string get_Name();
    public bool get_Started();
    public virtual string ToString();
    private void CheckStarted();
}
public interface Apache.NMS.ActiveMQ.Threads.Task {
    public abstract virtual bool Iterate();
}
public interface Apache.NMS.ActiveMQ.Threads.TaskRunner {
    public abstract virtual void Wakeup();
    public abstract virtual void Shutdown();
    public abstract virtual void Shutdown(TimeSpan timeout);
    public abstract virtual void ShutdownWithAbort(TimeSpan timeout);
}
public class Apache.NMS.ActiveMQ.Threads.TaskRunnerFactory : object {
    public string name;
    public ThreadPriority priority;
    public int maxIterationsPerRun;
    public bool dedicatedTaskRunner;
    public TaskRunner CreateTaskRunner(Task task);
    public TaskRunner CreateTaskRunner(Task task, string name);
    public TaskRunner CreateTaskRunner(Task task, string name, ThreadPriority taskPriority);
}
public class Apache.NMS.ActiveMQ.Threads.ThreadPoolExecutor : object {
    private Queue`1<Future> workQueue;
    private Mutex syncRoot;
    private bool running;
    private bool closing;
    private bool closed;
    private ManualResetEvent executionComplete;
    private AsyncLocal`1<bool> workExecutionContextCurrentlyProcessing;
    public bool IsShutdown { get; }
    public bool IsTerminated { get; }
    public void QueueUserWorkItem(WaitCallback worker);
    public void QueueUserWorkItem(WaitCallback worker, object arg);
    public bool get_IsShutdown();
    public bool get_IsTerminated();
    public void Shutdown();
    public bool AwaitTermination(TimeSpan timeout);
    private void QueueProcessor(object unused);
}
public class Apache.NMS.ActiveMQ.Threads.TimerEx : object {
    private static long timerId;
    private TimerImpl impl;
    private DisposeHelper disposal;
    public TimerEx(string name, bool isBackground);
    public TimerEx(string name);
    public TimerEx(bool isBackground);
    private static long NextId();
    public void Cancel();
    public int Purge();
    public virtual string ToString();
    public TimerTask Schedule(WaitCallback callback, object arg, DateTime when);
    public TimerTask Schedule(WaitCallback callback, object arg, int delay);
    public TimerTask Schedule(WaitCallback callback, object arg, TimeSpan delay);
    public TimerTask Schedule(WaitCallback callback, object arg, int delay, int period);
    public TimerTask Schedule(WaitCallback callback, object arg, TimeSpan delay, TimeSpan period);
    public TimerTask Schedule(WaitCallback callback, object arg, DateTime when, int period);
    public TimerTask Schedule(WaitCallback callback, object arg, DateTime when, TimeSpan period);
    public TimerTask ScheduleAtFixedRate(WaitCallback callback, object arg, int delay, int period);
    public TimerTask ScheduleAtFixedRate(WaitCallback callback, object arg, TimeSpan delay, TimeSpan period);
    public TimerTask ScheduleAtFixedRate(WaitCallback callback, object arg, DateTime when, int period);
    public TimerTask ScheduleAtFixedRate(WaitCallback callback, object arg, DateTime when, TimeSpan period);
    public void Schedule(TimerTask task, DateTime when);
    public void Schedule(TimerTask task, int delay);
    public void Schedule(TimerTask task, TimeSpan delay);
    public void Schedule(TimerTask task, int delay, int period);
    public void Schedule(TimerTask task, TimeSpan delay, TimeSpan period);
    public void Schedule(TimerTask task, DateTime when, int period);
    public void Schedule(TimerTask task, DateTime when, TimeSpan period);
    public void ScheduleAtFixedRate(TimerTask task, int delay, int period);
    public void ScheduleAtFixedRate(TimerTask task, TimeSpan delay, TimeSpan period);
    public void ScheduleAtFixedRate(TimerTask task, DateTime when, int period);
    public void ScheduleAtFixedRate(TimerTask task, DateTime when, TimeSpan period);
    private void DoScheduleImpl(TimerTask task, TimeSpan delay, TimeSpan period, bool fixedRate);
}
public abstract class Apache.NMS.ActiveMQ.Threads.TimerTask : object {
    internal object syncRoot;
    internal DateTime when;
    internal DateTime scheduledTime;
    internal TimeSpan period;
    internal bool cancelled;
    internal bool fixedRate;
    public DateTime ScheduledExecutionTime { get; }
    internal DateTime When { get; }
    unknown DateTime ScheduledTime {internal set; }
    internal bool IsScheduled { get; }
    public bool Cancel();
    public DateTime get_ScheduledExecutionTime();
    public abstract virtual void Run();
    internal DateTime get_When();
    internal void set_ScheduledTime(DateTime value);
    internal bool get_IsScheduled();
}
public class Apache.NMS.ActiveMQ.TransactionContext : object {
    protected Session session;
    protected Connection connection;
    protected ArrayList synchronizations;
    [CompilerGeneratedAttribute]
private TransactionId <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionTxEventDelegate TransactionStartedListener;
    [CompilerGeneratedAttribute]
private SessionTxEventDelegate TransactionCommittedListener;
    [CompilerGeneratedAttribute]
private SessionTxEventDelegate TransactionRolledBackListener;
    public bool InTransaction { get; }
    public bool InLocalTransaction { get; }
    public TransactionId TransactionId { get; protected set; }
    public TransactionContext(Session session);
    public bool get_InTransaction();
    public virtual bool get_InLocalTransaction();
    [CompilerGeneratedAttribute]
public TransactionId get_TransactionId();
    [CompilerGeneratedAttribute]
protected void set_TransactionId(TransactionId value);
    public void AddSynchronization(ISynchronization synchronization);
    public void RemoveSynchronization(ISynchronization synchronization);
    public virtual void Begin();
    public virtual void Rollback();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.TransactionContext/<RollbackAsync>d__16")]
public virtual Task RollbackAsync();
    public virtual void Commit();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.TransactionContext/<CommitAsync>d__18")]
public virtual Task CommitAsync();
    internal Task BeforeEndAsync();
    internal void AfterCommit();
    internal void AfterRollback();
    [CompilerGeneratedAttribute]
public void add_TransactionStartedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public void remove_TransactionStartedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public void add_TransactionCommittedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public void remove_TransactionCommittedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public void add_TransactionRolledBackListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public void remove_TransactionRolledBackListener(SessionTxEventDelegate value);
    protected void SignalTransactionStarted();
    protected void SignalTransactionCommitted();
    protected void SignalTransactionRolledBack();
}
public interface Apache.NMS.ActiveMQ.Transactions.IRecoveryLogger {
    public string LoggerType { get; }
    public string ResourceManagerId { get; }
    public abstract virtual void Initialize(string resourceManagerId);
    public abstract virtual void LogRecoveryInfo(XATransactionId xid, Byte[] recoveryInformation);
    public abstract virtual KeyValuePair`2[] GetRecoverables();
    public abstract virtual void LogRecovered(XATransactionId xid);
    public abstract virtual string get_LoggerType();
    public abstract virtual string get_ResourceManagerId();
    public abstract virtual void Purge();
}
public interface Apache.NMS.ActiveMQ.Transactions.IRecoveryLoggerFactory {
    public abstract virtual IRecoveryLogger Create();
}
public class Apache.NMS.ActiveMQ.Transactions.RecoveryFileLogger : object {
    private object syncRoot;
    private string location;
    private bool autoCreateLocation;
    private string resourceManagerId;
    public string ResourceManagerId { get; }
    public string Location { get; public set; }
    public bool AutoCreateLocation { get; public set; }
    public string LoggerType { get; }
    public sealed virtual string get_ResourceManagerId();
    public string get_Location();
    public void set_Location(string value);
    public bool get_AutoCreateLocation();
    public void set_AutoCreateLocation(bool value);
    public sealed virtual void Initialize(string resourceManagerId);
    public sealed virtual void LogRecoveryInfo(XATransactionId xid, Byte[] recoveryInformation);
    public sealed virtual KeyValuePair`2[] GetRecoverables();
    public sealed virtual void LogRecovered(XATransactionId xid);
    public sealed virtual void Purge();
    private IEnumerable`1<string> GetFilesForResourceManagerId();
    public sealed virtual string get_LoggerType();
    private string CreateFilename(XATransactionId xaTransactionId);
    private static string GetHexValue(XATransactionId xid);
    private IList`1<RecoveryInformation> TryOpenRecoveryInfoFile();
}
[RecoveryLoggerFactoryAttribute("file")]
public class Apache.NMS.ActiveMQ.Transactions.RecoveryFileLoggerFactory : object {
    public sealed virtual IRecoveryLogger Create();
}
public class Apache.NMS.ActiveMQ.Transactions.RecoveryLoggerFactoryAttribute : FactoryAttribute {
    public RecoveryLoggerFactoryAttribute(string scheme);
}
public enum Apache.NMS.ActiveMQ.TransactionType : Enum {
    public int value__;
    public static TransactionType Begin;
    public static TransactionType Prepare;
    public static TransactionType CommitOnePhase;
    public static TransactionType CommitTwoPhase;
    public static TransactionType Rollback;
    public static TransactionType Recover;
    public static TransactionType Forget;
    public static TransactionType End;
}
public class Apache.NMS.ActiveMQ.Transport.ActiveMQTransportFactoryAttribute : FactoryAttribute {
    public ActiveMQTransportFactoryAttribute(string scheme);
}
public class Apache.NMS.ActiveMQ.Transport.CommandHandlerAsync : MulticastDelegate {
    public CommandHandlerAsync(object object, IntPtr method);
    public virtual Task Invoke(ITransport sender, Command command);
    public virtual IAsyncResult BeginInvoke(ITransport sender, Command command, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public abstract class Apache.NMS.ActiveMQ.Transport.Discovery.AbstractDiscoveryAgent : object {
    public static int DEFAULT_INITIAL_RECONNECT_DELAY;
    public static int DEFAULT_BACKOFF_MULTIPLIER;
    public static int DEFAULT_MAX_RECONNECT_DELAY;
    private static int WORKER_KILL_TIME_SECONDS;
    private static int HEARTBEAT_MISS_BEFORE_DEATH;
    private long initialReconnectDelay;
    private long maxReconnectDelay;
    private long backOffMultiplier;
    private bool useExponentialBackOff;
    private int maxReconnectAttempts;
    protected Atomic`1<bool> started;
    protected Thread worker;
    protected ThreadPoolExecutor executor;
    protected Dictionary`2<string, DiscoveredServiceData> discoveredServices;
    protected object discoveredServicesLock;
    private Uri discoveryUri;
    private string selfService;
    private string group;
    private ServiceAddHandler serviceAddHandler;
    private ServiceRemoveHandler serviceRemoveHandler;
    private DateTime lastAdvertizeTime;
    private bool reportAdvertizeFailed;
    internal string SelfService { get; }
    internal DateTime LastAdvertizeTime { get; internal set; }
    public long BackOffMultiplier { get; public set; }
    public long InitialReconnectDelay { get; public set; }
    public int MaxReconnectAttempts { get; public set; }
    public long MaxReconnectDelay { get; public set; }
    public bool UseExponentialBackOff { get; public set; }
    public string Group { get; public set; }
    public ServiceAddHandler ServiceAdd { get; public set; }
    public ServiceRemoveHandler ServiceRemove { get; public set; }
    public Uri DiscoveryURI { get; public set; }
    public bool IsStarted { get; }
    public long KeepAliveInterval { get; public set; }
    internal string get_SelfService();
    internal DateTime get_LastAdvertizeTime();
    internal void set_LastAdvertizeTime(DateTime value);
    public long get_BackOffMultiplier();
    public void set_BackOffMultiplier(long value);
    public long get_InitialReconnectDelay();
    public void set_InitialReconnectDelay(long value);
    public int get_MaxReconnectAttempts();
    public void set_MaxReconnectAttempts(int value);
    public long get_MaxReconnectDelay();
    public void set_MaxReconnectDelay(long value);
    public bool get_UseExponentialBackOff();
    public void set_UseExponentialBackOff(bool value);
    public string get_Group();
    public void set_Group(string value);
    public sealed virtual ServiceAddHandler get_ServiceAdd();
    public sealed virtual void set_ServiceAdd(ServiceAddHandler value);
    public sealed virtual ServiceRemoveHandler get_ServiceRemove();
    public sealed virtual void set_ServiceRemove(ServiceRemoveHandler value);
    public Uri get_DiscoveryURI();
    public void set_DiscoveryURI(Uri value);
    public sealed virtual bool get_IsStarted();
    public abstract virtual long get_KeepAliveInterval();
    public abstract virtual void set_KeepAliveInterval(long value);
    protected abstract virtual void DoAdvertizeSelf();
    protected abstract virtual void DoStartAgent();
    protected abstract virtual void DoStopAgent();
    protected abstract virtual void DoDiscovery();
    public sealed virtual Task StartAsync();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual Task StopAsync();
    public sealed virtual void Dispose();
    public sealed virtual void RegisterService(string name);
    public sealed virtual void ServiceFailed(DiscoveryEvent failedEvent);
    protected void FireServiceRemoveEvent(DiscoveryEvent data);
    private void ServiceRemoveCallback(object data);
    protected void FireServiceAddEvent(DiscoveryEvent data);
    private void ServiceAddCallback(object data);
    private void DiscoveryAgentRun();
    private void DoTimeKeepingServices();
    private void DoExpireOldServices();
    protected void ProcessLiveService(string brokerName, string service);
    protected void ProcessDeadService(string service);
    public bool IsTimeForRecovery(DiscoveredServiceData service);
    internal void UpdateHeartBeat(DiscoveredServiceData service);
    internal bool MarkFailed(DiscoveredServiceData service);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.ActiveMQDiscoveryAgentFactoryAttribute : FactoryAttribute {
    public ActiveMQDiscoveryAgentFactoryAttribute(string scheme);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.DiscoveredServiceData : DiscoveryEvent {
    private DateTime recoveryTime;
    private int failureCount;
    private bool failed;
    private DateTime lastHeartBeat;
    private object syncRoot;
    internal object SyncRoot { get; }
    internal bool Failed { get; internal set; }
    internal int FailureCount { get; internal set; }
    internal DateTime LastHeartBeat { get; internal set; }
    internal DateTime RecoveryTime { get; internal set; }
    public DiscoveredServiceData(string brokerName, string serviceName);
    public DiscoveredServiceData(string serviceName);
    internal object get_SyncRoot();
    internal bool get_Failed();
    internal void set_Failed(bool value);
    internal int get_FailureCount();
    internal void set_FailureCount(int value);
    internal DateTime get_LastHeartBeat();
    internal void set_LastHeartBeat(DateTime value);
    internal DateTime get_RecoveryTime();
    internal void set_RecoveryTime(DateTime value);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.DiscoveryAgentFactory : object {
    private static FactoryFinder`2<ActiveMQDiscoveryAgentFactoryAttribute, ITransportFactory> FACTORY_FINDER;
    private static object AGENT_FACTORY_TYPES_LOCK;
    private static Dictionary`2<string, Type> AGENT_FACTORY_TYPES;
    private static DiscoveryAgentFactory();
    public void RegisterAgentFactory(string scheme, Type factoryType);
    public static IDiscoveryAgent CreateAgent(Uri location);
    private static IDiscoveryAgentFactory CreateAgentFactory(Uri location);
    private static IDiscoveryAgentFactory NewInstance(string scheme);
    private static Type FindAgentFactory(string scheme);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.DiscoveryTransport : TransportFilter {
    public static string DISCOVERED_OPTION_PREFIX;
    private ICompositeTransport next;
    private object syncRoot;
    private Dictionary`2<string, Uri> serviceURIs;
    private IDiscoveryAgent discoveryAgent;
    private StringDictionary properties;
    public IDiscoveryAgent DiscoveryAgent { get; public set; }
    public StringDictionary Properties { get; public set; }
    public DiscoveryTransport(ICompositeTransport next);
    public IDiscoveryAgent get_DiscoveryAgent();
    public void set_DiscoveryAgent(IDiscoveryAgent value);
    public StringDictionary get_Properties();
    public void set_Properties(StringDictionary value);
    public virtual void Start();
    public virtual void Stop();
    private void OnServiceAdded(DiscoveryEvent addEvent);
    private void OnServiceRemoved(DiscoveryEvent removeEvent);
    private void TransportResumed(ITransport sender);
    private void TransportInterrupted(ITransport sender);
    private static Uri ApplyParameters(Uri uri, StringDictionary queryParameters, string optionPrefix);
}
[ActiveMQTransportFactoryAttribute("discovery")]
public class Apache.NMS.ActiveMQ.Transport.Discovery.DiscoveryTransportFactory : FailoverTransportFactory {
    public virtual ITransport CreateTransport(CompositeData compositData);
    public static DiscoveryTransport CreateTransport(ICompositeTransport compositeTransport, CompositeData compositeData, StringDictionary options);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.Http.HttpDiscoveryAgent : AbstractDiscoveryAgent {
    public static string DEFAULT_DISCOVERY_URI_STRING;
    public static string DEFAULT_GROUP;
    private object updateMutex;
    private UpdateState state;
    private static int DEFAULT_UPDATE_INTERVAL;
    private long keepAliveInterval;
    public long KeepAliveInterval { get; public set; }
    public virtual long get_KeepAliveInterval();
    public virtual void set_KeepAliveInterval(long value);
    public virtual string ToString();
    protected virtual void DoStartAgent();
    protected virtual void DoStopAgent();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    protected virtual void DoDiscovery();
    private void DoUpdate();
    private List`1<string> DoLookup(long freshness);
    protected virtual void DoAdvertizeSelf();
}
[ActiveMQDiscoveryAgentFactoryAttribute("http")]
public class Apache.NMS.ActiveMQ.Transport.Discovery.Http.HttpDiscoveryAgentFactory : object {
    public sealed virtual IDiscoveryAgent CreateAgent(Uri uri);
}
public interface Apache.NMS.ActiveMQ.Transport.Discovery.IDiscoveryAgent {
    public ServiceAddHandler ServiceAdd { get; public set; }
    public ServiceRemoveHandler ServiceRemove { get; public set; }
    public abstract virtual ServiceAddHandler get_ServiceAdd();
    public abstract virtual void set_ServiceAdd(ServiceAddHandler value);
    public abstract virtual ServiceRemoveHandler get_ServiceRemove();
    public abstract virtual void set_ServiceRemove(ServiceRemoveHandler value);
    public abstract virtual void RegisterService(string name);
    public abstract virtual void ServiceFailed(DiscoveryEvent failedEvent);
}
public interface Apache.NMS.ActiveMQ.Transport.Discovery.IDiscoveryAgentFactory {
    public abstract virtual IDiscoveryAgent CreateAgent(Uri uri);
}
internal class Apache.NMS.ActiveMQ.Transport.Discovery.Multicast.MulticastDiscoveryAgent : AbstractDiscoveryAgent {
    public static string DEFAULT_DISCOVERY_URI_STRING;
    public static string DEFAULT_HOST_STR;
    public static string DEFAULT_HOST_IP;
    public static int DEFAULT_PORT;
    private static string TYPE_SUFFIX;
    private static string ALIVE;
    private static string DEAD;
    private static char DELIMITER;
    private static int BUFF_SIZE;
    private static int DEFAULT_IDLE_TIME;
    private static string DEFAULT_GROUP;
    private static int MAX_SOCKET_CONNECTION_RETRY_ATTEMPS;
    private static int SOCKET_CONNECTION_BACKOFF_TIME;
    private int timeToLive;
    private string group;
    private bool loopBackMode;
    private long keepAliveInterval;
    private string mcInterface;
    private string mcNetworkInterface;
    private string mcJoinNetworkInterface;
    private Socket multicastSocket;
    private IPEndPoint endPoint;
    public bool LoopBackMode { get; public set; }
    public int TimeToLive { get; public set; }
    public string Interface { get; public set; }
    public string NetworkInterface { get; public set; }
    public string JoinNetworkInterface { get; public set; }
    public string Type { get; }
    public long KeepAliveInterval { get; public set; }
    public bool get_LoopBackMode();
    public void set_LoopBackMode(bool value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    public string get_Interface();
    public void set_Interface(string value);
    public string get_NetworkInterface();
    public void set_NetworkInterface(string value);
    public string get_JoinNetworkInterface();
    public void set_JoinNetworkInterface(string value);
    public string get_Type();
    public virtual long get_KeepAliveInterval();
    public virtual void set_KeepAliveInterval(long value);
    public virtual string ToString();
    protected virtual void DoStartAgent();
    protected virtual void DoStopAgent();
    private bool TryToConnectSocket(string targetHost, int targetPort);
    protected virtual void DoDiscovery();
    protected virtual void DoAdvertizeSelf();
    private void ProcessServiceAdvertisement(string message);
    private static string GetBrokerName(string payload);
    private static string GetServiceName(string payload);
}
[ActiveMQDiscoveryAgentFactoryAttribute("multicast")]
public class Apache.NMS.ActiveMQ.Transport.Discovery.Multicast.MulticastDiscoveryAgentFactory : object {
    public sealed virtual IDiscoveryAgent CreateAgent(Uri uri);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.ServiceAddHandler : MulticastDelegate {
    public ServiceAddHandler(object object, IntPtr method);
    public virtual void Invoke(DiscoveryEvent addEvent);
    public virtual IAsyncResult BeginInvoke(DiscoveryEvent addEvent, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ActiveMQ.Transport.Discovery.ServiceRemoveHandler : MulticastDelegate {
    public ServiceRemoveHandler(object object, IntPtr method);
    public virtual void Invoke(DiscoveryEvent removeEvent);
    public virtual IAsyncResult BeginInvoke(DiscoveryEvent removeEvent, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ActiveMQ.Transport.ExceptionHandler : MulticastDelegate {
    public ExceptionHandler(object object, IntPtr method);
    public virtual void Invoke(ITransport sender, Exception command);
    public virtual IAsyncResult BeginInvoke(ITransport sender, Exception command, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Apache.NMS.ActiveMQ.Transport.Failover.BackupTransport : object {
    private FailoverTransport failoverTransport;
    private ITransport transport;
    private Uri uri;
    private bool disposed;
    public ITransport Transport { get; public set; }
    public Uri Uri { get; public set; }
    public bool Disposed { get; public set; }
    public BackupTransport(FailoverTransport ft);
    public Task OnCommand(ITransport t, Command c);
    public void OnException(ITransport t, Exception error);
    public ITransport get_Transport();
    public void set_Transport(ITransport value);
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public bool get_Disposed();
    public void set_Disposed(bool value);
    public int hashCode();
    public bool equals(object obj);
}
public class Apache.NMS.ActiveMQ.Transport.Failover.FailoverTransport : object {
    private static int DEFAULT_INITIAL_RECONNECT_DELAY;
    private static int INFINITE;
    private static int idCounter;
    private int id;
    private bool disposed;
    private bool connected;
    private List`1<Uri> uris;
    private List`1<Uri> updated;
    private CommandHandlerAsync commandHandlerAsync;
    private ExceptionHandler exceptionHandler;
    private InterruptedHandler interruptedHandler;
    private ResumedHandler resumedHandler;
    private CountDownLatch listenerLatch;
    private Mutex reconnectMutex;
    private Mutex backupMutex;
    private Mutex sleepMutex;
    private ConnectionStateTracker stateTracker;
    private Dictionary`2<int, Command> requestMap;
    private Uri connectedTransportURI;
    private Uri failedConnectTransportURI;
    private AtomicReference`1<ITransport> connectedTransport;
    private TaskRunner reconnectTask;
    private bool started;
    private bool initialized;
    private int initialReconnectDelay;
    private int maxReconnectDelay;
    private int backOffMultiplier;
    private int timeout;
    private bool useExponentialBackOff;
    private bool randomize;
    private int maxReconnectAttempts;
    private int startupMaxReconnectAttempts;
    private int connectFailures;
    private int reconnectDelay;
    private Exception connectionFailure;
    private bool firstConnection;
    private bool backup;
    private List`1<BackupTransport> backups;
    private int backupPoolSize;
    private bool trackMessages;
    private bool trackTransactionProducers;
    private int maxCacheSize;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) failure;
    private object mutex;
    private bool reconnectSupported;
    private bool updateURIsSupported;
    private bool doRebalance;
    private bool connectedToPriority;
    private bool priorityBackup;
    private List`1<Uri> priorityList;
    private bool priorityBackupAvailable;
    private string sslProtocol;
    public CommandHandlerAsync CommandAsync { get; public set; }
    public ExceptionHandler Exception { get; public set; }
    public InterruptedHandler Interrupted { get; public set; }
    public ResumedHandler Resumed { get; public set; }
    internal Exception Failure { get; internal set; }
    public int Timeout { get; public set; }
    public int InitialReconnectDelay { get; public set; }
    public int MaxReconnectDelay { get; public set; }
    public int ReconnectDelay { get; public set; }
    public int ReconnectDelayExponent { get; public set; }
    public ITransport ConnectedTransport { get; public set; }
    public Uri ConnectedTransportURI { get; public set; }
    public int MaxReconnectAttempts { get; public set; }
    public int StartupMaxReconnectAttempts { get; public set; }
    public bool Randomize { get; public set; }
    public bool Backup { get; public set; }
    public bool PriorityBackup { get; public set; }
    public string PriorityURIs { get; public set; }
    public int BackupPoolSize { get; public set; }
    public bool TrackMessages { get; public set; }
    public bool TrackTransactionProducers { get; public set; }
    public int MaxCacheSize { get; public set; }
    public bool UseExponentialBackOff { get; public set; }
    public IWireFormat WireFormat { get; }
    unknown bool AsyncConnect {public set; }
    public int AsyncTimeout { get; public set; }
    public ConnectionStateTracker StateTracker { get; }
    public bool IsFaultTolerant { get; }
    public bool IsDisposed { get; }
    public bool IsConnected { get; }
    public bool IsConnectedToPriority { get; }
    public bool IsStarted { get; }
    public bool IsReconnectSupported { get; }
    public bool IsUpdateURIsSupported { get; }
    private List`1<Uri> ConnectList { get; }
    public Uri RemoteAddress { get; }
    private static FailoverTransport();
    protected virtual override void Finalize();
    public sealed virtual CommandHandlerAsync get_CommandAsync();
    public sealed virtual void set_CommandAsync(CommandHandlerAsync value);
    public sealed virtual ExceptionHandler get_Exception();
    public sealed virtual void set_Exception(ExceptionHandler value);
    public sealed virtual InterruptedHandler get_Interrupted();
    public sealed virtual void set_Interrupted(InterruptedHandler value);
    public sealed virtual ResumedHandler get_Resumed();
    public sealed virtual void set_Resumed(ResumedHandler value);
    internal Exception get_Failure();
    internal void set_Failure(Exception value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public int get_InitialReconnectDelay();
    public void set_InitialReconnectDelay(int value);
    public int get_MaxReconnectDelay();
    public void set_MaxReconnectDelay(int value);
    public int get_ReconnectDelay();
    public void set_ReconnectDelay(int value);
    public int get_ReconnectDelayExponent();
    public void set_ReconnectDelayExponent(int value);
    public ITransport get_ConnectedTransport();
    public void set_ConnectedTransport(ITransport value);
    public Uri get_ConnectedTransportURI();
    public void set_ConnectedTransportURI(Uri value);
    public int get_MaxReconnectAttempts();
    public void set_MaxReconnectAttempts(int value);
    public int get_StartupMaxReconnectAttempts();
    public void set_StartupMaxReconnectAttempts(int value);
    public bool get_Randomize();
    public void set_Randomize(bool value);
    public bool get_Backup();
    public void set_Backup(bool value);
    public bool get_PriorityBackup();
    public void set_PriorityBackup(bool value);
    public string get_PriorityURIs();
    public void set_PriorityURIs(string value);
    public int get_BackupPoolSize();
    public void set_BackupPoolSize(int value);
    public bool get_TrackMessages();
    public void set_TrackMessages(bool value);
    public bool get_TrackTransactionProducers();
    public void set_TrackTransactionProducers(bool value);
    public int get_MaxCacheSize();
    public void set_MaxCacheSize(int value);
    public bool get_UseExponentialBackOff();
    public void set_UseExponentialBackOff(bool value);
    public sealed virtual IWireFormat get_WireFormat();
    public void set_AsyncConnect(bool value);
    public sealed virtual int get_AsyncTimeout();
    public sealed virtual void set_AsyncTimeout(int value);
    public ConnectionStateTracker get_StateTracker();
    public sealed virtual bool get_IsFaultTolerant();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual bool get_IsConnected();
    public bool get_IsConnectedToPriority();
    public sealed virtual Task StartAsync();
    public sealed virtual bool get_IsStarted();
    public sealed virtual bool get_IsReconnectSupported();
    public sealed virtual bool get_IsUpdateURIsSupported();
    public void OnException(ITransport sender, Exception error);
    public Task DisposedOnCommand(ITransport sender, Command c);
    public void DisposedOnException(ITransport sender, Exception e);
    public void HandleTransportFailure(Exception e);
    private bool CanReconnect();
    public sealed virtual void Start();
    public virtual void Stop();
    public sealed virtual Task StopAsync();
    public sealed virtual FutureResponse AsyncRequest(Command command);
    public sealed virtual Task`1<Response> RequestAsync(Command command);
    public sealed virtual Task`1<Response> RequestAsync(Command command, TimeSpan ts);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Transport.Failover.FailoverTransport/<OnCommand>d__159")]
public Task OnCommand(ITransport sender, Command command);
    public sealed virtual void Oneway(Command command);
    public sealed virtual void Add(bool rebalance, Uri[] urisToAdd);
    public void Add(bool rebalance, string u);
    public sealed virtual void Remove(bool rebalance, Uri[] u);
    public void Remove(bool rebalance, string u);
    public void Reconnect(Uri uri);
    public void Reconnect(bool rebalance);
    private List`1<Uri> get_ConnectList();
    protected void RestoreTransport(ITransport t);
    public sealed virtual Uri get_RemoteAddress();
    public sealed virtual object Narrow(Type type);
    private bool DoConnect();
    private bool BuildBackups();
    public void ConnectionInterruptProcessingComplete(ConnectionId connectionId);
    public sealed virtual void UpdateURIs(bool rebalance, Uri[] updatedURIs);
    public void HandleConnectionControl(ConnectionControl control);
    private void ProcessNewTransports(bool rebalance, string newTransports);
    private void ProcessDelimitedUriList(string priorityUris, List`1<Uri> target);
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
    public sealed virtual int CompareTo(object o);
    public virtual string ToString();
    internal bool IsPriority(Uri uri);
    public void DisposeTransport(ITransport transport);
    private void ResetReconnectDelay();
    private void DoDelay();
    private void PropagateFailureToExceptionListener(Exception exception);
    private int CalculateReconnectAttemptLimit();
    public void Shuffle(List`1<T> list);
    private string PrintableUriList(List`1<Uri> uriList);
    private bool CompareUris(Uri first, Uri second);
    private bool Contains(Uri newURI);
}
[ActiveMQTransportFactoryAttribute("failover")]
public class Apache.NMS.ActiveMQ.Transport.Failover.FailoverTransportFactory : object {
    private ITransport doConnect(Uri location);
    public sealed virtual ITransport CompositeConnect(Uri location);
    public sealed virtual ITransport CreateTransport(Uri location);
    public virtual ITransport CreateTransport(CompositeData compositData);
    protected FailoverTransport CreateTransport(StringDictionary parameters);
}
public class Apache.NMS.ActiveMQ.Transport.FutureResponse : TaskCompletionSource`1<Response> {
    unknown Response Response {public set; }
    public void set_Response(Response value);
}
public interface Apache.NMS.ActiveMQ.Transport.ICompositeTransport {
    public abstract virtual void Add(bool rebalance, Uri[] uris);
    public abstract virtual void Remove(bool rebalance, Uri[] uris);
}
public class Apache.NMS.ActiveMQ.Transport.InactivityMonitor : TransportFilter {
    private Atomic`1<bool> monitorStarted;
    private Atomic`1<bool> commandSent;
    private Atomic`1<bool> commandReceived;
    private Atomic`1<bool> failed;
    private Atomic`1<bool> inRead;
    private Atomic`1<bool> inWrite;
    private CompositeTaskRunner asyncTasks;
    private AsyncSignalReadErrorkTask asyncErrorTask;
    private AsyncWriteTask asyncWriteTask;
    private Mutex monitor;
    private Timer connectionCheckTimer;
    private DateTime lastReadCheckTime;
    private static int id;
    private int instanceId;
    private bool disposing;
    private long readCheckTime;
    private long writeCheckTime;
    private long initialDelayTime;
    private Atomic`1<bool> keepAliveResponseRequired;
    private WireFormatInfo localWireFormatInfo;
    private WireFormatInfo remoteWireFormatInfo;
    public long ReadCheckTime { get; public set; }
    public long WriteCheckTime { get; public set; }
    public long InitialDelayTime { get; public set; }
    public bool KeepAliveResponseRequired { get; public set; }
    public InactivityMonitor(ITransport next);
    public long get_ReadCheckTime();
    public void set_ReadCheckTime(long value);
    public long get_WriteCheckTime();
    public void set_WriteCheckTime(long value);
    public long get_InitialDelayTime();
    public void set_InitialDelayTime(long value);
    public bool get_KeepAliveResponseRequired();
    public void set_KeepAliveResponseRequired(bool value);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public void CheckConnection(object state);
    public void WriteCheck();
    public void ReadCheck();
    public bool AllowReadCheck(TimeSpan elapsed);
    public virtual void Stop();
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Transport.InactivityMonitor/<OnCommand>d__41")]
protected virtual Task OnCommand(ITransport sender, Command command);
    public virtual void Oneway(Command command);
    protected virtual void OnException(ITransport sender, Exception command);
    private void StartMonitorThreads();
    private void StopMonitorThreads();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ITransport sender, Command command);
}
public class Apache.NMS.ActiveMQ.Transport.InterruptedHandler : MulticastDelegate {
    public InterruptedHandler(object object, IntPtr method);
    public virtual void Invoke(ITransport sender);
    public virtual IAsyncResult BeginInvoke(ITransport sender, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface Apache.NMS.ActiveMQ.Transport.ITransport {
    public int Timeout { get; public set; }
    public int AsyncTimeout { get; public set; }
    public CommandHandlerAsync CommandAsync { get; public set; }
    public ExceptionHandler Exception { get; public set; }
    public InterruptedHandler Interrupted { get; public set; }
    public ResumedHandler Resumed { get; public set; }
    public bool IsDisposed { get; }
    public bool IsFaultTolerant { get; }
    public bool IsConnected { get; }
    public Uri RemoteAddress { get; }
    public bool IsReconnectSupported { get; }
    public bool IsUpdateURIsSupported { get; }
    public IWireFormat WireFormat { get; }
    public abstract virtual void Oneway(Command command);
    public abstract virtual FutureResponse AsyncRequest(Command command);
    public abstract virtual Task`1<Response> RequestAsync(Command command);
    public abstract virtual Task`1<Response> RequestAsync(Command command, TimeSpan timeout);
    public abstract virtual object Narrow(Type type);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual int get_AsyncTimeout();
    public abstract virtual void set_AsyncTimeout(int value);
    public abstract virtual CommandHandlerAsync get_CommandAsync();
    public abstract virtual void set_CommandAsync(CommandHandlerAsync value);
    public abstract virtual ExceptionHandler get_Exception();
    public abstract virtual void set_Exception(ExceptionHandler value);
    public abstract virtual InterruptedHandler get_Interrupted();
    public abstract virtual void set_Interrupted(InterruptedHandler value);
    public abstract virtual ResumedHandler get_Resumed();
    public abstract virtual void set_Resumed(ResumedHandler value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_IsFaultTolerant();
    public abstract virtual bool get_IsConnected();
    public abstract virtual Uri get_RemoteAddress();
    public abstract virtual bool get_IsReconnectSupported();
    public abstract virtual bool get_IsUpdateURIsSupported();
    public abstract virtual void UpdateURIs(bool rebalance, Uri[] updatedURIs);
    public abstract virtual IWireFormat get_WireFormat();
}
public interface Apache.NMS.ActiveMQ.Transport.ITransportFactory {
    public abstract virtual ITransport CreateTransport(Uri location);
    public abstract virtual ITransport CompositeConnect(Uri location);
}
public interface Apache.NMS.ActiveMQ.Transport.IWireFormat {
    public ITransport Transport { get; public set; }
    public int Version { get; }
    public abstract virtual void Marshal(object o, BinaryWriter ds);
    public abstract virtual object Unmarshal(BinaryReader dis);
    public abstract virtual ITransport get_Transport();
    public abstract virtual void set_Transport(ITransport value);
    public abstract virtual int get_Version();
}
public class Apache.NMS.ActiveMQ.Transport.LoggingTransport : TransportFilter {
    public LoggingTransport(ITransport next);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Transport.LoggingTransport/<OnCommand>d__1")]
protected virtual Task OnCommand(ITransport sender, Command command);
    protected virtual void OnException(ITransport sender, Exception error);
    public virtual void Oneway(Command command);
}
public interface Apache.NMS.ActiveMQ.Transport.Mock.IResponseBuilder {
    public abstract virtual Response BuildResponse(Command command);
    public abstract virtual List`1<Command> BuildIncomingCommands(Command command);
}
public class Apache.NMS.ActiveMQ.Transport.Mock.MockTransport : object {
    private string name;
    private int timeout;
    private int asynctimeout;
    private bool failOnSendMessage;
    private int numMessagesToRespondTo;
    private int numMessagesRespondedTo;
    private bool respondToMessages;
    private int numSentMessagesBeforeFail;
    private int numSentMessages;
    private bool failOnReceiveMessage;
    private int numReceivedMessagesBeforeFail;
    private int numReceivedMessages;
    private bool failOnKeepAliveInfoSends;
    private int numSentKeepAliveInfosBeforeFail;
    private int numSentKeppAliveInfos;
    private int nextCommandId;
    private Uri connectedUri;
    private CommandHandlerAsync commandHandlerAsync;
    private CommandHandlerAsync outgoingCommandHandlerAsync;
    private ExceptionHandler exceptionHandler;
    private InterruptedHandler interruptedHandler;
    private ResumedHandler resumedHandler;
    private bool disposed;
    private bool started;
    private TaskRunner asyncResponseTask;
    private Queue`1<Command> receiveQueue;
    private IResponseBuilder responseBuilder;
    public string Name { get; public set; }
    public int Timeout { get; public set; }
    public int AsyncTimeout { get; public set; }
    public CommandHandlerAsync CommandAsync { get; public set; }
    public CommandHandlerAsync OutgoingCommand { get; public set; }
    public ExceptionHandler Exception { get; public set; }
    public InterruptedHandler Interrupted { get; public set; }
    public ResumedHandler Resumed { get; public set; }
    public bool IsDisposed { get; }
    public bool IsStarted { get; }
    public bool FailOnSendMessage { get; public set; }
    public int NumSentMessagesBeforeFail { get; public set; }
    public int NumSentMessages { get; public set; }
    public bool FailOnReceiveMessage { get; public set; }
    public int NumReceivedMessagesBeforeFail { get; public set; }
    public int NumReceivedMessages { get; public set; }
    public bool FailOnKeepAliveInfoSends { get; public set; }
    public int NumSentKeepAliveInfosBeforeFail { get; public set; }
    public int NumSentKeppAliveInfos { get; public set; }
    public int NumMessagesToRespondTo { get; public set; }
    public int NumMessagesRespondedTo { get; public set; }
    public bool RespondToMessages { get; public set; }
    public bool IsFaultTolerant { get; }
    public bool IsConnected { get; }
    public Uri RemoteAddress { get; }
    public bool IsReconnectSupported { get; }
    public bool IsUpdateURIsSupported { get; }
    public IWireFormat WireFormat { get; }
    public MockTransport(Uri uri);
    protected virtual override void Finalize();
    public sealed virtual Task`1<Response> RequestAsync(Command command);
    public sealed virtual Task`1<Response> RequestAsync(Command command, TimeSpan timeout);
    public sealed virtual void Oneway(Command command);
    public sealed virtual FutureResponse AsyncRequest(Command command);
    public sealed virtual void Start();
    public sealed virtual Task StartAsync();
    public sealed virtual void Stop();
    public sealed virtual Task StopAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void InjectCommand(Command command);
    public sealed virtual object Narrow(Type type);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual int get_AsyncTimeout();
    public sealed virtual void set_AsyncTimeout(int value);
    public sealed virtual CommandHandlerAsync get_CommandAsync();
    public sealed virtual void set_CommandAsync(CommandHandlerAsync value);
    public CommandHandlerAsync get_OutgoingCommand();
    public void set_OutgoingCommand(CommandHandlerAsync value);
    public sealed virtual ExceptionHandler get_Exception();
    public sealed virtual void set_Exception(ExceptionHandler value);
    public sealed virtual InterruptedHandler get_Interrupted();
    public sealed virtual void set_Interrupted(InterruptedHandler value);
    public sealed virtual ResumedHandler get_Resumed();
    public sealed virtual void set_Resumed(ResumedHandler value);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual bool get_IsStarted();
    public bool get_FailOnSendMessage();
    public void set_FailOnSendMessage(bool value);
    public int get_NumSentMessagesBeforeFail();
    public void set_NumSentMessagesBeforeFail(int value);
    public int get_NumSentMessages();
    public void set_NumSentMessages(int value);
    public bool get_FailOnReceiveMessage();
    public void set_FailOnReceiveMessage(bool value);
    public int get_NumReceivedMessagesBeforeFail();
    public void set_NumReceivedMessagesBeforeFail(int value);
    public int get_NumReceivedMessages();
    public void set_NumReceivedMessages(int value);
    public bool get_FailOnKeepAliveInfoSends();
    public void set_FailOnKeepAliveInfoSends(bool value);
    public int get_NumSentKeepAliveInfosBeforeFail();
    public void set_NumSentKeepAliveInfosBeforeFail(int value);
    public int get_NumSentKeppAliveInfos();
    public void set_NumSentKeppAliveInfos(int value);
    public int get_NumMessagesToRespondTo();
    public void set_NumMessagesToRespondTo(int value);
    public int get_NumMessagesRespondedTo();
    public void set_NumMessagesRespondedTo(int value);
    public bool get_RespondToMessages();
    public void set_RespondToMessages(bool value);
    public sealed virtual bool get_IsFaultTolerant();
    public sealed virtual bool get_IsConnected();
    public sealed virtual Uri get_RemoteAddress();
    public sealed virtual bool get_IsReconnectSupported();
    public sealed virtual bool get_IsUpdateURIsSupported();
    public sealed virtual void UpdateURIs(bool rebalance, Uri[] updatedURIs);
    public sealed virtual IWireFormat get_WireFormat();
}
[ActiveMQTransportFactoryAttribute("mock")]
public class Apache.NMS.ActiveMQ.Transport.Mock.MockTransportFactory : object {
    private bool useLogging;
    private bool failOnReceiveMessage;
    private int numReceivedMessagesBeforeFail;
    private bool failOnSendMessage;
    private int numSentMessagesBeforeFail;
    private bool failOnCreate;
    private string name;
    private int numMessagesToRespondTo;
    private bool respondToMessages;
    public bool UseLogging { get; public set; }
    public bool FailOnReceiveMessage { get; public set; }
    public int NumReceivedMessagesBeforeFail { get; public set; }
    public bool FailOnSendMessage { get; public set; }
    public int NumSentMessagesBeforeFail { get; public set; }
    public bool FailOnCreate { get; public set; }
    public string Name { get; public set; }
    public int NumMessagesToRespondTo { get; public set; }
    public bool RespondToMessages { get; public set; }
    public bool get_UseLogging();
    public void set_UseLogging(bool value);
    public bool get_FailOnReceiveMessage();
    public void set_FailOnReceiveMessage(bool value);
    public int get_NumReceivedMessagesBeforeFail();
    public void set_NumReceivedMessagesBeforeFail(int value);
    public bool get_FailOnSendMessage();
    public void set_FailOnSendMessage(bool value);
    public int get_NumSentMessagesBeforeFail();
    public void set_NumSentMessagesBeforeFail(int value);
    public bool get_FailOnCreate();
    public void set_FailOnCreate(bool value);
    public string get_Name();
    public void set_Name(string value);
    public int get_NumMessagesToRespondTo();
    public void set_NumMessagesToRespondTo(int value);
    public bool get_RespondToMessages();
    public void set_RespondToMessages(bool value);
    public sealed virtual ITransport CreateTransport(Uri location);
    public sealed virtual ITransport CompositeConnect(Uri location);
}
public class Apache.NMS.ActiveMQ.Transport.Mock.OpenWireResponseBuilder : object {
    public sealed virtual Response BuildResponse(Command command);
    public sealed virtual List`1<Command> BuildIncomingCommands(Command command);
}
public class Apache.NMS.ActiveMQ.Transport.MutexTransport : TransportFilter {
    private object transmissionLock;
    public MutexTransport(ITransport next);
    private void GetTransmissionLock(int timeout);
    public virtual void Oneway(Command command);
    public virtual FutureResponse AsyncRequest(Command command);
    public virtual Task`1<Response> RequestAsync(Command command, TimeSpan timeout);
}
public class Apache.NMS.ActiveMQ.Transport.ResponseCorrelator : TransportFilter {
    private IDictionary requestMap;
    private int nextCommandId;
    private Exception error;
    public ResponseCorrelator(ITransport next);
    protected virtual void OnException(ITransport sender, Exception command);
    internal int GetNextCommandId();
    public virtual void Oneway(Command command);
    public virtual FutureResponse AsyncRequest(Command command);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Transport.ResponseCorrelator/<RequestAsync>d__8")]
public virtual Task`1<Response> RequestAsync(Command command, TimeSpan timeout);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Transport.ResponseCorrelator/<OnCommand>d__9")]
protected virtual Task OnCommand(ITransport sender, Command command);
    public virtual void Stop();
    private void Dispose(Exception error);
}
public class Apache.NMS.ActiveMQ.Transport.ResumedHandler : MulticastDelegate {
    public ResumedHandler(object object, IntPtr method);
    public virtual void Invoke(ITransport sender);
    public virtual IAsyncResult BeginInvoke(ITransport sender, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ActiveMQ.Transport.SetTransport : MulticastDelegate {
    public SetTransport(object object, IntPtr method);
    public virtual void Invoke(ITransport transport, Uri uri);
    public virtual IAsyncResult BeginInvoke(ITransport transport, Uri uri, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Apache.NMS.ActiveMQ.Transport.Tcp.SslContext : object {
    private string sslProtocol;
    [ThreadStaticAttribute]
private static SslContext current;
    public string SslProtocol { get; public set; }
    public SslContext(string protocol);
    public string get_SslProtocol();
    public void set_SslProtocol(string value);
    public static SslContext GetCurrent();
    public static void SetCurrent(SslContext context);
}
public class Apache.NMS.ActiveMQ.Transport.Tcp.SslTransport : TcpTransport {
    private string serverName;
    private string clientCertSubject;
    private string clientCertFilename;
    private string clientCertPassword;
    private string brokerCertFilename;
    private string keyStoreName;
    private string keyStoreLocation;
    internal string sslProtocol;
    private bool acceptInvalidBrokerCert;
    private SslStream sslStream;
    public string ServerName { get; public set; }
    public string ClientCertSubject { get; public set; }
    public string ClientCertFilename { get; public set; }
    public string ClientCertPassword { get; public set; }
    public string BrokerCertFilename { get; public set; }
    public bool AcceptInvalidBrokerCert { get; public set; }
    public string KeyStoreName { get; public set; }
    public string KeyStoreLocation { get; public set; }
    public string SslProtocol { get; public set; }
    public SslTransport(Uri location, Socket socket, IWireFormat wireFormat);
    protected virtual override void Finalize();
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_ClientCertSubject();
    public void set_ClientCertSubject(string value);
    public string get_ClientCertFilename();
    public void set_ClientCertFilename(string value);
    public string get_ClientCertPassword();
    public void set_ClientCertPassword(string value);
    public string get_BrokerCertFilename();
    public void set_BrokerCertFilename(string value);
    public bool get_AcceptInvalidBrokerCert();
    public void set_AcceptInvalidBrokerCert(bool value);
    public string get_KeyStoreName();
    public void set_KeyStoreName(string value);
    public string get_KeyStoreLocation();
    public void set_KeyStoreLocation(string value);
    public string get_SslProtocol();
    public void set_SslProtocol(string value);
    protected virtual Stream CreateSocketStream();
    private bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private bool ValidateSelfSignedServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private bool CorrectSelfSignedCertificate(X509Certificate receivedCertificate);
    private X509Certificate SelectLocalCertificate(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers);
    private X509Certificate2Collection LoadClientCertificates();
    private SslProtocols GetAllowedProtocol();
}
[ActiveMQTransportFactoryAttribute("ssl")]
public class Apache.NMS.ActiveMQ.Transport.Tcp.SslTransportFactory : TcpTransportFactory {
    private string serverName;
    private string clientCertSubject;
    private string clientCertFilename;
    private string clientCertPassword;
    private string brokerCertFilename;
    private string keyStoreName;
    private string keyStoreLocation;
    private string sslProtocol;
    private bool acceptInvalidBrokerCert;
    public string ServerName { get; public set; }
    public string ClientCertSubject { get; public set; }
    public string ClientCertFilename { get; public set; }
    public string ClientCertPassword { get; public set; }
    public string BrokerCertFilename { get; public set; }
    public bool AcceptInvalidBrokerCert { get; public set; }
    public string KeyStoreName { get; public set; }
    public string KeyStoreLocation { get; public set; }
    public string SslProtocol { get; public set; }
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_ClientCertSubject();
    public void set_ClientCertSubject(string value);
    public string get_ClientCertFilename();
    public void set_ClientCertFilename(string value);
    public string get_ClientCertPassword();
    public void set_ClientCertPassword(string value);
    public string get_BrokerCertFilename();
    public void set_BrokerCertFilename(string value);
    public bool get_AcceptInvalidBrokerCert();
    public void set_AcceptInvalidBrokerCert(bool value);
    public string get_KeyStoreName();
    public void set_KeyStoreName(string value);
    public string get_KeyStoreLocation();
    public void set_KeyStoreLocation(string value);
    public string get_SslProtocol();
    public void set_SslProtocol(string value);
    protected virtual ITransport DoCreateTransport(Uri location, Socket socket, IWireFormat wireFormat);
}
public class Apache.NMS.ActiveMQ.Transport.Tcp.TcpTransport : object {
    protected object myLock;
    protected Socket socket;
    private IWireFormat wireformat;
    private BinaryReader socketReader;
    private BinaryWriter socketWriter;
    private Thread readThread;
    private bool started;
    private bool disposed;
    private Atomic`1<bool> closed;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) seenShutdown;
    private Uri connectedUri;
    private int timeout;
    private int asynctimeout;
    private CommandHandlerAsync commandHandlerAsync;
    private ExceptionHandler exceptionHandler;
    private InterruptedHandler interruptedHandler;
    private ResumedHandler resumedHandler;
    private TimeSpan MAX_THREAD_WAIT;
    private int receiveBufferSize;
    private int sendBufferSize;
    public int ReceiveBufferSize { get; public set; }
    public int SendBufferSize { get; public set; }
    public bool IsStarted { get; }
    public bool TcpNoDelayEnabled { get; public set; }
    public bool IsDisposed { get; }
    public int Timeout { get; public set; }
    public int AsyncTimeout { get; public set; }
    public CommandHandlerAsync CommandAsync { get; public set; }
    public ExceptionHandler Exception { get; public set; }
    public InterruptedHandler Interrupted { get; public set; }
    public ResumedHandler Resumed { get; public set; }
    public IWireFormat WireFormat { get; public set; }
    public bool IsFaultTolerant { get; }
    public bool IsConnected { get; }
    public Uri RemoteAddress { get; }
    public bool IsReconnectSupported { get; }
    public bool IsUpdateURIsSupported { get; }
    public TcpTransport(Uri uri, Socket socket, IWireFormat wireformat);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    protected virtual override void Finalize();
    protected virtual Stream CreateSocketStream();
    public sealed virtual void Start();
    public sealed virtual Task StartAsync();
    public sealed virtual bool get_IsStarted();
    public virtual void Oneway(Command command);
    public sealed virtual FutureResponse AsyncRequest(Command command);
    public bool get_TcpNoDelayEnabled();
    public void set_TcpNoDelayEnabled(bool value);
    public sealed virtual Task`1<Response> RequestAsync(Command command);
    public sealed virtual Task`1<Response> RequestAsync(Command command, TimeSpan timeout);
    public sealed virtual void Stop();
    public sealed virtual Task StopAsync();
    public void Close();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public sealed virtual bool get_IsDisposed();
    public void ReadLoop();
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual int get_AsyncTimeout();
    public sealed virtual void set_AsyncTimeout(int value);
    public sealed virtual CommandHandlerAsync get_CommandAsync();
    public sealed virtual void set_CommandAsync(CommandHandlerAsync value);
    public sealed virtual ExceptionHandler get_Exception();
    public sealed virtual void set_Exception(ExceptionHandler value);
    public sealed virtual InterruptedHandler get_Interrupted();
    public sealed virtual void set_Interrupted(InterruptedHandler value);
    public sealed virtual ResumedHandler get_Resumed();
    public sealed virtual void set_Resumed(ResumedHandler value);
    public sealed virtual IWireFormat get_WireFormat();
    public void set_WireFormat(IWireFormat value);
    public sealed virtual bool get_IsFaultTolerant();
    public sealed virtual bool get_IsConnected();
    public sealed virtual Uri get_RemoteAddress();
    public sealed virtual object Narrow(Type type);
    public sealed virtual bool get_IsReconnectSupported();
    public sealed virtual bool get_IsUpdateURIsSupported();
    public sealed virtual void UpdateURIs(bool rebalance, Uri[] updatedURIs);
}
[ActiveMQTransportFactoryAttribute("tcp")]
public class Apache.NMS.ActiveMQ.Transport.Tcp.TcpTransportFactory : object {
    private bool useLogging;
    private bool useInactivityMonitor;
    private int receiveBufferSize;
    private int sendBufferSize;
    private int receiveTimeout;
    private int sendTimeout;
    private int connectTimeout;
    public bool UseLogging { get; public set; }
    public bool UseInactivityMonitor { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int SendBufferSize { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ConnectTimeout { get; public set; }
    public bool get_UseLogging();
    public void set_UseLogging(bool value);
    public bool get_UseInactivityMonitor();
    public void set_UseInactivityMonitor(bool value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public sealed virtual ITransport CompositeConnect(Uri location);
    public sealed virtual ITransport CreateTransport(Uri location);
    protected virtual ITransport DoCreateTransport(Uri location, Socket socket, IWireFormat wireFormat);
    public static IPHostEntry GetIPHostEntry(string host);
    private Socket TryConnectSocket(IPAddress address, int port, string localAddress, int localPort);
    public static bool TryParseIPAddress(string host, IPAddress& ipaddress);
    public static IPAddress GetIPAddress(string hostname, AddressFamily addressFamily);
    public static IPAddress GetIPAddress(IPHostEntry hostEntry, AddressFamily addressFamily);
    protected Socket DoConnect(string host, int port, string localAddress, int localPort);
    protected void DoBind(Socket socket, string host, int port);
    private bool TryBindSocket(Socket socket, IPAddress address, int port);
}
public class Apache.NMS.ActiveMQ.Transport.TransportFactory : object {
    [CompilerGeneratedAttribute]
private static ExceptionListener OnException;
    private static FactoryFinder`2<ActiveMQTransportFactoryAttribute, ITransportFactory> FACTORY_FINDER;
    private static object TRANSPORT_FACTORY_TYPES_LOCK;
    private static IDictionary`2<string, Type> TRANSPORT_FACTORY_TYPES;
    private static TransportFactory();
    [CompilerGeneratedAttribute]
public static void add_OnException(ExceptionListener value);
    [CompilerGeneratedAttribute]
public static void remove_OnException(ExceptionListener value);
    public static void HandleException(Exception ex);
    public void RegisterTransportFactory(string scheme, Type factoryType);
    public static ITransport CreateTransport(Uri location);
    public static ITransport CompositeConnect(Uri location);
    private static ITransportFactory CreateTransportFactory(Uri location);
    private static ITransportFactory NewInstance(string scheme);
    private static Type FindTransportFactory(string scheme);
}
public class Apache.NMS.ActiveMQ.Transport.TransportFilter : object {
    protected ITransport next;
    protected CommandHandlerAsync commandHandlerAsync;
    protected ExceptionHandler exceptionHandler;
    protected InterruptedHandler interruptedHandler;
    protected ResumedHandler resumedHandler;
    private bool disposed;
    public bool IsStarted { get; }
    public bool IsDisposed { get; }
    public CommandHandlerAsync CommandAsync { get; public set; }
    public ExceptionHandler Exception { get; public set; }
    public InterruptedHandler Interrupted { get; public set; }
    public ResumedHandler Resumed { get; public set; }
    public int Timeout { get; public set; }
    public int AsyncTimeout { get; public set; }
    public bool IsFaultTolerant { get; }
    public bool IsConnected { get; }
    public Uri RemoteAddress { get; }
    public bool IsReconnectSupported { get; }
    public bool IsUpdateURIsSupported { get; }
    public IWireFormat WireFormat { get; }
    public TransportFilter(ITransport next);
    protected virtual override void Finalize();
    protected virtual Task OnCommand(ITransport sender, Command command);
    protected virtual void OnException(ITransport sender, Exception command);
    protected virtual void OnInterrupted(ITransport sender);
    protected virtual void OnResumed(ITransport sender);
    public virtual void Oneway(Command command);
    public virtual FutureResponse AsyncRequest(Command command);
    public virtual Task`1<Response> RequestAsync(Command command);
    public virtual Task`1<Response> RequestAsync(Command command, TimeSpan timeout);
    public virtual void Start();
    public sealed virtual Task StartAsync();
    public sealed virtual bool get_IsStarted();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual CommandHandlerAsync get_CommandAsync();
    public sealed virtual void set_CommandAsync(CommandHandlerAsync value);
    public sealed virtual ExceptionHandler get_Exception();
    public sealed virtual void set_Exception(ExceptionHandler value);
    public sealed virtual InterruptedHandler get_Interrupted();
    public sealed virtual void set_Interrupted(InterruptedHandler value);
    public sealed virtual ResumedHandler get_Resumed();
    public sealed virtual void set_Resumed(ResumedHandler value);
    public virtual void Stop();
    public sealed virtual Task StopAsync();
    public sealed virtual object Narrow(Type type);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual int get_AsyncTimeout();
    public sealed virtual void set_AsyncTimeout(int value);
    public sealed virtual bool get_IsFaultTolerant();
    public sealed virtual bool get_IsConnected();
    public sealed virtual Uri get_RemoteAddress();
    public sealed virtual bool get_IsReconnectSupported();
    public sealed virtual bool get_IsUpdateURIsSupported();
    public sealed virtual void UpdateURIs(bool rebalance, Uri[] updatedURIs);
    public sealed virtual IWireFormat get_WireFormat();
}
public class Apache.NMS.ActiveMQ.Transport.WireFormatNegotiator : TransportFilter {
    private OpenWireFormat wireFormat;
    private TimeSpan negotiateTimeout;
    private Atomic`1<bool> firstStart;
    private CountDownLatch readyCountDownLatch;
    private CountDownLatch wireInfoSentDownLatch;
    public WireFormatNegotiator(ITransport next, OpenWireFormat wireFormat);
    public virtual void Start();
    protected virtual void Dispose(bool disposing);
    public virtual void Oneway(Command command);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Transport.WireFormatNegotiator/<OnCommand>d__9")]
protected virtual Task OnCommand(ITransport sender, Command command);
    protected virtual void OnException(ITransport sender, Exception command);
}
public class Apache.NMS.ActiveMQ.Util.ActiveMQMessageAudit : object {
    public static int DEFAULT_WINDOW_SIZE;
    public static int MAXIMUM_PRODUCER_COUNT;
    private object mutex;
    private int auditDepth;
    private int maximumNumberOfProducersToTrack;
    private LRUCache`2<object, BitArrayBin> map;
    public int AuditDepth { get; public set; }
    public int MaximumNumberOfProducersToTrack { get; public set; }
    public ActiveMQMessageAudit(int auditDepth, int maximumNumberOfProducersToTrack);
    public int get_AuditDepth();
    public void set_AuditDepth(int value);
    public int get_MaximumNumberOfProducersToTrack();
    public void set_MaximumNumberOfProducersToTrack(int value);
    public bool IsDuplicate(MessageId id);
    public void Rollback(MessageId id);
    public bool IsInOrder(MessageId id);
    public long GetLastSeqId(ProducerId id);
    public void Clear();
}
public class Apache.NMS.ActiveMQ.Util.ActiveMQMessageTransformation : MessageTransformation {
    private Connection connection;
    public ActiveMQMessageTransformation(Connection connection);
    protected virtual IMessage DoCreateMessage();
    protected virtual IBytesMessage DoCreateBytesMessage();
    protected virtual ITextMessage DoCreateTextMessage();
    protected virtual IStreamMessage DoCreateStreamMessage();
    protected virtual IMapMessage DoCreateMapMessage();
    protected virtual IObjectMessage DoCreateObjectMessage();
    protected virtual IDestination DoTransformDestination(IDestination destination);
    protected virtual void DoPostProcessMessage(IMessage message);
    public static void CopyMap(IPrimitiveMap source, IPrimitiveMap target);
}
[ExtensionAttribute]
public static class Apache.NMS.ActiveMQ.Util.AtomicExtensions : object {
    [ExtensionAttribute]
public static long IncrementAndGet(Atomic`1<long> atomicRef);
    [ExtensionAttribute]
public static long DecrementAndGet(Atomic`1<long> atomicRef);
}
public class Apache.NMS.ActiveMQ.Util.BitArray : object {
    public static int LONG_SIZE;
    public static int INT_SIZE;
    public static int SHORT_SIZE;
    public static int BYTE_SIZE;
    private static UInt64[] BIT_VALUES;
    private ulong bits;
    private int length;
    public int Length { get; }
    public long Bits { get; }
    public BitArray(long bits);
    private static BitArray();
    public int get_Length();
    public long get_Bits();
    public bool Set(int index, bool flag);
    public bool Get(int index);
    public void Reset();
    public void Reset(long bits);
}
public class Apache.NMS.ActiveMQ.Util.BitArrayBin : object {
    private List`1<BitArray> list;
    private int maxNumberOfArrays;
    private int firstIndex;
    private long lastInOrderBit;
    public BitArrayBin(int windowSize);
    public bool SetBit(long index, bool val);
    public bool IsInOrder(long index);
    public bool GetBit(long index);
    private BitArray GetBitArray(long index);
    private int GetBin(long index);
    private int GetOffset(long index);
    public long GetLastSetIndex();
}
public class Apache.NMS.ActiveMQ.Util.ConnectionAudit : object {
    private object mutex;
    private Dictionary`2<ActiveMQDestination, ActiveMQMessageAudit> destinations;
    private Dictionary`2<IDispatcher, ActiveMQMessageAudit> dispatchers;
    private bool checkForDuplicates;
    private int auditDepth;
    private int auditMaximumProducerNumber;
    public bool CheckForDuplicates { get; public set; }
    public int AuditDepth { get; public set; }
    public int AuditMaximumProducerNumber { get; public set; }
    public ConnectionAudit(int auditDepth, int auditMaximumProducerNumber);
    public bool get_CheckForDuplicates();
    public void set_CheckForDuplicates(bool value);
    public int get_AuditDepth();
    public void set_AuditDepth(int value);
    public int get_AuditMaximumProducerNumber();
    public void set_AuditMaximumProducerNumber(int value);
    public void RemoveDispatcher(IDispatcher dispatcher);
    public bool IsDuplicate(IDispatcher dispatcher, Message message);
    public void RollbackDuplicate(IDispatcher dispatcher, Message message);
}
[AttributeUsageAttribute("4")]
public class Apache.NMS.ActiveMQ.Util.FactoryAttribute : Attribute {
    private string factoryIdentifier;
    private string description;
    public string FactoryIdentifier { get; }
    public string Description { get; public set; }
    public FactoryAttribute(string factoryIdentifier);
    public string get_FactoryIdentifier();
    public string get_Description();
    public void set_Description(string value);
}
public class Apache.NMS.ActiveMQ.Util.FactoryFinder`2 : object {
    private static IDictionary`2<string, bool> DEFAULT_EXCLUDES;
    private static FactoryFinder`2();
    public Type FindFactoryType(string factoryId);
    private bool IsExcluded(Assembly assembly);
    private Type SearchAssembly(Assembly assembly, string factoryId);
}
public class Apache.NMS.ActiveMQ.Util.FifoMessageDispatchChannel : object {
    private NmsSynchronizationMonitor mutex;
    private bool closed;
    private bool running;
    private LinkedList`1<MessageDispatch> channel;
    public NmsSynchronizationMonitor SyncRoot { get; }
    public bool Closed { get; public set; }
    public bool Running { get; public set; }
    public bool Empty { get; }
    public long Count { get; }
    public sealed virtual NmsSynchronizationMonitor get_SyncRoot();
    public sealed virtual bool get_Closed();
    public sealed virtual void set_Closed(bool value);
    public sealed virtual bool get_Running();
    public sealed virtual void set_Running(bool value);
    public sealed virtual bool get_Empty();
    public sealed virtual long get_Count();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual void Close();
    public sealed virtual void Enqueue(MessageDispatch dispatch);
    public sealed virtual void EnqueueFirst(MessageDispatch dispatch);
    public sealed virtual MessageDispatch Dequeue(TimeSpan timeout);
    public sealed virtual MessageDispatch DequeueNoWait();
    public sealed virtual MessageDispatch Peek();
    public sealed virtual void Clear();
    public sealed virtual MessageDispatch[] RemoveAll();
    public sealed virtual void Signal();
}
public class Apache.NMS.ActiveMQ.Util.IdGenerator : object {
    private static string UNIQUE_STUB;
    private static int instanceCount;
    private static string hostName;
    private string seed;
    private long sequence;
    public static string HostName { get; }
    private static IdGenerator();
    public IdGenerator(string prefix);
    public static string get_HostName();
    public string GenerateId();
    public string GenerateSanitizedId();
    public static string GetSeedFromId(string id);
    public static long GetSequenceFromId(string id);
    public static int Compare(string id1, string id2);
}
public class Apache.NMS.ActiveMQ.Util.IntrospectionSupport : object {
    public static void SetProperties(object target, StringDictionary map);
    public static void SetProperties(object target, StringDictionary map, string prefix);
    private static object GetUnderlyingObject(MemberInfo member, object target);
    private static MemberInfo FindPropertyInfo(object target, string name);
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.ActiveMQ.Util.LRUCache`2 : object {
    public static int DEFAULT_MAX_CACHE_SIZE;
    private Dictionary`2<TKey, TValue> dictionary;
    private LinkedList`1<KeyValuePair`2<TKey, TValue>> entries;
    private int maxCacheSize;
    public int Count { get; }
    public int MaxCacheSize { get; public set; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public LRUCache`2(int maxCacheSize);
    public void Clear();
    public int get_Count();
    public int get_MaxCacheSize();
    public void set_MaxCacheSize(int value);
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& val);
    public ICollection`1<TKey> get_Keys();
    public ICollection`1<TValue> get_Values();
    public void Add(TKey key, TValue val);
    public bool Remove(TKey v);
    public bool ContainsKey(TKey key);
    public bool ContainsValue(TValue theValue);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool RemoveEldestEntry(KeyValuePair`2<TKey, TValue> eldest);
    public void PutAll(LRUCache`2<TKey, TValue> source);
}
public class Apache.NMS.ActiveMQ.Util.MemoryUsage : object {
    private Atomic`1<bool> stopped;
    private long limit;
    private long usage;
    private object mutex;
    public long Limit { get; public set; }
    public long Usage { get; public set; }
    public MemoryUsage(long limit);
    public long get_Limit();
    public void set_Limit(long value);
    public long get_Usage();
    public void set_Usage(long value);
    public void WaitForSpace();
    public void WaitForSpace(TimeSpan timeout);
    public void EnqueueUsage(long usage);
    public void IncreaseUsage(long value);
    public void DecreaseUsage(long value);
    public bool IsFull();
    public void Stop();
}
public interface Apache.NMS.ActiveMQ.Util.MessageDispatchChannel {
    public NmsSynchronizationMonitor SyncRoot { get; }
    public bool Closed { get; public set; }
    public bool Running { get; public set; }
    public bool Empty { get; }
    public long Count { get; }
    public abstract virtual NmsSynchronizationMonitor get_SyncRoot();
    public abstract virtual bool get_Closed();
    public abstract virtual void set_Closed(bool value);
    public abstract virtual bool get_Running();
    public abstract virtual void set_Running(bool value);
    public abstract virtual bool get_Empty();
    public abstract virtual long get_Count();
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual void Close();
    public abstract virtual void Enqueue(MessageDispatch dispatch);
    public abstract virtual void EnqueueFirst(MessageDispatch dispatch);
    public abstract virtual MessageDispatch Dequeue(TimeSpan timeout);
    public abstract virtual MessageDispatch DequeueNoWait();
    public abstract virtual MessageDispatch Peek();
    public abstract virtual void Clear();
    public abstract virtual MessageDispatch[] RemoveAll();
    public abstract virtual void Signal();
}
public class Apache.NMS.ActiveMQ.Util.ServiceStopper : object {
    private Exception firstException;
    public void Stop(IStoppable service);
    public void ThrowFirstException();
    private void OnException(object owner, Exception e);
    private void LogError(object owner, Exception e);
}
public class Apache.NMS.ActiveMQ.Util.SimplePriorityMessageDispatchChannel : object {
    public static int MAX_PRIORITY;
    private NmsSynchronizationMonitor mutex;
    private bool closed;
    private bool running;
    private LinkedList`1[] channels;
    private int size;
    public NmsSynchronizationMonitor SyncRoot { get; }
    public bool Closed { get; public set; }
    public bool Running { get; public set; }
    public bool Empty { get; }
    public long Count { get; }
    public sealed virtual NmsSynchronizationMonitor get_SyncRoot();
    public sealed virtual bool get_Closed();
    public sealed virtual void set_Closed(bool value);
    public sealed virtual bool get_Running();
    public sealed virtual void set_Running(bool value);
    public sealed virtual bool get_Empty();
    public sealed virtual long get_Count();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual void Close();
    public sealed virtual void Enqueue(MessageDispatch dispatch);
    public sealed virtual void EnqueueFirst(MessageDispatch dispatch);
    public sealed virtual MessageDispatch Dequeue(TimeSpan timeout);
    public sealed virtual MessageDispatch DequeueNoWait();
    public sealed virtual MessageDispatch Peek();
    public sealed virtual void Clear();
    public sealed virtual MessageDispatch[] RemoveAll();
    public sealed virtual void Signal();
    protected int GetPriority(MessageDispatch message);
    protected LinkedList`1<MessageDispatch> GetList(MessageDispatch md);
    private MessageDispatch RemoveFirst();
    private MessageDispatch GetFirst();
}
public class Apache.NMS.ActiveMQ.Util.Synchronization.NmsSynchronizationMonitor : object {
    private SemaphoreSlim semaphoreSlim;
    private List`1<SemaphoreSlim> waitingLocks;
    private object waitSyncRoot;
    private AsyncLocal`1<NmsLock> asyncLocal;
    public void Wait(Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Util.Synchronization.NmsSynchronizationMonitor/<WaitAsync>d__6")]
public Task WaitAsync(Nullable`1<int> timeout);
    public void Pulse();
    public void PulseAll();
    public IDisposable Exclude();
    public NmsLock Lock();
    public Task`1<NmsLock> LockAsync();
    public Task`1<NmsLock> TryLockAsync(int timeout);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Util.Synchronization.NmsSynchronizationMonitor/<TryEnterAsync>d__13")]
private Task`1<NmsLock> TryEnterAsync(int timeout, NmsLock nmsLock);
    private NmsLock GetOrCreateCurrentLock();
    private NmsLock GetCurrentLock();
    private void SetCurrentLock(NmsLock nmsLock);
    private bool EnterMonitor(int timeout);
    private Task`1<bool> EnterMonitorAsync(int timeout);
    private void ReleaseMonitor();
}
[ExtensionAttribute]
public static class Apache.NMS.ActiveMQ.Util.Synchronization.TaskExtensions : object {
    [ExtensionAttribute]
public static T GetAsyncResult(Task`1<T> task);
    [ExtensionAttribute]
public static void GetAsyncResult(Task task);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Util.Synchronization.TaskExtensions/<AwaitRunContinuationAsync>d__2")]
[ExtensionAttribute]
public static Task AwaitRunContinuationAsync(Task task);
    [AsyncStateMachineAttribute("Apache.NMS.ActiveMQ.Util.Synchronization.TaskExtensions/<AwaitRunContinuationAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<T> AwaitRunContinuationAsync(Task`1<T> task);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable Await(Task task);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable`1<T> Await(Task`1<T> task);
}
public static class Apache.NMS.ActiveMQ.Util.Synchronization.TaskSynchronizationSettings : object {
    [CompilerGeneratedAttribute]
private static bool <ContinueOnCapturedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <TryToRunCertainContunuationsAsynchronously>k__BackingField;
    public static bool ContinueOnCapturedContext { get; public set; }
    public static bool TryToRunCertainContunuationsAsynchronously { get; public set; }
    private static TaskSynchronizationSettings();
    [CompilerGeneratedAttribute]
public static bool get_ContinueOnCapturedContext();
    [CompilerGeneratedAttribute]
public static void set_ContinueOnCapturedContext(bool value);
    [CompilerGeneratedAttribute]
public static bool get_TryToRunCertainContunuationsAsynchronously();
    [CompilerGeneratedAttribute]
public static void set_TryToRunCertainContunuationsAsynchronously(bool value);
}
