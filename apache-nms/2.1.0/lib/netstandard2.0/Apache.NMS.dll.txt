public enum Apache.NMS.AcknowledgementMode : Enum {
    public int value__;
    public static AcknowledgementMode AutoAcknowledge;
    public static AcknowledgementMode DupsOkAcknowledge;
    public static AcknowledgementMode ClientAcknowledge;
    public static AcknowledgementMode Transactional;
    public static AcknowledgementMode IndividualAcknowledge;
}
public class Apache.NMS.AsyncMessageListener : MulticastDelegate {
    public AsyncMessageListener(object object, IntPtr method);
    public virtual Task Invoke(IMessage message, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(IMessage message, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ConnectionInterruptedListener : MulticastDelegate {
    public ConnectionInterruptedListener(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ConnectionResumedListener : MulticastDelegate {
    public ConnectionResumedListener(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ConsumerTransformerDelegate : MulticastDelegate {
    public ConsumerTransformerDelegate(object object, IntPtr method);
    public virtual IMessage Invoke(ISession session, IMessageConsumer consumer, IMessage message);
    public virtual IAsyncResult BeginInvoke(ISession session, IMessageConsumer consumer, IMessage message, AsyncCallback callback, object object);
    public virtual IMessage EndInvoke(IAsyncResult result);
}
public enum Apache.NMS.DestinationType : Enum {
    public int value__;
    public static DestinationType Queue;
    public static DestinationType Topic;
    public static DestinationType TemporaryQueue;
    public static DestinationType TemporaryTopic;
}
public class Apache.NMS.ExceptionListener : MulticastDelegate {
    public ExceptionListener(object object, IntPtr method);
    public virtual void Invoke(Exception exception);
    public virtual IAsyncResult BeginInvoke(Exception exception, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface Apache.NMS.IBytesMessage {
    public Byte[] Content { get; public set; }
    public long BodyLength { get; }
    public abstract virtual Byte[] get_Content();
    public abstract virtual void set_Content(Byte[] value);
    public abstract virtual long get_BodyLength();
    public abstract virtual byte ReadByte();
    public abstract virtual void WriteByte(byte value);
    public abstract virtual bool ReadBoolean();
    public abstract virtual void WriteBoolean(bool value);
    public abstract virtual char ReadChar();
    public abstract virtual void WriteChar(char value);
    public abstract virtual short ReadInt16();
    public abstract virtual void WriteInt16(short value);
    public abstract virtual int ReadInt32();
    public abstract virtual void WriteInt32(int value);
    public abstract virtual long ReadInt64();
    public abstract virtual void WriteInt64(long value);
    public abstract virtual float ReadSingle();
    public abstract virtual void WriteSingle(float value);
    public abstract virtual double ReadDouble();
    public abstract virtual void WriteDouble(double value);
    public abstract virtual int ReadBytes(Byte[] value);
    public abstract virtual int ReadBytes(Byte[] value, int length);
    public abstract virtual void WriteBytes(Byte[] value);
    public abstract virtual void WriteBytes(Byte[] value, int offset, int length);
    public abstract virtual string ReadString();
    public abstract virtual void WriteString(string value);
    public abstract virtual void WriteObject(object value);
    public abstract virtual void Reset();
}
public interface Apache.NMS.IConnection {
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public AcknowledgementMode AcknowledgementMode { get; public set; }
    public string ClientId { get; public set; }
    public IRedeliveryPolicy RedeliveryPolicy { get; public set; }
    public IConnectionMetaData MetaData { get; }
    public abstract virtual ISession CreateSession();
    public abstract virtual ISession CreateSession(AcknowledgementMode acknowledgementMode);
    public abstract virtual Task`1<ISession> CreateSessionAsync();
    public abstract virtual Task`1<ISession> CreateSessionAsync(AcknowledgementMode acknowledgementMode);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExceptionListener(ExceptionListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExceptionListener(ExceptionListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionResumedListener(ConnectionResumedListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionResumedListener(ConnectionResumedListener value);
    public abstract virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public abstract virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public abstract virtual ProducerTransformerDelegate get_ProducerTransformer();
    public abstract virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public abstract virtual TimeSpan get_RequestTimeout();
    public abstract virtual void set_RequestTimeout(TimeSpan value);
    public abstract virtual AcknowledgementMode get_AcknowledgementMode();
    public abstract virtual void set_AcknowledgementMode(AcknowledgementMode value);
    public abstract virtual string get_ClientId();
    public abstract virtual void set_ClientId(string value);
    public abstract virtual IRedeliveryPolicy get_RedeliveryPolicy();
    public abstract virtual void set_RedeliveryPolicy(IRedeliveryPolicy value);
    public abstract virtual IConnectionMetaData get_MetaData();
    public abstract virtual void PurgeTempDestinations();
}
public interface Apache.NMS.IConnectionFactory {
    public Uri BrokerUri { get; public set; }
    public IRedeliveryPolicy RedeliveryPolicy { get; public set; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public abstract virtual IConnection CreateConnection();
    public abstract virtual IConnection CreateConnection(string userName, string password);
    public abstract virtual Task`1<IConnection> CreateConnectionAsync();
    public abstract virtual Task`1<IConnection> CreateConnectionAsync(string userName, string password);
    public abstract virtual INMSContext CreateContext();
    public abstract virtual INMSContext CreateContext(AcknowledgementMode acknowledgementMode);
    public abstract virtual INMSContext CreateContext(string userName, string password);
    public abstract virtual INMSContext CreateContext(string userName, string password, AcknowledgementMode acknowledgementMode);
    public abstract virtual Task`1<INMSContext> CreateContextAsync();
    public abstract virtual Task`1<INMSContext> CreateContextAsync(AcknowledgementMode acknowledgementMode);
    public abstract virtual Task`1<INMSContext> CreateContextAsync(string userName, string password);
    public abstract virtual Task`1<INMSContext> CreateContextAsync(string userName, string password, AcknowledgementMode acknowledgementMode);
    public abstract virtual Uri get_BrokerUri();
    public abstract virtual void set_BrokerUri(Uri value);
    public abstract virtual IRedeliveryPolicy get_RedeliveryPolicy();
    public abstract virtual void set_RedeliveryPolicy(IRedeliveryPolicy value);
    public abstract virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public abstract virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public abstract virtual ProducerTransformerDelegate get_ProducerTransformer();
    public abstract virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
}
public interface Apache.NMS.IConnectionMetaData {
    public int NMSMajorVersion { get; }
    public int NMSMinorVersion { get; }
    public string NMSProviderName { get; }
    public string NMSVersion { get; }
    public String[] NMSXPropertyNames { get; }
    public int ProviderMajorVersion { get; }
    public int ProviderMinorVersion { get; }
    public string ProviderVersion { get; }
    public abstract virtual int get_NMSMajorVersion();
    public abstract virtual int get_NMSMinorVersion();
    public abstract virtual string get_NMSProviderName();
    public abstract virtual string get_NMSVersion();
    public abstract virtual String[] get_NMSXPropertyNames();
    public abstract virtual int get_ProviderMajorVersion();
    public abstract virtual int get_ProviderMinorVersion();
    public abstract virtual string get_ProviderVersion();
}
public interface Apache.NMS.IDestination {
    public DestinationType DestinationType { get; }
    public bool IsTopic { get; }
    public bool IsQueue { get; }
    public bool IsTemporary { get; }
    public abstract virtual DestinationType get_DestinationType();
    public abstract virtual bool get_IsTopic();
    public abstract virtual bool get_IsQueue();
    public abstract virtual bool get_IsTemporary();
}
public class Apache.NMS.IllegalStateException : NMSException {
    public IllegalStateException(string message);
    public IllegalStateException(string message, string errorCode);
    public IllegalStateException(string message, Exception innerException);
    public IllegalStateException(string message, string errorCode, Exception innerException);
    protected IllegalStateException(SerializationInfo info, StreamingContext context);
}
public interface Apache.NMS.IMapMessage {
    public IPrimitiveMap Body { get; }
    public abstract virtual IPrimitiveMap get_Body();
}
public interface Apache.NMS.IMessage {
    public IPrimitiveMap Properties { get; }
    public string NMSCorrelationID { get; public set; }
    public IDestination NMSDestination { get; public set; }
    public TimeSpan NMSTimeToLive { get; public set; }
    public string NMSMessageId { get; public set; }
    public MsgDeliveryMode NMSDeliveryMode { get; public set; }
    public MsgPriority NMSPriority { get; public set; }
    public bool NMSRedelivered { get; public set; }
    public IDestination NMSReplyTo { get; public set; }
    public DateTime NMSTimestamp { get; public set; }
    public string NMSType { get; public set; }
    public DateTime NMSDeliveryTime { get; public set; }
    public abstract virtual void Acknowledge();
    public abstract virtual Task AcknowledgeAsync();
    public abstract virtual void ClearBody();
    public abstract virtual void ClearProperties();
    public abstract virtual IPrimitiveMap get_Properties();
    public abstract virtual string get_NMSCorrelationID();
    public abstract virtual void set_NMSCorrelationID(string value);
    public abstract virtual IDestination get_NMSDestination();
    public abstract virtual void set_NMSDestination(IDestination value);
    public abstract virtual TimeSpan get_NMSTimeToLive();
    public abstract virtual void set_NMSTimeToLive(TimeSpan value);
    public abstract virtual string get_NMSMessageId();
    public abstract virtual void set_NMSMessageId(string value);
    public abstract virtual MsgDeliveryMode get_NMSDeliveryMode();
    public abstract virtual void set_NMSDeliveryMode(MsgDeliveryMode value);
    public abstract virtual MsgPriority get_NMSPriority();
    public abstract virtual void set_NMSPriority(MsgPriority value);
    public abstract virtual bool get_NMSRedelivered();
    public abstract virtual void set_NMSRedelivered(bool value);
    public abstract virtual IDestination get_NMSReplyTo();
    public abstract virtual void set_NMSReplyTo(IDestination value);
    public abstract virtual DateTime get_NMSTimestamp();
    public abstract virtual void set_NMSTimestamp(DateTime value);
    public abstract virtual string get_NMSType();
    public abstract virtual void set_NMSType(string value);
    public abstract virtual DateTime get_NMSDeliveryTime();
    public abstract virtual void set_NMSDeliveryTime(DateTime value);
    public abstract virtual T Body();
    public abstract virtual bool IsBodyAssignableTo(Type type);
}
public interface Apache.NMS.IMessageConsumer {
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public string MessageSelector { get; }
    public abstract virtual IMessage Receive();
    public abstract virtual Task`1<IMessage> ReceiveAsync();
    public abstract virtual IMessage Receive(TimeSpan timeout);
    public abstract virtual Task`1<IMessage> ReceiveAsync(TimeSpan timeout);
    public abstract virtual IMessage ReceiveNoWait();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Listener(MessageListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Listener(MessageListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AsyncListener(AsyncMessageListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AsyncListener(AsyncMessageListener value);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public abstract virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public abstract virtual string get_MessageSelector();
}
public interface Apache.NMS.IMessageProducer {
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public MsgDeliveryMode DeliveryMode { get; public set; }
    public TimeSpan TimeToLive { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public MsgPriority Priority { get; public set; }
    public bool DisableMessageID { get; public set; }
    public bool DisableMessageTimestamp { get; public set; }
    public TimeSpan DeliveryDelay { get; public set; }
    public abstract virtual void Send(IMessage message);
    public abstract virtual void Send(IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public abstract virtual void Send(IDestination destination, IMessage message);
    public abstract virtual void Send(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public abstract virtual Task SendAsync(IMessage message);
    public abstract virtual Task SendAsync(IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public abstract virtual Task SendAsync(IDestination destination, IMessage message);
    public abstract virtual Task SendAsync(IDestination destination, IMessage message, MsgDeliveryMode deliveryMode, MsgPriority priority, TimeSpan timeToLive);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual ProducerTransformerDelegate get_ProducerTransformer();
    public abstract virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public abstract virtual MsgDeliveryMode get_DeliveryMode();
    public abstract virtual void set_DeliveryMode(MsgDeliveryMode value);
    public abstract virtual TimeSpan get_TimeToLive();
    public abstract virtual void set_TimeToLive(TimeSpan value);
    public abstract virtual TimeSpan get_RequestTimeout();
    public abstract virtual void set_RequestTimeout(TimeSpan value);
    public abstract virtual MsgPriority get_Priority();
    public abstract virtual void set_Priority(MsgPriority value);
    public abstract virtual bool get_DisableMessageID();
    public abstract virtual void set_DisableMessageID(bool value);
    public abstract virtual bool get_DisableMessageTimestamp();
    public abstract virtual void set_DisableMessageTimestamp(bool value);
    public abstract virtual TimeSpan get_DeliveryDelay();
    public abstract virtual void set_DeliveryDelay(TimeSpan value);
    public abstract virtual IMessage CreateMessage();
    public abstract virtual Task`1<IMessage> CreateMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage();
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage(string text);
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public abstract virtual IMapMessage CreateMapMessage();
    public abstract virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public abstract virtual IObjectMessage CreateObjectMessage(object body);
    public abstract virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public abstract virtual IBytesMessage CreateBytesMessage();
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public abstract virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public abstract virtual IStreamMessage CreateStreamMessage();
    public abstract virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
}
public interface Apache.NMS.INetTxConnection {
    public abstract virtual INetTxSession CreateNetTxSession();
    public abstract virtual Task`1<INetTxSession> CreateNetTxSessionAsync();
    public abstract virtual INetTxSession CreateNetTxSession(Transaction tx);
    public abstract virtual Task`1<INetTxSession> CreateNetTxSessionAsync(Transaction tx);
    public abstract virtual INetTxSession CreateNetTxSession(bool enlistsNativeMsDtcResource);
    public abstract virtual Task`1<INetTxSession> CreateNetTxSessionAsync(bool enlistsNativeMsDtcResource);
    public abstract virtual INetTxSession CreateNetTxSession(Transaction tx, bool enlistsNativeMsDtcResource);
    public abstract virtual Task`1<INetTxSession> CreateNetTxSessionAsync(Transaction tx, bool enlistsNativeMsDtcResource);
}
public interface Apache.NMS.INetTxConnectionFactory {
    public abstract virtual INetTxConnection CreateNetTxConnection();
    public abstract virtual INetTxConnection CreateNetTxConnection(string userName, string password);
}
public interface Apache.NMS.INetTxSession {
    public bool EnlistsMsDtcNativeResource { get; public set; }
    public abstract virtual void Enlist(Transaction tx);
    public abstract virtual Task EnlistAsync(Transaction tx);
    public abstract virtual bool get_EnlistsMsDtcNativeResource();
    public abstract virtual void set_EnlistsMsDtcNativeResource(bool value);
}
public interface Apache.NMS.INMSConsumer {
    public string MessageSelector { get; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public abstract virtual IMessage Receive();
    public abstract virtual Task`1<IMessage> ReceiveAsync();
    public abstract virtual IMessage Receive(TimeSpan timeout);
    public abstract virtual Task`1<IMessage> ReceiveAsync(TimeSpan timeout);
    public abstract virtual IMessage ReceiveNoWait();
    public abstract virtual T ReceiveBody();
    public abstract virtual Task`1<T> ReceiveBodyAsync();
    public abstract virtual T ReceiveBody(TimeSpan timeout);
    public abstract virtual Task`1<T> ReceiveBodyAsync(TimeSpan timeout);
    public abstract virtual T ReceiveBodyNoWait();
    public abstract virtual string get_MessageSelector();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Listener(MessageListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Listener(MessageListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AsyncListener(AsyncMessageListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AsyncListener(AsyncMessageListener value);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public abstract virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
}
public interface Apache.NMS.INMSContext {
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public bool Transacted { get; }
    public AcknowledgementMode AcknowledgementMode { get; }
    public string ClientId { get; public set; }
    public bool AutoStart { get; public set; }
    public abstract virtual INMSContext CreateContext(AcknowledgementMode acknowledgementMode);
    public abstract virtual INMSProducer CreateProducer();
    public abstract virtual Task`1<INMSProducer> CreateProducerAsync();
    public abstract virtual INMSConsumer CreateConsumer(IDestination destination);
    public abstract virtual INMSConsumer CreateConsumer(IDestination destination, string selector);
    public abstract virtual INMSConsumer CreateConsumer(IDestination destination, string selector, bool noLocal);
    public abstract virtual INMSConsumer CreateDurableConsumer(ITopic destination, string subscriptionName);
    public abstract virtual INMSConsumer CreateDurableConsumer(ITopic destination, string subscriptionName, string selector);
    public abstract virtual INMSConsumer CreateDurableConsumer(ITopic destination, string subscriptionName, string selector, bool noLocal);
    public abstract virtual INMSConsumer CreateSharedConsumer(ITopic destination, string subscriptionName);
    public abstract virtual INMSConsumer CreateSharedConsumer(ITopic destination, string subscriptionName, string selector);
    public abstract virtual INMSConsumer CreateSharedDurableConsumer(ITopic destination, string subscriptionName);
    public abstract virtual INMSConsumer CreateSharedDurableConsumer(ITopic destination, string subscriptionName, string selector);
    public abstract virtual Task`1<INMSConsumer> CreateConsumerAsync(IDestination destination);
    public abstract virtual Task`1<INMSConsumer> CreateConsumerAsync(IDestination destination, string selector);
    public abstract virtual Task`1<INMSConsumer> CreateConsumerAsync(IDestination destination, string selector, bool noLocal);
    public abstract virtual Task`1<INMSConsumer> CreateDurableConsumerAsync(ITopic destination, string subscriptionName);
    public abstract virtual Task`1<INMSConsumer> CreateDurableConsumerAsync(ITopic destination, string subscriptionName, string selector);
    public abstract virtual Task`1<INMSConsumer> CreateDurableConsumerAsync(ITopic destination, string subscriptionName, string selector, bool noLocal);
    public abstract virtual Task`1<INMSConsumer> CreateSharedConsumerAsync(ITopic destination, string subscriptionName);
    public abstract virtual Task`1<INMSConsumer> CreateSharedConsumerAsync(ITopic destination, string subscriptionName, string selector);
    public abstract virtual Task`1<INMSConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string subscriptionName);
    public abstract virtual Task`1<INMSConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string subscriptionName, string selector);
    public abstract virtual void Unsubscribe(string name);
    public abstract virtual Task UnsubscribeAsync(string name);
    public abstract virtual IQueueBrowser CreateBrowser(IQueue queue);
    public abstract virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue);
    public abstract virtual IQueueBrowser CreateBrowser(IQueue queue, string selector);
    public abstract virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue, string selector);
    public abstract virtual IQueue GetQueue(string name);
    public abstract virtual Task`1<IQueue> GetQueueAsync(string name);
    public abstract virtual ITopic GetTopic(string name);
    public abstract virtual Task`1<ITopic> GetTopicAsync(string name);
    public abstract virtual ITemporaryQueue CreateTemporaryQueue();
    public abstract virtual Task`1<ITemporaryQueue> CreateTemporaryQueueAsync();
    public abstract virtual ITemporaryTopic CreateTemporaryTopic();
    public abstract virtual Task`1<ITemporaryTopic> CreateTemporaryTopicAsync();
    public abstract virtual IMessage CreateMessage();
    public abstract virtual Task`1<IMessage> CreateMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage();
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage(string text);
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public abstract virtual IMapMessage CreateMapMessage();
    public abstract virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public abstract virtual IObjectMessage CreateObjectMessage(object body);
    public abstract virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public abstract virtual IBytesMessage CreateBytesMessage();
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public abstract virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public abstract virtual IStreamMessage CreateStreamMessage();
    public abstract virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public abstract virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public abstract virtual ProducerTransformerDelegate get_ProducerTransformer();
    public abstract virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public abstract virtual void Recover();
    public abstract virtual Task RecoverAsync();
    public abstract virtual void Acknowledge();
    public abstract virtual Task AcknowledgeAsync();
    public abstract virtual void Commit();
    public abstract virtual Task CommitAsync();
    public abstract virtual void Rollback();
    public abstract virtual Task RollbackAsync();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionStartedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionStartedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionCommittedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionCommittedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionRolledBackListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionRolledBackListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExceptionListener(ExceptionListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExceptionListener(ExceptionListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionInterruptedListener(ConnectionInterruptedListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionResumedListener(ConnectionResumedListener value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionResumedListener(ConnectionResumedListener value);
    public abstract virtual TimeSpan get_RequestTimeout();
    public abstract virtual void set_RequestTimeout(TimeSpan value);
    public abstract virtual bool get_Transacted();
    public abstract virtual AcknowledgementMode get_AcknowledgementMode();
    public abstract virtual string get_ClientId();
    public abstract virtual void set_ClientId(string value);
    public abstract virtual bool get_AutoStart();
    public abstract virtual void set_AutoStart(bool value);
    public abstract virtual void PurgeTempDestinations();
}
public interface Apache.NMS.INMSProducer {
    public IPrimitiveMap Properties { get; }
    public string NMSCorrelationID { get; public set; }
    public IDestination NMSReplyTo { get; public set; }
    public string NMSType { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public MsgDeliveryMode DeliveryMode { get; public set; }
    public TimeSpan DeliveryDelay { get; public set; }
    public TimeSpan TimeToLive { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public MsgPriority Priority { get; public set; }
    public bool DisableMessageID { get; public set; }
    public bool DisableMessageTimestamp { get; public set; }
    public abstract virtual INMSProducer Send(IDestination destination, IMessage message);
    public abstract virtual INMSProducer Send(IDestination destination, string body);
    public abstract virtual INMSProducer Send(IDestination destination, IPrimitiveMap body);
    public abstract virtual INMSProducer Send(IDestination destination, Byte[] body);
    public abstract virtual INMSProducer Send(IDestination destination, object body);
    public abstract virtual Task`1<INMSProducer> SendAsync(IDestination destination, IMessage message);
    public abstract virtual Task`1<INMSProducer> SendAsync(IDestination destination, string body);
    public abstract virtual Task`1<INMSProducer> SendAsync(IDestination destination, IPrimitiveMap body);
    public abstract virtual Task`1<INMSProducer> SendAsync(IDestination destination, Byte[] body);
    public abstract virtual Task`1<INMSProducer> SendAsync(IDestination destination, object body);
    public abstract virtual IPrimitiveMap get_Properties();
    public abstract virtual INMSProducer ClearProperties();
    public abstract virtual string get_NMSCorrelationID();
    public abstract virtual void set_NMSCorrelationID(string value);
    public abstract virtual IDestination get_NMSReplyTo();
    public abstract virtual void set_NMSReplyTo(IDestination value);
    public abstract virtual string get_NMSType();
    public abstract virtual void set_NMSType(string value);
    public abstract virtual ProducerTransformerDelegate get_ProducerTransformer();
    public abstract virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public abstract virtual MsgDeliveryMode get_DeliveryMode();
    public abstract virtual void set_DeliveryMode(MsgDeliveryMode value);
    public abstract virtual TimeSpan get_DeliveryDelay();
    public abstract virtual void set_DeliveryDelay(TimeSpan value);
    public abstract virtual TimeSpan get_TimeToLive();
    public abstract virtual void set_TimeToLive(TimeSpan value);
    public abstract virtual TimeSpan get_RequestTimeout();
    public abstract virtual void set_RequestTimeout(TimeSpan value);
    public abstract virtual MsgPriority get_Priority();
    public abstract virtual void set_Priority(MsgPriority value);
    public abstract virtual bool get_DisableMessageID();
    public abstract virtual void set_DisableMessageID(bool value);
    public abstract virtual bool get_DisableMessageTimestamp();
    public abstract virtual void set_DisableMessageTimestamp(bool value);
    public abstract virtual INMSProducer SetDeliveryDelay(TimeSpan deliveryDelay);
    public abstract virtual INMSProducer SetTimeToLive(TimeSpan timeToLive);
    public abstract virtual INMSProducer SetDeliveryMode(MsgDeliveryMode deliveryMode);
    public abstract virtual INMSProducer SetDisableMessageID(bool value);
    public abstract virtual INMSProducer SetDisableMessageTimestamp(bool value);
    public abstract virtual INMSProducer SetNMSCorrelationID(string correlationID);
    public abstract virtual INMSProducer SetNMSReplyTo(IDestination replyTo);
    public abstract virtual INMSProducer SetNMSType(string type);
    public abstract virtual INMSProducer SetPriority(MsgPriority priority);
    public abstract virtual INMSProducer SetProperty(string name, bool value);
    public abstract virtual INMSProducer SetProperty(string name, byte value);
    public abstract virtual INMSProducer SetProperty(string name, double value);
    public abstract virtual INMSProducer SetProperty(string name, float value);
    public abstract virtual INMSProducer SetProperty(string name, int value);
    public abstract virtual INMSProducer SetProperty(string name, long value);
    public abstract virtual INMSProducer SetProperty(string name, short value);
    public abstract virtual INMSProducer SetProperty(string name, char value);
    public abstract virtual INMSProducer SetProperty(string name, string value);
    public abstract virtual INMSProducer SetProperty(string name, Byte[] value);
    public abstract virtual INMSProducer SetProperty(string name, IList value);
    public abstract virtual INMSProducer SetProperty(string name, IDictionary value);
    public abstract virtual IMessage CreateMessage();
    public abstract virtual Task`1<IMessage> CreateMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage();
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage(string text);
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public abstract virtual IMapMessage CreateMapMessage();
    public abstract virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public abstract virtual IObjectMessage CreateObjectMessage(object body);
    public abstract virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public abstract virtual IBytesMessage CreateBytesMessage();
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public abstract virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public abstract virtual IStreamMessage CreateStreamMessage();
    public abstract virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
}
public class Apache.NMS.InvalidClientIDException : NMSException {
    public InvalidClientIDException(string message);
    public InvalidClientIDException(string message, string errorCode);
    public InvalidClientIDException(string message, Exception innerException);
    public InvalidClientIDException(string message, string errorCode, Exception innerException);
    protected InvalidClientIDException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.InvalidDestinationException : NMSException {
    public InvalidDestinationException(string message);
    public InvalidDestinationException(string message, string errorCode);
    public InvalidDestinationException(string message, Exception innerException);
    public InvalidDestinationException(string message, string errorCode, Exception innerException);
    protected InvalidDestinationException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.InvalidSelectorException : NMSException {
    public InvalidSelectorException(string message);
    public InvalidSelectorException(string message, string errorCode);
    public InvalidSelectorException(string message, Exception innerException);
    public InvalidSelectorException(string message, string errorCode, Exception innerException);
    protected InvalidSelectorException(SerializationInfo info, StreamingContext context);
}
public interface Apache.NMS.IObjectMessage {
    public object Body { get; public set; }
    public abstract virtual object get_Body();
    public abstract virtual void set_Body(object value);
}
[DefaultMemberAttribute("Item")]
public interface Apache.NMS.IPrimitiveMap {
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public abstract virtual void Clear();
    public abstract virtual bool Contains(object key);
    public abstract virtual void Remove(object key);
    public abstract virtual int get_Count();
    public abstract virtual ICollection get_Keys();
    public abstract virtual ICollection get_Values();
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    public abstract virtual string GetString(string key);
    public abstract virtual void SetString(string key, string value);
    public abstract virtual bool GetBool(string key);
    public abstract virtual void SetBool(string key, bool value);
    public abstract virtual byte GetByte(string key);
    public abstract virtual void SetByte(string key, byte value);
    public abstract virtual char GetChar(string key);
    public abstract virtual void SetChar(string key, char value);
    public abstract virtual short GetShort(string key);
    public abstract virtual void SetShort(string key, short value);
    public abstract virtual int GetInt(string key);
    public abstract virtual void SetInt(string key, int value);
    public abstract virtual long GetLong(string key);
    public abstract virtual void SetLong(string key, long value);
    public abstract virtual float GetFloat(string key);
    public abstract virtual void SetFloat(string key, float value);
    public abstract virtual double GetDouble(string key);
    public abstract virtual void SetDouble(string key, double value);
    public abstract virtual IList GetList(string key);
    public abstract virtual void SetList(string key, IList list);
    public abstract virtual void SetBytes(string key, Byte[] value);
    public abstract virtual void SetBytes(string key, Byte[] value, int offset, int length);
    public abstract virtual Byte[] GetBytes(string key);
    public abstract virtual IDictionary GetDictionary(string key);
    public abstract virtual void SetDictionary(string key, IDictionary dictionary);
}
public interface Apache.NMS.IQueue {
    public string QueueName { get; }
    public abstract virtual string get_QueueName();
}
public interface Apache.NMS.IQueueBrowser {
    public string MessageSelector { get; }
    public IQueue Queue { get; }
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual string get_MessageSelector();
    public abstract virtual IQueue get_Queue();
}
public interface Apache.NMS.IRedeliveryPolicy {
    public int CollisionAvoidancePercent { get; public set; }
    public bool UseCollisionAvoidance { get; public set; }
    public int InitialRedeliveryDelay { get; public set; }
    public int MaximumRedeliveries { get; public set; }
    public bool UseExponentialBackOff { get; public set; }
    public int BackOffMultiplier { get; public set; }
    public abstract virtual int get_CollisionAvoidancePercent();
    public abstract virtual void set_CollisionAvoidancePercent(int value);
    public abstract virtual bool get_UseCollisionAvoidance();
    public abstract virtual void set_UseCollisionAvoidance(bool value);
    public abstract virtual int get_InitialRedeliveryDelay();
    public abstract virtual void set_InitialRedeliveryDelay(int value);
    public abstract virtual int get_MaximumRedeliveries();
    public abstract virtual void set_MaximumRedeliveries(int value);
    public abstract virtual int RedeliveryDelay(int redeliveredCounter);
    public abstract virtual bool get_UseExponentialBackOff();
    public abstract virtual void set_UseExponentialBackOff(bool value);
    public abstract virtual int get_BackOffMultiplier();
    public abstract virtual void set_BackOffMultiplier(int value);
}
public interface Apache.NMS.ISession {
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public bool Transacted { get; }
    public AcknowledgementMode AcknowledgementMode { get; }
    public abstract virtual IMessageProducer CreateProducer();
    public abstract virtual Task`1<IMessageProducer> CreateProducerAsync();
    public abstract virtual IMessageProducer CreateProducer(IDestination destination);
    public abstract virtual Task`1<IMessageProducer> CreateProducerAsync(IDestination destination);
    public abstract virtual IMessageConsumer CreateConsumer(IDestination destination);
    public abstract virtual Task`1<IMessageConsumer> CreateConsumerAsync(IDestination destination);
    public abstract virtual IMessageConsumer CreateConsumer(IDestination destination, string selector);
    public abstract virtual Task`1<IMessageConsumer> CreateConsumerAsync(IDestination destination, string selector);
    public abstract virtual IMessageConsumer CreateConsumer(IDestination destination, string selector, bool noLocal);
    public abstract virtual Task`1<IMessageConsumer> CreateConsumerAsync(IDestination destination, string selector, bool noLocal);
    public abstract virtual IMessageConsumer CreateDurableConsumer(ITopic destination, string name);
    public abstract virtual Task`1<IMessageConsumer> CreateDurableConsumerAsync(ITopic destination, string name);
    public abstract virtual IMessageConsumer CreateDurableConsumer(ITopic destination, string name, string selector);
    public abstract virtual Task`1<IMessageConsumer> CreateDurableConsumerAsync(ITopic destination, string name, string selector);
    public abstract virtual IMessageConsumer CreateDurableConsumer(ITopic destination, string name, string selector, bool noLocal);
    public abstract virtual Task`1<IMessageConsumer> CreateDurableConsumerAsync(ITopic destination, string name, string selector, bool noLocal);
    public abstract virtual IMessageConsumer CreateSharedConsumer(ITopic destination, string name);
    public abstract virtual Task`1<IMessageConsumer> CreateSharedConsumerAsync(ITopic destination, string name);
    public abstract virtual IMessageConsumer CreateSharedConsumer(ITopic destination, string name, string selector);
    public abstract virtual Task`1<IMessageConsumer> CreateSharedConsumerAsync(ITopic destination, string name, string selector);
    public abstract virtual IMessageConsumer CreateSharedDurableConsumer(ITopic destination, string name);
    public abstract virtual Task`1<IMessageConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string name);
    public abstract virtual IMessageConsumer CreateSharedDurableConsumer(ITopic destination, string name, string selector);
    public abstract virtual Task`1<IMessageConsumer> CreateSharedDurableConsumerAsync(ITopic destination, string name, string selector);
    [ObsoleteAttribute("should use unsubscribe instead")]
public abstract virtual void DeleteDurableConsumer(string name);
    public abstract virtual void Unsubscribe(string name);
    public abstract virtual Task UnsubscribeAsync(string name);
    public abstract virtual IQueueBrowser CreateBrowser(IQueue queue);
    public abstract virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue);
    public abstract virtual IQueueBrowser CreateBrowser(IQueue queue, string selector);
    public abstract virtual Task`1<IQueueBrowser> CreateBrowserAsync(IQueue queue, string selector);
    public abstract virtual IQueue GetQueue(string name);
    public abstract virtual Task`1<IQueue> GetQueueAsync(string name);
    public abstract virtual ITopic GetTopic(string name);
    public abstract virtual Task`1<ITopic> GetTopicAsync(string name);
    public abstract virtual ITemporaryQueue CreateTemporaryQueue();
    public abstract virtual Task`1<ITemporaryQueue> CreateTemporaryQueueAsync();
    public abstract virtual ITemporaryTopic CreateTemporaryTopic();
    public abstract virtual Task`1<ITemporaryTopic> CreateTemporaryTopicAsync();
    public abstract virtual void DeleteDestination(IDestination destination);
    public abstract virtual Task DeleteDestinationAsync(IDestination destination);
    public abstract virtual IMessage CreateMessage();
    public abstract virtual Task`1<IMessage> CreateMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage();
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync();
    public abstract virtual ITextMessage CreateTextMessage(string text);
    public abstract virtual Task`1<ITextMessage> CreateTextMessageAsync(string text);
    public abstract virtual IMapMessage CreateMapMessage();
    public abstract virtual Task`1<IMapMessage> CreateMapMessageAsync();
    public abstract virtual IObjectMessage CreateObjectMessage(object body);
    public abstract virtual Task`1<IObjectMessage> CreateObjectMessageAsync(object body);
    public abstract virtual IBytesMessage CreateBytesMessage();
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync();
    public abstract virtual IBytesMessage CreateBytesMessage(Byte[] body);
    public abstract virtual Task`1<IBytesMessage> CreateBytesMessageAsync(Byte[] body);
    public abstract virtual IStreamMessage CreateStreamMessage();
    public abstract virtual Task`1<IStreamMessage> CreateStreamMessageAsync();
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public abstract virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public abstract virtual ProducerTransformerDelegate get_ProducerTransformer();
    public abstract virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
    public abstract virtual void Recover();
    public abstract virtual Task RecoverAsync();
    public abstract virtual void Acknowledge();
    public abstract virtual Task AcknowledgeAsync();
    public abstract virtual void Commit();
    public abstract virtual Task CommitAsync();
    public abstract virtual void Rollback();
    public abstract virtual Task RollbackAsync();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionStartedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionStartedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionCommittedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionCommittedListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionRolledBackListener(SessionTxEventDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionRolledBackListener(SessionTxEventDelegate value);
    public abstract virtual TimeSpan get_RequestTimeout();
    public abstract virtual void set_RequestTimeout(TimeSpan value);
    public abstract virtual bool get_Transacted();
    public abstract virtual AcknowledgementMode get_AcknowledgementMode();
}
public interface Apache.NMS.IStartable {
    public bool IsStarted { get; }
    public abstract virtual void Start();
    public abstract virtual Task StartAsync();
    public abstract virtual bool get_IsStarted();
}
public interface Apache.NMS.IStoppable {
    public abstract virtual void Stop();
    public abstract virtual Task StopAsync();
}
public interface Apache.NMS.IStreamMessage {
    public abstract virtual bool ReadBoolean();
    public abstract virtual byte ReadByte();
    public abstract virtual int ReadBytes(Byte[] value);
    public abstract virtual char ReadChar();
    public abstract virtual short ReadInt16();
    public abstract virtual int ReadInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual float ReadSingle();
    public abstract virtual double ReadDouble();
    public abstract virtual string ReadString();
    public abstract virtual object ReadObject();
    public abstract virtual void WriteBoolean(bool value);
    public abstract virtual void WriteByte(byte value);
    public abstract virtual void WriteBytes(Byte[] value);
    public abstract virtual void WriteBytes(Byte[] value, int offset, int length);
    public abstract virtual void WriteChar(char value);
    public abstract virtual void WriteInt16(short value);
    public abstract virtual void WriteInt32(int value);
    public abstract virtual void WriteInt64(long value);
    public abstract virtual void WriteSingle(float value);
    public abstract virtual void WriteDouble(double value);
    public abstract virtual void WriteString(string value);
    public abstract virtual void WriteObject(object value);
    public abstract virtual void Reset();
}
public interface Apache.NMS.ITemporaryQueue {
    public abstract virtual void Delete();
    public abstract virtual Task DeleteAsync();
}
public interface Apache.NMS.ITemporaryTopic {
    public abstract virtual void Delete();
    public abstract virtual Task DeleteAsync();
}
public interface Apache.NMS.ITextMessage {
    public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface Apache.NMS.ITopic {
    public string TopicName { get; }
    public abstract virtual string get_TopicName();
}
public interface Apache.NMS.ITrace {
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public abstract virtual void Debug(string message);
    public abstract virtual void Info(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
    public abstract virtual void Fatal(string message);
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
}
public class Apache.NMS.MessageEOFException : NMSException {
    public MessageEOFException(string message);
    public MessageEOFException(string message, string errorCode);
    public MessageEOFException(string message, Exception innerException);
    public MessageEOFException(string message, string errorCode, Exception innerException);
    protected MessageEOFException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.MessageFormatException : NMSException {
    public MessageFormatException(string message);
    public MessageFormatException(string message, string errorCode);
    public MessageFormatException(string message, Exception innerException);
    public MessageFormatException(string message, string errorCode, Exception innerException);
    protected MessageFormatException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.MessageListener : MulticastDelegate {
    public MessageListener(object object, IntPtr method);
    public virtual void Invoke(IMessage message);
    public virtual IAsyncResult BeginInvoke(IMessage message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.MessageNotReadableException : NMSException {
    public MessageNotReadableException(string message);
    public MessageNotReadableException(string message, string errorCode);
    public MessageNotReadableException(string message, Exception innerException);
    public MessageNotReadableException(string message, string errorCode, Exception innerException);
    protected MessageNotReadableException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.MessageNotWriteableException : NMSException {
    public MessageNotWriteableException(string message);
    public MessageNotWriteableException(string message, string errorCode);
    public MessageNotWriteableException(string message, Exception innerException);
    public MessageNotWriteableException(string message, string errorCode, Exception innerException);
    protected MessageNotWriteableException(SerializationInfo info, StreamingContext context);
}
public enum Apache.NMS.MsgDeliveryMode : Enum {
    public int value__;
    public static MsgDeliveryMode Persistent;
    public static MsgDeliveryMode NonPersistent;
}
public enum Apache.NMS.MsgPriority : Enum {
    public int value__;
    public static MsgPriority Lowest;
    public static MsgPriority VeryLow;
    public static MsgPriority Low;
    public static MsgPriority AboveLow;
    public static MsgPriority BelowNormal;
    public static MsgPriority Normal;
    public static MsgPriority AboveNormal;
    public static MsgPriority High;
    public static MsgPriority VeryHigh;
    public static MsgPriority Highest;
}
public class Apache.NMS.NMSConnectionException : NMSException {
    public NMSConnectionException(string message);
    public NMSConnectionException(string message, string errorCode);
    public NMSConnectionException(string message, Exception innerException);
    public NMSConnectionException(string message, string errorCode, Exception innerException);
    protected NMSConnectionException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.NMSConnectionFactory : object {
    protected IConnectionFactory factory;
    protected static Dictionary`2<string, ProviderFactoryInfo> schemaProviderFactoryMap;
    public Uri BrokerUri { get; public set; }
    public IConnectionFactory ConnectionFactory { get; }
    public IRedeliveryPolicy RedeliveryPolicy { get; public set; }
    public ConsumerTransformerDelegate ConsumerTransformer { get; public set; }
    public ProducerTransformerDelegate ProducerTransformer { get; public set; }
    private static NMSConnectionFactory();
    public NMSConnectionFactory(string providerURI, Object[] constructorParams);
    public NMSConnectionFactory(Uri uriProvider, Object[] constructorParams);
    public static IConnectionFactory CreateConnectionFactory(Uri uriProvider, Object[] constructorParams);
    private static Type GetTypeForScheme(string scheme);
    private static bool LookupConnectionFactoryInfo(String[] paths, string scheme, String& assemblyFileName, String& factoryClassName);
    private static String[] GetConfigSearchPaths();
    private static Object[] MakeParameterArray(object firstParam, Object[] varParams);
    public sealed virtual IConnection CreateConnection();
    public sealed virtual IConnection CreateConnection(string userName, string password);
    public sealed virtual Task`1<IConnection> CreateConnectionAsync();
    public sealed virtual Task`1<IConnection> CreateConnectionAsync(string userName, string password);
    public sealed virtual INMSContext CreateContext();
    public sealed virtual INMSContext CreateContext(AcknowledgementMode acknowledgementMode);
    public sealed virtual INMSContext CreateContext(string userName, string password);
    public sealed virtual INMSContext CreateContext(string userName, string password, AcknowledgementMode acknowledgementMode);
    public sealed virtual Task`1<INMSContext> CreateContextAsync();
    public sealed virtual Task`1<INMSContext> CreateContextAsync(AcknowledgementMode acknowledgementMode);
    public sealed virtual Task`1<INMSContext> CreateContextAsync(string userName, string password);
    public sealed virtual Task`1<INMSContext> CreateContextAsync(string userName, string password, AcknowledgementMode acknowledgementMode);
    public sealed virtual Uri get_BrokerUri();
    public sealed virtual void set_BrokerUri(Uri value);
    public IConnectionFactory get_ConnectionFactory();
    public sealed virtual IRedeliveryPolicy get_RedeliveryPolicy();
    public sealed virtual void set_RedeliveryPolicy(IRedeliveryPolicy value);
    public sealed virtual ConsumerTransformerDelegate get_ConsumerTransformer();
    public sealed virtual void set_ConsumerTransformer(ConsumerTransformerDelegate value);
    public sealed virtual ProducerTransformerDelegate get_ProducerTransformer();
    public sealed virtual void set_ProducerTransformer(ProducerTransformerDelegate value);
}
public class Apache.NMS.NMSConstants : object {
    public static MsgPriority defaultPriority;
    public static MsgDeliveryMode defaultDeliveryMode;
    public static TimeSpan defaultDeliveryDelay;
    public static TimeSpan defaultTimeToLive;
    public static TimeSpan defaultRequestTimeout;
    private static NMSConstants();
}
public class Apache.NMS.NMSException : Exception {
    protected string exceptionErrorCode;
    public string ErrorCode { get; }
    public NMSException(string message);
    public NMSException(string message, string errorCode);
    public NMSException(string message, Exception innerException);
    public NMSException(string message, string errorCode, Exception innerException);
    protected NMSException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
}
public class Apache.NMS.NMSSecurityException : NMSException {
    public NMSSecurityException(string message);
    public NMSSecurityException(string message, string errorCode);
    public NMSSecurityException(string message, Exception innerException);
    public NMSSecurityException(string message, string errorCode, Exception innerException);
    protected NMSSecurityException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.Policies.RedeliveryPolicy : object {
    private static object syncObject;
    private double collisionAvoidanceFactor;
    private int initialRedeliveryDelay;
    private int maximumRedeliveries;
    private int backOffMultiplier;
    private bool useCollisionAvoidance;
    private bool useExponentialBackOff;
    private static Random randomNumberGenerator;
    private static bool nextBool;
    public int CollisionAvoidancePercent { get; public set; }
    public bool UseCollisionAvoidance { get; public set; }
    public int InitialRedeliveryDelay { get; public set; }
    public int MaximumRedeliveries { get; public set; }
    public bool UseExponentialBackOff { get; public set; }
    public int BackOffMultiplier { get; public set; }
    protected static Random RandomNumberGenerator { get; }
    protected static bool NextBool { get; }
    private static RedeliveryPolicy();
    public sealed virtual int get_CollisionAvoidancePercent();
    public sealed virtual void set_CollisionAvoidancePercent(int value);
    public sealed virtual bool get_UseCollisionAvoidance();
    public sealed virtual void set_UseCollisionAvoidance(bool value);
    public sealed virtual int get_InitialRedeliveryDelay();
    public sealed virtual void set_InitialRedeliveryDelay(int value);
    public sealed virtual int get_MaximumRedeliveries();
    public sealed virtual void set_MaximumRedeliveries(int value);
    public virtual int RedeliveryDelay(int redeliveredCounter);
    public sealed virtual bool get_UseExponentialBackOff();
    public sealed virtual void set_UseExponentialBackOff(bool value);
    public sealed virtual int get_BackOffMultiplier();
    public sealed virtual void set_BackOffMultiplier(int value);
    protected static Random get_RandomNumberGenerator();
    protected static bool get_NextBool();
    public sealed virtual object Clone();
}
public class Apache.NMS.ProducerTransformerDelegate : MulticastDelegate {
    public ProducerTransformerDelegate(object object, IntPtr method);
    public virtual IMessage Invoke(ISession session, IMessageProducer producer, IMessage message);
    public virtual IAsyncResult BeginInvoke(ISession session, IMessageProducer producer, IMessage message, AsyncCallback callback, object object);
    public virtual IMessage EndInvoke(IAsyncResult result);
}
public class Apache.NMS.ProviderFactoryInfo : object {
    public string assemblyFileName;
    public string factoryClassName;
    public ProviderFactoryInfo(string aFileName, string fClassName);
}
public class Apache.NMS.ResourceAllocationException : NMSException {
    public ResourceAllocationException(string message);
    public ResourceAllocationException(string message, string errorCode);
    public ResourceAllocationException(string message, Exception innerException);
    public ResourceAllocationException(string message, string errorCode, Exception innerException);
    protected ResourceAllocationException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.SessionTxEventDelegate : MulticastDelegate {
    public SessionTxEventDelegate(object object, IntPtr method);
    public virtual void Invoke(ISession session);
    public virtual IAsyncResult BeginInvoke(ISession session, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Apache.NMS.Tracer : object {
    private static ITrace s_trace;
    public static ITrace Trace { get; public set; }
    public static bool IsDebugEnabled { get; }
    public static bool IsInfoEnabled { get; }
    public static bool IsWarnEnabled { get; }
    public static bool IsErrorEnabled { get; }
    public static bool IsFatalEnabled { get; }
    public static ITrace get_Trace();
    public static void set_Trace(ITrace value);
    public static bool get_IsDebugEnabled();
    public static bool get_IsInfoEnabled();
    public static bool get_IsWarnEnabled();
    public static bool get_IsErrorEnabled();
    public static bool get_IsFatalEnabled();
    public static void Debug(object message);
    public static void DebugFormat(string format, Object[] args);
    public static void Info(object message);
    public static void InfoFormat(string format, Object[] args);
    public static void Warn(object message);
    public static void WarnFormat(string format, Object[] args);
    public static void Error(object message);
    public static void ErrorFormat(string format, Object[] args);
    public static void Fatal(object message);
    public static void FatalFormat(string format, Object[] args);
}
public class Apache.NMS.TransactionInProgressException : NMSException {
    public TransactionInProgressException(string message);
    public TransactionInProgressException(string message, string errorCode);
    public TransactionInProgressException(string message, Exception innerException);
    public TransactionInProgressException(string message, string errorCode, Exception innerException);
    protected TransactionInProgressException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.TransactionRolledBackException : NMSException {
    public TransactionRolledBackException(string message);
    public TransactionRolledBackException(string message, string errorCode);
    public TransactionRolledBackException(string message, Exception innerException);
    public TransactionRolledBackException(string message, string errorCode, Exception innerException);
    protected TransactionRolledBackException(SerializationInfo info, StreamingContext context);
}
public class Apache.NMS.Util.Atomic`1 : AtomicReference`1<T> {
    public Atomic`1(T defaultValue);
    public bool CompareAndSet(T expected, T newValue);
}
public class Apache.NMS.Util.AtomicReference`1 : object {
    protected T atomicValue;
    public T Value { get; public set; }
    public AtomicReference`1(T defaultValue);
    public T get_Value();
    public void set_Value(T value);
    public T GetAndSet(T value);
}
public class Apache.NMS.Util.CountDownLatch : object {
    private ManualResetEvent mutex;
    private int remaining;
    public int Remaining { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public CountDownLatch(int i);
    public void countDown();
    public int get_Remaining();
    public void await();
    public bool await(TimeSpan timeout);
    public WaitHandle get_AsyncWaitHandle();
}
public class Apache.NMS.Util.DateUtils : object {
    public static DateTime windowsEpoch;
    public static DateTime javaEpoch;
    public static long epochDiff;
    private static DateUtils();
    public static long ToJavaTime(DateTime dateTime);
    public static DateTime ToDateTime(long javaTime);
    public static long ToJavaTimeUtc(DateTime dateTime);
    public static DateTime ToDateTimeUtc(long javaTime);
}
[CLSCompliantAttribute("False")]
public class Apache.NMS.Util.EndianBinaryReader : BinaryReader {
    public EndianBinaryReader(Stream input);
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Char[] ReadChars(int count);
    public virtual short ReadInt16();
    public virtual char ReadChar();
    public virtual long ReadInt64();
    public virtual ulong ReadUInt64();
    public virtual UInt32 ReadUInt32();
    public virtual ushort ReadUInt16();
    public virtual int ReadInt32();
    public virtual string ReadString();
    public string ReadString16();
    public string ReadString32();
    private string doReadString(int utfLength);
    public virtual float ReadSingle();
    public virtual double ReadDouble();
    protected static Exception CreateDataFormatException();
}
[CLSCompliantAttribute("False")]
public class Apache.NMS.Util.EndianBinaryWriter : BinaryWriter {
    public static int MAXSTRINGLEN;
    public EndianBinaryWriter(Stream output);
    public virtual void Write(long value);
    public virtual void Write(ushort value);
    public virtual void Write(int value);
    public virtual void Write(Char[] chars, int index, int count);
    public virtual void Write(Char[] chars);
    public virtual void Write(UInt32 value);
    public virtual void Write(char ch);
    public virtual void Write(ulong value);
    public virtual void Write(short value);
    public virtual void Write(string text);
    public void WriteString16(string text);
    public void WriteString32(string text);
    public virtual void Write(float value);
    public virtual void Write(double value);
    private static UInt32 CountUtf8Bytes(Char[] chars);
    private static void encodeUTF8toBuffer(Char[] chars, Byte[] buffer);
}
[CLSCompliantAttribute("False")]
public class Apache.NMS.Util.EndianSupport : object {
    public static char SwitchEndian(char x);
    public static short SwitchEndian(short x);
    public static int SwitchEndian(int x);
    public static long SwitchEndian(long x);
    public static ushort SwitchEndian(ushort x);
    public static UInt32 SwitchEndian(UInt32 x);
    public static ulong SwitchEndian(ulong x);
    public static double SwitchEndian(double x);
    public static float SwitchEndian(float x);
    public static Byte[] SwitchEndian(Byte[] x);
}
public class Apache.NMS.Util.MessagePropertyIntercepter : PrimitiveMapInterceptor {
    private static BindingFlags publicBinding;
    private Type messageType;
    public MessagePropertyIntercepter(IMessage message, IPrimitiveMap properties);
    public MessagePropertyIntercepter(IMessage message, IPrimitiveMap properties, bool readOnly);
    protected virtual object GetObjectProperty(string name);
    protected virtual void SetObjectProperty(string name, object value);
}
public abstract class Apache.NMS.Util.MessageTransformation : object {
    public T TransformMessage(IMessage message);
    public virtual void CopyProperties(IMessage fromMessage, IMessage toMessage);
    public static void CopyNMSMessageProperties(IMessage fromMessage, IMessage toMessage);
    protected abstract virtual IMessage DoCreateMessage();
    protected abstract virtual IBytesMessage DoCreateBytesMessage();
    protected abstract virtual ITextMessage DoCreateTextMessage();
    protected abstract virtual IStreamMessage DoCreateStreamMessage();
    protected abstract virtual IMapMessage DoCreateMapMessage();
    protected abstract virtual IObjectMessage DoCreateObjectMessage();
    protected abstract virtual IDestination DoTransformDestination(IDestination destination);
    protected abstract virtual void DoPostProcessMessage(IMessage message);
}
public class Apache.NMS.Util.NMSConvert : object {
    public static AcknowledgementMode ToAcknowledgementMode(string ackText);
    public static ITextMessage ToXmlMessage(IMessageProducer producer, object obj);
    public static ITextMessage ToXmlMessage(ISession session, object obj);
    public static object FromXmlMessage(IMessage message);
    internal static ITextMessage SerializeObjToMessage(ITextMessage message, object obj);
    internal static object DeserializeObjFromMessage(IMessage message);
    private static Type GetRuntimeType(string typeName);
}
public class Apache.NMS.Util.NMSExceptionSupport : object {
    public static NMSException Create(string message, string errorCode, Exception cause);
    public static NMSException Create(string message, Exception cause);
    public static NMSException Create(Exception cause);
    public static MessageEOFException CreateMessageEOFException(Exception cause);
    public static MessageFormatException CreateMessageFormatException(Exception cause);
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.Util.PrimitiveMap : object {
    public static byte NULL;
    public static byte BOOLEAN_TYPE;
    public static byte BYTE_TYPE;
    public static byte CHAR_TYPE;
    public static byte SHORT_TYPE;
    public static byte INTEGER_TYPE;
    public static byte LONG_TYPE;
    public static byte DOUBLE_TYPE;
    public static byte FLOAT_TYPE;
    public static byte STRING_TYPE;
    public static byte BYTE_ARRAY_TYPE;
    public static byte MAP_TYPE;
    public static byte LIST_TYPE;
    public static byte BIG_STRING_TYPE;
    private IDictionary dictionary;
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void Remove(object key);
    public sealed virtual int get_Count();
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual string GetString(string key);
    public sealed virtual void SetString(string key, string value);
    public sealed virtual bool GetBool(string key);
    public sealed virtual void SetBool(string key, bool value);
    public sealed virtual byte GetByte(string key);
    public sealed virtual void SetByte(string key, byte value);
    public sealed virtual char GetChar(string key);
    public sealed virtual void SetChar(string key, char value);
    public sealed virtual short GetShort(string key);
    public sealed virtual void SetShort(string key, short value);
    public sealed virtual int GetInt(string key);
    public sealed virtual void SetInt(string key, int value);
    public sealed virtual long GetLong(string key);
    public sealed virtual void SetLong(string key, long value);
    public sealed virtual float GetFloat(string key);
    public sealed virtual void SetFloat(string key, float value);
    public sealed virtual double GetDouble(string key);
    public sealed virtual void SetDouble(string key, double value);
    public sealed virtual IList GetList(string key);
    public sealed virtual void SetList(string key, IList value);
    public sealed virtual void SetBytes(string key, Byte[] value);
    public sealed virtual void SetBytes(string key, Byte[] value, int offset, int length);
    public sealed virtual Byte[] GetBytes(string key);
    public sealed virtual IDictionary GetDictionary(string key);
    public sealed virtual void SetDictionary(string key, IDictionary value);
    protected virtual void SetValue(string key, object value);
    protected virtual object GetValue(string key);
    protected virtual void CheckValueType(object value, Type type);
    protected virtual void CheckValidType(object value);
    public virtual string ToString();
    public static PrimitiveMap Unmarshal(Byte[] data);
    public static PrimitiveMap Unmarshal(Stream source);
    public Byte[] Marshal();
    public void Marshal(Stream destination);
    public static Byte[] MarshalPrimitiveMap(IDictionary map);
    public static void MarshalPrimitiveMap(IDictionary map, Stream stream);
    public static void MarshalPrimitiveMap(IDictionary map, BinaryWriter dataOut);
    public static IDictionary UnmarshalPrimitiveMap(Byte[] data);
    public static IDictionary UnmarshalPrimitiveMap(Stream source);
    public static IDictionary UnmarshalPrimitiveMap(BinaryReader dataIn);
    public static void MarshalPrimitiveList(IList list, BinaryWriter dataOut);
    public static IList UnmarshalPrimitiveList(BinaryReader dataIn);
    public static void MarshalPrimitive(BinaryWriter dataOut, object value);
    public static object UnmarshalPrimitive(BinaryReader dataIn);
}
[DefaultMemberAttribute("Item")]
public class Apache.NMS.Util.PrimitiveMapInterceptor : object {
    protected IMessage message;
    protected IPrimitiveMap properties;
    private bool readOnly;
    private bool allowByteArrays;
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool AllowByteArrays { get; public set; }
    public PrimitiveMapInterceptor(IMessage message, IPrimitiveMap properties);
    public PrimitiveMapInterceptor(IMessage message, IPrimitiveMap properties, bool readOnly);
    public PrimitiveMapInterceptor(IMessage message, IPrimitiveMap properties, bool readOnly, bool allowByteArrays);
    protected virtual object GetObjectProperty(string name);
    protected virtual void SetObjectProperty(string name, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void Remove(object key);
    public sealed virtual int get_Count();
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual string GetString(string key);
    public sealed virtual void SetString(string key, string value);
    public sealed virtual bool GetBool(string key);
    public sealed virtual void SetBool(string key, bool value);
    public sealed virtual byte GetByte(string key);
    public sealed virtual void SetByte(string key, byte value);
    public sealed virtual char GetChar(string key);
    public sealed virtual void SetChar(string key, char value);
    public sealed virtual short GetShort(string key);
    public sealed virtual void SetShort(string key, short value);
    public sealed virtual int GetInt(string key);
    public sealed virtual void SetInt(string key, int value);
    public sealed virtual long GetLong(string key);
    public sealed virtual void SetLong(string key, long value);
    public sealed virtual float GetFloat(string key);
    public sealed virtual void SetFloat(string key, float value);
    public sealed virtual double GetDouble(string key);
    public sealed virtual void SetDouble(string key, double value);
    public sealed virtual void SetBytes(string key, Byte[] value);
    public sealed virtual void SetBytes(string key, Byte[] value, int offset, int length);
    public sealed virtual Byte[] GetBytes(string key);
    public sealed virtual IList GetList(string key);
    public sealed virtual void SetList(string key, IList list);
    public sealed virtual IDictionary GetDictionary(string key);
    public sealed virtual void SetDictionary(string key, IDictionary dictionary);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_AllowByteArrays();
    public void set_AllowByteArrays(bool value);
    protected virtual void FailIfReadOnly();
}
public class Apache.NMS.Util.SessionUtil : object {
    private static string QueuePrefix;
    private static string TopicPrefix;
    private static string TempQueuePrefix;
    private static string TempTopicPrefix;
    public static IDestination GetDestination(ISession session, string destinationName);
    public static IDestination GetDestination(ISession session, string destinationName, DestinationType defaultType);
    public static IQueue GetQueue(ISession session, string queueName);
    public static ITopic GetTopic(ISession session, string topicName);
    public static void DeleteDestination(ISession session, string destinationName);
    public static void DeleteDestination(ISession session, string destinationName, DestinationType defaultType);
    public static void DeleteQueue(ISession session, string queueName);
    public static void DeleteTopic(ISession session, string topicName);
}
public class Apache.NMS.Util.URISupport : object {
    private static StringDictionary EmptyMap { get; }
    public static Uri CreateCompatibleUri(string uriString);
    public static StringDictionary ParseQuery(string query);
    public static StringDictionary ParseParameters(Uri uri);
    public static void SetProperties(object target, StringDictionary map);
    public static void SetProperties(object target, StringDictionary map, string prefix);
    public static StringDictionary GetProperties(StringDictionary props, string prefix);
    public static StringDictionary ExtractProperties(StringDictionary props, string prefix);
    public static string UrlDecode(string s);
    public static string UrlEncode(string s);
    public static string CreateQueryString(StringDictionary options);
    public static Uri CreateRemainingUri(Uri originalUri, StringDictionary parameters);
    public static string StripPrefix(string value, string prefix);
    public static Uri CreateUriWithQuery(Uri uri, string query);
    public static Uri RemoveQuery(Uri original);
    public static CompositeData ParseComposite(Uri uri);
    private static void ParseComposite(Uri uri, CompositeData rc, string ssp);
    private static StringDictionary get_EmptyMap();
    private static String[] SplitComponents(string componentString);
    public static bool CheckParenthesis(string str);
}
public class Apache.NMS.Util.XmlUtil : object {
    private static XmlWriterSettings xmlWriterSettings;
    private static string invalidXMLMatch;
    private static Regex regexInvalidXMLChars;
    private static XmlUtil();
    public static string Serialize(object obj);
    public static object Deserialize(Type objType, string text);
    public static string CleanInvalidXmlChars(string text);
    private static void serializer_UnknownNode(object sender, XmlNodeEventArgs e);
    private static void serializer_UnknownElement(object sender, XmlElementEventArgs e);
    private static void serializer_UnknownAttribute(object sender, XmlAttributeEventArgs e);
}
