[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
public static class Thrift.Collections.TCollections : object {
    public static bool Equals(IEnumerable first, IEnumerable second);
    public static int GetHashCode(IEnumerable enumerable);
}
[ObsoleteAttribute("deprecated, use HashSet<T> instead")]
public class Thrift.Collections.THashSet`1 : HashSet`1<T> {
    public THashSet`1(int capacity);
    public THashSet`1(IEnumerable`1<T> collection);
}
public interface Thrift.Processor.ITAsyncProcessor {
    public abstract virtual Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
}
public interface Thrift.Processor.ITProcessorFactory {
    public abstract virtual ITAsyncProcessor GetAsyncProcessor(TTransport trans, TServer baseServer);
}
public class Thrift.Processor.TMultiplexedProcessor : object {
    private Dictionary`2<string, ITAsyncProcessor> _serviceProcessorMap;
    [AsyncStateMachineAttribute("Thrift.Processor.TMultiplexedProcessor/<ProcessAsync>d__1")]
public Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot);
    [AsyncStateMachineAttribute("Thrift.Processor.TMultiplexedProcessor/<ProcessAsync>d__2")]
public sealed virtual Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    public void RegisterProcessor(string serviceName, ITAsyncProcessor processor);
    [AsyncStateMachineAttribute("Thrift.Processor.TMultiplexedProcessor/<FailAsync>d__4")]
private static Task FailAsync(TProtocol oprot, TMessage message, ExceptionType extype, string etxt, CancellationToken cancellationToken);
}
public class Thrift.Processor.TSingletonProcessorFactory : object {
    private ITAsyncProcessor _asyncProcessor;
    public TSingletonProcessorFactory(ITAsyncProcessor asyncProcessor);
    public sealed virtual ITAsyncProcessor GetAsyncProcessor(TTransport trans, TServer baseServer);
}
public class Thrift.Protocol.Entities.TField : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ID>k__BackingField;
    public string Name { get; public set; }
    public TType Type { get; public set; }
    public short ID { get; public set; }
    public TField(string name, TType type, short id);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TType value);
    [CompilerGeneratedAttribute]
public short get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(short value);
}
public class Thrift.Protocol.Entities.TList : ValueType {
    [CompilerGeneratedAttribute]
private TType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public TType ElementType { get; public set; }
    public int Count { get; public set; }
    public TList(TType elementType, int count);
    [CompilerGeneratedAttribute]
public TType get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(TType value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Thrift.Protocol.Entities.TMap : ValueType {
    [CompilerGeneratedAttribute]
private TType <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public TType KeyType { get; public set; }
    public TType ValueType { get; public set; }
    public int Count { get; public set; }
    public TMap(TType keyType, TType valueType, int count);
    [CompilerGeneratedAttribute]
public TType get_KeyType();
    [CompilerGeneratedAttribute]
public void set_KeyType(TType value);
    [CompilerGeneratedAttribute]
public TType get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(TType value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Thrift.Protocol.Entities.TMessage : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TMessageType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SeqID>k__BackingField;
    public string Name { get; public set; }
    public TMessageType Type { get; public set; }
    public int SeqID { get; public set; }
    public TMessage(string name, TMessageType type, int seqid);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TMessageType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TMessageType value);
    [CompilerGeneratedAttribute]
public int get_SeqID();
    [CompilerGeneratedAttribute]
public void set_SeqID(int value);
}
public enum Thrift.Protocol.Entities.TMessageType : Enum {
    public int value__;
    public static TMessageType Call;
    public static TMessageType Reply;
    public static TMessageType Exception;
    public static TMessageType Oneway;
}
public class Thrift.Protocol.Entities.TSet : ValueType {
    [CompilerGeneratedAttribute]
private TType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public TType ElementType { get; public set; }
    public int Count { get; public set; }
    public TSet(TType elementType, int count);
    public TSet(TList list);
    [CompilerGeneratedAttribute]
public TType get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(TType value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
[IsReadOnlyAttribute]
public class Thrift.Protocol.Entities.TStruct : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public TStruct(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum Thrift.Protocol.Entities.TType : Enum {
    public byte value__;
    public static TType Stop;
    public static TType Void;
    public static TType Bool;
    public static TType Byte;
    public static TType Double;
    public static TType I16;
    public static TType I32;
    public static TType I64;
    public static TType String;
    public static TType Struct;
    public static TType Map;
    public static TType Set;
    public static TType List;
    public static TType Uuid;
}
public interface Thrift.Protocol.TBase {
    public abstract virtual Task ReadAsync(TProtocol tProtocol, CancellationToken cancellationToken);
}
public class Thrift.Protocol.TBinaryProtocol : TProtocol {
    protected static UInt32 VersionMask;
    protected static UInt32 Version1;
    protected bool StrictRead;
    protected bool StrictWrite;
    private Byte[] PreAllocatedBuffer;
    public TBinaryProtocol(TTransport trans);
    public TBinaryProtocol(TTransport trans, bool strictRead, bool strictWrite);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteMessageBeginAsync>d__7")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteFieldBeginAsync>d__11")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteFieldStopAsync>d__13")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteMapBeginAsync>d__14")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteListBeginAsync>d__16")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteSetBeginAsync>d__18")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteBoolAsync>d__20")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteByteAsync>d__21")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteI16Async>d__22")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteI32Async>d__23")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteI64Async>d__24")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteDoubleAsync>d__25")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteBinaryAsync>d__26")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<WriteUuidAsync>d__27")]
public virtual Task WriteUuidAsync(Guid uuid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadMessageBeginAsync>d__28")]
public virtual ValueTask`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadFieldBeginAsync>d__32")]
public virtual ValueTask`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadMapBeginAsync>d__34")]
public virtual ValueTask`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadListBeginAsync>d__36")]
public virtual ValueTask`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadSetBeginAsync>d__38")]
public virtual ValueTask`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadBoolAsync>d__40")]
public virtual ValueTask`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadByteAsync>d__41")]
public virtual ValueTask`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadI16Async>d__42")]
public virtual ValueTask`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadI32Async>d__43")]
public virtual ValueTask`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadI64Async>d__44")]
public virtual ValueTask`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadDoubleAsync>d__45")]
public virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadBinaryAsync>d__46")]
public virtual ValueTask`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadUuidAsync>d__47")]
public virtual ValueTask`1<Guid> ReadUuidAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadStringAsync>d__48")]
public virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TBinaryProtocol/<ReadStringBodyAsync>d__49")]
private ValueTask`1<string> ReadStringBodyAsync(int size, CancellationToken cancellationToken);
    public virtual int GetMinSerializedSize(TType type);
}
public class Thrift.Protocol.TCompactProtocol : TProtocol {
    private static byte ProtocolId;
    private static byte Version;
    private static byte VersionMask;
    private static byte TypeMask;
    private static byte TypeBits;
    private static int TypeShiftAmount;
    private static byte NoTypeOverride;
    private static Byte[] TTypeToCompactType;
    private static TType[] CompactTypeToTType;
    private Stack`1<short> _lastField;
    private Nullable`1<TField> _booleanField;
    private Nullable`1<bool> _boolValue;
    private short _lastFieldId;
    private Byte[] PreAllocatedBuffer;
    private VarInt PreAllocatedVarInt;
    public TCompactProtocol(TTransport trans);
    private static TCompactProtocol();
    public void Reset();
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteMessageBeginAsync>d__18")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteFieldBeginInternalAsync>d__22")]
private Task WriteFieldBeginInternalAsync(TField field, byte fieldType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteFieldBeginAsync>d__23")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteFieldStopAsync>d__25")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteCollectionBeginAsync>d__26")]
protected Task WriteCollectionBeginAsync(TType elemType, int size, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteListBeginAsync>d__27")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteSetBeginAsync>d__29")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteBoolAsync>d__31")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteByteAsync>d__32")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteI16Async>d__33")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    private static void Int32ToVarInt(UInt32 n, VarInt& varint);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteI32Async>d__35")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    private static void Int64ToVarInt(ulong n, VarInt& varint);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteI64Async>d__37")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteDoubleAsync>d__38")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteStringAsync>d__39")]
public virtual Task WriteStringAsync(string str, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteBinaryAsync>d__40")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteUuidAsync>d__41")]
public virtual Task WriteUuidAsync(Guid uuid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<WriteMapBeginAsync>d__42")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadMessageBeginAsync>d__44")]
public virtual ValueTask`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadFieldBeginAsync>d__48")]
public virtual ValueTask`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadMapBeginAsync>d__50")]
public virtual ValueTask`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadSetBeginAsync>d__52")]
public virtual ValueTask`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadByteAsync>d__54")]
public virtual ValueTask`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadI16Async>d__55")]
public virtual ValueTask`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadI32Async>d__56")]
public virtual ValueTask`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadI64Async>d__57")]
public virtual ValueTask`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadDoubleAsync>d__58")]
public virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadStringAsync>d__59")]
public virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadBinaryAsync>d__60")]
public virtual ValueTask`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadUuidAsync>d__61")]
public virtual ValueTask`1<Guid> ReadUuidAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadListBeginAsync>d__62")]
public virtual ValueTask`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    private static byte GetCompactType(TType ttype);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadVarInt32Async>d__66")]
private ValueTask`1<UInt32> ReadVarInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TCompactProtocol/<ReadVarInt64Async>d__67")]
private ValueTask`1<ulong> ReadVarInt64Async(CancellationToken cancellationToken);
    private static int ZigzagToInt(UInt32 n);
    private static long ZigzagToLong(ulong n);
    private static TType GetTType(byte type);
    private static ulong LongToZigzag(long n);
    private static UInt32 IntToZigzag(int n);
    public virtual int GetMinSerializedSize(TType type);
}
public class Thrift.Protocol.TJsonProtocol : TProtocol {
    private static long Version;
    private Byte[] _tempBuffer;
    protected JSONBaseContext Context;
    protected Stack`1<JSONBaseContext> ContextStack;
    protected LookaheadReader Reader;
    protected Encoding Utf8Encoding;
    public TJsonProtocol(TTransport trans);
    protected void PushContext(JSONBaseContext c);
    protected void PopContext();
    private void ResetContext();
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonSyntaxCharAsync>d__10")]
protected Task ReadJsonSyntaxCharAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonStringAsync>d__11")]
private Task WriteJsonStringAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonIntegerAsync>d__12")]
private Task WriteJsonIntegerAsync(long num, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonDoubleAsync>d__13")]
private Task WriteJsonDoubleAsync(double num, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonBase64Async>d__14")]
private Task WriteJsonBase64Async(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonObjectStartAsync>d__15")]
private Task WriteJsonObjectStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonObjectEndAsync>d__16")]
private Task WriteJsonObjectEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonArrayStartAsync>d__17")]
private Task WriteJsonArrayStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteJsonArrayEndAsync>d__18")]
private Task WriteJsonArrayEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteMessageBeginAsync>d__19")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteMessageEndAsync>d__20")]
public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteStructBeginAsync>d__21")]
public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteStructEndAsync>d__22")]
public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteFieldBeginAsync>d__23")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteFieldEndAsync>d__24")]
public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteMapBeginAsync>d__26")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteMapEndAsync>d__27")]
public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteListBeginAsync>d__28")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteListEndAsync>d__29")]
public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteSetBeginAsync>d__30")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteSetEndAsync>d__31")]
public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteBoolAsync>d__32")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteByteAsync>d__33")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteI16Async>d__34")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteI32Async>d__35")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteI64Async>d__36")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteDoubleAsync>d__37")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteStringAsync>d__38")]
public virtual Task WriteStringAsync(string s, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteBinaryAsync>d__39")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<WriteUuidAsync>d__40")]
public virtual Task WriteUuidAsync(Guid uuid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonStringAsync>d__41")]
private ValueTask`1<Byte[]> ReadJsonStringAsync(bool skipContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonNumericCharsAsync>d__42")]
private ValueTask`1<string> ReadJsonNumericCharsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonIntegerAsync>d__43")]
private ValueTask`1<long> ReadJsonIntegerAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonDoubleAsync>d__44")]
private ValueTask`1<double> ReadJsonDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonBase64Async>d__45")]
private ValueTask`1<Byte[]> ReadJsonBase64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonObjectStartAsync>d__46")]
private Task ReadJsonObjectStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonObjectEndAsync>d__47")]
private Task ReadJsonObjectEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonArrayStartAsync>d__48")]
private Task ReadJsonArrayStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadJsonArrayEndAsync>d__49")]
private Task ReadJsonArrayEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadMessageBeginAsync>d__50")]
public virtual ValueTask`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadMessageEndAsync>d__51")]
public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadStructBeginAsync>d__52")]
public virtual ValueTask`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadStructEndAsync>d__53")]
public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadFieldBeginAsync>d__54")]
public virtual ValueTask`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadFieldEndAsync>d__55")]
public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadMapBeginAsync>d__56")]
public virtual ValueTask`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadMapEndAsync>d__57")]
public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadListBeginAsync>d__58")]
public virtual ValueTask`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadListEndAsync>d__59")]
public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadSetBeginAsync>d__60")]
public virtual ValueTask`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadSetEndAsync>d__61")]
public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadBoolAsync>d__62")]
public virtual ValueTask`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadByteAsync>d__63")]
public virtual ValueTask`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadI16Async>d__64")]
public virtual ValueTask`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadI32Async>d__65")]
public virtual ValueTask`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadI64Async>d__66")]
public virtual ValueTask`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadDoubleAsync>d__67")]
public virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadStringAsync>d__68")]
public virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadBinaryAsync>d__69")]
public virtual ValueTask`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TJsonProtocol/<ReadUuidAsync>d__70")]
public virtual ValueTask`1<Guid> ReadUuidAsync(CancellationToken cancellationToken);
    public virtual int GetMinSerializedSize(TType type);
}
public class Thrift.Protocol.TMultiplexedProtocol : TProtocolDecorator {
    public static string Separator;
    private string _serviceName;
    public TMultiplexedProtocol(TProtocol protocol, string serviceName);
    [AsyncStateMachineAttribute("Thrift.Protocol.TMultiplexedProtocol/<WriteMessageBeginAsync>d__3")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(TMessage message, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Thrift.Protocol.ToStringExtensions : object {
    [ExtensionAttribute]
public static void ToString(object self, StringBuilder sb, bool first);
}
public abstract class Thrift.Protocol.TProtocol : object {
    private bool _isDisposed;
    protected int RecursionDepth;
    protected TTransport Trans;
    protected static TStruct AnonymousStruct;
    protected static TField StopField;
    [CompilerGeneratedAttribute]
private int <RecursionLimit>k__BackingField;
    public TTransport Transport { get; }
    protected int RecursionLimit { get; protected set; }
    protected TProtocol(TTransport trans);
    private static TProtocol();
    public TTransport get_Transport();
    [CompilerGeneratedAttribute]
protected int get_RecursionLimit();
    [CompilerGeneratedAttribute]
protected void set_RecursionLimit(int value);
    public sealed virtual void Dispose();
    public void IncrementRecursionDepth();
    public void DecrementRecursionDepth();
    protected virtual void Dispose(bool disposing);
    protected void CheckReadBytesAvailable(TSet set);
    protected void CheckReadBytesAvailable(TList list);
    protected void CheckReadBytesAvailable(TMap map);
    public abstract virtual int GetMinSerializedSize(TType type);
    public abstract virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    public abstract virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    public abstract virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    public abstract virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    public abstract virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    public abstract virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    public abstract virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    public abstract virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    public abstract virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    public abstract virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    public abstract virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    public abstract virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocol/<WriteStringAsync>d__39")]
public virtual Task WriteStringAsync(string s, CancellationToken cancellationToken);
    public abstract virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    public abstract virtual Task WriteUuidAsync(Guid uuid, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    public abstract virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<short> ReadI16Async(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<int> ReadI32Async(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<long> ReadI64Async(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocol/<ReadStringAsync>d__60")]
public virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Guid> ReadUuidAsync(CancellationToken cancellationToken);
}
public abstract class Thrift.Protocol.TProtocolDecorator : TProtocol {
    private TProtocol _wrappedProtocol;
    protected TProtocolDecorator(TProtocol protocol);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteMessageBeginAsync>d__2")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteMessageEndAsync>d__3")]
public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteStructBeginAsync>d__4")]
public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteStructEndAsync>d__5")]
public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteFieldBeginAsync>d__6")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteFieldEndAsync>d__7")]
public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteFieldStopAsync>d__8")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteMapBeginAsync>d__9")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteMapEndAsync>d__10")]
public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteListBeginAsync>d__11")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteListEndAsync>d__12")]
public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteSetBeginAsync>d__13")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteSetEndAsync>d__14")]
public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteBoolAsync>d__15")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteByteAsync>d__16")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteI16Async>d__17")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteI32Async>d__18")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteI64Async>d__19")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteDoubleAsync>d__20")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteStringAsync>d__21")]
public virtual Task WriteStringAsync(string s, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteBinaryAsync>d__22")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<WriteUuidAsync>d__23")]
public virtual Task WriteUuidAsync(Guid uuid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadMessageBeginAsync>d__24")]
public virtual ValueTask`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadMessageEndAsync>d__25")]
public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadStructBeginAsync>d__26")]
public virtual ValueTask`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadStructEndAsync>d__27")]
public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadFieldBeginAsync>d__28")]
public virtual ValueTask`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadFieldEndAsync>d__29")]
public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadMapBeginAsync>d__30")]
public virtual ValueTask`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadMapEndAsync>d__31")]
public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadListBeginAsync>d__32")]
public virtual ValueTask`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadListEndAsync>d__33")]
public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadSetBeginAsync>d__34")]
public virtual ValueTask`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadSetEndAsync>d__35")]
public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadBoolAsync>d__36")]
public virtual ValueTask`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadByteAsync>d__37")]
public virtual ValueTask`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadI16Async>d__38")]
public virtual ValueTask`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadI32Async>d__39")]
public virtual ValueTask`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadI64Async>d__40")]
public virtual ValueTask`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadDoubleAsync>d__41")]
public virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadStringAsync>d__42")]
public virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadBinaryAsync>d__43")]
public virtual ValueTask`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocol.TProtocolDecorator/<ReadUuidAsync>d__44")]
public virtual ValueTask`1<Guid> ReadUuidAsync(CancellationToken cancellationToken);
    public virtual int GetMinSerializedSize(TType type);
}
public class Thrift.Protocol.TProtocolException : TException {
    public static int UNKNOWN;
    public static int INVALID_DATA;
    public static int NEGATIVE_SIZE;
    public static int SIZE_LIMIT;
    public static int BAD_VERSION;
    public static int NOT_IMPLEMENTED;
    public static int DEPTH_LIMIT;
    protected int Type;
    public TProtocolException(int type, Exception inner);
    public TProtocolException(int type, string message, Exception inner);
    public TProtocolException(string message, Exception inner);
    public int GetExceptionType();
}
public abstract class Thrift.Protocol.TProtocolFactory : object {
    public abstract virtual TProtocol GetProtocol(TTransport trans);
}
public interface Thrift.Protocol.TUnionBase {
    public abstract virtual Task WriteAsync(TProtocol tProtocol, CancellationToken cancellationToken);
}
internal static class Thrift.Protocol.Utilities.TBase64Utils : object {
    internal static string EncodeTable;
    private static Int32[] DecodeTable;
    private static TBase64Utils();
    internal static void Encode(Byte[] src, int srcOff, int len, Byte[] dst, int dstOff);
    internal static void Decode(Byte[] src, int srcOff, int len, Byte[] dst, int dstOff);
}
[ExtensionAttribute]
public static class Thrift.Protocol.Utilities.TGuidExtensions : object {
    [ExtensionAttribute]
public static Guid SwapByteOrder(Guid self);
    private static void SwapBytes(Byte& one, Byte& two);
}
public static class Thrift.Protocol.Utilities.TJSONProtocolConstants : object {
    public static Byte[] Comma;
    public static Byte[] Colon;
    public static Byte[] LeftBrace;
    public static Byte[] RightBrace;
    public static Byte[] LeftBracket;
    public static Byte[] RightBracket;
    public static Byte[] Quote;
    public static Byte[] Backslash;
    public static Byte[] JsonCharTable;
    public static Char[] EscapeChars;
    public static Byte[] EscapeCharValues;
    public static Byte[] EscSequences;
    private static TJSONProtocolConstants();
}
public static class Thrift.Protocol.Utilities.TJSONProtocolHelper : object {
    public static Byte[] GetTypeNameForTypeId(TType typeId);
    public static TType GetTypeIdForTypeName(Byte[] name);
    public static bool IsJsonNumeric(byte b);
    public static byte ToHexVal(byte ch);
    public static byte ToHexChar(byte val);
}
public static class Thrift.Protocol.Utilities.TProtocolUtil : object {
    [AsyncStateMachineAttribute("Thrift.Protocol.Utilities.TProtocolUtil/<SkipAsync>d__0")]
public static Task SkipAsync(TProtocol protocol, TType type, CancellationToken cancellationToken);
}
public interface Thrift.Server.ITServerEventHandler {
    public abstract virtual Task PreServeAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<object> CreateContextAsync(TProtocol input, TProtocol output, CancellationToken cancellationToken);
    public abstract virtual Task DeleteContextAsync(object serverContext, TProtocol input, TProtocol output, CancellationToken cancellationToken);
    public abstract virtual Task ProcessContextAsync(object serverContext, TTransport transport, CancellationToken cancellationToken);
}
public abstract class Thrift.Server.TServer : object {
    protected ILogger Logger;
    protected TProtocolFactory InputProtocolFactory;
    protected TTransportFactory InputTransportFactory;
    protected ITProcessorFactory ProcessorFactory;
    protected TProtocolFactory OutputProtocolFactory;
    protected TTransportFactory OutputTransportFactory;
    protected ITServerEventHandler ServerEventHandler;
    protected TServerTransport ServerTransport;
    protected TServer(ITProcessorFactory processorFactory, TServerTransport serverTransport, TTransportFactory inputTransportFactory, TTransportFactory outputTransportFactory, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, ILogger logger);
    public void SetEventHandler(ITServerEventHandler seh);
    public ITServerEventHandler GetEventHandler();
    protected void LogError(string msg);
    public abstract virtual void Stop();
    public virtual void Start();
    public virtual Task ServeAsync(CancellationToken cancellationToken);
}
public interface Thrift.Server.TServerEventHandler {
}
public class Thrift.Server.TSimpleAsyncServer : TServer {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) stop;
    private CancellationToken ServerCancellationToken;
    public TSimpleAsyncServer(ITProcessorFactory itProcessorFactory, TServerTransport serverTransport, TTransportFactory inputTransportFactory, TTransportFactory outputTransportFactory, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, ILogger logger);
    public TSimpleAsyncServer(ITProcessorFactory itProcessorFactory, TServerTransport serverTransport, TTransportFactory inputTransportFactory, TTransportFactory outputTransportFactory, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, ILoggerFactory loggerFactory);
    public TSimpleAsyncServer(ITAsyncProcessor processor, TServerTransport serverTransport, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Thrift.Server.TSimpleAsyncServer/<ServeAsync>d__5")]
public virtual Task ServeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Server.TSimpleAsyncServer/<ExecuteAsync>d__6")]
private Task ExecuteAsync(TTransport client);
    public virtual void Stop();
}
public class Thrift.Server.TThreadPoolAsyncServer : TServer {
    private static int DEFAULT_MIN_THREADS;
    private static int DEFAULT_MAX_THREADS;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) stop;
    private CancellationToken ServerCancellationToken;
    public TThreadPoolAsyncServer(ITAsyncProcessor processor, TServerTransport serverTransport, ILogger logger);
    public TThreadPoolAsyncServer(ITAsyncProcessor processor, TServerTransport serverTransport, TTransportFactory transportFactory, TProtocolFactory protocolFactory);
    public TThreadPoolAsyncServer(ITProcessorFactory processorFactory, TServerTransport serverTransport, TTransportFactory transportFactory, TProtocolFactory protocolFactory);
    public TThreadPoolAsyncServer(ITProcessorFactory processorFactory, TServerTransport serverTransport, TTransportFactory inputTransportFactory, TTransportFactory outputTransportFactory, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, int minThreadPoolThreads, int maxThreadPoolThreads, ILogger logger);
    public TThreadPoolAsyncServer(ITProcessorFactory processorFactory, TServerTransport serverTransport, TTransportFactory inputTransportFactory, TTransportFactory outputTransportFactory, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, Configuration threadConfig, ILogger logger);
    [AsyncStateMachineAttribute("Thrift.Server.TThreadPoolAsyncServer/<ServeAsync>d__10")]
public virtual Task ServeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Server.TThreadPoolAsyncServer/<ExecuteAsync>d__11")]
private Task ExecuteAsync(TTransport client);
    public virtual void Stop();
}
public class Thrift.TApplicationException : TException {
    private static int MessageTypeFieldId;
    private static int ExTypeFieldId;
    [CompilerGeneratedAttribute]
private ExceptionType <Type>k__BackingField;
    public ExceptionType Type { get; private set; }
    public TApplicationException(ExceptionType type);
    public TApplicationException(ExceptionType type, string message);
    [CompilerGeneratedAttribute]
public ExceptionType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(ExceptionType value);
    [AsyncStateMachineAttribute("Thrift.TApplicationException/<ReadAsync>d__10")]
public static ValueTask`1<TApplicationException> ReadAsync(TProtocol inputProtocol, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.TApplicationException/<WriteAsync>d__11")]
public Task WriteAsync(TProtocol outputProtocol, CancellationToken cancellationToken);
}
public abstract class Thrift.TBaseClient : object {
    private TProtocol _inputProtocol;
    private TProtocol _outputProtocol;
    private bool _isDisposed;
    private int _seqId;
    public Guid ClientId;
    public TProtocol InputProtocol { get; }
    public TProtocol OutputProtocol { get; }
    public int SeqId { get; }
    protected TBaseClient(TProtocol inputProtocol, TProtocol outputProtocol);
    public TProtocol get_InputProtocol();
    public TProtocol get_OutputProtocol();
    public int get_SeqId();
    [AsyncStateMachineAttribute("Thrift.TBaseClient/<OpenTransportAsync>d__12")]
public virtual Task OpenTransportAsync();
    [AsyncStateMachineAttribute("Thrift.TBaseClient/<OpenTransportAsync>d__13")]
public virtual Task OpenTransportAsync(CancellationToken cancellationToken);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.TConfiguration : object {
    public static int DEFAULT_MAX_MESSAGE_SIZE;
    public static int DEFAULT_MAX_FRAME_SIZE;
    public static int DEFAULT_RECURSION_DEPTH;
    [CompilerGeneratedAttribute]
private int <MaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFrameSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecursionLimit>k__BackingField;
    public int MaxMessageSize { get; public set; }
    public int MaxFrameSize { get; public set; }
    public int RecursionLimit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxFrameSize();
    [CompilerGeneratedAttribute]
public void set_MaxFrameSize(int value);
    [CompilerGeneratedAttribute]
public int get_RecursionLimit();
    [CompilerGeneratedAttribute]
public void set_RecursionLimit(int value);
}
public class Thrift.TException : Exception {
    public TException(string message, Exception inner);
}
public class Thrift.Transport.Client.THttpTransport : TEndpointTransport {
    private X509Certificate[] _certificates;
    private Uri _uri;
    private int _connectTimeout;
    private HttpClient _httpClient;
    private Stream _inputStream;
    private MemoryStream _outputStream;
    private bool _isDisposed;
    public string UserAgent;
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <ContentType>k__BackingField;
    public int ConnectTimeout { get; public set; }
    public bool IsOpen { get; }
    public HttpRequestHeaders RequestHeaders { get; }
    public MediaTypeHeaderValue ContentType { get; public set; }
    public THttpTransport(Uri uri, TConfiguration config, IDictionary`2<string, string> customRequestHeaders, string userAgent);
    public THttpTransport(Uri uri, TConfiguration config, IEnumerable`1<X509Certificate> certificates, IDictionary`2<string, string> customRequestHeaders, string userAgent);
    public THttpTransport(HttpClient httpClient, TConfiguration config, Uri uri);
    public void set_ConnectTimeout(int value);
    public int get_ConnectTimeout();
    public virtual bool get_IsOpen();
    public HttpRequestHeaders get_RequestHeaders();
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(MediaTypeHeaderValue value);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transport.Client.THttpTransport/<ReadAsync>d__24")]
public virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.THttpTransport/<WriteAsync>d__25")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    public virtual HttpClientHandler CreateHttpClientHandler(X509Certificate[] certificates);
    private HttpClient CreateClient(IDictionary`2<string, string> customRequestHeaders);
    private void ConfigureClient(HttpClient httpClient);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.THttpTransport/<FlushAsync>d__29")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transport.Client.TMemoryBufferTransport : TEndpointTransport {
    private bool IsDisposed;
    private Byte[] Bytes;
    private int _bytesUsed;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    public int Capacity { get; public set; }
    public int Length { get; public set; }
    public bool IsOpen { get; }
    public TMemoryBufferTransport(TConfiguration config, int initialCapacity);
    public TMemoryBufferTransport(Byte[] buf, TConfiguration config);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Length();
    public void set_Length(int value);
    public void SetLength(int value);
    public virtual bool get_IsOpen();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public void Seek(int delta, SeekOrigin origin);
    public virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public Byte[] GetBuffer();
    internal bool TryGetBuffer(ArraySegment`1& bufSegment);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transport.Client.TNamedPipeTransport : TEndpointTransport {
    private NamedPipeClientStream PipeStream;
    private int ConnectTimeout;
    private static int DEFAULT_CONNECT_TIMEOUT;
    public bool IsOpen { get; }
    public TNamedPipeTransport(string pipe, TConfiguration config, int timeout);
    public TNamedPipeTransport(string server, string pipe, TConfiguration config, int timeout);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TNamedPipeTransport/<OpenAsync>d__7")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TNamedPipeTransport/<ReadAsync>d__9")]
public virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TNamedPipeTransport/<WriteAsync>d__10")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TNamedPipeTransport/<FlushAsync>d__11")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transport.Client.TSocketTransport : TStreamTransport {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private TcpClient <TcpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public TcpClient TcpClient { get; private set; }
    public IPAddress Host { get; }
    public int Port { get; }
    unknown int Timeout {public set; }
    public bool IsOpen { get; }
    public TSocketTransport(TcpClient client, TConfiguration config);
    public TSocketTransport(IPAddress host, int port, TConfiguration config, int timeout);
    public TSocketTransport(string host, int port, TConfiguration config, int timeout);
    public TSocketTransport(string hostNameOrIpAddress, int port, bool connectClient, TConfiguration config, int timeout);
    private void SetInputOutputStream();
    [CompilerGeneratedAttribute]
public TcpClient get_TcpClient();
    [CompilerGeneratedAttribute]
private void set_TcpClient(TcpClient value);
    [CompilerGeneratedAttribute]
public IPAddress get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
    public void set_Timeout(int value);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TSocketTransport/<OpenAsync>d__20")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transport.Client.TStreamTransport : TEndpointTransport {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    private Stream _InputStream;
    protected Stream OutputStream { get; protected set; }
    protected Stream InputStream { get; protected set; }
    public bool IsOpen { get; }
    protected TStreamTransport(TConfiguration config);
    public TStreamTransport(Stream inputStream, Stream outputStream, TConfiguration config);
    [CompilerGeneratedAttribute]
protected Stream get_OutputStream();
    [CompilerGeneratedAttribute]
protected void set_OutputStream(Stream value);
    protected Stream get_InputStream();
    protected void set_InputStream(Stream value);
    public virtual bool get_IsOpen();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TStreamTransport/<ReadAsync>d__15")]
public virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TStreamTransport/<WriteAsync>d__16")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TStreamTransport/<FlushAsync>d__17")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transport.Client.TTlsSocketTransport : TStreamTransport {
    private X509Certificate2 _certificate;
    private RemoteCertificateValidationCallback _certValidator;
    private IPAddress _host;
    private bool _isServer;
    private LocalCertificateSelectionCallback _localCertificateSelectionCallback;
    private int _port;
    private SslProtocols _sslProtocols;
    private string _targetHost;
    private TcpClient _client;
    private SslStream _secureStream;
    private int _timeout;
    public static SslProtocols DefaultSslProtocols;
    unknown int Timeout {public set; }
    public TcpClient TcpClient { get; }
    public IPAddress Host { get; }
    public int Port { get; }
    public bool IsOpen { get; }
    public TTlsSocketTransport(TcpClient client, TConfiguration config, X509Certificate2 certificate, bool isServer, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketTransport(IPAddress host, int port, TConfiguration config, string certificatePath, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketTransport(IPAddress host, int port, TConfiguration config, X509Certificate2 certificate, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketTransport(IPAddress host, int port, TConfiguration config, int timeout, X509Certificate2 certificate, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketTransport(string host, int port, TConfiguration config, int timeout, X509Certificate2 certificate, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public void set_Timeout(int value);
    public TcpClient get_TcpClient();
    public IPAddress get_Host();
    public int get_Port();
    public virtual bool get_IsOpen();
    private void InitSocket();
    private bool DefaultCertificateValidator(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslValidationErrors);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TTlsSocketTransport/<OpenAsync>d__29")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.Client.TTlsSocketTransport/<SetupTlsAsync>d__30")]
public Task SetupTlsAsync();
    public virtual void Close();
}
[FlagsAttribute]
public enum Thrift.Transport.Server.NamedPipeServerFlags : Enum {
    public int value__;
    public static NamedPipeServerFlags None;
    public static NamedPipeServerFlags OnlyLocalClients;
}
internal class Thrift.Transport.Server.NullLogger`1 : object {
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual void Dispose();
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Thrift.Transport.Server.THttpServerTransport : object {
    protected static string ContentType;
    protected Encoding Encoding;
    protected TProtocolFactory InputProtocolFactory;
    protected TProtocolFactory OutputProtocolFactory;
    protected TTransportFactory InputTransportFactory;
    protected TTransportFactory OutputTransportFactory;
    protected ITAsyncProcessor Processor;
    protected TConfiguration Configuration;
    public THttpServerTransport(ITAsyncProcessor processor, TConfiguration config, RequestDelegate next, ILoggerFactory loggerFactory);
    public THttpServerTransport(ITAsyncProcessor processor, TConfiguration config, TProtocolFactory protocolFactory, TTransportFactory transFactory, RequestDelegate next, ILoggerFactory loggerFactory);
    public THttpServerTransport(ITAsyncProcessor processor, TConfiguration config, TProtocolFactory inputProtocolFactory, TProtocolFactory outputProtocolFactory, TTransportFactory inputTransFactory, TTransportFactory outputTransFactory, RequestDelegate next, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Thrift.Transport.Server.THttpServerTransport/<Invoke>d__11")]
public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("Thrift.Transport.Server.THttpServerTransport/<ProcessRequestAsync>d__12")]
public Task ProcessRequestAsync(HttpContext context, CancellationToken cancellationToken);
}
public class Thrift.Transport.Server.TNamedPipeServerTransport : TServerTransport {
    private string _pipeAddress;
    private bool _asyncMode;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isPending;
    private List`1<TaskStreamPair> _streams;
    private bool _onlyLocalClients;
    private byte _numListenPipes;
    private static string Kernel32;
    public TNamedPipeServerTransport(string pipeAddress, TConfiguration config, NamedPipeServerFlags flags, int numListenPipes);
    public virtual bool IsOpen();
    public virtual void Listen();
    private static void Close(NamedPipeServerStream pipe);
    public virtual void Close();
    public virtual bool IsClientPending();
    private void EnsurePipeInstances();
    private TaskStreamPair CreatePipeInstance();
    internal static IntPtr CreateNamedPipe(string lpName, UInt32 dwOpenMode, UInt32 dwPipeMode, UInt32 nMaxInstances, UInt32 nOutBufferSize, UInt32 nInBufferSize, UInt32 nDefaultTimeOut, SECURITY_ATTRIBUTES pipeSecurityDescriptor);
    private static SafePipeHandle CreatePipeNative(string name, int inbuf, int outbuf, bool OnlyLocalClients);
    [AsyncStateMachineAttribute("Thrift.Transport.Server.TNamedPipeServerTransport/<AcceptImplementationAsync>d__19")]
protected virtual ValueTask`1<TTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
}
public class Thrift.Transport.Server.TServerSocketTransport : TServerTransport {
    private int _clientTimeout;
    private TcpListener _server;
    public TServerSocketTransport(TcpListener listener, TConfiguration config, int clientTimeout);
    public TServerSocketTransport(int port, TConfiguration config, int clientTimeout);
    public virtual bool IsOpen();
    public int GetPort();
    public virtual void Listen();
    public virtual bool IsClientPending();
    [AsyncStateMachineAttribute("Thrift.Transport.Server.TServerSocketTransport/<AcceptImplementationAsync>d__8")]
protected virtual ValueTask`1<TTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    public virtual void Close();
}
public class Thrift.Transport.Server.TTlsServerSocketTransport : TServerTransport {
    private RemoteCertificateValidationCallback _clientCertValidator;
    private int _clientTimeout;
    private LocalCertificateSelectionCallback _localCertificateSelectionCallback;
    private X509Certificate2 _serverCertificate;
    private SslProtocols _sslProtocols;
    private TcpListener _server;
    public TTlsServerSocketTransport(TcpListener listener, TConfiguration config, X509Certificate2 certificate, RemoteCertificateValidationCallback clientCertValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsServerSocketTransport(int port, TConfiguration config, X509Certificate2 certificate, RemoteCertificateValidationCallback clientCertValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public virtual bool IsOpen();
    public int GetPort();
    public virtual void Listen();
    public virtual bool IsClientPending();
    [AsyncStateMachineAttribute("Thrift.Transport.Server.TTlsServerSocketTransport/<AcceptImplementationAsync>d__12")]
protected virtual ValueTask`1<TTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    public virtual void Close();
}
public class Thrift.Transport.TBufferedTransport : TLayeredTransport {
    private int DesiredBufferSize;
    private TMemoryBufferTransport ReadBuffer;
    private TMemoryBufferTransport WriteBuffer;
    private bool IsDisposed;
    public TTransport UnderlyingTransport { get; }
    public bool IsOpen { get; }
    public TBufferedTransport(TTransport transport, int bufSize);
    public TTransport get_UnderlyingTransport();
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transport.TBufferedTransport/<OpenAsync>d__10")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transport.TBufferedTransport/<ReadAsync>d__12")]
public virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TBufferedTransport/<WriteAsync>d__13")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TBufferedTransport/<FlushAsync>d__14")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void CheckReadBytesAvailable(long numBytes);
    public virtual void ResetConsumedMessageSize(long newSize);
    private void CheckNotDisposed();
    protected virtual void Dispose(bool disposing);
}
public abstract class Thrift.Transport.TEndpointTransport : TTransport {
    [CompilerGeneratedAttribute]
private long <KnownMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RemainingMessageSize>k__BackingField;
    private TConfiguration _configuration;
    protected long MaxMessageSize { get; }
    protected long KnownMessageSize { get; private set; }
    protected long RemainingMessageSize { get; private set; }
    public TConfiguration Configuration { get; }
    public TEndpointTransport(TConfiguration config);
    protected long get_MaxMessageSize();
    [CompilerGeneratedAttribute]
protected long get_KnownMessageSize();
    [CompilerGeneratedAttribute]
private void set_KnownMessageSize(long value);
    [CompilerGeneratedAttribute]
protected long get_RemainingMessageSize();
    [CompilerGeneratedAttribute]
private void set_RemainingMessageSize(long value);
    public virtual TConfiguration get_Configuration();
    public virtual void ResetConsumedMessageSize(long newSize);
    public virtual void UpdateKnownMessageSize(long size);
    public virtual void CheckReadBytesAvailable(long numBytes);
    protected void CountConsumedMessageBytes(long numBytes);
}
public class Thrift.Transport.TFramedTransport : TLayeredTransport {
    private static int HeaderSize;
    private Byte[] HeaderBuf;
    private TMemoryBufferTransport ReadBuffer;
    private TMemoryBufferTransport WriteBuffer;
    private bool IsDisposed;
    public bool IsOpen { get; }
    public TFramedTransport(TTransport transport);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transport.TFramedTransport/<OpenAsync>d__9")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transport.TFramedTransport/<ReadAsync>d__11")]
public virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TFramedTransport/<ReadFrameAsync>d__12")]
private ValueTask ReadFrameAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TFramedTransport/<WriteAsync>d__13")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TFramedTransport/<FlushAsync>d__14")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    private void InitWriteBuffer();
    public virtual void CheckReadBytesAvailable(long numBytes);
    private void CheckNotDisposed();
    protected virtual void Dispose(bool disposing);
    public virtual void ResetConsumedMessageSize(long newSize);
}
public abstract class Thrift.Transport.TLayeredTransport : TTransport {
    public TTransport InnerTransport;
    public TConfiguration Configuration { get; }
    public TLayeredTransport(TTransport transport);
    public virtual TConfiguration get_Configuration();
    public virtual void UpdateKnownMessageSize(long size);
    public virtual void CheckReadBytesAvailable(long numBytes);
    public virtual void ResetConsumedMessageSize(long newSize);
}
public abstract class Thrift.Transport.TServerTransport : object {
    public TConfiguration Configuration;
    public TServerTransport(TConfiguration config);
    public abstract virtual bool IsOpen();
    public abstract virtual void Listen();
    public abstract virtual void Close();
    public abstract virtual bool IsClientPending();
    protected abstract virtual ValueTask`1<TTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TServerTransport/<AcceptAsync>d__7")]
public ValueTask`1<TTransport> AcceptAsync(CancellationToken cancellationToken);
}
public abstract class Thrift.Transport.TTransport : object {
    private Byte[] _peekBuffer;
    private bool _hasPeekByte;
    public bool IsOpen { get; }
    public TConfiguration Configuration { get; }
    public abstract virtual bool get_IsOpen();
    public abstract virtual TConfiguration get_Configuration();
    public abstract virtual void UpdateKnownMessageSize(long size);
    public abstract virtual void CheckReadBytesAvailable(long numBytes);
    public abstract virtual void ResetConsumedMessageSize(long newSize);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Thrift.Transport.TTransport/<PeekAsync>d__10")]
public ValueTask`1<bool> PeekAsync(CancellationToken cancellationToken);
    public abstract virtual Task OpenAsync(CancellationToken cancellationToken);
    public abstract virtual void Close();
    protected static void ValidateBufferArgs(Byte[] buffer, int offset, int length);
    public abstract virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TTransport/<ReadAllAsync>d__15")]
public virtual ValueTask`1<int> ReadAllAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TTransport/<WriteAsync>d__16")]
public virtual Task WriteAsync(Byte[] buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transport.TTransport/<WriteAsync>d__17")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length);
    public abstract virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
    protected abstract virtual void Dispose(bool disposing);
}
public class Thrift.Transport.TTransportException : TException {
    [CompilerGeneratedAttribute]
private ExceptionType <ExType>k__BackingField;
    public ExceptionType ExType { get; private set; }
    public ExceptionType Type { get; }
    public TTransportException(ExceptionType exType, Exception inner);
    public TTransportException(ExceptionType exType, string message, Exception inner);
    public TTransportException(string message, Exception inner);
    [CompilerGeneratedAttribute]
public ExceptionType get_ExType();
    [CompilerGeneratedAttribute]
private void set_ExType(ExceptionType value);
    public ExceptionType get_Type();
}
public class Thrift.Transport.TTransportFactory : object {
    public virtual TTransport GetTransport(TTransport trans);
}
