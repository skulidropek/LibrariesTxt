public class App.Metrics.AspNetCore.DefaultEnvResponseWriter : object {
    private IEnvOutputFormatter _fallbackFormatter;
    private IEnvOutputFormatter _formatter;
    private EnvFormatterCollection _formatters;
    public DefaultEnvResponseWriter(IEnvOutputFormatter fallbackFormatter, IReadOnlyCollection`1<IEnvOutputFormatter> formatters);
    public DefaultEnvResponseWriter(IEnvOutputFormatter formatter);
    public sealed virtual Task WriteAsync(HttpContext context, EnvironmentInfo environmentInfo, CancellationToken token);
    [CompilerGeneratedAttribute]
private IEnvOutputFormatter <WriteAsync>b__5_0(MetricsMediaTypeValue metricsMediaTypeValue);
}
public class App.Metrics.AspNetCore.DefaultMetricsResponseWriter : object {
    private IMetricsOutputFormatter _fallbackFormatter;
    private IMetricsOutputFormatter _formatter;
    private MetricsFormatterCollection _formatters;
    public DefaultMetricsResponseWriter(IMetricsOutputFormatter fallbackFormatter, IReadOnlyCollection`1<IMetricsOutputFormatter> formatters);
    public DefaultMetricsResponseWriter(IMetricsOutputFormatter formatter);
    public sealed virtual Task WriteAsync(HttpContext context, MetricsDataValueSource metricsData, CancellationToken token);
    [CompilerGeneratedAttribute]
private IMetricsOutputFormatter <WriteAsync>b__5_0(MetricsMediaTypeValue metricsMediaTypeValue);
}
[ExcludeFromCodeCoverageAttribute]
internal static class App.Metrics.AspNetCore.Internal.HttpRequestMetricsRegistry : object {
    public static string ContextName;
    private static HttpRequestMetricsRegistry();
}
[ExcludeFromCodeCoverageAttribute]
internal static class App.Metrics.AspNetCore.Internal.MiddlewareConstants : object {
}
[ExcludeFromCodeCoverageAttribute]
public class App.Metrics.AspNetCore.Internal.NoOp.NoOpEnvResponseWriter : object {
    public sealed virtual Task WriteAsync(HttpContext context, EnvironmentInfo environmentInfo, CancellationToken token);
}
[ExcludeFromCodeCoverageAttribute]
public class App.Metrics.AspNetCore.Internal.NoOp.NoOpMetricsResponseWriter : object {
    public sealed virtual Task WriteAsync(HttpContext context, MetricsDataValueSource metricsData, CancellationToken token);
}
[ExcludeFromCodeCoverageAttribute]
internal static class App.Metrics.AspNetCore.Internal.OAuthRequestMetricsRegistry : object {
    public static string ContextName;
    private static OAuthRequestMetricsRegistry();
}
[ExtensionAttribute]
internal static class App.Metrics.MetricsExtensions : object {
    [ExtensionAttribute]
public static void DecrementActiveRequests(IMetrics metrics);
    [ExtensionAttribute]
public static void IncrementActiveRequests(IMetrics metrics);
    [ExtensionAttribute]
public static void IncrementActiveWSRequests(IMetrics metrics);
    [ExtensionAttribute]
public static void DecrementActiveWSRequests(IMetrics metrics);
    [ExtensionAttribute]
public static void RecordClientHttpRequestError(IMetrics metrics, string routeTemplate, int httpStatusCode, string clientId);
    [ExtensionAttribute]
public static void RecordClientRequestRate(IMetrics metrics, string routeTemplate, string clientId);
    [ExtensionAttribute]
public static void RecordEndpointsRequestTime(IMetrics metrics, string clientId, string routeTemplate, long elapsed);
    [ExtensionAttribute]
public static void RecordEndpointsRequestTime(IMetrics metrics, BucketTimerOptions bucketTimerOptions, string clientId, string routeTemplate, long elapsed);
    [ExtensionAttribute]
public static void RecordException(IMetrics metrics, string routeTemplate, string exception);
    [ExtensionAttribute]
public static void RecordHttpRequestError(IMetrics metrics, string routeTemplate, int httpStatusCode, BucketTimerOptions bucketTimerOptions);
    [ExtensionAttribute]
public static void UpdateClientPostRequestSize(IMetrics metrics, long value, string clientId, string routeTemplate);
    [ExtensionAttribute]
public static void UpdateClientPutRequestSize(IMetrics metrics, long value, string clientId, string routeTemplate);
    [ExtensionAttribute]
public static void UpdatePostRequestSize(IMetrics metrics, long value);
    [ExtensionAttribute]
public static void UpdatePutRequestSize(IMetrics metrics, long value);
    [ExtensionAttribute]
public static void UpdateClientPostRequestSize(IMetrics metrics, BucketHistogramOptions bucketHistogramOptions, long value, string clientId, string routeTemplate);
    [ExtensionAttribute]
public static void UpdateClientPutRequestSize(IMetrics metrics, BucketHistogramOptions bucketHistogramOptions, long value, string clientId, string routeTemplate);
    [ExtensionAttribute]
public static void UpdatePostRequestSize(IMetrics metrics, BucketHistogramOptions bucketHistogramOptions, long value);
    [ExtensionAttribute]
public static void UpdatePutRequestSize(IMetrics metrics, BucketHistogramOptions bucketHistogramOptions, long value);
    private static void CountOverallErrorRequestsByHttpStatusCode(IMetrics metrics, int httpStatusCode);
    [ExtensionAttribute]
private static ITimer EndpointRequestTimer(IMetrics metrics, string routeTemplate, BucketTimerOptions bucketTimerOptions);
    [ExtensionAttribute]
private static ITimer RequestTimer(IMetrics metrics, BucketTimerOptions bucketTimerOptions);
    private static void RecordEndpointsHttpRequestErrors(IMetrics metrics, string routeTemplate, int httpStatusCode);
    private static void RecordEndpointsPercentageOfErrorRequests(IMetrics metrics, string routeTemplate, BucketTimerOptions bucketTimerOptions);
    private static void RecordOverallPercentageOfErrorRequests(IMetrics metrics, BucketTimerOptions bucketTimerOptions);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Headers.RequestHeaderExtensions : object {
    [ExtensionAttribute]
public static TFormatter ResolveFormatter(RequestHeaders headers, TFormatter fallbackFormatter, Func`2<MetricsMediaTypeValue, TFormatter> resolveOutputFormatter);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Http.HttpContextExtensions : object {
    [ExtensionAttribute]
public static bool IsSuccessfulResponse(HttpResponse httpResponse);
    [ExtensionAttribute]
public static void SetNoCacheHeaders(HttpContext context);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.MetricsHttpContextExtensions : object {
    private static string MetricsCurrentRouteName;
    private static MetricsHttpContextExtensions();
    [ExtensionAttribute]
public static void AddMetricsCurrentRouteName(HttpContext context, string metricName);
    [ExtensionAttribute]
public static string GetMetricsCurrentRouteName(HttpContext context);
    [ExtensionAttribute]
public static bool HasMetricsCurrentRouteName(HttpContext context);
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Extensions.Logging.AppMetricsMiddlewareLoggerExtensions : object {
    [ExtensionAttribute]
public static void MiddlewareExecuted(ILogger logger);
    [ExtensionAttribute]
public static void MiddlewareExecuting(ILogger logger);
}
[ExtensionAttribute]
public static class Microsoft.Net.Http.Headers.MediaTypeHeaderValueExtensions : object {
    [ExtensionAttribute]
public static MetricsMediaTypeValue ToMetricsMediaType(MediaTypeHeaderValue mediaTypeHeaderValue);
}
[ExtensionAttribute]
internal static class System.StringExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static string EnsureLeadingSlash(string url);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static string EnsureTrailingSlash(string url);
    [DebuggerStepThroughAttribute]
internal static string GetSafeString(Func`1<string> action);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static bool IsMissing(string value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static bool IsPresent(string value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static string RemoveLeadingSlash(string url);
}
