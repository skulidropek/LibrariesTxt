public class App.Metrics.AspNetCore.Endpoints.DefaultMetricsEndpointsStartupFilter : object {
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
public class App.Metrics.AspNetCore.Endpoints.Internal.MetricsEndpointsOptionsSetup : object {
    private EnvFormatterCollection _envFormatters;
    private MetricsFormatterCollection _metricsFormatters;
    public MetricsEndpointsOptionsSetup(IReadOnlyCollection`1<IEnvOutputFormatter> envFormatters, IReadOnlyCollection`1<IMetricsOutputFormatter> metricsFormatters);
    public sealed virtual void Configure(MetricEndpointsOptions options);
}
public class App.Metrics.AspNetCore.Endpoints.MetricEndpointsOptions : object {
    [CompilerGeneratedAttribute]
private IEnvOutputFormatter <EnvInfoEndpointOutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnvironmentInfoEndpointEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetricsEndpointEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetricsOutputFormatter <MetricsEndpointOutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetricsTextEndpointEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetricsOutputFormatter <MetricsTextEndpointOutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IMetricsOutputFormatter> <MetricsOutputFormatters>k__BackingField;
    public IEnvOutputFormatter EnvInfoEndpointOutputFormatter { get; public set; }
    public bool EnvironmentInfoEndpointEnabled { get; public set; }
    public bool MetricsEndpointEnabled { get; public set; }
    public IMetricsOutputFormatter MetricsEndpointOutputFormatter { get; public set; }
    public bool MetricsTextEndpointEnabled { get; public set; }
    public IMetricsOutputFormatter MetricsTextEndpointOutputFormatter { get; public set; }
    public IReadOnlyCollection`1<IMetricsOutputFormatter> MetricsOutputFormatters { get; public set; }
    [CompilerGeneratedAttribute]
public IEnvOutputFormatter get_EnvInfoEndpointOutputFormatter();
    [CompilerGeneratedAttribute]
public void set_EnvInfoEndpointOutputFormatter(IEnvOutputFormatter value);
    [CompilerGeneratedAttribute]
public bool get_EnvironmentInfoEndpointEnabled();
    [CompilerGeneratedAttribute]
public void set_EnvironmentInfoEndpointEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_MetricsEndpointEnabled();
    [CompilerGeneratedAttribute]
public void set_MetricsEndpointEnabled(bool value);
    [CompilerGeneratedAttribute]
public IMetricsOutputFormatter get_MetricsEndpointOutputFormatter();
    [CompilerGeneratedAttribute]
public void set_MetricsEndpointOutputFormatter(IMetricsOutputFormatter value);
    [CompilerGeneratedAttribute]
public bool get_MetricsTextEndpointEnabled();
    [CompilerGeneratedAttribute]
public void set_MetricsTextEndpointEnabled(bool value);
    [CompilerGeneratedAttribute]
public IMetricsOutputFormatter get_MetricsTextEndpointOutputFormatter();
    [CompilerGeneratedAttribute]
public void set_MetricsTextEndpointOutputFormatter(IMetricsOutputFormatter value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IMetricsOutputFormatter> get_MetricsOutputFormatters();
    [CompilerGeneratedAttribute]
public void set_MetricsOutputFormatters(IReadOnlyCollection`1<IMetricsOutputFormatter> value);
}
public class App.Metrics.AspNetCore.Endpoints.MetricsEndpointsHostingOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AllEndpointsPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentInfoEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EnvironmentInfoEndpointPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetricsEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MetricsEndpointPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetricsTextEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MetricsTextEndpointPort>k__BackingField;
    public Nullable`1<int> AllEndpointsPort { get; public set; }
    public string EnvironmentInfoEndpoint { get; public set; }
    public Nullable`1<int> EnvironmentInfoEndpointPort { get; public set; }
    public string MetricsEndpoint { get; public set; }
    public Nullable`1<int> MetricsEndpointPort { get; public set; }
    public string MetricsTextEndpoint { get; public set; }
    public Nullable`1<int> MetricsTextEndpointPort { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AllEndpointsPort();
    [CompilerGeneratedAttribute]
public void set_AllEndpointsPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentInfoEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnvironmentInfoEndpoint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EnvironmentInfoEndpointPort();
    [CompilerGeneratedAttribute]
public void set_EnvironmentInfoEndpointPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MetricsEndpoint();
    [CompilerGeneratedAttribute]
public void set_MetricsEndpoint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MetricsEndpointPort();
    [CompilerGeneratedAttribute]
public void set_MetricsEndpointPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MetricsTextEndpoint();
    [CompilerGeneratedAttribute]
public void set_MetricsTextEndpoint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MetricsTextEndpointPort();
    [CompilerGeneratedAttribute]
public void set_MetricsTextEndpointPort(Nullable`1<int> value);
}
public class App.Metrics.AspNetCore.Endpoints.Middleware.EnvInfoMiddleware : object {
    private ILogger`1<EnvInfoMiddleware> _logger;
    private EnvironmentInfo _environmentInfo;
    private IEnvResponseWriter _envResponseWriter;
    public EnvInfoMiddleware(RequestDelegate next, ILogger`1<EnvInfoMiddleware> logger, IEnvResponseWriter environmentInfoResponseWriter, EnvironmentInfoProvider environmentInfoProvider);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Endpoints.Middleware.EnvInfoMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext context);
}
public class App.Metrics.AspNetCore.Endpoints.Middleware.MetricsEndpointMiddleware : object {
    private ILogger`1<MetricsEndpointMiddleware> _logger;
    private IMetrics _metrics;
    private IMetricsResponseWriter _metricsResponseWriter;
    public MetricsEndpointMiddleware(RequestDelegate next, ILogger`1<MetricsEndpointMiddleware> logger, IMetrics metrics, IMetricsResponseWriter metricsResponseWriter);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Endpoints.Middleware.MetricsEndpointMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext context);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.DefaultEndpointsApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsAllEndpoints(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.EnvInfoApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseEnvInfoEndpoint(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseEnvInfoEndpoint(IApplicationBuilder app, IEnvOutputFormatter formatter);
    private static void EnsureMetricsAdded(IApplicationBuilder app);
    private static IEnvResponseWriter GetEnvInfoResponseWriter(IServiceProvider serviceProvider, IEnvOutputFormatter formatter);
    private static bool ShouldUseEnvInfo(IOptions`1<MetricsEndpointsHostingOptions> endpointHostingOptionsAccessor, IOptions`1<MetricEndpointsOptions> endpointsOptionsAccessor, HttpContext context);
    private static void UseEnvInfoMiddleware(IApplicationBuilder app, IOptions`1<MetricsEndpointsHostingOptions> endpointHostingOptionsAccessor, IOptions`1<MetricEndpointsOptions> endpointsOptionsAccessor, IEnvOutputFormatter formatter);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MetricsApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsEndpoint(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsEndpoint(IApplicationBuilder app, IMetricsOutputFormatter formatter);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsTextEndpoint(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsTextEndpoint(IApplicationBuilder app, IMetricsOutputFormatter formatter);
    private static void EnsureMetricsAdded(IApplicationBuilder app);
    private static DefaultMetricsResponseWriter GetMetricsResponseWriter(IServiceProvider serviceProvider, IMetricsOutputFormatter formatter);
    private static IMetricsResponseWriter GetMetricsTextResponseWriter(IServiceProvider serviceProvider, IMetricsOutputFormatter formatter);
    private static bool ShouldUseMetricsEndpoint(IOptions`1<MetricsEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<MetricEndpointsOptions> endpointsOptionsAccessor, MetricsOptions metricsOptions, HttpContext context);
    private static bool ShouldUseMetricsTextEndpoint(IOptions`1<MetricsEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<MetricEndpointsOptions> endpointsOptionsAccessor, MetricsOptions metricsOptions, HttpContext context);
    private static void UseMetricsMiddleware(IApplicationBuilder app, IOptions`1<MetricsEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<MetricEndpointsOptions> endpointsOptionsAccessor, MetricsOptions metricsOptions, IMetricsOutputFormatter formatter);
    private static void UseMetricsTextMiddleware(IApplicationBuilder app, IOptions`1<MetricsEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<MetricEndpointsOptions> endpointsOptionsAccessor, MetricsOptions metricsOptions, IMetricsOutputFormatter formatter);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.MetricsAspNetEndpointHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseMetricsEndpoints(IHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IHostBuilder UseMetricsEndpoints(IHostBuilder hostBuilder, Action`1<MetricEndpointsOptions> optionsDelegate);
    [ExtensionAttribute]
public static IHostBuilder UseMetricsEndpoints(IHostBuilder hostBuilder, Action`2<HostBuilderContext, MetricEndpointsOptions> setupDelegate);
    [ExtensionAttribute]
public static IHostBuilder UseMetricsEndpoints(IHostBuilder hostBuilder, IConfiguration configuration, Action`1<MetricEndpointsOptions> optionsDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureAppMetricsHostingConfiguration(IHostBuilder hostBuilder, Action`1<MetricsEndpointsHostingOptions> setupHostingConfiguration);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.MetricsAspNetEndpointWebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsEndpoints(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsEndpoints(IWebHostBuilder hostBuilder, Action`1<MetricEndpointsOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsEndpoints(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, MetricEndpointsOptions> setupDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsEndpoints(IWebHostBuilder hostBuilder, IConfiguration configuration, Action`1<MetricEndpointsOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureAppMetricsHostingConfiguration(IWebHostBuilder hostBuilder, Action`1<MetricsEndpointsHostingOptions> setupHostingConfiguration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MetricsAspNetCoreMetricsEndpointsServiceCollectionExtensions : object {
    private static string DefaultConfigSection;
    private static MetricsAspNetCoreMetricsEndpointsServiceCollectionExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, IConfigurationSection configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, IConfiguration configuration, Action`1<MetricEndpointsOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, IConfigurationSection configuration, Action`1<MetricEndpointsOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, Action`1<MetricEndpointsOptions> setupAction, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, Action`1<MetricEndpointsOptions> setupAction, IConfigurationSection configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsEndpoints(IServiceCollection services, Action`1<MetricEndpointsOptions> setupAction);
    internal static void AddMetricsEndpointsServices(IServiceCollection services);
}
