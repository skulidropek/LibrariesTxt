public class App.Metrics.AspNetCore.Health.Core.DefaultHealthResponseWriter : object {
    private IHealthOutputFormatter _fallbackFormatter;
    private IHealthOutputFormatter _formatter;
    private HealthFormatterCollection _formatters;
    public DefaultHealthResponseWriter(IHealthOutputFormatter fallbackFormatter, IReadOnlyCollection`1<IHealthOutputFormatter> formatters);
    public DefaultHealthResponseWriter(IHealthOutputFormatter formatter);
    public sealed virtual Task WriteAsync(HttpContext context, HealthStatus healthStatus, CancellationToken token);
    private static void SetResponseStatusCode(HttpContext context, HealthStatus healthStatus);
    [CompilerGeneratedAttribute]
private IHealthOutputFormatter <WriteAsync>b__5_0(HealthMediaTypeValue metricsMediaTypeValue);
}
[ExcludeFromCodeCoverageAttribute]
public class App.Metrics.AspNetCore.Health.Core.Internal.NoOp.NoOpHealthStatusResponseWriter : object {
    public string ContentType { get; }
    public string get_ContentType();
    public sealed virtual Task WriteAsync(HttpContext context, HealthStatus healthStatus, CancellationToken token);
}
public interface App.Metrics.AspNetCore.Health.IHealthResponseWriter {
    public abstract virtual Task WriteAsync(HttpContext context, HealthStatus healthStatus, CancellationToken token);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Headers.RequestHeaderExtensions : object {
    [ExtensionAttribute]
public static TFormatter ResolveFormatter(RequestHeaders headers, TFormatter defaultFormatter, Func`2<HealthMediaTypeValue, TFormatter> resolveOutputFormatter);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Http.HttpContextExtensions : object {
    [ExtensionAttribute]
public static void SetNoCacheHeaders(HttpContext context);
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Extensions.Logging.AppMetricsMiddlewareHealthChecksLoggerExtensions : object {
    [ExtensionAttribute]
public static void MiddlewareExecuted(ILogger logger);
    [ExtensionAttribute]
public static void MiddlewareFailed(ILogger logger, Exception e, string message);
    [ExtensionAttribute]
public static void MiddlewareExecuting(ILogger logger);
}
[ExtensionAttribute]
public static class Microsoft.Net.Http.Headers.MediaTypeHeaderValueExtensions : object {
    [ExtensionAttribute]
public static HealthMediaTypeValue ToHealthMediaType(MediaTypeHeaderValue mediaTypeHeaderValue);
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class System.StringExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static bool IsMissing(string value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static bool IsPresent(string value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static string EnsureLeadingSlash(string url);
}
