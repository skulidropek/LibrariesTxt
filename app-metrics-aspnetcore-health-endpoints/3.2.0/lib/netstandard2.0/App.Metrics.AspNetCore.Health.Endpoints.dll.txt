public class App.Metrics.AspNetCore.Health.Endpoints.DefaultHealthEndpointsStartupFilter : object {
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
public class App.Metrics.AspNetCore.Health.Endpoints.HealthEndpointsHostingOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AllEndpointsPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HealthEndpointPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PingEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PingEndpointPort>k__BackingField;
    public Nullable`1<int> AllEndpointsPort { get; public set; }
    public string HealthEndpoint { get; public set; }
    public Nullable`1<int> HealthEndpointPort { get; public set; }
    public string PingEndpoint { get; public set; }
    public Nullable`1<int> PingEndpointPort { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AllEndpointsPort();
    [CompilerGeneratedAttribute]
public void set_AllEndpointsPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_HealthEndpoint();
    [CompilerGeneratedAttribute]
public void set_HealthEndpoint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HealthEndpointPort();
    [CompilerGeneratedAttribute]
public void set_HealthEndpointPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PingEndpoint();
    [CompilerGeneratedAttribute]
public void set_PingEndpoint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PingEndpointPort();
    [CompilerGeneratedAttribute]
public void set_PingEndpointPort(Nullable`1<int> value);
}
public class App.Metrics.AspNetCore.Health.Endpoints.HealthEndpointsOptions : object {
    [CompilerGeneratedAttribute]
private bool <HealthEndpointEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IHealthOutputFormatter <HealthEndpointOutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PingEndpointEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public bool HealthEndpointEnabled { get; public set; }
    public IHealthOutputFormatter HealthEndpointOutputFormatter { get; public set; }
    public bool PingEndpointEnabled { get; public set; }
    public TimeSpan Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HealthEndpointEnabled();
    [CompilerGeneratedAttribute]
public void set_HealthEndpointEnabled(bool value);
    [CompilerGeneratedAttribute]
public IHealthOutputFormatter get_HealthEndpointOutputFormatter();
    [CompilerGeneratedAttribute]
public void set_HealthEndpointOutputFormatter(IHealthOutputFormatter value);
    [CompilerGeneratedAttribute]
public bool get_PingEndpointEnabled();
    [CompilerGeneratedAttribute]
public void set_PingEndpointEnabled(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
}
public class App.Metrics.AspNetCore.Health.Endpoints.Internal.HealthEndpointsOptionsSetup : object {
    private HealthFormatterCollection _healthFormatters;
    public HealthEndpointsOptionsSetup(IReadOnlyCollection`1<IHealthOutputFormatter> healthFormatters);
    public sealed virtual void Configure(HealthEndpointsOptions options);
}
internal static class App.Metrics.AspNetCore.Health.Endpoints.Internal.HealthMiddlewareConstants : object {
}
public class App.Metrics.AspNetCore.Health.Endpoints.Middleware.HealthCheckEndpointMiddleware : object {
    private IRunHealthChecks _healthCheckRunner;
    private IHealthResponseWriter _healthResponseWriter;
    private ILogger`1<HealthCheckEndpointMiddleware> _logger;
    private TimeSpan _timeout;
    public HealthCheckEndpointMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IRunHealthChecks healthCheckRunner, IHealthResponseWriter healthResponseWriter, TimeSpan timeout);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Health.Endpoints.Middleware.HealthCheckEndpointMiddleware/<Invoke>d__5")]
public Task Invoke(HttpContext context);
}
public class App.Metrics.AspNetCore.Health.Endpoints.Middleware.PingEndpointMiddleware : object {
    private ILogger`1<PingEndpointMiddleware> _logger;
    public PingEndpointMiddleware(RequestDelegate next, ILogger`1<PingEndpointMiddleware> logger);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Health.Endpoints.Middleware.PingEndpointMiddleware/<Invoke>d__2")]
public Task Invoke(HttpContext context);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.DefaultEndpointsApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHealthAllEndpoints(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.HealthApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHealthEndpoint(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseHealthEndpoint(IApplicationBuilder app, IHealthOutputFormatter formatter);
    private static void EnsureHealthAdded(IApplicationBuilder app);
    private static bool ShouldUseHealthEndpoint(IOptions`1<HealthEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<HealthEndpointsOptions> endpointsOptionsAccessor, HealthOptions metricsOptions, HttpContext context);
    private static void UseHealthMiddleware(IApplicationBuilder app, IOptions`1<HealthEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<HealthEndpointsOptions> endpointsOptionsAccessor, HealthOptions metricsOptions, IHealthOutputFormatter formatter);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.PingApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UsePingEndpoint(IApplicationBuilder app);
    private static bool ShouldUsePing(IOptions`1<HealthEndpointsHostingOptions> endpointsHostingOptionsAccessor, IOptions`1<HealthEndpointsOptions> endpointsOptionsAccessor, HttpContext context);
    private static void UsePingMiddleware(IApplicationBuilder app, IOptions`1<HealthEndpointsHostingOptions> metricsEndpointsHostingOptionsAccessor, IOptions`1<HealthEndpointsOptions> endpointsOptionsAccessor);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.HealthAspNetEndpointWebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseHealthEndpoints(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealthEndpoints(IWebHostBuilder hostBuilder, Action`1<HealthEndpointsOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealthEndpoints(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, HealthEndpointsOptions> setupDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealthEndpoints(IWebHostBuilder hostBuilder, IConfiguration configuration, Action`1<HealthEndpointsOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureAppHealthHostingConfiguration(IWebHostBuilder hostBuilder, Action`1<HealthEndpointsHostingOptions> setupHostingConfiguration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HealthAspNetCoreHealthEndpointsServiceCollectionExtensions : object {
    private static string DefaultConfigSection;
    private static HealthAspNetCoreHealthEndpointsServiceCollectionExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, IConfigurationSection configuration);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, IConfiguration configuration, Action`1<HealthEndpointsOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, IConfigurationSection configuration, Action`1<HealthEndpointsOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, Action`1<HealthEndpointsOptions> setupAction, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, Action`1<HealthEndpointsOptions> setupAction, IConfigurationSection configuration);
    [ExtensionAttribute]
public static IServiceCollection AddHealthEndpoints(IServiceCollection services, Action`1<HealthEndpointsOptions> setupAction);
    internal static void AddHealthEndpointsServices(IServiceCollection services);
    internal static IHealthResponseWriter ResolveHealthResponseWriter(IServiceProvider provider, IHealthOutputFormatter formatter);
}
