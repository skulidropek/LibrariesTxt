[ExtensionAttribute]
public static class App.Metrics.AspNetCore.Health.DefaultHealthAspNetWebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseHealth(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealth(IWebHostBuilder hostBuilder, Action`1<HealthWebHostOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealth(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, HealthWebHostOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealth(IWebHostBuilder hostBuilder, Action`1<HealthWebHostOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseHealth(IWebHostBuilder hostBuilder);
}
public class App.Metrics.AspNetCore.Health.DefaultHealthStartupFilter : object {
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
public class App.Metrics.AspNetCore.Health.HealthWebHostOptions : object {
    [CompilerGeneratedAttribute]
private Action`1<HealthOptions> <HealthOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HealthEndpointsOptions> <EndpointOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnobservedTaskExceptionEventArgs> <UnobservedTaskExceptionHandler>k__BackingField;
    public Action`1<HealthOptions> HealthOptions { get; public set; }
    public Action`1<HealthEndpointsOptions> EndpointOptions { get; public set; }
    public EventHandler`1<UnobservedTaskExceptionEventArgs> UnobservedTaskExceptionHandler { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<HealthOptions> get_HealthOptions();
    [CompilerGeneratedAttribute]
public void set_HealthOptions(Action`1<HealthOptions> value);
    [CompilerGeneratedAttribute]
public Action`1<HealthEndpointsOptions> get_EndpointOptions();
    [CompilerGeneratedAttribute]
public void set_EndpointOptions(Action`1<HealthEndpointsOptions> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<UnobservedTaskExceptionEventArgs> get_UnobservedTaskExceptionHandler();
    [CompilerGeneratedAttribute]
public void set_UnobservedTaskExceptionHandler(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
}
