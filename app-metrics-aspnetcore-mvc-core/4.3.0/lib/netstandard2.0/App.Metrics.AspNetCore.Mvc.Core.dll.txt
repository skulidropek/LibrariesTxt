public class App.Metrics.AspNetCore.Mvc.Core.MetricsMvcCoreOptionsSetup : object {
    public sealed virtual void Configure(MvcOptions options);
}
public class Microsoft.AspNetCore.Mvc.Filters.MetricsResourceFilter : object {
    private static string ControllerRouteKey;
    private static string ActionRouteKey;
    private static string VersionRouteKey;
    private static string DefaultVersionRouteKey;
    private IRouteNameResolver _routeNameResolver;
    private ILogger _logger;
    public MetricsResourceFilter(IRouteNameResolver routeNameResolver);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Filters.MetricsResourceFilter/<OnResourceExecutionAsync>d__7")]
public sealed virtual Task OnResourceExecutionAsync(ResourceExecutingContext context, ResourceExecutionDelegate next);
    private void EnsureServices(HttpContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcRouteTemplateResolver : object {
    private static string ApiVersionToken;
    private static string MsVersionpolicyIsAppliedToken;
    private static string VersionRouteDataToken;
    private IRouteNameResolver _routeNameResolver;
    private MvcRouteTemplateResolver(IRouteNameResolver routeNameResolver);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.MvcRouteTemplateResolver/<ResolveMatchingTemplateRouteAsync>d__6")]
public sealed virtual Task`1<string> ResolveMatchingTemplateRouteAsync(RouteData routeData);
    private ActionDescriptor[] GetActionDescriptors(IList`1<IRouter> routers);
    private static string ExtractRouteTemplate(RouteData routeData, ActionDescriptor actionDescriptor);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.MetricsAspNetMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddMetricsCore(IMvcCoreBuilder mvcBuilder);
}
