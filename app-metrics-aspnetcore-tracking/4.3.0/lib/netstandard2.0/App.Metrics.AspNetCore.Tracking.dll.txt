public class App.Metrics.AspNetCore.Tracking.DefaultMetricsTrackingStartupFilter : object {
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[DefaultMemberAttribute("Item")]
internal class App.Metrics.AspNetCore.Tracking.IgnoredRoutesConfiguration : object {
    private List`1<string> _stringListImplementation;
    private List`1<Regex> _regexList;
    public IReadOnlyList`1<Regex> RegexPatterns { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    public IgnoredRoutesConfiguration(IList`1<string> patterns);
    public IReadOnlyList`1<Regex> get_RegexPatterns();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    private static Regex GetRegex(string pattern);
}
public class App.Metrics.AspNetCore.Tracking.Internal.MetricsTrackingMiddlewareOptionsSetup : object {
    public sealed virtual void Configure(MetricsWebTrackingOptions options);
}
public class App.Metrics.AspNetCore.Tracking.MetricsWebTrackingOptions : object {
    [CompilerGeneratedAttribute]
private bool <ApdexTrackingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ApdexTSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <IgnoredHttpStatusCodes>k__BackingField;
    private IgnoredRoutesConfiguration _ignoredRoutesConfiguration;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <IgnoredPorts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OAuth2TrackingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBucketHistograms>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <RequestSizeHistogramBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <RequestTimeHistogramBuckets>k__BackingField;
    public bool ApdexTrackingEnabled { get; public set; }
    public double ApdexTSeconds { get; public set; }
    public IList`1<int> IgnoredHttpStatusCodes { get; public set; }
    public IReadOnlyList`1<Regex> IgnoredRoutesRegex { get; }
    public IReadOnlyList`1<int> IgnoredPorts { get; public set; }
    public IList`1<string> IgnoredRoutesRegexPatterns { get; public set; }
    public bool OAuth2TrackingEnabled { get; public set; }
    public bool UseBucketHistograms { get; public set; }
    public Double[] RequestSizeHistogramBuckets { get; public set; }
    public Double[] RequestTimeHistogramBuckets { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ApdexTrackingEnabled();
    [CompilerGeneratedAttribute]
public void set_ApdexTrackingEnabled(bool value);
    [CompilerGeneratedAttribute]
public double get_ApdexTSeconds();
    [CompilerGeneratedAttribute]
public void set_ApdexTSeconds(double value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_IgnoredHttpStatusCodes();
    [CompilerGeneratedAttribute]
public void set_IgnoredHttpStatusCodes(IList`1<int> value);
    public IReadOnlyList`1<Regex> get_IgnoredRoutesRegex();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_IgnoredPorts();
    [CompilerGeneratedAttribute]
public void set_IgnoredPorts(IReadOnlyList`1<int> value);
    public IList`1<string> get_IgnoredRoutesRegexPatterns();
    public void set_IgnoredRoutesRegexPatterns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_OAuth2TrackingEnabled();
    [CompilerGeneratedAttribute]
public void set_OAuth2TrackingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseBucketHistograms();
    [CompilerGeneratedAttribute]
public void set_UseBucketHistograms(bool value);
    [CompilerGeneratedAttribute]
public Double[] get_RequestSizeHistogramBuckets();
    [CompilerGeneratedAttribute]
public void set_RequestSizeHistogramBuckets(Double[] value);
    [CompilerGeneratedAttribute]
public Double[] get_RequestTimeHistogramBuckets();
    [CompilerGeneratedAttribute]
public void set_RequestTimeHistogramBuckets(Double[] value);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.ActiveRequestCounterEndpointMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<ActiveRequestCounterEndpointMiddleware> _logger;
    private IMetrics _metrics;
    public ActiveRequestCounterEndpointMiddleware(RequestDelegate next, ILogger`1<ActiveRequestCounterEndpointMiddleware> logger, IMetrics metrics);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Tracking.Middleware.ActiveRequestCounterEndpointMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext context);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.ApdexMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<ApdexMiddleware> _logger;
    private IApdex _apdexTracking;
    public ApdexMiddleware(RequestDelegate next, IOptions`1<MetricsWebTrackingOptions> trackingMiddlwareOptionsAccessor, ILogger`1<ApdexMiddleware> logger, IMetrics metrics);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Tracking.Middleware.ApdexMiddleware/<MeasureTransaction>d__5")]
private Task MeasureTransaction(HttpContext context);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.ErrorRequestMeterMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<ErrorRequestMeterMiddleware> _logger;
    private IMetrics _metrics;
    private IList`1<int> _ignoredHttpStatusCodes;
    private BucketTimerOptions _bucketTimerOptions;
    public ErrorRequestMeterMiddleware(RequestDelegate next, IOptions`1<MetricsWebTrackingOptions> trackingMiddlwareOptionsAccessor, ILogger`1<ErrorRequestMeterMiddleware> logger, IMetrics metrics);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Tracking.Middleware.ErrorRequestMeterMiddleware/<Invoke>d__6")]
public Task Invoke(HttpContext context);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.OAuthTrackingMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<OAuthTrackingMiddleware> _logger;
    private IMetrics _metrics;
    private IList`1<int> _ignoredHttpStatusCodes;
    private bool _useBucketHistograms;
    private BucketHistogramOptions _postSizeBucketHistogramOptions;
    private BucketHistogramOptions _putSizeBucketHistogramOptions;
    public OAuthTrackingMiddleware(RequestDelegate next, IOptions`1<MetricsWebTrackingOptions> trackingMiddlwareOptionsAccessor, ILogger`1<OAuthTrackingMiddleware> logger, IMetrics metrics);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Tracking.Middleware.OAuthTrackingMiddleware/<Invoke>d__8")]
public Task Invoke(HttpContext context);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.PerRequestTimerMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<PerRequestTimerMiddleware> _logger;
    private IMetrics _metrics;
    private IList`1<int> _ignoredHttpStatusCodes;
    private bool _useBucketTimer;
    private BucketTimerOptions _bucketTimerOptions;
    public PerRequestTimerMiddleware(RequestDelegate next, IOptions`1<MetricsWebTrackingOptions> trackingMiddlwareOptionsAccessor, ILogger`1<PerRequestTimerMiddleware> logger, IMetrics metrics);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Tracking.Middleware.PerRequestTimerMiddleware/<TimeTransaction>d__8")]
private Task TimeTransaction(HttpContext context);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.PostAndPutRequestSizeHistogramMiddleware : object {
    private RequestDelegate _next;
    private ILogger`1<PostAndPutRequestSizeHistogramMiddleware> _logger;
    private IMetrics _metrics;
    private bool _useBucketHistograms;
    private BucketHistogramOptions _postSizeBucketHistogramOptions;
    private BucketHistogramOptions _putSizeBucketHistogramOptions;
    public PostAndPutRequestSizeHistogramMiddleware(RequestDelegate next, IOptions`1<MetricsWebTrackingOptions> trackingMiddlwareOptionsAccessor, ILogger`1<PostAndPutRequestSizeHistogramMiddleware> logger, IMetrics metrics);
    public Task Invoke(HttpContext context);
}
public class App.Metrics.AspNetCore.Tracking.Middleware.RequestTimerMiddleware : object {
    private ILogger`1<RequestTimerMiddleware> _logger;
    private RequestDelegate _next;
    private ITimer _requestTimer;
    public RequestTimerMiddleware(RequestDelegate next, IOptions`1<MetricsWebTrackingOptions> trackingMiddlwareOptionsAccessor, ILogger`1<RequestTimerMiddleware> logger, IMetrics metrics);
    public Task Invoke(HttpContext context);
    [AsyncStateMachineAttribute("App.Metrics.AspNetCore.Tracking.Middleware.RequestTimerMiddleware/<TimeTransaction>d__5")]
private Task TimeTransaction(HttpContext context);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MetricsMiddlewareApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsActiveRequestMiddleware(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsAllMiddleware(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsApdexTrackingMiddleware(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsErrorTrackingMiddleware(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsOAuth2TrackingMiddleware(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsPostAndPutSizeTrackingMiddleware(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMetricsRequestTrackingMiddleware(IApplicationBuilder app);
    private static void EnsureRequiredServices(IApplicationBuilder app);
    private static bool IsNotAnIgnoredRoute(IReadOnlyList`1<Regex> ignoredRoutes, PathString currentPath);
    private static bool IsNotAnIgnoredPort(IReadOnlyList`1<int> ignoredPorts, Nullable`1<int> currentPort);
    private static void UseMetricsMiddleware(IApplicationBuilder app, MetricsOptions metricsOptions, IOptions`1<MetricsWebTrackingOptions> trackingMiddlewareOptionsAccessor);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.MetricsAspNetTrackingHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseMetricsWebTracking(IHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IHostBuilder UseMetricsWebTracking(IHostBuilder hostBuilder, Action`1<MetricsWebTrackingOptions> optionsDelegate);
    [ExtensionAttribute]
public static IHostBuilder UseMetricsWebTracking(IHostBuilder hostBuilder, Action`2<HostBuilderContext, MetricsWebTrackingOptions> setupDelegate);
    [ExtensionAttribute]
public static IHostBuilder UseMetricsWebTracking(IHostBuilder hostBuilder, IConfiguration configuration, Action`1<MetricsWebTrackingOptions> optionsDelegate);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.MetricsAspNetTrackingWebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsWebTracking(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsWebTracking(IWebHostBuilder hostBuilder, Action`1<MetricsWebTrackingOptions> optionsDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsWebTracking(IWebHostBuilder hostBuilder, Action`2<WebHostBuilderContext, MetricsWebTrackingOptions> setupDelegate);
    [ExtensionAttribute]
public static IWebHostBuilder UseMetricsWebTracking(IWebHostBuilder hostBuilder, IConfiguration configuration, Action`1<MetricsWebTrackingOptions> optionsDelegate);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Http.MetricsHttpContextExtensions : object {
    [ExtensionAttribute]
public static string GetOAuthClientIdIfRequired(HttpContext context);
    [ExtensionAttribute]
public static string OAuthClientId(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MetricsAspNetCoreMetricsTrackingMiddlewareServiceCollectionExtensions : object {
    private static string DefaultConfigSection;
    private static MetricsAspNetCoreMetricsTrackingMiddlewareServiceCollectionExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, IConfigurationSection configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, IConfiguration configuration, Action`1<MetricsWebTrackingOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, IConfigurationSection configuration, Action`1<MetricsWebTrackingOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, Action`1<MetricsWebTrackingOptions> setupAction, IConfiguration configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, Action`1<MetricsWebTrackingOptions> setupAction, IConfigurationSection configuration);
    [ExtensionAttribute]
public static IServiceCollection AddMetricsTrackingMiddleware(IServiceCollection services, Action`1<MetricsWebTrackingOptions> setupAction);
    internal static void AddMetricsTrackingMiddlewareServices(IServiceCollection services);
}
