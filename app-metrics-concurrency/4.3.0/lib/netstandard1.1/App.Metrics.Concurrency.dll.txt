public class App.Metrics.Concurrency.AtomicDouble : ValueType {
    private double _value;
    public AtomicDouble(double value);
    public sealed virtual double Add(double value);
    public sealed virtual bool CompareAndSwap(double expected, double updated);
    public sealed virtual double Decrement();
    public sealed virtual double Decrement(double value);
    public sealed virtual double GetAndAdd(double value);
    public sealed virtual double GetAndDecrement();
    public sealed virtual double GetAndDecrement(double value);
    public sealed virtual double GetAndIncrement();
    public sealed virtual double GetAndIncrement(double value);
    public sealed virtual double GetAndReset();
    public sealed virtual double GetAndSet(double newValue);
    public double GetValue();
    public sealed virtual double Increment(double value);
    public sealed virtual double Increment();
    public double Increment(long value);
    public sealed virtual double NonVolatileGetValue();
    public sealed virtual void NonVolatileSetValue(double value);
    public sealed virtual void SetValue(double newValue);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.Add(double value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.Decrement();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.Decrement(double value);
    private sealed virtual override double App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.GetAndReset();
    private sealed virtual override double App.Metrics.Concurrency.Internal.IValueReader<System.Double>.GetValue();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.Increment();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.Increment(double value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Double>.Reset();
}
public class App.Metrics.Concurrency.AtomicIntArray : ValueType {
    private Int32[] _array;
    public int Length { get; }
    public AtomicIntArray(int length);
    public AtomicIntArray(IReadOnlyList`1<int> source);
    public sealed virtual int get_Length();
    public static int GetEstimatedFootprintInBytes(AtomicIntArray instance);
    public sealed virtual int Add(int index, int value);
    public sealed virtual bool CompareAndSwap(int index, int expected, int updated);
    public sealed virtual int Decrement(int index);
    public sealed virtual int Decrement(int index, int value);
    public sealed virtual int GetAndAdd(int index, int value);
    public sealed virtual int GetAndDecrement(int index);
    public sealed virtual int GetAndDecrement(int index, int value);
    public sealed virtual int GetAndIncrement(int index);
    public sealed virtual int GetAndIncrement(int index, int value);
    public sealed virtual int GetAndReset(int index);
    public sealed virtual int GetAndSet(int index, int newValue);
    public sealed virtual int GetValue(int index);
    public sealed virtual int Increment(int index);
    public sealed virtual int Increment(int index, int value);
    public sealed virtual int NonVolatileGetValue(int index);
    public sealed virtual void NonVolatileSetValue(int index, int value);
    public sealed virtual void SetValue(int index, int value);
}
public class App.Metrics.Concurrency.AtomicInteger : ValueType {
    public static int SizeInBytes;
    private int _value;
    public AtomicInteger(int value);
    private static AtomicInteger();
    public sealed virtual int Add(int value);
    public sealed virtual bool CompareAndSwap(int expected, int updated);
    public sealed virtual int Decrement();
    public sealed virtual int Decrement(int value);
    public sealed virtual int GetAndAdd(int value);
    public sealed virtual int GetAndDecrement();
    public sealed virtual int GetAndDecrement(int value);
    public sealed virtual int GetAndIncrement();
    public sealed virtual int GetAndIncrement(int value);
    public sealed virtual int GetAndReset();
    public sealed virtual int GetAndSet(int newValue);
    public int GetValue();
    public sealed virtual int Increment();
    public sealed virtual int Increment(int value);
    public sealed virtual int NonVolatileGetValue();
    public sealed virtual void NonVolatileSetValue(int value);
    public sealed virtual void SetValue(int value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.Add(int value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.Decrement();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.Decrement(int value);
    private sealed virtual override int App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.GetAndReset();
    private sealed virtual override int App.Metrics.Concurrency.Internal.IValueReader<System.Int32>.GetValue();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.Increment();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.Increment(int value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int32>.Reset();
}
public class App.Metrics.Concurrency.AtomicLong : ValueType {
    public static int SizeInBytes;
    private long _value;
    public AtomicLong(long value);
    private static AtomicLong();
    public sealed virtual long Add(long value);
    public sealed virtual bool CompareAndSwap(long expected, long updated);
    public sealed virtual long Decrement();
    public sealed virtual long Decrement(long value);
    public sealed virtual long GetAndAdd(long value);
    public sealed virtual long GetAndDecrement();
    public sealed virtual long GetAndDecrement(long value);
    public sealed virtual long GetAndIncrement();
    public sealed virtual long GetAndIncrement(long value);
    public sealed virtual long GetAndReset();
    public sealed virtual long GetAndSet(long newValue);
    public long GetValue();
    public sealed virtual long Increment();
    public sealed virtual long Increment(long value);
    public sealed virtual long NonVolatileGetValue();
    public sealed virtual void NonVolatileSetValue(long value);
    public sealed virtual void SetValue(long value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Add(long value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Decrement();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Decrement(long value);
    private sealed virtual override long App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.GetAndReset();
    private sealed virtual override long App.Metrics.Concurrency.Internal.IValueReader<System.Int64>.GetValue();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Increment();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Increment(long value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Reset();
}
public class App.Metrics.Concurrency.AtomicLongArray : ValueType {
    private Int64[] _array;
    public int Length { get; }
    public AtomicLongArray(int length);
    public AtomicLongArray(IReadOnlyList`1<long> source);
    public sealed virtual int get_Length();
    public static int GetEstimatedFootprintInBytes(AtomicLongArray instance);
    public sealed virtual long Add(int index, long value);
    public sealed virtual bool CompareAndSwap(int index, long expected, long updated);
    public sealed virtual long Decrement(int index);
    public sealed virtual long Decrement(int index, long value);
    public sealed virtual long GetAndAdd(int index, long value);
    public sealed virtual long GetAndDecrement(int index);
    public sealed virtual long GetAndDecrement(int index, long value);
    public sealed virtual long GetAndIncrement(int index);
    public sealed virtual long GetAndIncrement(int index, long value);
    public sealed virtual long GetAndReset(int index);
    public sealed virtual long GetAndSet(int index, long newValue);
    public sealed virtual long GetValue(int index);
    public sealed virtual long Increment(int index);
    public sealed virtual long Increment(int index, long value);
    public sealed virtual long NonVolatileGetValue(int index);
    public sealed virtual void NonVolatileSetValue(int index, long value);
    public sealed virtual void SetValue(int index, long value);
}
internal interface App.Metrics.Concurrency.Internal.IAtomicArray`1 {
    public int Length { get; }
    public abstract virtual int get_Length();
    public abstract virtual T Add(int index, T value);
    public abstract virtual bool CompareAndSwap(int index, T expected, T updated);
    public abstract virtual T Decrement(int index);
    public abstract virtual T Decrement(int index, T value);
    public abstract virtual T GetAndAdd(int index, T value);
    public abstract virtual T GetAndDecrement(int index);
    public abstract virtual T GetAndDecrement(int index, T value);
    public abstract virtual T GetAndIncrement(int index);
    public abstract virtual T GetAndIncrement(int index, T value);
    public abstract virtual T GetAndReset(int index);
    public abstract virtual T GetAndSet(int index, T newValue);
    public abstract virtual T GetValue(int index);
    public abstract virtual T Increment(int index);
    public abstract virtual T Increment(int index, T value);
    public abstract virtual T NonVolatileGetValue(int index);
    public abstract virtual void NonVolatileSetValue(int index, T value);
    public abstract virtual void SetValue(int index, T value);
}
internal interface App.Metrics.Concurrency.Internal.IAtomicValue`1 {
    public abstract virtual T Add(T value);
    public abstract virtual bool CompareAndSwap(T expected, T updated);
    public abstract virtual T Decrement();
    public abstract virtual T Decrement(T value);
    public abstract virtual T GetAndAdd(T value);
    public abstract virtual T GetAndDecrement();
    public abstract virtual T GetAndDecrement(T value);
    public abstract virtual T GetAndIncrement();
    public abstract virtual T GetAndIncrement(T value);
    public abstract virtual T GetAndReset();
    public abstract virtual T GetAndSet(T newValue);
    public abstract virtual T Increment();
    public abstract virtual T Increment(T value);
}
public interface App.Metrics.Concurrency.Internal.IValueAdder`1 {
    public abstract virtual void Add(T value);
    public abstract virtual void Decrement();
    public abstract virtual void Decrement(T value);
    public abstract virtual T GetAndReset();
    public abstract virtual void Increment();
    public abstract virtual void Increment(T value);
    public abstract virtual void Reset();
}
public interface App.Metrics.Concurrency.Internal.IValueReader`1 {
    public abstract virtual T GetValue();
    public abstract virtual T NonVolatileGetValue();
}
internal interface App.Metrics.Concurrency.Internal.IValueWriter`1 {
    public abstract virtual void NonVolatileSetValue(T newValue);
    public abstract virtual void SetValue(T newValue);
}
internal interface App.Metrics.Concurrency.Internal.IVolatileValue`1 {
}
public class App.Metrics.Concurrency.PaddedAtomicLong : ValueType {
    public static int SizeInBytes;
    private long _value;
    public PaddedAtomicLong(long value);
    private static PaddedAtomicLong();
    public sealed virtual long Add(long value);
    public sealed virtual bool CompareAndSwap(long expected, long updated);
    public sealed virtual long Decrement();
    public sealed virtual long Decrement(long value);
    public sealed virtual long GetAndAdd(long value);
    public sealed virtual long GetAndDecrement();
    public sealed virtual long GetAndDecrement(long value);
    public sealed virtual long GetAndIncrement();
    public sealed virtual long GetAndIncrement(long value);
    public sealed virtual long GetAndReset();
    public sealed virtual long GetAndSet(long newValue);
    public long GetValue();
    public sealed virtual long Increment();
    public sealed virtual long Increment(long value);
    public sealed virtual long NonVolatileGetValue();
    public sealed virtual void NonVolatileSetValue(long value);
    public sealed virtual void SetValue(long value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Add(long value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Decrement();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Decrement(long value);
    private sealed virtual override long App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.GetAndReset();
    private sealed virtual override long App.Metrics.Concurrency.Internal.IValueReader<System.Int64>.GetValue();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Increment();
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Increment(long value);
    private sealed virtual override void App.Metrics.Concurrency.Internal.IValueAdder<System.Int64>.Reset();
}
public abstract class App.Metrics.Concurrency.Striped64 : object {
    protected AtomicLong Base;
    protected Cell[] modreq(System.Runtime.CompilerServices.IsVolatile) Cells;
    private static ThreadLocal`1<ThreadHashCode> HashCode;
    private static int ProcessorCount;
    private int _cellsBusy;
    private static Striped64();
    protected static int GetEstimatedFootprintInBytes(Striped64 instance);
    protected static int GetProbe();
    protected void LongAccumulate(long x, bool wasUncontended);
    private static int AdvanceProbe(int probe);
    private bool CasCellsBusy();
}
public class App.Metrics.Concurrency.StripedLongAdder : Striped64 {
    public StripedLongAdder(long value);
    public static int GetEstimatedFootprintInBytes(StripedLongAdder instance);
    public sealed virtual void Add(long value);
    public sealed virtual void Decrement();
    public sealed virtual void Decrement(long value);
    public sealed virtual long GetAndReset();
    public sealed virtual long GetValue();
    public sealed virtual void Increment();
    public sealed virtual void Increment(long value);
    public sealed virtual long NonVolatileGetValue();
    public sealed virtual void Reset();
}
public class App.Metrics.Concurrency.ThreadLocalLongAdder : object {
    private ThreadLocal`1<ValueHolder> _local;
    public ThreadLocalLongAdder(long value);
    public static int GetEstimatedFootprintInBytes(ThreadLocalLongAdder instance);
    public sealed virtual void Add(long value);
    public sealed virtual void Decrement();
    public sealed virtual void Decrement(long value);
    public sealed virtual long GetAndReset();
    public sealed virtual long GetValue();
    public sealed virtual void Increment();
    public sealed virtual void Increment(long value);
    public sealed virtual long NonVolatileGetValue();
    public sealed virtual void Reset();
}
public static class App.Metrics.Concurrency.ThreadLocalRandom : object {
    private static ThreadLocal`1<Random> LocalRandom;
    private static int _seed;
    private static ThreadLocalRandom();
    public static int Next();
    public static int Next(int maxValue);
    public static int Next(int minValue, int maxValue);
    public static void NextBytes(Byte[] buffer);
    public static double NextDouble();
    public static long NextLong();
    public static long NextLong(long max);
}
public class App.Metrics.Concurrency.VolatileDouble : ValueType {
    public static int SizeInBytes;
    private double _value;
    public VolatileDouble(double value);
    private static VolatileDouble();
    public sealed virtual double GetValue();
    public sealed virtual double NonVolatileGetValue();
    public sealed virtual void NonVolatileSetValue(double value);
    public sealed virtual void SetValue(double newValue);
}
