public class App.Metrics.Extensions.Collectors.EventListeners.GcEventListener : EventListener {
    private static int GC_KEYWORD;
    private IMetrics _metrics;
    public GcEventListener(IMetrics metrics);
    protected virtual void OnEventSourceCreated(EventSource eventSource);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    private void ProcessHeapStats(EventWrittenEventArgs eventData);
}
public class App.Metrics.Extensions.Collectors.HostedServices.GcEventsCollectorHostedService : object {
    private IMetrics _metrics;
    private MetricsGcEventsCollectorOptions _options;
    private GcEventListener _gcEventListener;
    private Timer _timer;
    public GcEventsCollectorHostedService(IMetrics metrics, MetricsGcEventsCollectorOptions options);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    private void CollectData(object state);
    public sealed virtual void Dispose();
}
public class App.Metrics.Extensions.Collectors.HostedServices.SystemUsageCollectorHostedService : object {
    private Process _process;
    private IMetrics _metrics;
    private MetricsSystemUsageCollectorOptions _options;
    private Timer _timer;
    private DateTime _lastTimeStamp;
    private TimeSpan _lastTotalProcessorTime;
    private TimeSpan _lastUserProcessorTime;
    private TimeSpan _lastPrivilegedProcessorTime;
    public SystemUsageCollectorHostedService(IMetrics metrics, MetricsSystemUsageCollectorOptions options);
    public sealed virtual void Dispose();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    private void CollectData(object state);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
public class App.Metrics.Extensions.Collectors.MetricsGcEventsCollectorOptions : object {
    [CompilerGeneratedAttribute]
private int <CollectIntervalMilliseconds>k__BackingField;
    public int CollectIntervalMilliseconds { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CollectIntervalMilliseconds();
    [CompilerGeneratedAttribute]
public void set_CollectIntervalMilliseconds(int value);
}
public static class App.Metrics.Extensions.Collectors.MetricsRegistries.GcMetricsRegistry : object {
    public static string ContextName;
    private static GcMetricsRegistry();
}
public static class App.Metrics.Extensions.Collectors.MetricsRegistries.SystemUsageMetricsRegistry : object {
    public static string ContextName;
    private static SystemUsageMetricsRegistry();
}
public class App.Metrics.Extensions.Collectors.MetricsSystemUsageCollectorOptions : object {
    [CompilerGeneratedAttribute]
private int <CollectIntervalMilliseconds>k__BackingField;
    public int CollectIntervalMilliseconds { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CollectIntervalMilliseconds();
    [CompilerGeneratedAttribute]
public void set_CollectIntervalMilliseconds(int value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionAppMetricsCollectorsExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddAppMetricsSystemMetricsCollector(IServiceCollection services, Action`1<MetricsSystemUsageCollectorOptions> optionsSetup);
    [ExtensionAttribute]
public static IServiceCollection AddAppMetricsGcEventsMetricsCollector(IServiceCollection services, Action`1<MetricsGcEventsCollectorOptions> optionsSetup);
    [ExtensionAttribute]
public static IServiceCollection AddAppMetricsCollectors(IServiceCollection services, Action`1<MetricsSystemUsageCollectorOptions> systemUsageOptionsSetup, Action`1<MetricsGcEventsCollectorOptions> gcEventsOptionsSetup);
}
