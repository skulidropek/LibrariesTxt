public class App.Metrics.Extensions.Hosting.MetricsReporterBackgroundService : BackgroundService {
    private static ILog Logger;
    private static TimeSpan WaitBetweenReportRunChecks;
    private IMetrics _metrics;
    private CounterOptions _successCounter;
    private CounterOptions _failedCounter;
    private MetricsOptions _options;
    private bool _stopped;
    private List`1<SchedulerTaskWrapper> _scheduledReporters;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnobservedTaskExceptionEventArgs> UnobservedTaskException;
    public MetricsReporterBackgroundService(IMetrics metrics, MetricsOptions options, IEnumerable`1<IReportMetrics> reporters, IHostApplicationLifetime lifetime);
    private static MetricsReporterBackgroundService();
    [CompilerGeneratedAttribute]
public void add_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    [AsyncStateMachineAttribute("App.Metrics.Extensions.Hosting.MetricsReporterBackgroundService/<ExecuteAsync>d__12")]
protected virtual Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("App.Metrics.Extensions.Hosting.MetricsReporterBackgroundService/<ExecuteOnceAsync>d__13")]
private Task ExecuteOnceAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("App.Metrics.Extensions.Hosting.MetricsReporterBackgroundService/<OnApplicationStopping>d__14")]
private Task OnApplicationStopping();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionMetricsReportingExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMetricsReportingHostedService(IServiceCollection services, EventHandler`1<UnobservedTaskExceptionEventArgs> unobservedTaskExceptionHandler);
}
