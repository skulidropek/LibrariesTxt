[ExtensionAttribute]
public static class App.Metrics.EnvTextOutputFormatterBuilder : object {
    [ExtensionAttribute]
public static IMetricsBuilder AsPlainText(IEnvOutputFormattingBuilder envFormattingBuilder, Action`1<MetricsTextOptions> setupAction);
}
public class App.Metrics.Formatters.Ascii.EnvInfoTextOutputFormatter : object {
    private MetricsTextOptions _options;
    public MetricsMediaTypeValue MediaType { get; }
    public EnvInfoTextOutputFormatter(MetricsTextOptions options);
    public sealed virtual MetricsMediaTypeValue get_MediaType();
    [AsyncStateMachineAttribute("App.Metrics.Formatters.Ascii.EnvInfoTextOutputFormatter/<WriteAsync>d__5")]
public sealed virtual Task WriteAsync(Stream output, EnvironmentInfo environmentInfo, CancellationToken cancellationToken);
}
public class App.Metrics.Formatters.Ascii.EnvInfoTextWriter : object {
    private int _padding;
    private string _separator;
    private TextWriter _textWriter;
    public EnvInfoTextWriter(TextWriter textWriter, string separator, int padding);
    [AsyncStateMachineAttribute("App.Metrics.Formatters.Ascii.EnvInfoTextWriter/<Write>d__4")]
public sealed virtual ValueTask Write(EnvironmentInfo envInfo);
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    private string PaddedFormat(string label, string value);
}
public static class App.Metrics.Formatters.Ascii.Internal.MetricsTextFormatterConstants : object {
}
internal class App.Metrics.Formatters.Ascii.Internal.MetricsTextPoint : object {
    private DateTime _timestamp;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Measurement>k__BackingField;
    [CompilerGeneratedAttribute]
private MetricTags <Tags>k__BackingField;
    private IReadOnlyDictionary`2<string, object> Fields { get; }
    private string Measurement { get; }
    private MetricTags Tags { get; }
    public MetricsTextPoint(string measurement, IReadOnlyDictionary`2<string, object> fields, MetricTags tags, DateTime timestamp);
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> get_Fields();
    [CompilerGeneratedAttribute]
private string get_Measurement();
    [CompilerGeneratedAttribute]
private MetricTags get_Tags();
    [AsyncStateMachineAttribute("App.Metrics.Formatters.Ascii.Internal.MetricsTextPoint/<WriteAsync>d__11")]
public ValueTask WriteAsync(TextWriter textWriter, string separator, int padding);
}
internal class App.Metrics.Formatters.Ascii.Internal.MetricsTextPoints : object {
    private List`1<MetricsTextPoint> _points;
    public void Add(MetricsTextPoint textPoint);
    [AsyncStateMachineAttribute("App.Metrics.Formatters.Ascii.Internal.MetricsTextPoints/<WriteAsync>d__2")]
public ValueTask WriteAsync(TextWriter textWriter, string separator, int padding);
}
internal static class App.Metrics.Formatters.Ascii.Internal.MetricsTextSyntax : object {
    private static Dictionary`2<Type, Func`2<object, string>> Formatters;
    private static MetricsTextSyntax();
    public static string FormatReadable(string label, string value, string separator, int padding);
    public static string FormatValue(object value);
    private static string FormatBoolean(object b);
    private static string FormatFloat(object f);
    private static string FormatInteger(object i);
    private static string FormatTimespan(object ts);
}
public class App.Metrics.Formatters.Ascii.MetricSnapshotTextWriter : object {
    private string _separator;
    private int _padding;
    private TextWriter _textWriter;
    private Func`3<string, string, string> _metricNameFormatter;
    private MetricsTextPoints _textPoints;
    public MetricSnapshotTextWriter(TextWriter textWriter, string separator, int padding, Func`3<string, string, string> metricNameFormatter);
    public sealed virtual void Write(string context, string name, string field, object value, MetricTags tags, DateTime timestamp);
    public sealed virtual void Write(string context, string name, IEnumerable`1<string> columns, IEnumerable`1<object> values, MetricTags tags, DateTime timestamp);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("App.Metrics.Formatters.Ascii.MetricSnapshotTextWriter/<DisposeAsync>d__9")]
protected virtual ValueTask DisposeAsync(bool disposing);
}
public class App.Metrics.Formatters.Ascii.MetricsTextOptions : object {
    [CompilerGeneratedAttribute]
private int <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, string, string> <MetricNameFormatter>k__BackingField;
    public int Padding { get; public set; }
    public string Separator { get; public set; }
    public Encoding Encoding { get; public set; }
    public Func`3<string, string, string> MetricNameFormatter { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(int value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public Func`3<string, string, string> get_MetricNameFormatter();
    [CompilerGeneratedAttribute]
public void set_MetricNameFormatter(Func`3<string, string, string> value);
}
public class App.Metrics.Formatters.Ascii.MetricsTextOutputFormatter : object {
    private MetricsTextOptions _options;
    [CompilerGeneratedAttribute]
private MetricFields <MetricFields>k__BackingField;
    public MetricsMediaTypeValue MediaType { get; }
    public MetricFields MetricFields { get; public set; }
    public MetricsTextOutputFormatter(MetricFields metricFields);
    public MetricsTextOutputFormatter(MetricsTextOptions options);
    public MetricsTextOutputFormatter(MetricsTextOptions options, MetricFields metricFields);
    public sealed virtual MetricsMediaTypeValue get_MediaType();
    [CompilerGeneratedAttribute]
public sealed virtual MetricFields get_MetricFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MetricFields(MetricFields value);
    [AsyncStateMachineAttribute("App.Metrics.Formatters.Ascii.MetricsTextOutputFormatter/<WriteAsync>d__11")]
public sealed virtual Task WriteAsync(Stream output, MetricsDataValueSource metricsData, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class App.Metrics.MetricsTextOutputFormatterBuilder : object {
    [ExtensionAttribute]
public static IMetricsBuilder AsPlainText(IMetricsOutputFormattingBuilder metricFormattingBuilder, Action`1<MetricsTextOptions> setupAction, MetricFields metricFields);
    [ExtensionAttribute]
public static IMetricsBuilder AsPlainText(IMetricsOutputFormattingBuilder metricFormattingBuilder, MetricFields metricFields);
}
