[ExtensionAttribute]
public static class App.Metrics.Health.CacheHealthCheckBuilderExtensions : object {
    [ExtensionAttribute]
public static IHealthBuilder AddCachedCheck(IHealthCheckBuilder builder, string name, Func`1<ValueTask`1<HealthCheckResult>> check, TimeSpan cacheDuration);
    [ExtensionAttribute]
public static IHealthBuilder AddCachedCheck(IHealthCheckBuilder builder, string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check, TimeSpan cacheDuration);
}
public class App.Metrics.Health.Formatters.HealthFormatterCollection : Collection`1<IHealthOutputFormatter> {
    public HealthFormatterCollection(IList`1<IHealthOutputFormatter> list);
    public IHealthOutputFormatter GetType();
    public IHealthOutputFormatter GetType(Type formatterType);
    public IHealthOutputFormatter GetType(HealthMediaTypeValue mediaTypeValue);
    public void RemoveType();
    public void RemoveType(Type formatterType);
    public void RemoveType(HealthMediaTypeValue mediaTypeValue);
    public void TryAdd(IHealthOutputFormatter formatter);
    public void TryAdd(IHealthOutputFormatter formatter);
}
public class App.Metrics.Health.Formatters.HealthMediaTypeValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string ContentType { get; }
    public string Format { get; }
    public string SubType { get; }
    public string Type { get; }
    public string Version { get; }
    public HealthMediaTypeValue(string type, string subType, string version, string format);
    public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public string get_SubType();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Version();
    public static bool op_Equality(HealthMediaTypeValue left, HealthMediaTypeValue right);
    public static bool op_Inequality(HealthMediaTypeValue left, HealthMediaTypeValue right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public bool Equals(HealthMediaTypeValue other);
}
public interface App.Metrics.Health.Formatters.IHealthOutputFormatter {
    public HealthMediaTypeValue MediaType { get; }
    public abstract virtual HealthMediaTypeValue get_MediaType();
    public abstract virtual Task WriteAsync(Stream output, HealthStatus healthStatus, CancellationToken cancellationToken);
}
public class App.Metrics.Health.HealthCheck : object {
    private Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> _check;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private TimeSpan _cacheDuration;
    private Result _cachedResult;
    private AtomicLong _reCheckAt;
    private QuiteTime _quiteTime;
    public string Name { get; }
    public HealthCheck(string name, Func`1<ValueTask`1<HealthCheckResult>> check);
    public HealthCheck(string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check);
    protected HealthCheck(string name);
    public HealthCheck(string name, Func`1<ValueTask`1<HealthCheckResult>> check, TimeSpan cacheDuration);
    public HealthCheck(string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check, TimeSpan cacheDuration);
    protected HealthCheck(string name, TimeSpan cacheDuration);
    public HealthCheck(string name, Func`1<ValueTask`1<HealthCheckResult>> check, QuiteTime quiteTime);
    public HealthCheck(string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check, QuiteTime quiteTime);
    protected HealthCheck(string name, QuiteTime quiteTime);
    [CompilerGeneratedAttribute]
public string get_Name();
    [AsyncStateMachineAttribute("App.Metrics.Health.HealthCheck/<ExecuteAsync>d__7")]
public ValueTask`1<Result> ExecuteAsync(CancellationToken cancellationToken);
    protected virtual ValueTask`1<HealthCheckResult> CheckAsync(CancellationToken cancellationToken);
    private static void EnsureValidCacheDuration(TimeSpan cacheDuration);
    [AsyncStateMachineAttribute("App.Metrics.Health.HealthCheck/<ExecuteWithCachingAsync>d__17")]
private Task`1<Result> ExecuteWithCachingAsync(CancellationToken cancellationToken);
    private bool HasCacheDuration();
    [AsyncStateMachineAttribute("App.Metrics.Health.HealthCheck/<ExecuteWithQuiteTimeAsync>d__23")]
private Task`1<Result> ExecuteWithQuiteTimeAsync(CancellationToken cancellationToken);
    private bool HasQuiteTime();
}
public class App.Metrics.Health.HealthCheckResult : ValueType {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public HealthCheckStatus Status;
    public string Message { get; }
    private HealthCheckResult(HealthCheckStatus status, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    public static HealthCheckResult Degraded(string message, Object[] values);
    public static HealthCheckResult Degraded(Exception exception);
    public static HealthCheckResult Degraded();
    public static HealthCheckResult Healthy();
    public static HealthCheckResult Healthy(string message, Object[] values);
    public static HealthCheckResult Ignore();
    public static HealthCheckResult Ignore(string message);
    public static HealthCheckResult Unhealthy();
    public static HealthCheckResult Unhealthy(string message, Object[] values);
    public static HealthCheckResult Unhealthy(Exception exception);
    private static string FormatStackTrace(Exception exception, int indent);
}
public enum App.Metrics.Health.HealthCheckStatus : Enum {
    public int value__;
    public static HealthCheckStatus Healthy;
    public static HealthCheckStatus Degraded;
    public static HealthCheckStatus Unhealthy;
    public static HealthCheckStatus Ignored;
}
[ExtensionAttribute]
public static class App.Metrics.Health.HealthCheckStatusExtensions : object {
    [ExtensionAttribute]
public static bool IsDegraded(HealthCheckStatus status);
    [ExtensionAttribute]
public static bool IsHealthy(HealthCheckStatus status);
    [ExtensionAttribute]
public static bool IsIgnored(HealthCheckStatus status);
    [ExtensionAttribute]
public static bool IsUnhealthy(HealthCheckStatus status);
}
public static class App.Metrics.Health.HealthConstants : object {
    public static string DegradedStatusDisplay;
    public static string HealthyStatusDisplay;
    public static string UnhealthyStatusDisplay;
    public static string IgnoredStatusDisplay;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ValueTuple`3<double, double, double> HealthScore;
    public static ReadOnlyDictionary`2<HealthCheckStatus, string> HealthStatusDisplay { get; }
    private static HealthConstants();
    public static ReadOnlyDictionary`2<HealthCheckStatus, string> get_HealthStatusDisplay();
}
public class App.Metrics.Health.HealthOptions : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReportingEnabled>k__BackingField;
    public string ApplicationName { get; public set; }
    public bool Enabled { get; public set; }
    public bool ReportingEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReportingEnabled();
    [CompilerGeneratedAttribute]
public void set_ReportingEnabled(bool value);
}
public class App.Metrics.Health.HealthStatus : ValueType {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Result> <Results>k__BackingField;
    public IEnumerable`1<Result> Results { get; }
    public HealthCheckStatus Status { get; }
    public HealthStatus(IEnumerable`1<Result> results);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Result> get_Results();
    public HealthCheckStatus get_Status();
}
public interface App.Metrics.Health.IHealth {
    public IEnumerable`1<HealthCheck> Checks { get; }
    public abstract virtual IEnumerable`1<HealthCheck> get_Checks();
}
public interface App.Metrics.Health.IHealthBuilder {
    public IHealthConfigurationBuilder Configuration { get; }
    public IHealthCheckBuilder HealthChecks { get; }
    public IHealthOutputFormattingBuilder OutputHealth { get; }
    public IHealthReportingBuilder Report { get; }
    public abstract virtual bool CanReport();
    public abstract virtual IHealthConfigurationBuilder get_Configuration();
    public abstract virtual IHealthCheckBuilder get_HealthChecks();
    public abstract virtual IHealthOutputFormattingBuilder get_OutputHealth();
    public abstract virtual IHealthReportingBuilder get_Report();
    public abstract virtual IHealthRoot Build();
}
public interface App.Metrics.Health.IHealthCheckBuilder {
    public IHealthBuilder Builder { get; }
    public abstract virtual IHealthBuilder get_Builder();
    public abstract virtual IHealthBuilder AddCheck(string name, Func`1<ValueTask`1<HealthCheckResult>> check);
    public abstract virtual IHealthBuilder AddCheck(string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check);
    public abstract virtual IHealthBuilder AddCheck(THealthCheck check);
    public abstract virtual IHealthBuilder AddCheck();
    public abstract virtual IHealthBuilder AddChecks(IEnumerable`1<HealthCheck> checks);
}
public interface App.Metrics.Health.IHealthConfigurationBuilder {
    public IHealthBuilder Builder { get; }
    public abstract virtual IHealthBuilder get_Builder();
    public abstract virtual IHealthBuilder Configure(HealthOptions options);
    public abstract virtual IHealthBuilder Configure(IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    public abstract virtual IHealthBuilder Configure(HealthOptions options, IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    public abstract virtual IHealthBuilder Configure(Action`1<HealthOptions> setupAction);
    public abstract virtual IHealthBuilder Extend(HealthOptions options);
    public abstract virtual IHealthBuilder Extend(IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
}
public interface App.Metrics.Health.IHealthOutputFormattingBuilder {
    public IHealthBuilder Builder { get; }
    public abstract virtual IHealthBuilder get_Builder();
    public abstract virtual IHealthBuilder Using(IHealthOutputFormatter formatter);
    public abstract virtual IHealthBuilder Using();
    public abstract virtual IHealthBuilder Using(IHealthOutputFormatter formatter, bool replaceExisting);
    public abstract virtual IHealthBuilder Using(bool replaceExisting);
}
public interface App.Metrics.Health.IHealthReportingBuilder {
    public IHealthBuilder Builder { get; }
    public abstract virtual IHealthBuilder get_Builder();
    public abstract virtual IHealthBuilder Using(IReportHealthStatus reporter);
    public abstract virtual IHealthBuilder Using();
    public abstract virtual IHealthBuilder Using(TimeSpan reportInterval);
}
public interface App.Metrics.Health.IHealthRoot {
    public IHealthOutputFormatter DefaultOutputHealthFormatter { get; }
    public IRunHealthChecks HealthCheckRunner { get; }
    public HealthOptions Options { get; }
    public IReadOnlyCollection`1<IHealthOutputFormatter> OutputHealthFormatters { get; }
    public IReadOnlyCollection`1<IReportHealthStatus> Reporters { get; }
    public abstract virtual IHealthOutputFormatter get_DefaultOutputHealthFormatter();
    public abstract virtual IRunHealthChecks get_HealthCheckRunner();
    public abstract virtual HealthOptions get_Options();
    public abstract virtual IReadOnlyCollection`1<IHealthOutputFormatter> get_OutputHealthFormatters();
    public abstract virtual IReadOnlyCollection`1<IReportHealthStatus> get_Reporters();
}
public static class App.Metrics.Health.Internal.AppMetricsHealthTaskHelper : object {
    private static Task _completedTask;
    public static Task CompletedTask();
}
public class App.Metrics.Health.Internal.HealthReporterCollection : Collection`1<IReportHealthStatus> {
    public HealthReporterCollection(IList`1<IReportHealthStatus> list);
    public IReportHealthStatus GetType();
    public IReportHealthStatus GetType(Type reporterType);
    public void RemoveType();
    public void RemoveType(Type reporterType);
    public void TryAdd(IReportHealthStatus reporter);
    public void TryAdd(IReportHealthStatus reporter);
}
public interface App.Metrics.Health.IReportHealthStatus {
    public TimeSpan ReportInterval { get; public set; }
    public abstract virtual TimeSpan get_ReportInterval();
    public abstract virtual void set_ReportInterval(TimeSpan value);
    public abstract virtual Task ReportAsync(HealthOptions options, HealthStatus status, CancellationToken cancellationToken);
}
public interface App.Metrics.Health.IRunHealthChecks {
    public abstract virtual ValueTask`1<HealthStatus> ReadAsync(CancellationToken cancellationToken);
}
public interface App.Metrics.Health.Logging.ILog {
    public abstract virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public interface App.Metrics.Health.Logging.ILogProvider {
    public abstract virtual Logger GetLogger(string name);
    public abstract virtual IDisposable OpenNestedContext(string message);
    public abstract virtual IDisposable OpenMappedContext(string key, string value);
}
[ExtensionAttribute]
public static class App.Metrics.Health.Logging.LogExtensions : object {
    [ExtensionAttribute]
public static bool IsDebugEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsErrorEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsFatalEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsInfoEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsTraceEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsWarnEnabled(ILog logger);
    [ExtensionAttribute]
public static void Debug(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Debug(ILog logger, string message);
    [ExtensionAttribute]
public static void Debug(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Debug(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void DebugFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void DebugException(ILog logger, string message, Exception exception);
    [ExtensionAttribute]
public static void DebugException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Error(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Error(ILog logger, string message);
    [ExtensionAttribute]
public static void Error(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Error(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void ErrorFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void ErrorException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Fatal(ILog logger, string message);
    [ExtensionAttribute]
public static void Fatal(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void FatalFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void FatalException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Info(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Info(ILog logger, string message);
    [ExtensionAttribute]
public static void Info(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Info(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void InfoFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void InfoException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Trace(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Trace(ILog logger, string message);
    [ExtensionAttribute]
public static void Trace(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Trace(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void TraceFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void TraceException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Warn(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Warn(ILog logger, string message);
    [ExtensionAttribute]
public static void Warn(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILog logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void WarnFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void WarnException(ILog logger, string message, Exception exception, Object[] formatParams);
    private static void GuardAgainstNullLogger(ILog logger);
    [ExtensionAttribute]
private static void LogFormat(ILog logger, LogLevel logLevel, string message, Object[] args);
    [ExtensionAttribute]
private static Func`1<T> AsFunc(T value);
    [ExtensionAttribute]
private static T Return(T value);
    internal static Func`1<string> WrapLogSafeInternal(LoggerExecutionWrapper logger, Func`1<string> messageFunc);
    private static Func`1<string> WrapLogInternal(Func`1<string> messageFunc);
}
public class App.Metrics.Health.Logging.Logger : MulticastDelegate {
    public Logger(object object, IntPtr method);
    public virtual bool Invoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
    public virtual IAsyncResult BeginInvoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class App.Metrics.Health.Logging.LoggerExecutionWrapper : object {
    private Logger _logger;
    private ICallSiteExtension _callsiteLogger;
    private Func`1<bool> _getIsDisabled;
    internal static string FailedToGenerateLogMessage;
    internal Logger WrappedLogger { get; }
    internal LoggerExecutionWrapper(Logger logger, Func`1<bool> getIsDisabled);
    internal Logger get_WrappedLogger();
    public sealed virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public enum App.Metrics.Health.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
public static class App.Metrics.Health.Logging.LogProvider : object {
    private static string NullLogProvider;
    [DynamicAttribute]
private static object s_currentLogProvider;
    private static Action`1<ILogProvider> s_onCurrentLogProviderSet;
    private static Lazy`1<ILogProvider> s_resolvedLogProvider;
    [CompilerGeneratedAttribute]
private static bool <IsDisabled>k__BackingField;
    internal static List`1<Tuple`2<IsLoggerAvailable, CreateLogProvider>> LogProviderResolvers;
    public static bool IsDisabled { get; public set; }
    unknown static Action`1<ILogProvider> OnCurrentLogProviderSet {internal set; }
    internal static ILogProvider CurrentLogProvider { get; }
    private static LogProvider();
    public static void SetCurrentLogProvider(ILogProvider logProvider);
    [CompilerGeneratedAttribute]
public static bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public static void set_IsDisabled(bool value);
    internal static void set_OnCurrentLogProviderSet(Action`1<ILogProvider> value);
    internal static ILogProvider get_CurrentLogProvider();
    public static ILog For();
    public static ILog GetLogger(Type type, string fallbackTypeName);
    public static ILog GetLogger(string name);
    public static IDisposable OpenNestedContext(string message);
    public static IDisposable OpenMappedContext(string key, string value);
    private static void RaiseOnCurrentLogProviderSet();
    internal static ILogProvider ResolveLogProvider();
    internal static ILogProvider ForceResolveLogProvider();
}
internal class App.Metrics.Health.Logging.LogProviders.DisposableAction : object {
    private Action _onDispose;
    public DisposableAction(Action onDispose);
    public sealed virtual void Dispose();
}
internal class App.Metrics.Health.Logging.LogProviders.EntLibLogProvider : LogProviderBase {
    private static string TypeTemplate;
    private static bool s_providerIsAvailableOverride;
    private static Type LogEntryType;
    private static Type LoggerType;
    private static Type TraceEventTypeType;
    private static Action`3<string, string, int> WriteLogEntry;
    private static Func`3<string, int, bool> ShouldLogEntry;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static EntLibLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    private static Action`3<string, string, int> GetWriteLogEntry();
    private static Func`3<string, int, bool> GetShouldLogEntry();
    private static MemberInitExpression GetWriteLogExpression(Expression message, Expression severityParameter, ParameterExpression logNameParameter);
}
internal class App.Metrics.Health.Logging.LogProviders.Log4NetLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static Log4NetLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
internal static class App.Metrics.Health.Logging.LogProviders.LogMessageFormatter : object {
    private static Regex Pattern;
    private static LogMessageFormatter();
    public static Func`1<string> SimulateStructuredLogging(Func`1<string> messageBuilder, Object[] formatParameters);
    private static string ReplaceFirst(string text, string search, string replace);
    public static string FormatStructuredMessage(string targetMessage, Object[] formatParameters, IEnumerable`1& patternMatches);
}
internal abstract class App.Metrics.Health.Logging.LogProviders.LogProviderBase : object {
    private Lazy`1<OpenNdc> _lazyOpenNdcMethod;
    private Lazy`1<OpenMdc> _lazyOpenMdcMethod;
    private static IDisposable NoopDisposableInstance;
    private static LogProviderBase();
    public abstract virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenNestedContext(string message);
    public sealed virtual IDisposable OpenMappedContext(string key, string value);
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
}
internal class App.Metrics.Health.Logging.LogProviders.LoupeLogProvider : LogProviderBase {
    private static bool s_providerIsAvailableOverride;
    private WriteDelegate _logWriteDelegate;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static LoupeLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    private static Type GetLogManagerType();
    private static WriteDelegate GetLogWriteDelegate();
}
internal class App.Metrics.Health.Logging.LogProviders.NLogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static NLogLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
internal class App.Metrics.Health.Logging.LogProviders.SerilogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    private static Func`3<string, string, IDisposable> _pushProperty;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static SerilogLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Func`3<string, string, IDisposable> GetPushProperty();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetForContextMethodCall();
}
internal static class App.Metrics.Health.Logging.LogProviders.TraceEventTypeValues : object {
    internal static Type Type;
    internal static int Verbose;
    internal static int Information;
    internal static int Warning;
    internal static int Error;
    internal static int Critical;
    private static TraceEventTypeValues();
}
[ExtensionAttribute]
internal static class App.Metrics.Health.Logging.LogProviders.TypeExtensions : object {
    [ExtensionAttribute]
internal static ConstructorInfo GetConstructorPortable(Type type, Type[] types);
    [ExtensionAttribute]
internal static MethodInfo GetMethodPortable(Type type, string name);
    [ExtensionAttribute]
internal static MethodInfo GetMethodPortable(Type type, string name, Type[] types);
    [ExtensionAttribute]
internal static PropertyInfo GetPropertyPortable(Type type, string name);
    [ExtensionAttribute]
internal static IEnumerable`1<FieldInfo> GetFieldsPortable(Type type);
    [ExtensionAttribute]
internal static Type GetBaseTypePortable(Type type);
    [ExtensionAttribute]
internal static MethodInfo GetGetMethod(PropertyInfo propertyInfo);
    [ExtensionAttribute]
internal static MethodInfo GetSetMethod(PropertyInfo propertyInfo);
    [ExtensionAttribute]
internal static Assembly GetAssemblyPortable(Type type);
}
[ExtensionAttribute]
public static class App.Metrics.Health.QuiteTimeHealthCheckBuilderExtensions : object {
    [ExtensionAttribute]
public static IHealthBuilder AddQuiteTimeCheck(IHealthCheckBuilder builder, string name, Func`1<ValueTask`1<HealthCheckResult>> check, QuiteTime quiteTime);
    [ExtensionAttribute]
public static IHealthBuilder AddQuiteTimeCheck(IHealthCheckBuilder builder, string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check, QuiteTime quiteTime);
}
public class App.Metrics.Health.Serialization.HealthStatusSerializer : object {
    public void Serialize(IHealthStatusWriter writer, HealthStatus healthStatus);
}
public interface App.Metrics.Health.Serialization.IHealthStatusWriter {
    public abstract virtual void Write(HealthStatus healthStatus);
}
