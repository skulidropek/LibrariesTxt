public class App.Metrics.Health.Builder.HealthBuilder : object {
    private static ILog Logger;
    private Dictionary`2<string, HealthCheck> _checks;
    private HealthFormatterCollection _healthFormatterCollection;
    private HealthReporterCollection _healthStatusReporters;
    private IHealthOutputFormatter _defaultMetricsHealthFormatter;
    private HealthOptions _options;
    public IHealthConfigurationBuilder Configuration { get; }
    public IHealthCheckBuilder HealthChecks { get; }
    public IHealthOutputFormattingBuilder OutputHealth { get; }
    public IHealthReportingBuilder Report { get; }
    private static HealthBuilder();
    public sealed virtual bool CanReport();
    public sealed virtual IHealthConfigurationBuilder get_Configuration();
    public sealed virtual IHealthCheckBuilder get_HealthChecks();
    public sealed virtual IHealthOutputFormattingBuilder get_OutputHealth();
    public sealed virtual IHealthReportingBuilder get_Report();
    public sealed virtual IHealthRoot Build();
    [CompilerGeneratedAttribute]
private void <get_Configuration>b__8_0(HealthOptions options);
    [CompilerGeneratedAttribute]
private void <get_HealthChecks>b__10_0(HealthCheck healthCheck);
    [CompilerGeneratedAttribute]
private void <get_OutputHealth>b__12_0(bool replaceExisting, IHealthOutputFormatter formatter);
    [CompilerGeneratedAttribute]
private void <get_Report>b__14_0(IReportHealthStatus reporter);
}
public class App.Metrics.Health.Builder.HealthCheckBuilder : object {
    private Action`1<HealthCheck> _healthCheck;
    [CompilerGeneratedAttribute]
private IHealthBuilder <Builder>k__BackingField;
    public IHealthBuilder Builder { get; }
    internal HealthCheckBuilder(IHealthBuilder healthBuilder, Action`1<HealthCheck> healthCheck);
    [CompilerGeneratedAttribute]
public sealed virtual IHealthBuilder get_Builder();
    public sealed virtual IHealthBuilder AddChecks(IEnumerable`1<HealthCheck> checks);
    public sealed virtual IHealthBuilder AddCheck(THealthCheck check);
    public sealed virtual IHealthBuilder AddCheck();
    public sealed virtual IHealthBuilder AddCheck(string name, Func`1<ValueTask`1<HealthCheckResult>> check);
    public sealed virtual IHealthBuilder AddCheck(string name, Func`2<CancellationToken, ValueTask`1<HealthCheckResult>> check);
    internal void Register(IEnumerable`1<HealthCheck> healthChecks);
    internal void Register(HealthCheck healthCheck);
}
public class App.Metrics.Health.Builder.HealthReportingBuilder : object {
    private Action`1<IReportHealthStatus> _reporters;
    [CompilerGeneratedAttribute]
private IHealthBuilder <Builder>k__BackingField;
    public IHealthBuilder Builder { get; }
    public HealthReportingBuilder(IHealthBuilder healthBuilder, Action`1<IReportHealthStatus> reporters);
    [CompilerGeneratedAttribute]
public sealed virtual IHealthBuilder get_Builder();
    public sealed virtual IHealthBuilder Using(IReportHealthStatus reporter);
    public sealed virtual IHealthBuilder Using();
    public sealed virtual IHealthBuilder Using(TimeSpan reportInterval);
    private static void EnsureRequiredProperties(IReportHealthStatus reporter);
}
public class App.Metrics.Health.HealthConfigurationBuilder : object {
    private Action`1<HealthOptions> _setupAction;
    private HealthOptions _options;
    [CompilerGeneratedAttribute]
private IHealthBuilder <Builder>k__BackingField;
    public IHealthBuilder Builder { get; }
    internal HealthConfigurationBuilder(IHealthBuilder healthBuilder, HealthOptions currentOptions, Action`1<HealthOptions> setupAction);
    [CompilerGeneratedAttribute]
public sealed virtual IHealthBuilder get_Builder();
    public sealed virtual IHealthBuilder Configure(HealthOptions options);
    public sealed virtual IHealthBuilder Configure(IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    public sealed virtual IHealthBuilder Configure(HealthOptions options, IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    public sealed virtual IHealthBuilder Configure(Action`1<HealthOptions> setupAction);
    public sealed virtual IHealthBuilder Extend(IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    public sealed virtual IHealthBuilder Extend(HealthOptions options);
}
public class App.Metrics.Health.HealthOutputFormattingBuilder : object {
    private Action`2<bool, IHealthOutputFormatter> _metricsFormatter;
    [CompilerGeneratedAttribute]
private IHealthBuilder <Builder>k__BackingField;
    public IHealthBuilder Builder { get; }
    internal HealthOutputFormattingBuilder(IHealthBuilder healthBuilder, Action`2<bool, IHealthOutputFormatter> metricsFormatter);
    [CompilerGeneratedAttribute]
public sealed virtual IHealthBuilder get_Builder();
    public sealed virtual IHealthBuilder Using(IHealthOutputFormatter formatter);
    public sealed virtual IHealthBuilder Using();
    public sealed virtual IHealthBuilder Using(IHealthOutputFormatter formatter, bool replaceExisting);
    public sealed virtual IHealthBuilder Using(bool replaceExisting);
}
public class App.Metrics.Health.HealthRoot : object {
    private IHealth _health;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IHealthOutputFormatter> <OutputHealthFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private IHealthOutputFormatter <DefaultOutputHealthFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunHealthChecks <HealthCheckRunner>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IReportHealthStatus> <Reporters>k__BackingField;
    public IReadOnlyCollection`1<IHealthOutputFormatter> OutputHealthFormatters { get; }
    public IHealthOutputFormatter DefaultOutputHealthFormatter { get; }
    public HealthOptions Options { get; }
    public IRunHealthChecks HealthCheckRunner { get; }
    public IReadOnlyCollection`1<IReportHealthStatus> Reporters { get; }
    public IEnumerable`1<HealthCheck> Checks { get; }
    public HealthRoot(IHealth health, HealthOptions options, HealthFormatterCollection metricsOutputFormatters, IHealthOutputFormatter defaultMetricsOutputFormatter, IRunHealthChecks healthCheckRunner, HealthReporterCollection reporterCollection);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IHealthOutputFormatter> get_OutputHealthFormatters();
    [CompilerGeneratedAttribute]
public sealed virtual IHealthOutputFormatter get_DefaultOutputHealthFormatter();
    [CompilerGeneratedAttribute]
public sealed virtual HealthOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual IRunHealthChecks get_HealthCheckRunner();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IReportHealthStatus> get_Reporters();
    public sealed virtual IEnumerable`1<HealthCheck> get_Checks();
}
public class App.Metrics.Health.Internal.DefaultHealth : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HealthCheck> <Checks>k__BackingField;
    public IEnumerable`1<HealthCheck> Checks { get; }
    public DefaultHealth(IEnumerable`1<HealthCheck> checks);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<HealthCheck> get_Checks();
}
public class App.Metrics.Health.Internal.DefaultHealthCheckRunner : object {
    private static ILog Logger;
    private IEnumerable`1<HealthCheck> _checks;
    public DefaultHealthCheckRunner(IEnumerable`1<HealthCheck> checks);
    private static DefaultHealthCheckRunner();
    [AsyncStateMachineAttribute("App.Metrics.Health.Internal.DefaultHealthCheckRunner/<ReadAsync>d__3")]
public sealed virtual ValueTask`1<HealthStatus> ReadAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class App.Metrics.Health.Internal.Extensions.HealthOptionsExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> ToKeyValue(HealthOptions options);
}
internal class App.Metrics.Health.Internal.KeyValuePairHealthOptions : object {
    internal static string EnabledDirective;
    internal static string ApplicationNameDirective;
    internal static string ReportingEnabledDirective;
    private HealthOptions _options;
    private Dictionary`2<string, string> _optionValues;
    public KeyValuePairHealthOptions(HealthOptions options, IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    public KeyValuePairHealthOptions(IEnumerable`1<KeyValuePair`2<string, string>> optionValues);
    private static KeyValuePairHealthOptions();
    public HealthOptions AsOptions();
}
[ExcludeFromCodeCoverageAttribute]
public class App.Metrics.Health.Internal.NoOp.NoOpHealthCheckRunner : object {
    public sealed virtual ValueTask`1<HealthStatus> ReadAsync(CancellationToken cancellationToken);
    public Task FormatAsync(Stream output, HealthStatus status, CancellationToken cancellationToken);
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class App.Metrics.Health.Logging.AppMetricsHealthLoggerExtensions : object {
    private static double TimestampToTicks;
    private static AppMetricsHealthLoggerExtensions();
    [ExtensionAttribute]
internal static void HealthCheckGetStatusExecuted(ILog logger, HealthStatus healthStatus, long startTimestamp);
    [ExtensionAttribute]
internal static void HealthCheckGetStatusExecuting(ILog logger);
}
