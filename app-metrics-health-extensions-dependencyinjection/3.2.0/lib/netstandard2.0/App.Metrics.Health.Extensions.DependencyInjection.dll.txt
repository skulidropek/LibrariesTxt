[ExcludeFromCodeCoverageAttribute]
public class App.Metrics.Health.Extensions.DependencyInjection.Internal.AppMetricsHealthMarkerService : object {
}
[ExcludeFromCodeCoverageAttribute]
public static class App.Metrics.Health.Extensions.DependencyInjection.Internal.AppMetricsHealthServicesHelper : object {
    private static string InvalidOperationExceptionMessage;
    private static AppMetricsHealthServicesHelper();
    public static void ThrowIfMetricsNotRegistered(IServiceProvider services);
    public static void ThrowIfMetricsNotRegistered(IServiceCollection services);
}
internal class App.Metrics.Health.Extensions.DependencyInjection.Internal.DefaultHealthCheckTypeProvider : object {
    private static string HealthCheckTypeName;
    private static TypeInfo ObjectTypeInfo;
    private StaticHealthAssemblyProvider _assemblyProvider;
    public IEnumerable`1<TypeInfo> HealthCheckTypes { get; }
    internal DefaultHealthCheckTypeProvider(StaticHealthAssemblyProvider assemblyProvider);
    private static DefaultHealthCheckTypeProvider();
    public sealed virtual IEnumerable`1<TypeInfo> get_HealthCheckTypes();
    internal static bool IsHealthCheck(TypeInfo typeInfo, ISet`1<Assembly> candidateAssemblies);
    private static bool DerivesFromHealthCheck(TypeInfo typeInfo, ISet`1<Assembly> candidateAssemblies);
}
internal static class App.Metrics.Health.Extensions.DependencyInjection.Internal.HealthAssemblyDiscoveryProvider : object {
    private static string ReferenceAssembliesPrefix;
    private static HealthAssemblyDiscoveryProvider();
    internal static IEnumerable`1<Assembly> DiscoverAssemblies(DependencyContext dependencyContext);
    internal static IEnumerable`1<Assembly> GetCandidateAssemblies(DependencyContext dependencyContext);
    internal static IEnumerable`1<RuntimeLibrary> GetCandidateLibraries(DependencyContext dependencyContext);
    internal static DependencyContext GetDependencyContext();
    private static bool IsCandidateLibrary(RuntimeLibrary library);
}
internal static class App.Metrics.Health.Extensions.DependencyInjection.Internal.HealthChecksAsServices : object {
    public static void AddHealthChecksAsServices(IServiceCollection services, IEnumerable`1<Type> types);
    public static void AddHealthChecksAsServices(IServiceCollection services, IEnumerable`1<Assembly> assemblies);
}
internal interface App.Metrics.Health.Extensions.DependencyInjection.Internal.IHealthCheckTypeProvider {
    public IEnumerable`1<TypeInfo> HealthCheckTypes { get; }
    public abstract virtual IEnumerable`1<TypeInfo> get_HealthCheckTypes();
}
internal class App.Metrics.Health.Extensions.DependencyInjection.Internal.StaticHealthAssemblyProvider : object {
    [CompilerGeneratedAttribute]
private IList`1<Assembly> <CandidateAssemblies>k__BackingField;
    public IList`1<Assembly> CandidateAssemblies { get; }
    [CompilerGeneratedAttribute]
public IList`1<Assembly> get_CandidateAssemblies();
}
internal class App.Metrics.Health.Extensions.DependencyInjection.Internal.StaticHealthCheckTypeProvider : object {
    [CompilerGeneratedAttribute]
private IList`1<TypeInfo> <HealthCheckTypes>k__BackingField;
    public IList`1<TypeInfo> HealthCheckTypes { get; }
    private IEnumerable`1<TypeInfo> App.Metrics.Health.Extensions.DependencyInjection.Internal.IHealthCheckTypeProvider.HealthCheckTypes { get; }
    public StaticHealthCheckTypeProvider(IEnumerable`1<TypeInfo> controllerTypes);
    [CompilerGeneratedAttribute]
public IList`1<TypeInfo> get_HealthCheckTypes();
    private sealed virtual override IEnumerable`1<TypeInfo> App.Metrics.Health.Extensions.DependencyInjection.Internal.IHealthCheckTypeProvider.get_HealthCheckTypes();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AppMetricsHealthServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHealth(IServiceCollection services, Action`1<IHealthBuilder> setupHealth);
    [ExtensionAttribute]
public static IServiceCollection AddHealth(IServiceCollection services, IHealthBuilder builder);
    [ExtensionAttribute]
public static IServiceCollection AddHealth(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddHealth(IServiceCollection services, IHealthRoot health);
    internal static void AddCoreServices(IServiceCollection services, IHealthRoot health);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionHealthBuilderExtensions : object {
    [ExtensionAttribute]
public static IHealthRoot BuildAndAddTo(IHealthBuilder builder, IServiceCollection services);
    private static IEnumerable`1<HealthCheck> ResolveAllHealthChecks(IServiceProvider provider, IHealth health);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionHealthCheckBuilderExtensions : object {
    [ExtensionAttribute]
public static IHealthBuilder RegisterFromAssembly(IHealthCheckBuilder healthCheckBuilder, IServiceCollection services, DependencyContext dependencyContext);
}
