public class App.Metrics.Health.Extensions.Hosting.HealthReporterBackgroundService : BackgroundService {
    private static ILog Logger;
    private static TimeSpan WaitBetweenReportRunChecks;
    private IHealthRoot _healthRoot;
    private List`1<SchedulerTaskWrapper> _scheduledReporters;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnobservedTaskExceptionEventArgs> UnobservedTaskException;
    public HealthReporterBackgroundService(IHealthRoot healthRoot, TimeSpan checkInterval);
    private static HealthReporterBackgroundService();
    [CompilerGeneratedAttribute]
public void add_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    [AsyncStateMachineAttribute("App.Metrics.Health.Extensions.Hosting.HealthReporterBackgroundService/<ExecuteAsync>d__8")]
protected virtual Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("App.Metrics.Health.Extensions.Hosting.HealthReporterBackgroundService/<ExecuteOnceAsync>d__9")]
private Task ExecuteOnceAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionHealthReportingExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHealthReportingHostedService(IServiceCollection services, EventHandler`1<UnobservedTaskExceptionEventArgs> unobservedTaskExceptionHandler);
    [ExtensionAttribute]
public static IServiceCollection AddHealthReportingHostedService(IServiceCollection services, TimeSpan checkInterval, EventHandler`1<UnobservedTaskExceptionEventArgs> unobservedTaskExceptionHandler);
}
