[ExtensionAttribute]
public static class App.Metrics.MetricsInfluxDbReporterBuilder : object {
    [ExtensionAttribute]
public static IMetricsBuilder ToInfluxDb(IMetricsReportingBuilder metricReporterProviderBuilder, MetricsReportingInfluxDbOptions options);
    [ExtensionAttribute]
public static IMetricsBuilder ToInfluxDb(IMetricsReportingBuilder metricReporterProviderBuilder, Action`1<MetricsReportingInfluxDbOptions> setupAction);
    [ExtensionAttribute]
public static IMetricsBuilder ToInfluxDb(IMetricsReportingBuilder metricReporterProviderBuilder, string url, string database, Action`1<MetricFields> fieldsSetup, Action`1<MetricsInfluxDbLineProtocolOptions> lineProtocolOptionsSetup);
    [ExtensionAttribute]
public static IMetricsBuilder ToInfluxDb(IMetricsReportingBuilder metricReporterProviderBuilder, string url, string database, TimeSpan flushInterval, Action`1<MetricFields> fieldsSetup, Action`1<MetricsInfluxDbLineProtocolOptions> lineProtocolOptionsSetup);
    internal static ILineProtocolClient CreateClient(InfluxDbOptions influxDbOptions, HttpPolicy httpPolicy, HttpMessageHandler httpMessageHandler);
}
internal static class App.Metrics.Reporting.InfluxDB.Client.Constants : object {
    public static TimeSpan DefaultBackoffPeriod;
    public static int DefaultFailuresBeforeBackoff;
    public static TimeSpan DefaultTimeout;
    private static Constants();
}
public class App.Metrics.Reporting.InfluxDB.Client.DefaultLineProtocolClient : object {
    private static ILog Logger;
    private static long _backOffTicks;
    private static long _failureAttempts;
    private static long _failuresBeforeBackoff;
    private static TimeSpan _backOffPeriod;
    private HttpClient _httpClient;
    private InfluxDbOptions _influxDbOptions;
    public DefaultLineProtocolClient(InfluxDbOptions influxDbOptions, HttpPolicy httpPolicy, HttpClient httpClient);
    private static DefaultLineProtocolClient();
    [AsyncStateMachineAttribute("App.Metrics.Reporting.InfluxDB.Client.DefaultLineProtocolClient/<WriteAsync>d__8")]
public sealed virtual Task`1<LineProtocolWriteResult> WriteAsync(Stream payload, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("App.Metrics.Reporting.InfluxDB.Client.DefaultLineProtocolClient/<TryCreateDatabase>d__9")]
private Task`1<LineProtocolWriteResult> TryCreateDatabase(CancellationToken cancellationToken);
    private bool NeedToBackoff();
}
public class App.Metrics.Reporting.InfluxDB.Client.HttpPolicy : object {
    [CompilerGeneratedAttribute]
private TimeSpan <BackoffPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailuresBeforeBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan BackoffPeriod { get; public set; }
    public int FailuresBeforeBackoff { get; public set; }
    public TimeSpan Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_BackoffPeriod();
    [CompilerGeneratedAttribute]
public void set_BackoffPeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_FailuresBeforeBackoff();
    [CompilerGeneratedAttribute]
public void set_FailuresBeforeBackoff(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
}
public interface App.Metrics.Reporting.InfluxDB.Client.ILineProtocolClient {
    public abstract virtual Task`1<LineProtocolWriteResult> WriteAsync(Stream payload, CancellationToken cancellationToken);
}
public class App.Metrics.Reporting.InfluxDB.Client.LineProtocolWriteResult : ValueType {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public string ErrorMessage { get; }
    public bool Success { get; }
    public LineProtocolWriteResult(bool success);
    public LineProtocolWriteResult(bool success, string errorMessage);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Success();
}
public class App.Metrics.Reporting.InfluxDB.InfluxDbMetricsReporter : object {
    private static ILog Logger;
    private IMetricsOutputFormatter _defaultMetricsOutputFormatter;
    private ILineProtocolClient _lineProtocolClient;
    [CompilerGeneratedAttribute]
private IFilterMetrics <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FlushInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetricsOutputFormatter <Formatter>k__BackingField;
    public IFilterMetrics Filter { get; public set; }
    public TimeSpan FlushInterval { get; public set; }
    public IMetricsOutputFormatter Formatter { get; public set; }
    public InfluxDbMetricsReporter(MetricsReportingInfluxDbOptions options, ILineProtocolClient lineProtocolClient);
    private static InfluxDbMetricsReporter();
    [CompilerGeneratedAttribute]
public sealed virtual IFilterMetrics get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Filter(IFilterMetrics value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_FlushInterval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FlushInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual IMetricsOutputFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Formatter(IMetricsOutputFormatter value);
    [AsyncStateMachineAttribute("App.Metrics.Reporting.InfluxDB.InfluxDbMetricsReporter/<FlushAsync>d__16")]
public sealed virtual Task`1<bool> FlushAsync(MetricsDataValueSource metricsData, CancellationToken cancellationToken);
}
public class App.Metrics.Reporting.InfluxDB.InfluxDbOptions : object {
    [CompilerGeneratedAttribute]
private string <Consistenency>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RetentionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateDataBaseIfNotExists>k__BackingField;
    [CompilerGeneratedAttribute]
private RetentionPolicyOptions <CreateDatabaseRetentionPolicy>k__BackingField;
    public string Consistenency { get; public set; }
    public string Endpoint { get; }
    public Uri BaseUri { get; public set; }
    public string Database { get; public set; }
    public string Password { get; public set; }
    public string RetentionPolicy { get; public set; }
    public string UserName { get; public set; }
    public bool CreateDataBaseIfNotExists { get; public set; }
    public RetentionPolicyOptions CreateDatabaseRetentionPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Consistenency();
    [CompilerGeneratedAttribute]
public void set_Consistenency(string value);
    public string get_Endpoint();
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_RetentionPolicy();
    [CompilerGeneratedAttribute]
public void set_RetentionPolicy(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public bool get_CreateDataBaseIfNotExists();
    [CompilerGeneratedAttribute]
public void set_CreateDataBaseIfNotExists(bool value);
    [CompilerGeneratedAttribute]
public RetentionPolicyOptions get_CreateDatabaseRetentionPolicy();
    [CompilerGeneratedAttribute]
public void set_CreateDatabaseRetentionPolicy(RetentionPolicyOptions value);
}
public class App.Metrics.Reporting.InfluxDB.MetricsReportingInfluxDbOptions : object {
    [CompilerGeneratedAttribute]
private IFilterMetrics <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpPolicy <HttpPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private InfluxDbOptions <InfluxDb>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetricsOutputFormatter <MetricsOutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FlushInterval>k__BackingField;
    public IFilterMetrics Filter { get; public set; }
    public HttpPolicy HttpPolicy { get; public set; }
    public InfluxDbOptions InfluxDb { get; public set; }
    public IMetricsOutputFormatter MetricsOutputFormatter { get; public set; }
    public TimeSpan FlushInterval { get; public set; }
    [CompilerGeneratedAttribute]
public IFilterMetrics get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(IFilterMetrics value);
    [CompilerGeneratedAttribute]
public HttpPolicy get_HttpPolicy();
    [CompilerGeneratedAttribute]
public void set_HttpPolicy(HttpPolicy value);
    [CompilerGeneratedAttribute]
public InfluxDbOptions get_InfluxDb();
    [CompilerGeneratedAttribute]
public void set_InfluxDb(InfluxDbOptions value);
    [CompilerGeneratedAttribute]
public IMetricsOutputFormatter get_MetricsOutputFormatter();
    [CompilerGeneratedAttribute]
public void set_MetricsOutputFormatter(IMetricsOutputFormatter value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FlushInterval();
    [CompilerGeneratedAttribute]
public void set_FlushInterval(TimeSpan value);
}
public class App.Metrics.Reporting.InfluxDB.RetentionPolicyOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Replication>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ShardDuration>k__BackingField;
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> Replication { get; public set; }
    public Nullable`1<TimeSpan> ShardDuration { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Replication();
    [CompilerGeneratedAttribute]
public void set_Replication(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ShardDuration();
    [CompilerGeneratedAttribute]
public void set_ShardDuration(Nullable`1<TimeSpan> value);
    public bool TryApply(String& clause);
}
