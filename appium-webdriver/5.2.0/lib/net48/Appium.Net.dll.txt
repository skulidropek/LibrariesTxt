public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByClassName`1 {
    public abstract virtual W FindElementByClassName(string className);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByClassName(string className);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByCssSelector`1 {
    public abstract virtual W FindElementByCssSelector(string cssSelector);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByCssSelector(string cssSelector);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsById`1 {
    public abstract virtual W FindElementById(string id);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsById(string id);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByLinkText`1 {
    public abstract virtual W FindElementByLinkText(string linkText);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByLinkText(string linkText);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByName`1 {
    public abstract virtual W FindElementByName(string name);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByName(string name);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByPartialLinkText`1 {
    public abstract virtual W FindElementByPartialLinkText(string partialLinkText);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByPartialLinkText(string partialLinkText);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByTagName`1 {
    public abstract virtual W FindElementByTagName(string tagName);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByTagName(string tagName);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericFindsByXPath`1 {
    public abstract virtual W FindElementByXPath(string xpath);
    public abstract virtual ReadOnlyCollection`1<W> FindElementsByXPath(string xpath);
}
public interface Appium.Interfaces.Generic.SearchContext.IGenericSearchContext`1 {
    public abstract virtual W FindElement(By by);
    public abstract virtual ReadOnlyCollection`1<W> FindElements(By by);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class OpenQA.Selenium.Appium.Android.AndroidCommandExecutionHelper : AppiumCommandExecutionHelper {
    public static void StartActivity(IExecuteMethod executeMethod, string appPackage, string appActivity, string appWaitPackage, string appWaitActivity, bool stopApp);
    public static void StartActivityWithIntent(IExecuteMethod executeMethod, string appPackage, string appActivity, string intentAction, string appWaitPackage, string appWaitActivity, string intentCategory, string intentFlags, string intentOptionalArgs, bool stopApp);
    public static string GetCurrentActivity(IExecuteMethod executeMethod);
    public static string GetCurrentPackage(IExecuteMethod executeMethod);
    public static void SetConection(IExecuteMethod executeMethod, ConnectionType connectionType);
    public static ConnectionType GetConection(IExecuteMethod executeMethod);
    public static void ToggleLocationServices(IExecuteMethod executeMethod);
    public static void ToggleAirplaneMode(IExecuteMethod executeMethod);
    public static void ToggleData(IExecuteMethod executeMethod);
    public static void ToggleWifi(IExecuteMethod executeMethod);
    public static void GsmCall(IExecuteMethod executeMethod, string number, GsmCallActions gsmCallAction);
    public static void SendSms(IExecuteMethod executeMethod, string number, string message);
    public static void SetGsmStrength(IExecuteMethod executeMethod, GsmSignalStrength gsmSignalStrength);
    public static void SetGsmVoice(IExecuteMethod executeMethod, GsmVoiceState gsmVoiceState);
    public static string EndTestCoverage(IExecuteMethod executeMethod, string intent, string path);
    public static Object[] GetPerformanceDataTypes(IExecuteMethod executeMethod);
    public static Object[] GetPerformanceData(IExecuteMethod executeMethod, string packageName, string dataType);
    public static Object[] GetPerformanceData(IExecuteMethod executeMethod, string packageName, string dataType, int dataReadTimeout);
    public static void OpenNotifications(IExecuteMethod executeMethod);
    public static IDictionary`2<string, object> GetSystemBars(IExecuteMethod executeMethod);
    public static float GetDisplayDensity(IExecuteMethod executeMethod);
    public static bool IsLocked(IExecuteMethod executeMethod);
    public static void Unlock(IExecuteMethod executeMethod);
    public static Dictionary`2<string, object> GetSettings(IExecuteMethod executeMethod);
    public static void SetSetting(IExecuteMethod executeMethod, string setting, object value);
}
public class OpenQA.Selenium.Appium.Android.AndroidDriver : AppiumDriver {
    private static string Platform;
    public string CurrentActivity { get; }
    public string CurrentPackage { get; }
    public ConnectionType ConnectionType { get; public set; }
    public Dictionary`2<string, object> Settings { get; public set; }
    public AndroidDriver(ICommandExecutor commandExecutor, DriverOptions driverOptions);
    public AndroidDriver(DriverOptions driverOptions);
    public AndroidDriver(DriverOptions driverOptions, TimeSpan commandTimeout);
    public AndroidDriver(AppiumServiceBuilder builder, DriverOptions driverOptions);
    public AndroidDriver(AppiumServiceBuilder builder, DriverOptions driverOptions, TimeSpan commandTimeout);
    public AndroidDriver(Uri remoteAddress, DriverOptions driverOptions);
    public AndroidDriver(AppiumLocalService service, DriverOptions driverOptions);
    public AndroidDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout);
    public AndroidDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout);
    public AndroidDriver(Uri remoteAddress, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public AndroidDriver(AppiumLocalService service, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public AndroidDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    public AndroidDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    private static AndroidDriver();
    public sealed virtual void StartActivity(string appPackage, string appActivity, string appWaitPackage, string appWaitActivity, bool stopApp);
    public sealed virtual void StartActivityWithIntent(string appPackage, string appActivity, string intentAction, string appWaitPackage, string appWaitActivity, string intentCategory, string intentFlags, string intentOptionalArgs, bool stopApp);
    public sealed virtual string get_CurrentActivity();
    public string get_CurrentPackage();
    public sealed virtual ConnectionType get_ConnectionType();
    public sealed virtual void set_ConnectionType(ConnectionType value);
    public sealed virtual void PressKeyCode(int keyCode, int metastate);
    public sealed virtual void LongPressKeyCode(int keyCode, int metastate);
    public sealed virtual void PressKeyCode(KeyEvent keyEvent);
    public sealed virtual void LongPressKeyCode(KeyEvent keyEvent);
    public sealed virtual void ToggleData();
    public sealed virtual void ToggleAirplaneMode();
    public sealed virtual void ToggleWifi();
    public sealed virtual void ToggleLocationServices();
    public sealed virtual void MakeGsmCall(string phoneNumber, GsmCallActions gsmCallAction);
    public sealed virtual void SendSms(string phoneNumber, string message);
    public sealed virtual void SetGsmSignalStrength(GsmSignalStrength gsmSignalStrength);
    public sealed virtual void SetGsmVoice(GsmVoiceState gsmVoiceState);
    public void OpenNotifications();
    public IDictionary`2<string, object> GetSystemBars();
    public float GetDisplayDensity();
    public sealed virtual IList`1<object> GetPerformanceData(string packageName, string performanceDataType);
    public sealed virtual IList`1<object> GetPerformanceData(string packageName, string performanceDataType, int dataReadAttempts);
    public sealed virtual IList`1<string> GetPerformanceDataTypes();
    public void Lock();
    public bool IsLocked();
    public void Unlock();
    public string EndTestCoverage(string intent, string path);
    public sealed virtual void SetSetting(string setting, object value);
    public sealed virtual void IgnoreUnimportantViews(bool compress);
    public sealed virtual void ConfiguratorSetWaitForIdleTimeout(int timeout);
    public sealed virtual void ConfiguratorSetWaitForSelectorTimeout(int timeout);
    public sealed virtual void ConfiguratorSetScrollAcknowledgmentTimeout(int timeout);
    public sealed virtual void ConfiguratorSetKeyInjectionDelay(int delay);
    public sealed virtual void ConfiguratorSetActionAcknowledgmentTimeout(int timeout);
    public sealed virtual Dictionary`2<string, object> get_Settings();
    public sealed virtual void set_Settings(Dictionary`2<string, object> value);
    public sealed virtual void SetClipboard(ClipboardContentType contentType, string base64Content);
    public sealed virtual string GetClipboard(ClipboardContentType contentType);
    public sealed virtual void SetClipboardText(string textContent, string label);
    public sealed virtual string GetClipboardText();
    public sealed virtual void SetClipboardUrl(string url);
    public sealed virtual string GetClipboardUrl();
    public sealed virtual void SetClipboardImage(Image image);
    public sealed virtual Image GetClipboardImage();
}
public class OpenQA.Selenium.Appium.Android.AndroidKeyCode : object {
    public static int Back;
    public static int BackSpace;
    public static int Del;
    public static int Enter;
    public static int Home;
    public static int Menu;
    public static int Settings;
    public static int Space;
    public static int ActionDown;
    public static int ActionMultiple;
    public static int ActionUp;
    public static int FlagCanceled;
    public static int FlagCanceledLongPress;
    public static int FlagEditorAction;
    public static int FlagFallback;
    public static int FlagFromSystem;
    public static int FlagKeepTouchMode;
    public static int FlagLongPress;
    public static int FlagSoftKeyboard;
    public static int FlagTracking;
    public static int FlagVirtualHardKey;
    public static int FlagWokeHere;
    public static int Keycode_0;
    public static int Keycode_1;
    public static int Keycode_11;
    public static int Keycode_12;
    public static int Keycode_2;
    public static int Keycode_3;
    public static int Keycode_3D_MODE;
    public static int Keycode_4;
    public static int Keycode_5;
    public static int Keycode_6;
    public static int Keycode_7;
    public static int Keycode_8;
    public static int Keycode_9;
    public static int Keycode_A;
    public static int Keycode_ALT_LEFT;
    public static int Keycode_ALT_RIGHT;
    public static int Keycode_APOSTROPHE;
    public static int Keycode_APP_SWITCH;
    public static int Keycode_ASSIST;
    public static int Keycode_AT;
    public static int Keycode_AVR_INPUT;
    public static int Keycode_AVR_POWER;
    public static int Keycode_B;
    public static int Keycode_BACK;
    public static int Keycode_BACKSLASH;
    public static int Keycode_BOOKMARK;
    public static int Keycode_BREAK;
    public static int Keycode_BRIGHTNESS_DOWN;
    public static int Keycode_BRIGHTNESS_UP;
    public static int KeycodeButton_1;
    public static int KeycodeButton_10;
    public static int KeycodeButton_11;
    public static int KeycodeButton_12;
    public static int KeycodeButton_13;
    public static int KeycodeButton_14;
    public static int KeycodeButton_15;
    public static int KeycodeButton_16;
    public static int KeycodeButton_2;
    public static int KeycodeButton_3;
    public static int KeycodeButton_4;
    public static int KeycodeButton_5;
    public static int KeycodeButton_6;
    public static int KeycodeButton_7;
    public static int KeycodeButton_8;
    public static int KeycodeButton_9;
    public static int KeycodeButton_A;
    public static int KeycodeButton_B;
    public static int KeycodeButton_C;
    public static int KeycodeButton_L1;
    public static int KeycodeButton_L2;
    public static int KeycodeButton_MODE;
    public static int KeycodeButton_R1;
    public static int KeycodeButton_R2;
    public static int KeycodeButton_SELECT;
    public static int KeycodeButton_START;
    public static int KeycodeButton_THUMBL;
    public static int KeycodeButton_THUMBR;
    public static int KeycodeButton_X;
    public static int KeycodeButton_Y;
    public static int KeycodeButton_Z;
    public static int Keycode_C;
    public static int Keycode_CALCULATOR;
    public static int Keycode_CALENDAR;
    public static int Keycode_CALL;
    public static int Keycode_CAMERA;
    public static int Keycode_CAPS_LOCK;
    public static int Keycode_CAPTIONS;
    public static int Keycode_CHANNEL_DOWN;
    public static int Keycode_CHANNEL_UP;
    public static int Keycode_CLEAR;
    public static int Keycode_COMMA;
    public static int Keycode_CONTACTS;
    public static int Keycode_CTRL_LEFT;
    public static int Keycode_CTRL_RIGHT;
    public static int Keycode_D;
    public static int Keycode_DEL;
    public static int Keycode_DPAD_CENTER;
    public static int Keycode_DPAD_DOWN;
    public static int Keycode_DPAD_LEFT;
    public static int Keycode_DPAD_RIGHT;
    public static int Keycode_DPAD_UP;
    public static int Keycode_DVR;
    public static int Keycode_E;
    public static int Keycode_EISU;
    public static int Keycode_ENDCALL;
    public static int Keycode_ENTER;
    public static int Keycode_ENVELOPE;
    public static int Keycode_EQUALS;
    public static int Keycode_ESCAPE;
    public static int Keycode_EXPLORER;
    public static int Keycode_F;
    public static int Keycode_F1;
    public static int Keycode_F10;
    public static int Keycode_F11;
    public static int Keycode_F12;
    public static int Keycode_F2;
    public static int Keycode_F3;
    public static int Keycode_F4;
    public static int Keycode_F5;
    public static int Keycode_F6;
    public static int Keycode_F7;
    public static int Keycode_F8;
    public static int Keycode_F9;
    public static int Keycode_FOCUS;
    public static int Keycode_FORWARD;
    public static int Keycode_FORWARD_DEL;
    public static int Keycode_FUNCTION;
    public static int Keycode_G;
    public static int Keycode_GRAVE;
    public static int Keycode_GUIDE;
    public static int Keycode_H;
    public static int Keycode_HEADSETHOOK;
    public static int Keycode_HELP;
    public static int Keycode_HENKAN;
    public static int Keycode_HOME;
    public static int Keycode_I;
    public static int Keycode_INFO;
    public static int Keycode_INSERT;
    public static int Keycode_J;
    public static int Keycode_K;
    public static int Keycode_KANA;
    public static int Keycode_KATAKANA_HIRAGANA;
    public static int Keycode_L;
    public static int Keycode_LANGUAGE_SWITCH;
    public static int Keycode_LAST_CHANNEL;
    public static int Keycode_LEFT_BRACKET;
    public static int Keycode_M;
    public static int Keycode_MANNER_MODE;
    public static int Keycode_MEDIA_AUDIO_TRACK;
    public static int Keycode_MEDIA_CLOSE;
    public static int Keycode_MEDIA_EJECT;
    public static int Keycode_MEDIA_FAST_FORWARD;
    public static int Keycode_MEDIA_NEXT;
    public static int Keycode_MEDIA_PAUSE;
    public static int Keycode_MEDIA_PLAY;
    public static int Keycode_MEDIA_PLAY_PAUSE;
    public static int Keycode_MEDIA_PREVIOUS;
    public static int Keycode_MEDIA_RECORD;
    public static int Keycode_MEDIA_REWIND;
    public static int Keycode_MEDIA_STOP;
    public static int Keycode_MEDIA_TOP_MENU;
    public static int Keycode_MENU;
    public static int Keycode_META_LEFT;
    public static int Keycode_META_RIGHT;
    public static int Keycode_MINUS;
    public static int Keycode_MOVE_END;
    public static int Keycode_MOVE_HOME;
    public static int Keycode_MUHENKAN;
    public static int Keycode_MUSIC;
    public static int Keycode_MUTE;
    public static int Keycode_N;
    public static int Keycode_NOTIFICATION;
    public static int Keycode_NUM;
    public static int KeycodeNumpad_0;
    public static int KeycodeNumpad_1;
    public static int KeycodeNumpad_2;
    public static int KeycodeNumpad_3;
    public static int KeycodeNumpad_4;
    public static int KeycodeNumpad_5;
    public static int KeycodeNumpad_6;
    public static int KeycodeNumpad_7;
    public static int KeycodeNumpad_8;
    public static int KeycodeNumpad_9;
    public static int KeycodeNumpad_ADD;
    public static int KeycodeNumpad_COMMA;
    public static int KeycodeNumpad_DIVIDE;
    public static int KeycodeNumpad_DOT;
    public static int KeycodeNumpad_ENTER;
    public static int KeycodeNumpad_EQUALS;
    public static int KeycodeNumpad_LEFT_PAREN;
    public static int KeycodeNumpad_MULTIPLY;
    public static int KeycodeNumpad_RIGHT_PAREN;
    public static int KeycodeNumpad_SUBTRACT;
    public static int Keycode_NUM_LOCK;
    public static int Keycode_O;
    public static int Keycode_P;
    public static int Keycode_PAGE_DOWN;
    public static int Keycode_PAGE_UP;
    public static int Keycode_PAIRING;
    public static int Keycode_PERIOD;
    public static int Keycode_PICTSYMBOLS;
    public static int Keycode_PLUS;
    public static int Keycode_POUND;
    public static int Keycode_POWER;
    public static int Keycode_PROG_BLUE;
    public static int Keycode_PROG_GREEN;
    public static int Keycode_PROG_RED;
    public static int Keycode_PROG_YELLOW;
    public static int Keycode_Q;
    public static int Keycode_R;
    public static int Keycode_RIGHT_BRACKET;
    public static int Keycode_RO;
    public static int Keycode_S;
    public static int Keycode_SCROLL_LOCK;
    public static int Keycode_SEARCH;
    public static int Keycode_SEMICOLON;
    public static int Keycode_SETTINGS;
    public static int Keycode_SHIFT_LEFT;
    public static int Keycode_SHIFT_RIGHT;
    public static int Keycode_SLASH;
    public static int Keycode_SLEEP;
    public static int KeycodeSoft_LEFT;
    public static int KeycodeSoft_RIGHT;
    public static int Keycode_SPACE;
    public static int Keycode_STAR;
    public static int KeycodeSTB_INPUT;
    public static int KeycodeSTB_POWER;
    public static int Keycode_SWITCH_CHARSET;
    public static int Keycode_SYM;
    public static int Keycode_SYSRQ;
    public static int Keycode_T;
    public static int Keycode_TAB;
    public static int Keycode_TV;
    public static int KeycodeTV_ANTENNA_CABLE;
    public static int KeycodeTV_AUDIO_DESCRIPTION;
    public static int KeycodeTV_AUDIO_DESCRIPTION_MIX_DOWN;
    public static int KeycodeTV_AUDIO_DESCRIPTION_MIX_UP;
    public static int KeycodeTV_CONTENTS_MENU;
    public static int KeycodeTV_DATA_SERVICE;
    public static int KeycodeTV_INPUT;
    public static int KeycodeTV_INPUT_COMPONENT_1;
    public static int KeycodeTV_INPUT_COMPONENT_2;
    public static int KeycodeTV_INPUT_COMPOSITE_1;
    public static int KeycodeTV_INPUT_COMPOSITE_2;
    public static int KeycodeTV_INPUT_HDMI_1;
    public static int KeycodeTV_INPUT_HDMI_2;
    public static int KeycodeTV_INPUT_HDMI_3;
    public static int KeycodeTV_INPUT_HDMI_4;
    public static int KeycodeTV_INPUT_VGA_1;
    public static int KeycodeTV_MEDIA_CONTEXT_MENU;
    public static int KeycodeTV_NETWORK;
    public static int KeycodeTV_NUMBER_ENTRY;
    public static int KeycodeTV_POWER;
    public static int KeycodeTV_RADIO_SERVICE;
    public static int KeycodeTV_SATELLITE;
    public static int KeycodeTV_SATELLITE_BS;
    public static int KeycodeTV_SATELLITE_CS;
    public static int KeycodeTV_SATELLITE_SERVICE;
    public static int KeycodeTV_TELETEXT;
    public static int KeycodeTV_TERRESTRIAL_ANALOG;
    public static int KeycodeTV_TERRESTRIAL_DIGITAL;
    public static int KeycodeTV_TIMER_PROGRAMMING;
    public static int KeycodeTV_ZOOM_MODE;
    public static int Keycode_U;
    public static int Keycode_UNKNOWN;
    public static int Keycode_V;
    public static int Keycode_VOICE_ASSIST;
    public static int Keycode_VOLUME_DOWN;
    public static int Keycode_VOLUME_MUTE;
    public static int Keycode_VOLUME_UP;
    public static int Keycode_W;
    public static int Keycode_WAKEUP;
    public static int Keycode_WINDOW;
    public static int Keycode_X;
    public static int Keycode_Y;
    public static int Keycode_YEN;
    public static int Keycode_Z;
    public static int Keycode_ZENKAKU_HANKAKU;
    public static int Keycode_ZOOM_IN;
    public static int Keycode_ZOOM_OUT;
    public static int Keycode_MAX;
    public static int MetaAlt_LEFT_ON;
    public static int MetaAlt_MASK;
    public static int MetaAlt_ON;
    public static int MetaAlt_RIGHT_ON;
    public static int MetaCaps_LOCK_ON;
    public static int MetaCtrl_LEFT_ON;
    public static int MetaCtrl_MASK;
    public static int MetaCtrl_ON;
    public static int MetaCtrl_RIGHT_ON;
    public static int MetaFunction_ON;
    public static int MetaMeta_LEFT_ON;
    public static int MetaMeta_MASK;
    public static int MetaMeta_ON;
    public static int MetaMeta_RIGHT_ON;
    public static int MetaNum_LOCK_ON;
    public static int MetaScroll_LOCK_ON;
    public static int MetaShift_LEFT_ON;
    public static int MetaShift_MASK;
    public static int MetaShift_ON;
    public static int MetaShift_RIGHT_ON;
    public static int MetaSym_ON;
    private static AndroidKeyCode();
}
public class OpenQA.Selenium.Appium.Android.AndroidStartScreenRecordingOptions : BaseStartScreenRecordingOptions`1<AndroidStartScreenRecordingOptions> {
    public static AndroidStartScreenRecordingOptions GetAndroidStartScreenRecordingOptions();
    public AndroidStartScreenRecordingOptions WithBitRate(int bitRate);
    public AndroidStartScreenRecordingOptions WithVideoSize(string videoSize);
    public AndroidStartScreenRecordingOptions EnableBugReport();
    public AndroidStartScreenRecordingOptions WithTimeLimit(TimeSpan timeLimit);
}
public class OpenQA.Selenium.Appium.Android.AndroidStopScreenRecordingOptions : BaseStopScreenRecordingOptions`1<AndroidStopScreenRecordingOptions> {
    public static AndroidStopScreenRecordingOptions StopScreenRecordingOptions();
}
public enum OpenQA.Selenium.Appium.Android.ConnectionType : Enum {
    public int value__;
    public static ConnectionType None;
    public static ConnectionType AirplaneMode;
    public static ConnectionType WifiOnly;
    public static ConnectionType DataOnly;
    public static ConnectionType AllNetworkOn;
}
public class OpenQA.Selenium.Appium.Android.Enums.AndroidKeyMetastate : object {
    public static int Meta_Alt_LEFT_On;
    public static int Meta_Alt_On;
    public static int Meta_Alt_Right_On;
    public static int Meta_Caps_Lock_On;
    public static int Meta_Ctrl_Left_On;
    public static int Meta_Ctrl_On;
    public static int Meta_Ctrl_Rijht_On;
    public static int Meta_Function_On;
    public static int Meta_Meta_Left_On;
    public static int Meta_Meta_On;
    public static int Meta_Meta_Right_On;
    public static int Meta_Num_Lock_On;
    public static int Meta_Scroll_Lock_On;
    public static int Meta_Shift_Left_On;
    public static int Meta_Shift_On;
    public static int Meta_Shift_Right_On;
    public static int Meta_Sym_On;
    private static AndroidKeyMetastate();
}
public class OpenQA.Selenium.Appium.Android.Enums.AutomatorSetting : object {
    public static string IgnoreUnimportantViews;
    public static string WaitForIDLETimeout;
    public static string WaitForSelectorTimeout;
    public static string WaitScrollAcknowledgmentTimeout;
    public static string WaitActionAcknowledgmentTimeout;
    public static string KeyInjectionDelay;
    private static AutomatorSetting();
}
public enum OpenQA.Selenium.Appium.Android.Enums.ListDirection : Enum {
    public int value__;
    public static ListDirection Vertical;
    public static ListDirection Horizontal;
}
public class OpenQA.Selenium.Appium.Android.Enums.PerformanceDataType : ValueType {
    public static string CpuInfo;
    public static string MemoryInfo;
    public static string BatteryInfo;
    public static string NetworkInfo;
    private static PerformanceDataType();
}
public interface OpenQA.Selenium.Appium.Android.Interfaces.IHasNetworkConnection {
    public ConnectionType ConnectionType { get; public set; }
    public abstract virtual ConnectionType get_ConnectionType();
    public abstract virtual void set_ConnectionType(ConnectionType value);
}
public interface OpenQA.Selenium.Appium.Android.Interfaces.IHasPerformanceData {
    public abstract virtual IList`1<object> GetPerformanceData(string packageName, string performanceDataType);
    public abstract virtual IList`1<object> GetPerformanceData(string packageName, string performanceDataType, int dataReadAttempts);
    public abstract virtual IList`1<string> GetPerformanceDataTypes();
}
public interface OpenQA.Selenium.Appium.Android.Interfaces.IHasSettings {
    public Dictionary`2<string, object> Settings { get; public set; }
    public abstract virtual void SetSetting(string setting, object value);
    public abstract virtual void set_Settings(Dictionary`2<string, object> value);
    public abstract virtual Dictionary`2<string, object> get_Settings();
    public abstract virtual void IgnoreUnimportantViews(bool compress);
    public abstract virtual void ConfiguratorSetWaitForIdleTimeout(int timeout);
    public abstract virtual void ConfiguratorSetWaitForSelectorTimeout(int timeout);
    public abstract virtual void ConfiguratorSetScrollAcknowledgmentTimeout(int timeout);
    public abstract virtual void ConfiguratorSetKeyInjectionDelay(int delay);
    public abstract virtual void ConfiguratorSetActionAcknowledgmentTimeout(int timeout);
}
public interface OpenQA.Selenium.Appium.Android.Interfaces.IPushesFiles {
    public abstract virtual void PushFile(string pathOnDevice, string base64Data);
    public abstract virtual void PushFile(string pathOnDevice, Byte[] base64Data);
    public abstract virtual void PushFile(string pathOnDevice, FileInfo file);
}
public interface OpenQA.Selenium.Appium.Android.IStartsActivity {
    public string CurrentActivity { get; }
    public abstract virtual void StartActivity(string appPackage, string appActivity, string appWaitPackage, string appWaitActivity, bool stopApp);
    public abstract virtual void StartActivityWithIntent(string appPackage, string appActivity, string intentAction, string appWaitPackage, string appWaitActivity, string intentCategory, string intentFlags, string intentOptionalArgs, bool stopApp);
    public abstract virtual string get_CurrentActivity();
}
public class OpenQA.Selenium.Appium.Android.KeyEvent : object {
    private Nullable`1<int> _keyCode;
    private Nullable`1<int> _metaState;
    private Nullable`1<int> _flags;
    public KeyEvent(int keyCode);
    public KeyEvent WithKeyCode(int keyCode);
    public KeyEvent WithMetaKeyModifier(int keyEventMetaModifier);
    public KeyEvent WithFlag(int flag);
    public Dictionary`2<string, object> Build();
}
public class OpenQA.Selenium.Appium.Android.UiAutomator.AndroidUiScrollable : object {
    private StringBuilder _builder;
    public AndroidUiScrollable(AndroidUiSelector uiSelector);
    public TerminatedStatementBuilder FlingBackward();
    public TerminatedStatementBuilder FlingForward();
    public TerminatedStatementBuilder FlingToBeginning(int maxSwipes);
    public TerminatedStatementBuilder FlingToEnd(int maxSwipes);
    public TerminatedStatementBuilder GetChildByDescription(AndroidUiSelector uiSelector, string description, bool allowScrollSearch);
    public TerminatedStatementBuilder GetChildByInstance(AndroidUiSelector uiSelector, int instance);
    public TerminatedStatementBuilder GetChildByText(AndroidUiSelector uiSelector, string text, bool allowScrollSearch);
    public TerminatedStatementBuilder ScrollBackward(int steps);
    public TerminatedStatementBuilder ScrollDescriptionIntoView(string description);
    public TerminatedStatementBuilder ScrollForward(int steps);
    public TerminatedStatementBuilder ScrollTextIntoView(string text);
    public TerminatedStatementBuilder ScrollToBeginning(int maxSwipes, int steps);
    public TerminatedStatementBuilder ScrollToEnd(int maxSwipes, int steps);
    public AndroidUiScrollable SetSwipeDeadZonePercentage(double swipeDeadZonePercentage);
    public AndroidUiScrollable SetScrollDirection(ListDirection direction);
    public AndroidUiScrollable SetMaxSearchSwipes(int swipes);
    public TerminatedStatementBuilder ScrollIntoView(AndroidUiSelector uiSelector);
    public AndroidUiScrollable AddRawText(string text);
    public sealed virtual string Build();
    public string Build(bool terminateStatement);
    private TerminatedStatementBuilder AppendTerminalStatement(string format, Object[] args);
}
public class OpenQA.Selenium.Appium.Android.UiAutomator.AndroidUiSelector : object {
    private StringBuilder _builder;
    public AndroidUiSelector(AndroidUiSelector selector);
    public AndroidUiSelector IsCheckable(bool value);
    public AndroidUiSelector IsChecked(bool value);
    public AndroidUiSelector ChildSelector(AndroidUiSelector selector);
    public AndroidUiSelector ClassNameEquals(string className);
    public AndroidUiSelector ClassNameMatches(string regex);
    public AndroidUiSelector IsClickable(bool value);
    public AndroidUiSelector DescriptionEquals(string description);
    public AndroidUiSelector DescriptionContains(string description);
    public AndroidUiSelector DescriptionMatches(string description);
    public AndroidUiSelector DescriptionStartsWith(string description);
    public AndroidUiSelector IsEnabled(bool value);
    public AndroidUiSelector IsFocusable(bool value);
    public AndroidUiSelector IsFocused(bool value);
    public AndroidUiSelector FromParent(AndroidUiSelector selector);
    public AndroidUiSelector Index(int index);
    public AndroidUiSelector Instance(int instance);
    public AndroidUiSelector IsLongClickable(bool value);
    public AndroidUiSelector PackageNameEquals(string packageName);
    public AndroidUiSelector PackageNameMatches(string regex);
    public AndroidUiSelector ResourceIdEquals(string id);
    public AndroidUiSelector ResourceIdMatches(string regex);
    public AndroidUiSelector IsScrollable(bool value);
    public AndroidUiSelector IsSelected(bool value);
    public AndroidUiSelector AccessibilityIdEquals(string text);
    public AndroidUiSelector TextEquals(string text);
    public AndroidUiSelector TextContains(string text);
    public AndroidUiSelector TextMatches(string regex);
    public AndroidUiSelector TextStartsWith(string text);
    public AndroidUiSelector AddRawText(string text);
    public sealed virtual string Build();
}
public class OpenQA.Selenium.Appium.Android.UiAutomator.TerminatedStatementBuilder : object {
    private StringBuilder _builder;
    internal TerminatedStatementBuilder(StringBuilder builder);
    public sealed virtual string Build();
}
public class OpenQA.Selenium.Appium.AppiumCommand : object {
    private static List`1<AppiumCommand> CommandList;
    internal string CommandType;
    internal string CommandName;
    internal string ApiEndpoint;
    public AppiumCommand(string commandType, string command, string apiEndpoint);
    private static AppiumCommand();
    internal static ICommandExecutor Merge(ICommandExecutor repo);
}
public class OpenQA.Selenium.Appium.AppiumCommandExecutionHelper : object {
    public static void PressKeyCode(IExecuteMethod executeMethod, KeyEvent keyEvent);
    public static void LongPressKeyCode(IExecuteMethod executeMethod, KeyEvent keyEvent);
    public static void PressKeyCode(IExecuteMethod executeMethod, int keyCode, int metastate);
    public static void LongPressKeyCode(IExecuteMethod executeMethod, int keyCode, int metastate);
    public static void HideKeyboard(IExecuteMethod executeMethod, string strategy, string key);
    public static bool IsKeyboardShown(IExecuteMethod executeMethod);
    public static void Lock(IExecuteMethod executeMethod, int seconds);
    public static void SetClipboard(IExecuteMethod executeMethod, ClipboardContentType clipboardContentType, string base64Content);
    public static string GetClipboard(IExecuteMethod executeMethod, ClipboardContentType clipboardContentType);
    public static string SetClipboardText(IExecuteMethod executeMethod, string textContent, string label);
    public static string GetClipboardText(IExecuteMethod executeMethod);
    public static void PushFile(IExecuteMethod executeMethod, string pathOnDevice, Byte[] base64Data);
    public static void FingerPrint(IExecuteMethod executeMethod, int fingerprintId);
    public static void PushFile(IExecuteMethod executeMethod, string pathOnDevice, FileInfo file);
    internal static Dictionary`2<string, object> PrepareArgument(string name, object value);
    internal static Dictionary`2<string, object> PrepareArguments(String[] names, Object[] values);
}
public abstract class OpenQA.Selenium.Appium.AppiumDriver : WebDriver {
    private static string NativeApp;
    protected static TimeSpan DefaultCommandTimeout;
    public Location Location { get; public set; }
    public string Context { get; public set; }
    public ReadOnlyCollection`1<string> Contexts { get; }
    public ScreenOrientation Orientation { get; public set; }
    public string DeviceTime { get; }
    public IDictionary`2<string, object> SessionDetails { get; }
    public string PlatformName { get; }
    public string AutomationName { get; }
    public bool IsBrowser { get; }
    public AppiumDriver(ICommandExecutor commandExecutor, ICapabilities appiumOptions);
    public AppiumDriver(ICapabilities appiumOptions);
    public AppiumDriver(ICapabilities appiumOptions, TimeSpan commandTimeout);
    public AppiumDriver(AppiumServiceBuilder builder, ICapabilities appiumOptions);
    public AppiumDriver(AppiumServiceBuilder builder, ICapabilities appiumOptions, TimeSpan commandTimeout);
    public AppiumDriver(Uri remoteAddress, ICapabilities appiumOptions);
    public AppiumDriver(AppiumLocalService service, ICapabilities appiumOptions);
    public AppiumDriver(Uri remoteAddress, ICapabilities appiumOptions, TimeSpan commandTimeout);
    public AppiumDriver(AppiumLocalService service, ICapabilities appiumOptions, TimeSpan commandTimeout);
    public AppiumDriver(Uri remoteAddress, ICapabilities appiumOptions, AppiumClientConfig clientConfig);
    public AppiumDriver(AppiumLocalService service, ICapabilities appiumOptions, AppiumClientConfig clientConfig);
    public AppiumDriver(Uri remoteAddress, ICapabilities appiumOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    public AppiumDriver(AppiumLocalService service, ICapabilities appiumOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    private static AppiumDriver();
    protected virtual Response Execute(string driverCommandToExecute, Dictionary`2<string, object> parameters);
    private sealed virtual override Response OpenQA.Selenium.Appium.Interfaces.IExecuteMethod.Execute(string commandName, Dictionary`2<string, object> parameters);
    public AppiumElement FindElement(By by);
    public ReadOnlyCollection`1<AppiumElement> FindElements(By by);
    public sealed virtual AppiumElement FindElement(string by, string value);
    public sealed virtual IReadOnlyCollection`1<AppiumElement> FindElements(string selector, string value);
    private sealed virtual override Response OpenQA.Selenium.Appium.Interfaces.IExecuteMethod.Execute(string driverCommand);
    public sealed virtual void InstallApp(string appPath);
    public sealed virtual void RemoveApp(string appId);
    public sealed virtual void ActivateApp(string appId);
    public void ActivateApp(string appId, TimeSpan timeout);
    public sealed virtual bool TerminateApp(string appId);
    public sealed virtual bool TerminateApp(string appId, TimeSpan timeout);
    public sealed virtual bool IsAppInstalled(string bundleId);
    public sealed virtual Byte[] PullFile(string pathOnDevice);
    public sealed virtual Byte[] PullFolder(string remotePath);
    public sealed virtual void PushFile(string pathOnDevice, string stringData);
    public sealed virtual void PushFile(string pathOnDevice, Byte[] base64Data);
    public sealed virtual void PushFile(string pathOnDevice, FileInfo file);
    public void FingerPrint(int fingerprintId);
    public sealed virtual void BackgroundApp();
    public sealed virtual void BackgroundApp(TimeSpan timeSpan);
    public sealed virtual AppState GetAppState(string appId);
    public Dictionary`2<string, object> GetAppStringDictionary(string language, string stringFile);
    public sealed virtual void HideKeyboard();
    public sealed virtual void HideKeyboard(string key);
    public sealed virtual void HideKeyboard(string strategy, string key);
    public sealed virtual bool IsKeyboardShown();
    public sealed virtual Location get_Location();
    public sealed virtual void set_Location(Location value);
    public virtual string get_Context();
    public virtual void set_Context(string value);
    public virtual ReadOnlyCollection`1<string> get_Contexts();
    public sealed virtual ScreenOrientation get_Orientation();
    public sealed virtual void set_Orientation(ScreenOrientation value);
    public List`1<string> GetIMEAvailableEngines();
    public string GetIMEActiveEngine();
    public bool IsIMEActive();
    public void ActivateIMEEngine(string imeEngine);
    public void DeactiveIMEEngine();
    [ObsoleteAttribute("Touch Actions are deprecated in W3C spec, please use W3C actions instead")]
public sealed virtual void PerformMultiAction(IMultiAction multiAction);
    [ObsoleteAttribute("Touch Actions are deprecated in W3C spec, please use W3C actions instead")]
public sealed virtual void PerformTouchAction(ITouchAction touchAction);
    public void PerformActions(IList`1<ActionSequence> actionSequenceList);
    public string get_DeviceTime();
    public sealed virtual IDictionary`2<string, object> get_SessionDetails();
    public sealed virtual object GetSessionDetail(string detail);
    public sealed virtual string get_PlatformName();
    public sealed virtual string get_AutomationName();
    public sealed virtual bool get_IsBrowser();
    public string StartRecordingScreen();
    public string StartRecordingScreen(IScreenRecordingOptions options);
    public string StopRecordingScreen();
    public string StopRecordingScreen(IScreenRecordingOptions options);
    public FeaturesMatchingResult MatchImageFeatures(string base64Image1, string base64Image2, FeaturesMatchingOptions options);
    public OccurenceMatchingResult FindImageOccurence(string fullImage, string partialImage, OccurenceMatchingOptions options);
    public SimilarityMatchingResult GetImagesSimilarity(string base64Image1, string base64Image2, SimilarityMatchingOptions options);
    protected WebElementFactory CreateElementFactory();
    internal static ICapabilities SetPlatformToCapabilities(DriverOptions dc, string desiredPlatform);
    internal static ReadOnlyCollection`1<T> ConvertToExtendedWebElementCollection(IEnumerable collection);
}
public class OpenQA.Selenium.Appium.AppiumDriverCommand : object {
    public static string ShakeDevice;
    public static string LockDevice;
    public static string UnlockDevice;
    public static string IsLocked;
    public static string ToggleAirplaneMode;
    public static string GsmCall;
    public static string SendSms;
    public static string SetGsmSignalStrength;
    public static string SetGsmVoiceState;
    public static string ToggleData;
    public static string PressKeyCode;
    public static string LongPressKeyCode;
    public static string GetCurrentActivity;
    public static string GetCurrentPackage;
    public static string InstallApp;
    public static string RemoveApp;
    public static string ActivateApp;
    public static string TerminateApp;
    public static string IsAppInstalled;
    public static string PushFile;
    public static string PullFile;
    public static string PullFolder;
    public static string ToggleWiFi;
    public static string ToggleLocationServices;
    public static string BackgroundApp;
    public static string EndTestCoverage;
    public static string GetAppStrings;
    public static string GetAppState;
    public static string HideKeyboard;
    public static string IsKeyboardShown;
    public static string OpenNotifications;
    public static string SystemBars;
    public static string SystemTime;
    public static string GetDisplayDensity;
    public static string StartActivity;
    public static string SetLocation;
    public static string GetLocation;
    public static string GetClipboard;
    public static string SetClipboard;
    public static string GetPerformanceData;
    public static string GetPerformanceDataTypes;
    public static string PerformTouchAction;
    public static string PerformMultiAction;
    public static string Actions;
    public static string Contexts;
    public static string GetContext;
    public static string SetContext;
    public static string GetOrientation;
    public static string SetOrientation;
    public static string GetConnectionType;
    public static string SetConnectionType;
    public static string GetAvailableEngines;
    public static string GetActiveEngine;
    public static string IsIMEActive;
    public static string ActivateEngine;
    public static string DeactivateEngine;
    public static string GetScreenshot;
    public static string GetSettings;
    public static string UpdateSettings;
    public static string TouchID;
    public static string FingerPrint;
    public static string GetDeviceTime;
    public static string GetSession;
    public static string StartRecordingScreen;
    public static string StopRecordingScreen;
    public static string CompareImages;
    private static AppiumDriverCommand();
}
public class OpenQA.Selenium.Appium.AppiumElement : WebElement {
    protected Dictionary`2<string, object> cache;
    public string TagName { get; }
    public string Text { get; }
    public bool Displayed { get; }
    public bool Enabled { get; }
    public bool Selected { get; }
    public Point Location { get; }
    public Size Size { get; }
    public Rectangle Rect { get; }
    public string Id { get; }
    public AppiumElement(WebDriver parent, string id);
    public virtual void SetCacheValues(Dictionary`2<string, object> cacheValues);
    public virtual void ClearCache();
    public virtual void DisableCache();
    public virtual string get_TagName();
    public virtual string get_Text();
    public virtual bool get_Displayed();
    public virtual bool get_Enabled();
    public virtual bool get_Selected();
    public virtual Point get_Location();
    public virtual Size get_Size();
    public virtual Rectangle get_Rect();
    public virtual string GetAttribute(string attributeName);
    private string _GetAttribute(string attributeName);
    public virtual string GetCssValue(string propertyName);
    public string GetProperty(string propertyName);
    protected virtual object CacheValue(string key, Func`1<object> getter);
    public Response Execute(string commandName, Dictionary`2<string, object> parameters);
    public Response Execute(string driverCommand);
    private sealed virtual override AppiumElement OpenQA.Selenium.Appium.Interfaces.IFindsByFluentSelector<OpenQA.Selenium.Appium.AppiumElement>.FindElement(string by, string value);
    private sealed virtual override IReadOnlyCollection`1<AppiumElement> OpenQA.Selenium.Appium.Interfaces.IFindsByFluentSelector<OpenQA.Selenium.Appium.AppiumElement>.FindElements(string selector, string value);
    public AppiumElement FindElement(By by);
    public ReadOnlyCollection`1<AppiumElement> FindElements(By by);
    internal static ReadOnlyCollection`1<AppiumElement> ConvertToAppiumElementCollection(IEnumerable collection);
    public string get_Id();
    [CompilerGeneratedAttribute]
private object <get_TagName>b__6_0();
    [CompilerGeneratedAttribute]
private object <get_Text>b__8_0();
    [CompilerGeneratedAttribute]
private object <get_Displayed>b__10_0();
    [CompilerGeneratedAttribute]
private object <get_Enabled>b__12_0();
    [CompilerGeneratedAttribute]
private object <get_Selected>b__14_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0(string propertyName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__1(string propertyName);
}
public class OpenQA.Selenium.Appium.AppiumElementFactory : CachedElementFactory`1<AppiumElement> {
    public AppiumElementFactory(WebDriver parentDriver);
    protected virtual AppiumElement CreateCachedElement(WebDriver parentDriver, string elementId);
}
public class OpenQA.Selenium.Appium.AppiumOptions : DriverOptions {
    private static string VendorPrefix;
    private static string AutomationNameOption;
    private static string DeviceNameOption;
    private static string AppOption;
    private static string PlatformVersionOption;
    private Dictionary`2<string, object> additionalAppiumOptions;
    [CompilerGeneratedAttribute]
private string <AutomationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <App>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformVersion>k__BackingField;
    public string AutomationName { get; public set; }
    public string DeviceName { get; public set; }
    public string App { get; public set; }
    public string PlatformVersion { get; public set; }
    public string BrowserName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AutomationName();
    [CompilerGeneratedAttribute]
public void set_AutomationName(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceName();
    [CompilerGeneratedAttribute]
public void set_DeviceName(string value);
    [CompilerGeneratedAttribute]
public string get_App();
    [CompilerGeneratedAttribute]
public void set_App(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformVersion();
    [CompilerGeneratedAttribute]
public void set_PlatformVersion(string value);
    public string get_BrowserName();
    public void set_BrowserName(string value);
    public void AddAdditionalAppiumOption(string optionName, object optionValue);
    public virtual void AddAdditionalOption(string optionName, object optionValue);
    public virtual ICapabilities ToCapabilities();
    protected virtual Dictionary`2<string, object> BuildAppiumKnownOptionsDictionary();
    private Dictionary`2<string, object> BuildAppiumOptionsDictionary();
    public IDictionary`2<string, object> ToDictionary();
    private IDictionary`2<string, object> MergeOptionsDictionary(IDictionary`2<string, object> baseDict);
}
public class OpenQA.Selenium.Appium.ByAccessibilityId : MobileBy {
    public ByAccessibilityId(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByAndroidDataMatcher : MobileBy {
    public ByAndroidDataMatcher(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByAndroidUIAutomator : MobileBy {
    public ByAndroidUIAutomator(string selector);
    public ByAndroidUIAutomator(IUiAutomatorStatementBuilder selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByAndroidViewMatcher : MobileBy {
    public ByAndroidViewMatcher(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByClassName : MobileBy {
    public ByClassName(string selector);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ById : MobileBy {
    public ById(string selector);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByImage : MobileBy {
    public ByImage(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByIosClassChain : MobileBy {
    public ByIosClassChain(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByIosNSPredicate : MobileBy {
    public ByIosNSPredicate(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByIosUIAutomation : MobileBy {
    public ByIosUIAutomation(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByName : MobileBy {
    public ByName(string selector);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByTagName : MobileBy {
    public ByTagName(string selector);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByTizenAutomation : MobileBy {
    public ByTizenAutomation(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public class OpenQA.Selenium.Appium.ByWindowsAutomation : MobileBy {
    public ByWindowsAutomation(string selector);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public virtual string ToString();
}
public abstract class OpenQA.Selenium.Appium.CachedElementFactory`1 : WebElementFactory {
    public bool CacheElementAttributes { get; }
    public CachedElementFactory`1(WebDriver parentDriver);
    protected abstract virtual T CreateCachedElement(WebDriver parentDriver, string elementId);
    public virtual bool get_CacheElementAttributes();
    public virtual WebElement CreateElement(Dictionary`2<string, object> elementDictionary);
}
public class OpenQA.Selenium.Appium.Enums.AndroidMobileCapabilityType : object {
    public static string AppActivity;
    public static string AppPackage;
    public static string AppWaitActivity;
    public static string AppWaitPackage;
    public static string DeviceReadyTimeout;
    public static string AndroidCoverage;
    public static string EnablePerformanceLogging;
    public static string AndroidDeviceReadyTimeout;
    public static string AdbPort;
    public static string AndroidDeviceSocket;
    public static string Avd;
    public static string AvdLaunchTimeout;
    public static string AvdReadyTimeout;
    public static string AvdArgs;
    public static string UseKeystore;
    public static string KeystorePath;
    public static string KeystorePassword;
    public static string KeyAlias;
    public static string KeyPassword;
    public static string ChromedriverExecutable;
    public static string AutoWebviewTimeout;
    public static string IntentAction;
    public static string IntentCategory;
    public static string IntentFlags;
    public static string OptionalIntentArguments;
    public static string DontStopAppOnReset;
    public static string UnicodeKeyboard;
    public static string ResetKeyboard;
    public static string NoSign;
    public static string IgnoreUnimportantViews;
    public static string DisableAndroidWatchers;
    public static string ChromeOptions;
    public static string RECREATE_CHROME_DRIVER_SESSIONS;
    public static string NativeWebScreenshot;
    public static string AndroidScreenshotPath;
    public static string AndroidInstallTimeout;
    public static string AppWaitDuration;
    public static string AutoGrantPermissions;
    private static AndroidMobileCapabilityType();
}
public enum OpenQA.Selenium.Appium.Enums.AppState : Enum {
    public int value__;
    public static AppState NotInstalled;
    public static AppState NotRunning;
    public static AppState RunningInBackgroundOrSuspended;
    public static AppState RunningInBackground;
    public static AppState RunningInForeground;
}
public class OpenQA.Selenium.Appium.Enums.AutomationName : object {
    public static string Appium;
    public static string iOSXcuiTest;
    public static string AndroidUIAutomator2;
    public static string AndroidEspresso;
    public static string YouiEngine;
    public static string Mac2;
    private static AutomationName();
}
public enum OpenQA.Selenium.Appium.Enums.ClipboardContentType : Enum {
    public int value__;
    public static ClipboardContentType PlainText;
    public static ClipboardContentType Image;
    public static ClipboardContentType Url;
}
public enum OpenQA.Selenium.Appium.Enums.GsmCallActions : Enum {
    public int value__;
    public static GsmCallActions Call;
    public static GsmCallActions Accept;
    public static GsmCallActions Cancel;
    public static GsmCallActions Hold;
}
public enum OpenQA.Selenium.Appium.Enums.GsmSignalStrength : Enum {
    public int value__;
    public static GsmSignalStrength NoneOrUnknown;
    public static GsmSignalStrength Poor;
    public static GsmSignalStrength Moderate;
    public static GsmSignalStrength Good;
    public static GsmSignalStrength Great;
}
public enum OpenQA.Selenium.Appium.Enums.GsmVoiceState : Enum {
    public int value__;
    public static GsmVoiceState Unregistered;
    public static GsmVoiceState Home;
    public static GsmVoiceState Roaming;
    public static GsmVoiceState Searching;
    public static GsmVoiceState Denied;
    public static GsmVoiceState Off;
    public static GsmVoiceState On;
}
public class OpenQA.Selenium.Appium.Enums.IOSMobileCapabilityType : object {
    public static string CalendarFormat;
    public static string BundleId;
    public static string LaunchTimeout;
    public static string LocationServicesEnabled;
    public static string LocationServicesAuthorized;
    public static string AutoAcceptAlerts;
    public static string AutoDismissAlerts;
    public static string NativeInstrumentsLib;
    public static string NativeWebTap;
    public static string SafariInitialUrl;
    public static string SafariAllowPopups;
    public static string SafariIgnoreFraudWarning;
    public static string SafariOpenLinksInBackground;
    public static string KeepKeyChains;
    public static string LOCALIZABLE_STRINGS_DIR;
    public static string ProcessArguments;
    public static string InterKeyDelay;
    public static string ShowIOSLog;
    public static string SendKeyStrategy;
    public static string ScreenshotWaitTimeout;
    public static string WaitForAppScript;
    public static string WebviewConnectRetries;
    public static string AppName;
    private static IOSMobileCapabilityType();
}
public class OpenQA.Selenium.Appium.Enums.MobileBrowserType : object {
    public static string Browser;
    public static string Chrome;
    public static string Chromium;
    public static string Safari;
    private static MobileBrowserType();
}
public class OpenQA.Selenium.Appium.Enums.MobileCapabilityType : object {
    public static string App;
    public static string PlatformName;
    public static string PlatformVersion;
    public static string DeviceName;
    public static string NewCommandTimeout;
    public static string BrowserName;
    public static string AutomationName;
    public static string AppiumVersion;
    public static string Udid;
    public static string Language;
    public static string Locale;
    public static string Orientation;
    public static string AutoWebview;
    public static string NoReset;
    public static string FullReset;
    public static string OtherApps;
    private static MobileCapabilityType();
}
public class OpenQA.Selenium.Appium.Enums.MobilePlatform : object {
    public static string Android;
    public static string IOS;
    public static string MacOS;
    public static string Windows;
    public static string Tizen;
}
public class OpenQA.Selenium.Appium.Enums.MobileSelector : object {
    public static string Id;
    public static string ClassName;
    public static string Name;
    public static string TagName;
    public static string Image;
    public static string Accessibility;
    public static string AndroidUIAutomator;
    public static string AndroidDataMatcher;
    public static string AndroidViewMatcher;
    public static string iOSAutomatoion;
    public static string iOSPredicateString;
    public static string iOSClassChain;
    public static string WindowsUIAutomation;
    public static string TizenUIAutomation;
    private static MobileSelector();
}
[ExtensionAttribute]
public static class OpenQA.Selenium.Appium.GuardClauses : object {
    [ExtensionAttribute]
public static T RequireNotNull(T value, string paramName);
    [ExtensionAttribute]
public static int RequireIsPositive(int value, string paramName);
    [ExtensionAttribute]
public static double RequirePercentage(double value, string paramName);
}
public static class OpenQA.Selenium.Appium.ImageComparison.ComparisonMode : object {
    public static string MatchFeatures;
    public static string GetSimilarity;
    public static string MatchTemplate;
    private static ComparisonMode();
}
public abstract class OpenQA.Selenium.Appium.ImageComparison.ComparisonOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Visualize>k__BackingField;
    public Nullable`1<bool> Visualize { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Visualize();
    [CompilerGeneratedAttribute]
public void set_Visualize(Nullable`1<bool> value);
    public abstract virtual Dictionary`2<string, object> GetParameters();
}
public abstract class OpenQA.Selenium.Appium.ImageComparison.ComparisonResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Result>k__BackingField;
    public string Visualization { get; }
    protected Dictionary`2<string, object> Result { get; }
    protected ComparisonResult(Dictionary`2<string, object> result);
    public string get_Visualization();
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, object> get_Result();
    public void SaveVisualizationAsFile(string fileName);
    protected Rectangle ConvertToRect(object value);
    protected List`1<Point> ConvertToPoint(object value);
}
public class OpenQA.Selenium.Appium.ImageComparison.FeaturesMatchingOptions : ComparisonOptions {
    [CompilerGeneratedAttribute]
private string <DetectorName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <GoodMatchesFactor>k__BackingField;
    public string DetectorName { get; public set; }
    public string MatchFunc { get; public set; }
    public Nullable`1<int> GoodMatchesFactor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DetectorName();
    [CompilerGeneratedAttribute]
public void set_DetectorName(string value);
    [CompilerGeneratedAttribute]
public string get_MatchFunc();
    [CompilerGeneratedAttribute]
public void set_MatchFunc(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_GoodMatchesFactor();
    [CompilerGeneratedAttribute]
public void set_GoodMatchesFactor(Nullable`1<int> value);
    public virtual Dictionary`2<string, object> GetParameters();
}
public class OpenQA.Selenium.Appium.ImageComparison.FeaturesMatchingResult : ComparisonResult {
    public int Count { get; }
    public int TotalCount { get; }
    public List`1<Point> Points1 { get; }
    public List`1<Point> Points2 { get; }
    public Rectangle Rect1 { get; }
    public Rectangle Rect2 { get; }
    public FeaturesMatchingResult(Dictionary`2<string, object> result);
    public int get_Count();
    public int get_TotalCount();
    public List`1<Point> get_Points1();
    public List`1<Point> get_Points2();
    public Rectangle get_Rect1();
    public Rectangle get_Rect2();
}
public class OpenQA.Selenium.Appium.ImageComparison.OccurenceMatchingOptions : ComparisonOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Threshold>k__BackingField;
    public Nullable`1<double> Threshold { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Threshold();
    [CompilerGeneratedAttribute]
public void set_Threshold(Nullable`1<double> value);
    public virtual Dictionary`2<string, object> GetParameters();
}
public class OpenQA.Selenium.Appium.ImageComparison.OccurenceMatchingResult : ComparisonResult {
    public Rectangle Rect { get; }
    public OccurenceMatchingResult(Dictionary`2<string, object> result);
    public Rectangle get_Rect();
}
public class OpenQA.Selenium.Appium.ImageComparison.SimilarityMatchingOptions : ComparisonOptions {
    public virtual Dictionary`2<string, object> GetParameters();
}
public class OpenQA.Selenium.Appium.ImageComparison.SimilarityMatchingResult : ComparisonResult {
    public double Score { get; }
    public SimilarityMatchingResult(Dictionary`2<string, object> result);
    public double get_Score();
}
public interface OpenQA.Selenium.Appium.Interactions.IInteractionInfo {
    public abstract virtual Dictionary`2<string, object> ToDictionary();
}
public class OpenQA.Selenium.Appium.Interactions.PenInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Pressure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Twist>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TiltX>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TiltY>k__BackingField;
    public Nullable`1<float> Pressure { get; public set; }
    public Nullable`1<int> Twist { get; public set; }
    public Nullable`1<int> TiltX { get; public set; }
    public Nullable`1<int> TiltY { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Pressure();
    [CompilerGeneratedAttribute]
public void set_Pressure(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Twist();
    [CompilerGeneratedAttribute]
public void set_Twist(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TiltX();
    [CompilerGeneratedAttribute]
public void set_TiltX(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TiltY();
    [CompilerGeneratedAttribute]
public void set_TiltY(Nullable`1<int> value);
    public sealed virtual Dictionary`2<string, object> ToDictionary();
}
public enum OpenQA.Selenium.Appium.Interactions.PointerButton : Enum {
    public int value__;
    public static PointerButton None;
    public static PointerButton LeftMouse;
    public static PointerButton TouchContact;
    public static PointerButton PenContact;
    public static PointerButton MiddleMouse;
    public static PointerButton RightMouse;
    public static PointerButton PenBarrel;
    public static PointerButton X1Mouse;
    public static PointerButton X2Mouse;
    public static PointerButton PenEraser;
}
public class OpenQA.Selenium.Appium.Interactions.PointerInputDevice : PointerInputDevice {
    public PointerInputDevice(PointerKind pointerKind);
    public PointerInputDevice(PointerKind pointerKind, string deviceName);
    public Interaction CreatePointerDown(PointerButton button);
    public Interaction CreatePointerUp(PointerButton button);
    public Interaction CreatePointerDown(PointerButton button, IInteractionInfo pointerExtraAttributes);
    public Interaction CreatePointerUp(PointerButton button, IInteractionInfo pointerExtraAttributes);
    public Interaction CreatePointerMove(IWebElement target, int xOffset, int yOffset, TimeSpan duration, IInteractionInfo pointerExtraAttributes);
    public Interaction CreatePointerMove(CoordinateOrigin origin, int xOffset, int yOffset, TimeSpan duration, IInteractionInfo pointerExtraAttributes);
}
public class OpenQA.Selenium.Appium.Interactions.TouchInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Pressure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Twist>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Height>k__BackingField;
    public Nullable`1<float> Pressure { get; public set; }
    public Nullable`1<int> Twist { get; public set; }
    public Nullable`1<double> Width { get; public set; }
    public Nullable`1<double> Height { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Pressure();
    [CompilerGeneratedAttribute]
public void set_Pressure(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Twist();
    [CompilerGeneratedAttribute]
public void set_Twist(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<double> value);
    public sealed virtual Dictionary`2<string, object> ToDictionary();
}
public interface OpenQA.Selenium.Appium.Interfaces.IContextAware {
    public string Context { get; public set; }
    public ReadOnlyCollection`1<string> Contexts { get; }
    public abstract virtual string get_Context();
    public abstract virtual void set_Context(string value);
    public abstract virtual ReadOnlyCollection`1<string> get_Contexts();
}
public interface OpenQA.Selenium.Appium.Interfaces.IExecuteMethod {
    public abstract virtual Response Execute(string commandName, Dictionary`2<string, object> parameters);
    public abstract virtual Response Execute(string driverCommand);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByAccessibilityId`1 {
    public abstract virtual W FindElementByAccessibilityId(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByAccessibilityId(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByAndroidDataMatcher`1 {
    public abstract virtual W FindElementByAndroidDataMatcher(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByAndroidDataMatcher(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByAndroidUIAutomator`1 {
    public abstract virtual W FindElementByAndroidUIAutomator(string selector);
    public abstract virtual W FindElementByAndroidUIAutomator(IUiAutomatorStatementBuilder selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByAndroidUIAutomator(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByAndroidUIAutomator(IUiAutomatorStatementBuilder selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByAndroidViewMatcher`1 {
    public abstract virtual W FindElementByAndroidViewMatcher(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByAndroidViewMatcher(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByIosUIAutomation`1 {
    public abstract virtual W FindElementByIosUIAutomation(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByIosUIAutomation(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByTizenUIAutomation`1 {
    public abstract virtual W FindElementByTizenUIAutomation(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByTizenUIAutomation(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindByWindowsUIAutomation`1 {
    public abstract virtual W FindElementByWindowsUIAutomation(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByWindowsUIAutomation(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindsByFluentSelector`1 {
    public abstract virtual W FindElement(string by, string value);
    public abstract virtual IReadOnlyCollection`1<W> FindElements(string selector, string value);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindsByImage`1 {
    public abstract virtual W FindElementByImage(string base64Template);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByImage(string base64Template);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindsByIosClassChain`1 {
    public abstract virtual W FindElementByIosClassChain(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByIosClassChain(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IFindsByIosNSPredicate`1 {
    public abstract virtual W FindElementByIosNsPredicate(string selector);
    public abstract virtual IReadOnlyCollection`1<W> FindElementsByIosNsPredicate(string selector);
}
public interface OpenQA.Selenium.Appium.Interfaces.IHasClipboard {
    public abstract virtual void SetClipboard(ClipboardContentType contentType, string base64Content);
    public abstract virtual string GetClipboard(ClipboardContentType contentType);
    public abstract virtual void SetClipboardText(string textContent, string label);
    public abstract virtual string GetClipboardText();
    public abstract virtual void SetClipboardUrl(string url);
    public abstract virtual string GetClipboardUrl();
    public abstract virtual void SetClipboardImage(Image image);
    public abstract virtual Image GetClipboardImage();
}
public interface OpenQA.Selenium.Appium.Interfaces.IHasLocation {
    public Location Location { get; public set; }
    public abstract virtual Location get_Location();
    public abstract virtual void set_Location(Location value);
}
public interface OpenQA.Selenium.Appium.Interfaces.IHasSessionDetails {
    public IDictionary`2<string, object> SessionDetails { get; }
    public string PlatformName { get; }
    public string AutomationName { get; }
    public bool IsBrowser { get; }
    public abstract virtual IDictionary`2<string, object> get_SessionDetails();
    public abstract virtual object GetSessionDetail(string detail);
    public abstract virtual string get_PlatformName();
    public abstract virtual string get_AutomationName();
    public abstract virtual bool get_IsBrowser();
}
public interface OpenQA.Selenium.Appium.Interfaces.IHidesKeyboard {
    public abstract virtual void HideKeyboard();
    public abstract virtual void HideKeyboard(string key);
    public abstract virtual void HideKeyboard(string strategy, string key);
    public abstract virtual bool IsKeyboardShown();
}
public interface OpenQA.Selenium.Appium.Interfaces.IHidesKeyboardWithKeyName {
    public abstract virtual void HideKeyboard(string key, string strategy);
}
public interface OpenQA.Selenium.Appium.Interfaces.IInteractsWithApps {
    public abstract virtual void InstallApp(string appPath);
    public abstract virtual bool IsAppInstalled(string bundleId);
    public abstract virtual void BackgroundApp();
    public abstract virtual void BackgroundApp(TimeSpan timepSpan);
    public abstract virtual void RemoveApp(string appId);
    public abstract virtual void ActivateApp(string appId);
    public abstract virtual bool TerminateApp(string appId);
    public abstract virtual bool TerminateApp(string appId, TimeSpan timeout);
    public abstract virtual AppState GetAppState(string appId);
}
public interface OpenQA.Selenium.Appium.Interfaces.IInteractsWithFiles {
    public abstract virtual Byte[] PullFile(string pathOnDevice);
    public abstract virtual Byte[] PullFolder(string remotePath);
}
public interface OpenQA.Selenium.Appium.Interfaces.IMobileElement {
}
public interface OpenQA.Selenium.Appium.Interfaces.IMultiAction {
    public abstract virtual IMultiAction Add(ITouchAction touchAction);
    public abstract virtual void Cancel();
    public abstract virtual void Perform();
    public abstract virtual Dictionary`2<string, object> GetParameters();
}
public interface OpenQA.Selenium.Appium.Interfaces.INetworkActions {
    public abstract virtual void ToggleAirplaneMode();
    public abstract virtual void ToggleData();
    public abstract virtual void ToggleWifi();
    public abstract virtual void ToggleLocationServices();
    public abstract virtual void MakeGsmCall(string phoneNumber, GsmCallActions gsmCallAction);
    public abstract virtual void SendSms(string phoneNumber, string message);
    public abstract virtual void SetGsmSignalStrength(GsmSignalStrength gsmSignalStrength);
    public abstract virtual void SetGsmVoice(GsmVoiceState gsmVoiceState);
}
[ObsoleteAttribute("Touch Actions are deprecated in W3C spec, please use W3C actions instead")]
public interface OpenQA.Selenium.Appium.Interfaces.IPerformsTouchActions {
    public abstract virtual void PerformMultiAction(IMultiAction multiAction);
    public abstract virtual void PerformTouchAction(ITouchAction touchAction);
}
public interface OpenQA.Selenium.Appium.Interfaces.IScreenRecordingOptions {
    public abstract virtual Dictionary`2<string, object> GetParameters();
}
public interface OpenQA.Selenium.Appium.Interfaces.ISendsKeyEvents {
    public abstract virtual void PressKeyCode(int keyCode, int metastate);
    public abstract virtual void LongPressKeyCode(int keyCode, int metastate);
    public abstract virtual void PressKeyCode(KeyEvent keyEvent);
    public abstract virtual void LongPressKeyCode(KeyEvent keyEvent);
}
public interface OpenQA.Selenium.Appium.Interfaces.ITouchAction {
    public abstract virtual ITouchAction LongPress(IWebElement el, Nullable`1<double> x, Nullable`1<double> y);
    public abstract virtual ITouchAction LongPress(double x, double y);
    public abstract virtual ITouchAction MoveTo(IWebElement element, Nullable`1<double> x, Nullable`1<double> y);
    public abstract virtual ITouchAction MoveTo(double x, double y);
    public abstract virtual ITouchAction Press(IWebElement element, Nullable`1<double> x, Nullable`1<double> y);
    public abstract virtual ITouchAction Press(double x, double y);
    public abstract virtual ITouchAction Release();
    public abstract virtual ITouchAction Tap(IWebElement element, Nullable`1<double> x, Nullable`1<double> y, Nullable`1<long> count);
    public abstract virtual ITouchAction Tap(double x, double y, Nullable`1<long> count);
    public abstract virtual ITouchAction Wait(Nullable`1<long> ms);
    public abstract virtual void Cancel();
    public abstract virtual void Perform();
    public abstract virtual List`1<Dictionary`2<string, object>> GetParameters();
}
public interface OpenQA.Selenium.Appium.Interfaces.IUiAutomatorStatementBuilder {
    public abstract virtual string Build();
}
public interface OpenQA.Selenium.Appium.Interfaces.IWebElementCached {
    public abstract virtual void SetCacheValues(Dictionary`2<string, object> cacheValues);
    public abstract virtual void DisableCache();
    public abstract virtual void ClearCache();
}
public class OpenQA.Selenium.Appium.iOS.Enums.HideKeyboardStrategy : object {
    public static string Tap_outside;
    public static string Press_key;
    private static HideKeyboardStrategy();
}
public interface OpenQA.Selenium.Appium.iOS.Interfaces.IHasSettings {
    public Dictionary`2<string, object> Settings { get; public set; }
    public abstract virtual void SetSetting(string setting, object value);
    public abstract virtual void set_Settings(Dictionary`2<string, object> value);
    public abstract virtual Dictionary`2<string, object> get_Settings();
}
public interface OpenQA.Selenium.Appium.iOS.Interfaces.IPerformsTouchID {
    public abstract virtual void PerformTouchID(bool match);
}
internal interface OpenQA.Selenium.Appium.iOS.Interfaces.IShakesDevice {
    public abstract virtual void ShakeDevice();
}
public class OpenQA.Selenium.Appium.iOS.IOSCommandExecutionHelper : object {
    public static void ShakeDevice(IExecuteMethod executeMethod);
    public static void PerformTouchID(IExecuteMethod executeMethod, bool match);
    public static bool IsLocked(IExecuteMethod executeMethod);
    public static void Unlock(IExecuteMethod executeMethod);
    public static void Lock(IExecuteMethod executeMethod);
    public static void SetClipboardUrl(IExecuteMethod executeMethod, string url);
    public static string GetClipboardUrl(IExecuteMethod executeMethod);
    public static void SetClipboardImage(IExecuteMethod executeMethod, Image image);
    public static void SetClipboardImage(IExecuteMethod executeMethod, string base64EncodeImage);
    public static Image GetClipboardImage(IExecuteMethod executeMethod);
    public static Dictionary`2<string, object> GetSettings(IExecuteMethod executeMethod);
    public static void SetSetting(IExecuteMethod executeMethod, string setting, object value);
}
public class OpenQA.Selenium.Appium.iOS.IOSDriver : AppiumDriver {
    private static string Platform;
    public Dictionary`2<string, object> Settings { get; public set; }
    public IOSDriver(ICommandExecutor commandExecutor, DriverOptions driverOptions);
    public IOSDriver(DriverOptions driverOptions);
    public IOSDriver(DriverOptions driverOptions, TimeSpan commandTimeout);
    public IOSDriver(AppiumServiceBuilder builder, DriverOptions driverOptions);
    public IOSDriver(AppiumServiceBuilder builder, DriverOptions driverOptions, TimeSpan commandTimeout);
    public IOSDriver(Uri remoteAddress, DriverOptions driverOptions);
    public IOSDriver(AppiumLocalService service, DriverOptions driverOptions);
    public IOSDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout);
    public IOSDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout);
    public IOSDriver(Uri remoteAddress, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public IOSDriver(AppiumLocalService service, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public IOSDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    public IOSDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    private static IOSDriver();
    public sealed virtual void SetSetting(string setting, object value);
    public sealed virtual Dictionary`2<string, object> get_Settings();
    public sealed virtual void set_Settings(Dictionary`2<string, object> value);
    public sealed virtual void ShakeDevice();
    public sealed virtual void HideKeyboard(string key, string strategy);
    public void Lock(int seconds);
    public sealed virtual void PerformTouchID(bool match);
    public bool IsLocked();
    public void Unlock();
    public void Lock();
    public sealed virtual void SetClipboard(ClipboardContentType contentType, string base64Content);
    public sealed virtual string GetClipboard(ClipboardContentType contentType);
    public sealed virtual void SetClipboardText(string textContent, string label);
    public sealed virtual string GetClipboardText();
    public sealed virtual void SetClipboardUrl(string url);
    public sealed virtual string GetClipboardUrl();
    public sealed virtual void SetClipboardImage(Image image);
    public sealed virtual Image GetClipboardImage();
}
public class OpenQA.Selenium.Appium.iOS.IOSStartScreenRecordingOptions : BaseStartScreenRecordingOptions`1<IOSStartScreenRecordingOptions> {
    public static IOSStartScreenRecordingOptions GetIosStartScreenRecordingOptions();
    public IOSStartScreenRecordingOptions WithVideoType(VideoType videoType);
    public IOSStartScreenRecordingOptions WithVideoType(string videoType);
    public IOSStartScreenRecordingOptions WithVideoQuality(VideoQuality videoQuality);
    public IOSStartScreenRecordingOptions WithTimeLimit(TimeSpan timeLimit);
    public IOSStartScreenRecordingOptions WithVideoFps(string videoFps);
    public IOSStartScreenRecordingOptions WithVideoScale(string videoScale);
    public IOSStartScreenRecordingOptions WithPixelFormat(string pixelFormat);
    public IOSStartScreenRecordingOptions WithVideoFilter(string videoFilters);
}
public class OpenQA.Selenium.Appium.iOS.IOSStopScreenRecordingOptions : BaseStopScreenRecordingOptions`1<IOSStopScreenRecordingOptions> {
    public static IOSStopScreenRecordingOptions StopScreenRecordingOptions();
}
public class OpenQA.Selenium.Appium.Location : object {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Altitude>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public double Altitude { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public double get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(double value);
    public Dictionary`2<string, object> ToDictionary();
}
public class OpenQA.Selenium.Appium.Mac.MacDriver : AppiumDriver {
    private static string Platform;
    public MacDriver(ICommandExecutor commandExecutor, AppiumOptions AppiumOptions);
    public MacDriver(AppiumOptions AppiumOptions);
    public MacDriver(AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public MacDriver(AppiumServiceBuilder builder, AppiumOptions AppiumOptions);
    public MacDriver(AppiumServiceBuilder builder, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public MacDriver(Uri remoteAddress, AppiumOptions AppiumOptions);
    public MacDriver(AppiumLocalService service, AppiumOptions AppiumOptions);
    public MacDriver(Uri remoteAddress, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public MacDriver(AppiumLocalService service, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public MacDriver(Uri remoteAddress, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public MacDriver(AppiumLocalService service, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public MacDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    public MacDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    private static MacDriver();
}
public abstract class OpenQA.Selenium.Appium.MobileBy : By {
    protected string selector;
    private string _searchingCriteriaName;
    internal MobileBy(string selector, string searchingCriteriaName);
    public virtual IWebElement FindElement(ISearchContext context);
    public virtual ReadOnlyCollection`1<IWebElement> FindElements(ISearchContext context);
    public static By AccessibilityId(string selector);
    public static By AndroidUIAutomator(string selector);
    public static By AndroidUIAutomator(IUiAutomatorStatementBuilder selector);
    public static By AndroidDataMatcher(string selector);
    public static By AndroidViewMatcher(string selector);
    public static By IosUIAutomation(string selector);
    public static By WindowsAutomation(string selector);
    public static By TizenAutomation(string selector);
    public static By IosNSPredicate(string selector);
    public static By IosClassChain(string selector);
    public static By Image(string selector);
    public static By Name(string selector);
    public static By Id(string selector);
    public static By ClassName(string selector);
    public static By TagName(string selector);
}
[ObsoleteAttribute("MultiAction is deprecated, please use W3C actions instead: http://appium.io/docs/en/commands/interactions/actions/")]
public class OpenQA.Selenium.Appium.MultiTouch.MultiAction : object {
    private IList`1<ITouchAction> actions;
    private IPerformsTouchActions TouchActionPerformer;
    public MultiAction(IPerformsTouchActions touchActionPerformer);
    public sealed virtual IMultiAction Add(ITouchAction touchAction);
    public sealed virtual Dictionary`2<string, object> GetParameters();
    public sealed virtual void Cancel();
    public sealed virtual void Perform();
}
[ObsoleteAttribute("TouchAction is deprecated, please use W3C actions instead: http://appium.io/docs/en/commands/interactions/actions/")]
public class OpenQA.Selenium.Appium.MultiTouch.TouchAction : object {
    private IPerformsTouchActions TouchActionPerformer;
    private List`1<Step> steps;
    public TouchAction(IPerformsTouchActions touchActionPerformer);
    public sealed virtual ITouchAction LongPress(IWebElement element, Nullable`1<double> x, Nullable`1<double> y);
    public sealed virtual ITouchAction LongPress(double x, double y);
    public sealed virtual ITouchAction MoveTo(IWebElement element, Nullable`1<double> x, Nullable`1<double> y);
    public sealed virtual ITouchAction MoveTo(double x, double y);
    public sealed virtual ITouchAction Press(IWebElement element, Nullable`1<double> x, Nullable`1<double> y);
    public sealed virtual ITouchAction Press(double x, double y);
    public sealed virtual ITouchAction Release();
    public sealed virtual ITouchAction Tap(IWebElement element, Nullable`1<double> x, Nullable`1<double> y, Nullable`1<long> count);
    public sealed virtual ITouchAction Tap(double x, double y, Nullable`1<long> count);
    public sealed virtual ITouchAction Wait(Nullable`1<long> ms);
    public sealed virtual List`1<Dictionary`2<string, object>> GetParameters();
    public sealed virtual void Cancel();
    public sealed virtual void Perform();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class OpenQA.Selenium.Appium.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[ExtensionAttribute]
public static class OpenQA.Selenium.Appium.ScreenOrientationExtensions : object {
    [ExtensionAttribute]
public static string JSONWireProtocolString(ScreenOrientation orientation);
    [ExtensionAttribute]
public static ScreenOrientation ConvertToScreenOrientation(string orientation);
}
public abstract class OpenQA.Selenium.Appium.ScreenRecording.BaseScreenRecordingOptions`1 : object {
    protected Dictionary`2<string, object> Parameters;
    public T WithUploadOptions(ScreenRecordingUploadOptions uploadOptions);
    public sealed virtual Dictionary`2<string, object> GetParameters();
}
public abstract class OpenQA.Selenium.Appium.ScreenRecording.BaseStartScreenRecordingOptions`1 : BaseScreenRecordingOptions`1<T> {
    public T WithTimeLimit(TimeSpan timeLimit);
    public T EnableForcedRestart();
    public T WithUploadOptions(ScreenRecordingUploadOptions uploadOptions);
}
public abstract class OpenQA.Selenium.Appium.ScreenRecording.BaseStopScreenRecordingOptions`1 : BaseScreenRecordingOptions`1<T> {
    public T WithUploadOptions(ScreenRecordingUploadOptions uploadOptions);
}
public class OpenQA.Selenium.Appium.ScreenRecording.ScreenRecordingUploadOptions : object {
    protected Dictionary`2<string, object> Parameters;
    public ScreenRecordingUploadOptions WithRemotePath(string remotePath);
    public ScreenRecordingUploadOptions WithAuthCredentials(string user, string pass);
    public ScreenRecordingUploadOptions WithHttpMethod(RequestMethod method);
    public Dictionary`2<string, object> GetParameters();
}
public class OpenQA.Selenium.Appium.Service.AppiumClientConfig : object {
    [CompilerGeneratedAttribute]
private bool <DirectConnect>k__BackingField;
    public bool DirectConnect { get; public set; }
    public static AppiumClientConfig DefaultConfig();
    [CompilerGeneratedAttribute]
public bool get_DirectConnect();
    [CompilerGeneratedAttribute]
public void set_DirectConnect(bool value);
}
internal class OpenQA.Selenium.Appium.Service.AppiumCommandExecutor : object {
    private AppiumLocalService Service;
    private ICommandExecutor RealExecutor;
    private bool isDisposed;
    private static string IdempotencyHeader;
    private AppiumClientConfig ClientConfig;
    private TimeSpan CommandTimeout;
    private AppiumCommandExecutor(ICommandExecutor realExecutor);
    internal AppiumCommandExecutor(Uri url, TimeSpan timeForTheServerResponding, AppiumClientConfig clientConfig);
    internal AppiumCommandExecutor(AppiumLocalService service, TimeSpan timeForTheServerResponding, AppiumClientConfig clientConfig);
    private static ICommandExecutor CreateRealExecutor(Uri remoteAddress, TimeSpan commandTimeout);
    public sealed virtual Response Execute(Command commandToExecute);
    [AsyncStateMachineAttribute("OpenQA.Selenium.Appium.Service.AppiumCommandExecutor/<ExecuteAsync>d__11")]
public sealed virtual Task`1<Response> ExecuteAsync(Command commandToExecute);
    private bool HandleNewSessionCommand(Command command);
    private void HandleCommandCompletion(Command command, Response result);
    private void HandleCommandException(Command command);
    private ICommandExecutor ModifyNewSessionHttpRequestHeader(ICommandExecutor commandExecutor);
    private ICommandExecutor UpdateExecutor(Response result, ICommandExecutor currentExecutor);
    private ICommandExecutor GetNewExecutorWithDirectConnect(Response response);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public sealed virtual bool TryAddCommand(string commandName, CommandInfo info);
}
public class OpenQA.Selenium.Appium.Service.AppiumLocalService : object {
    private FileInfo NodeJS;
    private string Arguments;
    private IPAddress IP;
    private int Port;
    private TimeSpan InitializationTimeout;
    private IDictionary`2<string, string> EnvironmentForProcess;
    private Process Service;
    private List`1<string> ArgsList;
    [CompilerGeneratedAttribute]
private DataReceivedEventHandler OutputDataReceived;
    public Uri ServiceUrl { get; }
    public bool IsRunning { get; }
    internal AppiumLocalService(FileInfo nodeJS, string arguments, IPAddress ip, int port, TimeSpan initializationTimeout, IDictionary`2<string, string> environmentForProcess);
    public static AppiumLocalService BuildDefaultService();
    public Uri get_ServiceUrl();
    [CompilerGeneratedAttribute]
public void add_OutputDataReceived(DataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OutputDataReceived(DataReceivedEventHandler value);
    public sealed virtual void Start();
    [AsyncStateMachineAttribute("OpenQA.Selenium.Appium.Service.AppiumLocalService/<StartAsync>d__16")]
private Task StartAsync();
    private void DestroyProcess();
    public sealed virtual void Dispose();
    public bool get_IsRunning();
    [AsyncStateMachineAttribute("OpenQA.Selenium.Appium.Service.AppiumLocalService/<IsRunningAsync>d__21")]
private Task`1<bool> IsRunningAsync(TimeSpan timeout);
    private string GetArgsValue(string argStr);
    private string ParseBasePath();
    private void GenerateArgsList();
    private Uri CreateStatusUrl();
    [AsyncStateMachineAttribute("OpenQA.Selenium.Appium.Service.AppiumLocalService/<PingAsync>d__26")]
private Task`1<bool> PingAsync(TimeSpan span);
    [AsyncStateMachineAttribute("OpenQA.Selenium.Appium.Service.AppiumLocalService/<GetHttpResponseAsync>d__27")]
private Task`1<HttpWebResponse> GetHttpResponseAsync(Uri status);
    [CompilerGeneratedAttribute]
private void <StartAsync>b__16_0(object sender, DataReceivedEventArgs e);
}
public class OpenQA.Selenium.Appium.Service.AppiumServiceBuilder : object {
    private static string ErrorNodeNotFound;
    private OptionCollector ServerOptions;
    private FileInfo AppiumJS;
    private string IpAddress;
    private int Port;
    private TimeSpan StartUpTimeout;
    private FileInfo NodeJS;
    private IDictionary`2<string, string> EnvironmentForAProcess;
    private string PathToLogFile;
    private String[] NodeOptions;
    private static FileInfo InstalledNodeInCurrentFileSystem { get; }
    private static FileInfo DefaultExecutable { get; }
    private string Args { get; }
    private static AppiumServiceBuilder();
    private static Process StartSearchingProcess(string file, string arguments);
    private static string GetTheLastStringFromsOutput(StreamReader processOutput);
    private static void ValidateNodeStructure(FileInfo node);
    private static string FindAFileInPATH(string shortName);
    private static FileInfo get_InstalledNodeInCurrentFileSystem();
    private static FileInfo get_DefaultExecutable();
    public AppiumServiceBuilder WithArguments(OptionCollector serverOptions);
    public AppiumServiceBuilder WithAppiumJS(FileInfo appiumJS);
    public AppiumServiceBuilder WithIPAddress(string ipAddress);
    public AppiumServiceBuilder WithStartUpTimeOut(TimeSpan startUpTimeout);
    public AppiumServiceBuilder WithNodeArguments(String[] arguments);
    private void CheckAppiumJS();
    public AppiumServiceBuilder UsingDriverExecutable(FileInfo nodeJS);
    public AppiumServiceBuilder UsingPort(int port);
    public AppiumServiceBuilder UsingAnyFreePort();
    public AppiumServiceBuilder WithEnvironment(IDictionary`2<string, string> environment);
    public AppiumServiceBuilder WithLogFile(FileInfo logFile);
    private string get_Args();
    public AppiumLocalService Build();
}
public class OpenQA.Selenium.Appium.Service.AppiumServiceConstants : object {
    public static string AppiumBinaryPath;
    public static string NodeBinaryPath;
    internal static string Bash;
    internal static string CmdExe;
    internal static string Node;
    internal static string DefaultLocalIPAddress;
    internal static int DefaultAppiumPort;
    internal static string StatusUrl;
    internal static string DefaultBasePath;
    internal static string AppiumFolder;
    internal static string BinFolder;
    internal static string BuildFolder;
    internal static string LibFolder;
    internal static string AppiumJSName;
    internal static string MainJSName;
    internal static string AppiumNodeMask;
    internal static IList`1<string> FilePathCapabilitiesForWindows;
    private static AppiumServiceConstants();
}
public class OpenQA.Selenium.Appium.Service.DirectConnect : object {
    private static string DIRECT_CONNECT_PROTOCOL;
    private static string DIRECT_CONNECT_HOST;
    private static string DIRECT_CONNECT_PORT;
    private static string DIRECT_CONNECT_PATH;
    private string Protocol;
    private string Host;
    private string Port;
    private string Path;
    public DirectConnect(Response response);
    public Uri GetUri();
    private string GetDirectConnectValue(Dictionary`2<string, object> value, string keyName);
}
public class OpenQA.Selenium.Appium.Service.Exceptions.AppiumServerHasNotBeenStartedLocallyException : Exception {
    public AppiumServerHasNotBeenStartedLocallyException(string messege, Exception cause);
    public AppiumServerHasNotBeenStartedLocallyException(string messege);
}
public class OpenQA.Selenium.Appium.Service.Exceptions.InvalidNodeJSInstanceException : Exception {
    public InvalidNodeJSInstanceException(string message, Exception cause);
    public InvalidNodeJSInstanceException(string message);
}
public class OpenQA.Selenium.Appium.Service.Exceptions.InvalidServerInstanceException : Exception {
    private static string Prefix;
    public InvalidServerInstanceException(string message, Exception cause);
    public InvalidServerInstanceException(string message);
    private static InvalidServerInstanceException();
}
public class OpenQA.Selenium.Appium.Service.Options.AndroidOptionList : BaseOptionList {
    public static KeyValuePair`2<string, string> BootstrapPort(string value);
    public static KeyValuePair`2<string, string> SuppressAdbKillServer();
    public static KeyValuePair`2<string, string> ChromeDriverPort(string value);
    public static KeyValuePair`2<string, string> ChromeDriverExecutable(string value);
}
public class OpenQA.Selenium.Appium.Service.Options.BaseOptionList : object {
    protected static KeyValuePair`2<string, string> GetKeyValuePair(string argument, string value);
    protected static KeyValuePair`2<string, string> GetKeyValuePairUsingDefaultValue(string argument, string value, string defaultValue);
}
public class OpenQA.Selenium.Appium.Service.Options.GeneralOptionList : BaseOptionList {
    public static KeyValuePair`2<string, string> Shell(string value);
    public static KeyValuePair`2<string, string> BasePath(string value);
    public static KeyValuePair`2<string, string> CallbackAddress(string value);
    public static KeyValuePair`2<string, string> CallbackPort(string value);
    public static KeyValuePair`2<string, string> OverrideSession();
    public static KeyValuePair`2<string, string> PreLaunch();
    public static KeyValuePair`2<string, string> LogLevel(string value);
    public static KeyValuePair`2<string, string> LogTimeStamp();
    public static KeyValuePair`2<string, string> LocalTimezone();
    public static KeyValuePair`2<string, string> LogNoColors();
    public static KeyValuePair`2<string, string> WebHook(string value);
    public static KeyValuePair`2<string, string> NodeConfig(string value);
    public static KeyValuePair`2<string, string> RobotAddress(string value);
    public static KeyValuePair`2<string, string> RobotPort(string value);
    public static KeyValuePair`2<string, string> ShowConfig();
    public static KeyValuePair`2<string, string> NoPermsCheck();
    public static KeyValuePair`2<string, string> StrictCaps();
    public static KeyValuePair`2<string, string> TMP(string value);
    public static KeyValuePair`2<string, string> DebugLogSpacing();
    public static KeyValuePair`2<string, string> AsyncTrace();
}
public class OpenQA.Selenium.Appium.Service.Options.IOSOptionList : BaseOptionList {
    public static KeyValuePair`2<string, string> Ipa(string value);
    public static KeyValuePair`2<string, string> BackEndRetries(string value);
    public static KeyValuePair`2<string, string> Safari();
    public static KeyValuePair`2<string, string> DefaultDevice();
    public static KeyValuePair`2<string, string> ForceIPhoneSimulator();
    public static KeyValuePair`2<string, string> ForceIPadSimulator();
    public static KeyValuePair`2<string, string> TraceTemplate(string value);
    public static KeyValuePair`2<string, string> Intstruments(string value);
    public static KeyValuePair`2<string, string> IsolateSimDevice();
    public static KeyValuePair`2<string, string> TraceDirectory(string value);
    public static KeyValuePair`2<string, string> WebkitDebugProxyPort(string value);
}
public class OpenQA.Selenium.Appium.Service.Options.OptionCollector : object {
    private IDictionary`2<string, string> CollectedArgs;
    private AppiumOptions options;
    private static string CapabilitiesFlag;
    internal IList`1<string> Arguments { get; }
    private static OptionCollector();
    public OptionCollector AddArguments(KeyValuePair`2<string, string> arguments);
    public OptionCollector AddCapabilities(AppiumOptions options);
    private string ParseCapabilitiesIfWindows();
    private string ParseCapabilitiesIfUNIX();
    internal IList`1<string> get_Arguments();
}
public class OpenQA.Selenium.Appium.Tizen.TizenCommandExecutionHelper : AppiumCommandExecutionHelper {
    public static void SetAttribute(IExecuteMethod executeMethod, string elementId, string name, string value);
}
public class OpenQA.Selenium.Appium.Tizen.TizenDriver : AppiumDriver {
    private static string Platform;
    public TizenDriver(ICommandExecutor commandExecutor, AppiumOptions AppiumOptions);
    public TizenDriver(AppiumOptions AppiumOptions);
    public TizenDriver(AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public TizenDriver(AppiumServiceBuilder builder, AppiumOptions AppiumOptions);
    public TizenDriver(AppiumServiceBuilder builder, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public TizenDriver(Uri remoteAddress, AppiumOptions AppiumOptions);
    public TizenDriver(AppiumLocalService service, AppiumOptions AppiumOptions);
    public TizenDriver(Uri remoteAddress, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public TizenDriver(AppiumLocalService service, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public TizenDriver(Uri remoteAddress, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public TizenDriver(AppiumLocalService service, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public TizenDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    public TizenDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    private static TizenDriver();
}
public class OpenQA.Selenium.Appium.Windows.Enums.WindowsKeyCode : object {
    public static int Power;
    public static int Windows;
    public static int VolumeUp;
    public static int VolumeDown;
    public static int RotationLock;
    public static int CountMin;
    public static int Back;
    public static int Search;
    public static int CameraFocus;
    public static int CameraShutter;
    public static int RingerToggle;
    public static int Headset;
    public static int HwkbDploy;
    public static int CameraLens;
    public static int OemCustom;
    public static int OemCustom2;
    public static int OemCustom3;
    public static int Count;
    private static WindowsKeyCode();
}
public class OpenQA.Selenium.Appium.Windows.WindowsDriver : AppiumDriver {
    private static string Platform;
    public string Context { get; public set; }
    public ReadOnlyCollection`1<string> Contexts { get; }
    public WindowsDriver(AppiumOptions AppiumOptions);
    public WindowsDriver(AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public WindowsDriver(AppiumServiceBuilder builder, AppiumOptions AppiumOptions);
    public WindowsDriver(AppiumServiceBuilder builder, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public WindowsDriver(Uri remoteAddress, AppiumOptions AppiumOptions);
    public WindowsDriver(AppiumLocalService service, AppiumOptions AppiumOptions);
    public WindowsDriver(Uri remoteAddress, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public WindowsDriver(AppiumLocalService service, AppiumOptions AppiumOptions, TimeSpan commandTimeout);
    public WindowsDriver(Uri remoteAddress, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public WindowsDriver(AppiumLocalService service, DriverOptions driverOptions, AppiumClientConfig clientConfig);
    public WindowsDriver(Uri remoteAddress, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    public WindowsDriver(AppiumLocalService service, DriverOptions driverOptions, TimeSpan commandTimeout, AppiumClientConfig clientConfig);
    private static WindowsDriver();
    public virtual string get_Context();
    public virtual void set_Context(string value);
    public virtual ReadOnlyCollection`1<string> get_Contexts();
    public sealed virtual void HideKeyboard(string key, string strategy);
    public sealed virtual void PressKeyCode(KeyEvent keyEvent);
    public sealed virtual void LongPressKeyCode(KeyEvent keyEvent);
    public sealed virtual void PressKeyCode(int keyCode, int metastate);
    public sealed virtual void LongPressKeyCode(int keyCode, int metastate);
    public void CloseApp();
    public void LaunchApp();
}
public class OpenQA.Selenium.Appium.WindowsDriverCommand : object {
    public static string CloseApp;
    public static string LaunchApp;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
