public interface Apprio.Enablement.Platform.Abstractions.IAzureOptions {
    public string ClientId { get; }
    public string ClientSecret { get; }
    public string TenantId { get; }
    public string SubscriptionId { get; }
    public bool IsValid { get; }
    public abstract virtual string get_ClientId();
    public abstract virtual string get_ClientSecret();
    public abstract virtual string get_TenantId();
    public abstract virtual string get_SubscriptionId();
    public abstract virtual bool get_IsValid();
}
public interface Apprio.Enablement.Platform.Abstractions.IOperationResult {
    public bool Created { get; }
    public abstract virtual bool get_Created();
}
public interface Apprio.Enablement.Platform.Abstractions.IOperationResult`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
public interface Apprio.Enablement.Platform.Abstractions.IProfileResult {
    public Stopwatch Stopwatch { get; }
    public abstract virtual Stopwatch get_Stopwatch();
}
public interface Apprio.Enablement.Platform.Abstractions.IProfileResult`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
public class Apprio.Enablement.Platform.AsyncLazy`1 : Lazy`1<Task`1<T>> {
    public AsyncLazy`1(Func`1<Task`1<T>> taskFactory);
    public TaskAwaiter`1<T> GetAwaiter();
}
[AttributeUsageAttribute("128")]
public class Apprio.Enablement.Platform.Attributes.NotAuditableAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AuditExplanationType <AuditExplanationType>k__BackingField;
    public AuditExplanationType AuditExplanationType { get; }
    public NotAuditableAttribute(AuditExplanationType auditExplanationType);
    [CompilerGeneratedAttribute]
public AuditExplanationType get_AuditExplanationType();
}
public class Apprio.Enablement.Platform.Caching.CacheService : object {
    private ObjectCache cache;
    [AsyncStateMachineAttribute("Apprio.Enablement.Platform.Caching.CacheService/<ClearAsync>d__2")]
[DebuggerStepThroughAttribute]
[ObsoleteAttribute("This is an intentionally bad implementation; please avoid usage")]
public sealed virtual Task ClearAsync();
    public sealed virtual T GetCache(string key, CacheItemPolicy policy, Func`1<T> factory);
    public sealed virtual bool TryGetCache(string key, T& value);
    [AsyncStateMachineAttribute("Apprio.Enablement.Platform.Caching.CacheService/<GetCacheAsync>d__5`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> GetCacheAsync(string key, CacheItemPolicy policy, Func`1<Task`1<T>> factory);
    public sealed virtual bool TryRemove(string key, T& value);
    [CompilerGeneratedAttribute]
private void <ClearAsync>g__Action|2_0();
}
public interface Apprio.Enablement.Platform.Caching.ICacheService {
    [ObsoleteAttribute("This is an intentionally bad implementation; please avoid usage")]
public abstract virtual Task ClearAsync();
    public abstract virtual T GetCache(string key, CacheItemPolicy policy, Func`1<T> factory);
    public abstract virtual bool TryGetCache(string key, T& value);
    public abstract virtual Task`1<T> GetCacheAsync(string key, CacheItemPolicy policy, Func`1<Task`1<T>> factory);
    public abstract virtual bool TryRemove(string key, T& value);
}
public class Apprio.Enablement.Platform.Cryptography.DurableKey : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Quick>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Durable>k__BackingField;
    public string Quick { get; }
    public string Durable { get; }
    public DurableKey(string quick, string durable);
    [CompilerGeneratedAttribute]
public string get_Quick();
    [CompilerGeneratedAttribute]
public string get_Durable();
}
public class Apprio.Enablement.Platform.Cryptography.DurableKeyOrchestrator : object {
    private SHA512 sha;
    public sealed virtual DurableKey GenerateDurableKeys(string value);
    private string GenerateLongKey(string value);
    private static string Shorten(string longKey);
}
public interface Apprio.Enablement.Platform.Cryptography.IDurableKeyOrchestrator {
    public abstract virtual DurableKey GenerateDurableKeys(string value);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Cryptography.KnuthExtensions : object {
    private static ulong HashValueMultiplier;
    private static ulong HashValueBase;
    [ExtensionAttribute]
public static ulong GetKnuthHashCode(object input);
}
public class Apprio.Enablement.Platform.Enumerations.AddOnlyCollection`1 : object {
    private ConcurrentBag`1<T> inner;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
}
public enum Apprio.Enablement.Platform.Enumerations.AuditExplanationType : Enum {
    public int value__;
    public static AuditExplanationType Show;
    public static AuditExplanationType Hide;
}
public class Apprio.Enablement.Platform.Enumerations.AuditLogOptions : Enumeration {
    public static AuditLogOptions Recursive;
    public static AuditLogOptions ExcludeNoChanges;
    public static AuditLogOptions ExcludeAdds;
    public static AuditLogOptions ExcludeDeletes;
    public static AuditLogOptions ExcludeChanges;
    private AuditLogOptions(string name);
    private static AuditLogOptions();
}
public class Apprio.Enablement.Platform.Enumerations.ComparisonResult : Enumeration {
    public static ComparisonResult Changed;
    public static ComparisonResult NotChanged;
    public static ComparisonResult Added;
    public static ComparisonResult Deleted;
    public static ComparisonResult Unknown;
    private ComparisonResult(string name);
    private static ComparisonResult();
}
public interface Apprio.Enablement.Platform.Enumerations.IAddOnlyCollection`1 {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void Add(T item);
    public abstract virtual bool Contains(T item);
    public abstract virtual void CopyTo(T[] array, int arrayIndex);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.AuditLogOptionsExtensions : object {
    [ExtensionAttribute]
public static bool IsRecursive(AuditLogOptions[] options);
    [ExtensionAttribute]
public static bool IsExcludeNoChanges(AuditLogOptions[] options);
    [ExtensionAttribute]
public static bool IsExcludeAdds(AuditLogOptions[] options);
    [ExtensionAttribute]
public static bool IsExcludeDeletes(AuditLogOptions[] options);
    [ExtensionAttribute]
public static bool IsExcludeChanges(AuditLogOptions[] options);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.BatchExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Batch(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Batch(IEnumerable`1<TSource> source, int size, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.CancellationTokenExtensions : object {
    [ExtensionAttribute]
public static Task AsTask(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.DateTimeExtensions : object {
    [ExtensionAttribute]
public static bool IsFederalHoliday(DateTime date);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static bool IsIn(T source, IEnumerable`1<T> collection);
    [ExtensionAttribute]
public static bool IsIn(T source, T[] collection);
    [ExtensionAttribute]
public static bool ContainsAny(IEnumerable`1<T> source, T[] collection);
    [ExtensionAttribute]
public static bool ContainsAll(IEnumerable`1<T> source, T[] collection);
    [ExtensionAttribute]
public static bool ContainsOnly(IEnumerable`1<T> source, T[] collection);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.GuidExtensions : object {
    public static string DefaultHashidsSalt;
    private static int batchSize;
    private static char dash;
    private static char zero;
    private static char x;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <HashidsSalt>k__BackingField;
    public static string HashidsSalt { get; public set; }
    private static GuidExtensions();
    [CompilerGeneratedAttribute]
public static string get_HashidsSalt();
    [CompilerGeneratedAttribute]
public static void set_HashidsSalt(string value);
    [ExtensionAttribute]
public static string ToHashId(Guid input, IHashids hashids);
    private static IHashids GetHashids();
    [ExtensionAttribute]
public static Int32[] ToIntArray(Guid input);
    [ExtensionAttribute]
public static Guid ToGuidFromHashids(string id, IHashids hashids);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.ObjectExtensions : object {
    private static JsonSerializerOptions jsonSerializerOptions;
    private static ObjectExtensions();
    [ExtensionAttribute]
public static string ToJson(object input, JsonSerializerOptions options);
    [ExtensionAttribute]
public static string ToJson(object input);
    [ExtensionAttribute]
public static long GetMemoryAddress(object input);
    [ExtensionAttribute]
public static string ToQueryString(object request);
    [ExtensionAttribute]
public static bool TryCast(object obj, T& resolved);
    [ExtensionAttribute]
public static object TryCast(object obj, Type type);
    [ExtensionAttribute]
public static bool TryCast(object obj, Type type, Object& casted);
    private static List`1<KeyValuePair`2<string, string>> ParameterizeJObject(JObject request);
    private static List`1<KeyValuePair`2<string, string>> ParameterizeClrObject(object request);
    private static void AddToParamsList(List`1<KeyValuePair`2<string, string>> list, string key, object value);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSingletonIfMissing(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingletonIfMissing(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingletonIfMissing(IServiceCollection services, TImplementation value);
    [ExtensionAttribute]
public static IServiceCollection AddOptionsIfMissing(IServiceCollection services, IConfiguration configuration);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static object BuildService(IServiceProvider provider, Type type);
    [ExtensionAttribute]
public static TService BuildService(IServiceProvider provider, Type type);
    [ExtensionAttribute]
public static TService BuildService(IServiceProvider provider);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.StringExtensions : object {
    private static string camelCasePattern;
    [ExtensionAttribute]
public static string ToCamelCase(string input);
    [ExtensionAttribute]
public static string ToPascalCase(string original);
    [ExtensionAttribute]
public static string Soundex(string input);
    [ExtensionAttribute]
public static bool SoundsLike(string input, string other);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.Try : object {
    public static TValue Do(Func`1<TValue> action, TValue default);
    [ExtensionAttribute]
public static TValue Do(ILogger logger, string activityName, Func`1<TValue> action);
    [AsyncStateMachineAttribute("Apprio.Enablement.Platform.Extensions.Try/<DoAsync>d__2`1")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<TValue> DoAsync(ILogger logger, string activityName, Func`1<Task`1<TValue>> action);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static SemVersion GetSemanticVersion(Type type);
}
public interface Apprio.Enablement.Platform.Gateways.IKeyVaultSecretGateway {
    public abstract virtual Task`1<string> GetSecretAsync(string name);
    public abstract virtual string GetSecret(string name);
    public abstract virtual Task`1<ClientCredentials> GetClientCredentialsAsync();
    public abstract virtual ClientCredentials GetClientCredentials();
}
public static class Apprio.Enablement.Platform.Helpers.AuditLogHelper : object {
    private static Type stringify;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ICollection`1<IsPrimitiveDelegate> <IsPrimitiveDelegates>k__BackingField;
    internal static string Accessor;
    public static ICollection`1<IsPrimitiveDelegate> IsPrimitiveDelegates { get; }
    private static AuditLogHelper();
    [CompilerGeneratedAttribute]
public static ICollection`1<IsPrimitiveDelegate> get_IsPrimitiveDelegates();
    internal static string Wrap(string value);
    public static ObjectComparison Compare(T before, T after, AuditLogOptions[] options);
    private static void AddComparisons(T before, T after, List`1& comparisons, HashSet`1& references, bool root, string prefix, AuditLogOptions[] options);
    private static void CompareNatively(T before, T after, AuditLogOptions[] options, List`1& comparisons, HashSet`1& references, string prefix);
    private static bool TryExplainIfNotAuditable(List`1& comparisons, string prefix, MemberInfo property);
    private static bool IsNotAuditable(MemberInfo property, Boolean& explain);
    private static bool TryCompareStrings(ICollection`1<Comparison> comparisons, object originalValue, object newValue, MemberInfo property);
    private static void Recurse(List`1& comparisons, HashSet`1& references, PropertyInfo property, object originalValue, object newValue, string prefix, AuditLogOptions[] options);
    private static bool IsPrimitive(Type type);
}
public static class Apprio.Enablement.Platform.Helpers.ConsoleHelper : object {
    private static Thread inputThread;
    private static AutoResetEvent getInput;
    private static AutoResetEvent gotInput;
    private static string input;
    private static ConsoleHelper();
    private static void Reader();
    public static string ReadLine(int timeoutMilliseconds);
}
public static class Apprio.Enablement.Platform.Helpers.CredentialHelper : object {
    private static Random random;
    private static CredentialHelper();
    public static string GeneratePassword(int length);
    public static string GenerateUsername();
}
public static class Apprio.Enablement.Platform.Helpers.EmbeddedResourceHelper : object {
}
public static class Apprio.Enablement.Platform.Helpers.ParameterHelper : object {
    public static string ToJson(object parameters);
}
public static class Apprio.Enablement.Platform.Helpers.Soundex : object {
    public static string Generate(string phrase);
    private static bool TryProcessCurrentLetter(string phrase, int i, StringBuilder result, String& previousCode);
    private static string GetCurrentCode(string currentLetter);
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Initialize.Services : object {
    [ExtensionAttribute]
public static IServiceCollection WithDurableKeyOrchestration(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection WithDomainNameProviders(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection WithAllProviders(IServiceCollection services);
    [ExtensionAttribute]
public static TOptions WithOptions(IServiceCollection services, IConfiguration configuration, string configurationKey);
}
public class Apprio.Enablement.Platform.Models.AzureOptions : object {
    private static Lazy`1<IAzureOptions> lazyFromEnvironmentVariables;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ClientIdVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ClientSecretVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <TenantIdVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <SubscriptionIdVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SubscriptionId>k__BackingField;
    public static IAzureOptions FromEnvironmentVariables { get; }
    public static string ClientIdVariableName { get; public set; }
    public static string ClientSecretVariableName { get; public set; }
    public static string TenantIdVariableName { get; public set; }
    public static string SubscriptionIdVariableName { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public string TenantId { get; public set; }
    public string SubscriptionId { get; public set; }
    public bool IsValid { get; }
    public AzureOptions(string clientId, string clientSecret, string tenantId, string subscriptionId);
    private static AzureOptions();
    public static IAzureOptions get_FromEnvironmentVariables();
    [CompilerGeneratedAttribute]
public static string get_ClientIdVariableName();
    [CompilerGeneratedAttribute]
public static void set_ClientIdVariableName(string value);
    [CompilerGeneratedAttribute]
public static string get_ClientSecretVariableName();
    [CompilerGeneratedAttribute]
public static void set_ClientSecretVariableName(string value);
    [CompilerGeneratedAttribute]
public static string get_TenantIdVariableName();
    [CompilerGeneratedAttribute]
public static void set_TenantIdVariableName(string value);
    [CompilerGeneratedAttribute]
public static string get_SubscriptionIdVariableName();
    [CompilerGeneratedAttribute]
public static void set_SubscriptionIdVariableName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(string value);
    public sealed virtual bool get_IsValid();
}
public class Apprio.Enablement.Platform.Models.ClientCredentials : object {
    private static Lazy`1<ClientCredentials> lazyFromEnvironmentVariables;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ClientIdVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ClientSecretVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ClientIdSecretName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ClientSecretSecretName>k__BackingField;
    public string ClientSecret { get; public set; }
    public string ClientId { get; public set; }
    public static ClientCredentials FromEnvironmentVariables { get; }
    public static string ClientIdVariableName { get; public set; }
    public static string ClientSecretVariableName { get; public set; }
    public static string ClientIdSecretName { get; public set; }
    public static string ClientSecretSecretName { get; public set; }
    public ClientCredentials(string clientId, string clientSecret);
    private static ClientCredentials();
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    public static ClientCredentials get_FromEnvironmentVariables();
    public static ClientCredentials FromSecretsGateway(IKeyVaultSecretGateway gateway);
    [CompilerGeneratedAttribute]
public static string get_ClientIdVariableName();
    [CompilerGeneratedAttribute]
public static void set_ClientIdVariableName(string value);
    [CompilerGeneratedAttribute]
public static string get_ClientSecretVariableName();
    [CompilerGeneratedAttribute]
public static void set_ClientSecretVariableName(string value);
    [CompilerGeneratedAttribute]
public static string get_ClientIdSecretName();
    [CompilerGeneratedAttribute]
public static void set_ClientIdSecretName(string value);
    [CompilerGeneratedAttribute]
public static string get_ClientSecretSecretName();
    [CompilerGeneratedAttribute]
public static void set_ClientSecretSecretName(string value);
}
[DebuggerDisplayAttribute("{Narrative,nq}")]
public class Apprio.Enablement.Platform.Models.Comparison : object {
    private string prefix;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ComparisonResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <After>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Before>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Narrative>k__BackingField;
    public ComparisonResult Result { get; private set; }
    public object After { get; }
    public object Before { get; }
    private string Source { get; }
    private string ReadableBefore { get; }
    private string ReadableAfter { get; }
    private string ReadableSource { get; }
    private bool IsBeforeReadableBadString { get; }
    private bool IsAfterReadableBadString { get; }
    public string Narrative { get; private set; }
    public Comparison(MemberInfo propertyInfo, string prefix);
    public Comparison(MemberInfo propertyInfo, object before, object after, string prefix);
    public Comparison(string source, string before, string after, string prefix);
    [CompilerGeneratedAttribute]
public ComparisonResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(ComparisonResult value);
    [CompilerGeneratedAttribute]
public object get_After();
    [CompilerGeneratedAttribute]
public object get_Before();
    [CompilerGeneratedAttribute]
private string get_Source();
    private string get_ReadableBefore();
    private string get_ReadableAfter();
    private string get_ReadableSource();
    private bool get_IsBeforeReadableBadString();
    private bool get_IsAfterReadableBadString();
    [CompilerGeneratedAttribute]
public string get_Narrative();
    [CompilerGeneratedAttribute]
private void set_Narrative(string value);
    private void Evaluate();
    private string GetNarrative();
    private bool TryGetNativeNarrative(object before, object after, String& narrative);
    private bool TryGetStringNarrative(string before, string after, String& narrative);
    private string NoChange();
    private string ChangedUnknown();
    private string Unknown();
    private string Changed();
    private string Added();
    private string Deleted();
    private static bool IsBadString(object source, string readable);
    internal bool IsApplicableTo(AuditLogOptions[] options);
}
public class Apprio.Enablement.Platform.Models.ExtendedAzureOptions : AzureOptions {
    private static Lazy`1<ExtendedAzureOptions> lazyFromEnvironmentVariables;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <CredentialsVariableName>k__BackingField;
    public static ExtendedAzureOptions FromEnvironmentVariables { get; }
    public static string CredentialsVariableName { get; public set; }
    public ExtendedAzureOptions(string clientId, string clientSecret, string tenantId, string subscriptionId);
    private static ExtendedAzureOptions();
    public static ExtendedAzureOptions get_FromEnvironmentVariables();
    private static ExtendedAzureOptions Create();
    [CompilerGeneratedAttribute]
public static string get_CredentialsVariableName();
    [CompilerGeneratedAttribute]
public static void set_CredentialsVariableName(string value);
}
public class Apprio.Enablement.Platform.Models.HostEnvironment : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IFileProvider <ContentRootFileProvider>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EnvironmentName>k__BackingField;
    public string ApplicationName { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public string ContentRootPath { get; public set; }
    public string EnvironmentName { get; public set; }
    public HostEnvironment(string applicationName, string environmentName);
    public HostEnvironment(string applicationName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_ContentRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
}
[DebuggerDisplayAttribute("{Summary,nq}")]
public class Apprio.Enablement.Platform.Models.ObjectComparison : object {
    private AuditLogOptions[] options;
    private ImmutableList`1<Comparison> comparisons;
    public string Summary { get; }
    internal ObjectComparison(AuditLogOptions[] options, IEnumerable`1<Comparison> comparisons);
    public string get_Summary();
    public IEnumerable`1<Comparison> GetComparisons();
    private string GetSummary();
    [CompilerGeneratedAttribute]
private bool <GetComparisons>b__5_0(Comparison c);
}
public class Apprio.Enablement.Platform.Models.OperationResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Created>k__BackingField;
    public bool Created { get; }
    public OperationResult(bool created);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Created();
}
public class Apprio.Enablement.Platform.Models.OperationResult`1 : OperationResult {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    public T Value { get; }
    public OperationResult`1(bool created);
    public OperationResult`1(T value, bool created);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    public static OperationResult`1<T> op_Implicit(T value);
}
public class Apprio.Enablement.Platform.Models.ProfileResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Stopwatch <Stopwatch>k__BackingField;
    public Stopwatch Stopwatch { get; }
    public ProfileResult(Stopwatch stopwatch);
    [CompilerGeneratedAttribute]
public sealed virtual Stopwatch get_Stopwatch();
}
public class Apprio.Enablement.Platform.Models.ProfileResult`1 : ProfileResult {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    public T Value { get; }
    public ProfileResult`1(T value, Stopwatch stopwatch);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
}
public class Apprio.Enablement.Platform.Models.Result : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    public bool IsSuccess { get; public set; }
    public Exception Exception { get; protected set; }
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
protected void set_Exception(Exception value);
    public static Result`1<T> FromValue(T value);
    public static Result`1<T> FromValue(T value, Exception ex);
}
public class Apprio.Enablement.Platform.Models.Result`1 : Result {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    public T Value { get; }
    public Result`1(T result, bool isSuccess);
    public Result`1(T result, bool isSuccess, Exception exception);
    public Result`1(T result, Exception exception, bool isSuccess);
    [CompilerGeneratedAttribute]
public T get_Value();
    public static T op_Implicit(Result`1<T> result);
}
internal class Apprio.Enablement.Platform.Providers.ApprioSubDomainProvider : object {
    private SubDomainProvider subDomainProvider;
    public string SubDomain { get; }
    public ApprioSubDomainProvider(IHostEnvironment hostEnvironment);
    public sealed virtual bool TryGetDomain(string environment, String& subdomain);
    public sealed virtual string get_SubDomain();
}
public class Apprio.Enablement.Platform.Providers.EnvironmentProvider : object {
    private static Resolve customResolver;
    public static string AspNetCoreEnvironment { get; }
    public static string Environment { get; }
    public static bool IsProduction { get; }
    public static bool IsTest { get; }
    public static bool IsDevelopment { get; }
    public static Env Env { get; }
    private string Apprio.Enablement.Platform.Providers.IEnvironmentProvider.AspNetCoreEnvironment { get; }
    private string Apprio.Enablement.Platform.Providers.IEnvironmentProvider.Environment { get; }
    private bool Apprio.Enablement.Platform.Providers.IEnvironmentProvider.IsProduction { get; }
    private bool Apprio.Enablement.Platform.Providers.IEnvironmentProvider.IsTest { get; }
    private bool Apprio.Enablement.Platform.Providers.IEnvironmentProvider.IsDevelopment { get; }
    private Env Apprio.Enablement.Platform.Providers.IEnvironmentProvider.Env { get; }
    private static EnvironmentProvider();
    public static string get_AspNetCoreEnvironment();
    public static string get_Environment();
    public static bool get_IsProduction();
    public static bool get_IsTest();
    public static bool get_IsDevelopment();
    public static Env get_Env();
    private sealed virtual override string Apprio.Enablement.Platform.Providers.IEnvironmentProvider.get_AspNetCoreEnvironment();
    private sealed virtual override string Apprio.Enablement.Platform.Providers.IEnvironmentProvider.get_Environment();
    private sealed virtual override bool Apprio.Enablement.Platform.Providers.IEnvironmentProvider.get_IsProduction();
    private sealed virtual override bool Apprio.Enablement.Platform.Providers.IEnvironmentProvider.get_IsTest();
    private sealed virtual override bool Apprio.Enablement.Platform.Providers.IEnvironmentProvider.get_IsDevelopment();
    private sealed virtual override Env Apprio.Enablement.Platform.Providers.IEnvironmentProvider.get_Env();
    public static void UseCustomResolver(Resolve resolver);
}
public interface Apprio.Enablement.Platform.Providers.IDependencyTypeProvider {
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public abstract virtual Type get_ServiceType();
    public abstract virtual Type get_ImplementationType();
}
public interface Apprio.Enablement.Platform.Providers.IEnvironmentProvider {
    public string AspNetCoreEnvironment { get; }
    public string Environment { get; }
    public bool IsProduction { get; }
    public bool IsTest { get; }
    public bool IsDevelopment { get; }
    public Env Env { get; }
    public abstract virtual string get_AspNetCoreEnvironment();
    public abstract virtual string get_Environment();
    public abstract virtual bool get_IsProduction();
    public abstract virtual bool get_IsTest();
    public abstract virtual bool get_IsDevelopment();
    public abstract virtual Env get_Env();
}
public interface Apprio.Enablement.Platform.Providers.IMiddleware`1 {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual void Invoke(TValue value);
}
public class Apprio.Enablement.Platform.Providers.ImplementationTypeProvider`2 : ServiceTypeProvider`1<TService> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ImplementationType>k__BackingField;
    public Type ImplementationType { get; }
    [CompilerGeneratedAttribute]
public virtual Type get_ImplementationType();
}
public interface Apprio.Enablement.Platform.Providers.IServiceFactory`1 {
    public abstract virtual TService Create(IServiceProvider serviceProvider);
}
public interface Apprio.Enablement.Platform.Providers.ISubDomainProvider {
    public string SubDomain { get; }
    public abstract virtual bool TryGetDomain(string environment, String& subdomain);
    public abstract virtual string get_SubDomain();
}
public abstract class Apprio.Enablement.Platform.Providers.Middleware`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static MiddlewareServiceTypes`1<TValue> <Initialize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static MiddlewareServiceTypes`1<TValue> <None>k__BackingField;
    public static MiddlewareServiceTypes`1<TValue> Initialize { get; }
    public static MiddlewareServiceTypes`1<TValue> None { get; }
    private static Middleware`1();
    protected static MiddlewareServiceTypes`1<TValue> Empty();
    [CompilerGeneratedAttribute]
public static MiddlewareServiceTypes`1<TValue> get_Initialize();
    [CompilerGeneratedAttribute]
public static MiddlewareServiceTypes`1<TValue> get_None();
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Providers.MiddlewareExtensions : object {
    [ExtensionAttribute]
public static EventHandler`1<TValue> ToEventHandler(IMiddleware`1<TValue> middleware);
}
public static class Apprio.Enablement.Platform.Providers.MiddlewareHelpers : object {
    public static ServiceTypeProvider`1<IMiddleware`1<TValue>> Make();
}
public class Apprio.Enablement.Platform.Providers.MiddlewareServiceTypes`1 : ServiceTypes`1<IMiddleware`1<TValue>> {
    private MiddlewareServiceTypes`1(IEnumerable`1<ServiceTypeProvider`1<IMiddleware`1<TValue>>> values);
    public MiddlewareServiceTypes`1<TValue> With(ServiceTypeProvider`1<IMiddleware`1<TValue>> value);
}
public static class Apprio.Enablement.Platform.Providers.MutexProvider : object {
    private static IDictionary`2<string, Guid> locks;
    private static MutexProvider();
    public static bool TryGetExclusiveLock(string lockName, Guid& lockId);
    public static void ReleaseExclusiveLock(string lockName, Guid lockId);
}
public class Apprio.Enablement.Platform.Providers.ServiceFactoryDelegate`1 : MulticastDelegate {
    public ServiceFactoryDelegate`1(object object, IntPtr method);
    public virtual TService Invoke(IServiceProvider serviceProvider);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, AsyncCallback callback, object object);
    public virtual TService EndInvoke(IAsyncResult result);
}
public abstract class Apprio.Enablement.Platform.Providers.ServiceTypeProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ServiceType>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    public abstract virtual Type get_ImplementationType();
}
public class Apprio.Enablement.Platform.Providers.ServiceTypes`1 : object {
    protected List`1<ServiceTypeProvider`1<TService>> list;
    public sealed virtual IEnumerator`1<ServiceTypeProvider`1<TService>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected void AddInternal(ServiceTypeProvider`1<TService> value);
}
public class Apprio.Enablement.Platform.Providers.SubDomainProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, string> <Domains>k__BackingField;
    private IHostEnvironment hostEnvironment;
    internal IDictionary`2<string, string> Domains { get; }
    public string SubDomain { get; }
    public SubDomainProvider(IHostEnvironment hostEnvironment);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_Domains();
    public sealed virtual string get_SubDomain();
    public sealed virtual bool TryGetDomain(string environment, String& subdomain);
}
public class Apprio.Enablement.Platform.Queues.ThreadedQueue`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<TValue> Execute;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IsReadyCallback<TValue> <IsReadyDelegate>k__BackingField;
    private ConcurrentQueue`1<TValue> items;
    private Byte modreq(System.Runtime.CompilerServices.IsVolatile) delegateQueuedOrRunning;
    public IsReadyCallback<TValue> IsReadyDelegate { get; public set; }
    [CompilerGeneratedAttribute]
public void add_Execute(EventHandler`1<TValue> value);
    [CompilerGeneratedAttribute]
public void remove_Execute(EventHandler`1<TValue> value);
    [CompilerGeneratedAttribute]
public IsReadyCallback<TValue> get_IsReadyDelegate();
    [CompilerGeneratedAttribute]
public void set_IsReadyDelegate(IsReadyCallback<TValue> value);
    private static IsReadyCallback<TValue> HasExecutors(ThreadedQueue`1<TValue> queue);
    public void Enqueue(TValue value);
    public void Process();
    private void ProcessItems(object _);
}
public class Apprio.Enablement.Platform.Threading.AsyncLockContext : object {
    private static IDictionary`2<string, SemaphoreSlim> semaphores;
    private SemaphoreSlim semaphoreSlim;
    private AsyncLockContext(SemaphoreSlim semaphoreSlim);
    private static AsyncLockContext();
    [AsyncStateMachineAttribute("Apprio.Enablement.Platform.Threading.AsyncLockContext/<EnterAsync>d__3")]
[DebuggerStepThroughAttribute]
public static Task`1<IDisposable> EnterAsync(string key);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Apprio.Enablement.Platform.Threading.ParallelTask : object {
    [AsyncStateMachineAttribute("Apprio.Enablement.Platform.Threading.ParallelTask/<RunForEachAsync>d__0`1")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task RunForEachAsync(IEnumerable`1<T> items, Func`2<T, Task> func, UInt32 maxThread, UInt32 minThread, Nullable`1<CancellationToken> cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
