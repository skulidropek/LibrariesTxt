[EditorBrowsableAttribute("2")]
public class AlwaysWorksReporter : object {
    [EditorBrowsableAttribute("2")]
public IApprovalFailureReporter reporter;
    public AlwaysWorksReporter(IApprovalFailureReporter reporter);
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
internal class ApprovalTests_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Publicize;
    internal static string Virtuosity;
}
public class ApprovalTests.Approvals : object {
    [EditorBrowsableAttribute("2")]
public static ThreadLocal`1<Caller> currentCaller;
    [EditorBrowsableAttribute("2")]
public static Func`1<IApprovalNamer> defaultNamerCreator;
    [EditorBrowsableAttribute("2")]
public static Func`4<IApprovalWriter, IApprovalNamer, bool, IApprovalApprover> defaultApproverCreator;
    public static Caller CurrentCaller { get; }
    [EditorBrowsableAttribute("2")]
public static Approvals();
    public static Caller get_CurrentCaller();
    public static void SetCaller();
    public static void Verify(IApprovalWriter writer, IApprovalNamer namer, IApprovalFailureReporter reporter);
    public static void RegisterDefaultApprover(Func`4<IApprovalWriter, IApprovalNamer, bool, IApprovalApprover> creator);
    [EditorBrowsableAttribute("2")]
public static IApprovalApprover GetDefaultApprover(IApprovalWriter writer, IApprovalNamer namer, bool shouldIgnoreLineEndings);
    public static void Verify(IApprovalApprover approver);
    public static void Verify(IApprovalApprover approver, IApprovalFailureReporter reporter);
    public static IApprovalFailureReporter GetReporter();
    public static IApprovalFailureReporter GetReporter(IApprovalFailureReporter defaultIfNotFound);
    [EditorBrowsableAttribute("2")]
public static IEnvironmentAwareReporter GetFrontLoadedReporterFromAttribute();
    [EditorBrowsableAttribute("2")]
public static IApprovalFailureReporter GetFrontLoadedReporter(IApprovalFailureReporter defaultIfNotFound, IEnvironmentAwareReporter frontLoad);
    [EditorBrowsableAttribute("2")]
public static IEnvironmentAwareReporter WrapAsEnvironmentAwareReporter(IApprovalFailureReporter mainReporter);
    [EditorBrowsableAttribute("2")]
public static IApprovalFailureReporter GetReporterFromAttribute();
    public static void Verify(IExecutableQuery query);
    public static void Verify(IApprovalWriter writer);
    public static void VerifyFile(string receivedFilePath);
    public static void Verify(FileInfo receivedFilePath);
    public static void VerifyWithCallback(object text, Action`1<string> callBackOnFailure);
    public static void VerifyWithCallback(object text, Func`2<string, string> callBackOnFailure);
    public static void RegisterDefaultNamerCreation(Func`1<IApprovalNamer> creator);
    public static IApprovalNamer GetDefaultNamer();
    public static void UseAssemblyLocationForApprovedFiles();
    public static void Verify(object text);
    public static void Verify(string text, Func`2<string, string> scrubber);
    public static void VerifyWithExtension(string text, string fileExtensionWithDot, Func`2<string, string> scrubber);
    public static void VerifyException(Exception e);
    public static void VerifyExceptionWithStacktrace(Exception e);
    public static void VerifyAll(string header, IEnumerable`1<T> enumerable, string label);
    public static void VerifyAll(IEnumerable`1<T> enumerable, string label);
    public static void VerifyAll(IEnumerable`1<T> enumerable, string label, Func`2<T, string> formatter);
    public static void VerifyAll(string header, IEnumerable`1<T> enumerable, Func`2<T, string> formatter);
    public static void VerifyAll(IEnumerable`1<T> enumerable, Func`2<T, string> formatter);
    public static void VerifyAll(IDictionary`2<K, V> dictionary);
    public static void VerifyAll(string header, IDictionary`2<K, V> dictionary);
    public static void VerifyAll(string header, IDictionary`2<K, V> dictionary, Func`3<K, V, string> formatter);
    public static void VerifyAll(IDictionary`2<K, V> dictionary, Func`3<K, V, string> formatter);
    public static void VerifyBinaryFile(Byte[] bytes, string fileExtensionWithDot);
    public static void VerifyHtml(string html);
    public static void VerifyXml(string xml);
    public static void VerifyJson(string json);
    public static void AssertEquals(string expected, string actual, IApprovalFailureReporter reporter);
    public static void AssertEquals(string expected, string actual);
    public static void AssertEquals(string expected, string actual);
    public static void VerifyPdfFile(string pdfFilePath);
    public static IDisposable SetFrontLoadedReporter(IEnvironmentAwareReporter reporter);
    public static void AssertText(String[] expected, string actual, IApprovalFailureReporter reporter);
    public static void AssertText(string expected, string actual, IApprovalFailureReporter reporter);
}
public class ApprovalTests.ApprovalTextWriter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExtensionWithDot>k__BackingField;
    public string Data { get; public set; }
    public string ExtensionWithDot { get; public set; }
    public ApprovalTextWriter(string data, string extensionWithoutDot);
    public static string EnsureDot(string extension);
    [CompilerGeneratedAttribute]
public virtual string get_Data();
    [CompilerGeneratedAttribute]
public virtual void set_Data(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ExtensionWithDot();
    [CompilerGeneratedAttribute]
public virtual void set_ExtensionWithDot(string value);
    public virtual string GetApprovalFilename(string basename);
    public virtual string GetReceivedFilename(string basename);
    public virtual string WriteReceivedFile(string received);
}
public class ApprovalTests.Approvers.FileApprover : object {
    public IApprovalNamer namer;
    public bool normalizeLineEndingsForTextFiles;
    public IApprovalWriter writer;
    public string approved;
    public ApprovalException failure;
    public string received;
    public FileApprover(IApprovalWriter writer, IApprovalNamer namer, bool normalizeLineEndingsForTextFiles);
    public virtual bool Approve();
    public virtual ApprovalException Approve(string approvedPath, string receivedPath);
    public virtual void Fail();
    public virtual void ReportFailure(IApprovalFailureReporter reporter);
    public virtual void CleanUpAfterSuccess(IApprovalFailureReporter reporter);
    [EditorBrowsableAttribute("2")]
public static bool Compare(ICollection`1<char> chars1, ICollection`1<char> chars2);
    [EditorBrowsableAttribute("2")]
public static bool Compare(ICollection`1<byte> bytes1, ICollection`1<byte> bytes2);
}
public static class ApprovalTests.Combinations.CombinationApprovals : object {
    [EditorBrowsableAttribute("2")]
public static Object[] EMPTY;
    [EditorBrowsableAttribute("2")]
public static CombinationApprovals();
    public static void VerifyAllCombinations(Func`2<A, object> processCall, IEnumerable`1<A> aList);
    public static void VerifyAllCombinations(Func`2<A, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList);
    public static void VerifyAllCombinations(Func`3<A, B, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList);
    public static void VerifyAllCombinations(Func`3<A, B, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList);
    public static void VerifyAllCombinations(Func`4<A, B, C, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList);
    public static void VerifyAllCombinations(Func`4<A, B, C, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList);
    public static void VerifyAllCombinations(Func`5<A, B, C, D, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList);
    public static void VerifyAllCombinations(Func`5<A, B, C, D, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList);
    public static void VerifyAllCombinations(Func`6<A, B, C, D, E, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList);
    public static void VerifyAllCombinations(Func`6<A, B, C, D, E, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList);
    public static void VerifyAllCombinations(Func`7<A, B, C, D, E, F, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList);
    public static void VerifyAllCombinations(Func`7<A, B, C, D, E, F, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList);
    public static void VerifyAllCombinations(Func`8<A, B, C, D, E, F, G, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList);
    public static void VerifyAllCombinations(Func`8<A, B, C, D, E, F, G, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList);
    public static void VerifyAllCombinations(Func`9<A, B, C, D, E, F, G, H, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList);
    public static void VerifyAllCombinations(Func`9<A, B, C, D, E, F, G, H, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList);
    public static void VerifyAllCombinations(Func`10<A, B, C, D, E, F, G, H, I, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
    public static void VerifyAllCombinations(Func`10<A, B, C, D, E, F, G, H, I, object> processCall, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
    [EditorBrowsableAttribute("2")]
public static void VerifyAllCombinations(Func`10<A, B, C, D, E, F, G, H, I, object> processCall, string format, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
    [EditorBrowsableAttribute("2")]
public static void VerifyAllCombinations(Func`10<A, B, C, D, E, F, G, H, I, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
    public static string GetApprovalString(Func`2<A, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList);
    public static string GetApprovalString(Func`2<A, object> processCall, IEnumerable`1<A> aList);
    public static string GetApprovalString(Func`3<A, B, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList);
    public static string GetApprovalString(Func`3<A, B, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList);
    public static string GetApprovalString(Func`4<A, B, C, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList);
    public static string GetApprovalString(Func`4<A, B, C, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList);
    public static string GetApprovalString(Func`5<A, B, C, D, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList);
    public static string GetApprovalString(Func`5<A, B, C, D, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList);
    public static string GetApprovalString(Func`6<A, B, C, D, E, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList);
    public static string GetApprovalString(Func`6<A, B, C, D, E, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList);
    public static string GetApprovalString(Func`7<A, B, C, D, E, F, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList);
    public static string GetApprovalString(Func`7<A, B, C, D, E, F, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList);
    public static string GetApprovalString(Func`8<A, B, C, D, E, F, G, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList);
    public static string GetApprovalString(Func`8<A, B, C, D, E, F, G, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList);
    public static string GetApprovalString(Func`9<A, B, C, D, E, F, G, H, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList);
    public static string GetApprovalString(Func`9<A, B, C, D, E, F, G, H, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList);
    public static string GetApprovalString(Func`10<A, B, C, D, E, F, G, H, I, object> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
    public static string GetApprovalString(Func`10<A, B, C, D, E, F, G, H, I, object> processCall, string format, Func`2<object, string> resultFormatter, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
    [EditorBrowsableAttribute("2")]
public static void AllCombinations(Action`9<A, B, C, D, E, F, G, H, I> processCall, IEnumerable`1<A> aList, IEnumerable`1<B> bList, IEnumerable`1<C> cList, IEnumerable`1<D> dList, IEnumerable`1<E> eList, IEnumerable`1<F> fList, IEnumerable`1<G> gList, IEnumerable`1<H> hList, IEnumerable`1<I> iList);
}
public static class ApprovalTests.Core.Approver : object {
    public static void Verify(IApprovalApprover approver, IApprovalFailureReporter reporter);
}
public class ApprovalTests.Core.Exceptions.ApprovalException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Received>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Approved>k__BackingField;
    public string Received { get; }
    public string Approved { get; }
    public ApprovalException(SerializationInfo info, StreamingContext context);
    public ApprovalException(string received, string approved);
    [CompilerGeneratedAttribute]
public virtual string get_Received();
    [CompilerGeneratedAttribute]
public virtual string get_Approved();
    [EditorBrowsableAttribute("2")]
public virtual bool Equals(ApprovalException other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ApprovalException left, ApprovalException right);
    public static bool op_Inequality(ApprovalException left, ApprovalException right);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class ApprovalTests.Core.Exceptions.ApprovalMismatchException : ApprovalException {
    public string Message { get; }
    public ApprovalMismatchException(SerializationInfo info, StreamingContext context);
    public ApprovalMismatchException(string received, string approved);
    public virtual string get_Message();
}
public class ApprovalTests.Core.Exceptions.ApprovalMissingException : ApprovalException {
    public string Message { get; }
    public ApprovalMissingException(SerializationInfo info, StreamingContext context);
    public ApprovalMissingException(string received, string approved);
    public virtual string get_Message();
}
public interface ApprovalTests.Core.IApprovalApprover {
    public abstract virtual bool Approve();
    public abstract virtual void Fail();
    public abstract virtual void ReportFailure(IApprovalFailureReporter reporter);
    public abstract virtual void CleanUpAfterSuccess(IApprovalFailureReporter reporter);
}
public interface ApprovalTests.Core.IApprovalFailureReporter {
    public abstract virtual void Report(string approved, string received);
}
public interface ApprovalTests.Core.IApprovalNamer {
    public string SourcePath { get; }
    public string Name { get; }
    public abstract virtual string get_SourcePath();
    public abstract virtual string get_Name();
}
public interface ApprovalTests.Core.IApprovalReporterWithCleanUp {
    public abstract virtual void CleanUp(string approved, string received);
}
public interface ApprovalTests.Core.IApprovalWriter {
    public abstract virtual string GetApprovalFilename(string basename);
    public abstract virtual string GetReceivedFilename(string basename);
    public abstract virtual string WriteReceivedFile(string received);
}
public interface ApprovalTests.Core.IEnvironmentAwareReporter {
    public abstract virtual bool IsWorkingInThisEnvironment(string forFile);
}
public interface ApprovalTests.Core.IReporterWithApprovalPower {
    public abstract virtual bool ApprovedWhenReported();
}
public static class ApprovalTests.Email.EmailApprovals : object {
    public static void Verify(MailMessage email);
    public static void VerifyScrubbed(MailMessage email, Func`2<string, string> scrubber);
    public static void VerifyScrubbed(MailMessage email, Func`2[] scrubbers);
    public static string CreateEmail(MailMessage email);
    [EditorBrowsableAttribute("2")]
public static string ScrubBoundaries(string emailText);
    [EditorBrowsableAttribute("2")]
public static string ScrubBoundaries(string emailText, String[] boundaries);
    public static String[] FindBoundaries(string emailText);
    public static string ReadFileWhereLines(string latestFile, Func`2<string, bool> predicate);
    public static string GetLatestFile(string dir);
}
public static class ApprovalTests.Events.EventApprovals : object {
    public static void VerifyEvents(object value);
    public static IEnumerable`1<CallbackDescriptor> GetEventsInformationFor(object value);
    public static string WriteEventsToString(object value, string label);
}
public class ApprovalTests.ExceptionalExceptions.Exceptional : Exception {
    public static T Create(string formattableMessage, Object[] messageParameters);
    public static T Create(Exception causedBy, string formattableMessage, Object[] messageParameters);
    public static T Create(Func`3<string, Exception, T> constructor, Exception causedBy, string formattableMessage, Object[] messageParameters);
    [EditorBrowsableAttribute("2")]
public static string GetTlDr(ExceptionalId uid);
    public static ExceptionalId GenerateUniqueId();
}
public class ApprovalTests.ExceptionalExceptions.ExceptionalId : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Exception>k__BackingField;
    public string Assembly { get; public set; }
    public string Class { get; public set; }
    public string Method { get; public set; }
    public string Exception { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Assembly();
    [CompilerGeneratedAttribute]
public virtual void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Class();
    [CompilerGeneratedAttribute]
public virtual void set_Class(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Method();
    [CompilerGeneratedAttribute]
public virtual void set_Method(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Exception();
    [CompilerGeneratedAttribute]
public virtual void set_Exception(string value);
    public virtual string ToString();
}
public class ApprovalTests.ExceptionalExceptions.ExceptionalTlDr : RestQuery`1<string> {
    [EditorBrowsableAttribute("2")]
public ExceptionalId uid;
    public ExceptionalTlDr(ExceptionalId uid);
    public virtual string GetQuery();
    public virtual string GetBaseAddress();
    public virtual string Load();
}
public class ApprovalTests.ExecutableLambda : object {
    [EditorBrowsableAttribute("2")]
public string text;
    [EditorBrowsableAttribute("2")]
public Func`2<string, string> executeOnFailure;
    public ExecutableLambda(string text, Action`1<string> executeOnFailure);
    public ExecutableLambda(string text, Func`2<string, string> executeOnFailure);
    public virtual string GetQuery();
    public virtual string ExecuteQuery(string query);
}
public static class ApprovalTests.Html.HtmlApprovals : object {
    public static void VerifyHtml(string html, Func`2<string, string> scrubber);
    public static void VerifyHtmlStrict(string html);
}
public static class ApprovalTests.Maintenance.ApprovalMaintenance : object {
    public static IEnumerable`1<FileInfo> CleanUpAbandonedFiles();
    public static IEnumerable`1<FileInfo> FindAbandonedFiles(string path);
    [EditorBrowsableAttribute("2")]
public static List`1<FileInfo> FindAbandonedFiles(string path, Assembly assembly);
    [EditorBrowsableAttribute("2")]
public static bool IsAbandoned(FileInfo approvedFile, Assembly assembly);
    public static void VerifyNoAbandonedFiles(String[] ignore);
}
public static class ApprovalTests.Namers.ApprovalResults : object {
    public static IDisposable UniqueForDotNetVersion();
    public static string GetDotNetVersion();
    public static string GetDotNetRuntime(bool throwOnError, string frameworkDescription);
    public static IDisposable UniqueForMachineName();
    public static string GetMachineName();
    public static string GetOsName();
    public static string GetFullOsName();
    public static string TransformEasyOsName(string captionName);
    public static IDisposable UniqueForOs();
    public static string GetUserName();
    public static IDisposable UniqueForUserName();
    public static IDisposable ForScenario(string data);
    public static IDisposable ForScenario(Object[] dataPoints);
    public static string Scrub(string data);
}
public class ApprovalTests.Namers.ApprovalsFilename : object {
    public List`1<string> AdditionalInformation;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ApprovedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Directory>k__BackingField;
    public string Extension { get; public set; }
    public string ApprovedStatus { get; public set; }
    public string MethodName { get; public set; }
    public string ClassName { get; public set; }
    public string Directory { get; public set; }
    public bool IsMachineSpecific { get; }
    public string GetFullPath { get; }
    public static ApprovalsFilename Parse(string fullFilepath);
    [CompilerGeneratedAttribute]
public virtual string get_Extension();
    [CompilerGeneratedAttribute]
public virtual void set_Extension(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ApprovedStatus();
    [CompilerGeneratedAttribute]
public virtual void set_ApprovedStatus(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public virtual void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClassName();
    [CompilerGeneratedAttribute]
public virtual void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Directory();
    [CompilerGeneratedAttribute]
public virtual void set_Directory(string value);
    public virtual bool get_IsMachineSpecific();
    public virtual ApprovalsFilename ForApproved();
    public virtual bool IsEmptyFile();
    public virtual string get_GetFullPath();
    public virtual List`1<FileInfo> GetOtherMachineSpecificFiles();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public virtual bool <GetOtherMachineSpecificFiles>b__28_0(string f);
}
public class ApprovalTests.Namers.AssemblyLocationNamer : UnitTestFrameworkNamer {
    public static string AssemblyDirectory { get; }
    public string SourcePath { get; }
    [EditorBrowsableAttribute("2")]
public static string get_AssemblyDirectory();
    public virtual string get_SourcePath();
}
public class ApprovalTests.Namers.EnvironmentSpecificCleanUp : object {
    public virtual void Dispose();
}
public static class ApprovalTests.Namers.NamerFactory : object {
    [EditorBrowsableAttribute("2")]
public static AsyncLocal`1<string> additionalInformation;
    public static string AdditionalInformation { get; public set; }
    [EditorBrowsableAttribute("2")]
public static NamerFactory();
    public static string get_AdditionalInformation();
    public static void set_AdditionalInformation(string value);
    public static IDisposable AsEnvironmentSpecificTest(string label);
    public static void Clear();
}
public abstract class ApprovalTests.Namers.StackTraceParsers.AttributeStackTraceParser : object {
    protected Caller caller;
    protected Caller approvalFrame;
    public static Func`2<Caller, bool> FileInfoIsValidFilter;
    public string TypeName { get; }
    public string AdditionalInfo { get; }
    public string ApprovalName { get; }
    public string SourcePath { get; }
    public string ForTestingFramework { get; }
    [EditorBrowsableAttribute("2")]
public static AttributeStackTraceParser();
    public virtual string get_TypeName();
    public virtual string get_AdditionalInfo();
    public virtual string get_ApprovalName();
    [EditorBrowsableAttribute("2")]
public virtual string GetMethodName();
    public virtual string get_SourcePath();
    public static bool IsNamespaceApprovals(string classNamespace);
    [EditorBrowsableAttribute("2")]
public static string GetFileNameForStack(Caller frame);
    public abstract virtual string get_ForTestingFramework();
    public virtual bool Parse(StackTrace trace);
    public static Caller GetFirstFrameForAttribute(Caller caller, string attributeName);
    [EditorBrowsableAttribute("2")]
public static bool ContainsAttribute(Object[] attributes, string attributeName);
    [EditorBrowsableAttribute("2")]
public virtual Caller FindApprovalFrame();
    public virtual bool IsApplicable();
    [EditorBrowsableAttribute("2")]
public abstract virtual string GetAttributeType();
    [EditorBrowsableAttribute("2")]
public static string GetRecursiveTypeName(Type type);
}
public interface ApprovalTests.Namers.StackTraceParsers.IStackTraceParser {
    public string ApprovalName { get; }
    public string SourcePath { get; }
    public string ForTestingFramework { get; }
    public abstract virtual string get_ApprovalName();
    public abstract virtual string get_SourcePath();
    public abstract virtual string get_ForTestingFramework();
    public abstract virtual bool Parse(StackTrace stackTrace);
}
public class ApprovalTests.Namers.StackTraceParsers.StackTraceParser : object {
    [EditorBrowsableAttribute("2")]
public static IList`1<IStackTraceParser> parsers;
    [EditorBrowsableAttribute("2")]
public IStackTraceParser parser;
    public string ForTestingFramework { get; }
    public string ApprovalName { get; }
    public string SourcePath { get; }
    [EditorBrowsableAttribute("2")]
public static StackTraceParser();
    public virtual string get_ForTestingFramework();
    public virtual bool Parse(StackTrace stackTrace);
    public virtual string get_ApprovalName();
    public virtual string get_SourcePath();
    [EditorBrowsableAttribute("2")]
public static void LoadIfApplicable(IList`1<IStackTraceParser> found, AttributeStackTraceParser p);
    public static void AddParser(IStackTraceParser parser);
    public static IEnumerable`1<IStackTraceParser> GetParsers();
}
public class ApprovalTests.Namers.UnitTestFrameworkNamer : object {
    [EditorBrowsableAttribute("2")]
public StackTraceParser stackTraceParser;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Subdirectory>k__BackingField;
    public string Subdirectory { get; }
    public string Name { get; }
    public string SourcePath { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Subdirectory();
    [EditorBrowsableAttribute("2")]
public static string GetSubdirectoryFromAttribute();
    public virtual string get_Name();
    public virtual string get_SourcePath();
}
public class ApprovalTests.Namers.UnitTestFrameworks.XUnit2TheoryStackTraceParser : AttributeStackTraceParser {
    public static string TheoryAttribute;
    public string ForTestingFramework { get; }
    public virtual string get_ForTestingFramework();
    [EditorBrowsableAttribute("2")]
public virtual string GetAttributeType();
}
public class ApprovalTests.Namers.UseApprovalSubdirectoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Subdirectory>k__BackingField;
    public string Subdirectory { get; }
    public UseApprovalSubdirectoryAttribute(string subdirectory);
    [CompilerGeneratedAttribute]
public virtual string get_Subdirectory();
}
public class ApprovalTests.Persistence.ExecutableSqlQuery : object {
    [EditorBrowsableAttribute("2")]
public IDatabaseToExecutableQueryAdapter adapter;
    public ExecutableSqlQuery(IDatabaseToExecutableQueryAdapter adapter);
    public virtual string GetQuery();
    public virtual string ExecuteQuery(string query);
}
public class ApprovalTests.Reporters.AllFailingTestsClipboardReporter : object {
    [EditorBrowsableAttribute("2")]
public static StringBuilder builder;
    public static AllFailingTestsClipboardReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static AllFailingTestsClipboardReporter();
    public virtual void Report(string approved, string received);
}
public class ApprovalTests.Reporters.AraxisMergeReporter : DiffToolReporter {
    public static AraxisMergeReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static AraxisMergeReporter();
}
public class ApprovalTests.Reporters.BeyondCompareReporter : DiffToolReporter {
    public static BeyondCompareReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static BeyondCompareReporter();
}
public class ApprovalTests.Reporters.ClipboardReporter : object {
    public static ClipboardReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static ClipboardReporter();
    public virtual void Report(string approved, string received);
}
public class ApprovalTests.Reporters.ContinuousIntegration.AppVeyorReporter : object {
    public static AppVeyorReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static AppVeyorReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ContinuousIntegration.BambooReporter : object {
    public static BambooReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static BambooReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public static class ApprovalTests.Reporters.ContinuousIntegration.ContinuousDeliveryUtils : object {
    public static void ReportOnServer(string approved, string received);
}
public class ApprovalTests.Reporters.ContinuousIntegration.GoContinuousDeliveryReporter : object {
    public static GoContinuousDeliveryReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static GoContinuousDeliveryReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ContinuousIntegration.JenkinsReporter : object {
    public static JenkinsReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static JenkinsReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ContinuousIntegration.MyGetReporter : object {
    public static MyGetReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static MyGetReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ContinuousIntegration.NCrunchReporter : object {
    public static string EnvironmentVariable;
    public static NCrunchReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static NCrunchReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ContinuousIntegration.TeamCityReporter : object {
    public static TeamCityReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TeamCityReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ContinuousIntegration.TfsReporter : object {
    public static TfsReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TfsReporter();
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    public virtual void Report(string approved, string received);
}
public class ApprovalTests.Reporters.ContinuousIntegration.TfsVnextReporter : object {
    public static TfsVnextReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TfsVnextReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.DefaultFrontLoaderReporter : FirstWorkingReporter {
    public static DefaultFrontLoaderReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static DefaultFrontLoaderReporter();
}
public class ApprovalTests.Reporters.DiffReporter : object {
    public static DiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static DiffReporter();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.DiffToolReporter : object {
    [EditorBrowsableAttribute("2")]
public DiffTool diffTool;
    public DiffToolReporter(DiffTool diffTool);
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.ExecutableQueryFailure : object {
    [EditorBrowsableAttribute("2")]
public static string FileNameSuffix;
    [EditorBrowsableAttribute("2")]
public static string Header;
    [EditorBrowsableAttribute("2")]
public IExecutableQuery query;
    [EditorBrowsableAttribute("2")]
public IApprovalFailureReporter reporter;
    public ExecutableQueryFailure(IExecutableQuery query, IApprovalFailureReporter reporter);
    public virtual void CleanUp(string approved, string received);
    public virtual void Report(string approved, string received);
    [EditorBrowsableAttribute("2")]
public static string RunQueryAndGetPath(string fileName, QueryResult result);
    [EditorBrowsableAttribute("2")]
public virtual QueryResult ExecuteQuery(string fileName);
}
public class ApprovalTests.Reporters.FileLauncherReporter : object {
    public static FileLauncherReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static FileLauncherReporter();
    public virtual void Report(string approved, string received);
}
public class ApprovalTests.Reporters.FirstWorkingReporter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IEnvironmentAwareReporter> <Reporters>k__BackingField;
    public IEnumerable`1<IEnvironmentAwareReporter> Reporters { get; }
    public FirstWorkingReporter(IEnvironmentAwareReporter[] reporters);
    public FirstWorkingReporter(IEnumerable`1<IEnvironmentAwareReporter> reporters);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IEnvironmentAwareReporter> get_Reporters();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    public virtual void CleanUp(string approved, string received);
}
[AttributeUsageAttribute("1")]
public class ApprovalTests.Reporters.FrontLoadedReporterAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnvironmentAwareReporter <Reporter>k__BackingField;
    public IEnvironmentAwareReporter Reporter { get; public set; }
    public FrontLoadedReporterAttribute(Type reporter);
    [CompilerGeneratedAttribute]
public virtual IEnvironmentAwareReporter get_Reporter();
    [CompilerGeneratedAttribute]
public virtual void set_Reporter(IEnvironmentAwareReporter value);
}
public class ApprovalTests.Reporters.FrontLoadedReporterDisposer : object {
    public static IEnvironmentAwareReporter Default;
    [EditorBrowsableAttribute("2")]
public IEnvironmentAwareReporter previous;
    public FrontLoadedReporterDisposer(IEnvironmentAwareReporter reporter);
    [EditorBrowsableAttribute("2")]
public static FrontLoadedReporterDisposer();
    public virtual void Dispose();
}
public class ApprovalTests.Reporters.IgnoreLineEndingsAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IgnoreLineEndings>k__BackingField;
    public bool IgnoreLineEndings { get; }
    public IgnoreLineEndingsAttribute(bool ignoreLineEndings);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreLineEndings();
}
public class ApprovalTests.Reporters.InlineTextReporter : object {
    public static InlineTextReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static InlineTextReporter();
    public virtual void Report(string approved, string received);
    public static string ConvertToCSharp(string text);
    [EditorBrowsableAttribute("2")]
public static string HandleEscapeChars(string text);
}
public class ApprovalTests.Reporters.IntroductionReporter : object {
    public static IntroductionReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static IntroductionReporter();
    public virtual void Report(string approved, string received);
    public virtual string GetFriendlyWelcomeMessage();
}
public class ApprovalTests.Reporters.InvalidReporterConfiguration : object {
    [EditorBrowsableAttribute("2")]
public Type reporter;
    public InvalidReporterConfiguration(Type reporter);
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    [EditorBrowsableAttribute("2")]
public virtual Exception BuildException();
}
public class ApprovalTests.Reporters.KaleidoscopeDiffReporter : DiffToolReporter {
    public static KaleidoscopeDiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static KaleidoscopeDiffReporter();
}
public class ApprovalTests.Reporters.KDiff3Reporter : DiffToolReporter {
    public static KDiff3Reporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static KDiff3Reporter();
}
public class ApprovalTests.Reporters.MachineSpecificReporter : object {
    public static MachineSpecificReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static MachineSpecificReporter();
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    public virtual void Report(string approved, string received);
}
public class ApprovalTests.Reporters.MeldReporter : DiffToolReporter {
    public static MeldReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static MeldReporter();
}
public class ApprovalTests.Reporters.MultiReporter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IApprovalFailureReporter> <Reporters>k__BackingField;
    public IEnumerable`1<IApprovalFailureReporter> Reporters { get; }
    public MultiReporter(IApprovalFailureReporter[] reporters);
    public MultiReporter(IEnumerable`1<IApprovalFailureReporter> reporters);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    public virtual void CleanUp(string approved, string received);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IApprovalFailureReporter> get_Reporters();
    public virtual void Report(string approved, string received);
}
public class ApprovalTests.Reporters.P4MergeReporter : DiffToolReporter {
    public static P4MergeReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static P4MergeReporter();
}
public class ApprovalTests.Reporters.PowerShellClipboardReporter : object {
    public static PowerShellClipboardReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static PowerShellClipboardReporter();
    public virtual void Report(string approved, string received);
    public static string GetCommandLineForApproval(string approved, string received);
}
public class ApprovalTests.Reporters.QueryResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    public string Query { get; public set; }
    public string Result { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Query();
    [CompilerGeneratedAttribute]
public virtual void set_Query(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Result();
    [CompilerGeneratedAttribute]
public virtual void set_Result(string value);
}
public class ApprovalTests.Reporters.QuietReporter : object {
    public static QuietReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static QuietReporter();
    public virtual void Report(string approved, string received);
    public static void DisplayCommandLineApproval(string approved, string received);
    public static string GetCommandLineForApproval(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public static class ApprovalTests.Reporters.ReporterEvents : object {
    public static List`1<Action`1<string>> CreateNewFileEventListeners;
    [EditorBrowsableAttribute("2")]
public static ReporterEvents();
    public static void CreatedApprovedFile(string approved);
}
public class ApprovalTests.Reporters.ReportWithoutFrontLoading : object {
    public static ReportWithoutFrontLoading INSTANCE;
    [EditorBrowsableAttribute("2")]
public static ReportWithoutFrontLoading();
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
}
public class ApprovalTests.Reporters.RiderReporter : DiffToolReporter {
    public static RiderReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static RiderReporter();
}
public class ApprovalTests.Reporters.TestFrameworks.AssertReporter : object {
    protected string areEqual;
    [EditorBrowsableAttribute("2")]
public string assertClass;
    [EditorBrowsableAttribute("2")]
public string frameworkAttribute;
    public AssertReporter(string assertClass, string areEqual, string frameworkAttribute);
    public virtual void Report(string approved, string received);
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    public virtual bool IsFrameworkUsed();
    public virtual void AssertFileContents(string approved, string received);
    public virtual void AssertEqual(string approvedContent, string receivedContent);
    [EditorBrowsableAttribute("2")]
public virtual void InvokeEqualsMethod(Type type, String[] parameters);
}
public class ApprovalTests.Reporters.TestFrameworks.FrameworkAssertReporter : FirstWorkingReporter {
    public static FrameworkAssertReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static FrameworkAssertReporter();
}
public class ApprovalTests.Reporters.TestFrameworks.MsTestReporter : AssertReporter {
    public static MsTestReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static MsTestReporter();
    [EditorBrowsableAttribute("2")]
public virtual void InvokeEqualsMethod(Type type, String[] parameters);
}
public class ApprovalTests.Reporters.TestFrameworks.NUnitReporter : AssertReporter {
    public static NUnitReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static NUnitReporter();
}
public class ApprovalTests.Reporters.TestFrameworks.XUnit2Reporter : AssertReporter {
    public static XUnit2Reporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static Lazy`1<bool> isXunit2;
    [EditorBrowsableAttribute("2")]
public static XUnit2Reporter();
    [EditorBrowsableAttribute("2")]
public static bool IsXunit2();
    public virtual bool IsWorkingInThisEnvironment(string forFile);
    [EditorBrowsableAttribute("2")]
public virtual void InvokeEqualsMethod(Type type, String[] parameters);
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public virtual bool <InvokeEqualsMethod>b__5_0(MethodInfo _);
}
public class ApprovalTests.Reporters.TkDiffReporter : DiffToolReporter {
    public static TkDiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TkDiffReporter();
}
public class ApprovalTests.Reporters.TortoiseDiffReporter : FirstWorkingReporter {
    public static TortoiseDiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TortoiseDiffReporter();
}
public class ApprovalTests.Reporters.TortoiseGitTextDiffReporter : DiffToolReporter {
    public static TortoiseGitTextDiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TortoiseGitTextDiffReporter();
}
public class ApprovalTests.Reporters.TortoiseImageDiffReporter : DiffToolReporter {
    public static TortoiseImageDiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TortoiseImageDiffReporter();
}
public class ApprovalTests.Reporters.TortoiseTextDiffReporter : DiffToolReporter {
    public static TortoiseTextDiffReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static TortoiseTextDiffReporter();
}
[AttributeUsageAttribute("32767")]
public class ApprovalTests.Reporters.UseReporterAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IApprovalFailureReporter <Reporter>k__BackingField;
    public IApprovalFailureReporter Reporter { get; public set; }
    public UseReporterAttribute(Type reporter);
    public UseReporterAttribute(Type[] reporters);
    [EditorBrowsableAttribute("2")]
public static IApprovalFailureReporter LoadReporter(Type reporter);
    public static IApprovalFailureReporter GetSingleton(Type reporter);
    public static IApprovalFailureReporter CreateInstance(Type reporter);
    [CompilerGeneratedAttribute]
public virtual IApprovalFailureReporter get_Reporter();
    [CompilerGeneratedAttribute]
public virtual void set_Reporter(IApprovalFailureReporter value);
}
public class ApprovalTests.Reporters.VisualStudioReporter : DiffToolReporter {
    public static VisualStudioReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static VisualStudioReporter();
}
public class ApprovalTests.Reporters.WinMergeReporter : DiffToolReporter {
    public static WinMergeReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public static WinMergeReporter();
}
public static class ApprovalTests.Scrubber.HtmlScrubbers : object {
    public static Func`2<string, string> ScrubAsp { get; }
    public static Func`2<string, string> ScrubMvc { get; }
    public static string ScrubBrowserLink(string input);
    public static string ScrubAspViewstate(string input);
    public static Func`2<string, string> get_ScrubAsp();
    public static Func`2<string, string> get_ScrubMvc();
}
[EditorBrowsableAttribute("2")]
public static class ApprovalTests.Scrubber.PdfScrubber : object {
    public static void ScrubPdf(string pdfFilePath);
    [EditorBrowsableAttribute("2")]
public static void WriteReplacements(FileStream fileStream, IEnumerable`1<Replacement> replacements);
    public static IEnumerable`1<Replacement> FindReplacements(FileStream fileStream);
    [EditorBrowsableAttribute("2")]
public static IEnumerable`1<Replacement> GetDateReplacements(string input, long positionOffset);
    [EditorBrowsableAttribute("2")]
public static IEnumerable`1<Replacement> GetIdReplacements(string input, long positionOffset);
    [EditorBrowsableAttribute("2")]
public static IEnumerable`1<Replacement> GetITextVersionReplacements(string input, long positionOffset);
    public static IEnumerable`1<Id> FindDates(string input);
    public static IEnumerable`1<Id> FindIds(string input);
    public static IEnumerable`1<Id> FindITextVersion(string input);
}
public static class ApprovalTests.Scrubber.ScrubberUtils : object {
    public static Func`2<string, string> NO_SCRUBBER;
    [EditorBrowsableAttribute("2")]
public static ScrubberUtils();
    public static Func`2<string, string> Combine(Func`2[] scrubbers);
    public static Func`2<string, string> RemoveLinesContaining(string value);
}
public static class ApprovalTests.Set.SetApprovals : object {
    [EditorBrowsableAttribute("2")]
public static IEnumerable`1<T> GetSorted(IEnumerable`1<T> enumerable);
    public static void VerifySet(IEnumerable`1<T> enumerable, Func`2<T, string> formatter);
    public static void VerifySet(IEnumerable`1<T> enumerable, string label);
    public static void VerifySet(IEnumerable`1<T> enumerable, string label, Func`2<T, string> formatter);
    public static void VerifySet(string header, IEnumerable`1<T> enumerable, string label);
    public static void VerifySet(string header, IEnumerable`1<T> enumerable, Func`2<T, string> formatter);
    public static void VerifyFileAsSet(string filename, Func`2<string, string> scrubber);
    public static void VerifyFileAsSet(string filename);
}
public class ApprovalTests.StackTraceParsers.MSpecStackTraceParser : AttributeStackTraceParser {
    public string TypeName { get; }
    public string ForTestingFramework { get; }
    public virtual bool Parse(StackTrace stackTrace);
    [EditorBrowsableAttribute("2")]
public virtual string GetAttributeType();
    public virtual string get_TypeName();
    [EditorBrowsableAttribute("2")]
public virtual string GetMethodName();
    public virtual string get_ForTestingFramework();
    [EditorBrowsableAttribute("2")]
public static Caller FindApprovalFrame(Caller caller);
}
public class ApprovalTests.StackTraceParsers.MsTestDataTestMethodStackTraceParser : AttributeStackTraceParser {
    public static string Attribute;
    public string ForTestingFramework { get; }
    public virtual string get_ForTestingFramework();
    [EditorBrowsableAttribute("2")]
public virtual string GetAttributeType();
}
public class ApprovalTests.StackTraceParsers.NUnitStackTraceParser : AttributeStackTraceParser {
    public static string Attribute;
    public string ForTestingFramework { get; }
    public virtual string get_ForTestingFramework();
    [EditorBrowsableAttribute("2")]
public virtual string GetAttributeType();
}
public class ApprovalTests.StackTraceParsers.VSStackTraceParser : AttributeStackTraceParser {
    public static string Attribute;
    public string ForTestingFramework { get; }
    public virtual string get_ForTestingFramework();
    [EditorBrowsableAttribute("2")]
public virtual string GetAttributeType();
}
public class ApprovalTests.StackTraceParsers.XUnitStackTraceParser : AttributeStackTraceParser {
    public static string Attribute;
    public string ForTestingFramework { get; }
    public virtual string get_ForTestingFramework();
    [EditorBrowsableAttribute("2")]
public virtual string GetAttributeType();
}
[ObsoleteAttribute("https://github.com/dotnet/designs/blob/main/accepted/2020/better-obsoletion/binaryformatter-obsoletion.md")]
public static class ApprovalTests.TheoryTests.SerializableTheory : object {
    public static void Verify(object original, Action`2<object, object> assertEqual);
}
public static class ApprovalTests.TheoryTests.ThreadSafetyTheory : object {
    public static void VerifyNoRaceConditions(int times, Func`1<T> caseGenerator, Func`2<T, string> caseString, Func`2<T, object> possibleRaceConditionFunction, Func`2<T, object> knownGoodFunction);
    public static void CompareArrays(T[] n1, string label1, T[] n2, string label2);
    [EditorBrowsableAttribute("2")]
public static string ToText(T[] n2, string label2);
}
[ExtensionAttribute]
public static class ApprovalTests.Utilities.ParentProcessUtils : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ParentProcessName>k__BackingField;
    public static string ProcessName { get; }
    public static string ParentProcessName { get; }
    [EditorBrowsableAttribute("2")]
public static ParentProcessUtils();
    [CompilerGeneratedAttribute]
public static string get_ProcessName();
    [CompilerGeneratedAttribute]
public static string get_ParentProcessName();
    public static Process GetParentProcess(Process currentProcess);
    public static IEnumerable`1<Process> CurrentProcessWithAncestors();
    [IteratorStateMachineAttribute("ApprovalTests.Utilities.ParentProcessUtils/<GetSelfAndAncestors>d__9")]
public static IEnumerable`1<Process> GetSelfAndAncestors(Process self);
    [ExtensionAttribute]
[EditorBrowsableAttribute("2")]
public static Process ParentProcess(Process process);
    [EditorBrowsableAttribute("2")]
public static IntPtr CreateToolhelp32Snapshot(UInt32 dwFlags, UInt32 th32ProcessId);
    [EditorBrowsableAttribute("2")]
public static bool Process32First(IntPtr hSnapshot, PROCESSENTRY32& lppe);
    [EditorBrowsableAttribute("2")]
public static bool Process32Next(IntPtr hSnapshot, PROCESSENTRY32& lppe);
}
[ExtensionAttribute]
public static class ApprovalTests.Utilities.StackTraceScrubber : object {
    [EditorBrowsableAttribute("2")]
public static Regex windowsPathRegex;
    [EditorBrowsableAttribute("2")]
public static Regex unixPathRegex;
    [EditorBrowsableAttribute("2")]
public static StackTraceScrubber();
    public static string ScrubAnonymousIds(string source);
    public static string ScrubLineNumbers(string source);
    public static string ScrubPaths(string source);
    [ExtensionAttribute]
public static string ScrubStackTrace(string text);
    [ExtensionAttribute]
public static string Scrub(Exception exception);
}
[ExtensionAttribute]
public static class ApprovalTests.Utilities.StringReporting : object {
    public static string TempApprovalFile { get; }
    [ExtensionAttribute]
public static void DiffWith(string expected, string actual);
    public static void AssertEqual(string expected, string actual, IApprovalFailureReporter reporter);
    public static string get_TempApprovalFile();
}
public class ApprovalTests.Utilities.TestCounter : object {
    public static string passFile;
    public static string failFile;
    public static void IncrementSuccess();
    public static void IncrementFailure();
    public static void Increment(string file);
    public static void Reset();
    public static void ResetAndLaunch(string counterDisplayJar);
    public static void ResetAndLaunch(string javaPath, string counterDisplayJar);
    public static void Launch(string java, string jar);
    [EditorBrowsableAttribute("2")]
public static void LaunchProgram(string program, string arguments);
    public static void Track(Action test);
}
public abstract class ApprovalTests.WebApi.MicrosoftHttpClient.RestQuery`1 : object {
    public abstract virtual string GetQuery();
    public abstract virtual string GetBaseAddress();
    public virtual string ExecuteQuery(string query);
    public virtual Task`1<DownloadStringCompletedEventArgs> ExecuteAsync(string requestUri);
    public virtual Task`1<DownloadStringCompletedEventArgs> GetResponse();
    public abstract virtual T Load();
}
public static class ApprovalTests.WindowsRegistry.WindowsRegistryAssert : object {
    public static void HasDword(string keyName, string valueName, int expectedValue, string failureMessage);
    [EditorBrowsableAttribute("2")]
public static void HasDword(RegistryKey registryKey, string keyName, string valueName, int expectedValue, string failureMessage);
    [EditorBrowsableAttribute("2")]
public static int ReadIntKeyValue(RegistryKey registryKey, string keyName, string valueName);
}
public class ApprovalTests.Writers.ApprovalBinaryWriter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExtensionWithDot>k__BackingField;
    public Byte[] Data { get; public set; }
    public string ExtensionWithDot { get; public set; }
    public ApprovalBinaryWriter(Byte[] data);
    public ApprovalBinaryWriter(Stream content, string extensionWithoutDot);
    public ApprovalBinaryWriter(Byte[] data, string extensionWithoutDot);
    [EditorBrowsableAttribute("2")]
public static string EnsureDoc(string extension);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Data();
    [CompilerGeneratedAttribute]
public virtual void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public virtual string get_ExtensionWithDot();
    [CompilerGeneratedAttribute]
public virtual void set_ExtensionWithDot(string value);
    public virtual string GetApprovalFilename(string basename);
    public virtual string GetReceivedFilename(string basename);
    public virtual string WriteReceivedFile(string received);
}
public class ApprovalTests.Writers.ConfigurableTempTextFileWriter : ApprovalTextWriter {
    [EditorBrowsableAttribute("2")]
public string receivedFilePath;
    [EditorBrowsableAttribute("2")]
public string approvedFilePath;
    public ConfigurableTempTextFileWriter(string approvedFilePath, string data);
    public virtual string GetApprovalFilename(string basename);
    public virtual string GetReceivedFilename(string basename);
}
public class ApprovalTests.Writers.ExistingFileWriter : object {
    [EditorBrowsableAttribute("2")]
public string file;
    public ExistingFileWriter(string file);
    public virtual string GetApprovalFilename(string basename);
    public virtual string GetReceivedFilename(string basename);
    public virtual string WriteReceivedFile(string received);
}
public static class ApprovalTests.Writers.WriterFactory : object {
    [EditorBrowsableAttribute("2")]
public static Func`2<string, IApprovalWriter> TextWriterCreator;
    [EditorBrowsableAttribute("2")]
public static Func`3<string, string, IApprovalWriter> TextWriterWithExtensionCreator;
    [EditorBrowsableAttribute("2")]
public static WriterFactory();
    public static void SetTextWriterCreator(Func`2<string, IApprovalWriter> textWriterCreator);
    public static IApprovalWriter CreateTextWriter(string data);
    public static void SetTextWriterCreator(Func`3<string, string, IApprovalWriter> textWriterWithExtensionCreator);
    public static IApprovalWriter CreateTextWriter(string data, string extensionWithoutDot);
}
public static class ApprovalTests.Writers.WriterUtils : object {
    public static string Approved;
    public static string Received;
}
public static class ApprovalTests.Xml.XmlApprovals : object {
    public static void VerifyXml(string xml, Func`2<string, string> scrubber);
    public static void VerifyText(string text, string fileExtensionWithoutDot, bool safely, Func`2<string, string> scrubber);
    public static void VerifyOrderedXml(string text, Func`2<string, string> scrubber);
}
public class FileLauncherWithDelayReporter : object {
    public static FileLauncherWithDelayReporter INSTANCE;
    [EditorBrowsableAttribute("2")]
public int seconds;
    public FileLauncherWithDelayReporter(int seconds);
    [EditorBrowsableAttribute("2")]
public static FileLauncherWithDelayReporter();
    public virtual void Report(string approved, string received);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
public static class PolyfillExtensions : object {
    [NullableAttribute("1")]
[EditorBrowsableAttribute("2")]
public static ConcurrentDictionary`2<ParameterInfo, NullabilityInfo> parameterCache;
    [NullableAttribute("1")]
[EditorBrowsableAttribute("2")]
public static ConcurrentDictionary`2<PropertyInfo, NullabilityInfo> propertyCache;
    [NullableAttribute("1")]
[EditorBrowsableAttribute("2")]
public static ConcurrentDictionary`2<EventInfo, NullabilityInfo> eventCache;
    [NullableAttribute("1")]
[EditorBrowsableAttribute("2")]
public static ConcurrentDictionary`2<FieldInfo, NullabilityInfo> fieldCache;
    [EditorBrowsableAttribute("2")]
public static long TicksPerMicrosecond;
    [EditorBrowsableAttribute("2")]
public static UInt32 MaxSupportedTimeout;
    [EditorBrowsableAttribute("2")]
public static PolyfillExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(MemberInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(MemberInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(MemberInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(FieldInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(FieldInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(FieldInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(EventInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(EventInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(EventInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(PropertyInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(PropertyInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(PropertyInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(ParameterInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(ParameterInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(ParameterInfo info);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public static NullabilityState GetReadOrWriteState(NullabilityInfo nullability);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public static NullabilityState GetKnownState(string name, NullabilityInfo nullability);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public static bool IsNullable(string name, NullabilityInfo nullability);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken.unsaferegister#system-threading-cancellationtoken-unsaferegister(system-action((system-object))-system-object)")]
public static CancellationTokenRegistration UnsafeRegister(CancellationToken target, Action`1<object> callback, object state);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken.register#system-threading-cancellationtoken-register(system-action((system-object-system-threading-cancellationtoken))-system-object)")]
public static CancellationTokenRegistration Register(CancellationToken target, Action`2<object, CancellationToken> callback, object state);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken.unsaferegister#system-threading-cancellationtoken-unsaferegister(system-action((system-object-system-threading-cancellationtoken))-system-object)")]
public static CancellationTokenRegistration UnsafeRegister(CancellationToken target, Action`2<object, CancellationToken> callback, object state);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync")]
public static Task CancelAsync(CancellationTokenSource target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.remove")]
public static bool Remove(Dictionary`2<TKey, TValue> target, TKey key, TValue& value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except?view=net-8.0#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except?view=net-8.0#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource[] items);
    [IteratorStateMachineAttribute("PolyfillExtensions/<Except>d__29`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, IEqualityComparer`1<TSource> comparer, TSource[] items);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.chunk")]
public static IEnumerable`1<TSource[]> Chunk(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby#system-linq-enumerable-maxby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static TSource MaxBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby?view=net-8.0#system-linq-enumerable-maxby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-icomparer((-1)))")]
public static TSource MaxBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby#system-linq-enumerable-minby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static TSource MinBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby?view=net-8.0#system-linq-enumerable-minby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-icomparer((-1)))")]
public static TSource MinBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("PolyfillExtensions/<Append>d__36`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.append")]
public static IEnumerable`1<TSource> Append(IEnumerable`1<TSource> target, TSource element);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.skiplast")]
public static IEnumerable`1<TSource> SkipLast(IEnumerable`1<TSource> target, int count);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.getvalueordefault")]
public static TValue GetValueOrDefault(IReadOnlyDictionary`2<TKey, TValue> target, TKey key);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.getvalueordefault#system-collections-generic-collectionextensions-getvalueordefault-2(system-collections-generic-ireadonlydictionary((-0-1))-0-1)")]
public static TValue GetValueOrDefault(IReadOnlyDictionary`2<TKey, TValue> target, TKey key, TValue defaultValue);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.keyvaluepair-2.deconstruct")]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> target, TKey& key, TValue& value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.contains#system-memoryextensions-contains-1(system-readonlyspan((-0))-0)")]
public static bool Contains(ReadOnlySpan`1<T> target, T value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.contains#system-memoryextensions-contains-1(system-span((-0))-0)")]
public static bool Contains(Span`1<T> target, T value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.sequenceequal#system-memoryextensions-sequenceequal-1(system-readonlyspan((-0))-system-readonlyspan((-0)))")]
public static bool SequenceEqual(ReadOnlySpan`1<char> target, string other);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.sequenceequal#system-memoryextensions-sequenceequal-1(system-span((-0))-system-readonlyspan((-0)))")]
public static bool SequenceEqual(Span`1<char> target, string other);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.startswith#system-memoryextensions-startswith-1(system-readonlyspan((-0))-system-readonlyspan((-0)))")]
public static bool StartsWith(ReadOnlySpan`1<char> target, string other, StringComparison comparison);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.startswith#system-memoryextensions-startswith-1(system-span((-0))-system-readonlyspan((-0)))")]
public static bool StartsWith(Span`1<char> target, string other);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.endswith#system-memoryextensions-endswith-1(system-readonlyspan((-0))-system-readonlyspan((-0)))")]
public static bool EndsWith(ReadOnlySpan`1<char> target, string other, StringComparison comparison);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.endswith#system-memoryextensions-endswith-1(system-span((-0))-system-readonlyspan((-0)))")]
public static bool EndsWith(Span`1<char> target, string other);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microseconds")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [ExtensionAttribute]
[EditorBrowsableAttribute("2")]
public static long TicksComponent(TimeSpan target);
    [ExtensionAttribute]
[EditorBrowsableAttribute("2")]
public static long TicksComponent(DateTime target);
    [ExtensionAttribute]
[EditorBrowsableAttribute("2")]
public static long TicksComponent(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.addmicroseconds")]
public static DateTime AddMicroseconds(DateTime target, double microseconds);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.addmicroseconds")]
public static DateTimeOffset AddMicroseconds(DateTimeOffset target, double microseconds);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitForExitAsync>d__61")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.waitforexitasync")]
public static Task WaitForExitAsync(Process target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.stream.readasync#system-io-stream-readasync(system-memory((system-byte))-system-threading-cancellationtoken)")]
public static ValueTask`1<int> ReadAsync(Stream target, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.stream.writeasync#system-io-stream-writeasync(system-readonlymemory((system-byte))-system-threading-cancellationtoken)")]
public static ValueTask WriteAsync(Stream target, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.stream.copytoasync#system-io-stream-copytoasync(system-io-stream-system-threading-cancellationtoken)")]
public static Task CopyToAsync(Stream target, Stream destination, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.copyto")]
public static void CopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.trycopyto")]
public static bool TryCopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.gethashcode#system-string-gethashcode(system-stringcomparison)")]
public static int GetHashCode(string target, StringComparison comparisonType);
    [EditorBrowsableAttribute("2")]
public static StringComparer FromComparison(StringComparison comparison);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.contains#system-string-contains(system-string-system-stringcomparison)")]
public static bool Contains(string target, string value, StringComparison comparisonType);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.contains#system-string-contains(system-char)")]
public static bool StartsWith(string target, char value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.contains#system-string-contains(system-char)")]
public static bool EndsWith(string target, char value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.split#system-string-split(system-char-system-stringsplitoptions)")]
public static String[] Split(string target, char separator, StringSplitOptions options);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.split#system-string-split(system-char-system-int32-system-stringsplitoptions)")]
public static String[] Split(string target, char separator, int count, StringSplitOptions options);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.contains#system-string-contains(system-char)")]
public static bool Contains(string target, char value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.copyto#system-text-stringbuilder-copyto(system-int32-system-span((system-char))-system-int32)")]
public static void CopyTo(StringBuilder target, int sourceIndex, Span`1<char> destination, int count);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-readonlyspan((system-char)))")]
public static StringBuilder Append(StringBuilder target, ReadOnlySpan`1<char> value);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.equals#system-text-stringbuilder-equals(system-readonlyspan((system-char)))")]
public static bool Equals(StringBuilder target, ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-threading-cancellationtoken)")]
public static Task WaitAsync(Task target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-timespan)")]
public static Task WaitAsync(Task target, TimeSpan timeout);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-timespan-system-threading-cancellationtoken)")]
public static Task WaitAsync(Task target, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1.waitasync#system-threading-tasks-task-1-waitasync(system-timespan)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> target, TimeSpan timeout);
    [AsyncStateMachineAttribute("PolyfillExtensions/<WaitAsync>d__84`1")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1.waitasync#system-threading-tasks-task-1-waitasync(system-timespan-system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> target, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readasync#system-io-textreader-readasync(system-memory((system-char))-system-threading-cancellationtoken)")]
public static ValueTask`1<int> ReadAsync(TextReader target, Memory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readtoendasync#system-io-textreader-readtoendasync(system-threading-cancellationtoken)")]
public static Task`1<string> ReadToEndAsync(TextReader target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readtoendasync#system-io-textreader-readlineasync(system-threading-cancellationtoken)")]
public static Task`1<string> ReadLineAsync(TextReader target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writeasync#system-io-textwriter-writeasync(system-readonlymemory((system-char))-system-threading-cancellationtoken)")]
public static ValueTask WriteAsync(TextWriter target, ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writelineasync#system-io-textwriter-writelineasync(system-readonlymemory((system-char))-system-threading-cancellationtoken)")]
public static ValueTask WriteLineAsync(TextWriter target, ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.write#system-io-textwriter-write(system-readonlyspan((system-char)))")]
public static void Write(TextWriter target, ReadOnlySpan`1<char> buffer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writeline#system-io-textwriter-writeline(system-readonlyspan((system-char)))")]
public static void WriteLine(TextWriter target, ReadOnlySpan`1<char> buffer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryformat")]
public static bool TryFormat(sbyte target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryformat")]
public static bool TryFormat(byte target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryformat")]
public static bool TryFormat(short target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryformat")]
public static bool TryFormat(ushort target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryformat")]
public static bool TryFormat(int target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryformat")]
public static bool TryFormat(UInt32 target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryformat")]
public static bool TryFormat(long target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryformat")]
public static bool TryFormat(ulong target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.single.tryformat")]
public static bool TryFormat(float target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryformat")]
public static bool TryFormat(double target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.decimal.tryformat")]
public static bool TryFormat(decimal target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.boolean.tryformat")]
public static bool TryFormat(bool target, Span`1<char> destination, Int32& charsWritten);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryformat")]
public static bool TryFormat(DateTimeOffset target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryformat")]
public static bool TryFormat(DateTime target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [EditorBrowsableAttribute("2")]
public static bool CopyToSpan(Span`1<char> destination, Int32& charsWritten, string result);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.hassamemetadatadefinitionas")]
public static bool HasSameMetadataDefinitionAs(MemberInfo target, MemberInfo other);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.getmemberwithsamemetadatadefinitionas")]
[EditorBrowsableAttribute("2")]
public static MemberInfo GetMemberWithSameMetadataDefinitionAs(Type type, MemberInfo member);
    [IteratorStateMachineAttribute("PolyfillExtensions/<<Chunk>g__ChunkIterator|31_0>d`2")]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public static IEnumerable`1<TSource[]> <Chunk>g__ChunkIterator|31_0(IEnumerable`1<TSource> source, int size);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2432")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2432")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("64")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("27072")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
[EditorBrowsableAttribute("2")]
public enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("352")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.experimentalattribute?view=net-8.0")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("10624")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("192")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("192")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("10624")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("10368")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("100")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("100")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2432")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32767")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2240")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("108")]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("2")]
public class System.Diagnostics.UnreachableException : Exception {
    public UnreachableException(string message);
    public UnreachableException(string message, Exception innerException);
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("2")]
public class System.Index : ValueType {
    [EditorBrowsableAttribute("2")]
public int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    [EditorBrowsableAttribute("2")]
public Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    public virtual string ToString();
    [EditorBrowsableAttribute("2")]
public string ToStringFromEnd();
}
[EditorBrowsableAttribute("1")]
public static class System.Net.Http.ResolveHttpGlobalProblem : object {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("2")]
public class System.Range : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Index <End>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
public Type EqualityContract { get; }
    public Index Start { get; public set; }
    public Index End { get; public set; }
    public static Range All { get; }
    public Range(Index Start, Index End);
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public Range(Range original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual Index get_Start();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Start(Index value);
    [CompilerGeneratedAttribute]
public virtual Index get_End();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_End(Index value);
    public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public virtual ValueTuple`2<int, int> GetOffsetAndLength(int length);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Range left, Range right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Range left, Range right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(Range other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Range <Clone>$();
    [CompilerGeneratedAttribute]
public virtual void Deconstruct(Index& Start, Index& End);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[EditorBrowsableAttribute("2")]
public class System.Reflection.NullabilityInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NullabilityState <ReadState>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NullabilityState <WriteState>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NullabilityInfo <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NullabilityInfo[] <GenericTypeArguments>k__BackingField;
    public Type Type { get; }
    public NullabilityState ReadState { get; public set; }
    public NullabilityState WriteState { get; public set; }
    [NullableAttribute("2")]
public NullabilityInfo ElementType { get; }
    public NullabilityInfo[] GenericTypeArguments { get; }
    [EditorBrowsableAttribute("2")]
public NullabilityInfo(Type type, NullabilityState readState, NullabilityState writeState, NullabilityInfo elementType, NullabilityInfo[] typeArguments);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public NullabilityState get_ReadState();
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public void set_ReadState(NullabilityState value);
    [CompilerGeneratedAttribute]
public NullabilityState get_WriteState();
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public void set_WriteState(NullabilityState value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NullabilityInfo get_ElementType();
    [CompilerGeneratedAttribute]
public NullabilityInfo[] get_GenericTypeArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[EditorBrowsableAttribute("2")]
public class System.Reflection.NullabilityInfoContext : object {
    [EditorBrowsableAttribute("2")]
public static string CompilerServicesNameSpace;
    [EditorBrowsableAttribute("2")]
public Dictionary`2<Module, NotAnnotatedStatus> _publicOnlyModules;
    [EditorBrowsableAttribute("2")]
public Dictionary`2<MemberInfo, NullabilityState> _context;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <IsSupported>k__BackingField;
    public static bool IsSupported { get; }
    [EditorBrowsableAttribute("2")]
public static NullabilityInfoContext();
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public static bool get_IsSupported();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("2")]
public Nullable`1<NullabilityState> GetNullableContext(MemberInfo memberInfo);
    public NullabilityInfo Create(ParameterInfo parameterInfo);
    [EditorBrowsableAttribute("2")]
public void CheckParameterMetadataType(ParameterInfo parameter, NullabilityInfo nullability);
    [EditorBrowsableAttribute("2")]
public static ParameterInfo GetMetaParameter(MethodBase metaMethod, ParameterInfo parameter);
    [EditorBrowsableAttribute("2")]
public static MethodInfo GetMethodMetadataDefinition(MethodInfo method);
    [EditorBrowsableAttribute("2")]
public static void CheckNullabilityAttributes(NullabilityInfo nullability, IList`1<CustomAttributeData> attributes);
    public NullabilityInfo Create(PropertyInfo propertyInfo);
    [EditorBrowsableAttribute("2")]
public bool IsPrivateOrInternalMethodAndAnnotationDisabled(MethodBase method);
    public NullabilityInfo Create(EventInfo eventInfo);
    public NullabilityInfo Create(FieldInfo fieldInfo);
    [EditorBrowsableAttribute("2")]
public static void EnsureIsSupported();
    [EditorBrowsableAttribute("2")]
public bool IsPrivateOrInternalFieldAndAnnotationDisabled(FieldInfo fieldInfo);
    [EditorBrowsableAttribute("2")]
public bool IsPublicOnly(bool isPrivate, bool isFamilyAndAssembly, bool isAssembly, Module module);
    [EditorBrowsableAttribute("2")]
public static NotAnnotatedStatus PopulateAnnotationInfo(IList`1<CustomAttributeData> customAttributes);
    [EditorBrowsableAttribute("2")]
public NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser);
    [EditorBrowsableAttribute("2")]
public NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser, Int32& index);
    [EditorBrowsableAttribute("2")]
public static NullableAttributeStateParser CreateParser(IList`1<CustomAttributeData> customAttributes);
    [EditorBrowsableAttribute("2")]
public void TryLoadGenericMetaTypeNullability(MemberInfo memberInfo, NullabilityInfo nullability);
    [EditorBrowsableAttribute("2")]
public static MemberInfo GetMemberMetadataDefinition(MemberInfo member);
    [EditorBrowsableAttribute("2")]
public static Type GetPropertyMetaType(PropertyInfo property);
    [EditorBrowsableAttribute("2")]
public void CheckGenericParameters(NullabilityInfo nullability, MemberInfo metaMember, Type metaType, Type reflectedType);
    [EditorBrowsableAttribute("2")]
public bool TryUpdateGenericParameterNullability(NullabilityInfo nullability, Type genericParameter, Type reflectedType);
    [EditorBrowsableAttribute("2")]
public bool TryUpdateGenericTypeParameterNullabilityFromReflectedType(NullabilityInfo nullability, Type genericParameter, Type context, Type reflectedType);
    [EditorBrowsableAttribute("2")]
public static bool TryPopulateNullabilityInfo(NullabilityInfo nullability, NullableAttributeStateParser parser, Int32& index);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("2")]
public static NullabilityState TranslateByte(object value);
    [EditorBrowsableAttribute("2")]
public static NullabilityState TranslateByte(byte b);
    [EditorBrowsableAttribute("2")]
public static bool IsValueTypeOrValueTypeByRef(Type type);
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public static int <TryUpdateGenericTypeParameterNullabilityFromReflectedType>g__CountNullabilityStates|29_0(Type type);
}
[EditorBrowsableAttribute("2")]
public enum System.Reflection.NullabilityState : Enum {
    public int value__;
    public static NullabilityState Unknown;
    public static NullabilityState NotNull;
    public static NullabilityState Nullable;
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32767")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.compilerfeaturerequiredattribute")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.disableruntimemarshallingattribute")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.interpolatedstringhandlerargumentattribute")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.interpolatedstringhandlerargumentattribute")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("12")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("2")]
public static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.moduleinitializerattribute?view=net-7.0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("64")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("396")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1774")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("64")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("64")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2047")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : OSPlatformAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("2")]
public abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    [EditorBrowsableAttribute("2")]
public OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public virtual string get_PlatformName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2047")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("448")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public SupportedOSPlatformGuardAttribute(string platformName);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2047")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public string Message { get; }
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("448")]
[EditorBrowsableAttribute("2")]
public class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformGuardAttribute(string platformName);
}
