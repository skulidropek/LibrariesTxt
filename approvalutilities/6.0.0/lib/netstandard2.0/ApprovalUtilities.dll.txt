internal class ApprovalUtilities_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Publicize;
    internal static string Virtuosity;
}
public class ApprovalUtilities.CallStack.Caller : object {
    [EditorBrowsableAttribute("2")]
public int currentFrame;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StackTrace <StackTrace>k__BackingField;
    public IEnumerable`1<Caller> Callers { get; }
    public Type Class { get; }
    public MethodBase Method { get; }
    public IEnumerable`1<MethodBase> Methods { get; }
    public IEnumerable`1<Caller> NonLambdaCallers { get; }
    public IEnumerable`1<Caller> Parents { get; }
    public StackFrame StackFrame { get; }
    public StackTrace StackTrace { get; }
    public Caller(StackTrace stackTrace, int currentFrame);
    [IteratorStateMachineAttribute("ApprovalUtilities.CallStack.Caller/<get_Callers>d__4")]
public virtual IEnumerable`1<Caller> get_Callers();
    public virtual Type get_Class();
    public virtual MethodBase get_Method();
    [IteratorStateMachineAttribute("ApprovalUtilities.CallStack.Caller/<get_Methods>d__10")]
public virtual IEnumerable`1<MethodBase> get_Methods();
    public virtual IEnumerable`1<Caller> get_NonLambdaCallers();
    [IteratorStateMachineAttribute("ApprovalUtilities.CallStack.Caller/<get_Parents>d__14")]
public virtual IEnumerable`1<Caller> get_Parents();
    public virtual StackFrame get_StackFrame();
    [CompilerGeneratedAttribute]
public virtual StackTrace get_StackTrace();
    public virtual A GetFirstFrameForAttribute();
    public virtual object GetFirstFrameForAttribute(Type attribute);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class ApprovalUtilities.CallStack.ReflectionUtilities : object {
    [ExtensionAttribute]
public static IEnumerable`1<Caller> NonLambda(IEnumerable`1<Caller> callers);
    [ExtensionAttribute]
public static string ToStandardString(MethodBase method);
}
public static class ApprovalUtilities.Persistence.Database.DatabaseUtils : object {
    public static List`1<T> Query(string sql, string connection, Func`2<DbDataReader, T> converter);
    public static List`1<T> Query(string sql, Func`1<DbCommand> commandCreator, Func`2<DbDataReader, T> converter);
}
public interface ApprovalUtilities.Persistence.Database.IDatabaseToExecutableQueryAdapter {
    public abstract virtual string GetQuery();
    public abstract virtual DbConnection GetConnection();
}
public abstract class ApprovalUtilities.Persistence.Database.SqlLoader`1 : object {
    public Func`1<DbCommand> CommandCreator;
    public string ConnectionString;
    [EditorBrowsableAttribute("2")]
public SqlLoader`1(string connectionString);
    [EditorBrowsableAttribute("2")]
public SqlLoader`1(Func`1<DbCommand> commandCreator);
    public abstract virtual T Load();
    public abstract virtual string GetQuery();
    public virtual string ExecuteQuery(string query);
}
public class ApprovalUtilities.Persistence.Database.SqlLoaderUtils : object {
    public static string ExecuteQueryToDisplayString(string query, DbConnection conn);
    public static string ExecuteQueryToDisplayString(string query, string connectionString, Func`1<DbCommand> commandCreator);
    public static string ConvertRowToString(DbDataReader row, StringBuilder headers);
}
public interface ApprovalUtilities.Persistence.IExecutableLoader`1 {
}
public interface ApprovalUtilities.Persistence.IExecutableQuery {
    public abstract virtual string GetQuery();
    public abstract virtual string ExecuteQuery(string query);
}
public interface ApprovalUtilities.Persistence.ILoader`1 {
    public abstract virtual T Load();
}
public interface ApprovalUtilities.Persistence.ISaver`1 {
    public abstract virtual T Save(T objectToBeSaved);
}
public interface ApprovalUtilities.Persistence.ISaverAsync`1 {
    public abstract virtual Task`1<T> Save(T objectToBeSaved);
}
public class ApprovalUtilities.Persistence.LambdaLoader`1 : object {
    [EditorBrowsableAttribute("2")]
public Func`1<T> func;
    public LambdaLoader`1(Func`1<T> func);
    public virtual T Load();
}
public class ApprovalUtilities.Persistence.Loader`1 : object {
    [EditorBrowsableAttribute("2")]
public Func`1<T> load;
    public Loader`1(T item);
    public Loader`1(Func`1<T> load);
    public virtual T Load();
}
public class ApprovalUtilities.Persistence.MockLoader`1 : object {
    [EditorBrowsableAttribute("2")]
public T t;
    public MockLoader`1(T t);
    public virtual T Load();
}
public class ApprovalUtilities.Persistence.MockSaver`1 : object {
    [EditorBrowsableAttribute("2")]
public List`1<T> all;
    public T[] Saved { get; }
    public T LastSaved { get; }
    public virtual T[] get_Saved();
    public virtual T get_LastSaved();
    public virtual T Save(T objectToBeSaved);
}
public class ApprovalUtilities.Persistence.SaverAsyncWrapper`1 : object {
    [EditorBrowsableAttribute("2")]
public ISaver`1<T> saver;
    public SaverAsyncWrapper`1(ISaver`1<T> saver);
    public virtual Task`1<T> Save(T objectToBeSaved);
}
public class ApprovalUtilities.Persistence.SaverSynchronousWrapper`1 : object {
    [EditorBrowsableAttribute("2")]
public ISaverAsync`1<T> saver;
    public SaverSynchronousWrapper`1(ISaverAsync`1<T> saver);
    public virtual T Save(T objectToBeSaved);
}
[ExtensionAttribute]
public static class ApprovalUtilities.Persistence.SaverUtils : object {
    [ExtensionAttribute]
public static ISaverAsync`1<T> ToAsync(ISaver`1<T> saver);
    [ExtensionAttribute]
public static ISaver`1<T> ToSynchronous(ISaverAsync`1<T> saver);
}
public class ApprovalUtilities.Reflection.CallbackDescriptor : object {
    [EditorBrowsableAttribute("2")]
public List`1<MethodInfo> Methods;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EventName>k__BackingField;
    public string EventName { get; public set; }
    public CallbackDescriptor(string name);
    public virtual void AddMethods(IEnumerable`1<MethodInfo> methods);
    [CompilerGeneratedAttribute]
public virtual string get_EventName();
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public virtual void set_EventName(string value);
    public virtual void AddMethod(MethodInfo method);
    public virtual List`1<MethodInfo> GetMethods();
    public virtual string ToString();
}
public class ApprovalUtilities.Reflection.HandlerListEntry : object {
    [EditorBrowsableAttribute("2")]
public static string HandlerFieldName;
    [EditorBrowsableAttribute("2")]
public static string KeyFieldName;
    [EditorBrowsableAttribute("2")]
public static string NextFieldName;
    [EditorBrowsableAttribute("2")]
public object listEntry;
    [EditorBrowsableAttribute("2")]
public static Type listEntryType;
    [EditorBrowsableAttribute("2")]
public Delegate handler;
    [EditorBrowsableAttribute("2")]
public object key;
    [EditorBrowsableAttribute("2")]
public HandlerListEntry next;
    public Delegate Handler { get; }
    public object Key { get; }
    public HandlerListEntry Next { get; }
    public static Type ListEntryType { get; }
    public HandlerListEntry(object listEntry);
    public virtual Delegate get_Handler();
    public virtual object get_Key();
    public virtual HandlerListEntry get_Next();
    [EditorBrowsableAttribute("2")]
public static Type get_ListEntryType();
    public virtual string ToString();
    [EditorBrowsableAttribute("2")]
public virtual T GetField(string name);
}
[ExtensionAttribute]
public static class ApprovalUtilities.Reflection.HandlerListHelper : object {
    [EditorBrowsableAttribute("2")]
public static string HeadFieldName;
    [IteratorStateMachineAttribute("ApprovalUtilities.Reflection.HandlerListHelper/<AsEnumerable>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<HandlerListEntry> AsEnumerable(EventHandlerList list);
    [ExtensionAttribute]
public static HandlerListEntry GetHead(EventHandlerList list);
}
[ExtensionAttribute]
public static class ApprovalUtilities.Reflection.ReflectionUtilities : object {
    [EditorBrowsableAttribute("2")]
public static BindingFlags NonPublicInstance;
    public static MethodBase GetRealMethod(MethodBase method);
    [ExtensionAttribute]
public static IEnumerable`1<CallbackDescriptor> GetEventHandlerListEvents(object value);
    public static FieldInfo GetFieldForChild(object parent, object child);
    public static IEnumerable`1<CallbackDescriptor> GetPocoEventsForTypes(object value, Type[] types);
    [ExtensionAttribute]
public static IEnumerable`1<CallbackDescriptor> GetPocoEvents(object value);
    [ExtensionAttribute]
public static T GetValue(FieldInfo info, object value);
    [ExtensionAttribute]
public static T GetValue(PropertyInfo info, object value, Object[] index);
    [ExtensionAttribute]
public static IEnumerable`1<FieldInfo> GetInstanceFields(object value, Func`2<FieldInfo, bool> selector);
    [ExtensionAttribute]
public static IEnumerable`1<FieldInfo> GetInstanceFields(object value);
    public static IEnumerable`1<FieldInfo> GetAllFields(Type forType);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> NonPublicInstanceProperties(object value, Func`2<PropertyInfo, bool> selector);
    [EditorBrowsableAttribute("2")]
public static Type GetType(object value);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> NonPublicInstanceProperties(object value);
    [IteratorStateMachineAttribute("ApprovalUtilities.Reflection.ReflectionUtilities/<NonPublicStaticFields>d__14")]
[ExtensionAttribute]
public static IEnumerable`1<FieldInfo> NonPublicStaticFields(object value, bool includeInherited);
    public static T GetValueForProperty(object instance, string propertyName);
}
public interface ApprovalUtilities.SimpleLogger.IAppendable {
    public abstract virtual void AppendLine(string text);
}
[ExtensionAttribute]
public static class ApprovalUtilities.SimpleLogger.Logger : object {
    [EditorBrowsableAttribute("2")]
public static LoggerInstance log;
    public static IAppendable Writer { get; public set; }
    [EditorBrowsableAttribute("2")]
public static Logger();
    public static IAppendable get_Writer();
    public static void set_Writer(IAppendable value);
    public static StringBuilderLogger LogToStringBuilder();
    public static IDisposable MarkEntryPoints();
    public static string Event(string message, Object[] items);
    public static string Message(string message);
    public static void Variable(string name, object value);
    public static string Sql(string sql);
    public static string Miscellaneous(string label, string message);
    public static void Warning(Exception exception, String[] additional);
    public static string Warning(string format, Object[] data);
    public static void Show(bool markerIn, bool variables, bool events, bool sql, bool timestamp, bool timeDifference);
    public static void UseTimer(ILoader`1<DateTime> timeLoader);
    [ExtensionAttribute]
public static T Log(T t, string label, Func`2<T, string> log);
}
public class ApprovalUtilities.SimpleLogger.LoggerInstance : object {
    public IAppendable Writer;
    [EditorBrowsableAttribute("2")]
public int indent;
    public int TabSize;
    [EditorBrowsableAttribute("2")]
public bool showMarkerIn;
    [EditorBrowsableAttribute("2")]
public bool showVariables;
    [EditorBrowsableAttribute("2")]
public bool showEvents;
    [EditorBrowsableAttribute("2")]
public bool showSql;
    [EditorBrowsableAttribute("2")]
public bool showTimestamp;
    [EditorBrowsableAttribute("2")]
public bool showTimeDifference;
    [EditorBrowsableAttribute("2")]
public ILoader`1<DateTime> clock;
    [EditorBrowsableAttribute("2")]
public DateTime lastTime;
    public virtual StringBuilderLogger LogToStringBuilder();
    public virtual void MarkerIn();
    public virtual void MarkerOut();
    [EditorBrowsableAttribute("2")]
public virtual void drawMarker(string arrow, bool stepIn);
    public virtual string GetCallingMethod();
    [EditorBrowsableAttribute("2")]
public virtual void Write(string text);
    [EditorBrowsableAttribute("2")]
public virtual string GetIndentation();
    public virtual string Event(string message, Object[] items);
    public virtual string Message(string message);
    public virtual void Variable(string name, object value);
    public virtual string Sql(string sql);
    public virtual string Miscellaneous(string label, string message);
    public virtual void Warning(Exception except, String[] additional);
    public virtual string Warning(string format, Object[] data);
    [EditorBrowsableAttribute("2")]
public virtual void PrintWarning(String[] lines);
    public virtual void Show(bool markerIn, bool variables, bool events, bool sql, bool timestamp, bool timeDifference);
    public virtual void UseTimer(ILoader`1<DateTime> timeLoader);
    [CompilerGeneratedAttribute]
[EditorBrowsableAttribute("2")]
public virtual bool <GetCallingMethod>b__15_0(MethodBase m);
}
public class ApprovalUtilities.SimpleLogger.Marker : object {
    [EditorBrowsableAttribute("2")]
public LoggerInstance log;
    public Marker(LoggerInstance log);
    public virtual void Dispose();
}
public class ApprovalUtilities.SimpleLogger.Writers.ConsoleWriter : object {
    public virtual void AppendLine(string text);
}
public class ApprovalUtilities.SimpleLogger.Writers.DebuggerWriter : object {
    public virtual void AppendLine(string text);
}
public class ApprovalUtilities.SimpleLogger.Writers.FileWriter : object {
    [EditorBrowsableAttribute("2")]
public string logFilePath;
    [EditorBrowsableAttribute("2")]
public Func`1<string> getLogFile;
    public Func`1<string> GetLogFile { get; public set; }
    public string LogFile { get; public set; }
    public virtual void AppendLine(string text);
    public virtual Func`1<string> get_GetLogFile();
    public virtual void set_GetLogFile(Func`1<string> value);
    public virtual string get_LogFile();
    public virtual void set_LogFile(string value);
    [EditorBrowsableAttribute("2")]
public virtual void InitialWrite();
    public static void EnsureDirectoryExists(DirectoryInfo directory);
}
public class ApprovalUtilities.SimpleLogger.Writers.MultiWriter : object {
    [EditorBrowsableAttribute("2")]
public IAppendable[] writers;
    public MultiWriter(IAppendable[] writers);
    public virtual void AppendLine(string text);
}
public class ApprovalUtilities.SimpleLogger.Writers.NullWriter : object {
    public static NullWriter Instance;
    [EditorBrowsableAttribute("2")]
public static NullWriter();
    public virtual void AppendLine(string text);
}
public class ApprovalUtilities.SimpleLogger.Writers.StringBuilderLogger : object {
    [EditorBrowsableAttribute("2")]
public StringBuilder builder;
    public virtual void AppendLine(string text);
    public virtual void Append(string text);
    public virtual string ToString();
    public virtual string ScrubPath(string path);
}
public enum ApprovalUtilities.Utilities.ApprovalsPlatform : Enum {
    public int value__;
    public static ApprovalsPlatform Windows;
    public static ApprovalsPlatform Linux;
    public static ApprovalsPlatform Mac;
}
public class ApprovalUtilities.Utilities.ClassUtilities : object {
    public static bool IsClassAvailable(string typeName);
    public static bool IsAssemblyLoaded(string assembly);
}
public class ApprovalUtilities.Utilities.Clock : object {
    public virtual DateTime Load();
}
[ExtensionAttribute]
public static class ApprovalUtilities.Utilities.CollectionUtilities : object {
    [ExtensionAttribute]
public static ICollection`1<T> AddAll(ICollection`1<T> collection, IEnumerable`1<T> additions);
    [ExtensionAttribute]
public static ICollection`1<T> AddItem(ICollection`1<T> source, T item);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> ie, Action`1<T> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrEmpty(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> map, TKey key);
}
public static class ApprovalUtilities.Utilities.CultureUtilities : object {
    public static void ForceCulture(string culture);
}
public class ApprovalUtilities.Utilities.Disposables : object {
    [EditorBrowsableAttribute("2")]
public Action _onDispose;
    [EditorBrowsableAttribute("2")]
public Disposables(Action onDispose);
    public virtual void Dispose();
    public static IDisposable Create(Action on_dispose);
}
[ExtensionAttribute]
public static class ApprovalUtilities.Utilities.ExceptionUtilities : object {
    public static string FormatException(Exception exception, String[] additional);
    public static String[] GetExceptionLines(Exception except, String[] additional);
    public static string FormatAsError(String[] lines);
    [ExtensionAttribute]
public static string FormatError(Exception except, String[] additional);
    public static Exception GetException(Action action);
}
public static class ApprovalUtilities.Utilities.Guard : object {
    public static void AgainstNull(object value, string argumentName);
    public static void AgainstUpperCase(string value, string argumentName);
    public static void AgainstNegativeAndZero(int value, string argumentName);
    public static void AgainstNullAndEmpty(string value, string argumentName);
    public static void DirectoryExists(string path, string argumentName);
    public static void FileExists(string path, string argumentName);
    public static void AgainstEmpty(string value, string argumentName);
}
[ExtensionAttribute]
public static class ApprovalUtilities.Utilities.JsonPrettyPrint : object {
    [EditorBrowsableAttribute("2")]
public static string INDENT_STRING;
    [ExtensionAttribute]
public static string FormatJson(string str);
}
public class ApprovalUtilities.Utilities.MockClock : Clock {
    [EditorBrowsableAttribute("2")]
public DateTime mockTime;
    [EditorBrowsableAttribute("2")]
public int ticks;
    public MockClock(DateTime mockTime);
    public virtual DateTime Load();
}
public class ApprovalUtilities.Utilities.OsUtils : object {
    public static ApprovalsPlatform GetPlatformId();
    public static string GetFullOsNameFromWmi();
    public static bool IsWindowsOs();
    public static bool IsUnixOs();
}
[ExtensionAttribute]
public static class ApprovalUtilities.Utilities.PathUtilities : object {
    [EditorBrowsableAttribute("2")]
public static IList`1<string> EnvironmentPaths;
    public static string GetDirectoryForCaller();
    public static string GetDirectoryForCaller(int callerStackDepth);
    public static string GetDirectoryForStackFrame(StackFrame stackFrame);
    [ExtensionAttribute]
public static string ScrubPath(string text, string path);
    public static string GetAdjacentFile(string relativePath);
    public static IEnumerable`1<string> LocateFileFromEnvironmentPath(string toFind);
    [EditorBrowsableAttribute("2")]
public static IEnumerable`1<string> FindProgramOnPath(string programName);
}
[ExtensionAttribute]
public static class ApprovalUtilities.Utilities.StringUtils : object {
    [ExtensionAttribute]
public static string ToReadableString(IEnumerable list);
    public static string DisplayGrid(int width, int height, Func`3<int, int, string> func);
    public static string FormatFrame(char frameMarker, String[] lines);
    [ExtensionAttribute]
public static string Write(IEnumerable`1<T> enumerable, string label);
    [ExtensionAttribute]
public static string Write(IEnumerable`1<T> enumerable, string label, Func`2<T, string> formatter);
    [ExtensionAttribute]
public static string Write(IEnumerable`1<T> enumerable, Func`2<T, string> formatter);
    [ExtensionAttribute]
public static string Write(IEnumerable`1<T> enumerable, Func`3<int, T, string> formatterWithIndex, string emptyMessage);
    [ExtensionAttribute]
public static string WritePropertiesToString(T value);
    [EditorBrowsableAttribute("2")]
public static void WriteProperties(T value, StringBuilder sb, Type t);
    [ExtensionAttribute]
public static string WriteFieldsToString(T value);
    [EditorBrowsableAttribute("2")]
public static void WriteFields(T value, StringBuilder sb, Type t);
    [EditorBrowsableAttribute("2")]
public static string WriteObjectToString(T value, Action`3<T, StringBuilder, Type> writer);
    [ExtensionAttribute]
public static string JoinWith(IEnumerable`1<T> elements, string separator);
    [ExtensionAttribute]
public static string RemoveIndentation(string indentedText);
    [EditorBrowsableAttribute("2")]
public static string RemoveSpaces(int space, string s);
    [EditorBrowsableAttribute("2")]
public static int FindSpaces(IEnumerable`1<string> lines);
}
public class ApprovalUtilities.Utilities.TempFile : object {
    [EditorBrowsableAttribute("2")]
public FileInfo backingFile;
    public FileInfo File { get; }
    public TempFile(string name);
    [EditorBrowsableAttribute("2")]
public virtual override void Finalize();
    public virtual FileInfo get_File();
    public virtual void Dispose();
    public virtual void WriteAllText(string text);
}
public class ApprovalUtilities.Xml.XmlUtils : object {
    public static string FormatXml(string xml, bool safe);
    public static string FormatXmlWithOrderedAttributes(string xml);
    public static void SortAttributes(XElement xElement);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
