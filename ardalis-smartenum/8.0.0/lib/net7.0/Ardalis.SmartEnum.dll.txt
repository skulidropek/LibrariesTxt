[AttributeUsageAttribute("4")]
public class Ardalis.SmartEnum.AllowNegativeInputValuesAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Ardalis.SmartEnum.AllowUnsafeFlagEnumValuesAttribute : Attribute {
}
[IsReadOnlyAttribute]
public class Ardalis.SmartEnum.Core.SmartEnumThen`2 : ValueType {
    private bool isMatch;
    private ISmartEnum smartEnum;
    private bool stopEvaluating;
    internal SmartEnumThen`2(bool isMatch, bool stopEvaluating, ISmartEnum smartEnum);
    public SmartEnumWhen`2<TEnum, TValue> Then(Action doThis);
}
[IsReadOnlyAttribute]
public class Ardalis.SmartEnum.Core.SmartEnumWhen`2 : ValueType {
    private ISmartEnum smartEnum;
    private bool stopEvaluating;
    internal SmartEnumWhen`2(bool stopEvaluating, ISmartEnum smartEnum);
    public void Default(Action action);
    public SmartEnumThen`2<TEnum, TValue> When(ISmartEnum smartEnumWhen);
    public SmartEnumThen`2<TEnum, TValue> When(ISmartEnum[] smartEnums);
    public SmartEnumThen`2<TEnum, TValue> When(IEnumerable`1<ISmartEnum> smartEnums);
}
public class Ardalis.SmartEnum.Exceptions.InvalidFlagEnumValueParseException : Exception {
    protected InvalidFlagEnumValueParseException(SerializationInfo info, StreamingContext context);
    public InvalidFlagEnumValueParseException(string message);
    public InvalidFlagEnumValueParseException(string message, Exception innerException);
}
public class Ardalis.SmartEnum.Exceptions.NegativeValueArgumentException : ArgumentException {
    protected NegativeValueArgumentException(SerializationInfo info, StreamingContext context);
    public NegativeValueArgumentException(string message);
    public NegativeValueArgumentException(string message, Exception innerException);
}
public class Ardalis.SmartEnum.Exceptions.SmartFlagEnumContainsNegativeValueException : Exception {
    protected SmartFlagEnumContainsNegativeValueException(SerializationInfo info, StreamingContext context);
    public SmartFlagEnumContainsNegativeValueException(string message);
    public SmartFlagEnumContainsNegativeValueException(string message, Exception innerException);
}
public class Ardalis.SmartEnum.Exceptions.SmartFlagEnumDoesNotContainPowerOfTwoValuesException : Exception {
    protected SmartFlagEnumDoesNotContainPowerOfTwoValuesException(SerializationInfo info, StreamingContext context);
    public SmartFlagEnumDoesNotContainPowerOfTwoValuesException(string message);
    public SmartFlagEnumDoesNotContainPowerOfTwoValuesException(string message, Exception innerException);
}
public interface Ardalis.SmartEnum.ISmartEnum {
}
public abstract class Ardalis.SmartEnum.SmartEnum`1 : SmartEnum`2<TEnum, int> {
    protected SmartEnum`1(string name, int value);
}
public abstract class Ardalis.SmartEnum.SmartEnum`2 : object {
    private static Lazy`1<TEnum[]> _enumOptions;
    private static Lazy`1<Dictionary`2<string, TEnum>> _fromName;
    private static Lazy`1<Dictionary`2<string, TEnum>> _fromNameIgnoreCase;
    private static Lazy`1<Dictionary`2<TValue, TEnum>> _fromValue;
    private string _name;
    private TValue _value;
    public static IReadOnlyCollection`1<TEnum> List { get; }
    public string Name { get; }
    public TValue Value { get; }
    protected SmartEnum`2(string name, TValue value);
    private static SmartEnum`2();
    private static TEnum[] GetAllOptions();
    private static IEqualityComparer`1<TValue> GetValueComparer();
    public static IReadOnlyCollection`1<TEnum> get_List();
    public string get_Name();
    public TValue get_Value();
    public static TEnum FromName(string name, bool ignoreCase);
    public static bool TryFromName(string name, TEnum& result);
    public static bool TryFromName(string name, bool ignoreCase, TEnum& result);
    public static TEnum FromValue(TValue value);
    public static TEnum FromValue(TValue value, TEnum defaultValue);
    public static bool TryFromValue(TValue value, TEnum& result);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(SmartEnum`2<TEnum, TValue> other);
    public SmartEnumThen`2<TEnum, TValue> When(SmartEnum`2<TEnum, TValue> smartEnumWhen);
    public SmartEnumThen`2<TEnum, TValue> When(SmartEnum`2[] smartEnums);
    public SmartEnumThen`2<TEnum, TValue> When(IEnumerable`1<SmartEnum`2<TEnum, TValue>> smartEnums);
    public static bool op_Equality(SmartEnum`2<TEnum, TValue> left, SmartEnum`2<TEnum, TValue> right);
    public static bool op_Inequality(SmartEnum`2<TEnum, TValue> left, SmartEnum`2<TEnum, TValue> right);
    public virtual int CompareTo(SmartEnum`2<TEnum, TValue> other);
    public static bool op_LessThan(SmartEnum`2<TEnum, TValue> left, SmartEnum`2<TEnum, TValue> right);
    public static bool op_LessThanOrEqual(SmartEnum`2<TEnum, TValue> left, SmartEnum`2<TEnum, TValue> right);
    public static bool op_GreaterThan(SmartEnum`2<TEnum, TValue> left, SmartEnum`2<TEnum, TValue> right);
    public static bool op_GreaterThanOrEqual(SmartEnum`2<TEnum, TValue> left, SmartEnum`2<TEnum, TValue> right);
    public static TValue op_Implicit(SmartEnum`2<TEnum, TValue> smartEnum);
    public static SmartEnum`2<TEnum, TValue> op_Explicit(TValue value);
    [CompilerGeneratedAttribute]
internal static TEnum <FromName>g__FromName|15_0(Dictionary`2<string, TEnum> dictionary, <>c__DisplayClass15_0& );
}
[AttributeUsageAttribute("4")]
public class Ardalis.SmartEnum.SmartEnumComparerAttribute`1 : Attribute {
    private IEqualityComparer`1<T> _comparer;
    public IEqualityComparer`1<T> Comparer { get; }
    protected SmartEnumComparerAttribute`1(IEqualityComparer`1<T> comparer);
    public IEqualityComparer`1<T> get_Comparer();
}
[ExtensionAttribute]
public static class Ardalis.SmartEnum.SmartEnumExtensions : object {
    [ExtensionAttribute]
public static bool IsSmartEnum(Type type);
    [ExtensionAttribute]
public static bool IsSmartEnum(Type type, Type[]& genericArguments);
    [ExtensionAttribute]
public static bool TryGetValues(Type type, IEnumerable`1& enums);
}
public class Ardalis.SmartEnum.SmartEnumNameAttribute : ValidationAttribute {
    private bool _allowCaseInsensitiveMatch;
    private Type _smartEnumType;
    public SmartEnumNameAttribute(Type smartEnumType, string propertyName, bool allowCaseInsensitiveMatch, string errorMessage);
    public virtual bool IsValid(object value);
    private List`1<string> GetValidSmartEnumNames();
}
public class Ardalis.SmartEnum.SmartEnumNotFoundException : Exception {
    protected SmartEnumNotFoundException(SerializationInfo info, StreamingContext context);
    public SmartEnumNotFoundException(string message);
    public SmartEnumNotFoundException(string message, Exception innerException);
}
public class Ardalis.SmartEnum.SmartEnumStringComparerAttribute : SmartEnumComparerAttribute`1<string> {
    public SmartEnumStringComparerAttribute(StringComparison comparison);
    private static IEqualityComparer`1<string> GetComparer(StringComparison comparison);
}
public abstract class Ardalis.SmartEnum.SmartFlagEngine`2 : object {
    protected static IEnumerable`1<TEnum> GetFlagEnumValues(TValue value, IEnumerable`1<TEnum> allEnumList);
    private static void GuardAgainstNull(TValue value);
    private static void GuardAgainstInvalidInputValue(TValue value);
    private static void GuardAgainstNegativeInputValue(TValue value);
    private static void CheckEnumForNegativeValues(int value);
    private static int CalculateHighestAllowedFlagValue(List`1<TEnum> inputEnumList);
    private static void AssignFlagStateValuesToDictionary(int inputValueAsInt, int currentEnumValue, TEnum enumValue, IDictionary`2<TEnum, bool> enumFlagStateDictionary);
    private static IEnumerable`1<TEnum> CreateSmartEnumReturnList(Dictionary`2<TEnum, bool> enumFlagStateDictionary);
    private static void ApplyUnsafeFlagEnumAttributeSettings(IEnumerable`1<TEnum> list);
    private static void CheckEnumListForPowersOfTwo(IEnumerable`1<TEnum> enumEnumerable);
    private static bool IsPowerOfTwo(int input);
    private static int HighestFlagValue(IReadOnlyList`1<TEnum> enumList);
    private static TValue GetMaxValue();
}
public abstract class Ardalis.SmartEnum.SmartFlagEnum`1 : SmartFlagEnum`2<TEnum, int> {
    protected SmartFlagEnum`1(string name, int value);
}
public abstract class Ardalis.SmartEnum.SmartFlagEnum`2 : SmartFlagEngine`2<TEnum, TValue> {
    private static Lazy`1<Dictionary`2<string, TEnum>> _fromName;
    private static Lazy`1<Dictionary`2<string, TEnum>> _fromNameIgnoreCase;
    private string _name;
    private TValue _value;
    public static IReadOnlyCollection`1<TEnum> List { get; }
    public string Name { get; }
    public TValue Value { get; }
    protected SmartFlagEnum`2(string name, TValue value);
    private static SmartFlagEnum`2();
    private static IEnumerable`1<TEnum> GetAllOptions();
    public static IReadOnlyCollection`1<TEnum> get_List();
    public string get_Name();
    public TValue get_Value();
    public static IEnumerable`1<TEnum> FromName(string names, bool ignoreCase, bool deserialize);
    public static bool TryFromName(string names, IEnumerable`1& result);
    public static bool TryFromName(string names, bool ignoreCase, IEnumerable`1& result);
    public static IEnumerable`1<TEnum> FromValue(TValue value);
    public static TEnum DeserializeValue(TValue value);
    public static IEnumerable`1<TEnum> FromValue(TValue value, IEnumerable`1<TEnum> defaultValue);
    public static bool TryFromValue(TValue value, IEnumerable`1& result);
    public static string FromValueToString(TValue value);
    public static bool TryFromValueToString(TValue value, String& result);
    private static string FormatEnumListString(IEnumerable`1<TEnum> enumInputList);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(SmartFlagEnum`2<TEnum, TValue> other);
    public SmartEnumThen`2<TEnum, TValue> When(SmartFlagEnum`2<TEnum, TValue> smartFlagEnumWhen);
    public SmartEnumThen`2<TEnum, TValue> When(SmartFlagEnum`2[] smartEnums);
    public SmartEnumThen`2<TEnum, TValue> When(IEnumerable`1<SmartFlagEnum`2<TEnum, TValue>> smartEnums);
    public static bool op_Equality(SmartFlagEnum`2<TEnum, TValue> left, SmartFlagEnum`2<TEnum, TValue> right);
    public static bool op_Inequality(SmartFlagEnum`2<TEnum, TValue> left, SmartFlagEnum`2<TEnum, TValue> right);
    public virtual int CompareTo(SmartFlagEnum`2<TEnum, TValue> other);
    public static bool op_LessThan(SmartFlagEnum`2<TEnum, TValue> left, SmartFlagEnum`2<TEnum, TValue> right);
    public static bool op_LessThanOrEqual(SmartFlagEnum`2<TEnum, TValue> left, SmartFlagEnum`2<TEnum, TValue> right);
    public static bool op_GreaterThan(SmartFlagEnum`2<TEnum, TValue> left, SmartFlagEnum`2<TEnum, TValue> right);
    public static bool op_GreaterThanOrEqual(SmartFlagEnum`2<TEnum, TValue> left, SmartFlagEnum`2<TEnum, TValue> right);
    public static TValue op_Implicit(SmartFlagEnum`2<TEnum, TValue> smartFlagEnum);
    public static SmartFlagEnum`2<TEnum, TValue> op_Explicit(TValue value);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<TEnum> <FromName>g__FromName|12_0(Dictionary`2<string, TEnum> dictionary, <>c__DisplayClass12_0& );
}
[ExtensionAttribute]
public static class Ardalis.SmartEnum.SmartFlagEnumExtensions : object {
    [ExtensionAttribute]
public static bool IsSmartFlagEnum(Type type);
    [ExtensionAttribute]
public static bool IsSmartFlagEnum(Type type, Type[]& genericArguments);
    [ExtensionAttribute]
public static bool TryGetFlagEnumValuesByName(Dictionary`2<string, TEnum> dictionary, string names, IEnumerable`1& outputEnums);
}
internal static class Ardalis.SmartEnum.ThrowHelper : object {
    public static void ThrowArgumentNullException(string paramName);
    public static void ThrowArgumentNullOrEmptyException(string paramName);
    public static void ThrowNameNotFoundException(string name);
    public static void ThrowValueNotFoundException(TValue value);
    public static void ThrowContainsNegativeValueException();
    public static void ThrowInvalidValueCastException(TValue value);
    public static void ThrowNegativeValueArgumentException(TValue value);
    public static void ThrowNegativeValueArgumentException(int value);
    public static void ThrowDoesNotContainPowerOfTwoValuesException();
}
[ExtensionAttribute]
internal static class Ardalis.SmartEnum.TypeExtensions : object {
    [ExtensionAttribute]
public static List`1<TFieldType> GetFieldsOfType(Type type);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
