[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.CamelCaseNamingStrategy : NamingStrategy {
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    protected virtual string ResolvePropertyName(string name);
    internal static string ToCamelCase(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.CamelCasePropertyNamesContractResolver : DefaultContractResolver {
    private static object typeContractCacheLock;
    private static DefaultJsonNameTable NameTable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<Tuple`2<Type, Type>, JsonContract> contractCache;
    private static CamelCasePropertyNamesContractResolver();
    public virtual JsonContract ResolveContract(Type type);
    public virtual JsonNameTable GetNameTable();
}
public enum Argon.CommentHandling : Enum {
    public int value__;
    public static CommentHandling Ignore;
    public static CommentHandling Load;
}
public enum Argon.ConstructorHandling : Enum {
    public int value__;
    public static ConstructorHandling Default;
    public static ConstructorHandling AllowNonPublicDefaultConstructor;
}
public abstract class Argon.DateTimeConverterBase : JsonConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvert(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.DefaultContractResolver : object {
    [CompilerGeneratedAttribute]
private static IContractResolver <Instance>k__BackingField;
    private DefaultJsonNameTable nameTable;
    private ThreadSafeStore`2<Type, JsonContract> contractCache;
    [CompilerGeneratedAttribute]
private bool <SerializeCompilerGeneratedMembers>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<JsonConverter> <Converters>k__BackingField;
    internal static IContractResolver Instance { get; }
    public bool SerializeCompilerGeneratedMembers { get; public set; }
    [NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    public static List`1<JsonConverter> Converters { get; }
    private static DefaultContractResolver();
    [CompilerGeneratedAttribute]
internal static IContractResolver get_Instance();
    [CompilerGeneratedAttribute]
public bool get_SerializeCompilerGeneratedMembers();
    [CompilerGeneratedAttribute]
public void set_SerializeCompilerGeneratedMembers(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    [CompilerGeneratedAttribute]
public static List`1<JsonConverter> get_Converters();
    public virtual JsonContract ResolveContract(Type type);
    private static bool FilterMembers(MemberInfo member);
    protected virtual IEnumerable`1<MemberInfo> GetSerializableMembers(Type type);
    private bool ShouldSerialize(MemberInfo member, List`1<MemberInfo> defaultMembers, DataContractAttribute dataContractAttribute);
    protected virtual JsonObjectContract CreateObjectContract(Type type);
    private static bool TryGetAttributeConstructor(Type type, ConstructorInfo& constructor);
    private static bool TryGetImmutableConstructor(Type type, JsonPropertyCollection memberProperties, ConstructorInfo& constructor);
    private static ConstructorInfo GetParameterizedConstructor(Type type);
    protected virtual IList`1<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties);
    private static JsonProperty MatchProperty(JsonPropertyCollection properties, string name, Type type);
    protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameter);
    protected virtual JsonConverter ResolveContractConverter(Type type);
    private static Func`1<object> GetDefaultCreator(Type createdType);
    private void InitializeContract(JsonContract contract);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type type);
    private static bool GetHasParameterizedCreator(ConstructorInfo overrideConstructor, JsonDictionaryContract contract);
    protected virtual JsonArrayContract CreateArrayContract(Type type);
    private static bool HasParameterizedCreator(ConstructorInfo overrideConstructor, JsonArrayContract contract);
    protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type type);
    protected virtual JsonLinqContract CreateLinqContract(Type type);
    protected virtual JsonDynamicContract CreateDynamicContract(Type type);
    protected virtual JsonStringContract CreateStringContract(Type type);
    protected virtual JsonContract CreateContract(Type type);
    private static bool IsJsonPrimitiveType(Type type);
    private static bool IsIConvertible(Type t);
    private static bool CanConvertToString(Type type);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    public virtual JsonNameTable GetNameTable();
    protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    private void SetPropertySettingsFromAttributes(JsonProperty property, ICustomAttributeProvider attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, Boolean& allowNonPublicAccess);
    private static bool GetPropertyIgnored(ICustomAttributeProvider attributeProvider, MemberSerialization memberSerialization, bool hasMemberAttribute);
    private string GetPropertyName(string name, JsonPropertyAttribute propertyAttribute, DataMemberAttribute dataMemberAttribute);
    protected virtual string ResolvePropertyName(string propertyName);
    protected virtual string ResolveDictionaryKey(string name, object original);
    public string GetResolvedPropertyName(string propertyName);
    [CompilerGeneratedAttribute]
private string <CreateDynamicContract>b__37_0(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.DefaultJsonNameTable : JsonNameTable {
    private static int hashCodeRandomizer;
    private int count;
    private Entry[] entries;
    private int mask;
    private static DefaultJsonNameTable();
    public virtual string Get(Char[] key, int start, int length);
    public virtual string Add(string key);
    private string InnerAdd(string key);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
}
public class Argon.DefaultNamingStrategy : NamingStrategy {
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.DefaultSerializationBinder : object {
    internal static DefaultSerializationBinder Instance;
    private static ThreadSafeStore`2<TypeNameKey, Type> typeCache;
    private static DefaultSerializationBinder();
    private static Type GetTypeFromTypeNameKey(TypeNameKey key);
    private static Type GetGenericTypeFromTypeName(string typeName, Assembly assembly);
    private static Type GetTypeByName(TypeNameKey typeNameKey);
    public sealed virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public sealed virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
[FlagsAttribute]
public enum Argon.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
public class Argon.DictionaryKeyResolver : MulticastDelegate {
    public DictionaryKeyResolver(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(string name, object original);
    public virtual IAsyncResult BeginInvoke(string name, object original, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.DynamicValueProvider : object {
    private MemberInfo member;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> getter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> setter;
    public DynamicValueProvider(MemberInfo member);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Argon.EncodingConverter : JsonConverter`1<Encoding> {
    public virtual void WriteJson(JsonWriter writer, Encoding value, JsonSerializer serializer);
    public virtual Encoding ReadJson(JsonReader reader, Type type, Encoding existingValue, bool hasExisting, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Argon.ErrorLocation : ValueType {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Member>k__BackingField;
    public string Path { get; public set; }
    [NullableAttribute("2")]
public object Member { get; public set; }
    public ErrorLocation(string Path, object Member);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Member();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Member(object value);
    public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ErrorLocation left, ErrorLocation right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ErrorLocation left, ErrorLocation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ErrorLocation other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Path, Object& Member);
}
public enum Argon.EscapeHandling : Enum {
    public int value__;
    public static EscapeHandling Default;
    public static EscapeHandling EscapeNonAscii;
    public static EscapeHandling EscapeHtml;
    public static EscapeHandling None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.ExpandoObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    private object ReadValue(JsonReader reader);
    private object ReadList(JsonReader reader);
    private object ReadObject(JsonReader reader);
    public virtual bool CanConvert(Type type);
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Argon.Extensions : object {
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AncestorsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> DescendantsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JProperty> Properties(IEnumerable`1<JObject> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static U Value(IEnumerable`1<JToken> value);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<T> value);
    [IteratorStateMachineAttribute("Argon.Extensions/<Values>d__11`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Values(IEnumerable`1<T> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Children(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("Argon.Extensions/<Children>d__13`2")]
[ExtensionAttribute]
public static IEnumerable`1<U> Children(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("Argon.Extensions/<Convert>d__14`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Convert(IEnumerable`1<T> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static U Convert(T token);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AsJEnumerable(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IJEnumerable`1<T> AsJEnumerable(IEnumerable`1<T> source);
}
public enum Argon.FloatFormatHandling : Enum {
    public int value__;
    public static FloatFormatHandling String;
    public static FloatFormatHandling Symbol;
    public static FloatFormatHandling DefaultValue;
}
public enum Argon.FloatParseHandling : Enum {
    public int value__;
    public static FloatParseHandling Double;
    public static FloatParseHandling Decimal;
}
public enum Argon.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
[NullableContextAttribute("1")]
public interface Argon.IContractResolver {
    public abstract virtual JsonContract ResolveContract(Type type);
    public abstract virtual JsonNameTable GetNameTable();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Argon.IJEnumerable`1 {
    public IJEnumerable`1<JToken> Item { get; }
    public abstract virtual IJEnumerable`1<JToken> get_Item(object key);
}
public interface Argon.IJsonLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.InterceptResult : ValueType {
    [CompilerGeneratedAttribute]
private object <Replacement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldIgnore>k__BackingField;
    public static InterceptResult Default { get; }
    public static InterceptResult Ignore { get; }
    public object Replacement { get; }
    public bool ShouldReplace { get; }
    public bool ShouldIgnore { get; }
    private InterceptResult(bool ignore, bool replace, object replacement);
    public static InterceptResult get_Default();
    public static InterceptResult get_Ignore();
    public static InterceptResult Replace(object replacement);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Replacement();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ShouldReplace();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ShouldIgnore();
}
public class Argon.InterceptSerializeArrayItem : MulticastDelegate {
    public InterceptSerializeArrayItem(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual InterceptResult Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual InterceptResult EndInvoke(IAsyncResult result);
}
public class Argon.InterceptSerializeArrayItems : MulticastDelegate {
    public InterceptSerializeArrayItems(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IEnumerable Invoke(IEnumerable value);
    public virtual IAsyncResult BeginInvoke(IEnumerable value, AsyncCallback callback, object object);
    public virtual IEnumerable EndInvoke(IAsyncResult result);
}
public class Argon.InterceptSerializeDictionaryItem : MulticastDelegate {
    public InterceptSerializeDictionaryItem(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual InterceptResult Invoke(object key, object value);
    public virtual IAsyncResult BeginInvoke(object key, object value, AsyncCallback callback, object object);
    public virtual InterceptResult EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface Argon.IReferenceResolver {
    public abstract virtual object ResolveReference(object context, string reference);
    public abstract virtual string GetReference(object context, object value);
    public abstract virtual bool IsReferenced(object context, object value);
    public abstract virtual void AddReference(object context, string reference, object value);
}
[NullableContextAttribute("1")]
public interface Argon.ISerializationBinder {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public abstract virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.IsoDateTimeConverter : DateTimeConverterBase {
    [NullableAttribute("1")]
private static string defaultDateTimeFormat;
    private string dateTimeFormat;
    [CompilerGeneratedAttribute]
private DateTimeStyles <DateTimeStyles>k__BackingField;
    public DateTimeStyles DateTimeStyles { get; public set; }
    public string DateTimeFormat { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeStyles get_DateTimeStyles();
    [CompilerGeneratedAttribute]
public void set_DateTimeStyles(DateTimeStyles value);
    public string get_DateTimeFormat();
    public void set_DateTimeFormat(string value);
    [NullableContextAttribute("1")]
public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    [NullableContextAttribute("1")]
public virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
public interface Argon.IValueProvider {
    public abstract virtual void SetValue(object target, object value);
    public abstract virtual object GetValue(object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Argon.JArray : JContainer {
    private List`1<JToken> values;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    public bool IsReadOnly { get; }
    public JArray(JArray other);
    public JArray(Object[] content);
    public JArray(object content);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public static JArray Load(JsonReader reader);
    public static JArray Load(JsonReader reader, JsonLoadSettings settings);
    public static JArray Parse(string json);
    public static JArray Parse(string json, JsonLoadSettings settings);
    public static JArray FromObject(object o);
    public static JArray FromObject(object o, JsonSerializer serializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(int index);
    public sealed virtual void set_Item(int index, JToken value);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    public sealed virtual int IndexOf(JToken item);
    public sealed virtual void Insert(int index, JToken item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<JToken> GetEnumerator();
    public sealed virtual void Add(JToken item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JToken item);
    public sealed virtual void CopyTo(JToken[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(JToken item);
    internal virtual int GetDeepHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.JContainer : JToken {
    protected IList`1<JToken> ChildrenTokens { get; }
    public bool HasValues { get; }
    [NullableAttribute("2")]
public JToken First { get; }
    [NullableAttribute("2")]
public JToken Last { get; }
    private JToken System.Collections.Generic.IList<Argon.JToken>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<Argon.JToken>.IsReadOnly { get; }
    public int Count { get; }
    internal JContainer(JContainer other);
    protected abstract virtual IList`1<JToken> get_ChildrenTokens();
    public virtual bool get_HasValues();
    internal bool ContentsEqual(JContainer container);
    [NullableContextAttribute("2")]
public virtual JToken get_First();
    [NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public IEnumerable`1<JToken> Descendants();
    public IEnumerable`1<JToken> DescendantsAndSelf();
    [IteratorStateMachineAttribute("Argon.JContainer/<GetDescendants>d__15")]
private IEnumerable`1<JToken> GetDescendants(bool self);
    [NullableContextAttribute("2")]
internal static bool IsMultiContent(object content);
    private JToken EnsureParentToken(JToken item, bool skipParentCheck);
    [NullableContextAttribute("2")]
internal abstract virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void RemoveItemAt(int index);
    [NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual JToken GetItem(int index);
    [NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    internal virtual void ClearItems();
    internal virtual void ReplaceItem(JToken existing, JToken replacement);
    [NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void CopyItemsTo(Array array, int arrayIndex);
    internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue);
    internal virtual void ValidateToken(JToken o, JToken existing);
    [NullableContextAttribute("2")]
public virtual void Add(object content);
    [NullableContextAttribute("2")]
internal bool TryAdd(object content);
    internal void AddAndSkipParentCheck(JToken token);
    [NullableContextAttribute("2")]
public void AddFirst(object content);
    [NullableContextAttribute("2")]
internal bool TryAddInternal(int index, object content, bool skipParentCheck);
    internal static JToken CreateFromContent(object content);
    public JsonWriter CreateWriter();
    public void ReplaceAll(object content);
    public void RemoveAll();
    internal void ReadTokenFrom(JsonReader reader, JsonLoadSettings options);
    private void ReadContentFrom(JsonReader r, JsonLoadSettings settings);
    private static JProperty ReadProperty(JsonReader reader, JsonLoadSettings settings, IJsonLineInfo lineInfo, JContainer parent);
    internal int ContentsHashCode();
    private sealed virtual override int System.Collections.Generic.IList<Argon.JToken>.IndexOf(JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Argon.JToken>.Insert(int index, JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Argon.JToken>.RemoveAt(int index);
    private sealed virtual override JToken System.Collections.Generic.IList<Argon.JToken>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Argon.JToken>.set_Item(int index, JToken value);
    private sealed virtual override void System.Collections.Generic.ICollection<Argon.JToken>.Add(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Argon.JToken>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Argon.JToken>.Contains(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Argon.JToken>.CopyTo(JToken[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Argon.JToken>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Argon.JToken>.Remove(JToken item);
    public sealed virtual int get_Count();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Argon.JEnumerable`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static JEnumerable`1<T> Empty;
    private IEnumerable`1<T> enumerable;
    public IJEnumerable`1<JToken> Item { get; }
    public JEnumerable`1(IEnumerable`1<T> enumerable);
    private static JEnumerable`1();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IJEnumerable`1<JToken> get_Item(object key);
    public sealed virtual bool Equals(JEnumerable`1<T> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Argon.JObject : JContainer {
    private JPropertyKeyedCollection properties;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Argon.JToken>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Argon.JToken>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.IsReadOnly { get; }
    public JObject(JObject other);
    public JObject(Object[] content);
    public JObject(object content);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    internal virtual bool DeepEquals(JToken node);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void ValidateToken(JToken o, JToken existing);
    internal virtual JToken CloneToken();
    public virtual JTokenType get_Type();
    public IEnumerable`1<JProperty> Properties();
    public JProperty Property(string name, StringComparison comparison);
    public JProperty PropertyOrNull(string name, StringComparison comparison);
    public JEnumerable`1<JToken> PropertyValues();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(string propertyName);
    public sealed virtual void set_Item(string propertyName, JToken value);
    public static JObject Load(JsonReader reader);
    public static JObject Load(JsonReader reader, JsonLoadSettings settings);
    public static JObject Parse(string json);
    public static JObject Parse(string json, JsonLoadSettings settings);
    public static JObject FromObject(object o);
    public static JObject FromObject(object o, JsonSerializer serializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    [NullableContextAttribute("2")]
public JToken GetValue(string propertyName);
    [NullableContextAttribute("2")]
public JToken GetValue(string propertyName, StringComparison comparison);
    public bool TryGetValue(string propertyName, StringComparison comparison, JToken& value);
    public sealed virtual void Add(string propertyName, JToken value);
    public sealed virtual bool ContainsKey(string propertyName);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Argon.JToken>.get_Keys();
    public sealed virtual bool Remove(string propertyName);
    public sealed virtual bool TryGetValue(string propertyName, JToken& value);
    private sealed virtual override ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Argon.JToken>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.Add(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.Contains(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Argon.JToken>>.Remove(KeyValuePair`2<string, JToken> item);
    internal virtual int GetDeepHashCode();
    [IteratorStateMachineAttribute("Argon.JObject/<GetEnumerator>d__50")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, JToken>> GetEnumerator();
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JProperty : JContainer {
    private JPropertyList content;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; }
    public JToken Value { get; public set; }
    public JTokenType Type { get; }
    public JProperty(JProperty other);
    internal JProperty(string name);
    public JProperty(string name, Object[] content);
    public JProperty(string name, object content);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public JToken get_Value();
    public void set_Value(JToken value);
    internal virtual JToken GetItem(int index);
    [NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    [NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual void RemoveItemAt(int index);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    [NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void ClearItems();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    [DebuggerStepThroughAttribute]
public virtual JTokenType get_Type();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public static JProperty Load(JsonReader reader);
    public static JProperty Load(JsonReader reader, JsonLoadSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JRaw : JValue {
    public JRaw(JRaw other);
    [NullableContextAttribute("2")]
public JRaw(object rawJson);
    public static JRaw Create(JsonReader reader);
    internal virtual JToken CloneToken();
}
[AttributeUsageAttribute("1028")]
public class Argon.JsonArrayAttribute : JsonContainerAttribute {
    [CompilerGeneratedAttribute]
private bool <AllowNullItems>k__BackingField;
    public bool AllowNullItems { get; }
    public JsonArrayAttribute(bool allowNullItems);
    [CompilerGeneratedAttribute]
public bool get_AllowNullItems();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonArrayContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private Type <CollectionItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultidimensionalArray>k__BackingField;
    private Type genericCollectionDefinition;
    private Type genericWrapperType;
    private ObjectConstructor genericWrapperCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> genericTemporaryCollectionCreator;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDeserialize>k__BackingField;
    private ConstructorInfo parameterizedConstructor;
    private ObjectConstructor parameterizedCreator;
    private ObjectConstructor overrideCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private InterceptSerializeArrayItem <InterceptSerializeItem>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private InterceptSerializeArrayItems <InterceptSerializeItems>k__BackingField;
    public Type CollectionItemType { get; }
    public bool IsMultidimensionalArray { get; }
    internal bool IsArray { get; }
    internal bool ShouldCreateWrapper { get; }
    internal bool CanDeserialize { get; private set; }
    internal ObjectConstructor ParameterizedCreator { get; }
    public ObjectConstructor OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [NullableAttribute("1")]
public InterceptSerializeArrayItem InterceptSerializeItem { get; public set; }
    [NullableAttribute("1")]
public InterceptSerializeArrayItems InterceptSerializeItems { get; public set; }
    [NullableContextAttribute("1")]
public JsonArrayContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_CollectionItemType();
    [CompilerGeneratedAttribute]
public bool get_IsMultidimensionalArray();
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
internal bool get_CanDeserialize();
    [CompilerGeneratedAttribute]
private void set_CanDeserialize(bool value);
    internal ObjectConstructor get_ParameterizedCreator();
    public ObjectConstructor get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public InterceptSerializeArrayItem get_InterceptSerializeItem();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_InterceptSerializeItem(InterceptSerializeArrayItem value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public InterceptSerializeArrayItems get_InterceptSerializeItems();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_InterceptSerializeItems(InterceptSerializeArrayItems value);
    [NullableContextAttribute("1")]
internal IWrappedCollection CreateWrapper(object list);
    [NullableContextAttribute("1")]
internal IList CreateTemporaryCollection();
}
[AttributeUsageAttribute("32")]
public class Argon.JsonConstructorAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public abstract class Argon.JsonContainerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    internal Nullable`1<bool> isReference;
    internal Nullable`1<bool> itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> itemTypeNameHandling;
    public Type ItemConverterType { get; public set; }
    public bool IsReference { get; public set; }
    public bool ItemIsReference { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonContainerContract : JsonContract {
    private JsonContract itemContract;
    [CompilerGeneratedAttribute]
private JsonContract <FinalItemContract>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    internal JsonContract ItemContract { get; internal set; }
    internal JsonContract FinalItemContract { get; private set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    [NullableContextAttribute("1")]
internal JsonContainerContract(Type underlyingType);
    internal JsonContract get_ItemContract();
    internal void set_ItemContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal JsonContract get_FinalItemContract();
    [CompilerGeneratedAttribute]
private void set_FinalItemContract(JsonContract value);
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.JsonContract : object {
    internal bool IsNullable;
    internal bool IsConvertible;
    internal bool IsEnum;
    internal Type NonNullableUnderlyingType;
    internal ReadType InternalReadType;
    internal JsonContractType ContractType;
    internal bool IsReadOnlyOrFixedSize;
    internal bool IsSealed;
    internal bool IsInstantiable;
    private Type createdType;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <InternalConverter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <DefaultCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCreatorNonPublic>k__BackingField;
    public Type UnderlyingType { get; }
    public Type CreatedType { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    [NullableAttribute("2")]
public JsonConverter Converter { get; public set; }
    [NullableAttribute("2")]
public JsonConverter InternalConverter { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> DefaultCreator { get; public set; }
    public bool DefaultCreatorNonPublic { get; public set; }
    internal JsonContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    public Type get_CreatedType();
    public void set_CreatedType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonConverter get_InternalConverter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_InternalConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Func`1<object> get_DefaultCreator();
    [CompilerGeneratedAttribute]
public void set_DefaultCreator(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCreatorNonPublic();
    [CompilerGeneratedAttribute]
public void set_DefaultCreatorNonPublic(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Argon.JsonConvert : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`1<JsonSerializerSettings> <DefaultSettings>k__BackingField;
    public static string True;
    public static string False;
    public static string Null;
    public static string Undefined;
    public static string PositiveInfinity;
    public static string NegativeInfinity;
    public static string NaN;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`1<JsonSerializerSettings> DefaultSettings { get; public set; }
    private static JsonConvert();
    [CompilerGeneratedAttribute]
public static Func`1<JsonSerializerSettings> get_DefaultSettings();
    [CompilerGeneratedAttribute]
public static void set_DefaultSettings(Func`1<JsonSerializerSettings> value);
    public static string ToString(DateTime value);
    public static string ToString(DateTimeOffset value);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(Enum value);
    public static string ToString(int value);
    public static string ToString(short value);
    public static string ToString(ushort value);
    public static string ToString(UInt32 value);
    public static string ToString(long value);
    private static string ToStringInternal(BigInteger value);
    public static string ToString(ulong value);
    public static string ToString(float value);
    internal static string ToString(float value, FloatFormatHandling handling, char quoteChar, bool nullable, string format);
    private static string EnsureFloatFormat(double value, string text, FloatFormatHandling handling, char quoteChar, bool nullable);
    public static string ToString(double value);
    internal static string ToString(double value, FloatFormatHandling handling, char quoteChar, bool nullable, string format);
    private static string EnsureDecimalPlace(double value, string text);
    private static string EnsureDecimalPlace(string text);
    public static string ToString(byte value);
    public static string ToString(sbyte value);
    public static string ToString(decimal value);
    public static string ToString(Guid value);
    public static string ToString(TimeSpan value);
    public static string ToString(Uri value);
    internal static string ToString(Uri value, char quoteChar);
    public static string ToString(string value);
    public static string ToString(string value, char delimiter);
    public static string ToString(string value, char delimiter, EscapeHandling escapeHandling);
    [NullableContextAttribute("0")]
public static string ToString(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
public static string ToString(ReadOnlySpan`1<char> value, char delimiter);
    [NullableContextAttribute("0")]
public static string ToString(ReadOnlySpan`1<char> value, char delimiter, EscapeHandling escapeHandling);
    public static string ToString(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonConverter[] converters);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    private static string SerializeObjectInternal(object value, Type type, JsonSerializer serializer);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static object TryDeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object TryDeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type);
    [DebuggerStepThroughAttribute]
public static object TryDeserializeObject(string value, Type type);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static T TryDeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    [DebuggerStepThroughAttribute]
public static T TryDeserializeAnonymousType(string value, T anonymousTypeObject);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static T TryDeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static T TryDeserializeObject(string value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static T TryDeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static object TryDeserializeObject(string value, Type type, JsonConverter[] converters);
    private static JsonSerializerSettings GetSettingsForConverter(JsonConverter[] converters);
    public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
public static object TryDeserializeObject(string value, Type type, JsonSerializerSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.JsonConverter : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    public abstract virtual bool CanConvert(Type type);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.JsonConverter`1 : JsonConverter {
    public sealed virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual void WriteJson(JsonWriter writer, T value, JsonSerializer serializer);
    public sealed virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    public abstract virtual T ReadJson(JsonReader reader, Type type, T existingValue, bool hasExisting, JsonSerializer serializer);
    public sealed virtual bool CanConvert(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3484")]
public class Argon.JsonConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    public Type ConverterType { get; }
    public JsonConverterAttribute(Type converterType);
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
}
[AttributeUsageAttribute("1028")]
public class Argon.JsonDictionaryAttribute : JsonContainerAttribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonDictionaryContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private DictionaryKeyResolver <DictionaryKeyResolver>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private InterceptSerializeDictionaryItem <InterceptSerializeItem>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonContract <KeyContract>k__BackingField;
    private Type dictionaryDefinition;
    private Type genericWrapperType;
    private ObjectConstructor genericWrapperCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> genericTemporaryDictionaryCreator;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OrderByKey>k__BackingField;
    private ConstructorInfo parameterizedConstructor;
    private ObjectConstructor parameterizedCreator;
    [CompilerGeneratedAttribute]
private ObjectConstructor <OverrideCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSortable>k__BackingField;
    public DictionaryKeyResolver DictionaryKeyResolver { get; public set; }
    [NullableAttribute("1")]
public InterceptSerializeDictionaryItem InterceptSerializeItem { get; public set; }
    public Type DictionaryKeyType { get; }
    public Type DictionaryValueType { get; }
    internal JsonContract KeyContract { get; internal set; }
    internal bool ShouldCreateWrapper { get; }
    public bool OrderByKey { get; public set; }
    internal ObjectConstructor ParameterizedCreator { get; }
    public ObjectConstructor OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    internal bool IsSortable { get; internal set; }
    [NullableContextAttribute("1")]
public JsonDictionaryContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public DictionaryKeyResolver get_DictionaryKeyResolver();
    [CompilerGeneratedAttribute]
public void set_DictionaryKeyResolver(DictionaryKeyResolver value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public InterceptSerializeDictionaryItem get_InterceptSerializeItem();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_InterceptSerializeItem(InterceptSerializeDictionaryItem value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryKeyType();
    [CompilerGeneratedAttribute]
public Type get_DictionaryValueType();
    [CompilerGeneratedAttribute]
internal JsonContract get_KeyContract();
    [CompilerGeneratedAttribute]
internal void set_KeyContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
public bool get_OrderByKey();
    [CompilerGeneratedAttribute]
public void set_OrderByKey(bool value);
    internal ObjectConstructor get_ParameterizedCreator();
    [CompilerGeneratedAttribute]
public ObjectConstructor get_OverrideCreator();
    [CompilerGeneratedAttribute]
public void set_OverrideCreator(ObjectConstructor value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [CompilerGeneratedAttribute]
internal bool get_IsSortable();
    [CompilerGeneratedAttribute]
internal void set_IsSortable(bool value);
    [NullableContextAttribute("1")]
private static bool IsSortedDictionary(Type type);
    [NullableContextAttribute("1")]
internal IWrappedDictionary CreateWrapper(object dictionary);
    [NullableContextAttribute("1")]
internal IDictionary CreateTemporaryDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonDynamicContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <PropertyNameResolver>k__BackingField;
    private static ThreadSafeStore`2<string, CallSite`1<Func`3<CallSite, object, object>>> callSiteGetters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<string, CallSite`1<Func`4<CallSite, object, object, object>>> callSiteSetters;
    public JsonPropertyCollection Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> PropertyNameResolver { get; public set; }
    public JsonDynamicContract(Type underlyingType);
    private static JsonDynamicContract();
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PropertyNameResolver();
    [CompilerGeneratedAttribute]
public void set_PropertyNameResolver(Func`2<string, string> value);
    private static CallSite`1<Func`3<CallSite, object, object>> CreateCallSiteGetter(string name);
    private static CallSite`1<Func`4<CallSite, object, object, object>> CreateCallSiteSetter(string name);
    internal static bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider, string name, Object& value);
    internal static bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider, string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
    internal static JsonException Create(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("384")]
public class Argon.JsonIgnoreAttribute : Attribute {
}
public class Argon.JsonLinqContract : JsonContract {
    [NullableContextAttribute("1")]
public JsonLinqContract(Type underlyingType);
}
public class Argon.JsonLoadSettings : object {
    [CompilerGeneratedAttribute]
private CommentHandling <CommentHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private LineInfoHandling <LineInfoHandling>k__BackingField;
    public CommentHandling CommentHandling { get; public set; }
    public LineInfoHandling LineInfoHandling { get; public set; }
    [CompilerGeneratedAttribute]
public CommentHandling get_CommentHandling();
    [CompilerGeneratedAttribute]
public void set_CommentHandling(CommentHandling value);
    [CompilerGeneratedAttribute]
public LineInfoHandling get_LineInfoHandling();
    [CompilerGeneratedAttribute]
public void set_LineInfoHandling(LineInfoHandling value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.JsonNameTable : object {
    public abstract virtual string Get(Char[] key, int start, int length);
    public abstract virtual string Add(string name);
}
[AttributeUsageAttribute("1036")]
public class Argon.JsonObjectAttribute : JsonContainerAttribute {
    internal Nullable`1<Required> itemRequired;
    internal Nullable`1<NullValueHandling> itemNullValueHandling;
    [CompilerGeneratedAttribute]
private MemberSerialization <MemberSerialization>k__BackingField;
    public MemberSerialization MemberSerialization { get; public set; }
    public NullValueHandling ItemNullValueHandling { get; public set; }
    public Required ItemRequired { get; public set; }
    public JsonObjectAttribute(MemberSerialization memberSerialization);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    public NullValueHandling get_ItemNullValueHandling();
    public void set_ItemNullValueHandling(NullValueHandling value);
    public Required get_ItemRequired();
    public void set_ItemRequired(Required value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonObjectContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private MemberSerialization <MemberSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MissingMemberHandling> <MissingMemberHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Required> <ItemRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <ItemNullValueHandling>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectConstructor <OverrideCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectConstructor <ParameterizedCreator>k__BackingField;
    private Nullable`1<bool> hasRequiredOrDefaultValueProperties;
    private JsonPropertyCollection creatorParameters;
    public MemberSerialization MemberSerialization { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<Required> ItemRequired { get; public set; }
    public Nullable`1<NullValueHandling> ItemNullValueHandling { get; public set; }
    [NullableAttribute("1")]
public JsonPropertyCollection Properties { get; }
    [NullableAttribute("1")]
public JsonPropertyCollection CreatorParameters { get; }
    public ObjectConstructor OverrideCreator { get; public set; }
    internal ObjectConstructor ParameterizedCreator { get; internal set; }
    internal bool HasRequiredOrDefaultValueProperties { get; }
    [NullableContextAttribute("1")]
public JsonObjectContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    [CompilerGeneratedAttribute]
public Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    [CompilerGeneratedAttribute]
public void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Required> get_ItemRequired();
    [CompilerGeneratedAttribute]
public void set_ItemRequired(Nullable`1<Required> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_ItemNullValueHandling();
    [CompilerGeneratedAttribute]
public void set_ItemNullValueHandling(Nullable`1<NullValueHandling> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [NullableContextAttribute("1")]
public JsonPropertyCollection get_CreatorParameters();
    [CompilerGeneratedAttribute]
public ObjectConstructor get_OverrideCreator();
    [CompilerGeneratedAttribute]
public void set_OverrideCreator(ObjectConstructor value);
    [CompilerGeneratedAttribute]
internal ObjectConstructor get_ParameterizedCreator();
    [CompilerGeneratedAttribute]
internal void set_ParameterizedCreator(ObjectConstructor value);
    internal bool get_HasRequiredOrDefaultValueProperties();
    [NullableContextAttribute("1")]
internal object GetUninitializedObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonPrimitiveContract : JsonContract {
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    private static FrozenDictionary`2<Type, ReadType> readTypeMap;
    internal PrimitiveTypeCode TypeCode { get; internal set; }
    public JsonPrimitiveContract(Type underlyingType);
    private static JsonPrimitiveContract();
    [CompilerGeneratedAttribute]
internal PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
internal void set_TypeCode(PrimitiveTypeCode value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonProperty : object {
    internal Nullable`1<Required> required;
    internal bool hasExplicitDefaultValue;
    private object defaultValue;
    private bool hasGeneratedDefaultValue;
    private string name;
    internal bool skipNameEscape;
    [CompilerGeneratedAttribute]
private JsonContract <PropertyContract>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnderlyingName>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Writable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMemberAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    internal JsonContract PropertyContract { get; internal set; }
    public string PropertyName { get; public set; }
    [NullableAttribute("1")]
public Type DeclaringType { get; }
    public Nullable`1<int> Order { get; public set; }
    public string UnderlyingName { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    [NullableAttribute("1")]
public Type PropertyType { get; public set; }
    public JsonConverter Converter { get; public set; }
    public bool Ignored { get; public set; }
    public bool Readable { get; public set; }
    public bool Writable { get; public set; }
    public bool HasMemberAttribute { get; public set; }
    public object DefaultValue { get; public set; }
    public Required Required { get; public set; }
    public bool IsRequiredSpecified { get; }
    public Nullable`1<bool> IsReference { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    [NullableContextAttribute("1")]
public JsonProperty(Type propertyType, Type declaringType);
    [CompilerGeneratedAttribute]
internal JsonContract get_PropertyContract();
    [CompilerGeneratedAttribute]
internal void set_PropertyContract(JsonContract value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingName(string value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Type get_PropertyType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readable();
    [CompilerGeneratedAttribute]
public void set_Readable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Writable();
    [CompilerGeneratedAttribute]
public void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMemberAttribute();
    [CompilerGeneratedAttribute]
public void set_HasMemberAttribute(bool value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal object GetResolvedDefaultValue();
    public Required get_Required();
    public void set_Required(Required value);
    public bool get_IsRequiredSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [NullableContextAttribute("1")]
internal void WritePropertyName(JsonWriter writer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class Argon.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> nullValueHandling;
    internal Nullable`1<DefaultValueHandling> defaultValueHandling;
    internal Nullable`1<ReferenceLoopHandling> referenceLoopHandling;
    internal Nullable`1<ObjectCreationHandling> objectCreationHandling;
    internal Nullable`1<TypeNameHandling> typeNameHandling;
    internal Nullable`1<bool> isReference;
    internal Nullable`1<int> order;
    internal Nullable`1<Required> required;
    internal Nullable`1<bool> itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> itemTypeNameHandling;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public Type ItemConverterType { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public bool IsReference { get; public set; }
    public int Order { get; public set; }
    public Required Required { get; public set; }
    public string PropertyName { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    public bool ItemIsReference { get; public set; }
    [NullableContextAttribute("1")]
public JsonPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public int get_Order();
    public void set_Order(int value);
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Argon.JsonPropertyCollection : KeyedCollection`2<string, JsonProperty> {
    private Type type;
    private List`1<JsonProperty> list;
    public JsonPropertyCollection(Type type);
    internal void AddRange(IList`1<JsonProperty> collection);
    protected virtual string GetKeyForItem(JsonProperty item);
    public void AddProperty(JsonProperty property);
    public JsonProperty GetClosestMatchProperty(string name);
    public JsonProperty GetClosestMatchProperty(string name, Type type);
    private bool TryGetProperty(string key, JsonProperty& item);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Argon.JsonReader : object {
    private JsonToken tokenType;
    private object value;
    internal char quoteChar;
    internal State currentState;
    private JsonPosition currentPosition;
    private Nullable`1<int> maxDepth;
    private bool hasExceededMaxDepth;
    [NullableAttribute("1")]
private List`1<JsonPosition> stack;
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMultipleContent>k__BackingField;
    [CompilerGeneratedAttribute]
private FloatParseHandling <FloatParseHandling>k__BackingField;
    protected State CurrentState { get; }
    public bool CloseInput { get; public set; }
    public bool SupportMultipleContent { get; public set; }
    public char QuoteChar { get; protected internal set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public JsonToken TokenType { get; }
    [NullableAttribute("1")]
public string StringValue { get; }
    public object Value { get; }
    public Type ValueType { get; }
    public int Depth { get; }
    [NullableAttribute("1")]
public string Path { get; }
    protected State get_CurrentState();
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultipleContent();
    [CompilerGeneratedAttribute]
public void set_SupportMultipleContent(bool value);
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    [CompilerGeneratedAttribute]
public FloatParseHandling get_FloatParseHandling();
    [CompilerGeneratedAttribute]
public void set_FloatParseHandling(FloatParseHandling value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public virtual JsonToken get_TokenType();
    [NullableContextAttribute("1")]
public object GetValue();
    [NullableContextAttribute("1")]
public string get_StringValue();
    public virtual object get_Value();
    [NullableContextAttribute("1")]
public object GetValueType();
    public virtual Type get_ValueType();
    public virtual int get_Depth();
    [NullableContextAttribute("1")]
public virtual string get_Path();
    internal JsonPosition GetPosition(int depth);
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    internal Nullable`1<int> ReadInt32String(string s);
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    [NullableContextAttribute("1")]
internal Byte[] ReadArrayIntoByteArray();
    [NullableContextAttribute("1")]
private bool ReadArrayElementIntoByteArrayReportDone(List`1<byte> buffer);
    public virtual Nullable`1<double> ReadAsDouble();
    internal Nullable`1<double> ReadDoubleString(string s);
    public virtual Nullable`1<bool> ReadAsBoolean();
    internal Nullable`1<bool> ReadBooleanString(string s);
    public virtual Nullable`1<decimal> ReadAsDecimal();
    internal Nullable`1<decimal> ReadDecimalString(string s);
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    internal void ReaderReadAndAssert();
    [NullableContextAttribute("1")]
internal JsonReaderException CreateUnexpectedEndException();
    internal void ReadIntoWrappedTypeObject();
    public void Skip();
    protected void SetToken(JsonToken newToken);
    protected void SetToken(JsonToken newToken, object value);
    [NullableContextAttribute("1")]
protected void SetPropertyToken(string value);
    protected void SetToken(JsonToken newToken, object value, bool updateIndex);
    protected void SetNoneToken();
    protected void SetUndefinedToken();
    protected void SetNullToken();
    protected void SetToken(Nullable`1<DateTime> value);
    protected void SetToken(Nullable`1<DateTimeOffset> value);
    protected void SetToken(Nullable`1<bool> value);
    protected void SetToken(Nullable`1<double> value);
    protected void SetToken(Nullable`1<float> value);
    protected void SetToken(Nullable`1<decimal> value);
    protected void SetToken(string value);
    protected void SetToken(Nullable`1<int> value);
    protected void SetToken(Byte[] value);
    internal void SetPostValueState(bool updateIndex);
    private void UpdateScopeWithFinishedValue();
    private void ValidateEnd(JsonToken endToken);
    protected void SetStateBasedOnCurrent();
    private void SetFinished();
    private JsonContainerType GetTypeForCloseToken(JsonToken token);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void ReadAndAssert();
    internal void ReadForTypeAndAssert(JsonContract contract, bool hasConverter);
    internal bool ReadForType(JsonContract contract, bool hasConverter);
    internal bool ReadAndMoveToContent();
    internal bool MoveToContent();
    private JsonToken GetContentToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonReaderException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonReaderException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonReaderException Create(JsonReader reader, string message, Exception exception);
    internal static JsonReaderException Create(IJsonLineInfo info, string path, string message, Exception exception);
}
[AttributeUsageAttribute("384")]
public class Argon.JsonRequiredAttribute : Attribute {
}
public class Argon.JsonSelectSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RegexMatchTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorWhenNoMatch>k__BackingField;
    public Nullable`1<TimeSpan> RegexMatchTimeout { get; public set; }
    public bool ErrorWhenNoMatch { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RegexMatchTimeout();
    [CompilerGeneratedAttribute]
public void set_RegexMatchTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_ErrorWhenNoMatch();
    [CompilerGeneratedAttribute]
public void set_ErrorWhenNoMatch(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonSerializationException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [NullableAttribute("2")]
public string Path { get; }
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
    public JsonSerializationException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonSerializationException Create(JsonReader reader, string message);
    internal static JsonSerializationException Create(JsonReader reader, string message, Exception exception);
    internal static JsonSerializationException Create(IJsonLineInfo lineInfo, string path, string message, Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonSerializer : object {
    private IContractResolver contractResolver;
    private Nullable`1<int> maxDepth;
    private bool maxDepthSet;
    [CompilerGeneratedAttribute]
private OnDeserializeError <DeserializeError>k__BackingField;
    [CompilerGeneratedAttribute]
private OnSerializeError <SerializeError>k__BackingField;
    [CompilerGeneratedAttribute]
private OnSerialized <Serialized>k__BackingField;
    [CompilerGeneratedAttribute]
private OnSerializing <Serializing>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDeserialized <Deserialized>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDeserializing <Deserializing>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferenceResolver <ReferenceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializationBinder <SerializationBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameAssemblyFormatHandling> <TypeNameAssemblyFormatHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PreserveReferencesHandling> <PreserveReferencesHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MissingMemberHandling> <MissingMemberHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConstructorHandling> <ConstructorHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MetadataPropertyHandling> <MetadataPropertyHandling>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Formatting> <Formatting>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FloatParseHandling> <FloatParseHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <FloatPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FloatFormatHandling> <FloatFormatHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EscapeHandling> <EscapeHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CheckAdditionalContent>k__BackingField;
    public OnDeserializeError DeserializeError { get; public set; }
    public OnSerializeError SerializeError { get; public set; }
    public OnSerialized Serialized { get; public set; }
    public OnSerializing Serializing { get; public set; }
    public OnDeserialized Deserialized { get; public set; }
    public OnDeserializing Deserializing { get; public set; }
    public IReferenceResolver ReferenceResolver { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    public Nullable`1<TypeNameAssemblyFormatHandling> TypeNameAssemblyFormatHandling { get; public set; }
    public Nullable`1<PreserveReferencesHandling> PreserveReferencesHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<ConstructorHandling> ConstructorHandling { get; public set; }
    public Nullable`1<MetadataPropertyHandling> MetadataPropertyHandling { get; public set; }
    [NullableAttribute("1")]
public List`1<JsonConverter> Converters { get; }
    public IContractResolver ContractResolver { get; public set; }
    public Nullable`1<Formatting> Formatting { get; public set; }
    public Nullable`1<FloatParseHandling> FloatParseHandling { get; public set; }
    public Nullable`1<byte> FloatPrecision { get; public set; }
    public Nullable`1<FloatFormatHandling> FloatFormatHandling { get; public set; }
    public Nullable`1<EscapeHandling> EscapeHandling { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Nullable`1<bool> CheckAdditionalContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual OnDeserializeError get_DeserializeError();
    [CompilerGeneratedAttribute]
public virtual void set_DeserializeError(OnDeserializeError value);
    [CompilerGeneratedAttribute]
public virtual OnSerializeError get_SerializeError();
    [CompilerGeneratedAttribute]
public virtual void set_SerializeError(OnSerializeError value);
    [CompilerGeneratedAttribute]
public virtual OnSerialized get_Serialized();
    [CompilerGeneratedAttribute]
public virtual void set_Serialized(OnSerialized value);
    [CompilerGeneratedAttribute]
public virtual OnSerializing get_Serializing();
    [CompilerGeneratedAttribute]
public virtual void set_Serializing(OnSerializing value);
    [CompilerGeneratedAttribute]
public virtual OnDeserialized get_Deserialized();
    [CompilerGeneratedAttribute]
public virtual void set_Deserialized(OnDeserialized value);
    [CompilerGeneratedAttribute]
public virtual OnDeserializing get_Deserializing();
    [CompilerGeneratedAttribute]
public virtual void set_Deserializing(OnDeserializing value);
    [CompilerGeneratedAttribute]
public virtual IReferenceResolver get_ReferenceResolver();
    [CompilerGeneratedAttribute]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public virtual ISerializationBinder get_SerializationBinder();
    [CompilerGeneratedAttribute]
public virtual void set_SerializationBinder(ISerializationBinder value);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public virtual void set_EqualityComparer(IEqualityComparer value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public virtual void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TypeNameAssemblyFormatHandling> get_TypeNameAssemblyFormatHandling();
    [CompilerGeneratedAttribute]
public virtual void set_TypeNameAssemblyFormatHandling(Nullable`1<TypeNameAssemblyFormatHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<PreserveReferencesHandling> get_PreserveReferencesHandling();
    [CompilerGeneratedAttribute]
public virtual void set_PreserveReferencesHandling(Nullable`1<PreserveReferencesHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public virtual void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    [CompilerGeneratedAttribute]
public virtual void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public virtual void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public virtual void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ConstructorHandling> get_ConstructorHandling();
    [CompilerGeneratedAttribute]
public virtual void set_ConstructorHandling(Nullable`1<ConstructorHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<MetadataPropertyHandling> get_MetadataPropertyHandling();
    [CompilerGeneratedAttribute]
public virtual void set_MetadataPropertyHandling(Nullable`1<MetadataPropertyHandling> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual List`1<JsonConverter> get_Converters();
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    [NullableContextAttribute("1")]
public JsonContract ResolveContract(Type type);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Formatting> get_Formatting();
    [CompilerGeneratedAttribute]
public virtual void set_Formatting(Nullable`1<Formatting> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<FloatParseHandling> get_FloatParseHandling();
    [CompilerGeneratedAttribute]
public virtual void set_FloatParseHandling(Nullable`1<FloatParseHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<byte> get_FloatPrecision();
    [CompilerGeneratedAttribute]
public virtual void set_FloatPrecision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<FloatFormatHandling> get_FloatFormatHandling();
    [CompilerGeneratedAttribute]
public virtual void set_FloatFormatHandling(Nullable`1<FloatFormatHandling> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<EscapeHandling> get_EscapeHandling();
    [CompilerGeneratedAttribute]
public virtual void set_EscapeHandling(Nullable`1<EscapeHandling> value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_CheckAdditionalContent();
    [CompilerGeneratedAttribute]
public virtual void set_CheckAdditionalContent(Nullable`1<bool> value);
    internal bool IsCheckAdditionalContentSet();
    [NullableContextAttribute("1")]
public static JsonSerializer Create();
    [NullableContextAttribute("1")]
public static JsonSerializer Create(JsonSerializerSettings settings);
    [NullableContextAttribute("1")]
public static JsonSerializer CreateDefault();
    [NullableContextAttribute("1")]
public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    [NullableContextAttribute("1")]
private static void ApplySerializerSettings(JsonSerializer serializer, JsonSerializerSettings settings);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public object TryDeserialize(JsonReader reader);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public object Deserialize(TextReader reader, Type type);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public object TryDeserialize(TextReader reader, Type type);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public T Deserialize(JsonReader reader);
    [DebuggerStepThroughAttribute]
public T TryDeserialize(JsonReader reader);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader, Type type);
    [DebuggerStepThroughAttribute]
public object TryDeserialize(JsonReader reader, Type type);
    [NullableContextAttribute("1")]
internal virtual object DeserializeInternal(JsonReader reader, Type type);
    internal virtual object TryDeserializeInternal(JsonReader reader, Type type);
    [NullableContextAttribute("1")]
internal void SetupReader(JsonReader reader, Nullable`1& previousFloatParseHandling, Nullable`1& previousMaxDepth);
    [NullableContextAttribute("1")]
private void ResetReader(JsonReader reader, Nullable`1<FloatParseHandling> previousFloatParseHandling, Nullable`1<int> previousMaxDepth);
    [NullableContextAttribute("1")]
public void Serialize(TextWriter textWriter, object value);
    public void Serialize(JsonWriter jsonWriter, object value, Type type);
    [NullableContextAttribute("1")]
public void Serialize(TextWriter textWriter, object value, Type type);
    [NullableContextAttribute("1")]
public void Serialize(JsonWriter jsonWriter, object value);
    internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type type);
    [NullableContextAttribute("1")]
internal IReferenceResolver GetReferenceResolver();
    [NullableContextAttribute("1")]
internal JsonConverter GetMatchingConverter(Type type);
    [NullableContextAttribute("1")]
internal static JsonConverter GetMatchingConverter(IList`1<JsonConverter> converters, Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JsonSerializerSettings : object {
    internal Nullable`1<int> maxDepth;
    internal bool maxDepthSet;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MissingMemberHandling> <MissingMemberHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PreserveReferencesHandling> <PreserveReferencesHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MetadataPropertyHandling> <MetadataPropertyHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameAssemblyFormatHandling> <TypeNameAssemblyFormatHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConstructorHandling> <ConstructorHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IReferenceResolver> <ReferenceResolverProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializationBinder <SerializationBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDeserializeError <DeserializeError>k__BackingField;
    [CompilerGeneratedAttribute]
private OnSerializeError <SerializeError>k__BackingField;
    [CompilerGeneratedAttribute]
private OnSerialized <Serialized>k__BackingField;
    [CompilerGeneratedAttribute]
private OnSerializing <Serializing>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDeserialized <Deserialized>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDeserializing <Deserializing>k__BackingField;
    private static int DefaultMaxDepth;
    [CompilerGeneratedAttribute]
private Nullable`1<Formatting> <Formatting>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FloatFormatHandling> <FloatFormatHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FloatParseHandling> <FloatParseHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <FloatPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EscapeHandling> <EscapeHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CheckAdditionalContent>k__BackingField;
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    [NullableAttribute("1")]
public List`1<JsonConverter> Converters { get; public set; }
    public Nullable`1<PreserveReferencesHandling> PreserveReferencesHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    public Nullable`1<MetadataPropertyHandling> MetadataPropertyHandling { get; public set; }
    public Nullable`1<TypeNameAssemblyFormatHandling> TypeNameAssemblyFormatHandling { get; public set; }
    public Nullable`1<ConstructorHandling> ConstructorHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public Func`1<IReferenceResolver> ReferenceResolverProvider { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public OnDeserializeError DeserializeError { get; public set; }
    public OnSerializeError SerializeError { get; public set; }
    public OnSerialized Serialized { get; public set; }
    public OnSerializing Serializing { get; public set; }
    public OnDeserialized Deserialized { get; public set; }
    public OnDeserializing Deserializing { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Nullable`1<Formatting> Formatting { get; public set; }
    public Nullable`1<FloatFormatHandling> FloatFormatHandling { get; public set; }
    public Nullable`1<FloatParseHandling> FloatParseHandling { get; public set; }
    public Nullable`1<byte> FloatPrecision { get; public set; }
    public Nullable`1<EscapeHandling> EscapeHandling { get; public set; }
    public Nullable`1<bool> CheckAdditionalContent { get; public set; }
    [NullableContextAttribute("1")]
public JsonSerializerSettings(JsonSerializerSettings original);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    [CompilerGeneratedAttribute]
public void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<JsonConverter> get_Converters();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Converters(List`1<JsonConverter> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PreserveReferencesHandling> get_PreserveReferencesHandling();
    [CompilerGeneratedAttribute]
public void set_PreserveReferencesHandling(Nullable`1<PreserveReferencesHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MetadataPropertyHandling> get_MetadataPropertyHandling();
    [CompilerGeneratedAttribute]
public void set_MetadataPropertyHandling(Nullable`1<MetadataPropertyHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameAssemblyFormatHandling> get_TypeNameAssemblyFormatHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameAssemblyFormatHandling(Nullable`1<TypeNameAssemblyFormatHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ConstructorHandling> get_ConstructorHandling();
    [CompilerGeneratedAttribute]
public void set_ConstructorHandling(Nullable`1<ConstructorHandling> value);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public void set_ContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public void set_EqualityComparer(IEqualityComparer value);
    [CompilerGeneratedAttribute]
public Func`1<IReferenceResolver> get_ReferenceResolverProvider();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolverProvider(Func`1<IReferenceResolver> value);
    [CompilerGeneratedAttribute]
public ISerializationBinder get_SerializationBinder();
    [CompilerGeneratedAttribute]
public void set_SerializationBinder(ISerializationBinder value);
    [CompilerGeneratedAttribute]
public OnDeserializeError get_DeserializeError();
    [CompilerGeneratedAttribute]
public void set_DeserializeError(OnDeserializeError value);
    [CompilerGeneratedAttribute]
public OnSerializeError get_SerializeError();
    [CompilerGeneratedAttribute]
public void set_SerializeError(OnSerializeError value);
    [CompilerGeneratedAttribute]
public OnSerialized get_Serialized();
    [CompilerGeneratedAttribute]
public void set_Serialized(OnSerialized value);
    [CompilerGeneratedAttribute]
public OnSerializing get_Serializing();
    [CompilerGeneratedAttribute]
public void set_Serializing(OnSerializing value);
    [CompilerGeneratedAttribute]
public OnDeserialized get_Deserialized();
    [CompilerGeneratedAttribute]
public void set_Deserialized(OnDeserialized value);
    [CompilerGeneratedAttribute]
public OnDeserializing get_Deserializing();
    [CompilerGeneratedAttribute]
public void set_Deserializing(OnDeserializing value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Formatting> get_Formatting();
    [CompilerGeneratedAttribute]
public void set_Formatting(Nullable`1<Formatting> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FloatFormatHandling> get_FloatFormatHandling();
    [CompilerGeneratedAttribute]
public void set_FloatFormatHandling(Nullable`1<FloatFormatHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FloatParseHandling> get_FloatParseHandling();
    [CompilerGeneratedAttribute]
public void set_FloatParseHandling(Nullable`1<FloatParseHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_FloatPrecision();
    [CompilerGeneratedAttribute]
public void set_FloatPrecision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public Nullable`1<EscapeHandling> get_EscapeHandling();
    [CompilerGeneratedAttribute]
public void set_EscapeHandling(Nullable`1<EscapeHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CheckAdditionalContent();
    [CompilerGeneratedAttribute]
public void set_CheckAdditionalContent(Nullable`1<bool> value);
}
public class Argon.JsonStringContract : JsonPrimitiveContract {
    [NullableContextAttribute("1")]
public JsonStringContract(Type underlyingType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonTextReader : JsonReader {
    private static char unicodeReplacementChar;
    private static int maximumJavascriptIntegerCharacterLength;
    private static int LargeBufferLength;
    private TextReader reader;
    private int charsUsed;
    private int lineStartPos;
    private int lineNumber;
    private bool isEndOfFile;
    private StringBuffer stringBuffer;
    private StringReference stringReference;
    private Char[] charBuffer;
    private int charPos;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonNameTable <PropertyNameTable>k__BackingField;
    [NullableAttribute("2")]
public JsonNameTable PropertyNameTable { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public JsonTextReader(TextReader reader, int bufferSize);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonNameTable get_PropertyNameTable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PropertyNameTable(JsonNameTable value);
    private void EnsureBufferNotEmpty();
    private void SetNewLine(bool hasNextChar);
    private void OnNewLine(int pos);
    private void ParseString(char quote, ReadType readType);
    private void ParseReadString(char quote, ReadType readType);
    private static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    private void ShiftBufferIfNeeded();
    private int ReadData(bool append);
    private void PrepareBufferForReadData(bool append, int charsRequired);
    private int ReadData(bool append, int charsRequired);
    private bool EnsureChars(int relativePosition, bool append);
    private bool ReadChars(int relativePosition, bool append);
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    [NullableContextAttribute("2")]
public virtual string ReadAsString();
    [NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    [NullableContextAttribute("2")]
private object ReadStringValue(ReadType readType);
    [NullableContextAttribute("2")]
private object FinishReadQuotedStringValue(ReadType readType);
    private JsonReaderException CreateUnexpectedCharacterException(char c);
    public virtual Nullable`1<bool> ReadAsBoolean();
    private void ProcessValueComma();
    [NullableContextAttribute("2")]
private object ReadNumberValue(ReadType readType);
    [NullableContextAttribute("2")]
private object FinishReadQuotedNumber(ReadType readType);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    private void HandleNull();
    private void ReadFinished();
    private bool ReadNullChar();
    private void ReadStringIntoBuffer(char quote);
    private void FinishReadStringIntoBuffer(int charPos, int initialPosition, int lastWritePosition);
    private void WriteCharToBuffer(char writeChar, int lastWritePosition, int writeToPosition);
    private char ConvertUnicode(bool enoughChars);
    private char ParseUnicode();
    private void ReadNumberIntoBuffer();
    private bool ReadNumberCharIntoBuffer(char currentChar, int charPos);
    private void ClearRecentString();
    private bool ParsePostValue(bool ignoreComments);
    private bool ParseObject();
    private bool ParseProperty();
    private static bool ValidIdentifierChar(char value);
    private void ParseUnquotedProperty();
    private bool ReadUnquotedPropertyReportIfDone(char currentChar, int initialPosition);
    private bool ParseValue();
    private void ProcessLineFeed();
    private void ProcessCarriageReturn(bool append);
    private void EatWhitespace();
    private void ParseNumber(ReadType readType);
    private void ParseReadNumber(ReadType readType, char firstChar, int initialPosition);
    private JsonReaderException ThrowReaderError(string message, Exception ex);
    private void ParseComment(bool setToken);
    private void EndComment(bool setToken, int initialPosition, int endPosition);
    private bool MatchValue(string value);
    private bool MatchValue(bool enoughChars, string value);
    private bool MatchValueWithTrailingSeparator(string value);
    private bool IsSeparator(char c);
    private void ParseTrue();
    private void ParseNull();
    private void ParseUndefined();
    private void ParseFalse();
    private object ParseNumberNegativeInfinity(ReadType readType);
    private object ParseNumberNegativeInfinity(ReadType readType, bool matched);
    private object ParseNumberPositiveInfinity(ReadType readType);
    private object ParseNumberPositiveInfinity(ReadType readType, bool matched);
    private object ParseNumberNaN(ReadType readType);
    private object ParseNumberNaN(ReadType readType, bool matched);
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonTextWriter : JsonWriter {
    private static int indentCharBufferSize;
    private TextWriter writer;
    private static char indentChar;
    private static int indentation;
    private char quoteChar;
    [NullableAttribute("2")]
private Boolean[] charEscapeFlags;
    [NullableAttribute("2")]
private Char[] writeBuffer;
    private Char[] indentChars;
    private string newLine;
    [CompilerGeneratedAttribute]
private bool <QuoteName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuoteValue>k__BackingField;
    public char QuoteChar { get; public set; }
    public bool QuoteName { get; public set; }
    public bool QuoteValue { get; public set; }
    public JsonTextWriter(TextWriter textWriter);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    [CompilerGeneratedAttribute]
public bool get_QuoteName();
    [CompilerGeneratedAttribute]
public void set_QuoteName(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuoteValue();
    [CompilerGeneratedAttribute]
public void set_QuoteValue(bool value);
    public virtual void Flush();
    public virtual void Close();
    private void CloseBufferAndWriter();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    [NullableContextAttribute("0")]
public virtual void WritePropertyName(ReadOnlySpan`1<char> name);
    public virtual void WritePropertyName(string name, bool escape);
    [NullableContextAttribute("0")]
public virtual void WritePropertyName(ReadOnlySpan`1<char> name, bool escape);
    protected virtual void OnEscapeHandlingChanged();
    private void UpdateCharEscapeFlags();
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    private void WriteValueInternal(string value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [NullableContextAttribute("0")]
public virtual void WriteRaw(ReadOnlySpan`1<char> json);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    [NullableContextAttribute("0")]
public virtual void WriteValue(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
private void WriteEscapedString(ReadOnlySpan`1<char> value, bool quote);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    private int WriteValueToBuffer(DateTime value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTimeOffset value);
    private int WriteValueToBuffer(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private void EnsureBuffer();
    internal Char[] EnsureBuffer(int length, int copyTo);
    private void WriteIntegerValue(long value);
    private void WriteIntegerValue(ulong value, bool negative);
    private int WriteNumberToBuffer(ulong value, bool negative);
    private void WriteIntegerValue(int value);
    private void WriteIntegerValue(UInt32 value, bool negative);
    private int WriteNumberToBuffer(UInt32 value, bool negative);
}
public enum Argon.JsonToken : Enum {
    public int value__;
    public static JsonToken None;
    public static JsonToken StartObject;
    public static JsonToken StartArray;
    public static JsonToken PropertyName;
    public static JsonToken Comment;
    public static JsonToken Raw;
    public static JsonToken Integer;
    public static JsonToken Float;
    public static JsonToken String;
    public static JsonToken Boolean;
    public static JsonToken Null;
    public static JsonToken Undefined;
    public static JsonToken EndObject;
    public static JsonToken EndArray;
    public static JsonToken Date;
    public static JsonToken Bytes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.JsonWriter : object {
    private static State[][] stateArray;
    private List`1<JsonPosition> stack;
    private JsonPosition currentPosition;
    private State currentState;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteOnClose>k__BackingField;
    private EscapeHandling escapeHandling;
    [CompilerGeneratedAttribute]
private Formatting <Formatting>k__BackingField;
    [CompilerGeneratedAttribute]
private FloatFormatHandling <FloatFormatHandling>k__BackingField;
    private Nullable`1<byte> floatPrecision;
    [CompilerGeneratedAttribute]
private string <FloatFormat>k__BackingField;
    public bool CloseOutput { get; public set; }
    public bool AutoCompleteOnClose { get; public set; }
    protected internal int Top { get; }
    public WriteState WriteState { get; }
    internal string ContainerPath { get; }
    public string Path { get; }
    public Formatting Formatting { get; public set; }
    public EscapeHandling EscapeHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public Nullable`1<byte> FloatPrecision { get; public set; }
    protected string FloatFormat { get; private set; }
    private static JsonWriter();
    internal static State[][] BuildStateArray();
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteOnClose();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteOnClose(bool value);
    protected internal int get_Top();
    public WriteState get_WriteState();
    internal string get_ContainerPath();
    public string get_Path();
    [CompilerGeneratedAttribute]
public Formatting get_Formatting();
    [CompilerGeneratedAttribute]
public void set_Formatting(Formatting value);
    public EscapeHandling get_EscapeHandling();
    public void set_EscapeHandling(EscapeHandling value);
    protected virtual void OnEscapeHandlingChanged();
    [CompilerGeneratedAttribute]
public FloatFormatHandling get_FloatFormatHandling();
    [CompilerGeneratedAttribute]
public void set_FloatFormatHandling(FloatFormatHandling value);
    public Nullable`1<byte> get_FloatPrecision();
    public void set_FloatPrecision(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
protected string get_FloatFormat();
    [CompilerGeneratedAttribute]
private void set_FloatFormat(string value);
    internal void UpdateScopeWithFinishedValue();
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    [NullableContextAttribute("0")]
public virtual void WritePropertyName(ReadOnlySpan`1<char> name);
    [NullableContextAttribute("0")]
public virtual void WritePropertyName(ReadOnlySpan`1<char> name, bool escape);
    public virtual void WriteEnd();
    public void WriteToken(JsonReader reader);
    public void WriteToken(JsonReader reader, bool writeChildren);
    [NullableContextAttribute("2")]
public void WriteToken(JsonToken token, object value);
    public void WriteToken(JsonToken token);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeComments);
    private static bool IsWriteTokenIncomplete(JsonReader reader, bool writeChildren, int initialDepth);
    private static int CalculateWriteTokenInitialDepth(JsonReader reader);
    private static int CalculateWriteTokenFinalDepth(JsonReader reader);
    private void WriteEnd(JsonContainerType type);
    private void AutoCompleteAll();
    private JsonToken GetCloseTokenForType(JsonContainerType type);
    private void AutoCompleteClose(JsonContainerType type);
    private int CalculateLevelsToComplete(JsonContainerType type);
    private void UpdateCurrentState();
    protected virtual void WriteEnd(JsonToken token);
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    private void AutoComplete(JsonToken tokenBeingWritten);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [NullableContextAttribute("2")]
public abstract virtual void WriteRaw(string json);
    [NullableContextAttribute("0")]
public abstract virtual void WriteRaw(ReadOnlySpan`1<char> json);
    [NullableContextAttribute("0")]
public virtual void WriteRawValue(ReadOnlySpan`1<char> json);
    [NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [NullableContextAttribute("0")]
public virtual void WriteValue(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(StringBuilder value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<int> value);
    public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(Nullable`1<long> value);
    public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(Nullable`1<short> value);
    public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    [NullableContextAttribute("0")]
public virtual void WriteComment(ReadOnlySpan`1<char> text);
    public virtual void WriteWhitespace(string ws);
    [NullableContextAttribute("0")]
public virtual void WriteWhitespace(ReadOnlySpan`1<char> ws);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    internal static void WriteValue(JsonWriter writer, PrimitiveTypeCode typeCode, object value);
    private static void ResolveConvertibleValue(IConvertible convertible, PrimitiveTypeCode& typeCode, Object& value);
    private static JsonWriterException CreateUnsupportedTypeException(JsonWriter writer, object value);
    protected void SetWriteState(JsonToken token, object value);
    private void InternalWriteEnd(JsonContainerType container);
    internal void InternalWritePropertyName(string name);
    [NullableContextAttribute("0")]
internal void InternalWritePropertyName(ReadOnlySpan`1<char> name);
    internal void InternalWriteStart(JsonToken token, JsonContainerType container);
    internal void InternalWriteValue(JsonToken token);
    internal void InternalWriteWhitespace(string ws);
    [NullableContextAttribute("0")]
internal void InternalWriteWhitespace(ReadOnlySpan`1<char> ws);
    internal void InternalWriteComment();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JsonWriterException : JsonException {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    public JsonWriterException(string message, string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonWriterException Create(JsonWriter writer, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class Argon.JToken : object {
    [NullableAttribute("2")]
private static JTokenEqualityComparer equalityComparer;
    private Nullable`1<int> lineNumber;
    private Nullable`1<int> linePosition;
    private static JTokenType[] BooleanTypes;
    private static JTokenType[] NumberTypes;
    private static JTokenType[] BigIntegerTypes;
    private static JTokenType[] StringTypes;
    private static JTokenType[] GuidTypes;
    private static JTokenType[] TimeSpanTypes;
    private static JTokenType[] UriTypes;
    private static JTokenType[] CharTypes;
    private static JTokenType[] DateTimeTypes;
    private static JTokenType[] BytesTypes;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JContainer <Parent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JToken <Next>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JToken <Previous>k__BackingField;
    public static JTokenEqualityComparer EqualityComparer { get; }
    [NullableAttribute("2")]
public JContainer Parent { get; internal set; }
    public JToken Root { get; }
    public JTokenType Type { get; }
    public bool HasValues { get; }
    [NullableAttribute("2")]
public JToken Next { get; internal set; }
    [NullableAttribute("2")]
public JToken Previous { get; internal set; }
    public string Path { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    [NullableAttribute("2")]
public JToken First { get; }
    [NullableAttribute("2")]
public JToken Last { get; }
    private IJEnumerable`1<JToken> Argon.IJEnumerable<Argon.JToken>.Item { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    private static JToken();
    public static JTokenEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public JContainer get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Parent(JContainer value);
    public JToken get_Root();
    internal abstract virtual JToken CloneToken();
    internal abstract virtual bool DeepEquals(JToken node);
    public abstract virtual JTokenType get_Type();
    public abstract virtual bool get_HasValues();
    [NullableContextAttribute("2")]
public static bool DeepEquals(JToken t1, JToken t2);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JToken get_Next();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Next(JToken value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JToken get_Previous();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Previous(JToken value);
    public string get_Path();
    [NullableContextAttribute("2")]
public void AddAfterSelf(object content);
    [NullableContextAttribute("2")]
public void AddBeforeSelf(object content);
    public IEnumerable`1<JToken> Ancestors();
    public IEnumerable`1<JToken> AncestorsAndSelf();
    [IteratorStateMachineAttribute("Argon.JToken/<GetAncestors>d__43")]
private IEnumerable`1<JToken> GetAncestors(bool self);
    [IteratorStateMachineAttribute("Argon.JToken/<AfterSelf>d__44")]
public IEnumerable`1<JToken> AfterSelf();
    [IteratorStateMachineAttribute("Argon.JToken/<BeforeSelf>d__45")]
public IEnumerable`1<JToken> BeforeSelf();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    [NullableContextAttribute("2")]
public virtual T Value(object key);
    [NullableContextAttribute("2")]
public virtual JToken get_First();
    [NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [NullableContextAttribute("0")]
public JEnumerable`1<T> Children();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public void Remove();
    public void Replace(JToken value);
    public abstract virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual string ToString();
    public string ToString(Formatting formatting, JsonConverter[] converters);
    private static JValue EnsureValue(JToken value);
    private static string GetType(JToken token);
    private static bool ValidateTokenNullable(JToken o, JTokenType[] validTypes);
    private static bool ValidateToken(JToken o, JTokenType[] validTypes);
    private static void ValidateToken(JToken value, JValue v, JTokenType[] jTokenTypes);
    public static bool op_Explicit(JToken value);
    public static DateTimeOffset op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<bool> op_Explicit(JToken value);
    public static long op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTime> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTimeOffset> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<decimal> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<double> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<char> op_Explicit(JToken value);
    public static int op_Explicit(JToken value);
    public static short op_Explicit(JToken value);
    public static ushort op_Explicit(JToken value);
    public static char op_Explicit(JToken value);
    public static byte op_Explicit(JToken value);
    public static sbyte op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<int> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<short> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<ushort> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<byte> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<sbyte> op_Explicit(JToken value);
    public static DateTime op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<long> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<float> op_Explicit(JToken value);
    public static decimal op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<UInt32> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<ulong> op_Explicit(JToken value);
    public static double op_Explicit(JToken value);
    public static float op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static string op_Explicit(JToken value);
    public static UInt32 op_Explicit(JToken value);
    public static ulong op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Byte[] op_Explicit(JToken value);
    public static Guid op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<Guid> op_Explicit(JToken value);
    public static TimeSpan op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<TimeSpan> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Uri op_Explicit(JToken value);
    private static BigInteger ToBigInteger(JToken value);
    private static Nullable`1<BigInteger> ToBigIntegerNullable(JToken value);
    public static JToken op_Implicit(bool value);
    public static JToken op_Implicit(DateTimeOffset value);
    public static JToken op_Implicit(byte value);
    public static JToken op_Implicit(Nullable`1<byte> value);
    public static JToken op_Implicit(sbyte value);
    public static JToken op_Implicit(Nullable`1<sbyte> value);
    public static JToken op_Implicit(Nullable`1<bool> value);
    public static JToken op_Implicit(long value);
    public static JToken op_Implicit(Nullable`1<DateTime> value);
    public static JToken op_Implicit(Nullable`1<DateTimeOffset> value);
    public static JToken op_Implicit(Nullable`1<decimal> value);
    public static JToken op_Implicit(Nullable`1<double> value);
    public static JToken op_Implicit(short value);
    public static JToken op_Implicit(ushort value);
    public static JToken op_Implicit(int value);
    public static JToken op_Implicit(Nullable`1<int> value);
    public static JToken op_Implicit(DateTime value);
    public static JToken op_Implicit(Nullable`1<long> value);
    public static JToken op_Implicit(Nullable`1<float> value);
    public static JToken op_Implicit(decimal value);
    public static JToken op_Implicit(Nullable`1<short> value);
    public static JToken op_Implicit(Nullable`1<ushort> value);
    public static JToken op_Implicit(Nullable`1<UInt32> value);
    public static JToken op_Implicit(Nullable`1<ulong> value);
    public static JToken op_Implicit(double value);
    public static JToken op_Implicit(float value);
    public static JToken op_Implicit(string value);
    public static JToken op_Implicit(UInt32 value);
    public static JToken op_Implicit(ulong value);
    public static JToken op_Implicit(Byte[] value);
    public static JToken op_Implicit(Uri value);
    public static JToken op_Implicit(TimeSpan value);
    public static JToken op_Implicit(Nullable`1<TimeSpan> value);
    public static JToken op_Implicit(Guid value);
    public static JToken op_Implicit(Nullable`1<Guid> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JToken> System.Collections.Generic.IEnumerable<Argon.JToken>.GetEnumerator();
    internal abstract virtual int GetDeepHashCode();
    private sealed virtual override IJEnumerable`1<JToken> Argon.IJEnumerable<Argon.JToken>.get_Item(object key);
    public JsonReader CreateReader();
    internal static JToken FromObjectInternal(object o, JsonSerializer serializer);
    public static JToken FromObject(object o);
    public static JToken FromObject(object o, JsonSerializer serializer);
    [NullableContextAttribute("2")]
public T ToObject();
    public object ToObject(Type type);
    [NullableContextAttribute("2")]
public T ToObject(JsonSerializer serializer);
    [NullableContextAttribute("2")]
public object ToObject(Type type, JsonSerializer serializer);
    public static JToken ReadFrom(JsonReader reader);
    public static JToken ReadFrom(JsonReader reader, JsonLoadSettings settings);
    public static JToken Parse(string json);
    public static JToken Parse(string json, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader);
    [NullableContextAttribute("2")]
internal void SetLineInfo(IJsonLineInfo lineInfo, JsonLoadSettings settings);
    private sealed virtual override bool Argon.IJsonLineInfo.HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override object System.ICloneable.Clone();
    public JToken DeepClone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JTokenEqualityComparer : object {
    public sealed virtual bool Equals(JToken x, JToken y);
    public sealed virtual int GetHashCode(JToken obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.JTokenReader : JsonReader {
    private JToken root;
    [NullableAttribute("2")]
private string initialPath;
    [NullableAttribute("2")]
private JToken parent;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JToken <CurrentToken>k__BackingField;
    [NullableAttribute("2")]
public JToken CurrentToken { get; private set; }
    private int Argon.IJsonLineInfo.LineNumber { get; }
    private int Argon.IJsonLineInfo.LinePosition { get; }
    public string Path { get; }
    public JTokenReader(JToken token);
    public JTokenReader(JToken token, string initialPath);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JToken get_CurrentToken();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentToken(JToken value);
    public virtual bool Read();
    private bool ReadOver(JToken t);
    private bool ReadToEnd();
    private static Nullable`1<JsonToken> GetEndToken(JContainer c);
    private bool ReadInto(JContainer c);
    private bool SetEnd(JContainer c);
    private void SetToken(JToken token);
    [NullableContextAttribute("2")]
private static string SafeToString(object value);
    private sealed virtual override bool Argon.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Argon.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Argon.IJsonLineInfo.get_LinePosition();
    public virtual string get_Path();
}
public enum Argon.JTokenType : Enum {
    public int value__;
    public static JTokenType None;
    public static JTokenType Object;
    public static JTokenType Array;
    public static JTokenType Property;
    public static JTokenType Comment;
    public static JTokenType Integer;
    public static JTokenType Float;
    public static JTokenType String;
    public static JTokenType Boolean;
    public static JTokenType Null;
    public static JTokenType Undefined;
    public static JTokenType Date;
    public static JTokenType Raw;
    public static JTokenType Bytes;
    public static JTokenType Guid;
    public static JTokenType Uri;
    public static JTokenType TimeSpan;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JTokenWriter : JsonWriter {
    private JContainer token;
    private JContainer parent;
    private JValue value;
    [CompilerGeneratedAttribute]
private JToken <CurrentToken>k__BackingField;
    public JToken CurrentToken { get; private set; }
    public JToken Token { get; }
    [NullableContextAttribute("1")]
public JTokenWriter(JContainer container);
    [CompilerGeneratedAttribute]
public JToken get_CurrentToken();
    [CompilerGeneratedAttribute]
private void set_CurrentToken(JToken value);
    public JToken get_Token();
    public virtual void Flush();
    public virtual void WriteStartObject();
    [NullableContextAttribute("1")]
private void AddParent(JContainer container);
    private void RemoveParent();
    public virtual void WriteStartArray();
    protected virtual void WriteEnd(JsonToken token);
    [NullableContextAttribute("1")]
public virtual void WritePropertyName(string name);
    private void AddRawValue(object value, JTokenType type);
    internal void AddJValue(JValue value);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    [NullableContextAttribute("0")]
public virtual void WriteRaw(ReadOnlySpan`1<char> json);
    public virtual void WriteComment(string text);
    [NullableContextAttribute("0")]
public virtual void WriteComment(ReadOnlySpan`1<char> text);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Uri value);
    [NullableContextAttribute("1")]
internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeComments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Argon.JValue : JToken {
    private JTokenType valueType;
    private object value;
    public bool HasValues { get; }
    public JTokenType Type { get; }
    public object Value { get; public set; }
    internal JValue(object value, JTokenType type);
    [NullableContextAttribute("1")]
public JValue(JValue other);
    public JValue(long value);
    public JValue(decimal value);
    public JValue(char value);
    public JValue(ulong value);
    public JValue(double value);
    public JValue(float value);
    public JValue(DateTime value);
    public JValue(DateTimeOffset value);
    public JValue(bool value);
    public JValue(string value);
    public JValue(Guid value);
    public JValue(Uri value);
    public JValue(TimeSpan value);
    public JValue(object value);
    [NullableContextAttribute("1")]
internal virtual bool DeepEquals(JToken node);
    public virtual bool get_HasValues();
    [NullableContextAttribute("1")]
private static int CompareBigInteger(BigInteger i1, object i2);
    internal static int Compare(JTokenType valueType, object objA, object objB);
    [NullableContextAttribute("1")]
private static int CompareFloat(object objA, object objB);
    private static bool Operation(ExpressionType operation, object objA, object objB, Object& result);
    [NullableContextAttribute("1")]
internal virtual JToken CloneToken();
    [NullableContextAttribute("1")]
public static JValue CreateComment(string value);
    [NullableContextAttribute("1")]
public static JValue CreateString(string value);
    [NullableContextAttribute("1")]
public static JValue CreateNull();
    [NullableContextAttribute("1")]
public static JValue CreateUndefined();
    private static JTokenType GetValueType(Nullable`1<JTokenType> current, object value);
    private static JTokenType GetStringValueType(Nullable`1<JTokenType> current);
    public virtual JTokenType get_Type();
    [NullableContextAttribute("1")]
public object GetValue();
    public object get_Value();
    public void set_Value(object value);
    [NullableContextAttribute("1")]
public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    [NullableContextAttribute("1")]
private static bool ValuesEquals(JValue v1, JValue v2);
    public sealed virtual bool Equals(JValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(string format);
    [NullableContextAttribute("1")]
public sealed virtual string ToString(IFormatProvider formatProvider);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("1")]
protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(JValue obj);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    [NullableContextAttribute("1")]
private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
public class Argon.KebabCaseNamingStrategy : NamingStrategy {
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.KeyValuePairConverter : JsonConverter {
    private static string keyName;
    private static string valueName;
    private static ThreadSafeStore`2<Type, ReflectionObject> reflectionObjectPerType;
    private static KeyValuePairConverter();
    private static ReflectionObject InitializeReflectionObject(Type type);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type type);
}
public enum Argon.LineInfoHandling : Enum {
    public int value__;
    public static LineInfoHandling Ignore;
    public static LineInfoHandling Load;
}
public enum Argon.MemberSerialization : Enum {
    public int value__;
    public static MemberSerialization OptOut;
    public static MemberSerialization OptIn;
    public static MemberSerialization Fields;
}
public enum Argon.MetadataPropertyHandling : Enum {
    public int value__;
    public static MetadataPropertyHandling Default;
    public static MetadataPropertyHandling ReadAhead;
    public static MetadataPropertyHandling Ignore;
}
public enum Argon.MissingMemberHandling : Enum {
    public int value__;
    public static MissingMemberHandling Ignore;
    public static MissingMemberHandling Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Argon.NamingStrategy : object {
    [CompilerGeneratedAttribute]
private bool <ProcessDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideSpecifiedNames>k__BackingField;
    public bool ProcessDictionaryKeys { get; public set; }
    public bool OverrideSpecifiedNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_ProcessDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideSpecifiedNames();
    [CompilerGeneratedAttribute]
public void set_OverrideSpecifiedNames(bool value);
    public virtual string GetPropertyName(string name, bool hasSpecifiedName);
    public virtual string GetDictionaryKey(string name, object original);
    protected abstract virtual string ResolvePropertyName(string name);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
protected bool Equals(NamingStrategy other);
}
public enum Argon.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
public class Argon.ObjectConstructor : MulticastDelegate {
    public ObjectConstructor(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public enum Argon.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
public class Argon.OnDeserialized : MulticastDelegate {
    public OnDeserialized(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(JsonReader reader, object target);
    public virtual IAsyncResult BeginInvoke(JsonReader reader, object target, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Argon.OnDeserializeError : MulticastDelegate {
    public OnDeserializeError(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object currentObject, object originalObject, ErrorLocation location, Exception exception, Action markAsHandled);
    public virtual IAsyncResult BeginInvoke(object currentObject, object originalObject, ErrorLocation location, Exception exception, Action markAsHandled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Argon.OnDeserializing : MulticastDelegate {
    public OnDeserializing(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(JsonReader reader, object target);
    public virtual IAsyncResult BeginInvoke(JsonReader reader, object target, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Argon.OnSerialized : MulticastDelegate {
    public OnSerialized(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(JsonWriter writer, object target);
    public virtual IAsyncResult BeginInvoke(JsonWriter writer, object target, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Argon.OnSerializeError : MulticastDelegate {
    public OnSerializeError(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object currentObject, object originalObject, ErrorLocation location, Exception exception, Action markAsHandled);
    public virtual IAsyncResult BeginInvoke(object currentObject, object originalObject, ErrorLocation location, Exception exception, Action markAsHandled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Argon.OnSerializing : MulticastDelegate {
    public OnSerializing(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(JsonWriter writer, object target);
    public virtual IAsyncResult BeginInvoke(JsonWriter writer, object target, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Argon.PreserveReferencesHandling : Enum {
    public int value__;
    public static PreserveReferencesHandling None;
    public static PreserveReferencesHandling Objects;
    public static PreserveReferencesHandling Arrays;
    public static PreserveReferencesHandling All;
}
public enum Argon.ReferenceLoopHandling : Enum {
    public int value__;
    public static ReferenceLoopHandling Error;
    public static ReferenceLoopHandling Ignore;
    public static ReferenceLoopHandling Serialize;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.RegexConverter : JsonConverter {
    private static string patternName;
    private static string optionsName;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    private static object ReadRegexString(JsonReader reader);
    private static Regex ReadRegexObject(JsonReader reader, JsonSerializer serializer);
    public virtual bool CanConvert(Type type);
}
public enum Argon.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
public class Argon.SnakeCaseNamingStrategy : NamingStrategy {
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Argon.StringBuilderConverter : JsonConverter`1<StringBuilder> {
    public virtual void WriteJson(JsonWriter writer, StringBuilder value, JsonSerializer serializer);
    public virtual StringBuilder ReadJson(JsonReader reader, Type type, StringBuilder existingValue, bool hasExisting, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Argon.StringEnumConverter : JsonConverter {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowIntegerValues>k__BackingField;
    [NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    public bool AllowIntegerValues { get; public set; }
    public StringEnumConverter(NamingStrategy namingStrategy, bool allowIntegerValues);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    [CompilerGeneratedAttribute]
public bool get_AllowIntegerValues();
    [CompilerGeneratedAttribute]
public void set_AllowIntegerValues(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Argon.StringWriterConverter : JsonConverter`1<StringWriter> {
    public virtual void WriteJson(JsonWriter writer, StringWriter value, JsonSerializer serializer);
    public virtual StringWriter ReadJson(JsonReader reader, Type type, StringWriter existingValue, bool hasExisting, JsonSerializer serializer);
}
public enum Argon.TypeNameAssemblyFormatHandling : Enum {
    public int value__;
    public static TypeNameAssemblyFormatHandling Simple;
    public static TypeNameAssemblyFormatHandling Full;
}
[FlagsAttribute]
public enum Argon.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Argon.VersionConverter : JsonConverter`1<Version> {
    public virtual void WriteJson(JsonWriter writer, Version value, JsonSerializer serializer);
    public virtual Version ReadJson(JsonReader reader, Type type, Version existingValue, bool hasExisting, JsonSerializer serializer);
}
public enum Argon.WriteState : Enum {
    public int value__;
    public static WriteState Error;
    public static WriteState Closed;
    public static WriteState Object;
    public static WriteState Array;
    public static WriteState Property;
    public static WriteState Start;
}
internal static class AttributeCache`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<ICustomAttributeProvider, T> TypeAttributeCache;
    private static AttributeCache`1();
    [NullableContextAttribute("1")]
public static T GetAttribute(ICustomAttributeProvider provider);
}
[ExtensionAttribute]
internal static class Base64Encoder : object {
    private static int Base64LineSize;
    private static int LineSizeInBytes;
    [ExtensionAttribute]
public static void WriteBase64(TextWriter writer, ReadOnlySpan`1<byte> buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class BidirectionalDictionary`2 : object {
    [CompilerGeneratedAttribute]
private string <duplicateFirstErrorMessage>P;
    [CompilerGeneratedAttribute]
private string <duplicateSecondErrorMessage>P;
    private IDictionary`2<TFirst, TSecond> firstToSecond;
    private IDictionary`2<TSecond, TFirst> secondToFirst;
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer, string duplicateFirstErrorMessage, string duplicateSecondErrorMessage);
    public void Set(TFirst first, TSecond second);
    public bool TryGetByFirst(TFirst first, TSecond& second);
    public bool TryGetBySecond(TSecond second, TFirst& first);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class BoxedPrimitives : object {
    internal static object BooleanTrue;
    internal static object BooleanFalse;
    private static object Int32_M1;
    private static object Int32_0;
    private static object Int32_1;
    private static object Int32_2;
    private static object Int32_3;
    private static object Int32_4;
    private static object Int32_5;
    private static object Int32_6;
    private static object Int32_7;
    private static object Int32_8;
    private static object Int64_M1;
    private static object Int64_0;
    private static object Int64_1;
    private static object Int64_2;
    private static object Int64_3;
    private static object Int64_4;
    private static object Int64_5;
    private static object Int64_6;
    private static object Int64_7;
    private static object Int64_8;
    private static object DecimalZero;
    private static object DecimalZeroWithTrailingZero;
    internal static object DoubleNaN;
    internal static object DoublePositiveInfinity;
    internal static object DoubleNegativeInfinity;
    internal static object DoubleZero;
    internal static object DoubleNegativeZero;
    private static BoxedPrimitives();
    internal static object Get(bool value);
    internal static object Get(int value);
    internal static object Get(long value);
    internal static object Get(decimal value);
    internal static object Get(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class BufferUtils : object {
    public static Char[] RentBuffer(int size);
    [NullableContextAttribute("2")]
public static void ReturnBuffer(Char[] buffer);
    public static Char[] EnsureBufferSize(int size, Char[] buffer);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class BytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-string-system-iformatprovider-system-byte@)")]
public static bool TryParse(string target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Byte& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class CollectionUtils : object {
    [ExtensionAttribute]
public static bool IsDictionary(Type type);
    [ExtensionAttribute]
public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType);
    [ExtensionAttribute]
public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType, Type constructorArgumentType);
    [ExtensionAttribute]
public static bool Contains(List`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOfReference(List`1<T> list, T item);
    private static IList`1<int> GetDimensions(IList values, int dimensionsCount);
    private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, Int32[] indices);
    private static object JaggedArrayGetValue(IList values, Int32[] indices);
    public static Array ToMultidimensionalArray(IList values, Type type, int rank);
}
internal class CollectionWrapper`1 : object {
    private IList list;
    private ICollection`1<T> genericCollection;
    private object syncRoot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingCollection { get; }
    public CollectionWrapper`1(IList list);
    public CollectionWrapper`1(ICollection`1<T> list);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private static void VerifyValueType(object value);
    private static bool IsCompatibleObject(object value);
    public sealed virtual object get_UnderlyingCollection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ConvertUtils : object {
    private static FrozenDictionary`2<Type, PrimitiveTypeCode> TypeCodeMap;
    private static TypeInformation[] PrimitiveTypeCodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Tuple`2<Type, Type>, Func`2<object, object>> castConverters;
    private static ConvertUtils();
    public static PrimitiveTypeCode GetTypeCode(Type type);
    public static PrimitiveTypeCode GetTypeCode(Type type, Boolean& isEnum);
    public static TypeInformation GetTypeInformation(IConvertible convertible);
    [ExtensionAttribute]
public static bool IsConvertible(Type type);
    public static TimeSpan ParseTimeSpan(string input);
    private static Func`2<object, object> CreateCastConverter(Tuple`2<Type, Type> t);
    internal static BigInteger ToBigInteger(object value);
    public static object FromBigInteger(BigInteger i, Type targetType);
    public static object Convert(object initialValue, Type targetType);
    private static bool TryConvert(object initialValue, Type targetType, Object& value);
    private static ConvertResult TryConvertInternal(object initialValue, Type targetType, Object& value);
    [NullableContextAttribute("2")]
public static object ConvertOrCast(object initialValue, Type targetType);
    private static object EnsureTypeAssignable(object value, Type initialType, Type targetType);
    public static bool IsInteger(object value);
    public static ParseResult Int32TryParse(Char[] chars, int start, int length, Int32& value);
    public static ParseResult Int64TryParse(Char[] chars, int start, int length, Int64& value);
    public static ParseResult DecimalTryParse(Char[] chars, int start, int length, Decimal& value);
    public static bool TryConvertGuid(string s, Guid& g);
    public static bool TryHexTextToInt(Char[] text, int start, int end, Int32& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private Char[] text;
    private int end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    private static DateTimeParser();
    public bool Parse(Char[] text, int startIndex, int length);
    private bool ParseDate(int start);
    private bool ParseTimeAndZoneAndWhitespace(int start);
    private bool ParseTime(Int32& start);
    private bool ParseZone(int start);
    private bool Parse4Digit(int start, Int32& num);
    private bool Parse2Digit(int start, Int32& num);
    private bool ParseChar(int start, char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class DateTimeUtils : object {
    private static string IsoDateFormat;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysPer4Years;
    private static int DaysPerYear;
    private static long TicksPerDay;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    internal static bool TryParseDateTimeOffsetIso(StringReference text, DateTimeOffset& dt);
    private static DateTime CreateDateTime(DateTimeParser parser);
    internal static bool TryParseDateTime(string s, DateTime& dt);
    internal static bool TryParseDateTimeOffset(string s, DateTimeOffset& dt);
    internal static void WriteDateTimeString(TextWriter writer, DateTime value);
    internal static int WriteDateTimeString(Char[] chars, int start, DateTime value, Nullable`1<TimeSpan> offset, DateTimeKind kind);
    private static int WriteDefaultIsoDate(Char[] chars, int start, DateTime dt);
    private static void CopyIntToCharArray(Char[] chars, int start, int value, int digits);
    internal static int WriteDateTimeOffset(Char[] chars, int start, TimeSpan offset);
    internal static void WriteDateTimeOffsetString(TextWriter writer, DateTimeOffset value);
    private static void GetDateValues(DateTime td, Int32& year, Int32& month, Int32& day);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DefaultReferenceResolver : object {
    private int referenceCount;
    private static BidirectionalDictionary`2<string, object> GetMappings(object context);
    public sealed virtual object ResolveReference(object context, string reference);
    public sealed virtual string GetReference(object context, object value);
    public sealed virtual void AddReference(object context, string reference, object value);
    public sealed virtual bool IsReferenced(object context, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class DelegateFactory : object {
    private static ConstructorInfo targetParameterCountExceptionConstructor;
    private static Type[] formatProviderType;
    private static Type[] objectArray;
    private static DelegateFactory();
    private static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    public static ObjectConstructor CreateParameterizedConstructor(MethodBase method);
    public static MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private static void GenerateCreateMethodCallIL(MethodBase method, ILGenerator generator, int argsIndex);
    public static Func`1<T> CreateDefaultConstructor(Type type);
    private static void GenerateCreateDefaultConstructorIL(Type type, ILGenerator generator, Type delegateType);
    public static Func`2<T, object> CreateGet(PropertyInfo property);
    private static void GenerateCreateGetPropertyIL(PropertyInfo property, ILGenerator generator);
    public static Func`2<T, object> CreateGet(FieldInfo field);
    private static void GenerateCreateGetFieldIL(FieldInfo field, ILGenerator generator);
    public static Action`2<T, object> CreateSet(FieldInfo field);
    private static void GenerateCreateSetFieldIL(FieldInfo field, ILGenerator generator);
    public static Action`2<T, object> CreateSet(PropertyInfo property);
    private static void GenerateCreateSetPropertyIL(PropertyInfo property, ILGenerator generator);
    public static Func`2<T, object> CreateGet(MemberInfo member);
    public static Action`2<T, object> CreateSet(MemberInfo member);
}
[DefaultMemberAttribute("Item")]
internal class DictionaryWrapper`2 : object {
    private IDictionary dictionary;
    private IDictionary`2<TKey, TValue> genericDictionary;
    private IReadOnlyDictionary`2<TKey, TValue> readOnlyDictionary;
    private object syncRoot;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingDictionary { get; }
    public DictionaryWrapper`2(IDictionary dictionary);
    public DictionaryWrapper`2(IDictionary`2<TKey, TValue> dictionary);
    public DictionaryWrapper`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingDictionary();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class DoublePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-string-system-iformatprovider-system-double@)")]
public static bool TryParse(string target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Double& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class DriveInfoConverter : JsonConverter`1<DriveInfo> {
    public virtual void WriteJson(JsonWriter writer, DriveInfo value, JsonSerializer serializer);
    public virtual DriveInfo ReadJson(JsonReader reader, Type type, DriveInfo existingValue, bool hasExisting, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DynamicProxy`1 : object {
    public virtual IEnumerable`1<string> GetDynamicMemberNames(T instance);
    public virtual bool TryBinaryOperation(T instance, BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(T instance, ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(T instance, CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(T instance, DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(T instance, DeleteMemberBinder binder);
    public virtual bool TryGetIndex(T instance, GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(T instance, GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(T instance, InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(T instance, InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(T instance, SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(T instance, SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(T instance, UnaryOperationBinder binder, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DynamicProxyMetaObject`1 : DynamicMetaObject {
    private DynamicProxy`1<T> proxy;
    internal DynamicProxyMetaObject`1(Expression expression, T value, DynamicProxy`1<T> proxy);
    private bool IsOverridden(string method);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    private static IEnumerable`1<Expression> GetArgs(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args, DynamicMetaObject value);
    private static ConstantExpression Constant(DynamicMetaObjectBinder binder);
    private DynamicMetaObject CallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback, Fallback<T> fallbackInvoke);
    private DynamicMetaObject BuildCallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, DynamicMetaObject fallbackResult, Fallback<T> fallbackInvoke);
    private DynamicMetaObject CallMethodReturnLast(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback);
    private DynamicMetaObject CallMethodNoResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback);
    private BindingRestrictions GetRestrictions();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class DynamicUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(IDynamicMetaObjectProvider dynamicProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EnumInfo : object {
    public bool IsFlags;
    public UInt64[] Values;
    public String[] Names;
    public String[] ResolvedNames;
    public EnumInfo(bool isFlags, UInt64[] values, String[] names, String[] resolvedNames);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class EnumPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getvalues")]
public static TEnum[] GetValues();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getnames")]
public static String[] GetNames();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char)))")]
public static TEnum Parse(ReadOnlySpan`1<char> value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char))-system-boolean)")]
public static TEnum Parse(ReadOnlySpan`1<char> value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, TEnum& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-system-boolean-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, bool ignoreCase, TEnum& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class EnumUtils : object {
    private static char EnumSeparatorChar;
    private static string EnumSeparatorString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Tuple`2<Type, NamingStrategy>, EnumInfo> ValuesAndNamesPerEnum;
    private static EnumUtils();
    private static EnumInfo InitializeValuesAndNames(Tuple`2<Type, NamingStrategy> key);
    public static bool TryToString(Type enumType, object value, NamingStrategy namingStrategy, String& name);
    private static string InternalFlagsFormat(EnumInfo entry, ulong result);
    private static ulong ToUInt64(object value);
    public static object ParseEnum(Type enumType, NamingStrategy namingStrategy, string value, bool disallowNumber);
    private static Nullable`1<int> MatchName(string value, String[] enumNames, String[] resolvedNames, int valueIndex, int valueSubstringLength, StringComparison comparison);
    private static Nullable`1<int> FindIndexByName(String[] enumNames, string value, int valueIndex, int valueSubstringLength, StringComparison comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ErrorContext : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <OriginalObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public Exception Exception { get; }
    [NullableAttribute("2")]
public object OriginalObject { get; }
    public bool Handled { get; public set; }
    internal ErrorContext(object originalObject, Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_OriginalObject();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class GuidPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.guid.tryparse#system-guid-tryparse(system-string-system-iformatprovider-system-guid@)")]
public static bool TryParse(string target, IFormatProvider provider, Guid& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void PushInstance(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void PushArrayInstance(ILGenerator generator, int argsIndex, int arrayIndex);
    [ExtensionAttribute]
public static void BoxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void UnboxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void CallMethod(ILGenerator generator, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void Return(ILGenerator generator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImmutableCollectionsUtils : object {
    private static FrozenDictionary`2<Type, TypeInfo> arrayDefinitions;
    private static FrozenDictionary`2<Type, TypeInfo> dictionaryDefinitions;
    private static ImmutableCollectionsUtils();
    internal static bool TryBuildImmutableForArrayContract(Type targetType, Type collectionItemType, Type& createdType, ObjectConstructor& parameterizedCreator);
    private static MethodInfo GetArrayCreateRange(Type type);
    internal static bool TryBuildImmutableForDictionaryContract(Type targetType, Type keyItemType, Type valueItemType, Type& createdType, ObjectConstructor& parameterizedCreator);
    private static MethodInfo GetDictionaryCreateRange(Type type);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class IntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-string-system-iformatprovider-system-int32@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
internal interface IWrappedCollection {
    [NullableAttribute("1")]
public object UnderlyingCollection { get; }
    [NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingCollection();
}
internal interface IWrappedDictionary {
    public object UnderlyingDictionary { get; }
    public abstract virtual object get_UnderlyingDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JavaScriptUtils : object {
    internal static Boolean[] SingleQuoteEscapeFlags;
    internal static Boolean[] DoubleQuoteEscapeFlags;
    private static Boolean[] htmlEscapeFlags;
    private static Boolean[] noEscapeFlags;
    private static int unicodeTextLength;
    private static string escapedUnicodeText;
    private static JavaScriptUtils();
    public static Boolean[] GetCharEscapeFlags(EscapeHandling escapeHandling, char quoteChar);
    [NullableContextAttribute("2")]
public static bool ShouldEscapeJavaScriptString(string s);
    public static void WriteEscapedJavaScriptString(TextWriter writer, ReadOnlySpan`1<char> value, char delimiter, bool appendDelimiters, Boolean[] escapeFlags, EscapeHandling escapeHandling, Char[]& buffer);
    private static void WriteEscapedJavaScriptNonNullString(TextWriter writer, ReadOnlySpan`1<char> value, Boolean[] escapeFlags, EscapeHandling escapeHandling, Char[]& buffer);
    [NullableContextAttribute("0")]
public static string ToEscapedJavaScriptString(ReadOnlySpan`1<char> value, char delimiter, bool appendDelimiters, EscapeHandling escapeHandling);
    [NullableContextAttribute("0")]
private static int FirstCharToEscape(ReadOnlySpan`1<char> value, Boolean[] escapeFlags, EscapeHandling escapeHandling);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
internal class JPropertyKeyedCollection : Collection`1<JToken> {
    private static IEqualityComparer`1<string> comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, JToken> dictionary;
    public JToken Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JToken> Values { get; }
    private static JPropertyKeyedCollection();
    private void AddKey(string key, JToken item);
    protected virtual void ClearItems();
    public bool Contains(string key);
    private void EnsureDictionary();
    private static string GetKeyForItem(JToken item);
    protected virtual void InsertItem(int index, JToken item);
    public bool Remove(string key);
    protected virtual void RemoveItem(int index);
    private void RemoveKey(string key);
    protected virtual void SetItem(int index, JToken item);
    public JToken get_Item(string key);
    public bool TryGetValue(string key, JToken& value);
    public ICollection`1<string> get_Keys();
    public ICollection`1<JToken> get_Values();
    public int IndexOfReference(JToken t);
    public bool Compare(JPropertyKeyedCollection other);
}
internal enum JsonContainerType : Enum {
    public int value__;
    public static JsonContainerType None;
    public static JsonContainerType Object;
    public static JsonContainerType Array;
}
internal enum JsonContractType : Enum {
    public int value__;
    public static JsonContractType None;
    public static JsonContractType Object;
    public static JsonContractType Array;
    public static JsonContractType Primitive;
    public static JsonContractType String;
    public static JsonContractType Dictionary;
    public static JsonContractType Dynamic;
    public static JsonContractType Linq;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JsonPosition : ValueType {
    internal JsonContainerType Type;
    internal int Position;
    [NullableAttribute("2")]
internal string PropertyName;
    internal bool HasIndex;
    private static SearchValues`1<char> specialCharacters;
    public JsonPosition(JsonContainerType type);
    private static JsonPosition();
    private int CalculateLength();
    [NullableContextAttribute("2")]
private void WriteTo(StringBuilder builder, StringWriter& writer, Char[]& buffer);
    private static bool TypeHasIndex(JsonContainerType type);
    internal static string BuildPath(List`1<JsonPosition> positions, Nullable`1<JsonPosition> currentPosition);
    internal static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class JsonSerializerInternalBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BidirectionalDictionary`2<string, object> mappings;
    internal JsonSerializer Serializer;
    [NullableAttribute("2")]
protected JsonSerializerProxy InternalSerializer;
    internal BidirectionalDictionary`2<string, object> DefaultReferenceMappings { get; }
    protected JsonSerializerInternalBase(JsonSerializer serializer);
    protected static bool HasFlag(Nullable`1<DefaultValueHandling> value, DefaultValueHandling flag);
    internal BidirectionalDictionary`2<string, object> get_DefaultReferenceMappings();
    protected NullValueHandling ResolvedNullValueHandling(JsonObjectContract containerContract, JsonProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JsonSerializerInternalReader : JsonSerializerInternalBase {
    [NullableAttribute("2")]
private ErrorContext currentDeserializeErrorContext;
    public JsonSerializerInternalReader(JsonSerializer serializer);
    [NullableContextAttribute("2")]
private JsonContract GetContractSafe(Type type);
    private JsonContract GetContract(Type type);
    [NullableContextAttribute("2")]
public object Deserialize(JsonReader reader, Type type, Nullable`1<bool> checkAdditionalContent);
    private JsonSerializerProxy GetInternalSerializer();
    [NullableContextAttribute("2")]
private static JToken CreateJToken(JsonReader reader, JsonContract contract);
    private JToken CreateJObject(JsonReader reader);
    [NullableContextAttribute("2")]
private object CreateValueInternal(JsonReader reader, Type type, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [NullableContextAttribute("2")]
private static bool CoerceEmptyStringToNull(Type type, JsonContract contract, string s);
    private static string GetExpectedDescription(JsonContract contract);
    [NullableContextAttribute("2")]
private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private object CreateObject(JsonReader reader, Type type, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [NullableContextAttribute("2")]
private bool ReadMetadataPropertiesToken(JTokenReader reader, Type& type, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [NullableContextAttribute("2")]
private bool ReadMetadataProperties(JsonReader reader, Type& type, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [NullableContextAttribute("2")]
private void ResolveTypeName(JsonReader reader, Type& type, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, string qualifiedTypeName);
    private static JsonArrayContract EnsureArrayContract(JsonReader reader, Type type, JsonContract contract);
    [NullableContextAttribute("2")]
private object CreateList(JsonReader reader, Type type, JsonContract contract, JsonProperty member, object existingValue, string id);
    [NullableContextAttribute("2")]
private static bool HasNoDefinedType(JsonContract contract);
    [NullableContextAttribute("2")]
private static object EnsureType(JsonReader reader, object value, CultureInfo culture, JsonContract contract, Type targetType);
    private bool SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target);
    [NullableContextAttribute("2")]
private bool CalculatePropertyDetails(JsonProperty property, JsonConverter& propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target, Boolean& useExistingValue, Object& currentValue, JsonContract& propertyContract, Boolean& gottenCurrentValue, Boolean& ignoredValue);
    private void AddReference(JsonReader reader, string id, object value);
    [NullableContextAttribute("2")]
private bool ShouldSetPropertyValue(JsonProperty property, JsonObjectContract contract, object value);
    private IList CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator);
    private IDictionary CreateNewDictionary(JsonReader reader, JsonDictionaryContract contract, Boolean& createdFromNonDefaultCreator);
    private void OnDeserializing(JsonReader reader, object value);
    private void OnDeserialized(JsonReader reader, object value);
    private object PopulateDictionary(IDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, JsonProperty containerProperty, string id);
    private void PopulateMultidimensionalArray(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private void ThrowUnexpectedEndException(JsonReader reader, object currentObject, string message);
    private object PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private object CreateDynamic(JsonReader reader, JsonDynamicContract contract, JsonProperty member, string id);
    private object CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor creator, string id);
    private object DeserializeConvertible(JsonConverter converter, JsonReader reader, Type type, object existingValue);
    private List`1<CreatorPropertyContext> ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type type);
    public object CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, string id, Boolean& createdFromNonDefaultCreator);
    private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, string id);
    private bool CheckPropertyName(JsonReader reader, string memberName);
    private void EndProcessProperty(object newObject, JsonReader reader, JsonObjectContract contract, int initialDepth, JsonProperty property, PropertyPresence presence, bool setDefaultValue);
    private static void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary`2<JsonProperty, PropertyPresence> requiredProperties);
    private void HandleError(JsonReader reader, bool readPastError, int initialDepth);
    protected void ClearDeserializeErrorContext();
    protected bool IsDeserializeErrorHandled(object currentObject, object member, string path, Exception exception);
    [CompilerGeneratedAttribute]
private void <IsDeserializeErrorHandled>b__45_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JsonSerializerInternalWriter : JsonSerializerInternalBase {
    [NullableAttribute("2")]
private Type rootType;
    private int rootLevel;
    private List`1<object> serializeStack;
    [NullableAttribute("2")]
private ErrorContext currentSerializeErrorContext;
    public JsonSerializerInternalWriter(JsonSerializer serializer);
    [NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type type);
    private JsonSerializerProxy GetInternalSerializer();
    [NullableContextAttribute("2")]
private JsonContract GetContractSafe(object value);
    private JsonContract GetContract(object value);
    private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private static Nullable`1<bool> ResolveIsReference(JsonContract contract, JsonProperty property, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteReference(object value, JsonProperty property, JsonContract valueContract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteProperty(object memberValue, JsonObjectContract containerContract, JsonProperty property);
    [NullableContextAttribute("2")]
private bool CheckForCircularReference(JsonWriter writer, object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void WriteReference(JsonWriter writer, object value);
    private string GetReference(JsonWriter writer, object value);
    private static bool TryConvertToString(object value, Type type, String& s);
    private void SerializeString(JsonWriter writer, object value, JsonStringContract contract);
    private void OnSerializing(JsonWriter writer, object value);
    private void OnSerialized(JsonWriter writer, object value);
    private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool CalculatePropertyValues(JsonWriter writer, object value, JsonContainerContract contract, JsonProperty member, JsonProperty property, JsonContract& memberContract, Object& memberValue);
    private void WriteObjectStart(JsonWriter writer, object value, JsonContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private static bool HasCreatorParameter(JsonContainerContract contract, JsonProperty property);
    private void WriteReferenceIdProperty(JsonWriter writer, object value);
    private void WriteTypeProperty(JsonWriter writer, Type type);
    private static bool HasFlag(Nullable`1<PreserveReferencesHandling> value, PreserveReferencesHandling flag);
    private static bool HasFlag(Nullable`1<TypeNameHandling> value, TypeNameHandling flag);
    private void SerializeConvertible(JsonWriter writer, JsonConverter converter, object value, JsonContract contract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeArrayItem(JsonWriter writer, JsonArrayContract contract, JsonProperty member, object value, object underlyingList, int initialDepth, Int32& index);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, Int32[] indices);
    private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeDynamic(JsonWriter writer, IDynamicMetaObjectProvider value, JsonDynamicContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteDynamicProperty(object memberValue);
    [NullableContextAttribute("2")]
private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeDictionary(JsonWriter writer, IDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeDictionaryItem(JsonWriter writer, JsonDictionaryContract contract, JsonProperty member, object key, object value, JsonContract keyContract, object underlyingDictionary);
    private static string GetDictionaryPropertyName(object key, JsonContract keyContract, DictionaryKeyResolver keyResolver, Boolean& escape);
    private static string GetDictionaryPropertyName(object key, JsonContract contract, Boolean& escape);
    private void HandleError(JsonWriter writer, int initialDepth);
    protected void ClearSerializeErrorContext();
    protected bool IsSerializeErrorHandled(object currentObject, object member, string path, Exception exception);
    [IteratorStateMachineAttribute("JsonSerializerInternalWriter/<<SerializeDictionary>g__Items|37_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<DictionaryEntry> <SerializeDictionary>g__Items|37_0(IDictionary values);
    [CompilerGeneratedAttribute]
private void <IsSerializeErrorHandled>b__44_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class JsonSerializerProxy : JsonSerializer {
    private JsonSerializerInternalReader serializerReader;
    private JsonSerializerInternalWriter serializerWriter;
    [NullableAttribute("1")]
internal JsonSerializer serializer;
    public OnSerializeError SerializeError { get; public set; }
    public OnDeserializeError DeserializeError { get; public set; }
    public OnSerialized Serialized { get; public set; }
    public OnSerializing Serializing { get; public set; }
    public OnDeserialized Deserialized { get; public set; }
    public OnDeserializing Deserializing { get; public set; }
    public IReferenceResolver ReferenceResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<PreserveReferencesHandling> PreserveReferencesHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    public Nullable`1<MetadataPropertyHandling> MetadataPropertyHandling { get; public set; }
    public Nullable`1<TypeNameAssemblyFormatHandling> TypeNameAssemblyFormatHandling { get; public set; }
    public Nullable`1<ConstructorHandling> ConstructorHandling { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public Nullable`1<Formatting> Formatting { get; public set; }
    public Nullable`1<FloatFormatHandling> FloatFormatHandling { get; public set; }
    public Nullable`1<FloatParseHandling> FloatParseHandling { get; public set; }
    public Nullable`1<byte> FloatPrecision { get; public set; }
    public Nullable`1<EscapeHandling> EscapeHandling { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Nullable`1<bool> CheckAdditionalContent { get; public set; }
    [NullableContextAttribute("1")]
public JsonSerializerProxy(JsonSerializerInternalReader serializerReader);
    [NullableContextAttribute("1")]
public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter);
    public virtual OnSerializeError get_SerializeError();
    public virtual void set_SerializeError(OnSerializeError value);
    public virtual OnDeserializeError get_DeserializeError();
    public virtual void set_DeserializeError(OnDeserializeError value);
    public virtual OnSerialized get_Serialized();
    public virtual void set_Serialized(OnSerialized value);
    public virtual OnSerializing get_Serializing();
    public virtual void set_Serializing(OnSerializing value);
    public virtual OnDeserialized get_Deserialized();
    public virtual void set_Deserialized(OnDeserialized value);
    public virtual OnDeserializing get_Deserializing();
    public virtual void set_Deserializing(OnDeserializing value);
    public virtual IReferenceResolver get_ReferenceResolver();
    public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual IEqualityComparer get_EqualityComparer();
    public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    public virtual Nullable`1<NullValueHandling> get_NullValueHandling();
    public virtual void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    public virtual Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    public virtual Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    public virtual Nullable`1<PreserveReferencesHandling> get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(Nullable`1<PreserveReferencesHandling> value);
    public virtual Nullable`1<TypeNameHandling> get_TypeNameHandling();
    public virtual void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    public virtual Nullable`1<MetadataPropertyHandling> get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(Nullable`1<MetadataPropertyHandling> value);
    public virtual Nullable`1<TypeNameAssemblyFormatHandling> get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(Nullable`1<TypeNameAssemblyFormatHandling> value);
    public virtual Nullable`1<ConstructorHandling> get_ConstructorHandling();
    public virtual void set_ConstructorHandling(Nullable`1<ConstructorHandling> value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    public virtual Nullable`1<Formatting> get_Formatting();
    public virtual void set_Formatting(Nullable`1<Formatting> value);
    public virtual Nullable`1<FloatFormatHandling> get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(Nullable`1<FloatFormatHandling> value);
    public virtual Nullable`1<FloatParseHandling> get_FloatParseHandling();
    public virtual void set_FloatParseHandling(Nullable`1<FloatParseHandling> value);
    public virtual Nullable`1<byte> get_FloatPrecision();
    public virtual void set_FloatPrecision(Nullable`1<byte> value);
    public virtual Nullable`1<EscapeHandling> get_EscapeHandling();
    public virtual void set_EscapeHandling(Nullable`1<EscapeHandling> value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual Nullable`1<bool> get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
internal JsonSerializerInternalBase GetInternalSerializer();
    internal virtual object TryDeserializeInternal(JsonReader reader, Type type);
    internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type rootType);
}
[ExtensionAttribute]
internal static class JsonTokenUtils : object {
    [ExtensionAttribute]
internal static bool IsEndToken(JsonToken token);
    [ExtensionAttribute]
internal static int EndTokenOffset(JsonToken token);
    [ExtensionAttribute]
internal static bool IsStartToken(JsonToken token);
    internal static bool IsPrimitiveToken(JsonToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class JsonTypeReflector : object {
    public static string IdPropertyName;
    public static string RefPropertyName;
    public static string TypePropertyName;
    public static string ValuePropertyName;
    public static string ArrayValuesPropertyName;
    public static string ConcurrentDictionaryTypeName;
    private static ThreadSafeStore`2<Type, JsonConverter> creatorCache;
    private static JsonTypeReflector();
    public static bool TryGetStringConverter(Type type, TypeConverter& typeConverter);
    public static DataContractAttribute GetDataContractAttribute(Type type);
    public static DataMemberAttribute GetDataMemberAttribute(MemberInfo member);
    public static MemberSerialization GetObjectMemberSerialization(Type type);
    public static JsonConverter GetJsonConverter(ICustomAttributeProvider attributeProvider);
    public static JsonConverter CreateJsonConverterInstance(Type converterType);
    private static JsonConverter GetCreator(Type type);
    [ExtensionAttribute]
public static T GetAttribute(Type type);
    [ExtensionAttribute]
public static T GetAttribute(MemberInfo member);
    public static T GetAttribute(ICustomAttributeProvider provider);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class LongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-string-system-iformatprovider-system-int64@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
internal static class MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
    public static bool ApproxEquals(double d1, double d2);
}
internal class MethodCall`2 : MulticastDelegate {
    public MethodCall`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TResult Invoke(T target, Object[] args);
    public virtual IAsyncResult BeginInvoke(T target, Object[] args, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MiscellaneousUtils : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    [NullableContextAttribute("2")]
public static bool ValueEquals(object objA, object objB);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static string ToString(object value);
    public static int ByteArrayCompare(Byte[] a1, Byte[] a2);
    [NullableContextAttribute("0")]
internal static RegexOptions GetRegexOptions(ReadOnlySpan`1<char> optionsText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NoThrowExpressionVisitor : ExpressionVisitor {
    internal static object ErrorResult;
    private static NoThrowExpressionVisitor();
    protected virtual Expression VisitConditional(ConditionalExpression node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NoThrowGetBinderMember : GetMemberBinder {
    [CompilerGeneratedAttribute]
private GetMemberBinder <innerBinder>P;
    public NoThrowGetBinderMember(GetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NoThrowSetBinderMember : SetMemberBinder {
    [CompilerGeneratedAttribute]
private SetMemberBinder <innerBinder>P;
    public NoThrowSetBinderMember(SetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
}
internal enum ParseResult : Enum {
    public int value__;
    public static ParseResult None;
    public static ParseResult Success;
    public static ParseResult Overflow;
    public static ParseResult Invalid;
}
internal enum ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class PathInfoConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type type, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type type);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfill : object {
    [IteratorStateMachineAttribute("Polyfill/<Index>d__0`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.index#system-linq-enumerable-index-1(system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<ValueTuple`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-func((-1-2))-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-2-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<AggregateByIterator>d__3`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<AggregateByIterator>d__4`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.countby")]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<CountByIterator>d__6`2")]
private static IEnumerable`1<KeyValuePair`2<TKey, int>> CountByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, int> BuildCountDictionary(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource[] items);
    [IteratorStateMachineAttribute("Polyfill/<Except>d__10`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, IEqualityComparer`1<TSource> comparer, TSource[] items);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microsecond")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.replace#system-text-stringbuilder-replace(system-readonlyspan((system-char))-system-readonlyspan((system-char)))")]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.replace#system-text-stringbuilder-replace(system-char-system-char-system-int32-system-int32)")]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type target);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type target);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|3_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|4_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
}
internal enum PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Empty;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode CharNullable;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode BooleanNullable;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode SByteNullable;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int16Nullable;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt16Nullable;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int32Nullable;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode ByteNullable;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt32Nullable;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode Int64Nullable;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UInt64Nullable;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode SingleNullable;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode DoubleNullable;
    public static PrimitiveTypeCode DateTime;
    public static PrimitiveTypeCode DateTimeNullable;
    public static PrimitiveTypeCode DateTimeOffset;
    public static PrimitiveTypeCode DateTimeOffsetNullable;
    public static PrimitiveTypeCode Decimal;
    public static PrimitiveTypeCode DecimalNullable;
    public static PrimitiveTypeCode Guid;
    public static PrimitiveTypeCode GuidNullable;
    public static PrimitiveTypeCode TimeSpan;
    public static PrimitiveTypeCode TimeSpanNullable;
    public static PrimitiveTypeCode BigInteger;
    public static PrimitiveTypeCode BigIntegerNullable;
    public static PrimitiveTypeCode Uri;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode Bytes;
    public static PrimitiveTypeCode DBNull;
}
internal enum ReadType : Enum {
    public int value__;
    public static ReadType Read;
    public static ReadType ReadAsInt32;
    public static ReadType ReadAsInt64;
    public static ReadType ReadAsBytes;
    public static ReadType ReadAsString;
    public static ReadType ReadAsDecimal;
    public static ReadType ReadAsDateTime;
    public static ReadType ReadAsDateTimeOffset;
    public static ReadType ReadAsDouble;
    public static ReadType ReadAsBoolean;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ReflectionMember : object {
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Getter>k__BackingField;
    public Type MemberType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Getter { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<object, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ReflectionObject : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ObjectConstructor <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, ReflectionMember> <Members>k__BackingField;
    [NullableAttribute("2")]
public ObjectConstructor Creator { get; }
    public IReadOnlyDictionary`2<string, ReflectionMember> Members { get; }
    private ReflectionObject(ObjectConstructor creator, IReadOnlyDictionary`2<string, ReflectionMember> members);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ObjectConstructor get_Creator();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, ReflectionMember> get_Members();
    public object GetValue(object target, string member);
    public Type GetType(string member);
    public static ReflectionObject Create(Type type, MethodBase creator, String[] memberNames);
    [NullableContextAttribute("2")]
private static ObjectConstructor CreatorConstructor(Type type, MethodBase creator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ReflectionUtils : object {
    [ExtensionAttribute]
public static bool ImplementInterface(Type type, Type interfaceType);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T GetValueOrDefault(Nullable`1<T> target, Nullable`1<T> fallback);
    [ExtensionAttribute]
public static bool IsVirtual(PropertyInfo property);
    [ExtensionAttribute]
private static MethodInfo Method(PropertyInfo property);
    [ExtensionAttribute]
private static MethodInfo GetBaseDefinition(PropertyInfo property);
    [ExtensionAttribute]
private static bool IsPublic(PropertyInfo property);
    [ExtensionAttribute]
public static string GetTypeName(Type type, Nullable`1<TypeNameAssemblyFormatHandling> assemblyFormat, ISerializationBinder binder);
    [ExtensionAttribute]
private static string GetFullyQualifiedTypeName(Type type, ISerializationBinder binder);
    private static string RemoveAssemblyDetails(string fullyQualifiedTypeName);
    [ExtensionAttribute]
public static bool HasDefaultConstructor(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDefaultConstructor(Type type, bool nonPublic);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type EnsureNotNullableType(Type type);
    [ExtensionAttribute]
public static Type EnsureNotByRefType(Type type);
    [ExtensionAttribute]
public static bool IsGenericDefinition(Type type, Type genericInterfaceDefinition);
    [ExtensionAttribute]
public static bool ImplementsGeneric(Type type, Type genericInterfaceDefinition);
    [ExtensionAttribute]
public static bool ImplementsGeneric(Type type, Type genericInterfaceDefinition, Type& implementingType);
    [ExtensionAttribute]
public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition);
    [ExtensionAttribute]
public static Type GetCollectionItemType(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void GetDictionaryKeyValueTypes(Type dictionaryType, Type& keyType, Type& valueType);
    [ExtensionAttribute]
public static Type GetMemberUnderlyingType(MemberInfo member);
    [ExtensionAttribute]
public static bool IsByRefLikeType(Type type);
    [ExtensionAttribute]
public static bool IsIndexedProperty(PropertyInfo property);
    [ExtensionAttribute]
public static bool CanReadMemberValue(MemberInfo member, bool nonPublic);
    [ExtensionAttribute]
public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly);
    [ExtensionAttribute]
public static List`1<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingFlags);
    public static TypeNameKey SplitFullyQualifiedTypeName(string fullTypeName);
    private static Nullable`1<int> GetAssemblyDelimiterIndex(string fullyQualifiedTypeName);
    public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo member);
    private static List`1<FieldInfo> GetFields(Type targetType, BindingFlags bindingFlags);
    private static void GetChildPrivateFields(List`1<FieldInfo> initialFields, Type targetType, BindingFlags bindingFlags);
    private static List`1<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingFlags);
    [ExtensionAttribute]
private static BindingFlags RemoveFlag(BindingFlags source, BindingFlags flag);
    private static void GetChildPrivateProperties(List`1<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingFlags);
    public static bool IsMethodOverridden(Type currentType, Type methodDeclaringType, string method);
    public static object GetDefaultValue(Type type);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class RegexPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class SBytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-string-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(string target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, SByte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class ShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-string-system-iformatprovider-system-int16@)")]
public static bool TryParse(string target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int16& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StringBuffer : ValueType {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Char[] <InternalBuffer>k__BackingField;
    public int Position { get; public set; }
    public bool IsEmpty { get; }
    [NullableAttribute("2")]
public Char[] InternalBuffer { get; private set; }
    public StringBuffer(int initialSize);
    private StringBuffer(Char[] buffer);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public bool get_IsEmpty();
    public void Append(char value);
    public void Append(Char[] buffer, int startIndex, int count);
    public void Clear();
    private void EnsureSize(int appendLength);
    public virtual string ToString();
    public string ToString(int start, int length);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Char[] get_InternalBuffer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_InternalBuffer(Char[] value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class StringPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string())")]
public static string Join(char separator, String[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-object())")]
public static string Join(char separator, Object[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string()-system-int32-system-int32)")]
public static string Join(char separator, String[] value, int startIndex, int count);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join-1(system-char-system-collections-generic-ienumerable((-0)))")]
public static string Join(char separator, IEnumerable`1<T> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class StringReference : ValueType {
    [CompilerGeneratedAttribute]
private Char[] <Chars>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public char Item { get; }
    public Char[] Chars { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public StringReference(Char[] chars, int startIndex, int length);
    public char get_Item(int i);
    [CompilerGeneratedAttribute]
public Char[] get_Chars();
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public int get_Length();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    public static StringWriter CreateStringWriter(int capacity);
    public static void ToCharAsUnicode(char c, Char[] buffer);
    [ExtensionAttribute]
public static JsonProperty ForgivingCaseSensitiveFind(JsonPropertyCollection source, string testValue);
    public static string ToSnakeCase(string s);
    public static string ToKebabCase(string s);
    private static string ToSeparatedCase(string s, char separator);
    [ExtensionAttribute]
public static string Trim(string s, int start, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ThreadSafeStore`2 : object {
    [CompilerGeneratedAttribute]
private Func`2<TKey, TValue> <creator>P;
    private ConcurrentDictionary`2<TKey, TValue> concurrentStore;
    public ThreadSafeStore`2(Func`2<TKey, TValue> creator);
    public TValue Get(TKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class TimeZoneInfoConverter : JsonConverter`1<TimeZoneInfo> {
    public virtual void WriteJson(JsonWriter writer, TimeZoneInfo value, JsonSerializer serializer);
    public virtual TimeZoneInfo ReadJson(JsonReader reader, Type type, TimeZoneInfo existingValue, bool hasExisting, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TypeInformation : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    public Type Type { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public TypeInformation(Type type, PrimitiveTypeCode typeCode);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public PrimitiveTypeCode get_TypeCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TypeNameKey : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [NullableAttribute("2")]
public string Assembly { get; public set; }
    public string Type { get; public set; }
    public TypeNameKey(string Assembly, string Type);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Assembly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TypeNameKey left, TypeNameKey right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TypeNameKey left, TypeNameKey right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TypeNameKey other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Assembly, String& Type);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class UIntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-string-system-iformatprovider-system-uint32@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class ULongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-string-system-iformatprovider-system-uint64@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt64& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class UShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-string-system-iformatprovider-system-uint16@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt16& result);
}
