[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Asp.Versioning.AdvertiseApiVersionsAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions options;
    private ApiVersionProviderOptions Asp.Versioning.IApiVersionProvider.Options { get; }
    public bool Deprecated { get; public set; }
    protected AdvertiseApiVersionsAttribute(ApiVersion version);
    protected AdvertiseApiVersionsAttribute(ApiVersion version, ApiVersion[] otherVersions);
    protected AdvertiseApiVersionsAttribute(IApiVersionParser parser, string version);
    protected AdvertiseApiVersionsAttribute(IApiVersionParser parser, string version, String[] otherVersions);
    [CLSCompliantAttribute("False")]
public AdvertiseApiVersionsAttribute(double version, Double[] otherVersions);
    public AdvertiseApiVersionsAttribute(string version);
    [CLSCompliantAttribute("False")]
public AdvertiseApiVersionsAttribute(string version, String[] otherVersions);
    private sealed virtual override ApiVersionProviderOptions Asp.Versioning.IApiVersionProvider.get_Options();
    public bool get_Deprecated();
    public void set_Deprecated(bool value);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.AmbiguousApiVersionException : Exception {
    private String[] apiVersions;
    public IReadOnlyList`1<string> ApiVersions { get; }
    public AmbiguousApiVersionException(string message);
    public AmbiguousApiVersionException(string message, Exception innerException);
    public AmbiguousApiVersionException(string message, IEnumerable`1<string> apiVersions);
    public AmbiguousApiVersionException(string message, IEnumerable`1<string> apiVersions, Exception innerException);
    public IReadOnlyList`1<string> get_ApiVersions();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiVersion : object {
    private static ApiVersion default;
    private static ApiVersion neutral;
    private int hashCode;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <GroupVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [NullableAttribute("1")]
public static ApiVersion Default { get; }
    [NullableAttribute("1")]
public static ApiVersion Neutral { get; }
    public Nullable`1<DateTime> GroupVersion { get; }
    public Nullable`1<int> MajorVersion { get; }
    public Nullable`1<int> MinorVersion { get; }
    private int ImpliedMinorVersion { get; }
    public string Status { get; }
    public ApiVersion(DateTime groupVersion, string status);
    public ApiVersion(int majorVersion, Nullable`1<int> minorVersion, string status);
    public ApiVersion(DateTime groupVersion, int majorVersion, int minorVersion, string status);
    public ApiVersion(double version, string status);
    protected ApiVersion(double version, string status, Func`2<string, bool> isValidStatus);
    protected internal ApiVersion(Nullable`1<DateTime> groupVersion, Nullable`1<int> majorVersion, Nullable`1<int> minorVersion, string status, Func`2<string, bool> isValidStatus);
    [NullableContextAttribute("1")]
protected ApiVersion(ApiVersion other);
    [NullableContextAttribute("1")]
public static ApiVersion get_Default();
    [NullableContextAttribute("1")]
public static ApiVersion get_Neutral();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_GroupVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MajorVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinorVersion();
    private int get_ImpliedMinorVersion();
    [CompilerGeneratedAttribute]
public string get_Status();
    [NullableContextAttribute("1")]
public virtual string ToString(string format);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ApiVersion version1, ApiVersion version2);
    public static bool op_Inequality(ApiVersion version1, ApiVersion version2);
    public static bool op_LessThan(ApiVersion version1, ApiVersion version2);
    public static bool op_LessThanOrEqual(ApiVersion version1, ApiVersion version2);
    public static bool op_GreaterThan(ApiVersion version1, ApiVersion version2);
    public static bool op_GreaterThanOrEqual(ApiVersion version1, ApiVersion version2);
    public virtual bool Equals(ApiVersion other);
    public virtual int CompareTo(ApiVersion other);
    public virtual string ToString(string format, IFormatProvider formatProvider);
    private static string ValidateStatus(string status, Func`2<string, bool> isValid);
    public static bool IsValidStatus(string status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Asp.Versioning.ApiVersionAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions options;
    private ApiVersionProviderOptions Asp.Versioning.IApiVersionProvider.Options { get; }
    public bool Deprecated { get; public set; }
    protected ApiVersionAttribute(ApiVersion version);
    protected ApiVersionAttribute(IApiVersionParser parser, string version);
    [NullableContextAttribute("2")]
public ApiVersionAttribute(double version, string status);
    public ApiVersionAttribute(string version);
    private sealed virtual override ApiVersionProviderOptions Asp.Versioning.IApiVersionProvider.get_Options();
    public bool get_Deprecated();
    public void set_Deprecated(bool value);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiVersionFormatProvider : object {
    private static int FormatCapacity;
    internal static string GroupVersionFormat;
    [CompilerGeneratedAttribute]
private DateTimeFormatInfo <DateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Calendar <Calendar>k__BackingField;
    [CompilerGeneratedAttribute]
private static ApiVersionFormatProvider <CurrentCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private static ApiVersionFormatProvider <InvariantCulture>k__BackingField;
    protected DateTimeFormatInfo DateTimeFormat { get; }
    protected Calendar Calendar { get; }
    public static ApiVersionFormatProvider CurrentCulture { get; }
    public static ApiVersionFormatProvider InvariantCulture { get; }
    public ApiVersionFormatProvider(DateTimeFormatInfo dateTimeFormat);
    public ApiVersionFormatProvider(Calendar calendar);
    public ApiVersionFormatProvider(DateTimeFormatInfo dateTimeFormat, Calendar calendar);
    private static ApiVersionFormatProvider();
    [CompilerGeneratedAttribute]
protected DateTimeFormatInfo get_DateTimeFormat();
    [CompilerGeneratedAttribute]
protected Calendar get_Calendar();
    [CompilerGeneratedAttribute]
public static ApiVersionFormatProvider get_CurrentCulture();
    [CompilerGeneratedAttribute]
public static ApiVersionFormatProvider get_InvariantCulture();
    public static ApiVersionFormatProvider GetInstance(IFormatProvider formatProvider);
    protected virtual void FormatVersionPart(StringBuilder text, ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual void FormatStatusPart(StringBuilder text, ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public virtual object GetFormat(Type formatType);
    [NullableContextAttribute("2")]
public virtual string Format(string format, object arg, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
private static string GetDefaultFormat(string format, object arg, IFormatProvider formatProvider);
    internal void AppendCustomFormat(StringBuilder text, ApiVersion value, string format, IFormatProvider formatProvider);
    private static void SplitFormatSpecifierWithNumber(string format, IFormatProvider formatProvider, String& specifier, Int32& count);
    private static void AppendStatus(StringBuilder text, string status);
    protected virtual void FormatGroupVersionPart(StringBuilder text, ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    protected virtual void FormatAllParts(StringBuilder text, ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    private static void FormatVersionWithoutPadding(StringBuilder text, ApiVersion apiVersion, string format, IFormatProvider formatProvider);
    private static void FormatVersionWithPadding(StringBuilder text, ApiVersion apiVersion, string format, IFormatProvider formatProvider);
}
public enum Asp.Versioning.ApiVersionMapping : Enum {
    public int value__;
    public static ApiVersionMapping None;
    public static ApiVersionMapping Explicit;
    public static ApiVersionMapping Implicit;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiVersionMetadata : object {
    private ApiVersionModel apiModel;
    private ApiVersionModel endpointModel;
    [NullableAttribute("2")]
private ApiVersionModel mergedModel;
    [NullableAttribute("2")]
private static ApiVersionMetadata empty;
    [NullableAttribute("2")]
private static ApiVersionMetadata neutral;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static ApiVersionMetadata Empty { get; }
    public static ApiVersionMetadata Neutral { get; }
    public string Name { get; }
    public bool IsApiVersionNeutral { get; }
    public ApiVersionMetadata(ApiVersionModel apiModel, ApiVersionModel endpointModel, string name);
    protected ApiVersionMetadata(ApiVersionMetadata other);
    public static ApiVersionMetadata get_Empty();
    public static ApiVersionMetadata get_Neutral();
    [CompilerGeneratedAttribute]
public string get_Name();
    public bool get_IsApiVersionNeutral();
    public ApiVersionModel Map(ApiVersionMapping mapping);
    [NullableContextAttribute("2")]
public ApiVersionMapping MappingTo(ApiVersion apiVersion);
    [NullableContextAttribute("2")]
public bool IsMappedTo(ApiVersion apiVersion);
    public void Deconstruct(ApiVersionModel& apiModel, ApiVersionModel& endpointModel);
    public void Deconstruct(ApiVersionModel& apiModel, ApiVersionModel& endpointModel, String& name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplayText}")]
[DebuggerTypeProxyAttribute("Asp.Versioning.ApiVersionModelDebugView")]
public class Asp.Versioning.ApiVersionModel : object {
    private static int DefaultModel;
    private static int NeutralModel;
    private static int EmptyModel;
    private static IReadOnlyList`1<ApiVersion> emptyVersions;
    private static IReadOnlyList`1<ApiVersion> defaultVersions;
    [NullableAttribute("2")]
private static ApiVersionModel defaultVersion;
    [NullableAttribute("2")]
private static ApiVersionModel neutralVersion;
    [NullableAttribute("2")]
private static ApiVersionModel emptyVersion;
    [CompilerGeneratedAttribute]
private bool <IsApiVersionNeutral>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <DeclaredApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <ImplementedApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <SupportedApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <DeprecatedApiVersions>k__BackingField;
    private string DebuggerDisplayText { get; }
    public static ApiVersionModel Default { get; }
    public static ApiVersionModel Neutral { get; }
    public static ApiVersionModel Empty { get; }
    public bool IsApiVersionNeutral { get; }
    public IReadOnlyList`1<ApiVersion> DeclaredApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> ImplementedApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> SupportedApiVersions { get; }
    public IReadOnlyList`1<ApiVersion> DeprecatedApiVersions { get; }
    private ApiVersionModel(int kind);
    internal ApiVersionModel(ApiVersionModel original, IReadOnlyList`1<ApiVersion> implemented, IReadOnlyList`1<ApiVersion> supported, IReadOnlyList`1<ApiVersion> deprecated);
    public ApiVersionModel(ApiVersion declaredVersion);
    public ApiVersionModel(IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions);
    public ApiVersionModel(IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions, IEnumerable`1<ApiVersion> advertisedVersions, IEnumerable`1<ApiVersion> deprecatedAdvertisedVersions);
    public ApiVersionModel(IEnumerable`1<ApiVersion> declaredVersions, IEnumerable`1<ApiVersion> supportedVersions, IEnumerable`1<ApiVersion> deprecatedVersions, IEnumerable`1<ApiVersion> advertisedVersions, IEnumerable`1<ApiVersion> deprecatedAdvertisedVersions);
    private static ApiVersionModel();
    private string get_DebuggerDisplayText();
    public static ApiVersionModel get_Default();
    public static ApiVersionModel get_Neutral();
    public static ApiVersionModel get_Empty();
    [CompilerGeneratedAttribute]
public bool get_IsApiVersionNeutral();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_DeclaredApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_ImplementedApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_SupportedApiVersions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersion> get_DeprecatedApiVersions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.ApiVersionModelDebugView : object {
    [CompilerGeneratedAttribute]
private ApiVersionModel <model>P;
    private static string Comma;
    public bool VersionNeutral { get; }
    public string Declared { get; }
    public string Implemented { get; }
    public string Supported { get; }
    public string Deprecated { get; }
    public ApiVersionModelDebugView(ApiVersionModel model);
    public bool get_VersionNeutral();
    public string get_Declared();
    public string get_Implemented();
    public string get_Supported();
    public string get_Deprecated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.ApiVersionModelExtensions : object {
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(ApiVersionModel version, ApiVersionModel otherVersion);
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(ApiVersionModel version, IEnumerable`1<ApiVersionModel> otherVersions);
    [ExtensionAttribute]
public static ApiVersionModel Aggregate(IEnumerable`1<ApiVersionModel> versions);
}
[AttributeUsageAttribute("68")]
public class Asp.Versioning.ApiVersionNeutralAttribute : Attribute {
}
public enum Asp.Versioning.ApiVersionParameterLocation : Enum {
    public int value__;
    public static ApiVersionParameterLocation Query;
    public static ApiVersionParameterLocation Header;
    public static ApiVersionParameterLocation Path;
    public static ApiVersionParameterLocation MediaTypeParameter;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiVersionParser : object {
    [NullableAttribute("2")]
private static ApiVersionParser default;
    [CompilerGeneratedAttribute]
private IFormatProvider <FormatProvider>k__BackingField;
    public static ApiVersionParser Default { get; }
    protected IFormatProvider FormatProvider { get; }
    public ApiVersionParser(IFormatProvider formatProvider);
    public static ApiVersionParser get_Default();
    [CompilerGeneratedAttribute]
protected IFormatProvider get_FormatProvider();
    public virtual ApiVersion Parse(string text);
    public virtual bool TryParse(string text, ApiVersion& apiVersion);
    private static FormatException InvalidFormat();
    private static FormatException InvalidGroupVersion(string value);
    private static FormatException InvalidStatus(string value);
    private static bool IsDateLike(string value);
}
[FlagsAttribute]
public enum Asp.Versioning.ApiVersionProviderOptions : Enum {
    public int value__;
    public static ApiVersionProviderOptions None;
    public static ApiVersionProviderOptions Deprecated;
    public static ApiVersionProviderOptions Advertised;
    public static ApiVersionProviderOptions Mapped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Asp.Versioning.ApiVersionsBaseAttribute : Attribute {
    private Nullable`1<int> hashCode;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersion> <Versions>k__BackingField;
    public IReadOnlyList`1<ApiVersion> Versions { get; }
    protected ApiVersionsBaseAttribute(ApiVersion version);
    protected ApiVersionsBaseAttribute(ApiVersion version, ApiVersion[] otherVersions);
    protected ApiVersionsBaseAttribute(double version);
    protected ApiVersionsBaseAttribute(double version, Double[] otherVersions);
    protected ApiVersionsBaseAttribute(string version);
    protected ApiVersionsBaseAttribute(string version, String[] otherVersions);
    protected ApiVersionsBaseAttribute(IApiVersionParser parser, string version);
    protected ApiVersionsBaseAttribute(IApiVersionParser parser, string version, String[] otherVersions);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<ApiVersion> get_Versions();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Asp.Versioning.Array : object {
    [NullableContextAttribute("1")]
public static T[] Empty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Asp.Versioning.Conventions.ApiVersionConventionBuilderBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ApiVersion> supported;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ApiVersion> deprecated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ApiVersion> advertised;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ApiVersion> deprecatedAdvertised;
    [CompilerGeneratedAttribute]
private bool <VersionNeutral>k__BackingField;
    protected bool VersionNeutral { get; protected set; }
    protected bool IsEmpty { get; }
    protected ICollection`1<ApiVersion> SupportedVersions { get; }
    protected ICollection`1<ApiVersion> DeprecatedVersions { get; }
    protected ICollection`1<ApiVersion> AdvertisedVersions { get; }
    protected ICollection`1<ApiVersion> DeprecatedAdvertisedVersions { get; }
    [CompilerGeneratedAttribute]
protected bool get_VersionNeutral();
    [CompilerGeneratedAttribute]
protected void set_VersionNeutral(bool value);
    protected virtual bool get_IsEmpty();
    protected ICollection`1<ApiVersion> get_SupportedVersions();
    protected ICollection`1<ApiVersion> get_DeprecatedVersions();
    protected ICollection`1<ApiVersion> get_AdvertisedVersions();
    protected ICollection`1<ApiVersion> get_DeprecatedAdvertisedVersions();
    protected virtual void MergeAttributesWithConventions(IEnumerable`1<object> attributes);
    protected virtual void MergeAttributesWithConventions(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.Conventions.ApiVersionConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, double version, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T HasApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T HasApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, double version, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T HasDeprecatedApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, double version, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, double version, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T AdvertisesDeprecatedApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, double version, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static T MapToApiVersion(T builder, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static T MapToApiVersions(T builder, IEnumerable`1<ApiVersion> apiVersions);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.Conventions.IApiVersionConvention`1 {
    public abstract virtual void ApplyTo(T item);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder {
    public abstract virtual void IsApiVersionNeutral();
    public abstract virtual void HasApiVersion(ApiVersion apiVersion);
    public abstract virtual void HasDeprecatedApiVersion(ApiVersion apiVersion);
    public abstract virtual void AdvertisesApiVersion(ApiVersion apiVersion);
    public abstract virtual void AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
}
public interface Asp.Versioning.Conventions.IMapToApiVersionConventionBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void MapToApiVersion(ApiVersion apiVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.Format : object {
    internal static string ApiVersionBadStatus;
    internal static string ApiVersionBadGroupVersion;
    private static Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("Format = {Format,nq}, IsLiteral = {IsLiteral,nq}")]
internal class Asp.Versioning.FormatToken : ValueType {
    public string Format;
    public bool IsLiteral;
    internal FormatToken(string format, bool literal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.FormatTokenizer : object {
    private static bool IsLiteralDelimiter(char ch);
    private static bool IsFormatSpecifier(Char& ch);
    private static bool IsEscapeSequence(string sequence);
    private static bool IsSingleCustomFormatSpecifier(string sequence);
    private static void EnsureCurrentLiteralSequenceTerminated(String& format, FormatWriter& writer, Int32& start, Int32& length);
    private static void ConsumeLiteral(String& format, FormatWriter& writer, Int32& i, Int32& length);
    private static void ConsumeEscapeSequence(String& format, FormatWriter& writer, Int32& i, Int32& length);
    private static void ConsumeSingleCustomFormat(String& format, FormatWriter& writer, Int32& i, Int32& length);
    private static void ConsumeCustomFormat(String& format, FormatWriter& writer, Int32& i, Int32& length);
    internal static void Tokenize(String& format, FormatWriter& writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class Asp.Versioning.FormatWriter : ValueType {
    private ApiVersionFormatProvider formatter;
    private ApiVersion apiVersion;
    private IFormatProvider provider;
    private StringBuilder builder;
    internal FormatWriter(ApiVersionFormatProvider formatter, StringBuilder builder, ApiVersion apiVersion, IFormatProvider provider);
    public void Write(FormatToken& token);
    public void Write(char ch);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.IApiVersioningPolicyBuilder {
    public abstract virtual IReadOnlyList`1<T> OfType();
    [NullableContextAttribute("2")]
public abstract virtual ISunsetPolicyBuilder Sunset(string name, ApiVersion apiVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.IApiVersioningPolicyBuilderExtensions : object {
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, string name);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, string name, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, string name, double version, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, string name, int year, int month, int day, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, string name, DateTime groupVersion, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, ApiVersion apiVersion);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, double version, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static ISunsetPolicyBuilder Sunset(IApiVersioningPolicyBuilder builder, DateTime groupVersion, string status);
}
public interface Asp.Versioning.IApiVersionNeutral {
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.IApiVersionParameterDescriptionContext {
    public abstract virtual void AddParameter(string name, ApiVersionParameterLocation location);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.IApiVersionParameterSource {
    public abstract virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.IApiVersionParameterSourceExtensions : object {
    [ExtensionAttribute]
public static bool VersionsByQueryString(IApiVersionParameterSource source, bool allowMultipleLocations);
    [ExtensionAttribute]
public static bool VersionsByHeader(IApiVersionParameterSource source, bool allowMultipleLocations);
    [ExtensionAttribute]
public static bool VersionsByUrl(IApiVersionParameterSource source, bool allowMultipleLocations);
    [ExtensionAttribute]
public static bool VersionsByMediaType(IApiVersionParameterSource source, bool allowMultipleLocations);
    [ExtensionAttribute]
public static string GetParameterName(IApiVersionParameterSource source, ApiVersionParameterLocation location);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetParameterNames(IApiVersionParameterSource source, ApiVersionParameterLocation location);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.IApiVersionParser {
    public abstract virtual ApiVersion Parse(string text);
    [NullableContextAttribute("2")]
public abstract virtual bool TryParse(string text, ApiVersion& apiVersion);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.IApiVersionProvider {
    public ApiVersionProviderOptions Options { get; }
    public IReadOnlyList`1<ApiVersion> Versions { get; }
    public abstract virtual ApiVersionProviderOptions get_Options();
    public abstract virtual IReadOnlyList`1<ApiVersion> get_Versions();
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.ILinkBuilder {
    public abstract virtual ILinkBuilder Link(Uri linkTarget);
    public abstract virtual ILinkBuilder Type(string value);
    public abstract virtual ILinkBuilder Title(string value);
    public abstract virtual ILinkBuilder Language(string value);
    public abstract virtual LinkHeaderValue Build();
}
[ExtensionAttribute]
public static class Asp.Versioning.ILinkBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILinkBuilder Link(ILinkBuilder builder, string linkTarget);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.ISunsetPolicyBuilder {
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("2")]
public ApiVersion ApiVersion { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual ApiVersion get_ApiVersion();
    public abstract virtual void Per(SunsetPolicy policy);
    public abstract virtual ISunsetPolicyBuilder Effective(DateTimeOffset sunsetDate);
    public abstract virtual ILinkBuilder Link(Uri linkTarget);
    public abstract virtual SunsetPolicy Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.ISunsetPolicyBuilderExtensions : object {
    [ExtensionAttribute]
public static ILinkBuilder Link(ISunsetPolicyBuilder builder, string linkTarget);
    [ExtensionAttribute]
public static TBuilder Effective(TBuilder builder, int year, int month, int day);
}
[NullableContextAttribute("2")]
public interface Asp.Versioning.ISunsetPolicyManager {
    public abstract virtual bool TryGetPolicy(string name, ApiVersion apiVersion, SunsetPolicy& sunsetPolicy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.ISunsetPolicyManagerExtensions : object {
    [ExtensionAttribute]
public static bool TryGetPolicy(ISunsetPolicyManager policyManager, ApiVersion apiVersion, SunsetPolicy& sunsetPolicy);
    [ExtensionAttribute]
public static bool TryGetPolicy(ISunsetPolicyManager policyManager, string name, SunsetPolicy& sunsetPolicy);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static SunsetPolicy ResolvePolicyOrDefault(ISunsetPolicyManager policyManager, string name, ApiVersion apiVersion);
    [ExtensionAttribute]
public static bool TryResolvePolicy(ISunsetPolicyManager policyManager, string name, ApiVersion apiVersion, SunsetPolicy& sunsetPolicy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.LinkHeaderValue : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> languages;
    [NullableAttribute("2")]
private ExtensionDictionary extensions;
    [CompilerGeneratedAttribute]
private Uri <LinkTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Media>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public Uri LinkTarget { get; }
    public string RelationType { get; }
    public string Language { get; public set; }
    public IList`1<string> Languages { get; }
    public string Media { get; public set; }
    public string Title { get; public set; }
    public string Type { get; public set; }
    public IDictionary`2<string, string> Extensions { get; }
    public LinkHeaderValue(Uri linkTarget, string relationType);
    [CompilerGeneratedAttribute]
public Uri get_LinkTarget();
    [CompilerGeneratedAttribute]
public string get_RelationType();
    public string get_Language();
    public void set_Language(string value);
    public IList`1<string> get_Languages();
    [CompilerGeneratedAttribute]
public string get_Media();
    [CompilerGeneratedAttribute]
public void set_Media(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    public IDictionary`2<string, string> get_Extensions();
    public static LinkHeaderValue Parse(string input, Func`2<Uri, Uri> resolveRelativeUrl);
    public static bool TryParse(string input, Func`2<Uri, Uri> resolveRelativeUrl, LinkHeaderValue& parsedValue);
    public static IList`1<LinkHeaderValue> ParseList(IList`1<string> input, Func`2<Uri, Uri> resolveRelativeUrl);
    public static bool TryParseList(IList`1<string> input, Func`2<Uri, Uri> resolveRelativeUrl, IList`1& parsedValues);
    public virtual string ToString();
    private static void AppendTargetAttribute(StringBuilder builder, string name, string value);
    private static bool TryParseTargetLink(String& segment, Func`2<Uri, Uri> resolveRelativeUrl, Uri& targetLink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Asp.Versioning.MapToApiVersionAttribute : ApiVersionsBaseAttribute {
    private ApiVersionProviderOptions Asp.Versioning.IApiVersionProvider.Options { get; }
    protected MapToApiVersionAttribute(ApiVersion version);
    protected MapToApiVersionAttribute(IApiVersionParser parser, string version);
    public MapToApiVersionAttribute(double version);
    public MapToApiVersionAttribute(string version);
    private sealed virtual override ApiVersionProviderOptions Asp.Versioning.IApiVersionProvider.get_Options();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.NamespaceParser : object {
    private static string CompactDateFormat;
    private static string ReadableDateFormat;
    [NullableAttribute("2")]
private static NamespaceParser default;
    [CompilerGeneratedAttribute]
private IFormatProvider <FormatProvider>k__BackingField;
    public static NamespaceParser Default { get; }
    protected IFormatProvider FormatProvider { get; }
    public NamespaceParser(IFormatProvider formatProvider);
    public static NamespaceParser get_Default();
    [CompilerGeneratedAttribute]
protected IFormatProvider get_FormatProvider();
    public IReadOnlyList`1<ApiVersion> Parse(Type type);
    protected virtual bool TryParse(string identifier, ApiVersion& apiVersion);
    private static bool IsDateLike(string value);
    private bool TryConsumeGroup(String& identifier, string format, int length, Nullable`1& group);
    private bool TryConsumeNumber(String& identifier, Nullable`1& number);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Asp.Versioning.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApiVersionBadGroupVersion { get; }
    internal static string ApiVersionBadStatus { get; }
    internal static string ApiVersionInvalidFormat { get; }
    internal static string EmptyKey { get; }
    internal static string FirstCharMustBeLetter { get; }
    internal static string InvalidFormatString { get; }
    internal static string InvalidLinkKey { get; }
    internal static string InvalidOrMalformedHeader { get; }
    internal static string InvalidSunsetRelationType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApiVersionBadGroupVersion();
    internal static string get_ApiVersionBadStatus();
    internal static string get_ApiVersionInvalidFormat();
    internal static string get_EmptyKey();
    internal static string get_FirstCharMustBeLetter();
    internal static string get_InvalidFormatString();
    internal static string get_InvalidLinkKey();
    internal static string get_InvalidOrMalformedHeader();
    internal static string get_InvalidSunsetRelationType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.Str : object {
    [NullableContextAttribute("2")]
internal static bool IsNullOrEmpty(string text);
    internal static string Substring(string text, int start);
    internal static string Substring(string text, int start, int length);
    internal static string Slice(string text, int start, int end);
    internal static string Truncate(string text, int length);
    internal static string StringOrSpan(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.SunsetPolicy : object {
    [NullableAttribute("2")]
private SunsetLinkList links;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Date>k__BackingField;
    public Nullable`1<DateTimeOffset> Date { get; }
    public bool HasLinks { get; }
    public IList`1<LinkHeaderValue> Links { get; }
    [NullableContextAttribute("2")]
public SunsetPolicy(DateTimeOffset date, LinkHeaderValue link);
    public SunsetPolicy(LinkHeaderValue link);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Date();
    public bool get_HasLinks();
    public IList`1<LinkHeaderValue> get_Links();
}
internal static class Backport.ArgumentNullException : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void UnionWith(ICollection`1<T> collection, IEnumerable`1<T> other);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    public bool get_ParameterValue();
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.HashCode : ValueType {
    private static UInt32 s_seed;
    private static UInt32 Prime1;
    private static UInt32 Prime2;
    private static UInt32 Prime3;
    private static UInt32 Prime4;
    private static UInt32 Prime5;
    private UInt32 _v1;
    private UInt32 _v2;
    private UInt32 _v3;
    private UInt32 _v4;
    private UInt32 _queue1;
    private UInt32 _queue2;
    private UInt32 _queue3;
    private UInt32 _length;
    private static HashCode();
    private static UInt32 GenerateGlobalSeed();
    public static int Combine(T1 value1);
    public static int Combine(T1 value1, T2 value2);
    public static int Combine(T1 value1, T2 value2, T3 value3);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static void Initialize(UInt32& v1, UInt32& v2, UInt32& v3, UInt32& v4);
    private static UInt32 Round(UInt32 hash, UInt32 input);
    private static UInt32 QueueRound(UInt32 hash, UInt32 queuedValue);
    private static UInt32 MixState(UInt32 v1, UInt32 v2, UInt32 v3, UInt32 v4);
    private static UInt32 MixEmptyState();
    private static UInt32 MixFinal(UInt32 hash);
    public void Add(T value);
    public void Add(T value, IEqualityComparer`1<T> comparer);
    private void Add(int value);
    public int ToHashCode();
    [ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.", "True")]
[EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes.", "True")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
}
internal static class System.Numerics.BitOperations : object {
    [CLSCompliantAttribute("False")]
public static UInt32 RotateLeft(UInt32 value, int offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.ScopedRefAttribute : Attribute {
}
