[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiExplorer.ApiVersionDescription : object {
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SunsetPolicy <SunsetPolicy>k__BackingField;
    public ApiVersion ApiVersion { get; }
    public string GroupName { get; }
    public bool IsDeprecated { get; }
    [NullableAttribute("2")]
public SunsetPolicy SunsetPolicy { get; }
    public ApiVersionDescription(ApiVersion apiVersion, string groupName, bool deprecated, SunsetPolicy sunsetPolicy);
    [CompilerGeneratedAttribute]
public ApiVersion get_ApiVersion();
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SunsetPolicy get_SunsetPolicy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Asp.Versioning.ApiExplorer.ApiVersionMetadataCollationCollection : object {
    private List`1<ApiVersionMetadata> items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> groups;
    public ApiVersionMetadata Item { get; }
    private ApiVersionMetadata System.Collections.Generic.IList<Asp.Versioning.ApiVersionMetadata>.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Asp.Versioning.ApiVersionMetadata>.IsReadOnly { get; }
    public ApiVersionMetadataCollationCollection(int capacity);
    public sealed virtual ApiVersionMetadata get_Item(int index);
    private sealed virtual override ApiVersionMetadata System.Collections.Generic.IList<Asp.Versioning.ApiVersionMetadata>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Asp.Versioning.ApiVersionMetadata>.set_Item(int index, ApiVersionMetadata value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Asp.Versioning.ApiVersionMetadata>.get_IsReadOnly();
    public sealed virtual void Add(ApiVersionMetadata item);
    public void Add(ApiVersionMetadata item, string groupName);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ApiVersionMetadata item);
    public sealed virtual void CopyTo(ApiVersionMetadata[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ApiVersionMetadata> GetEnumerator();
    public sealed virtual int IndexOf(ApiVersionMetadata item);
    public sealed virtual void Insert(int index, ApiVersionMetadata item);
    public void Insert(int index, ApiVersionMetadata item, string groupName);
    public sealed virtual bool Remove(ApiVersionMetadata item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("2")]
public string GroupName(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiExplorer.ApiVersionMetadataCollationContext : object {
    [CompilerGeneratedAttribute]
private ApiVersionMetadataCollationCollection <Results>k__BackingField;
    public ApiVersionMetadataCollationCollection Results { get; }
    [CompilerGeneratedAttribute]
public ApiVersionMetadataCollationCollection get_Results();
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.DefaultEndpointInspector : object {
    [NullableContextAttribute("1")]
public sealed virtual bool IsControllerAction(Endpoint endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.EndpointApiVersionMetadataCollationProvider : object {
    private EndpointDataSource endpointDataSource;
    private IEndpointInspector endpointInspector;
    private int version;
    public int Version { get; }
    [ObsoleteAttribute("Use the constructor that accepts IEndpointInspector. This constructor will be removed in a future version.")]
public EndpointApiVersionMetadataCollationProvider(EndpointDataSource endpointDataSource);
    public EndpointApiVersionMetadataCollationProvider(EndpointDataSource endpointDataSource, IEndpointInspector endpointInspector);
    public sealed virtual int get_Version();
    public sealed virtual void Execute(ApiVersionMetadataCollationContext context);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.ApiExplorer.IApiVersionDescriptionProvider {
    public IReadOnlyList`1<ApiVersionDescription> ApiVersionDescriptions { get; }
    public abstract virtual IReadOnlyList`1<ApiVersionDescription> get_ApiVersionDescriptions();
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.ApiExplorer.IApiVersionDescriptionProviderFactory {
    public abstract virtual IApiVersionDescriptionProvider Create(EndpointDataSource endpointDataSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Asp.Versioning.ApiExplorer.IApiVersionDescriptionProviderFactoryExtensions : object {
    [ExtensionAttribute]
public static IApiVersionDescriptionProvider Create(IApiVersionDescriptionProviderFactory factory);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.ApiExplorer.IApiVersionMetadataCollationProvider {
    public int Version { get; }
    public abstract virtual int get_Version();
    public abstract virtual void Execute(ApiVersionMetadataCollationContext context);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.ApiExplorer.IEndpointInspector {
    public abstract virtual bool IsControllerAction(Endpoint endpoint);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiVersioningFeature : object {
    [NullableAttribute("1")]
private HttpContext context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<string> rawApiVersions;
    private ApiVersion apiVersion;
    [CompilerGeneratedAttribute]
private string <RouteParameter>k__BackingField;
    public string RouteParameter { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<string> RawRequestedApiVersions { get; public set; }
    public string RawRequestedApiVersion { get; public set; }
    public ApiVersion RequestedApiVersion { get; public set; }
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public ApiVersioningFeature(HttpContext context);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RouteParameter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RouteParameter(string value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<string> get_RawRequestedApiVersions();
    [NullableContextAttribute("1")]
public sealed virtual void set_RawRequestedApiVersions(IReadOnlyList`1<string> value);
    public sealed virtual string get_RawRequestedApiVersion();
    public sealed virtual void set_RawRequestedApiVersion(string value);
    public sealed virtual ApiVersion get_RequestedApiVersion();
    public sealed virtual void set_RequestedApiVersion(ApiVersion value);
    [NullableContextAttribute("1")]
private static AmbiguousApiVersionException NewAmbiguousApiVersionException(IReadOnlyList`1<string> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiVersioningOptions : object {
    [NullableAttribute("2")]
private IApiVersionReader apiVersionReader;
    [NullableAttribute("2")]
private IApiVersionSelector apiVersionSelector;
    [NullableAttribute("2")]
private IApiVersioningPolicyBuilder apiVersioningPolicyBuilder;
    [CompilerGeneratedAttribute]
private string <RouteConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReportApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssumeDefaultVersionWhenUnspecified>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <DefaultApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnsupportedApiVersionStatusCode>k__BackingField;
    public string RouteConstraintName { get; public set; }
    public bool ReportApiVersions { get; public set; }
    public bool AssumeDefaultVersionWhenUnspecified { get; public set; }
    public ApiVersion DefaultApiVersion { get; public set; }
    [CLSCompliantAttribute("False")]
public IApiVersionReader ApiVersionReader { get; public set; }
    [CLSCompliantAttribute("False")]
public IApiVersionSelector ApiVersionSelector { get; public set; }
    public IApiVersioningPolicyBuilder Policies { get; public set; }
    public int UnsupportedApiVersionStatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RouteConstraintName();
    [CompilerGeneratedAttribute]
public void set_RouteConstraintName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReportApiVersions();
    [CompilerGeneratedAttribute]
public void set_ReportApiVersions(bool value);
    [CompilerGeneratedAttribute]
public bool get_AssumeDefaultVersionWhenUnspecified();
    [CompilerGeneratedAttribute]
public void set_AssumeDefaultVersionWhenUnspecified(bool value);
    [CompilerGeneratedAttribute]
public ApiVersion get_DefaultApiVersion();
    [CompilerGeneratedAttribute]
public void set_DefaultApiVersion(ApiVersion value);
    public IApiVersionReader get_ApiVersionReader();
    public void set_ApiVersionReader(IApiVersionReader value);
    public IApiVersionSelector get_ApiVersionSelector();
    public void set_ApiVersionSelector(IApiVersionSelector value);
    public IApiVersioningPolicyBuilder get_Policies();
    public void set_Policies(IApiVersioningPolicyBuilder value);
    [CompilerGeneratedAttribute]
public int get_UnsupportedApiVersionStatusCode();
    [CompilerGeneratedAttribute]
public void set_UnsupportedApiVersionStatusCode(int value);
}
public class Asp.Versioning.ApiVersioningPolicyBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<PolicyKey, ISunsetPolicyBuilder> sunsetPolicies;
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<T> OfType();
    [NullableContextAttribute("2")]
public virtual ISunsetPolicyBuilder Sunset(string name, ApiVersion apiVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public static class Asp.Versioning.ApiVersionReader : object {
    [NullableAttribute("2")]
private static IApiVersionReader default;
    public static IApiVersionReader Default { get; }
    public static IApiVersionReader get_Default();
    public static IApiVersionReader Combine(IApiVersionReader apiVersionReader, IApiVersionReader[] otherApiVersionReaders);
    public static IApiVersionReader Combine(IEnumerable`1<IApiVersionReader> apiVersionReaders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.Builder.ApiVersionSet : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReportApiVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersionSetBuilder <Builder>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    public bool ReportApiVersions { get; }
    protected ApiVersionSetBuilder Builder { get; }
    public ApiVersionSet(ApiVersionSetBuilder builder, string name);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ReportApiVersions();
    [CompilerGeneratedAttribute]
protected ApiVersionSetBuilder get_Builder();
    public virtual ApiVersionModel Build(ApiVersioningOptions options);
    public virtual void AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual void AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.Builder.ApiVersionSetBuilder : ApiVersionConventionBuilderBase {
    [NullableAttribute("2")]
private string name;
    [CompilerGeneratedAttribute]
private bool <WillReportApiVersions>k__BackingField;
    protected internal bool WillReportApiVersions { get; protected internal set; }
    [NullableContextAttribute("2")]
public ApiVersionSetBuilder(string name);
    [CompilerGeneratedAttribute]
protected internal bool get_WillReportApiVersions();
    [CompilerGeneratedAttribute]
protected internal void set_WillReportApiVersions(bool value);
    public virtual ApiVersionSet Build();
    public virtual ApiVersionSetBuilder ReportApiVersions();
    public virtual ApiVersionSetBuilder IsApiVersionNeutral();
    public virtual ApiVersionSetBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ApiVersionSetBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ApiVersionSetBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ApiVersionSetBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    protected internal virtual ApiVersionModel BuildApiVersionModel(ApiVersioningOptions options);
}
public class Asp.Versioning.Builder.ApiVersionSetBuilderFactory : MulticastDelegate {
    public ApiVersionSetBuilderFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ApiVersionSetBuilder Invoke(string name);
    public virtual IAsyncResult BeginInvoke(string name, AsyncCallback callback, object object);
    public virtual ApiVersionSetBuilder EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.Builder.EndpointBuilderFinalizer : object {
    internal static void FinalizeEndpoints(EndpointBuilder endpointBuilder);
    internal static void FinalizeRoutes(EndpointBuilder endpointBuilder);
    private static void Finialize(EndpointBuilder endpointBuilder, ApiVersionSet versionSet);
    private static bool IsApiVersionNeutral(IList`1<object> metadata);
    private static bool ReportApiVersions(IList`1<object> metadata);
    private static ApiVersionSet GetApiVersionSet(IList`1<object> metadata);
    private static bool TryGetApiVersions(IList`1<object> metadata, ApiVersionBuckets& buckets);
    private static ApiVersionMetadata Build(IList`1<object> metadata, ApiVersionSet versionSet, ApiVersioningOptions options);
    [NullableContextAttribute("2")]
private static RequestDelegate EnsureRequestDelegate(RequestDelegate current, RequestDelegate original);
}
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Builder.IVersionedEndpointRouteBuilder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Builder.VersionedEndpointRouteBuilder : object {
    private IEndpointRouteBuilder routeBuilder;
    private IEndpointConventionBuilder conventionBuilder;
    private ServiceProviderDecorator serviceProvider;
    private EndpointDataSourceCollectionAdapter dataSources;
    [CompilerGeneratedAttribute]
private ApiVersionSetBuilder <VersionSetBuilder>k__BackingField;
    protected ApiVersionSetBuilder VersionSetBuilder { get; }
    public IServiceProvider ServiceProvider { get; }
    public ICollection`1<EndpointDataSource> DataSources { get; }
    public VersionedEndpointRouteBuilder(IEndpointRouteBuilder routeBuilder, IEndpointConventionBuilder conventionBuilder, ApiVersionSetBuilder apiVersionSetBuilder);
    [CompilerGeneratedAttribute]
protected ApiVersionSetBuilder get_VersionSetBuilder();
    public virtual IApplicationBuilder CreateApplicationBuilder();
    public virtual IServiceProvider get_ServiceProvider();
    public virtual ICollection`1<EndpointDataSource> get_DataSources();
    public virtual void Add(Action`1<EndpointBuilder> convention);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Builder.VersionedEndpointRouteBuilderFactory : MulticastDelegate {
    public VersionedEndpointRouteBuilderFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IVersionedEndpointRouteBuilder Invoke(IEndpointRouteBuilder routeBuilder, IEndpointConventionBuilder conventionBuilder, ApiVersionSetBuilder apiVersionSetBuilder);
    public virtual IAsyncResult BeginInvoke(IEndpointRouteBuilder routeBuilder, IEndpointConventionBuilder conventionBuilder, ApiVersionSetBuilder apiVersionSetBuilder, AsyncCallback callback, object object);
    public virtual IVersionedEndpointRouteBuilder EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Asp.Versioning.CommonSR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidPolicyKey { get; }
    internal static string MultipleDifferentApiVersionsRequested { get; }
    internal static string ZeroApiVersionReaders { get; }
    internal static string InvalidMediaTypeTemplate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidPolicyKey();
    internal static string get_MultipleDifferentApiVersionsRequested();
    internal static string get_ZeroApiVersionReaders();
    internal static string get_InvalidMediaTypeTemplate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ConstantApiVersionSelector : object {
    private ApiVersion version;
    public ConstantApiVersionSelector(ApiVersion version);
    public sealed virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.CurrentImplementationApiVersionSelector : object {
    private ApiVersioningOptions options;
    public CurrentImplementationApiVersionSelector(ApiVersioningOptions options);
    public virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.DefaultApiVersionReporter : object {
    private static string ApiSupportedVersions;
    private static string ApiDeprecatedVersions;
    private static string Sunset;
    private static string Link;
    private ISunsetPolicyManager sunsetPolicyManager;
    private string apiSupportedVersionsName;
    private string apiDeprecatedVersionsName;
    [CompilerGeneratedAttribute]
private ApiVersionMapping <Mapping>k__BackingField;
    public ApiVersionMapping Mapping { get; }
    public DefaultApiVersionReporter(ISunsetPolicyManager sunsetPolicyManager, string supportedHeaderName, string deprecatedHeaderName, ApiVersionMapping mapping);
    private static void AddApiVersionHeader(IHeaderDictionary headers, string headerName, IReadOnlyList`1<ApiVersion> versions);
    [CompilerGeneratedAttribute]
public sealed virtual ApiVersionMapping get_Mapping();
    public sealed virtual void Report(HttpResponse response, ApiVersionModel apiVersionModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.DefaultApiVersionSelector : object {
    private ApiVersioningOptions options;
    public DefaultApiVersionSelector(ApiVersioningOptions options);
    public sealed virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ErrorObjectWriter : object {
    private JsonSerializerOptions options;
    public static JsonSerializerContext DefaultJsonSerializerContext { get; }
    public ErrorObjectWriter(IOptions`1<JsonOptions> options);
    public static JsonSerializerContext get_DefaultJsonSerializerContext();
    public static JsonSerializerContext NewJsonSerializerContext(JsonSerializerOptions options);
    public virtual bool CanWrite(ProblemDetailsContext context);
    public virtual ValueTask WriteAsync(ProblemDetailsContext context);
    protected virtual void OnBeforeWrite(ProblemDetailsContext context, ErrorObject& errorObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.Format : object {
    internal static CompositeFormat MultipleDifferentApiVersionsRequested;
    internal static CompositeFormat NoVersionSet;
    internal static CompositeFormat InvalidMediaTypeTemplate;
    internal static CompositeFormat UnsetRequestDelegate;
    internal static CompositeFormat VersionedResourceNotSupported;
    internal static CompositeFormat InvalidDefaultApiVersion;
    internal static CompositeFormat InvalidPolicyKey;
    private static Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.HeaderApiVersionReader : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <HeaderNames>k__BackingField;
    public ICollection`1<string> HeaderNames { get; }
    public HeaderApiVersionReader(IEnumerable`1<string> headerNames);
    public HeaderApiVersionReader(string headerName, String[] otherHeaderNames);
    public virtual IReadOnlyList`1<string> Read(HttpRequest request);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_HeaderNames();
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.IApiVersioningBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.IApiVersioningFeature {
    public string RouteParameter { get; public set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<string> RawRequestedApiVersions { get; public set; }
    public string RawRequestedApiVersion { get; public set; }
    public ApiVersion RequestedApiVersion { get; public set; }
    public abstract virtual string get_RouteParameter();
    public abstract virtual void set_RouteParameter(string value);
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<string> get_RawRequestedApiVersions();
    [NullableContextAttribute("1")]
public abstract virtual void set_RawRequestedApiVersions(IReadOnlyList`1<string> value);
    public abstract virtual string get_RawRequestedApiVersion();
    public abstract virtual void set_RawRequestedApiVersion(string value);
    public abstract virtual ApiVersion get_RequestedApiVersion();
    public abstract virtual void set_RequestedApiVersion(ApiVersion value);
}
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.IApiVersionReader {
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<string> Read(HttpRequest request);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.IApiVersionSelector {
    public virtual ValueTask`1<ApiVersion> SelectVersionAsync(HttpRequest request, ApiVersionModel model, CancellationToken cancellationToken);
    public abstract virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Asp.Versioning.IApiVersionSelectorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ApiVersion SelectVersion(IApiVersionSelector selector, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Asp.Versioning.ILoggerExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, string, Exception> __ApiVersionInvalidCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, String[], Exception> __ApiVersionAmbiguousCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`2<ILogger, Exception> __ApiVersionUnspecifiedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
private static Action`3<ILogger, String[], Exception> __ApiVersionUnspecifiedWithCandidatesCallback;
    private static ILoggerExtensions();
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
internal static void ApiVersionInvalid(ILogger logger, string apiVersion);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
internal static void ApiVersionAmbiguous(ILogger logger, String[] apiVersions);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
internal static void ApiVersionUnspecified(ILogger logger);
    [ExtensionAttribute]
[LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.10.11423")]
internal static void ApiVersionUnspecifiedWithCandidates(ILogger logger, String[] candidateEndpoints);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.IReportApiVersions {
    public ApiVersionMapping Mapping { get; }
    public abstract virtual ApiVersionMapping get_Mapping();
    public abstract virtual void Report(HttpResponse response, ApiVersionModel apiVersionModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.LowestImplementedApiVersionSelector : object {
    private ApiVersioningOptions options;
    public LowestImplementedApiVersionSelector(ApiVersioningOptions options);
    public virtual ApiVersion SelectVersion(HttpRequest request, ApiVersionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.MediaTypeApiVersionReader : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; public set; }
    public MediaTypeApiVersionReader(string parameterName);
    public virtual IReadOnlyList`1<string> Read(HttpRequest request);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    protected virtual string ReadAcceptHeader(ICollection`1<MediaTypeHeaderValue> accept);
    protected virtual string ReadContentTypeHeader(MediaTypeHeaderValue contentType);
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
    [NullableContextAttribute("2")]
private static int ByQualityDescending(MediaTypeHeaderValue left, MediaTypeHeaderValue right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.MediaTypeApiVersionReaderBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<string> parameters;
    [NullableAttribute("2")]
private HashSet`1<StringSegment> included;
    [NullableAttribute("2")]
private HashSet`1<StringSegment> excluded;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<HttpRequest, IReadOnlyList`1<string>, IReadOnlyList`1<string>> select;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Func`2<IReadOnlyList`1<MediaTypeHeaderValue>, IReadOnlyList`1<string>>> readers;
    public virtual MediaTypeApiVersionReaderBuilder Template(string template, string parameterName);
    private static String[] ReadMediaTypePattern(IReadOnlyList`1<MediaTypeHeaderValue> mediaTypes, TemplateMatcher matcher, string parameterName);
    public virtual MediaTypeApiVersionReaderBuilder Parameter(string name);
    public virtual MediaTypeApiVersionReaderBuilder Exclude(string name);
    public virtual MediaTypeApiVersionReaderBuilder Include(string name);
    public virtual MediaTypeApiVersionReaderBuilder Match(string pattern);
    [CLSCompliantAttribute("False")]
public virtual MediaTypeApiVersionReaderBuilder Select(Func`3<HttpRequest, IReadOnlyList`1<string>, IReadOnlyList`1<string>> selector);
    [CLSCompliantAttribute("False")]
public virtual IApiVersionReader Build();
    [CLSCompliantAttribute("False")]
protected void AddReader(Func`2<IReadOnlyList`1<MediaTypeHeaderValue>, IReadOnlyList`1<string>> reader);
    private static IReadOnlyList`1<string> DefaultSelector(HttpRequest request, IReadOnlyList`1<string> versions);
    private static String[] ToArray(String& version, List`1<string> versions);
    private static String[] ReadMediaType(IReadOnlyList`1<MediaTypeHeaderValue> mediaTypes, string pattern);
    private static String[] ReadMediaTypeParameter(IReadOnlyList`1<MediaTypeHeaderValue> mediaTypes, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Asp.Versioning.MediaTypeApiVersionReaderBuilderExtensions : object {
    [ExtensionAttribute]
public static T SelectFirstOrDefault(T builder);
    [ExtensionAttribute]
public static T SelectLastOrDefault(T builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Asp.Versioning.PolicyKey : ValueType {
    private string name;
    private ApiVersion version;
    public PolicyKey(string name, ApiVersion version);
    public sealed virtual bool Equals(PolicyKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Asp.Versioning.ProblemDetailsDefaults : object {
    [NullableAttribute("2")]
private static ProblemDetailsInfo unsupported;
    [NullableAttribute("2")]
private static ProblemDetailsInfo unspecified;
    [NullableAttribute("2")]
private static ProblemDetailsInfo invalid;
    [NullableAttribute("2")]
private static ProblemDetailsInfo ambiguous;
    public static ProblemDetailsInfo Unsupported { get; }
    public static ProblemDetailsInfo Unspecified { get; }
    public static ProblemDetailsInfo Invalid { get; }
    public static ProblemDetailsInfo Ambiguous { get; }
    public static ProblemDetailsInfo get_Unsupported();
    public static ProblemDetailsInfo get_Unspecified();
    public static ProblemDetailsInfo get_Invalid();
    public static ProblemDetailsInfo get_Ambiguous();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ProblemDetailsInfo : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Type { get; }
    public string Title { get; }
    [NullableAttribute("2")]
public string Code { get; }
    public ProblemDetailsInfo(string type, string title, string code);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Title();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Code();
    public void Deconstruct(String& type, String& title);
    public void Deconstruct(String& type, String& title, String& code);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.QueryStringApiVersionReader : object {
    private static string DefaultQueryParameterName;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ParameterNames>k__BackingField;
    public ICollection`1<string> ParameterNames { get; }
    public QueryStringApiVersionReader(IEnumerable`1<string> parameterNames);
    public QueryStringApiVersionReader(string parameterName, String[] otherParameterNames);
    public virtual IReadOnlyList`1<string> Read(HttpRequest request);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ParameterNames();
    public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Rfc7231ProblemDetailsWriter : object {
    private static MediaTypeHeaderValue jsonMediaType;
    private static MediaTypeHeaderValue problemDetailsJsonMediaType;
    private IProblemDetailsWriter decorated;
    public Rfc7231ProblemDetailsWriter(IProblemDetailsWriter decorated);
    private static Rfc7231ProblemDetailsWriter();
    public sealed virtual bool CanWrite(ProblemDetailsContext context);
    public sealed virtual ValueTask WriteAsync(ProblemDetailsContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.AmbiguousApiVersionEndpoint : Endpoint {
    private static string Name;
    internal AmbiguousApiVersionEndpoint(ILogger logger);
    private static Task OnExecute(HttpContext context, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersioningRouteOptionsSetup : object {
    private IOptions`1<ApiVersioningOptions> versioningOptions;
    public ApiVersioningRouteOptionsSetup(IOptions`1<ApiVersioningOptions> options);
    public virtual void PostConfigure(string name, RouteOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersionLinkGenerator : LinkGenerator {
    [CompilerGeneratedAttribute]
private LinkGenerator <LinkGenerator>k__BackingField;
    protected LinkGenerator LinkGenerator { get; }
    public ApiVersionLinkGenerator(LinkGenerator linkGenerator);
    [CompilerGeneratedAttribute]
protected LinkGenerator get_LinkGenerator();
    [NullableContextAttribute("2")]
public virtual string GetPathByAddress(HttpContext httpContext, TAddress address, RouteValueDictionary values, RouteValueDictionary ambientValues, Nullable`1<PathString> pathBase, FragmentString fragment, LinkOptions options);
    [NullableContextAttribute("2")]
public virtual string GetPathByAddress(TAddress address, RouteValueDictionary values, PathString pathBase, FragmentString fragment, LinkOptions options);
    [NullableContextAttribute("2")]
public virtual string GetUriByAddress(HttpContext httpContext, TAddress address, RouteValueDictionary values, RouteValueDictionary ambientValues, string scheme, Nullable`1<HostString> host, Nullable`1<PathString> pathBase, FragmentString fragment, LinkOptions options);
    public virtual string GetUriByAddress(TAddress address, RouteValueDictionary values, string scheme, HostString host, PathString pathBase, FragmentString fragment, LinkOptions options);
    private static void AddApiVersionRouteValueIfNecessary(HttpContext httpContext, RouteValueDictionary values);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersionLinkGenerator`1 : ApiVersionLinkGenerator {
    [NullableContextAttribute("1")]
public ApiVersionLinkGenerator`1(T linkGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersionMatcherPolicy : MatcherPolicy {
    private IOptions`1<ApiVersioningOptions> options;
    private IApiVersionParser apiVersionParser;
    private ApiVersionCollator collator;
    private ILogger logger;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    private ApiVersioningOptions Options { get; }
    private IApiVersionParameterSource ApiVersionSource { get; }
    private IApiVersionSelector ApiVersionSelector { get; }
    public ApiVersionMatcherPolicy(IApiVersionParser apiVersionParser, IEnumerable`1<IApiVersionMetadataCollationProvider> providers, IOptions`1<ApiVersioningOptions> options, ILogger`1<ApiVersionMatcherPolicy> logger);
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    private ApiVersioningOptions get_Options();
    private IApiVersionParameterSource get_ApiVersionSource();
    private IApiVersionSelector get_ApiVersionSelector();
    public sealed virtual bool AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    [AsyncStateMachineAttribute("Asp.Versioning.Routing.ApiVersionMatcherPolicy/<ApplyAsync>d__15")]
public sealed virtual Task ApplyAsync(HttpContext httpContext, CandidateSet candidates);
    public sealed virtual PolicyJumpTable BuildJumpTable(int exitDestination, IReadOnlyList`1<PolicyJumpTableEdge> edges);
    public sealed virtual IReadOnlyList`1<PolicyNodeEdge> GetEdges(IReadOnlyList`1<Endpoint> endpoints);
    private static int BeforeDefaultMatcherPolicy();
    private static bool DifferByRouteConstraintsOnly(CandidateSet candidates);
    private static void Collate(ApiVersionMetadata metadata, SortedSet`1& supported, SortedSet`1& deprecated);
    [NullableContextAttribute("2")]
private static ApiVersionPolicyFeature NewPolicyFeature(SortedSet`1<ApiVersion> supported, SortedSet`1<ApiVersion> deprecated);
    [NullableContextAttribute("0")]
private static ValueTuple`2<bool, bool> MatchApiVersion(CandidateSet candidates, ApiVersion apiVersion);
    private ValueTask`1<ApiVersion> TrySelectApiVersionAsync(HttpContext httpContext, CandidateSet candidates);
    private sealed virtual override bool Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints(IReadOnlyList`1<Endpoint> endpoints);
    [GeneratedRegexAttribute("{([^:]+):[^}]+}", "17")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
private static Regex RouteConstraintRegex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.ApiVersionPolicyFeature : object {
    [CompilerGeneratedAttribute]
private ApiVersionMetadata <Metadata>k__BackingField;
    public ApiVersionMetadata Metadata { get; }
    public ApiVersionPolicyFeature(ApiVersionMetadata metadata);
    [CompilerGeneratedAttribute]
public ApiVersionMetadata get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.ApiVersionPolicyJumpTable : PolicyJumpTable {
    private bool versionsByUrl;
    private bool versionsByUrlOnly;
    private bool versionsByMediaTypeOnly;
    private RouteDestination rejection;
    private FrozenDictionary`2<ApiVersion, int> destinations;
    [NullableAttribute("2")]
private ApiVersionPolicyFeature policyFeature;
    private RoutePattern[] routePatterns;
    private IApiVersionParser parser;
    private ApiVersioningOptions options;
    internal ApiVersionPolicyJumpTable(RouteDestination rejection, FrozenDictionary`2<ApiVersion, int> destinations, ApiVersionPolicyFeature policyFeature, RoutePattern[] routePatterns, IApiVersionParser parser, IApiVersionParameterSource source, ApiVersioningOptions options);
    public virtual int GetDestination(HttpContext httpContext);
    private bool DoesNotContainApiVersion(List`1<string> apiVersions, string otherRawApiVersion);
    private bool AreEquivalentSlow(string rawApiVersion, string otherRawApiVersion);
    private bool TryGetApiVersionFromPath(HttpRequest request, String& apiVersion);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersionRouteConstraint : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.ClientErrorEndpointBuilder : object {
    private IApiVersioningFeature feature;
    private CandidateSet candidates;
    private ApiVersioningOptions options;
    private ILogger logger;
    public ClientErrorEndpointBuilder(IApiVersioningFeature feature, CandidateSet candidates, ApiVersioningOptions options, ILogger logger);
    public Endpoint Build();
    private static string DisplayName(Endpoint endpoint);
    private String[] GetDisplayNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.ContentTypeApiVersionDecorator : object {
    private RequestDelegate decorated;
    private string parameterName;
    public ContentTypeApiVersionDecorator(RequestDelegate decorated, string parameterName);
    public static RequestDelegate op_Implicit(ContentTypeApiVersionDecorator decorator);
    private static Task AddContentTypeApiVersion(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.EdgeBuilder : object {
    private static int RejectionEndpointCapacity;
    internal static int NumberOfRejectionEndpoints;
    private bool versionsByUrl;
    private bool unspecifiedAllowed;
    private string constraintName;
    private HashSet`1<EdgeKey> keys;
    private Dictionary`2<EdgeKey, List`1<Endpoint>> edges;
    private HashSet`1<RoutePattern> routePatterns;
    private EdgeKey assumeDefault;
    public EdgeBuilder(int capacity, IApiVersionParameterSource source, ApiVersioningOptions options, ILogger logger);
    public IReadOnlyList`1<PolicyNodeEdge> Build();
    public void Add(RouteEndpoint endpoint);
    public void Add(RouteEndpoint endpoint, ApiVersion apiVersion, ApiVersionMetadata metadata);
    private void Add(EdgeKey& key, RouteEndpoint endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Asp.Versioning.Routing.EdgeKey : ValueType {
    public ApiVersion ApiVersion;
    public ApiVersionMetadata Metadata;
    public HashSet`1<RoutePattern> RoutePatterns;
    public EndpointType EndpointType;
    internal static EdgeKey Ambiguous { get; }
    internal static EdgeKey Malformed { get; }
    internal static EdgeKey Unspecified { get; }
    internal static EdgeKey Unsupported { get; }
    internal static EdgeKey UnsupportedMediaType { get; }
    internal static EdgeKey NotAcceptable { get; }
    internal static EdgeKey AssumeDefault { get; }
    private EdgeKey(EndpointType endpointType, HashSet`1<RoutePattern> routePatterns);
    internal EdgeKey(ApiVersion apiVersion, ApiVersionMetadata metadata, HashSet`1<RoutePattern> routePatterns);
    internal static EdgeKey get_Ambiguous();
    internal static EdgeKey get_Malformed();
    internal static EdgeKey get_Unspecified();
    internal static EdgeKey get_Unsupported();
    internal static EdgeKey get_UnsupportedMediaType();
    internal static EdgeKey get_NotAcceptable();
    internal static EdgeKey get_AssumeDefault();
    public sealed virtual bool Equals(EdgeKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.Routing.EndpointProblem : object {
    internal static ProblemDetailsContext New(HttpContext context, ProblemDetailsInfo info, string detail);
    internal static Task UnsupportedApiVersion(HttpContext context, ApiVersioningOptions options, int statusCode);
    private static Task ReportApiVersions(object state);
}
internal enum Asp.Versioning.Routing.EndpointType : Enum {
    public int value__;
    public static EndpointType UserDefined;
    public static EndpointType Malformed;
    public static EndpointType Ambiguous;
    public static EndpointType Unspecified;
    public static EndpointType UnsupportedMediaType;
    public static EndpointType AssumeDefault;
    public static EndpointType NotAcceptable;
    public static EndpointType Unsupported;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.MalformedApiVersionEndpoint : Endpoint {
    private static string Name;
    internal MalformedApiVersionEndpoint(ILogger logger);
    private static Task OnExecute(HttpContext context, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.NotAcceptableEndpoint : Endpoint {
    private static string Name;
    internal NotAcceptableEndpoint(ApiVersioningOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.ReportApiVersionsDecorator : object {
    private RequestDelegate decorated;
    private IReportApiVersions reporter;
    private ApiVersionModel model;
    public ReportApiVersionsDecorator(RequestDelegate decorated, IReportApiVersions reporter, ApiVersionMetadata metadata);
    public static RequestDelegate op_Implicit(ReportApiVersionsDecorator decorator);
    private static Task ReportApiVersions(object state);
}
internal class Asp.Versioning.Routing.RouteDestination : ValueType {
    public int Exit;
    public int Malformed;
    public int Ambiguous;
    public int Unspecified;
    public int Unsupported;
    public int UnsupportedMediaType;
    public int AssumeDefault;
    public int NotAcceptable;
    public RouteDestination(int exit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.RoutePatternComparer : object {
    private StringComparer comparer;
    public sealed virtual bool Equals(RoutePattern x, RoutePattern y);
    public sealed virtual int GetHashCode(RoutePattern obj);
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class Asp.Versioning.Routing.RoutePatternExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool HasVersionConstraint(RoutePattern routePattern, string constraintName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.UnspecifiedApiVersionEndpoint : Endpoint {
    private static string Name;
    internal UnspecifiedApiVersionEndpoint(ILogger logger, String[] displayNames);
    private static Task OnExecute(HttpContext context, String[] candidateEndpoints, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.UnsupportedApiVersionEndpoint : Endpoint {
    private static string Name;
    internal UnsupportedApiVersionEndpoint(ApiVersioningOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.UnsupportedMediaTypeEndpoint : Endpoint {
    private static string Name;
    internal UnsupportedMediaTypeEndpoint(ApiVersioningOptions options);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Asp.Versioning.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApiVersionUnspecified { get; }
    internal static string CannotNestApiGroup { get; }
    internal static string CannotNestVersionSet { get; }
    internal static string ConventionAddedAfterEndpointBuilt { get; }
    internal static string InvalidDefaultApiVersion { get; }
    internal static string MultipleVersionSets { get; }
    internal static string NoVersionSet { get; }
    internal static string RequestTypeUnconfigured { get; }
    internal static string UnsetRequestDelegate { get; }
    internal static string VersionedResourceNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApiVersionUnspecified();
    internal static string get_CannotNestApiGroup();
    internal static string get_CannotNestVersionSet();
    internal static string get_ConventionAddedAfterEndpointBuilt();
    internal static string get_InvalidDefaultApiVersion();
    internal static string get_MultipleVersionSets();
    internal static string get_NoVersionSet();
    internal static string get_RequestTypeUnconfigured();
    internal static string get_UnsetRequestDelegate();
    internal static string get_VersionedResourceNotSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.SunsetLinkBuilder : object {
    private SunsetPolicyBuilder policy;
    [NullableAttribute("2")]
private string language;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> languages;
    [NullableAttribute("2")]
private string title;
    [NullableAttribute("2")]
private string type;
    [CompilerGeneratedAttribute]
private Uri <LinkTarget>k__BackingField;
    public Uri LinkTarget { get; }
    public SunsetLinkBuilder(SunsetPolicyBuilder policy, Uri linkTarget);
    [CompilerGeneratedAttribute]
public Uri get_LinkTarget();
    public sealed virtual ILinkBuilder Language(string value);
    public sealed virtual ILinkBuilder Link(Uri linkTarget);
    public sealed virtual ILinkBuilder Title(string value);
    public sealed virtual ILinkBuilder Type(string value);
    public sealed virtual LinkHeaderValue Build();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Asp.Versioning.SunsetPolicyBuilder : object {
    private SunsetPolicy sunsetPolicy;
    private Nullable`1<DateTimeOffset> date;
    private SunsetLinkBuilder linkBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Uri, SunsetLinkBuilder> linkBuilders;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    public string Name { get; }
    public ApiVersion ApiVersion { get; }
    public SunsetPolicyBuilder(string name, ApiVersion apiVersion);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual ApiVersion get_ApiVersion();
    [NullableContextAttribute("1")]
public virtual void Per(SunsetPolicy policy);
    [NullableContextAttribute("1")]
public virtual ISunsetPolicyBuilder Effective(DateTimeOffset sunsetDate);
    [NullableContextAttribute("1")]
public virtual ILinkBuilder Link(Uri linkTarget);
    [NullableContextAttribute("1")]
public virtual SunsetPolicy Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.SunsetPolicyManager : object {
    private IOptions`1<ApiVersioningOptions> options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<PolicyKey, SunsetPolicy> policies;
    public SunsetPolicyManager(IOptions`1<ApiVersioningOptions> options);
    [NullableContextAttribute("2")]
public virtual bool TryGetPolicy(string name, ApiVersion apiVersion, SunsetPolicy& sunsetPolicy);
    private static Dictionary`2<PolicyKey, SunsetPolicy> BuildPolicies(ApiVersioningOptions options);
}
[ExtensionAttribute]
internal static class Asp.Versioning.UriExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string SafeFullPath(Uri uri);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.UrlSegmentApiVersionReader : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) reentrant;
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<string> Read(HttpRequest request);
    [NullableContextAttribute("1")]
public virtual void AddParameters(IApiVersionParameterDescriptionContext context);
}
internal class Asp.Versioning.ValidateApiVersioningOptions : object {
    [NullableContextAttribute("1")]
public sealed virtual ValidateOptionsResult Validate(string name, ApiVersioningOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Builder.IEndpointConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder WithApiVersionSet(TBuilder builder, ApiVersionSet apiVersionSet);
    [ExtensionAttribute]
public static TBuilder MapToApiVersion(TBuilder builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static TBuilder MapToApiVersion(TBuilder builder, double version, string status);
    [ExtensionAttribute]
public static TBuilder MapToApiVersion(TBuilder builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static TBuilder MapToApiVersion(TBuilder builder, DateOnly groupVersion, string status);
    [ExtensionAttribute]
public static TBuilder MapToApiVersion(TBuilder builder, ApiVersion apiVersion);
    [ExtensionAttribute]
public static TBuilder IsApiVersionNeutral(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder HasApiVersion(TBuilder builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static TBuilder HasApiVersion(TBuilder builder, double version, string status);
    [ExtensionAttribute]
public static TBuilder HasApiVersion(TBuilder builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static TBuilder HasApiVersion(TBuilder builder, DateOnly groupVersion, string status);
    [ExtensionAttribute]
public static TBuilder HasApiVersion(TBuilder builder, ApiVersion apiVersion);
    [ExtensionAttribute]
public static TBuilder HasDeprecatedApiVersion(TBuilder builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static TBuilder HasDeprecatedApiVersion(TBuilder builder, double version, string status);
    [ExtensionAttribute]
public static TBuilder HasDeprecatedApiVersion(TBuilder builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static TBuilder HasDeprecatedApiVersion(TBuilder builder, DateOnly groupVersion, string status);
    [ExtensionAttribute]
public static TBuilder HasDeprecatedApiVersion(TBuilder builder, ApiVersion apiVersion);
    [ExtensionAttribute]
public static TBuilder AdvertisesApiVersion(TBuilder builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesApiVersion(TBuilder builder, double version, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesApiVersion(TBuilder builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesApiVersion(TBuilder builder, DateOnly groupVersion, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesApiVersion(TBuilder builder, ApiVersion apiVersion);
    [ExtensionAttribute]
public static TBuilder AdvertisesDeprecatedApiVersion(TBuilder builder, int majorVersion, Nullable`1<int> minorVersion, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesDeprecatedApiVersion(TBuilder builder, double version, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesDeprecatedApiVersion(TBuilder builder, int year, int month, int day, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesDeprecatedApiVersion(TBuilder builder, DateOnly groupVersion, string status);
    [ExtensionAttribute]
public static TBuilder AdvertisesDeprecatedApiVersion(TBuilder builder, ApiVersion apiVersion);
    [ExtensionAttribute]
public static TBuilder ReportApiVersions(TBuilder builder);
    private static void AddMetadata(EndpointBuilder builder, ApiVersionSet versionSet);
    private static void AddMetadata(EndpointBuilder builder, object item);
    private static void AdvertiseInApiVersionSet(IList`1<object> metadata, ApiVersion apiVersion);
    private static void AdvertiseDeprecatedInApiVersionSet(IList`1<object> metadata, ApiVersion apiVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static ApiVersionSetBuilder NewApiVersionSet(IEndpointRouteBuilder endpoints, string name);
    [ExtensionAttribute]
public static IVersionedEndpointRouteBuilder WithApiVersionSet(TBuilder builder, string name);
    [ExtensionAttribute]
public static IVersionedEndpointRouteBuilder NewVersionedApi(IEndpointRouteBuilder builder, string name);
    [ExtensionAttribute]
private static IVersionedEndpointRouteBuilder NewVersionedEndpointRouteBuilder(IEndpointRouteBuilder builder, IEndpointRouteBuilder routeBuilder, IEndpointConventionBuilder conventionBuilder, string name);
    [ExtensionAttribute]
private static bool HasMetadata(IEndpointRouteBuilder builder);
    [ExtensionAttribute]
private static bool IsNestedGroup(IEndpointRouteBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Http.HttpContextExtensions : object {
    [ExtensionAttribute]
public static IApiVersioningFeature ApiVersioningFeature(HttpContext context);
    [ExtensionAttribute]
public static ApiVersion GetRequestedApiVersion(HttpContext context);
    [ExtensionAttribute]
internal static bool TryGetProblemDetailsService(HttpContext context, IProblemDetailsService& problemDetailsService);
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Http.HttpRequestExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static bool TryGetApiVersionFromPath(HttpRequest request, TList routePatterns, string constraintName, String& apiVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Http.HttpResponseExtensions : object {
    private static string Sunset;
    private static string Link;
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void WriteSunsetPolicy(HttpResponse response, SunsetPolicy sunsetPolicy);
    private static void AddLinkHeaders(IHeaderDictionary headers, IList`1<LinkHeaderValue> links);
    [ExtensionAttribute]
public static void AddApiVersionToContentType(HttpResponse response, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ApiVersioningBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public ApiVersioningBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IApiVersioningBuilder AddApiVersioning(IServiceCollection services);
    [ExtensionAttribute]
public static IApiVersioningBuilder AddApiVersioning(IServiceCollection services, Action`1<ApiVersioningOptions> setupAction);
    [ExtensionAttribute]
public static IApiVersioningBuilder EnableApiVersionBinding(IApiVersioningBuilder builder);
    [ExtensionAttribute]
public static IServiceCollection AddErrorObjects(IServiceCollection services, Action`1<JsonOptions> setup);
    [ExtensionAttribute]
public static IServiceCollection AddErrorObjects(IServiceCollection services, Action`1<JsonOptions> setup);
    private static void DefaultErrorObjectJsonConfig(JsonOptions options);
    private static void AddApiVersioningServices(IServiceCollection services);
    private static ServiceDescriptor WithLinkGeneratorDecorator(IServiceCollection services);
    private static void TryAddProblemDetailsRfc7231Compliance(IServiceCollection services);
    private static void TryAddErrorObjectJsonOptions(IServiceCollection services);
    [CompilerGeneratedAttribute]
internal static bool <TryAddProblemDetailsRfc7231Compliance>g__IsDefaultProblemDetailsWriter|8_1(ServiceDescriptor serviceDescriptor);
    [CompilerGeneratedAttribute]
internal static Rfc7231ProblemDetailsWriter <TryAddProblemDetailsRfc7231Compliance>g__NewProblemDetailsWriter|8_2(IServiceProvider serviceProvider, Type decoratedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetValue(IDictionary`2<TKey, object> dictionary, TKey key, TValue& value);
    [ExtensionAttribute]
internal static List`1<T> AsList(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
internal static void AddRange(ICollection`1<T> collection, IEnumerable`1<T> items);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F524BED4488C924DE71591E1AE5D2A0FEC9B05787DBA377AC774CD4C88A2BD35D__RouteConstraintRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F524BED4488C924DE71591E1AE5D2A0FEC9B05787DBA377AC774CD4C88A2BD35D__RouteConstraintRegex_0 Instance;
    private static <RegexGenerator_g>F524BED4488C924DE71591E1AE5D2A0FEC9B05787DBA377AC774CD4C88A2BD35D__RouteConstraintRegex_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F524BED4488C924DE71591E1AE5D2A0FEC9B05787DBA377AC774CD4C88A2BD35D__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F524BED4488C924DE71591E1AE5D2A0FEC9B05787DBA377AC774CD4C88A2BD35D__Utilities();
}
