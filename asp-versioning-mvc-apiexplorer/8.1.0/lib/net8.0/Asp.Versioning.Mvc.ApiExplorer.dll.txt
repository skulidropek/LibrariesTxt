[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiExplorer.ApiExplorerOptions : object {
    [NullableAttribute("2")]
private ApiVersion defaultVersion;
    [NullableAttribute("2")]
private IApiVersionParameterSource parameterSource;
    [CompilerGeneratedAttribute]
private bool <AssumeDefaultVersionWhenUnspecified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteConstraintName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FormatGroupNameCallback <FormatGroupName>k__BackingField;
    [NullableAttribute("2")]
private IApiVersionSelector apiVersionSelector;
    [CompilerGeneratedAttribute]
private string <GroupNameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstitutionFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubstituteApiVersionInUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultApiVersionParameterDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddApiVersionParametersWhenVersionNeutral>k__BackingField;
    public ApiVersion DefaultApiVersion { get; public set; }
    public bool AssumeDefaultVersionWhenUnspecified { get; public set; }
    public IApiVersionParameterSource ApiVersionParameterSource { get; public set; }
    public string RouteConstraintName { get; public set; }
    [CLSCompliantAttribute("False")]
public IApiVersionSelector ApiVersionSelector { get; public set; }
    [NullableAttribute("2")]
public FormatGroupNameCallback FormatGroupName { get; public set; }
    public string GroupNameFormat { get; public set; }
    public string SubstitutionFormat { get; public set; }
    public bool SubstituteApiVersionInUrl { get; public set; }
    public string DefaultApiVersionParameterDescription { get; public set; }
    public bool AddApiVersionParametersWhenVersionNeutral { get; public set; }
    public ApiVersion get_DefaultApiVersion();
    public void set_DefaultApiVersion(ApiVersion value);
    [CompilerGeneratedAttribute]
public bool get_AssumeDefaultVersionWhenUnspecified();
    [CompilerGeneratedAttribute]
public void set_AssumeDefaultVersionWhenUnspecified(bool value);
    public IApiVersionParameterSource get_ApiVersionParameterSource();
    public void set_ApiVersionParameterSource(IApiVersionParameterSource value);
    [CompilerGeneratedAttribute]
public string get_RouteConstraintName();
    [CompilerGeneratedAttribute]
public void set_RouteConstraintName(string value);
    public IApiVersionSelector get_ApiVersionSelector();
    public void set_ApiVersionSelector(IApiVersionSelector value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FormatGroupNameCallback get_FormatGroupName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FormatGroupName(FormatGroupNameCallback value);
    [CompilerGeneratedAttribute]
public string get_GroupNameFormat();
    [CompilerGeneratedAttribute]
public void set_GroupNameFormat(string value);
    [CompilerGeneratedAttribute]
public string get_SubstitutionFormat();
    [CompilerGeneratedAttribute]
public void set_SubstitutionFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_SubstituteApiVersionInUrl();
    [CompilerGeneratedAttribute]
public void set_SubstituteApiVersionInUrl(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultApiVersionParameterDescription();
    [CompilerGeneratedAttribute]
public void set_DefaultApiVersionParameterDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_AddApiVersionParametersWhenVersionNeutral();
    [CompilerGeneratedAttribute]
public void set_AddApiVersionParametersWhenVersionNeutral(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.ApiExplorerOptionsFactory`1 : OptionsFactory`1<T> {
    private IOptions`1<ApiVersioningOptions> optionsHolder;
    protected ApiVersioningOptions Options { get; }
    public ApiExplorerOptionsFactory`1(IOptions`1<ApiVersioningOptions> options, IEnumerable`1<IConfigureOptions`1<T>> setups, IEnumerable`1<IPostConfigureOptions`1<T>> postConfigures);
    public ApiExplorerOptionsFactory`1(IOptions`1<ApiVersioningOptions> options, IEnumerable`1<IConfigureOptions`1<T>> setups, IEnumerable`1<IPostConfigureOptions`1<T>> postConfigures, IEnumerable`1<IValidateOptions`1<T>> validations);
    protected ApiVersioningOptions get_Options();
    protected virtual T CreateInstance(string name);
    protected static void CopyOptions(ApiVersioningOptions sourceOptions, T targetOptions);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.ApiVersionModelMetadata : ModelMetadata {
    [NullableAttribute("1")]
private ModelMetadata inner;
    [NullableAttribute("1")]
private string description;
    [NullableAttribute("1")]
public IReadOnlyDictionary`2<object, object> AdditionalValues { get; }
    [NullableAttribute("1")]
public ModelPropertyCollection Properties { get; }
    public string BinderModelName { get; }
    public Type BinderType { get; }
    public BindingSource BindingSource { get; }
    public bool ConvertEmptyStringToNull { get; }
    [NullableAttribute("1")]
public string DataTypeName { get; }
    [NullableAttribute("1")]
public string Description { get; }
    public string DisplayFormatString { get; }
    public string DisplayName { get; }
    public string EditFormatString { get; }
    public ModelMetadata ElementMetadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> EnumGroupedDisplayNamesAndValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, string> EnumNamesAndValues { get; }
    public bool HasNonDefaultEditFormat { get; }
    public bool HtmlEncode { get; }
    public bool HideSurroundingHtml { get; }
    public bool IsBindingAllowed { get; }
    public bool IsBindingRequired { get; }
    public bool IsEnum { get; }
    public bool IsFlagsEnum { get; }
    public bool IsReadOnly { get; }
    public bool IsRequired { get; }
    [NullableAttribute("1")]
public ModelBindingMessageProvider ModelBindingMessageProvider { get; }
    public int Order { get; }
    public string Placeholder { get; }
    public string NullDisplayText { get; }
    public IPropertyFilterProvider PropertyFilterProvider { get; }
    public bool ShowForDisplay { get; }
    public bool ShowForEdit { get; }
    public string SimpleDisplayProperty { get; }
    public string TemplateHint { get; }
    public bool ValidateChildren { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<object> ValidatorMetadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> PropertyGetter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> PropertySetter { get; }
    [NullableContextAttribute("1")]
public ApiVersionModelMetadata(IModelMetadataProvider modelMetadataProvider, string description);
    [NullableContextAttribute("1")]
public virtual IReadOnlyDictionary`2<object, object> get_AdditionalValues();
    [NullableContextAttribute("1")]
public virtual ModelPropertyCollection get_Properties();
    public virtual string get_BinderModelName();
    public virtual Type get_BinderType();
    public virtual BindingSource get_BindingSource();
    public virtual bool get_ConvertEmptyStringToNull();
    [NullableContextAttribute("1")]
public virtual string get_DataTypeName();
    [NullableContextAttribute("1")]
public virtual string get_Description();
    public virtual string get_DisplayFormatString();
    public virtual string get_DisplayName();
    public virtual string get_EditFormatString();
    public virtual ModelMetadata get_ElementMetadata();
    public virtual IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> get_EnumGroupedDisplayNamesAndValues();
    public virtual IReadOnlyDictionary`2<string, string> get_EnumNamesAndValues();
    public virtual bool get_HasNonDefaultEditFormat();
    public virtual bool get_HtmlEncode();
    public virtual bool get_HideSurroundingHtml();
    public virtual bool get_IsBindingAllowed();
    public virtual bool get_IsBindingRequired();
    public virtual bool get_IsEnum();
    public virtual bool get_IsFlagsEnum();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsRequired();
    [NullableContextAttribute("1")]
public virtual ModelBindingMessageProvider get_ModelBindingMessageProvider();
    public virtual int get_Order();
    public virtual string get_Placeholder();
    public virtual string get_NullDisplayText();
    public virtual IPropertyFilterProvider get_PropertyFilterProvider();
    public virtual bool get_ShowForDisplay();
    public virtual bool get_ShowForEdit();
    public virtual string get_SimpleDisplayProperty();
    public virtual string get_TemplateHint();
    public virtual bool get_ValidateChildren();
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<object> get_ValidatorMetadata();
    public virtual Func`2<object, object> get_PropertyGetter();
    public virtual Action`2<object, object> get_PropertySetter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.ApiExplorer.ApiVersionParameterDescriptionContext : object {
    private static int MaxApiVersionLocations;
    private List`1<ApiParameterDescription> parameters;
    private Nullable`1<bool> versionNeutral;
    private bool optional;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IInlineConstraintResolver <ConstraintResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiDescription <ApiDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiExplorerOptions <Options>k__BackingField;
    [NullableAttribute("2")]
internal IInlineConstraintResolver ConstraintResolver { get; internal set; }
    [CLSCompliantAttribute("False")]
protected ApiDescription ApiDescription { get; }
    protected ApiVersion ApiVersion { get; }
    protected bool IsApiVersionNeutral { get; }
    [CLSCompliantAttribute("False")]
protected ModelMetadata ModelMetadata { get; }
    protected ApiExplorerOptions Options { get; }
    private bool HasPathParameter { get; }
    [CLSCompliantAttribute("False")]
public ApiVersionParameterDescriptionContext(ApiDescription apiDescription, ApiVersion apiVersion, ModelMetadata modelMetadata, ApiExplorerOptions options);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IInlineConstraintResolver get_ConstraintResolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ConstraintResolver(IInlineConstraintResolver value);
    [CompilerGeneratedAttribute]
protected ApiDescription get_ApiDescription();
    [CompilerGeneratedAttribute]
protected ApiVersion get_ApiVersion();
    protected bool get_IsApiVersionNeutral();
    [CompilerGeneratedAttribute]
protected ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
protected ApiExplorerOptions get_Options();
    private bool get_HasPathParameter();
    public virtual void AddParameter(string name, ApiVersionParameterLocation location);
    protected virtual void AddQueryString(string name);
    protected virtual void AddHeader(string name);
    protected virtual void UpdateUrlSegment();
    protected virtual void AddMediaTypeParameter(string name);
    private static ApiParameterDescription FindByRouteConstraintType(ApiDescription description);
    private static ApiParameterDescription FindByRouteConstraintName(ApiDescription description, string constraintName);
    [NullableContextAttribute("2")]
private static ApiParameterDescription TryCreateFromRouteTemplate(ApiDescription description, IInlineConstraintResolver constraintResolver);
    private ApiParameterDescription NewApiVersionParameter(string name, BindingSource source);
    private void RemoveAllParametersExcept(ApiParameterDescription parameter);
    private static bool FirstParameterIsOptional(ApiDescription apiDescription, ApiVersion apiVersion, ApiExplorerOptions options);
    [NullableContextAttribute("0")]
private static string FormatToken(ReadOnlySpan`1<char> parameterName, ReadOnlySpan`1<char> constraintName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.DefaultApiVersionDescriptionProvider : object {
    private ApiVersionDescriptionCollection`1<GroupedApiVersionMetadata> collection;
    private IOptions`1<ApiExplorerOptions> options;
    [CompilerGeneratedAttribute]
private ISunsetPolicyManager <SunsetPolicyManager>k__BackingField;
    protected ISunsetPolicyManager SunsetPolicyManager { get; }
    protected ApiExplorerOptions Options { get; }
    public IReadOnlyList`1<ApiVersionDescription> ApiVersionDescriptions { get; }
    public DefaultApiVersionDescriptionProvider(IEnumerable`1<IApiVersionMetadataCollationProvider> providers, ISunsetPolicyManager sunsetPolicyManager, IOptions`1<ApiExplorerOptions> apiExplorerOptions);
    [CompilerGeneratedAttribute]
protected ISunsetPolicyManager get_SunsetPolicyManager();
    protected ApiExplorerOptions get_Options();
    public sealed virtual IReadOnlyList`1<ApiVersionDescription> get_ApiVersionDescriptions();
    protected virtual IReadOnlyList`1<ApiVersionDescription> Describe(IReadOnlyList`1<ApiVersionMetadata> metadata);
}
public class Asp.Versioning.ApiExplorer.FormatGroupNameCallback : MulticastDelegate {
    public FormatGroupNameCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(string groupName, string apiVersion);
    public virtual IAsyncResult BeginInvoke(string groupName, string apiVersion, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.GroupedApiVersionDescriptionProvider : object {
    private ApiVersionDescriptionCollection`1<GroupedApiVersionMetadata> collection;
    private IOptions`1<ApiExplorerOptions> options;
    [CompilerGeneratedAttribute]
private ISunsetPolicyManager <SunsetPolicyManager>k__BackingField;
    protected ISunsetPolicyManager SunsetPolicyManager { get; }
    protected ApiExplorerOptions Options { get; }
    public IReadOnlyList`1<ApiVersionDescription> ApiVersionDescriptions { get; }
    public GroupedApiVersionDescriptionProvider(IEnumerable`1<IApiVersionMetadataCollationProvider> providers, ISunsetPolicyManager sunsetPolicyManager, IOptions`1<ApiExplorerOptions> apiExplorerOptions);
    [CompilerGeneratedAttribute]
protected ISunsetPolicyManager get_SunsetPolicyManager();
    protected ApiExplorerOptions get_Options();
    public sealed virtual IReadOnlyList`1<ApiVersionDescription> get_ApiVersionDescriptions();
    protected virtual IReadOnlyList`1<ApiVersionDescription> Describe(IReadOnlyList`1<GroupedApiVersionMetadata> metadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.ApiExplorer.Internal.ApiVersionDescriptionCollection`1 : object {
    private object syncRoot;
    private Func`2<IReadOnlyList`1<T>, IReadOnlyList`1<ApiVersionDescription>> describe;
    private IApiVersionMetadataCollationProvider[] collators;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ApiVersionDescription> items;
    private int version;
    public IReadOnlyList`1<ApiVersionDescription> Items { get; }
    public ApiVersionDescriptionCollection`1(Func`2<IReadOnlyList`1<T>, IReadOnlyList`1<ApiVersionDescription>> describe, IEnumerable`1<IApiVersionMetadataCollationProvider> collators);
    public IReadOnlyList`1<ApiVersionDescription> get_Items();
    private int ComputeVersion();
    private static int ComputeVersion(IApiVersionMetadataCollationProvider[] providers);
}
internal class Asp.Versioning.ApiExplorer.Internal.ApiVersionDescriptionComparer : object {
    [NullableContextAttribute("2")]
public sealed virtual int Compare(ApiVersionDescription x, ApiVersionDescription y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.ApiExplorer.Internal.DescriptionProvider : object {
    internal static ApiVersionDescription[] Describe(IReadOnlyList`1<T> metadata, ISunsetPolicyManager sunsetPolicyManager, ApiExplorerOptions options);
    private static void BucketizeApiVersions(IReadOnlyList`1<T> list, HashSet`1<GroupedApiVersion> supported, HashSet`1<GroupedApiVersion> deprecated, ApiExplorerOptions options);
    private static void AppendDescriptions(SortedSet`1<ApiVersionDescription> descriptions, HashSet`1<GroupedApiVersion> versions, ISunsetPolicyManager sunsetPolicyManager, ApiExplorerOptions options, bool deprecated);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.ApiExplorer.Internal.GroupedApiVersion : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersion <ApiVersion>k__BackingField;
    [NullableAttribute("2")]
public string GroupName { get; public set; }
    public ApiVersion ApiVersion { get; public set; }
    public GroupedApiVersion(string GroupName, ApiVersion ApiVersion);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GroupName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ApiVersion get_ApiVersion();
    [CompilerGeneratedAttribute]
public void set_ApiVersion(ApiVersion value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GroupedApiVersion left, GroupedApiVersion right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GroupedApiVersion left, GroupedApiVersion right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(GroupedApiVersion other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& GroupName, ApiVersion& ApiVersion);
}
[NullableContextAttribute("1")]
internal interface Asp.Versioning.ApiExplorer.Internal.IGroupedApiVersionMetadata {
    [NullableAttribute("2")]
public string GroupName { get; }
    public string Name { get; }
    public bool IsApiVersionNeutral { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_GroupName();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsApiVersionNeutral();
    public abstract virtual ApiVersionModel Map(ApiVersionMapping mapping);
    [NullableContextAttribute("2")]
public abstract virtual ApiVersionMapping MappingTo(ApiVersion apiVersion);
    [NullableContextAttribute("2")]
public abstract virtual bool IsMappedTo(ApiVersion apiVersion);
    public abstract virtual void Deconstruct(ApiVersionModel& apiModel, ApiVersionModel& endpointModel);
}
[NullableContextAttribute("1")]
internal interface Asp.Versioning.ApiExplorer.Internal.IGroupedApiVersionMetadataFactory`1 {
    public static abstract virtual T New(string groupName, ApiVersionMetadata metadata);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Asp.Versioning.ApiExplorer.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApiVersionDisplayName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApiVersionDisplayName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.VersionedApiDescriptionProvider : object {
    private IOptions`1<ApiExplorerOptions> options;
    private IInlineConstraintResolver constraintResolver;
    [NullableAttribute("2")]
private ApiVersionModelMetadata modelMetadata;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private ISunsetPolicyManager <SunsetPolicyManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelMetadataProvider <ModelMetadataProvider>k__BackingField;
    public int Order { get; protected set; }
    protected ISunsetPolicyManager SunsetPolicyManager { get; }
    protected ApiExplorerOptions Options { get; }
    protected IModelMetadataProvider ModelMetadataProvider { get; }
    private ApiVersionModelMetadata ModelMetadata { get; }
    public VersionedApiDescriptionProvider(ISunsetPolicyManager sunsetPolicyManager, IModelMetadataProvider modelMetadataProvider, IOptions`1<ApiExplorerOptions> options);
    internal VersionedApiDescriptionProvider(ISunsetPolicyManager sunsetPolicyManager, IModelMetadataProvider modelMetadataProvider, IInlineConstraintResolver constraintResolver, IOptions`1<ApiExplorerOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
protected void set_Order(int value);
    [CompilerGeneratedAttribute]
protected ISunsetPolicyManager get_SunsetPolicyManager();
    protected ApiExplorerOptions get_Options();
    [CompilerGeneratedAttribute]
protected IModelMetadataProvider get_ModelMetadataProvider();
    private ApiVersionModelMetadata get_ModelMetadata();
    protected virtual bool ShouldExploreAction(ActionDescriptor actionDescriptor, ApiVersion apiVersion);
    protected virtual void PopulateApiVersionParameters(ApiDescription apiDescription, ApiVersion apiVersion);
    public virtual void OnProvidersExecuted(ApiDescriptionProviderContext context);
    public virtual void OnProvidersExecuting(ApiDescriptionProviderContext context);
    private static bool IsUnversioned(ActionDescriptor action);
    private static void TryUpdateControllerRouteValueForMinimalApi(ApiDescription description);
    private static void AddOrUpdateResult(List`1<ApiDescription> results, ApiDescription result, ApiVersionMetadata metadata, ApiVersion version);
    private ApiVersion[] FlattenApiVersions(IList`1<ApiDescription> descriptions);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Asp.Versioning.ExpSR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultApiVersionParamDesc { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultApiVersionParamDesc();
}
internal static class Asp.Versioning.Resources : object {
    [NullableAttribute("1")]
public static string BaseName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Builder.ApiVersionDescriptionProviderFactory : object {
    private ISunsetPolicyManager sunsetPolicyManager;
    private IApiVersionMetadataCollationProvider[] providers;
    private IEndpointInspector endpointInspector;
    private IOptions`1<ApiExplorerOptions> options;
    public ApiVersionDescriptionProviderFactory(ISunsetPolicyManager sunsetPolicyManager, IEnumerable`1<IApiVersionMetadataCollationProvider> providers, IEndpointInspector endpointInspector, IOptions`1<ApiExplorerOptions> options);
    public sealed virtual IApiVersionDescriptionProvider Create(EndpointDataSource endpointDataSource);
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Builder.IEndpointRouteBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IReadOnlyList`1<ApiVersionDescription> DescribeApiVersions(IEndpointRouteBuilder endpoints);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions : object {
    [ExtensionAttribute]
public static ApiVersion GetApiVersion(ApiDescription apiDescription);
    [ExtensionAttribute]
public static SunsetPolicy GetSunsetPolicy(ApiDescription apiDescription);
    [ExtensionAttribute]
public static bool IsDeprecated(ApiDescription apiDescription);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void SetApiVersion(ApiDescription apiDescription, ApiVersion apiVersion);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void SetSunsetPolicy(ApiDescription apiDescription, SunsetPolicy sunsetPolicy);
    [ExtensionAttribute]
public static bool TryUpdateRelativePathAndRemoveApiVersionParameter(ApiDescription apiDescription, ApiExplorerOptions options);
    [ExtensionAttribute]
public static ApiDescription Clone(ApiDescription apiDescription);
    [ExtensionAttribute]
internal static ApiRequestFormat Clone(ApiRequestFormat requestFormat);
    [ExtensionAttribute]
internal static ApiResponseType Clone(ApiResponseType responseType);
    private static ApiParameterDescription Clone(ApiParameterDescription parameterDescription);
    private static ApiResponseFormat Clone(ApiResponseFormat responseFormat);
    private static void CloneList(IList`1<T> source, IList`1<T> destintation, Func`2<T, T> clone);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.Extensions.DependencyInjection.IApiVersioningBuilderExtensions : object {
    [ExtensionAttribute]
public static IApiVersioningBuilder AddApiExplorer(IApiVersioningBuilder builder);
    [ExtensionAttribute]
public static IApiVersioningBuilder AddApiExplorer(IApiVersioningBuilder builder, Action`1<ApiExplorerOptions> setupAction);
    private static void AddApiExplorerServices(IApiVersioningBuilder builder);
}
