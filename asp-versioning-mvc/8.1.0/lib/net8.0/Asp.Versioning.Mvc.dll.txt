[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.ActionApiVersionMetadataCollationProvider : object {
    private IActionDescriptorCollectionProvider provider;
    public int Version { get; }
    public ActionApiVersionMetadataCollationProvider(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider);
    public sealed virtual int get_Version();
    public sealed virtual void Execute(ApiVersionMetadataCollationContext context);
    private static string GetGroupName(ActionDescriptor action);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiExplorer.MvcEndpointInspector : object {
    [NullableContextAttribute("1")]
public sealed virtual bool IsControllerAction(Endpoint endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiVersionCollator : object {
    [CompilerGeneratedAttribute]
private IControllerNameConvention <NamingConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    protected IControllerNameConvention NamingConvention { get; }
    public int Order { get; protected set; }
    public ApiVersionCollator(IControllerNameConvention namingConvention);
    [CompilerGeneratedAttribute]
protected IControllerNameConvention get_NamingConvention();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
protected void set_Order(int value);
    public virtual void OnProvidersExecuted(ActionDescriptorProviderContext context);
    public virtual void OnProvidersExecuting(ActionDescriptorProviderContext context);
    protected virtual string GetControllerName(ActionDescriptor action);
    private static bool IsUnversioned(ActionDescriptor action);
    [IteratorStateMachineAttribute("Asp.Versioning.ApiVersionCollator/<GroupActionsByController>d__12")]
private IEnumerable`1<IReadOnlyList`1<ActionDescriptor>> GroupActionsByController(IList`1<ActionDescriptor> actions);
    private static ApiVersionModel CollateModel(IEnumerable`1<ActionDescriptor> actions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiVersioningApplicationModelProvider : object {
    private IOptions`1<ApiVersioningOptions> options;
    private IOptions`1<MvcApiVersioningOptions> mvcOptions;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private IApiControllerFilter <ControllerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IControllerNameConvention <NamingConvention>k__BackingField;
    public int Order { get; protected set; }
    protected IApiControllerFilter ControllerFilter { get; }
    protected IControllerNameConvention NamingConvention { get; }
    protected IApiVersionConventionBuilder ConventionBuilder { get; }
    protected ApiVersioningOptions Options { get; }
    public ApiVersioningApplicationModelProvider(IApiControllerFilter controllerFilter, IControllerNameConvention namingConvention, IOptions`1<ApiVersioningOptions> options, IOptions`1<MvcApiVersioningOptions> mvcOptions);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
protected void set_Order(int value);
    [CompilerGeneratedAttribute]
protected IApiControllerFilter get_ControllerFilter();
    [CompilerGeneratedAttribute]
protected IControllerNameConvention get_NamingConvention();
    protected IApiVersionConventionBuilder get_ConventionBuilder();
    protected ApiVersioningOptions get_Options();
    public virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    public virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    private static bool IsDecoratedWithAttributes(ControllerModel controller);
    private void ApplyImplicitConventions(ControllerModel controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiVersioningMvcOptionsSetup : object {
    private IOptions`1<ApiVersioningOptions> versioningOptions;
    public ApiVersioningMvcOptionsSetup(IOptions`1<ApiVersioningOptions> options);
    public virtual void PostConfigure(string name, MvcOptions options);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApiVersionModelBinder : object {
    [NullableContextAttribute("1")]
public virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
internal class Asp.Versioning.ApiVersionModelBinderProvider : object {
    [NullableAttribute("2")]
private static ApiVersionModelBinder binder;
    [NullableContextAttribute("1")]
public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApplicationModels.ApiBehaviorSpecification : object {
    [NullableContextAttribute("1")]
public sealed virtual bool IsSatisfiedBy(ControllerModel controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApplicationModels.DefaultApiControllerFilter : object {
    private IReadOnlyList`1<IApiControllerSpecification> specifications;
    public DefaultApiControllerFilter(IEnumerable`1<IApiControllerSpecification> specifications);
    public sealed virtual IList`1<ControllerModel> Apply(IList`1<ControllerModel> controllers);
    private bool IsApiController(ControllerModel controller);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.ApplicationModels.IApiControllerFilter {
    public abstract virtual IList`1<ControllerModel> Apply(IList`1<ControllerModel> controllers);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.ApplicationModels.IApiControllerSpecification {
    public abstract virtual bool IsSatisfiedBy(ControllerModel controller);
}
[CLSCompliantAttribute("False")]
public class Asp.Versioning.ApplicationModels.NoControllerFilter : object {
    [NullableContextAttribute("1")]
public sealed virtual IList`1<ControllerModel> Apply(IList`1<ControllerModel> controllers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.ApplyContentTypeVersionActionFilter : object {
    private string parameterName;
    public ApplyContentTypeVersionActionFilter(IApiVersionParameterSource source);
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
    private Task AddContentTypeApiVersion(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("4")]
public class Asp.Versioning.ControllerNameAttribute : RouteValueAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ControllerNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ActionApiVersionConventionBuilder : ActionApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ControllerApiVersionConventionBuilder <ControllerBuilder>k__BackingField;
    protected ControllerApiVersionConventionBuilder ControllerBuilder { get; }
    public Type ControllerType { get; }
    public ActionApiVersionConventionBuilder(ControllerApiVersionConventionBuilder controllerBuilder);
    [CompilerGeneratedAttribute]
protected ControllerApiVersionConventionBuilder get_ControllerBuilder();
    public sealed virtual Type get_ControllerType();
    public virtual ActionApiVersionConventionBuilder Action(MethodInfo actionMethod);
    public virtual ActionApiVersionConventionBuilder MapToApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder IsApiVersionNeutral();
    public virtual ActionApiVersionConventionBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IMapToApiVersionConventionBuilder.MapToApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Asp.Versioning.Conventions.IActionConventionBuilder.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ActionApiVersionConventionBuilder`1 : ActionApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private ControllerApiVersionConventionBuilder`1<T> <ControllerBuilder>k__BackingField;
    protected ControllerApiVersionConventionBuilder`1<T> ControllerBuilder { get; }
    private Type Asp.Versioning.Conventions.IActionConventionBuilder.ControllerType { get; }
    public ActionApiVersionConventionBuilder`1(ControllerApiVersionConventionBuilder`1<T> controllerBuilder);
    [CompilerGeneratedAttribute]
protected ControllerApiVersionConventionBuilder`1<T> get_ControllerBuilder();
    [EditorBrowsableAttribute("1")]
public virtual ActionApiVersionConventionBuilder`1<T> Action(MethodInfo actionMethod);
    public virtual ActionApiVersionConventionBuilder`1<T> MapToApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> IsApiVersionNeutral();
    public virtual ActionApiVersionConventionBuilder`1<T> HasApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder`1<T> AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override Type Asp.Versioning.Conventions.IActionConventionBuilder.get_ControllerType();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IMapToApiVersionConventionBuilder.MapToApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Asp.Versioning.Conventions.IActionConventionBuilder.Action(MethodInfo actionMethod);
    private sealed virtual override IActionConventionBuilder`1<T> Asp.Versioning.Conventions.IActionConventionBuilder<T>.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public abstract class Asp.Versioning.Conventions.ActionApiVersionConventionBuilderBase : ApiVersionConventionBuilderBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ApiVersion> mapped;
    [CompilerGeneratedAttribute]
private IControllerNameConvention <NamingConvention>k__BackingField;
    protected bool IsEmpty { get; }
    protected ICollection`1<ApiVersion> MappedVersions { get; }
    public IControllerNameConvention NamingConvention { get; }
    protected ActionApiVersionConventionBuilderBase(IControllerNameConvention namingConvention);
    public virtual void ApplyTo(ActionModel item);
    protected virtual bool get_IsEmpty();
    protected ICollection`1<ApiVersion> get_MappedVersions();
    [CompilerGeneratedAttribute]
public IControllerNameConvention get_NamingConvention();
    protected virtual void MergeAttributesWithConventions(IReadOnlyList`1<object> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ActionApiVersionConventionBuilderCollection : object {
    private ControllerApiVersionConventionBuilder controllerBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ActionBuilderMapping> actionBuilderMappings;
    public int Count { get; }
    public ActionApiVersionConventionBuilderCollection(ControllerApiVersionConventionBuilder controllerBuilder);
    protected internal virtual ActionApiVersionConventionBuilder GetOrAdd(MethodInfo actionMethod);
    public virtual int get_Count();
    public virtual bool TryGetValue(MethodInfo actionMethod, ActionApiVersionConventionBuilder& actionBuilder);
    [IteratorStateMachineAttribute("Asp.Versioning.Conventions.ActionApiVersionConventionBuilderCollection/<GetEnumerator>d__7")]
public virtual IEnumerator`1<ActionApiVersionConventionBuilder> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ActionApiVersionConventionBuilderCollection`1 : object {
    private ControllerApiVersionConventionBuilder`1<T> controllerBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ActionBuilderMapping<T>> actionBuilderMappings;
    public int Count { get; }
    public ActionApiVersionConventionBuilderCollection`1(ControllerApiVersionConventionBuilder`1<T> controllerBuilder);
    protected internal virtual ActionApiVersionConventionBuilder`1<T> GetOrAdd(MethodInfo actionMethod);
    public virtual int get_Count();
    public virtual bool TryGetValue(MethodInfo actionMethod, ActionApiVersionConventionBuilder`1& actionBuilder);
    [IteratorStateMachineAttribute("Asp.Versioning.Conventions.ActionApiVersionConventionBuilderCollection`1/<GetEnumerator>d__7")]
public virtual IEnumerator`1<ActionApiVersionConventionBuilder`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Asp.Versioning.Conventions.ActionConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IActionConventionBuilder`1<TController> builder, Expression`1<Action`1<TController>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IActionConventionBuilder`1<TController> builder, Expression`1<Func`2<TController, TResult>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder Action(IActionConventionBuilder builder, string methodName, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.Conventions.ActionMethodResolver : object {
    internal static MethodInfo Resolve(Type controllerType, string methodName, Type[] argumentTypes);
    private static bool IsAction(MethodInfo method);
    private static bool SignatureMatches(MethodInfo method, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ApiVersionConventionBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, IControllerConventionBuilder> controllerConventionBuilders;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IControllerConvention> controllerConventions;
    [CompilerGeneratedAttribute]
private IControllerNameConvention <NamingConvention>k__BackingField;
    protected IControllerNameConvention NamingConvention { get; }
    protected IDictionary`2<Type, IControllerConventionBuilder> ControllerConventionBuilders { get; }
    protected IList`1<IControllerConvention> ControllerConventions { get; }
    public int Count { get; }
    public ApiVersionConventionBuilder(IControllerNameConvention namingConvention);
    private static bool HasDecoratedActions(ControllerModel controllerModel);
    [CompilerGeneratedAttribute]
protected IControllerNameConvention get_NamingConvention();
    protected IDictionary`2<Type, IControllerConventionBuilder> get_ControllerConventionBuilders();
    protected IList`1<IControllerConvention> get_ControllerConventions();
    public virtual int get_Count();
    public virtual IControllerConventionBuilder`1<TController> Controller();
    public virtual IControllerConventionBuilder Controller(Type controllerType);
    public virtual void Add(IControllerConvention convention);
    public virtual bool ApplyTo(ControllerModel controller);
    private static IControllerConventionBuilder NewGenericControllerConventionBuilder(Type controllerType, IControllerNameConvention namingConvention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ControllerApiVersionConventionBuilder : ControllerApiVersionConventionBuilderBase {
    [NullableAttribute("2")]
private ActionApiVersionConventionBuilderCollection actionBuilders;
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    public Type ControllerType { get; }
    protected ActionApiVersionConventionBuilderCollection ActionBuilders { get; }
    public ControllerApiVersionConventionBuilder(Type controllerType);
    public ControllerApiVersionConventionBuilder(Type controllerType, IControllerNameConvention namingConvention);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ControllerType();
    protected virtual ActionApiVersionConventionBuilderCollection get_ActionBuilders();
    public virtual ControllerApiVersionConventionBuilder IsApiVersionNeutral();
    public virtual ControllerApiVersionConventionBuilder HasApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ActionApiVersionConventionBuilder Action(MethodInfo actionMethod);
    protected virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Asp.Versioning.Conventions.IControllerConventionBuilder.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.ControllerApiVersionConventionBuilder`1 : ControllerApiVersionConventionBuilderBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ActionApiVersionConventionBuilderCollection`1<T> actionBuilders;
    protected ActionApiVersionConventionBuilderCollection`1<T> ActionBuilders { get; }
    private Type Asp.Versioning.Conventions.IControllerConventionBuilder.ControllerType { get; }
    public ControllerApiVersionConventionBuilder`1(IControllerNameConvention namingConvention);
    protected virtual ActionApiVersionConventionBuilderCollection`1<T> get_ActionBuilders();
    public virtual ControllerApiVersionConventionBuilder`1<T> IsApiVersionNeutral();
    public virtual ControllerApiVersionConventionBuilder`1<T> HasApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> HasDeprecatedApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> AdvertisesApiVersion(ApiVersion apiVersion);
    public virtual ControllerApiVersionConventionBuilder`1<T> AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    [EditorBrowsableAttribute("1")]
public virtual ActionApiVersionConventionBuilder`1<T> Action(MethodInfo actionMethod);
    protected virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    private sealed virtual override Type Asp.Versioning.Conventions.IControllerConventionBuilder.get_ControllerType();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.IsApiVersionNeutral();
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.HasDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesApiVersion(ApiVersion apiVersion);
    private sealed virtual override void Asp.Versioning.Conventions.IDeclareApiVersionConventionBuilder.AdvertisesDeprecatedApiVersion(ApiVersion apiVersion);
    private sealed virtual override IActionConventionBuilder Asp.Versioning.Conventions.IControllerConventionBuilder.Action(MethodInfo actionMethod);
    private sealed virtual override IActionConventionBuilder`1<T> Asp.Versioning.Conventions.IControllerConventionBuilder<T>.Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public abstract class Asp.Versioning.Conventions.ControllerApiVersionConventionBuilderBase : ApiVersionConventionBuilderBase {
    [CompilerGeneratedAttribute]
private IControllerNameConvention <NamingConvention>k__BackingField;
    public IControllerNameConvention NamingConvention { get; }
    protected ControllerApiVersionConventionBuilderBase(IControllerNameConvention namingConvention);
    [CompilerGeneratedAttribute]
public IControllerNameConvention get_NamingConvention();
    public virtual void ApplyTo(ControllerModel item);
    protected abstract virtual bool TryGetConvention(MethodInfo method, IApiVersionConvention`1& convention);
    private void ApplyActionConventions(ControllerModel controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Asp.Versioning.Conventions.ControllerConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IControllerConventionBuilder`1<TController> builder, Expression`1<Action`1<TController>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder`1<TController> Action(IControllerConventionBuilder`1<TController> builder, Expression`1<Func`2<TController, TResult>> actionExpression);
    [ExtensionAttribute]
public static IActionConventionBuilder Action(IControllerConventionBuilder builder, string methodName, Type[] argumentTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Asp.Versioning.Conventions.ControllerNameConvention : object {
    [NullableAttribute("2")]
private static IControllerNameConvention default;
    [NullableAttribute("2")]
private static IControllerNameConvention original;
    [NullableAttribute("2")]
private static IControllerNameConvention grouped;
    public static IControllerNameConvention Default { get; }
    public static IControllerNameConvention Original { get; }
    public static IControllerNameConvention Grouped { get; }
    public abstract virtual string NormalizeName(string controllerName);
    public abstract virtual string GroupName(string controllerName);
    public static IControllerNameConvention get_Default();
    public static IControllerNameConvention get_Original();
    public static IControllerNameConvention get_Grouped();
    public static string TrimTrailingNumbers(string name);
}
public class Asp.Versioning.Conventions.DefaultControllerNameConvention : OriginalControllerNameConvention {
    [NullableContextAttribute("1")]
public virtual string NormalizeName(string controllerName);
}
[ExtensionAttribute]
internal static class Asp.Versioning.Conventions.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static MethodInfo ExtractMethod(Expression`1<TDelegate> expression);
}
public class Asp.Versioning.Conventions.GroupedControllerNameConvention : OriginalControllerNameConvention {
    [NullableContextAttribute("1")]
public virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Conventions.IActionConventionBuilder {
    public Type ControllerType { get; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual IActionConventionBuilder Action(MethodInfo actionMethod);
}
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Conventions.IActionConventionBuilder`1 {
    [NullableContextAttribute("1")]
public abstract virtual IActionConventionBuilder`1<T> Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Conventions.IApiVersionConventionBuilder {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IControllerConventionBuilder Controller(Type controllerType);
    public abstract virtual IControllerConventionBuilder`1<TController> Controller();
    public abstract virtual bool ApplyTo(ControllerModel controller);
    public abstract virtual void Add(IControllerConvention convention);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Conventions.IControllerConvention {
    public abstract virtual bool Apply(IControllerConventionBuilder builder, ControllerModel controller);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Conventions.IControllerConventionBuilder {
    public Type ControllerType { get; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual IActionConventionBuilder Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public interface Asp.Versioning.Conventions.IControllerConventionBuilder`1 {
    public abstract virtual IActionConventionBuilder`1<T> Action(MethodInfo actionMethod);
}
[NullableContextAttribute("1")]
public interface Asp.Versioning.Conventions.IControllerNameConvention {
    public abstract virtual string NormalizeName(string controllerName);
    public abstract virtual string GroupName(string controllerName);
}
public class Asp.Versioning.Conventions.OriginalControllerNameConvention : object {
    [NullableContextAttribute("1")]
public virtual string NormalizeName(string controllerName);
    [NullableContextAttribute("1")]
public virtual string GroupName(string controllerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Conventions.VersionByNamespaceConvention : object {
    private NamespaceParser parser;
    public VersionByNamespaceConvention(NamespaceParser parser);
    public virtual bool Apply(IControllerConventionBuilder builder, ControllerModel controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Asp.Versioning.MvcApiVersioningOptions : object {
    [NullableAttribute("2")]
private IApiVersionConventionBuilder conventions;
    [CLSCompliantAttribute("False")]
public IApiVersionConventionBuilder Conventions { get; public set; }
    public IApiVersionConventionBuilder get_Conventions();
    public void set_Conventions(IApiVersionConventionBuilder value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.MvcApiVersioningOptionsFactory`1 : OptionsFactory`1<T> {
    private IApiVersionConventionBuilder conventionBuilder;
    public MvcApiVersioningOptionsFactory`1(IApiVersionConventionBuilder conventionBuilder, IEnumerable`1<IConfigureOptions`1<T>> setups, IEnumerable`1<IPostConfigureOptions`1<T>> postConfigures);
    protected virtual T CreateInstance(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Asp.Versioning.MvcFormat : object {
    internal static CompositeFormat ActionMethodNotFound;
    internal static CompositeFormat AmbiguousActionMethod;
    internal static CompositeFormat MultipleApiVersionsInferredFromNamespaces;
    internal static CompositeFormat InvalidActionMethodExpression;
    internal static CompositeFormat ConventionStyleMismatch;
    private static MvcFormat();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Asp.Versioning.MvcSR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionMethodNotFound { get; }
    internal static string AmbiguousActionMethod { get; }
    internal static string ConventionStyleMismatch { get; }
    internal static string InvalidActionMethodExpression { get; }
    internal static string RequiredInterfaceNotImplemented { get; }
    internal static string MultipleApiVersionsInferredFromNamespaces { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionMethodNotFound();
    internal static string get_AmbiguousActionMethod();
    internal static string get_ConventionStyleMismatch();
    internal static string get_InvalidActionMethodExpression();
    internal static string get_RequiredInterfaceNotImplemented();
    internal static string get_MultipleApiVersionsInferredFromNamespaces();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("68")]
public class Asp.Versioning.ReportApiVersionsAttribute : ActionFilterAttribute {
    [NullableAttribute("2")]
private IReportApiVersions reportApiVersions;
    public ReportApiVersionsAttribute(IReportApiVersions reportApiVersions);
    public virtual void OnActionExecuting(ActionExecutingContext context);
    private static Task ReportApiVersions(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersionUrlHelper : object {
    private IApiVersioningFeature feature;
    [CompilerGeneratedAttribute]
private IUrlHelper <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionContext <ActionContext>k__BackingField;
    protected IUrlHelper Url { get; }
    [NullableAttribute("2")]
protected string RouteParameter { get; }
    [NullableAttribute("2")]
protected string ApiVersion { get; }
    public ActionContext ActionContext { get; }
    public ApiVersionUrlHelper(ActionContext actionContext, IUrlHelper url);
    [CompilerGeneratedAttribute]
protected IUrlHelper get_Url();
    [NullableContextAttribute("2")]
protected string get_RouteParameter();
    [NullableContextAttribute("2")]
protected string get_ApiVersion();
    [CompilerGeneratedAttribute]
public sealed virtual ActionContext get_ActionContext();
    public virtual string Action(UrlActionContext actionContext);
    [NullableContextAttribute("2")]
public virtual string Content(string contentPath);
    [NullableContextAttribute("2")]
public virtual string Link(string routeName, object values);
    [NullableContextAttribute("2")]
public virtual bool IsLocalUrl(string url);
    public virtual string RouteUrl(UrlRouteContext routeContext);
    [NullableContextAttribute("2")]
private object AddApiVersionRouteValueIfNecessary(object current);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class Asp.Versioning.Routing.ApiVersionUrlHelperFactory : object {
    [CompilerGeneratedAttribute]
private IUrlHelperFactory <Factory>k__BackingField;
    protected IUrlHelperFactory Factory { get; }
    public ApiVersionUrlHelperFactory(IUrlHelperFactory factory);
    [CompilerGeneratedAttribute]
protected IUrlHelperFactory get_Factory();
    public virtual IUrlHelper GetUrlHelper(ActionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Asp.Versioning.Routing.WithoutApiVersionUrlHelper : object {
    private IUrlHelper decorated;
    public ActionContext ActionContext { get; }
    [NullableAttribute("2")]
private IApiVersioningFeature Feature { get; }
    public WithoutApiVersionUrlHelper(IUrlHelper decorated);
    public sealed virtual ActionContext get_ActionContext();
    [NullableContextAttribute("2")]
private IApiVersioningFeature get_Feature();
    public sealed virtual string Action(UrlActionContext actionContext);
    [NullableContextAttribute("2")]
public sealed virtual string Content(string contentPath);
    [NullableContextAttribute("2")]
public sealed virtual bool IsLocalUrl(string url);
    [NullableContextAttribute("2")]
public sealed virtual string Link(string routeName, object values);
    public sealed virtual string RouteUrl(UrlRouteContext routeContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions : object {
    [ExtensionAttribute]
public static ApiVersionMetadata GetApiVersionMetadata(ActionDescriptor action);
    [ExtensionAttribute]
internal static void AddOrReplaceApiVersionMetadata(ActionDescriptor action, ApiVersionMetadata value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.ApplicationModels.ModelExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ApiVersionModel GetApiVersionModel(ControllerModel controller);
    [ExtensionAttribute]
internal static void AddEndpointMetadata(ActionModel action, object metadata);
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class Microsoft.AspNetCore.Mvc.IUrlHelperExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IUrlHelper WithoutApiVersion(IUrlHelper urlHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IApiVersioningBuilderExtensions : object {
    [ExtensionAttribute]
public static IApiVersioningBuilder AddMvc(IApiVersioningBuilder builder);
    [ExtensionAttribute]
public static IApiVersioningBuilder AddMvc(IApiVersioningBuilder builder, Action`1<MvcApiVersioningOptions> setupAction);
    private static void AddServices(IServiceCollection services);
    [ExtensionAttribute]
private static object CreateInstance(IServiceProvider services, ServiceDescriptor descriptor);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static void TryReplace(IServiceCollection services);
    [SkipLocalsInitAttribute]
private static DecoratedServiceDescriptor WithUrlHelperFactoryDecorator(IServiceCollection services);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void UnionWith(ICollection`1<T> collection, IEnumerable`1<T> other);
}
