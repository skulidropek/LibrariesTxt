public class AspectCore.Configuration.AspectPredicate : MulticastDelegate {
    public AspectPredicate(object object, IntPtr method);
    public virtual bool Invoke(MethodInfo method);
    public virtual IAsyncResult BeginInvoke(MethodInfo method, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class AspectCore.Configuration.AspectValidationHandlerCollection : object {
    private HashSet`1<IAspectValidationHandler> _sets;
    public int Count { get; }
    public AspectValidationHandlerCollection Add(IAspectValidationHandler aspectValidationHandler);
    public int get_Count();
    public sealed virtual IEnumerator`1<IAspectValidationHandler> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NonAspectAttribute]
public interface AspectCore.Configuration.IAspectConfiguration {
    public AspectValidationHandlerCollection ValidationHandlers { get; }
    public InterceptorCollection Interceptors { get; }
    public NonAspectPredicateCollection NonAspectPredicates { get; }
    public bool ThrowAspectException { get; public set; }
    public abstract virtual AspectValidationHandlerCollection get_ValidationHandlers();
    public abstract virtual InterceptorCollection get_Interceptors();
    public abstract virtual NonAspectPredicateCollection get_NonAspectPredicates();
    public abstract virtual bool get_ThrowAspectException();
    public abstract virtual void set_ThrowAspectException(bool value);
}
public class AspectCore.Configuration.InterceptorCollection : object {
    private ICollection`1<InterceptorFactory> _collection;
    public int Count { get; }
    public InterceptorCollection Add(InterceptorFactory interceptorFactory);
    public int get_Count();
    public sealed virtual IEnumerator`1<InterceptorFactory> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class AspectCore.Configuration.InterceptorFactory : object {
    private static AspectPredicate[] EmptyPredicates;
    private AspectPredicate[] _predicates;
    public AspectPredicate[] Predicates { get; }
    public InterceptorFactory(AspectPredicate[] predicates);
    private static InterceptorFactory();
    public AspectPredicate[] get_Predicates();
    public bool CanCreated(MethodInfo method);
    public abstract virtual IInterceptor CreateInstance(IServiceProvider serviceProvider);
}
public class AspectCore.Configuration.NonAspectPredicateCollection : object {
    private ICollection`1<AspectPredicate> _collection;
    public int Count { get; }
    public NonAspectPredicateCollection Add(AspectPredicate interceptorFactory);
    public int get_Count();
    public sealed virtual IEnumerator`1<AspectPredicate> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class AspectCore.DependencyInjection.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static IServiceContext Configure(IServiceContext serviceContext, Action`1<IAspectConfiguration> configure);
}
public class AspectCore.DependencyInjection.DelegateServiceDefinition : ServiceDefinition {
    [CompilerGeneratedAttribute]
private Func`2<IServiceResolver, object> <ImplementationDelegate>k__BackingField;
    public Func`2<IServiceResolver, object> ImplementationDelegate { get; }
    public DelegateServiceDefinition(Type serviceType, Func`2<IServiceResolver, object> implementationDelegate, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Func`2<IServiceResolver, object> get_ImplementationDelegate();
}
[AttributeUsageAttribute("32767")]
public class AspectCore.DependencyInjection.FromServiceContextAttribute : Attribute {
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.ILifetimeServiceContext {
    public Lifetime Lifetime { get; }
    public int Count { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual int get_Count();
    public abstract virtual void Add(ServiceDefinition item);
    public abstract virtual bool Contains(Type serviceType);
}
[NonAspectAttribute]
[NonCallback]
public interface AspectCore.DependencyInjection.IManyEnumerable`1 {
}
public class AspectCore.DependencyInjection.InstanceServiceDefinition : ServiceDefinition {
    [CompilerGeneratedAttribute]
private object <ImplementationInstance>k__BackingField;
    public object ImplementationInstance { get; }
    public InstanceServiceDefinition(Type serviceType, object implementationInstance);
    [CompilerGeneratedAttribute]
public object get_ImplementationInstance();
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.IPropertyInjector {
    public abstract virtual void Invoke(object implementation);
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.IPropertyInjectorFactory {
    public abstract virtual IPropertyInjector Create(Type implementationType);
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.IScopeResolverFactory {
    public abstract virtual IServiceResolver CreateScope();
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.IServiceContext {
    public ILifetimeServiceContext Singletons { get; }
    public ILifetimeServiceContext Scopeds { get; }
    public ILifetimeServiceContext Transients { get; }
    public IAspectConfiguration Configuration { get; }
    public int Count { get; }
    public abstract virtual ILifetimeServiceContext get_Singletons();
    public abstract virtual ILifetimeServiceContext get_Scopeds();
    public abstract virtual ILifetimeServiceContext get_Transients();
    public abstract virtual IAspectConfiguration get_Configuration();
    public abstract virtual int get_Count();
    public abstract virtual void Add(ServiceDefinition item);
    public abstract virtual bool Remove(ServiceDefinition item);
    public abstract virtual bool Contains(Type serviceType);
}
[NonAspectAttribute]
[NonCallback]
public interface AspectCore.DependencyInjection.IServiceResolveCallback {
    public abstract virtual object Invoke(IServiceResolver resolver, object instance, ServiceDefinition service);
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.IServiceResolver {
    public abstract virtual object Resolve(Type serviceType);
}
[NonAspectAttribute]
public interface AspectCore.DependencyInjection.ITransientServiceAccessor`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
public enum AspectCore.DependencyInjection.Lifetime : Enum {
    public int value__;
    public static Lifetime Singleton;
    public static Lifetime Scoped;
    public static Lifetime Transient;
}
[ExtensionAttribute]
public static class AspectCore.DependencyInjection.LifetimeServiceContextExtensions : object {
    [ExtensionAttribute]
public static ILifetimeServiceContext AddType(ILifetimeServiceContext lifetimeServiceContext, Type serviceType);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddType(ILifetimeServiceContext lifetimeServiceContext, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddType(ILifetimeServiceContext lifetimeServiceContext);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddType(ILifetimeServiceContext lifetimeServiceContext);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddInstance(ILifetimeServiceContext lifetimeServiceContext, Type serviceType, object implementationInstance);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddInstance(ILifetimeServiceContext lifetimeServiceContext, TService implementationInstance);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddDelegate(ILifetimeServiceContext lifetimeServiceContext, Type serviceType, Func`2<IServiceResolver, object> implementationDelegate);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddDelegate(ILifetimeServiceContext lifetimeServiceContext, Func`2<IServiceResolver, TImplementation> implementationDelegate);
    [ExtensionAttribute]
public static ILifetimeServiceContext AddDelegate(ILifetimeServiceContext lifetimeServiceContext, Func`2<IServiceResolver, TService> implementationDelegate);
}
public class AspectCore.DependencyInjection.NonCallback : Attribute {
}
[ExtensionAttribute]
public static class AspectCore.DependencyInjection.ServiceContextExtensions : object {
    [ExtensionAttribute]
public static IServiceContext AddType(IServiceContext serviceContext, Type serviceType, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext AddType(IServiceContext serviceContext, Type serviceType, Type implementationType, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext AddType(IServiceContext serviceContext, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext AddType(IServiceContext serviceContext, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext AddInstance(IServiceContext serviceContext, Type serviceType, object implementationInstance);
    [ExtensionAttribute]
public static IServiceContext AddInstance(IServiceContext serviceContext, TService implementationInstance);
    [ExtensionAttribute]
public static IServiceContext AddDelegate(IServiceContext serviceContext, Type serviceType, Func`2<IServiceResolver, object> implementationDelegate, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext AddDelegate(IServiceContext serviceContext, Func`2<IServiceResolver, TImplementation> implementationDelegate, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext AddDelegate(IServiceContext serviceContext, Func`2<IServiceResolver, TService> implementationDelegate, Lifetime lifetime);
    [ExtensionAttribute]
public static IServiceContext RemoveAll(IServiceContext serviceContext);
    [ExtensionAttribute]
public static IServiceContext RemoveAll(IServiceContext serviceContext, Type serviceType);
}
[NonAspectAttribute]
public abstract class AspectCore.DependencyInjection.ServiceDefinition : object {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public Type ServiceType { get; }
    public Lifetime Lifetime { get; }
    public ServiceDefinition(Type serviceType, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
}
[ExtensionAttribute]
public static class AspectCore.DependencyInjection.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T Resolve(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static T ResolveRequired(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static IEnumerable`1<T> ResolveMany(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class AspectCore.DependencyInjection.ServiceResolverExtensions : object {
    [ExtensionAttribute]
public static T Resolve(IServiceResolver serviceResolver);
    [ExtensionAttribute]
public static IServiceResolver CreateScope(IServiceResolver serviceResolver);
    [ExtensionAttribute]
public static object ResolveRequired(IServiceResolver serviceResolver, Type serviceType);
    [ExtensionAttribute]
public static T ResolveRequired(IServiceResolver serviceResolver);
    [ExtensionAttribute]
public static IEnumerable`1<object> ResolveMany(IServiceResolver serviceResolver, Type serviceType);
    [ExtensionAttribute]
public static IEnumerable`1<T> ResolveMany(IServiceResolver serviceResolver);
}
public class AspectCore.DependencyInjection.TypeServiceDefinition : ServiceDefinition {
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    public Type ImplementationType { get; }
    public TypeServiceDefinition(Type serviceType, Type implementationType, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
}
[NonAspectAttribute]
public abstract class AspectCore.DynamicProxy.AbstractInterceptor : object {
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public bool AllowMultiple { get; }
    public int Order { get; public set; }
    public bool Inherited { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    [CompilerGeneratedAttribute]
public virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Inherited();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inherited(bool value);
    public abstract virtual Task Invoke(AspectContext context, AspectDelegate next);
}
[NonAspectAttribute]
[AttributeUsageAttribute("1092")]
public abstract class AspectCore.DynamicProxy.AbstractInterceptorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public bool AllowMultiple { get; }
    public int Order { get; public set; }
    public bool Inherited { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    [CompilerGeneratedAttribute]
public virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Inherited();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inherited(bool value);
    public abstract virtual Task Invoke(AspectContext context, AspectDelegate next);
}
public class AspectCore.DynamicProxy.AspectActivatorContext : ValueType {
    [CompilerGeneratedAttribute]
private MethodInfo <ServiceMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <TargetMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <ProxyMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ProxyInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    public MethodInfo ServiceMethod { get; }
    public MethodInfo TargetMethod { get; }
    public MethodInfo ProxyMethod { get; }
    public object TargetInstance { get; }
    public object ProxyInstance { get; }
    public Object[] Parameters { get; }
    public AspectActivatorContext(MethodInfo serviceMethod, MethodInfo targetMethod, MethodInfo proxyMethod, object targetInstance, object proxyInstance, Object[] parameters);
    [CompilerGeneratedAttribute]
public MethodInfo get_ServiceMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_TargetMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_ProxyMethod();
    [CompilerGeneratedAttribute]
public object get_TargetInstance();
    [CompilerGeneratedAttribute]
public object get_ProxyInstance();
    [CompilerGeneratedAttribute]
public Object[] get_Parameters();
}
[NonAspectAttribute]
public abstract class AspectCore.DynamicProxy.AspectContext : object {
    public IDictionary`2<string, object> AdditionalData { get; }
    public object ReturnValue { get; public set; }
    public IServiceProvider ServiceProvider { get; }
    public MethodInfo ServiceMethod { get; }
    public object Implementation { get; }
    public MethodInfo ImplementationMethod { get; }
    public Object[] Parameters { get; }
    public MethodInfo ProxyMethod { get; }
    public object Proxy { get; }
    public abstract virtual IDictionary`2<string, object> get_AdditionalData();
    public abstract virtual object get_ReturnValue();
    public abstract virtual void set_ReturnValue(object value);
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual MethodInfo get_ServiceMethod();
    public abstract virtual object get_Implementation();
    public abstract virtual MethodInfo get_ImplementationMethod();
    public abstract virtual Object[] get_Parameters();
    public abstract virtual MethodInfo get_ProxyMethod();
    public abstract virtual object get_Proxy();
    public abstract virtual Task Break();
    public abstract virtual Task Invoke(AspectDelegate next);
    public abstract virtual Task Complete();
}
public class AspectCore.DynamicProxy.AspectDelegate : MulticastDelegate {
    public AspectDelegate(object object, IntPtr method);
    public virtual Task Invoke(AspectContext context);
    public virtual IAsyncResult BeginInvoke(AspectContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class AspectCore.DynamicProxy.AspectInvalidCastException : AspectInvocationException {
    public AspectInvalidCastException(AspectContext aspectContext, string message);
}
public class AspectCore.DynamicProxy.AspectInvalidOperationException : AspectInvocationException {
    public AspectInvalidOperationException(AspectContext aspectContext, string message);
}
public class AspectCore.DynamicProxy.AspectInvocationException : Exception {
    [CompilerGeneratedAttribute]
private AspectContext <AspectContext>k__BackingField;
    public AspectContext AspectContext { get; }
    public AspectInvocationException(AspectContext aspectContext, string message);
    public AspectInvocationException(AspectContext aspectContext, Exception innerException);
    public AspectInvocationException(AspectContext aspectContext, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public AspectContext get_AspectContext();
}
public class AspectCore.DynamicProxy.AspectValidationContext : ValueType {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictValidation>k__BackingField;
    public MethodInfo Method { get; public set; }
    public bool StrictValidation { get; public set; }
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(MethodInfo value);
    [CompilerGeneratedAttribute]
public bool get_StrictValidation();
    [CompilerGeneratedAttribute]
public void set_StrictValidation(bool value);
    public sealed virtual bool Equals(AspectValidationContext other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class AspectCore.DynamicProxy.AspectValidationDelegate : MulticastDelegate {
    public AspectValidationDelegate(object object, IntPtr method);
    public virtual bool Invoke(AspectValidationContext context);
    public virtual IAsyncResult BeginInvoke(AspectValidationContext context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
public class AspectCore.DynamicProxy.AsyncAspectAttribute : Attribute {
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.DelegateInterceptor : object {
    private Func`2<AspectDelegate, AspectDelegate> _aspectDelegate;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool AllowMultiple { get; }
    public bool Inherited { get; public set; }
    public int Order { get; public set; }
    public DelegateInterceptor(Func`2<AspectDelegate, AspectDelegate> aspectDelegate, int order);
    public sealed virtual bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Inherited();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Inherited(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Order(int value);
    public sealed virtual Task Invoke(AspectContext context, AspectDelegate next);
}
[AttributeUsageAttribute("4")]
public class AspectCore.DynamicProxy.DynamicallyAttribute : Attribute {
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAdditionalInterceptorSelector {
    public abstract virtual IEnumerable`1<IInterceptor> Select(MethodInfo serviceMethod, MethodInfo implementationMethod);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectActivator {
    public abstract virtual TResult Invoke(AspectActivatorContext activatorContext);
    public abstract virtual Task`1<TResult> InvokeTask(AspectActivatorContext activatorContext);
    public abstract virtual ValueTask`1<TResult> InvokeValueTask(AspectActivatorContext activatorContext);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectActivatorFactory {
    public abstract virtual IAspectActivator Create();
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectBuilder {
    public IEnumerable`1<Func`2<AspectDelegate, AspectDelegate>> Delegates { get; }
    public abstract virtual IEnumerable`1<Func`2<AspectDelegate, AspectDelegate>> get_Delegates();
    public abstract virtual AspectDelegate Build();
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectBuilderFactory {
    public abstract virtual IAspectBuilder Create(AspectContext context);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectCaching {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual object Get(object key);
    public abstract virtual void Set(object key, object value);
    public abstract virtual object GetOrAdd(object key, Func`2<object, object> factory);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectCachingProvider {
    public abstract virtual IAspectCaching GetAspectCaching(string name);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectContextFactory {
    public abstract virtual AspectContext CreateContext(AspectActivatorContext activatorContext);
    public abstract virtual void ReleaseContext(AspectContext aspectContext);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectValidationHandler {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual bool Invoke(AspectValidationContext context, AspectValidationDelegate next);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectValidator {
    public abstract virtual bool Validate(MethodInfo method, bool isStrictValidation);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IAspectValidatorBuilder {
    public abstract virtual IAspectValidator Build();
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IInterceptor {
    public bool AllowMultiple { get; }
    public bool Inherited { get; public set; }
    public int Order { get; public set; }
    public abstract virtual bool get_AllowMultiple();
    public abstract virtual bool get_Inherited();
    public abstract virtual void set_Inherited(bool value);
    public abstract virtual int get_Order();
    public abstract virtual void set_Order(int value);
    public abstract virtual Task Invoke(AspectContext context, AspectDelegate next);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IInterceptorCollector {
    public abstract virtual IEnumerable`1<IInterceptor> Collect(MethodInfo serviceMethod, MethodInfo implementationMethod);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IInterceptorSelector {
    public abstract virtual IEnumerable`1<IInterceptor> Select(MethodInfo method);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IProxyGenerator {
    public IProxyTypeGenerator TypeGenerator { get; }
    public abstract virtual IProxyTypeGenerator get_TypeGenerator();
    public abstract virtual object CreateInterfaceProxy(Type serviceType);
    public abstract virtual object CreateInterfaceProxy(Type serviceType, object implementationInstance);
    public abstract virtual object CreateClassProxy(Type serviceType, Type implementationType, Object[] args);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IProxyTypeGenerator {
    public abstract virtual Type CreateInterfaceProxyType(Type serviceType);
    public abstract virtual Type CreateInterfaceProxyType(Type serviceType, Type implementationType);
    public abstract virtual Type CreateClassProxyType(Type serviceType, Type implementationType);
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IServiceInstanceAccessor {
    public object ServiceInstance { get; }
    public abstract virtual object get_ServiceInstance();
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.IServiceInstanceAccessor`1 {
    public TService ServiceInstance { get; }
    public abstract virtual TService get_ServiceInstance();
}
[AttributeUsageAttribute("32767")]
public class AspectCore.DynamicProxy.NonAspectAttribute : Attribute {
}
[NonAspectAttribute]
public interface AspectCore.DynamicProxy.Parameters.IParameterInterceptor {
    public abstract virtual Task Invoke(ParameterAspectContext context, ParameterAspectDelegate next);
}
public interface AspectCore.DynamicProxy.Parameters.IParameterInterceptorSelector {
    public abstract virtual IParameterInterceptor[] Select(ParameterInfo parameter);
}
public class AspectCore.DynamicProxy.Parameters.Parameter : object {
    protected AspectContext _context;
    protected int _index;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRef>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public string Name { get; }
    public Type Type { get; }
    public Type RawType { get; }
    public bool IsRef { get; }
    public object Value { get; public set; }
    public ParameterInfo ParameterInfo { get; }
    internal Parameter(AspectContext context, int index, ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_Type();
    public Type get_RawType();
    [CompilerGeneratedAttribute]
public bool get_IsRef();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
}
public class AspectCore.DynamicProxy.Parameters.ParameterAspectContext : ValueType {
    [CompilerGeneratedAttribute]
private Parameter <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private AspectContext <AspectContext>k__BackingField;
    public Parameter Parameter { get; }
    public AspectContext AspectContext { get; }
    public ParameterAspectContext(AspectContext aspectContext, Parameter parameter);
    [CompilerGeneratedAttribute]
public Parameter get_Parameter();
    [CompilerGeneratedAttribute]
public AspectContext get_AspectContext();
}
public class AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate : MulticastDelegate {
    public ParameterAspectDelegate(object object, IntPtr method);
    public virtual Task Invoke(ParameterAspectContext context);
    public virtual IAsyncResult BeginInvoke(ParameterAspectContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class AspectCore.DynamicProxy.Parameters.ParameterCollection : object {
    private static Object[] emptyValues;
    private int _count;
    private Parameter[] _parameterEntries;
    public Parameter Item { get; }
    public Parameter Item { get; }
    public int Count { get; }
    internal ParameterCollection(Parameter[] parameters);
    private static ParameterCollection();
    public sealed virtual Parameter get_Item(int index);
    public Parameter get_Item(string name);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.Parameters.ParameterCollection/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<Parameter> GetEnumerator();
    public Object[] GetValues();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
internal static InvalidOperationException <get_Item>g__ThrowNotFound|7_0(<>c__DisplayClass7_0& );
}
[ExtensionAttribute]
public static class AspectCore.DynamicProxy.Parameters.ParameterExtensions : object {
    private static ConcurrentDictionary`2<MethodInfo, ParameterInfo[]> _reflectorsCache;
    private static ParameterCollection _emptyParameterCollection;
    private static ParameterExtensions();
    [ExtensionAttribute]
public static ParameterCollection GetParameters(AspectContext aspectContext);
    [ExtensionAttribute]
public static Parameter GetReturnParameter(AspectContext aspectContext);
}
[AttributeUsageAttribute("2048")]
public abstract class AspectCore.DynamicProxy.Parameters.ParameterInterceptorAttribute : Attribute {
    public abstract virtual Task Invoke(ParameterAspectContext context, ParameterAspectDelegate next);
}
internal class AspectCore.DynamicProxy.Parameters.ReturnParameter : Parameter {
    public object Value { get; public set; }
    internal ReturnParameter(AspectContext context, ParameterInfo reflector);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
[AttributeUsageAttribute("8192")]
public abstract class AspectCore.DynamicProxy.Parameters.ReturnParameterInterceptorAttribute : Attribute {
    public abstract virtual Task Invoke(ParameterAspectContext context, ParameterAspectDelegate next);
}
public class AspectCore.DynamicProxy.ServiceInterceptorAttribute : AbstractInterceptorAttribute {
    private Type _interceptorType;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    public bool AllowMultiple { get; }
    public ServiceInterceptorAttribute(Type interceptorType);
    [CompilerGeneratedAttribute]
public virtual bool get_AllowMultiple();
    public virtual Task Invoke(AspectContext context, AspectDelegate next);
    public sealed virtual bool Equals(ServiceInterceptorAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
