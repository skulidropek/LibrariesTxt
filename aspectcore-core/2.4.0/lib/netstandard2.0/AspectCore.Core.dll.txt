public class AspectCore.Configuration.AspectConfiguration : object {
    [CompilerGeneratedAttribute]
private AspectValidationHandlerCollection <ValidationHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private InterceptorCollection <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private NonAspectPredicateCollection <NonAspectPredicates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowAspectException>k__BackingField;
    public AspectValidationHandlerCollection ValidationHandlers { get; }
    public InterceptorCollection Interceptors { get; }
    public NonAspectPredicateCollection NonAspectPredicates { get; }
    public bool ThrowAspectException { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual AspectValidationHandlerCollection get_ValidationHandlers();
    [CompilerGeneratedAttribute]
public sealed virtual InterceptorCollection get_Interceptors();
    [CompilerGeneratedAttribute]
public sealed virtual NonAspectPredicateCollection get_NonAspectPredicates();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowAspectException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThrowAspectException(bool value);
}
[ExtensionAttribute]
internal static class AspectCore.Configuration.AspectValidationHandlerCollectionExtensions : object {
    [ExtensionAttribute]
internal static AspectValidationHandlerCollection AddDefault(AspectValidationHandlerCollection aspectValidationHandlers, IAspectConfiguration configuration);
}
public class AspectCore.Configuration.DelegateInterceptorFactory : InterceptorFactory {
    private Func`2<AspectDelegate, AspectDelegate> _aspectDelegate;
    private int _order;
    public DelegateInterceptorFactory(Func`2<AspectDelegate, AspectDelegate> aspectDelegate, int order, AspectPredicate[] predicates);
    public virtual IInterceptor CreateInstance(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class AspectCore.Configuration.InterceptorCollectionExtensions : object {
    [ExtensionAttribute]
public static InterceptorCollection AddTyped(InterceptorCollection interceptorCollection, Type interceptorType, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddTyped(InterceptorCollection interceptorCollection, Type interceptorType, Object[] args, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddTyped(InterceptorCollection interceptorCollection, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddTyped(InterceptorCollection interceptorCollection, Object[] args, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddServiced(InterceptorCollection interceptorCollection, Type interceptorType, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddServiced(InterceptorCollection interceptorCollection, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddDelegate(InterceptorCollection interceptorCollection, Func`2<AspectDelegate, AspectDelegate> aspectDelegate, int order, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddDelegate(InterceptorCollection interceptorCollection, Func`2<AspectDelegate, AspectDelegate> aspectDelegate, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddDelegate(InterceptorCollection interceptorCollection, Func`3<AspectContext, AspectDelegate, Task> aspectDelegate, int order, AspectPredicate[] predicates);
    [ExtensionAttribute]
public static InterceptorCollection AddDelegate(InterceptorCollection interceptorCollection, Func`3<AspectContext, AspectDelegate, Task> aspectDelegate, AspectPredicate[] predicates);
}
[ExtensionAttribute]
public static class AspectCore.Configuration.NonAspectsCollectionExtensions : object {
    [ExtensionAttribute]
public static NonAspectPredicateCollection AddNamespace(NonAspectPredicateCollection collection, string nameSpace);
    [ExtensionAttribute]
public static NonAspectPredicateCollection AddService(NonAspectPredicateCollection collection, string service);
    [ExtensionAttribute]
public static NonAspectPredicateCollection AddMethod(NonAspectPredicateCollection collection, string method);
    [ExtensionAttribute]
public static NonAspectPredicateCollection AddMethod(NonAspectPredicateCollection collection, string service, string method);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddMicrosoft(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddCodeAnalysis(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddAspNetCore(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddEntityFramework(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddOwin(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddPageGenerator(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddSystem(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddObjectVMethod(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddAspectCore(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddIdentityServer4(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
private static NonAspectPredicateCollection AddButterfly(NonAspectPredicateCollection collection);
    [ExtensionAttribute]
internal static NonAspectPredicateCollection AddDefault(NonAspectPredicateCollection collection);
}
public static class AspectCore.Configuration.Predicates : object {
    public static AspectPredicate ForNameSpace(string nameSpace);
    public static AspectPredicate ForService(string service);
    public static AspectPredicate ForMethod(string method);
    public static AspectPredicate ForMethod(string service, string method);
    public static AspectPredicate Implement(Type baseOrInterfaceType);
}
public class AspectCore.Configuration.ServiceInterceptorFactory : InterceptorFactory {
    private Type _interceptorType;
    public ServiceInterceptorFactory(Type interceptorType, AspectPredicate[] predicates);
    public virtual IInterceptor CreateInstance(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class AspectCore.Configuration.StringExtensions : object {
    [ExtensionAttribute]
public static bool Matches(string input, string pattern);
}
public class AspectCore.Configuration.TypeInterceptorFactory : InterceptorFactory {
    private static Object[] emptyArgs;
    private Object[] _args;
    private Type _interceptorType;
    public TypeInterceptorFactory(Type interceptorType, Object[] args, AspectPredicate[] predicates);
    private static TypeInterceptorFactory();
    public virtual IInterceptor CreateInstance(IServiceProvider serviceProvider);
}
internal static class AspectCore.Core.Utils.NoSyncContextScope : object {
    private static IDisposable Enter();
    public static void Run(Task task);
    public static T Run(Task`1<T> task);
}
internal class AspectCore.DependencyInjection.ConstructorCallSiteResolver : object {
    private ConcurrentDictionary`2<Type, Func`2<IServiceResolver, object>> compiledCallSites;
    private ServiceTable _serviceTable;
    internal ConstructorCallSiteResolver(ServiceTable serviceTable);
    internal Func`2<IServiceResolver, object> Resolve(Type implementationType);
    private Func`2<IServiceResolver, object> GetBestCallSite(Type implementationType);
    private bool TryResolve(ConstructorInfo constructor, Func`2& callSite);
}
internal class AspectCore.DependencyInjection.EnumerableServiceDefintion : ServiceDefinition {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ServiceDefinition> <ServiceDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public IEnumerable`1<ServiceDefinition> ServiceDefinitions { get; }
    public Type ElementType { get; }
    public EnumerableServiceDefintion(Type serviceType, Type elementType, IEnumerable`1<ServiceDefinition> serviceDefinitions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ServiceDefinition> get_ServiceDefinitions();
    [CompilerGeneratedAttribute]
public Type get_ElementType();
}
internal interface AspectCore.DependencyInjection.IServiceResolveCallbackProvider {
    public IServiceResolveCallback[] ServiceResolveCallbacks { get; }
    public abstract virtual IServiceResolveCallback[] get_ServiceResolveCallbacks();
}
public class AspectCore.DependencyInjection.LifetimeServiceContext : object {
    private ICollection`1<ServiceDefinition> _internalCollection;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public Lifetime Lifetime { get; }
    public int Count { get; }
    public LifetimeServiceContext(ICollection`1<ServiceDefinition> collection, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    public sealed virtual int get_Count();
    public sealed virtual void Add(ServiceDefinition item);
    public sealed virtual bool Contains(Type serviceType);
    public sealed virtual IEnumerator`1<ServiceDefinition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private bool <get_Count>b__6_0(ServiceDefinition x);
    [CompilerGeneratedAttribute]
private bool <GetEnumerator>b__9_0(ServiceDefinition x);
}
[ExtensionAttribute]
internal static class AspectCore.DependencyInjection.LinkedListExtensions : object {
    [ExtensionAttribute]
public static LinkedList`1<T> Add(LinkedList`1<T> linkedList, T value);
}
public class AspectCore.DependencyInjection.ManyEnumerable`1 : object {
    private IEnumerable`1<T> _array;
    public ManyEnumerable`1(IEnumerable`1<T> array);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class AspectCore.DependencyInjection.ManyEnumerableServiceDefintion : EnumerableServiceDefintion {
    public ManyEnumerableServiceDefintion(Type serviceType, Type elementType, IEnumerable`1<ServiceDefinition> serviceDefinitions);
}
internal class AspectCore.DependencyInjection.PropertyInjector : object {
    private IServiceProvider _serviceProvider;
    private PropertyResolver[] _propertyResolvers;
    public PropertyInjector(IServiceProvider serviceProvider, PropertyResolver[] propertyResolvers);
    public sealed virtual void Invoke(object implementation);
}
public class AspectCore.DependencyInjection.PropertyInjectorCallback : object {
    public sealed virtual object Invoke(IServiceResolver resolver, object instance, ServiceDefinition service);
}
[NonAspectAttribute]
public class AspectCore.DependencyInjection.PropertyInjectorFactory : object {
    private IServiceProvider _servicePorvider;
    private PropertyResolverSelector _propertyResolverSelector;
    public PropertyInjectorFactory(IServiceProvider servicePorvider);
    public sealed virtual IPropertyInjector Create(Type implementationType);
}
public class AspectCore.DependencyInjection.PropertyResolver : object {
    private Func`2<IServiceProvider, object> _propertyFactory;
    private PropertyReflector _reflector;
    internal PropertyResolver(Func`2<IServiceProvider, object> propertyFactory, PropertyReflector reflector);
    public void Resolve(IServiceProvider provider, object implementation);
}
internal class AspectCore.DependencyInjection.PropertyResolverSelector : object {
    private ConcurrentDictionary`2<Type, PropertyResolver[]> propertyInjectorCache;
    internal static PropertyResolverSelector Default;
    private static PropertyResolverSelector();
    internal PropertyResolver[] SelectPropertyResolver(Type implementationType);
    [IteratorStateMachineAttribute("AspectCore.DependencyInjection.PropertyResolverSelector/<SelectPropertyResolverInternal>d__3")]
private IEnumerable`1<PropertyResolver> SelectPropertyResolverInternal(Type type);
    [CompilerGeneratedAttribute]
private PropertyResolver[] <SelectPropertyResolver>b__2_0(Type type);
}
internal class AspectCore.DependencyInjection.ProxyServiceDefinition : ServiceDefinition {
    [CompilerGeneratedAttribute]
private ServiceDefinition <ServiceDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeServiceDefinition <ClassProxyServiceDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProxyType>k__BackingField;
    public ServiceDefinition ServiceDefinition { get; }
    public TypeServiceDefinition ClassProxyServiceDefinition { get; }
    public Type ProxyType { get; }
    public ProxyServiceDefinition(ServiceDefinition serviceDefinition, Type proxyType);
    [CompilerGeneratedAttribute]
public ServiceDefinition get_ServiceDefinition();
    [CompilerGeneratedAttribute]
public TypeServiceDefinition get_ClassProxyServiceDefinition();
    [CompilerGeneratedAttribute]
public Type get_ProxyType();
}
[NonAspectAttribute]
internal class AspectCore.DependencyInjection.ScopeResolverFactory : object {
    private ServiceResolver _serviceResolver;
    public ScopeResolverFactory(IServiceResolver serviceResolver);
    public sealed virtual IServiceResolver CreateScope();
}
internal class AspectCore.DependencyInjection.ServiceCallSiteResolver : object {
    private ConstructorCallSiteResolver _constructorCallSiteResolver;
    private ConcurrentDictionary`2<ServiceDefinition, Func`2<ServiceResolver, object>> _resolvedCallSites;
    public ServiceCallSiteResolver(ServiceTable serviceTable);
    internal Func`2<ServiceResolver, object> Resolve(ServiceDefinition service);
    private Func`2<ServiceResolver, object> ResolveCallback(ServiceDefinition service);
    private Func`2<ServiceResolver, object> ResolveInternal(ServiceDefinition service);
    private Func`2<ServiceResolver, object> ResolveManyEnumerableService(ManyEnumerableServiceDefintion manyEnumerableServiceDefintion);
    private Func`2<ServiceResolver, object> ResolveEnumerableService(EnumerableServiceDefintion enumerableServiceDefintion);
    private Func`2<ServiceResolver, object> ResolveProxyService(ProxyServiceDefinition proxyServiceDefinition);
    private Func`2<ServiceResolver, object> ResolveTypeService(TypeServiceDefinition typeServiceDefinition);
}
[ExtensionAttribute]
public static class AspectCore.DependencyInjection.ServiceContainerBuildExtensions : object {
    [ExtensionAttribute]
public static IServiceResolver Build(IServiceContext serviceContext);
}
public class AspectCore.DependencyInjection.ServiceContext : object {
    private ICollection`1<ServiceDefinition> _collection;
    private IAspectConfiguration _configuration;
    [CompilerGeneratedAttribute]
private ILifetimeServiceContext <Singletons>k__BackingField;
    [CompilerGeneratedAttribute]
private ILifetimeServiceContext <Scopeds>k__BackingField;
    [CompilerGeneratedAttribute]
private ILifetimeServiceContext <Transients>k__BackingField;
    public int Count { get; }
    public ILifetimeServiceContext Singletons { get; }
    public ILifetimeServiceContext Scopeds { get; }
    public ILifetimeServiceContext Transients { get; }
    public IAspectConfiguration Configuration { get; }
    public ServiceContext(IEnumerable`1<ServiceDefinition> services);
    public ServiceContext(IAspectConfiguration aspectConfiguration);
    public ServiceContext(IEnumerable`1<ServiceDefinition> services, IAspectConfiguration aspectConfiguration);
    private void AddInternalServices();
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual ILifetimeServiceContext get_Singletons();
    [CompilerGeneratedAttribute]
public sealed virtual ILifetimeServiceContext get_Scopeds();
    [CompilerGeneratedAttribute]
public sealed virtual ILifetimeServiceContext get_Transients();
    public sealed virtual IAspectConfiguration get_Configuration();
    public sealed virtual void Add(ServiceDefinition item);
    public sealed virtual bool Remove(ServiceDefinition item);
    public sealed virtual bool Contains(Type serviceType);
    public sealed virtual IEnumerator`1<ServiceDefinition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class AspectCore.DependencyInjection.ServiceDefinitionExtensions : object {
    private static ConcurrentDictionary`2<ServiceDefinition, bool> _callbackMap;
    private static ServiceDefinitionExtensions();
    [ExtensionAttribute]
internal static Type GetImplementationType(ServiceDefinition serviceDefinition);
    [ExtensionAttribute]
internal static bool RequiredPropertyInjection(ServiceDefinition serviceDefinition);
    [ExtensionAttribute]
internal static bool IsManyEnumerable(ServiceDefinition serviceDefinition);
    [ExtensionAttribute]
internal static bool RequiredResolveCallback(ServiceDefinition serviceDefinition);
}
[NonAspectAttribute]
internal class AspectCore.DependencyInjection.ServiceResolver : object {
    private ConcurrentDictionary`2<ServiceDefinition, object> _resolvedScopedServices;
    private ConcurrentDictionary`2<ServiceDefinition, object> _resolvedSingletonServices;
    private ServiceTable _serviceTable;
    private ServiceCallSiteResolver _serviceCallSiteResolver;
    internal ServiceResolver _root;
    [CompilerGeneratedAttribute]
private IServiceResolveCallback[] <ServiceResolveCallbacks>k__BackingField;
    private bool disposedValue;
    public IServiceResolveCallback[] ServiceResolveCallbacks { get; }
    public ServiceResolver(IServiceContext serviceContext);
    public ServiceResolver(ServiceResolver root);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceResolveCallback[] get_ServiceResolveCallbacks();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual object Resolve(Type serviceType);
    internal object ResolveDefinition(ServiceDefinition definition);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private object <ResolveDefinition>b__12_0(ServiceDefinition d);
    [CompilerGeneratedAttribute]
private object <ResolveDefinition>b__12_1(ServiceDefinition d);
    [CompilerGeneratedAttribute]
private bool <Dispose>b__14_0(KeyValuePair`2<ServiceDefinition, object> x);
    [CompilerGeneratedAttribute]
private bool <Dispose>b__14_1(KeyValuePair`2<ServiceDefinition, object> x);
}
internal class AspectCore.DependencyInjection.ServiceTable : object {
    private ConcurrentDictionary`2<Type, LinkedList`1<ServiceDefinition>> _linkedServiceDefinitions;
    private ConcurrentDictionary`2<Type, LinkedList`1<ServiceDefinition>> _linkedGenericServiceDefinitions;
    private IProxyTypeGenerator _proxyTypeGenerator;
    private ServiceValidator _serviceValidator;
    public ServiceTable(IAspectConfiguration configuration);
    internal void Populate(IEnumerable`1<ServiceDefinition> services);
    internal bool Contains(Type serviceType);
    private bool ContainsLinked(Type serviceType);
    internal ServiceDefinition TryGetService(Type serviceType);
    private ServiceDefinition FindEnumerable(Type serviceType);
    private ServiceDefinition FindManyEnumerable(Type serviceType);
    private ServiceDefinition[] FindEnumerableElements(Type serviceType);
    private ServiceDefinition FindGenericService(Type serviceType, LinkedList`1<ServiceDefinition> genericServiceDefinitions);
    private ServiceDefinition MakGenericService(Type serviceType, ServiceDefinition service);
    private ServiceDefinition MakProxyService(ServiceDefinition service);
}
internal class AspectCore.DependencyInjection.ServiceValidator : object {
    private IAspectValidator _aspectValidator;
    internal ServiceValidator(IAspectValidatorBuilder aspectValidatorBuilder);
    internal bool TryValidate(ServiceDefinition definition, Type& implementationType);
}
public class AspectCore.DependencyInjection.TransientServiceAccessor`1 : object {
    private IServiceProvider _serviceProvider;
    public T Value { get; }
    public TransientServiceAccessor`1(IServiceProvider serviceProvider);
    public sealed virtual T get_Value();
}
[NonAspectAttribute]
internal class AspectCore.DynamicProxy.AspectActivator : object {
    private IAspectContextFactory _aspectContextFactory;
    private IAspectBuilderFactory _aspectBuilderFactory;
    private IAspectConfiguration _aspectConfiguration;
    public AspectActivator(IAspectContextFactory aspectContextFactory, IAspectBuilderFactory aspectBuilderFactory, IAspectConfiguration aspectConfiguration);
    public sealed virtual TResult Invoke(AspectActivatorContext activatorContext);
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.AspectActivator/<InvokeTask>d__5`1")]
public sealed virtual Task`1<TResult> InvokeTask(AspectActivatorContext activatorContext);
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.AspectActivator/<InvokeValueTask>d__6`1")]
public sealed virtual ValueTask`1<TResult> InvokeValueTask(AspectActivatorContext activatorContext);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectActivatorFactory : object {
    private IAspectContextFactory _aspectContextFactory;
    private IAspectBuilderFactory _aspectBuilderFactory;
    private IAspectConfiguration _aspectConfiguration;
    public AspectActivatorFactory(IAspectContextFactory aspectContextFactory, IAspectBuilderFactory aspectBuilderFactory, IAspectConfiguration aspectConfiguration);
    public sealed virtual IAspectActivator Create();
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectBuilder : object {
    private IList`1<Func`2<AspectDelegate, AspectDelegate>> _delegates;
    private AspectDelegate _complete;
    private AspectDelegate _aspectDelegate;
    public IEnumerable`1<Func`2<AspectDelegate, AspectDelegate>> Delegates { get; }
    public AspectBuilder(AspectDelegate complete, IList`1<Func`2<AspectDelegate, AspectDelegate>> delegates);
    public sealed virtual IEnumerable`1<Func`2<AspectDelegate, AspectDelegate>> get_Delegates();
    public void AddAspectDelegate(Func`3<AspectContext, AspectDelegate, Task> interceptorInvoke);
    public sealed virtual AspectDelegate Build();
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectBuilderFactory : object {
    private IInterceptorCollector _interceptorCollector;
    private IAspectCaching _aspectCaching;
    public AspectBuilderFactory(IInterceptorCollector interceptorCollector, IAspectCachingProvider aspectCachingProvider);
    public sealed virtual IAspectBuilder Create(AspectContext context);
    private IAspectBuilder Create(Tuple`2<MethodInfo, MethodInfo> tuple);
    private object GetKey(MethodInfo serviceMethod, MethodInfo implementationMethod);
    [CompilerGeneratedAttribute]
private object <Create>b__3_0(object key);
}
[NonAspectAttribute]
internal class AspectCore.DynamicProxy.AspectCaching : object {
    private ConcurrentDictionary`2<object, object> _dictionary;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public AspectCaching(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual void Dispose();
    public sealed virtual object Get(object key);
    public sealed virtual object GetOrAdd(object key, Func`2<object, object> factory);
    public sealed virtual void Set(object key, object value);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectCachingProvider : object {
    private ConcurrentDictionary`2<string, IAspectCaching> _cachings;
    public sealed virtual void Dispose();
    public sealed virtual IAspectCaching GetAspectCaching(string name);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectContextFactory : object {
    private static Object[] emptyParameters;
    private IServiceProvider _serviceProvider;
    public AspectContextFactory(IServiceProvider serviceProvider);
    private static AspectContextFactory();
    public sealed virtual AspectContext CreateContext(AspectActivatorContext activatorContext);
    public sealed virtual void ReleaseContext(AspectContext aspectContext);
}
[ExtensionAttribute]
public static class AspectCore.DynamicProxy.AspectContextRuntimeExtensions : object {
    private static ConcurrentDictionary`2<MethodInfo, bool> isAsyncCache;
    internal static ConcurrentDictionary`2<MethodInfo, MethodReflector> reflectorTable;
    private static ConcurrentDictionary`2<TypeInfo, Func`2<object, object>> _resultFuncCache;
    private static ConcurrentDictionary`2<TypeInfo, Func`2<object, Task>> _asTaskFuncCache;
    private static AspectContextRuntimeExtensions();
    [ExtensionAttribute]
public static ValueTask AwaitIfAsync(AspectContext aspectContext);
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.AspectContextRuntimeExtensions/<AwaitIfAsync>d__5")]
[ExtensionAttribute]
public static ValueTask AwaitIfAsync(AspectContext aspectContext, object returnValue);
    [ExtensionAttribute]
public static bool IsAsync(AspectContext aspectContext);
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.AspectContextRuntimeExtensions/<UnwrapAsyncReturnValue>d__7`1")]
[ExtensionAttribute]
public static Task`1<T> UnwrapAsyncReturnValue(AspectContext aspectContext);
    [ExtensionAttribute]
public static Task`1<object> UnwrapAsyncReturnValue(AspectContext aspectContext);
    private static Task ValueTaskWithResultToTask(object value, TypeInfo valueTypeInfo);
    internal static Func`2<object, object> CreateFuncToGetTaskResult(Type typeInfo);
    private static object GetTaskResult(object value, TypeInfo valueTypeInfo);
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.AspectContextRuntimeExtensions/<Unwrap>d__12")]
private static Task`1<object> Unwrap(object value, TypeInfo valueTypeInfo);
    private static bool IsAsyncFromMetaData(MethodInfo method);
    private static bool IsAsyncType(TypeInfo typeInfo);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectValidator : object {
    private AspectValidationDelegate _aspectValidationDelegate;
    public AspectValidator(AspectValidationDelegate aspectValidationDelegate);
    public sealed virtual bool Validate(MethodInfo method, bool isStrictValidation);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AspectValidatorBuilder : object {
    private IList`1<Func`2<AspectValidationDelegate, AspectValidationDelegate>> _collections;
    public AspectValidatorBuilder(IAspectConfiguration aspectConfiguration);
    public sealed virtual IAspectValidator Build();
}
[ExtensionAttribute]
public static class AspectCore.DynamicProxy.AspectValidatorExtensions : object {
    [ExtensionAttribute]
public static bool Validate(IAspectValidator aspectValidator, Type type, bool isStrictValidation);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AttributeAdditionalInterceptorSelector : object {
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.AttributeAdditionalInterceptorSelector/<Select>d__0")]
public sealed virtual IEnumerable`1<IInterceptor> Select(MethodInfo serviceMethod, MethodInfo implementationMethod);
    private IEnumerable`1<IInterceptor> SelectFromBase(MethodInfo implementationMethod);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AttributeAspectValidationHandler : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    public sealed virtual bool Invoke(AspectValidationContext context, AspectValidationDelegate next);
    private bool IsAttributeAspect(MemberInfo member);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.AttributeInterceptorSelector : object {
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.AttributeInterceptorSelector/<Select>d__0")]
public sealed virtual IEnumerable`1<IInterceptor> Select(MethodInfo method);
}
public class AspectCore.DynamicProxy.CacheAspectValidationHandler : object {
    private ConcurrentDictionary`2<AspectValidationContext, bool> detectorCache;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    public sealed virtual bool Invoke(AspectValidationContext context, AspectValidationDelegate next);
}
public class AspectCore.DynamicProxy.ConfigureAspectValidationHandler : object {
    private IAspectConfiguration _aspectConfiguration;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    public ConfigureAspectValidationHandler(IAspectConfiguration aspectConfiguration);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    public sealed virtual bool Invoke(AspectValidationContext context, AspectValidationDelegate next);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.ConfigureInterceptorSelector : object {
    private IAspectConfiguration _aspectConfiguration;
    private IServiceProvider _serviceProvider;
    public ConfigureInterceptorSelector(IAspectConfiguration aspectConfiguration, IServiceProvider serviceProvider);
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.ConfigureInterceptorSelector/<Select>d__3")]
public sealed virtual IEnumerable`1<IInterceptor> Select(MethodInfo method);
}
internal class AspectCore.DynamicProxy.DisposedProxyGenerator : object {
    private IServiceResolver _serviceResolver;
    private IProxyGenerator _proxyGenerator;
    public IProxyTypeGenerator TypeGenerator { get; }
    public DisposedProxyGenerator(IServiceResolver serviceResolver);
    public sealed virtual IProxyTypeGenerator get_TypeGenerator();
    public sealed virtual object CreateClassProxy(Type serviceType, Type implementationType, Object[] args);
    public sealed virtual object CreateInterfaceProxy(Type serviceType);
    public sealed virtual object CreateInterfaceProxy(Type serviceType, object implementationInstance);
    public sealed virtual void Dispose();
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.InterceptorCollector : object {
    private IEnumerable`1<IInterceptorSelector> _interceptorSelectors;
    private IEnumerable`1<IAdditionalInterceptorSelector> _additionalInterceptorSelectors;
    private IPropertyInjectorFactory _propertyInjectorFactory;
    private IAspectCaching _aspectCaching;
    public InterceptorCollector(IEnumerable`1<IInterceptorSelector> interceptorSelectors, IEnumerable`1<IAdditionalInterceptorSelector> additionalInterceptorSelectors, IPropertyInjectorFactory propertyInjectorFactory, IAspectCachingProvider aspectCachingProvider);
    public sealed virtual IEnumerable`1<IInterceptor> Collect(MethodInfo serviceMethod, MethodInfo implementationMethod);
    private object GetKey(MethodInfo serviceMethod, MethodInfo implementationMethod);
    private IEnumerable`1<IInterceptor> CollectFromService(MethodInfo serviceMethod);
    private IEnumerable`1<IInterceptor> CollectFromInherited(MethodInfo method);
    private IEnumerable`1<IInterceptor> CollectFromBase(MethodInfo method);
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.InterceptorCollector/<CollectFromSelector>d__10")]
private IEnumerable`1<IInterceptor> CollectFromSelector(MethodInfo method);
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.InterceptorCollector/<CollectFromAdditionalSelector>d__11")]
private IEnumerable`1<IInterceptor> CollectFromAdditionalSelector(MethodInfo serviceMethod, MethodInfo implementationMethod);
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.InterceptorCollector/<HandleInjector>d__12")]
private IEnumerable`1<IInterceptor> HandleInjector(IEnumerable`1<IInterceptor> interceptors);
}
[ExtensionAttribute]
internal static class AspectCore.DynamicProxy.InterceptorCollectorExtensions : object {
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.InterceptorCollectorExtensions/<HandleMultiple>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<IInterceptor> HandleMultiple(IEnumerable`1<IInterceptor> interceptors);
    [ExtensionAttribute]
internal static IEnumerable`1<IInterceptor> HandleSort(IEnumerable`1<IInterceptor> interceptors);
}
[NonAspectAttribute]
internal class AspectCore.DynamicProxy.InterceptorSelectorEqualityComparer`1 : object {
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
public class AspectCore.DynamicProxy.OverwriteAspectValidationHandler : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    public sealed virtual bool Invoke(AspectValidationContext context, AspectValidationDelegate next);
}
[ExtensionAttribute]
public static class AspectCore.DynamicProxy.Parameters.EnableParameterAspectExtensions : object {
    [ExtensionAttribute]
public static IAspectConfiguration EnableParameterAspect(IAspectConfiguration configuration, AspectPredicate[] predicates);
}
public class AspectCore.DynamicProxy.Parameters.EnableParameterAspectInterceptor : AbstractInterceptorAttribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    [CompilerGeneratedAttribute]
public virtual void set_Order(int value);
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.Parameters.EnableParameterAspectInterceptor/<Invoke>d__4")]
public virtual Task Invoke(AspectContext context, AspectDelegate next);
}
public class AspectCore.DynamicProxy.Parameters.NotNullAttribute : ParameterInterceptorAttribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public virtual Task Invoke(ParameterAspectContext context, ParameterAspectDelegate next);
}
internal class AspectCore.DynamicProxy.Parameters.ParameterAspectInvoker : object {
    private IList`1<Func`2<ParameterAspectDelegate, ParameterAspectDelegate>> delegates;
    public void AddDelegate(Func`3<ParameterAspectContext, ParameterAspectDelegate, Task> parameterAspectDelegate);
    private ParameterAspectDelegate Build();
    public Task Invoke(ParameterAspectContext context);
    public void Reset();
}
public class AspectCore.DynamicProxy.Parameters.ParameterInterceptorSelector : object {
    private IPropertyInjectorFactory _propertyInjectorFactory;
    private IAspectCaching _aspectCaching;
    public ParameterInterceptorSelector(IPropertyInjectorFactory propertyInjectorFactory, IAspectCachingProvider aspectCachingProvider);
    public sealed virtual IParameterInterceptor[] Select(ParameterInfo parameter);
    [CompilerGeneratedAttribute]
private object <Select>b__3_0(object info);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.ProxyGenerator : object {
    private IProxyTypeGenerator _proxyTypeGenerator;
    private IAspectActivatorFactory _aspectActivatorFactory;
    public IProxyTypeGenerator TypeGenerator { get; }
    public ProxyGenerator(IProxyTypeGenerator proxyTypeGenerator, IAspectActivatorFactory aspectActivatorFactory);
    public sealed virtual IProxyTypeGenerator get_TypeGenerator();
    public sealed virtual object CreateClassProxy(Type serviceType, Type implementationType, Object[] args);
    public sealed virtual object CreateInterfaceProxy(Type serviceType);
    public sealed virtual object CreateInterfaceProxy(Type serviceType, object implementationInstance);
    public sealed virtual void Dispose();
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.ProxyGeneratorBuilder : object {
    private IAspectConfiguration _configuration;
    private IServiceContext _serviceContext;
    public ProxyGeneratorBuilder Configure(Action`1<IAspectConfiguration> options);
    public ProxyGeneratorBuilder ConfigureService(Action`1<IServiceContext> options);
    public IProxyGenerator Build();
}
[ExtensionAttribute]
public static class AspectCore.DynamicProxy.ProxyGeneratorExtensions : object {
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type implementationType, Object[] args);
    [ExtensionAttribute]
public static TService CreateClassProxy(IProxyGenerator proxyGenerator, Object[] args);
    [ExtensionAttribute]
public static TImplementation CreateClassProxy(IProxyGenerator proxyGenerator, Object[] args);
    [ExtensionAttribute]
public static TService CreateInterfaceProxy(IProxyGenerator proxyGenerator);
    [ExtensionAttribute]
public static TService CreateInterfaceProxy(IProxyGenerator proxyGenerator, TService implementationInstance);
    [ExtensionAttribute]
public static object CreateInterfaceProxy(IProxyGenerator proxyGenerator, Type serviceType, Type implementationType, Object[] args);
    [ExtensionAttribute]
public static TService CreateInterfaceProxy(IProxyGenerator proxyGenerator, Object[] args);
}
[NonAspectAttribute]
public class AspectCore.DynamicProxy.ProxyTypeGenerator : object {
    private IAspectValidator _aspectValidator;
    private ProxyGeneratorUtils _proxyGeneratorUtils;
    public ProxyTypeGenerator(IAspectValidatorBuilder aspectValidatorBuilder);
    public sealed virtual Type CreateClassProxyType(Type serviceType, Type implementationType);
    public sealed virtual Type CreateInterfaceProxyType(Type serviceType);
    public sealed virtual Type CreateInterfaceProxyType(Type serviceType, Type implementationType);
    [IteratorStateMachineAttribute("AspectCore.DynamicProxy.ProxyTypeGenerator/<GetInterfaces>d__6")]
private IEnumerable`1<Type> GetInterfaces(Type type, Type[] exceptInterfaces);
}
[ExtensionAttribute]
public static class AspectCore.DynamicProxy.ReflectionUtils : object {
    [ExtensionAttribute]
public static bool IsProxy(object instance);
    [ExtensionAttribute]
public static bool IsProxyType(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool CanInherited(TypeInfo typeInfo);
    [ExtensionAttribute]
internal static Type[] GetParameterTypes(MethodInfo method);
    [ExtensionAttribute]
public static bool IsNonAspect(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsNonAspect(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static bool IsCallvirt(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static bool IsExplicit(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static bool IsVoid(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static string GetDisplayName(PropertyInfo member);
    [ExtensionAttribute]
internal static string GetName(MethodInfo member);
    [ExtensionAttribute]
internal static string GetDisplayName(MethodInfo member);
    [ExtensionAttribute]
public static bool IsReturnTask(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsReturnValueTask(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsVisibleAndVirtual(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsVisibleAndVirtual(MethodInfo method);
    [ExtensionAttribute]
public static MethodInfo GetMethodBySignature(TypeInfo typeInfo, MethodInfo method);
}
[NonAspectAttribute]
internal class AspectCore.DynamicProxy.RuntimeAspectContext : AspectContext {
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _data;
    private IServiceProvider _serviceProvider;
    private MethodInfo _implementationMethod;
    private object _implementation;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private object <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <ServiceMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <ProxyMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Proxy>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IDictionary`2<string, object> AdditionalData { get; }
    public object ReturnValue { get; public set; }
    public MethodInfo ServiceMethod { get; }
    public Object[] Parameters { get; }
    public MethodInfo ProxyMethod { get; }
    public object Proxy { get; }
    public MethodInfo ImplementationMethod { get; }
    public object Implementation { get; }
    public RuntimeAspectContext(IServiceProvider serviceProvider, MethodInfo serviceMethod, MethodInfo targetMethod, MethodInfo proxyMethod, object targetInstance, object proxyInstance, Object[] parameters);
    public virtual IServiceProvider get_ServiceProvider();
    public virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public virtual object get_ReturnValue();
    [CompilerGeneratedAttribute]
public virtual void set_ReturnValue(object value);
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_ServiceMethod();
    [CompilerGeneratedAttribute]
public virtual Object[] get_Parameters();
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_ProxyMethod();
    [CompilerGeneratedAttribute]
public virtual object get_Proxy();
    public virtual MethodInfo get_ImplementationMethod();
    public virtual object get_Implementation();
    [AsyncStateMachineAttribute("AspectCore.DynamicProxy.RuntimeAspectContext/<Complete>d__30")]
public virtual Task Complete();
    public virtual Task Break();
    public virtual Task Invoke(AspectDelegate next);
    public sealed virtual void Dispose();
}
internal static class AspectCore.Utils.ActivatorUtils : object {
    public static object CreateManyEnumerable(Type elementType);
    public static object CreateManyEnumerable(Type elementType, Array array);
}
internal static class AspectCore.Utils.ArrayUtils : object {
    public static T[] Empty();
}
internal static class AspectCore.Utils.MethodUtils : object {
    internal static MethodInfo CreateAspectActivator;
    internal static MethodInfo AspectActivatorInvoke;
    internal static MethodInfo AspectActivatorInvokeTask;
    internal static MethodInfo AspectActivatorInvokeValueTask;
    internal static ConstructorInfo AspectActivatorContextCtor;
    internal static ConstructorInfo ObjectCtor;
    internal static MethodInfo GetParameters;
    internal static MethodInfo GetMethodReflector;
    internal static MethodInfo ReflectorInvoke;
    private static MethodUtils();
    private static MethodInfo GetMethod(Expression`1<T> expression);
    private static MethodInfo GetMethod(string name);
}
internal static class AspectCore.Utils.PropertyInjectionUtils : object {
    private static ConcurrentDictionary`2<Type, bool> dictionary;
    private static PropertyInjectionUtils();
    public static bool TypeRequired(Type type);
    public static bool Required(object instance);
}
internal class AspectCore.Utils.ProxyGeneratorUtils : object {
    private static string ProxyNameSpace;
    private static string ProxyAssemblyName;
    private ModuleBuilder _moduleBuilder;
    private Dictionary`2<string, Type> _definedTypes;
    private object _lock;
    private ProxyNameUtils _proxyNameUtils;
    internal Type CreateInterfaceProxy(Type interfaceType, Type[] additionalInterfaces, IAspectValidator aspectValidator);
    internal Type CreateInterfaceProxy(Type interfaceType, Type implType, Type[] additionalInterfaces, IAspectValidator aspectValidator);
    internal Type CreateClassProxy(Type serviceType, Type implType, Type[] additionalInterfaces, IAspectValidator aspectValidator);
    private Type CreateInterfaceImplInternal(string name, Type interfaceType, Type[] additionalInterfaces, IAspectValidator aspectValidator);
    private Type CreateInterfaceProxyInternal(string name, Type interfaceType, Type implType, Type[] additionalInterfaces, IAspectValidator aspectValidator);
    private Type CreateClassProxyInternal(string name, Type serviceType, Type implType, Type[] additionalInterfaces, IAspectValidator aspectValidator);
}
internal static class AspectCore.Utils.TaskUtils : object {
    internal static Task CompletedTask;
    private static TaskUtils();
}
internal static class AspectCore.Utils.TaskUtils`1 : object {
    internal static Task`1<T> CompletedTask;
    private static TaskUtils`1();
}
