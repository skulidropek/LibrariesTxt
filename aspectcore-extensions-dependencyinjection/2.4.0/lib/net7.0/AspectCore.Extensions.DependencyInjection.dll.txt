public class AspectCore.Extensions.DependencyInjection.DynamicProxyServiceProviderFactory : object {
    private ServiceProviderOptions _serviceProviderOptions;
    public DynamicProxyServiceProviderFactory(bool validateScopes);
    public DynamicProxyServiceProviderFactory(ServiceProviderOptions serviceProviderOptions);
    public sealed virtual IServiceCollection CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder);
}
internal class AspectCore.Extensions.DependencyInjection.MsdiScopeResolverFactory : object {
    private IServiceProvider _serviceProvider;
    public MsdiScopeResolverFactory(IServiceProvider serviceProvider);
    public sealed virtual IServiceResolver CreateScope();
}
internal class AspectCore.Extensions.DependencyInjection.MsdiServiceResolver : object {
    private IServiceProvider _serviceProvider;
    public MsdiServiceResolver(IServiceProvider serviceProvider);
    public sealed virtual void Dispose();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual object Resolve(Type serviceType);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.DependencyInjection.ServiceCollectionAddExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddInterfaceProxy(IServiceCollection services, Type interfaceType, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddTransientInterfaceProxy(IServiceCollection services, Type interfaceType);
    [ExtensionAttribute]
public static IServiceCollection AddScopedInterfaceProxy(IServiceCollection services, Type interfaceType);
    [ExtensionAttribute]
public static IServiceCollection AddSingletonInterfaceProxy(IServiceCollection services, Type interfaceType);
    [ExtensionAttribute]
public static IServiceCollection AddInterfaceProxy(IServiceCollection services, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddTransientInterfaceProxy(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScopedInterfaceProxy(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingletonInterfaceProxy(IServiceCollection services);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.DependencyInjection.ServiceCollectionBuildExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use BuildAspectInjectorProvider to return AspectCore Injector, or Use BuildDynamicProxyServiceProvider to return MSDI ServiceProvider.", "True")]
public static IServiceProvider BuildAspectCoreServiceProvider(IServiceCollection services);
    [ExtensionAttribute]
public static ServiceProvider BuildDynamicProxyProvider(IServiceCollection services);
    [ExtensionAttribute]
public static ServiceProvider BuildDynamicProxyProvider(IServiceCollection services, bool validateScopes);
    [ExtensionAttribute]
public static ServiceProvider BuildDynamicProxyProvider(IServiceCollection services, ServiceProviderOptions options);
    [ExtensionAttribute]
public static IServiceCollection WeaveDynamicProxyService(IServiceCollection services);
    private static ServiceDescriptor MakeProxyService(ServiceDescriptor descriptor, Type implementationType, IProxyTypeGenerator proxyTypeGenerator);
    private static Func`2<IServiceProvider, object> CreateFactory(ServiceDescriptor descriptor, Type proxyType);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use ConfigureDynamicProxy")]
public static IServiceCollection AddDynamicProxy(IServiceCollection services, Action`1<IAspectConfiguration> configure);
    [ExtensionAttribute]
public static IServiceCollection ConfigureDynamicProxy(IServiceCollection services, Action`1<IAspectConfiguration> configure);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDynamicProxyServices(IServiceCollection services);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.DependencyInjection.ServiceCollectionToServiceContextExtensions : object {
    [ExtensionAttribute]
public static IServiceProvider BuildServiceContextProvider(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceProvider BuildServiceContextProvider(IServiceCollection services, Action`1<IServiceContext> additional);
    [ExtensionAttribute]
public static IServiceContext ToServiceContext(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAspectServiceContext(IServiceCollection services);
    private static ServiceDefinition Replace(ServiceDescriptor descriptor);
    private static Lifetime GetLifetime(ServiceLifetime serviceLifetime);
}
[NonAspectAttribute]
public class AspectCore.Extensions.DependencyInjection.ServiceContextProviderFactory : object {
    public sealed virtual IServiceContext CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceContext contextBuilder);
}
internal class AspectCore.Extensions.DependencyInjection.ServiceScope : object {
    private IServiceResolver _serviceResolver;
    public IServiceProvider ServiceProvider { get; }
    public ServiceScope(IServiceResolver serviceResolver);
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void Dispose();
}
internal class AspectCore.Extensions.DependencyInjection.ServiceScopeFactory : object {
    private IServiceResolver _serviceResolver;
    public ServiceScopeFactory(IServiceResolver serviceResolver);
    public sealed virtual IServiceScope CreateScope();
}
internal class AspectCore.Extensions.DependencyInjection.ServiceValidator : object {
    private IAspectValidator _aspectValidator;
    internal ServiceValidator(IAspectValidatorBuilder aspectValidatorBuilder);
    internal bool TryValidate(ServiceDescriptor descriptor, Type& implementationType);
    private Type GetImplementationType(ServiceDescriptor descriptor);
}
internal class AspectCore.Extensions.DependencyInjection.SupportRequiredService : object {
    private IServiceResolver _serviceResolver;
    public SupportRequiredService(IServiceResolver serviceResolver);
    public sealed virtual object GetRequiredService(Type serviceType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
