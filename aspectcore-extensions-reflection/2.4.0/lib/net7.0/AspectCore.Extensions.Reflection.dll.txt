public enum AspectCore.Extensions.Reflection.CallOptions : Enum {
    public int value__;
    public static CallOptions Call;
    public static CallOptions Callvirt;
}
public class AspectCore.Extensions.Reflection.ConstructorReflector : MemberReflector`1<ConstructorInfo> {
    private Func`2<Object[], object> _invoker;
    private ParameterReflector[] _parameterReflectors;
    public ParameterReflector[] ParameterReflectors { get; }
    private ConstructorReflector(ConstructorInfo constructorInfo);
    public sealed virtual ParameterReflector[] get_ParameterReflectors();
    protected virtual Func`2<Object[], object> CreateInvoker();
    public virtual object Invoke(Object[] args);
    internal static ConstructorReflector Create(ConstructorInfo constructorInfo);
    [CompilerGeneratedAttribute]
private Func`2<Object[], object> <CreateInvoker>g__CreateDelegate|5_1(<>c__DisplayClass5_0& );
}
[ExtensionAttribute]
public static class AspectCore.Extensions.Reflection.CustomAttributeExtensions : object {
    private static Attribute[] empty;
    private static CustomAttributeExtensions();
    [ExtensionAttribute]
public static Attribute[] GetCustomAttributes(ICustomAttributeReflectorProvider customAttributeReflectorProvider);
    [ExtensionAttribute]
public static Attribute[] GetCustomAttributes(ICustomAttributeReflectorProvider customAttributeReflectorProvider, Type attributeType);
    [ExtensionAttribute]
public static TAttribute[] GetCustomAttributes(ICustomAttributeReflectorProvider customAttributeReflectorProvider);
    [ExtensionAttribute]
public static Attribute GetCustomAttribute(ICustomAttributeReflectorProvider customAttributeReflectorProvider, Type attributeType);
    [ExtensionAttribute]
public static TAttribute GetCustomAttribute(ICustomAttributeReflectorProvider customAttributeReflectorProvider);
    [ExtensionAttribute]
public static bool IsDefined(ICustomAttributeReflectorProvider customAttributeReflectorProvider, Type attributeType);
    [ExtensionAttribute]
public static bool IsDefined(ICustomAttributeReflectorProvider customAttributeReflectorProvider);
}
public class AspectCore.Extensions.Reflection.CustomAttributeReflector : object {
    private CustomAttributeData _customAttributeData;
    private Func`1<Attribute> _invoker;
    private Type _attributeType;
    internal HashSet`1<RuntimeTypeHandle> _tokens;
    public Type AttributeType { get; }
    private CustomAttributeReflector(CustomAttributeData customAttributeData);
    public Type get_AttributeType();
    private Func`1<Attribute> CreateInvoker();
    private HashSet`1<RuntimeTypeHandle> GetAttrTokens(Type attributeType);
    public Attribute Invoke();
    public CustomAttributeData GetCustomAttributeData();
    internal static CustomAttributeReflector Create(CustomAttributeData customAttributeData);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.Reflection.Emit.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void EmitLoadArg(ILGenerator ilGenerator, int index);
    [ExtensionAttribute]
public static void EmitLoadArgA(ILGenerator ilGenerator, int index);
    [ExtensionAttribute]
public static void EmitConvertToObject(ILGenerator ilGenerator, Type typeFrom);
    [ExtensionAttribute]
public static void EmitConvertFromObject(ILGenerator ilGenerator, Type typeTo);
    [ExtensionAttribute]
public static void EmitThis(ILGenerator ilGenerator);
    [ExtensionAttribute]
public static void EmitType(ILGenerator ilGenerator, Type type);
    [ExtensionAttribute]
public static void EmitMethod(ILGenerator ilGenerator, MethodInfo method);
    [ExtensionAttribute]
public static void EmitMethod(ILGenerator ilGenerator, MethodInfo method, Type declaringType);
    [ExtensionAttribute]
public static void EmitConvertToType(ILGenerator ilGenerator, Type typeFrom, Type typeTo, bool isChecked);
    [ExtensionAttribute]
public static void EmitCastToType(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo);
    [ExtensionAttribute]
public static void EmitHasValue(ILGenerator ilGenerator, Type nullableType);
    [ExtensionAttribute]
public static void EmitGetValueOrDefault(ILGenerator ilGenerator, Type nullableType);
    [ExtensionAttribute]
public static void EmitGetValue(ILGenerator ilGenerator, Type nullableType);
    [ExtensionAttribute]
public static void EmitConstant(ILGenerator ilGenerator, object value, Type valueType);
    [ExtensionAttribute]
public static void EmitDefault(ILGenerator ilGenerator, Type type);
    public static bool CanEmitConstant(object value, Type type);
    [ExtensionAttribute]
public static void EmitDecimal(ILGenerator ilGenerator, decimal value);
    [ExtensionAttribute]
public static void EmitNew(ILGenerator ilGenerator, ConstructorInfo ci);
    [ExtensionAttribute]
public static void EmitNull(ILGenerator ilGenerator);
    [ExtensionAttribute]
public static void EmitString(ILGenerator ilGenerator, string value);
    [ExtensionAttribute]
public static void EmitBoolean(ILGenerator ilGenerator, bool value);
    [ExtensionAttribute]
public static void EmitChar(ILGenerator ilGenerator, char value);
    [ExtensionAttribute]
public static void EmitByte(ILGenerator ilGenerator, byte value);
    [ExtensionAttribute]
public static void EmitSByte(ILGenerator ilGenerator, sbyte value);
    [ExtensionAttribute]
public static void EmitShort(ILGenerator ilGenerator, short value);
    [ExtensionAttribute]
public static void EmitUShort(ILGenerator ilGenerator, ushort value);
    [ExtensionAttribute]
public static void EmitInt(ILGenerator ilGenerator, int value);
    [ExtensionAttribute]
public static void EmitUInt(ILGenerator ilGenerator, UInt32 value);
    [ExtensionAttribute]
public static void EmitLong(ILGenerator ilGenerator, long value);
    [ExtensionAttribute]
public static void EmitULong(ILGenerator ilGenerator, ulong value);
    [ExtensionAttribute]
public static void EmitDouble(ILGenerator ilGenerator, double value);
    [ExtensionAttribute]
public static void EmitSingle(ILGenerator ilGenerator, float value);
    [ExtensionAttribute]
public static void EmitArray(ILGenerator ilGenerator, Array items, Type elementType);
    [ExtensionAttribute]
public static void EmitStoreElement(ILGenerator ilGenerator, Type type);
    [ExtensionAttribute]
public static void EmitLoadElement(ILGenerator ilGenerator, Type type);
    [ExtensionAttribute]
public static void EmitLdRef(ILGenerator ilGenerator, Type type);
    [ExtensionAttribute]
public static void EmitStRef(ILGenerator ilGenerator, Type type);
    [ExtensionAttribute]
private static void EmitNullableConversion(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo, bool isChecked);
    [ExtensionAttribute]
private static void EmitNullableToNullableConversion(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo, bool isChecked);
    [ExtensionAttribute]
private static void EmitNullableToNonNullableConversion(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo, bool isChecked);
    [ExtensionAttribute]
private static void EmitNullableToNonNullableStructConversion(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo, bool isChecked);
    [ExtensionAttribute]
private static void EmitNullableToReferenceConversion(ILGenerator ilGenerator, TypeInfo typeFrom);
    [ExtensionAttribute]
private static void EmitNonNullableToNullableConversion(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo, bool isChecked);
    [ExtensionAttribute]
private static void EmitNumericConversion(ILGenerator ilGenerator, TypeInfo typeFrom, TypeInfo typeTo, bool isChecked);
    private static bool ShouldLdtoken(Type t);
    private static bool ShouldLdtoken(MethodBase mb);
    [ExtensionAttribute]
private static bool TryEmitILConstant(ILGenerator ilGenerator, object value, Type type);
    [ExtensionAttribute]
private static void EmitDecimalBits(ILGenerator ilGenerator, decimal value);
    private static bool CanEmitILConstant(Type type);
}
public class AspectCore.Extensions.Reflection.Emit.IndexedLocalBuilder : ValueType {
    [CompilerGeneratedAttribute]
private LocalBuilder <LocalBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <LocalType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalIndex>k__BackingField;
    public LocalBuilder LocalBuilder { get; }
    public Type LocalType { get; }
    public int Index { get; }
    public int LocalIndex { get; }
    public IndexedLocalBuilder(LocalBuilder localBuilder, int index);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public LocalBuilder get_LocalBuilder();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_LocalType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_LocalIndex();
}
public class AspectCore.Extensions.Reflection.FieldReflector : MemberReflector`1<FieldInfo> {
    protected Func`2<object, object> _getter;
    protected Action`2<object, object> _setter;
    protected FieldReflector(FieldInfo reflectionInfo);
    internal static FieldReflector Create(FieldInfo reflectionInfo);
    protected virtual Func`2<object, object> CreateGetter();
    protected virtual Action`2<object, object> CreateSetter();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    public virtual object GetStaticValue();
    public virtual void SetStaticValue(object value);
    [CompilerGeneratedAttribute]
internal static FieldReflector <Create>g__CreateInternal|0_0(FieldInfo field);
}
public interface AspectCore.Extensions.Reflection.ICustomAttributeReflectorProvider {
    public CustomAttributeReflector[] CustomAttributeReflectors { get; }
    public abstract virtual CustomAttributeReflector[] get_CustomAttributeReflectors();
}
[ExtensionAttribute]
internal static class AspectCore.Extensions.Reflection.InternalExtensions : object {
    [ExtensionAttribute]
internal static MethodInfo GetMethodBySign(TypeInfo typeInfo, MethodInfo method);
    internal static MethodInfo GetMethod(Expression`1<T> expression);
    internal static MethodInfo GetMethod(string name);
    [ExtensionAttribute]
internal static bool IsCallvirt(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static string GetFullName(MemberInfo member);
    [ExtensionAttribute]
internal static bool IsReturnTask(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static Type[] GetParameterTypes(MethodBase method);
    [ExtensionAttribute]
internal static Type UnWrapArrayType(TypeInfo typeInfo);
}
internal static class AspectCore.Extensions.Reflection.Internals.MethodInfoConstant : object {
    internal static MethodInfo GetTypeFromHandle;
    internal static MethodInfo GetMethodFromHandle;
    internal static ConstructorInfo ArgumentNullExceptionCtor;
    internal static ConstructorInfo ObjectCtor;
    private static MethodInfoConstant();
}
[ExtensionAttribute]
internal static class AspectCore.Extensions.Reflection.Internals.TypeInfoUtils : object {
    internal static bool AreEquivalent(TypeInfo t1, TypeInfo t2);
    [ExtensionAttribute]
internal static bool IsNullableType(TypeInfo type);
    [ExtensionAttribute]
internal static Type GetNonNullableType(TypeInfo type);
    internal static bool IsLegalExplicitVariantDelegateConversion(TypeInfo source, TypeInfo dest);
    private static bool IsDelegate(TypeInfo t);
    private static bool IsInvariant(TypeInfo t);
    [ExtensionAttribute]
private static bool IsCovariant(TypeInfo t);
    internal static bool HasReferenceConversion(TypeInfo source, TypeInfo dest);
    private static bool IsContravariant(TypeInfo t);
    [ExtensionAttribute]
internal static bool IsConvertible(TypeInfo typeInfo);
    internal static bool IsUnsigned(TypeInfo typeInfo);
    internal static bool IsFloatingPoint(TypeInfo typeInfo);
}
public interface AspectCore.Extensions.Reflection.IParameterReflectorProvider {
    public ParameterReflector[] ParameterReflectors { get; }
    public abstract virtual ParameterReflector[] get_ParameterReflectors();
}
public abstract class AspectCore.Extensions.Reflection.MemberReflector`1 : object {
    protected TMemberInfo _reflectionInfo;
    private CustomAttributeReflector[] _customAttributeReflectors;
    public string Name { get; }
    public string DisplayName { get; }
    public CustomAttributeReflector[] CustomAttributeReflectors { get; }
    protected MemberReflector`1(TMemberInfo reflectionInfo);
    public virtual string get_Name();
    public virtual string ToString();
    public TMemberInfo GetMemberInfo();
    public virtual string get_DisplayName();
    public sealed virtual CustomAttributeReflector[] get_CustomAttributeReflectors();
}
[ExtensionAttribute]
public static class AspectCore.Extensions.Reflection.MethodExtensions : object {
    private static ConcurrentDictionary`2<MethodInfo, PropertyInfo> dictionary;
    private static MethodExtensions();
    [ExtensionAttribute]
public static bool IsPropertyBinding(MethodInfo method);
    [ExtensionAttribute]
public static PropertyInfo GetBindingProperty(MethodInfo method);
}
public class AspectCore.Extensions.Reflection.MethodReflector : MemberReflector`1<MethodInfo> {
    protected Func`3<object, Object[], object> _invoker;
    private ParameterReflector[] _parameterReflectors;
    private string _displayName;
    public ParameterReflector[] ParameterReflectors { get; }
    public string DisplayName { get; }
    private MethodReflector(MethodInfo reflectionInfo);
    internal static MethodReflector Create(MethodInfo reflectionInfo, CallOptions callOption);
    public sealed virtual ParameterReflector[] get_ParameterReflectors();
    protected virtual Func`3<object, Object[], object> CreateInvoker();
    public virtual object Invoke(object instance, Object[] parameters);
    public virtual object StaticInvoke(Object[] parameters);
    public virtual string get_DisplayName();
    private static string GetDisplayName(MethodInfo method);
}
public class AspectCore.Extensions.Reflection.MethodSignature : ValueType {
    private static ConcurrentDictionary`2<Pair`2<MethodBase, string>, int> signatures;
    private int _signature;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Value { get; }
    public string Name { get; public set; }
    public MethodSignature(MethodBase method);
    public MethodSignature(MethodBase method, string name);
    private static MethodSignature();
    public int get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Inequality(MethodSignature signature, MethodSignature other);
    public static bool op_Equality(MethodSignature signature, MethodSignature other);
    private static int GetSignatureCode(Pair`2<MethodBase, string> pair);
    private static int GetSignatureCode(int signatureCode, Type genericType);
}
internal static class AspectCore.Extensions.Reflection.Pair : object {
    public static Pair`2<T1, T2> Create(T1 item1, T2 item2);
}
internal class AspectCore.Extensions.Reflection.Pair`2 : ValueType {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    public T1 Item1 { get; private set; }
    public T2 Item2 { get; private set; }
    public Pair`2(T1 first, T2 second);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
private void set_Item1(T1 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
private void set_Item2(T2 value);
    public sealed virtual bool Equals(Pair`2<T1, T2> obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(T1& first, T2& second);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.Reflection.ParameterInfoExtensions : object {
    [ExtensionAttribute]
public static bool HasDefaultValueByAttributes(ParameterInfo parameter);
    [ExtensionAttribute]
public static object DefaultValueSafely(ParameterInfo parameter);
}
public class AspectCore.Extensions.Reflection.ParameterReflector : object {
    private ParameterInfo _reflectionInfo;
    private CustomAttributeReflector[] _customAttributeReflectors;
    [CompilerGeneratedAttribute]
private bool <HasDeflautValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefalutValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    public CustomAttributeReflector[] CustomAttributeReflectors { get; }
    public string Name { get; }
    public bool HasDeflautValue { get; }
    public object DefalutValue { get; }
    public int Position { get; }
    public Type ParameterType { get; }
    private ParameterReflector(ParameterInfo reflectionInfo);
    internal static ParameterReflector Create(ParameterInfo parameterInfo);
    public sealed virtual CustomAttributeReflector[] get_CustomAttributeReflectors();
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_HasDeflautValue();
    [CompilerGeneratedAttribute]
public object get_DefalutValue();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public Type get_ParameterType();
    public ParameterInfo GetParameterInfo();
    public virtual string ToString();
}
public class AspectCore.Extensions.Reflection.PropertyReflector : MemberReflector`1<PropertyInfo> {
    protected bool _canRead;
    protected bool _canWrite;
    protected Func`2<object, object> _getter;
    protected Action`2<object, object> _setter;
    private PropertyReflector(PropertyInfo reflectionInfo);
    internal static PropertyReflector Create(PropertyInfo reflectionInfo, CallOptions callOption);
    protected virtual Func`2<object, object> CreateGetter();
    protected virtual Action`2<object, object> CreateSetter();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    public virtual object GetStaticValue();
    public virtual void SetStaticValue(object value);
    [CompilerGeneratedAttribute]
internal static PropertyReflector <Create>g__CreateInternal|0_0(Pair`2<PropertyInfo, CallOptions> item);
    [CompilerGeneratedAttribute]
private object <.ctor>b__6_0(object ins);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(object ins, object val);
}
internal static class AspectCore.Extensions.Reflection.ReflectorCacheUtils`2 : object {
    private static ConcurrentDictionary`2<TMemberInfo, TReflector> dictionary;
    private static ReflectorCacheUtils`2();
    internal static TReflector GetOrAdd(TMemberInfo key, Func`2<TMemberInfo, TReflector> factory);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.Reflection.ReflectorExtensions : object {
    [ExtensionAttribute]
public static TypeReflector GetReflector(Type type);
    [ExtensionAttribute]
public static TypeReflector GetReflector(TypeInfo typeInfo);
    [ExtensionAttribute]
public static ConstructorReflector GetReflector(ConstructorInfo constructor);
    [ExtensionAttribute]
public static FieldReflector GetReflector(FieldInfo field);
    [ExtensionAttribute]
public static MethodReflector GetReflector(MethodInfo method);
    [ExtensionAttribute]
public static MethodReflector GetReflector(MethodInfo method, CallOptions callOption);
    [ExtensionAttribute]
public static PropertyReflector GetReflector(PropertyInfo property);
    [ExtensionAttribute]
public static PropertyReflector GetReflector(PropertyInfo property, CallOptions callOption);
    [ExtensionAttribute]
public static ParameterReflector GetReflector(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static FieldInfo GetFieldInfo(FieldReflector reflector);
    [ExtensionAttribute]
public static MethodInfo GetMethodInfo(MethodReflector reflector);
    [ExtensionAttribute]
public static ConstructorInfo GetConstructorInfo(ConstructorReflector reflector);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyInfo(PropertyReflector reflector);
}
internal static class AspectCore.Extensions.Reflection.ReflectorFindUtils : object {
    internal static TReflector FindMember(TReflector[] reflectors, string name);
}
[ExtensionAttribute]
public static class AspectCore.Extensions.Reflection.TypeExtensions : object {
    private static ConcurrentDictionary`2<TypeInfo, bool> isTaskOfTCache;
    private static ConcurrentDictionary`2<TypeInfo, bool> isValueTaskOfTCache;
    private static Type voidTaskResultType;
    private static TypeExtensions();
    [ExtensionAttribute]
public static MethodInfo GetMethodBySignature(TypeInfo typeInfo, MethodSignature signature);
    [ExtensionAttribute]
public static MethodInfo GetDeclaredMethodBySignature(TypeInfo typeInfo, MethodSignature signature);
    [ExtensionAttribute]
public static object GetDefaultValue(TypeInfo typeInfo);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static bool IsVisible(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsTask(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsTaskWithResult(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsTaskWithVoidTaskResult(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsValueTask(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsValueTaskWithResult(TypeInfo typeInfo);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsTupleType(Type type);
}
public class AspectCore.Extensions.Reflection.TypeReflector : MemberReflector`1<TypeInfo> {
    private string _displayName;
    private string _fullDisplayName;
    public string DisplayName { get; }
    public string FullDisplayName { get; }
    private TypeReflector(TypeInfo typeInfo);
    internal static TypeReflector Create(TypeInfo typeInfo);
    public virtual string get_DisplayName();
    public virtual string get_FullDisplayName();
    private static string GetDisplayName(TypeInfo typeInfo);
    private static string GetFullDisplayName(TypeInfo typeInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
