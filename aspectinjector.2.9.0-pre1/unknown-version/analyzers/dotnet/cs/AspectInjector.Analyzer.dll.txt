[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Analyzers.AdviceAttributeAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeAttribute(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Analyzers.ArgumentAttributeAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeAttribute(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Analyzers.AspectAttributeAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeAttribute(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Analyzers.InjectionAttributeAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeAttribute(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Analyzers.MixinAttributeAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeAttribute(SyntaxNodeAnalysisContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class AspectInjector.Analyzer.CodeFixes.AspectCodeFixProvider : CodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.CodeFixes.AspectCodeFixProvider/<RemoveModifier>d__3")]
private Task`1<Document> RemoveModifier(Document document, int from, CancellationToken ct);
    public virtual FixAllProvider GetFixAllProvider();
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class AspectInjector.Analyzer.CodeFixes.MixinCodeFixProvider : CodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.CodeFixes.MixinCodeFixProvider/<ImplementInterface>d__3")]
private Task`1<Document> ImplementInterface(Document document, Diagnostic diagnostic, CancellationToken ct);
    public virtual FixAllProvider GetFixAllProvider();
}
[ExtensionAttribute]
public static class AspectInjector.Analyzer.Extensions : object {
    private static ConcurrentDictionary`2<Rule, DiagnosticDescriptor> _descriptorCache;
    private static Extensions();
    [ExtensionAttribute]
public static TNode RemoveTokenKeepTrivia(TNode node, SyntaxToken token);
    [ExtensionAttribute]
public static DiagnosticDescriptor AsDescriptor(Rule rule);
}
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Refactorings.AdviceAttributeCodeRefactoringProvider : AdviceCodeRefactoringProvider {
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AdviceAttributeCodeRefactoringProvider/<ComputeRefactoringsAsync>d__0")]
public virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
}
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Refactorings.AdviceCodeRefactoringProvider : CodeRefactoringProvider {
    private static ImmutableArray`1<ParameterSample> _shared;
    private static ImmutableArray`1<ParameterSample> _after;
    private static ImmutableArray`1<ParameterSample> _around;
    private static AdviceCodeRefactoringProvider();
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AdviceCodeRefactoringProvider/<ComputeRefactoringsAsync>d__3")]
public virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AdviceCodeRefactoringProvider/<RegisterRefactorings>d__4")]
protected Task RegisterRefactorings(CodeRefactoringContext context, MethodDeclarationSyntax method);
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AdviceCodeRefactoringProvider/<AddParameter>d__5")]
private Task`1<Document> AddParameter(CodeRefactoringContext context, MethodDeclarationSyntax method, ParameterSample parameter, CancellationToken ct);
    private bool HasParameter(ImmutableArray`1<AttributeData> attributes, string source);
}
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Refactorings.AspectAttributeCodeRefactoringProvider : AspectCodeRefactoringProvider {
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AspectAttributeCodeRefactoringProvider/<ComputeRefactoringsAsync>d__0")]
public virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
}
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Refactorings.AspectCodeRefactoringProvider : CodeRefactoringProvider {
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AspectCodeRefactoringProvider/<ComputeRefactoringsAsync>d__0")]
public virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
    protected void RegisterRefactoring(CodeRefactoringContext context, ClassDeclarationSyntax class);
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.AspectCodeRefactoringProvider/<CreateAdvice>d__2")]
private Task`1<Document> CreateAdvice(CodeRefactoringContext context, ClassDeclarationSyntax class, ValueTuple`2<MethodDeclarationSyntax, UsingDirectiveSyntax[]> advice, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
public class AspectInjector.Analyzer.Refactorings.ParameterSample : ValueType {
    public string Source;
    public string Name;
    public ParameterSyntax ParameterSyntax;
    public UsingDirectiveSyntax UsingSyntax;
    public ParameterSample(string source, string name, ParameterSyntax parameterSyntax, UsingDirectiveSyntax usingSyntax);
}
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class AspectInjector.Analyzer.Refactorings.PossibleMixinCodeRefactoringProvider : CodeRefactoringProvider {
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.PossibleMixinCodeRefactoringProvider/<ComputeRefactoringsAsync>d__0")]
public virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
    [AsyncStateMachineAttribute("AspectInjector.Analyzer.Refactorings.PossibleMixinCodeRefactoringProvider/<AddMixinAttribute>d__1")]
private Task`1<Document> AddMixinAttribute(CodeRefactoringContext context, ClassDeclarationSyntax class, TypeSyntax baseType, CancellationToken ct);
}
public static class AspectInjector.Analyzer.Refactorings.Samples : object {
}
[ExtensionAttribute]
public static class AspectInjector.Analyzer.RoslynExtensions : object {
    [ExtensionAttribute]
public static SyntaxNode WithUpdatedUsings(SyntaxNode node, UsingDirectiveSyntax[] usings);
    [ExtensionAttribute]
public static MethodDeclarationSyntax WithAdviceAttribute(MethodDeclarationSyntax method, Kind kind);
    [ExtensionAttribute]
public static AttributeData GetAspectAttribute(ISymbol symbol);
    [ExtensionAttribute]
public static AttributeData GetAdviceAttribute(ISymbol method);
    [ExtensionAttribute]
public static IReadOnlyList`1<AttributeData> GetMixinAttributes(ISymbol symbol);
}
public static class AspectInjector.Analyzer.SyntaxBasicBlocks : object {
}
internal class AspectInjector.Analyzer.UsingComparer : object {
    public static UsingComparer Instance;
    private static UsingComparer();
    public sealed virtual bool Equals(UsingDirectiveSyntax x, UsingDirectiveSyntax y);
    public sealed virtual int GetHashCode(UsingDirectiveSyntax obj);
}
internal static class AspectInjector.Analyzer.WellKnown : object {
    public static string InjectionType;
    public static string AdviceType;
    public static string AdviceArgumentType;
    public static string MixinType;
    public static string AspectType;
    public static string MethodBase;
    public static string Type;
    public static string Attribute;
    public static string MixinTypeProperty;
    public static string AspectTypeProperty;
    private static WellKnown();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [NullableContextAttribute("1")]
public CompilerFeatureRequiredAttribute(string feature);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
