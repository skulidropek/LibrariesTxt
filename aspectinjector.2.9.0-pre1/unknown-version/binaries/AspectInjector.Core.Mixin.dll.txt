internal class AspectInjector.Core.Mixin.MixinEffect : Effect {
    [CompilerGeneratedAttribute]
private TypeReference <InterfaceType>k__BackingField;
    public TypeReference InterfaceType { get; public set; }
    [CompilerGeneratedAttribute]
public TypeReference get_InterfaceType();
    [CompilerGeneratedAttribute]
public void set_InterfaceType(TypeReference value);
    public virtual bool IsApplicableFor(IMemberDefinition target);
    public virtual bool Equals(Effect other);
    public virtual bool Validate(AspectDefinition aspect, ILogger log);
    public virtual string ToString();
}
public class AspectInjector.Core.Mixin.MixinReader : object {
    public sealed virtual IReadOnlyCollection`1<Effect> Read(ICustomAttributeProvider host);
    private IReadOnlyCollection`1<MixinEffect> Extract(TypeDefinition type);
}
internal class AspectInjector.Core.Mixin.MixinWeaveProcess : object {
    private TypeDefinition _target;
    private MixinEffect _effect;
    private AspectDefinition _aspect;
    public MixinWeaveProcess(ILogger log, IMemberDefinition target, AspectDefinition aspect, MixinEffect effect);
    public void Execute();
    protected MethodDefinition CreateMethodProxy(MethodDefinition originalMethod, TypeReference interface);
    protected void CreateEventProxy(EventDefinition originalEvent, TypeReference interface);
    protected void CreatePropertyProxy(PropertyDefinition originalProperty, TypeReference interface);
    private IEnumerable`1<TypeReference> GetInterfacesTree(TypeReference typeReference);
    private TypeReference ParametrizeSubInterface(GenericInstanceType interfaceType, TypeReference typeReference);
    protected MethodDefinition GetOrCreateMethodProxy(MethodReference ifaceMethod);
    private static MethodDefinition Implement(MethodReference origin, TypeDefinition target);
    private static void ParametrizeGenericParamater(GenericParameter gp, MethodReference argumentsOwner, IReadOnlyList`1<GenericParameter> genericParameters);
    private static TypeReference ResolveType(TypeReference tr, MethodReference reference, IReadOnlyList`1<GenericParameter> genericParameters);
}
public class AspectInjector.Core.Mixin.MixinWeaver : object {
    private ILogger _log;
    public byte Priority { get; }
    public MixinWeaver(ILogger log);
    public sealed virtual byte get_Priority();
    public sealed virtual void Weave(InjectionDefinition injection);
    public sealed virtual bool CanWeave(InjectionDefinition injection);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [NullableContextAttribute("1")]
public CompilerFeatureRequiredAttribute(string feature);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
