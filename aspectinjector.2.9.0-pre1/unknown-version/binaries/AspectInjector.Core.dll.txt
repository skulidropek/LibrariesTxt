public static class AspectInjector.Core.Constants : object {
    public static string Prefix;
    public static string AssetsResourceName;
    public static string AspectGlobalField;
    public static string AspectInstanceFieldPrefix;
    public static string InstanceAspectsMethodName;
    public static string AspectFactoryMethodName;
    private static Constants();
}
public interface AspectInjector.Core.Contracts.IAspectReader {
    public abstract virtual IReadOnlyCollection`1<AspectDefinition> ReadAll(AssemblyDefinition assembly);
    public abstract virtual AspectDefinition Read(TypeDefinition type);
}
public interface AspectInjector.Core.Contracts.IAspectWeaver {
    public abstract virtual void WeaveGlobalAssests(AspectDefinition target);
}
public interface AspectInjector.Core.Contracts.IEffectReader {
    public abstract virtual IReadOnlyCollection`1<Effect> Read(ICustomAttributeProvider host);
}
public interface AspectInjector.Core.Contracts.IEffectWeaver {
    public byte Priority { get; }
    public abstract virtual byte get_Priority();
    public abstract virtual void Weave(InjectionDefinition injection);
    public abstract virtual bool CanWeave(InjectionDefinition injection);
}
public interface AspectInjector.Core.Contracts.IInjectionReader {
    public abstract virtual IReadOnlyCollection`1<InjectionDefinition> ReadAll(AssemblyDefinition assembly);
}
[ExtensionAttribute]
public static class AspectInjector.Core.Extensions.CustomAttributeExtensions : object {
    [ExtensionAttribute]
public static bool IsCompilerGenerated(ICustomAttributeProvider t);
    [ExtensionAttribute]
public static TR GetPropertyValue(CustomAttribute ca, string name);
    [ExtensionAttribute]
public static TR GetConstructorValue(CustomAttribute ca, int argPosition);
}
[ExtensionAttribute]
public static class AspectInjector.Core.Extensions.FluentExtensions : object {
    [ExtensionAttribute]
public static Instruction GetUserCodeStart(MethodBody body);
    [ExtensionAttribute]
public static void OnAspectsInitialized(MethodBody body, PointCut action);
    [ExtensionAttribute]
public static bool IsFactoryMethod(MethodDefinition m);
    [ExtensionAttribute]
public static Cut LoadAspect(Cut& cut, AspectDefinition aspect);
    [ExtensionAttribute]
public static Cut LoadAspect(Cut& cut, AspectDefinition aspect, MethodDefinition method, PointCut accessor);
    [ExtensionAttribute]
public static Cut CreateAspectInstance(Cut& cut, AspectDefinition aspect);
    [ExtensionAttribute]
public static void EnsureAspectInitialized(MethodDefinition target, AspectDefinition aspect);
    private static FieldReference GetInstanceAspectField(AspectDefinition aspect, TypeDefinition source, Cut& cut);
    private static MethodDefinition GetInstan—ÅeAspectsInitializer(TypeDefinition type);
    private static FieldReference GetGlobalAspectField(AspectDefinition aspect);
    private static void InjectInitialization(MethodDefinition initMethod, FieldReference field, PointCut factory);
    private static FieldReference FindField(TypeReference type, string name);
}
public class AspectInjector.Core.Models.AspectDefinition : object {
    private MethodDefinition _factoryMethod;
    [CompilerGeneratedAttribute]
private TypeDefinition <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Effect> <Effects>k__BackingField;
    [CompilerGeneratedAttribute]
private Scope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <Factory>k__BackingField;
    public TypeDefinition Host { get; public set; }
    public List`1<Effect> Effects { get; public set; }
    public Scope Scope { get; public set; }
    public TypeReference Factory { get; public set; }
    [CompilerGeneratedAttribute]
public TypeDefinition get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(TypeDefinition value);
    [CompilerGeneratedAttribute]
public List`1<Effect> get_Effects();
    [CompilerGeneratedAttribute]
public void set_Effects(List`1<Effect> value);
    [CompilerGeneratedAttribute]
public Scope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(Scope value);
    [CompilerGeneratedAttribute]
public TypeReference get_Factory();
    [CompilerGeneratedAttribute]
public void set_Factory(TypeReference value);
    public MethodReference GetFactoryMethod();
    public bool Validate(ILogger log);
}
internal class AspectInjector.Core.Models.Assets : object {
    [CompilerGeneratedAttribute]
private List`1<AspectDefinition> <Aspects>k__BackingField;
    public List`1<AspectDefinition> Aspects { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AspectDefinition> get_Aspects();
    [CompilerGeneratedAttribute]
public void set_Aspects(List`1<AspectDefinition> value);
}
public abstract class AspectInjector.Core.Models.Effect : object {
    [CompilerGeneratedAttribute]
private UInt32 <Priority>k__BackingField;
    public UInt32 Priority { get; protected set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Priority();
    [CompilerGeneratedAttribute]
protected void set_Priority(UInt32 value);
    public abstract virtual bool Equals(Effect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public abstract virtual bool IsApplicableFor(IMemberDefinition target);
    public abstract virtual bool Validate(AspectDefinition aspect, ILogger log);
    public virtual string ToString();
}
public class AspectInjector.Core.Models.InjectionDefinition : object {
    [CompilerGeneratedAttribute]
private IMemberDefinition <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private AspectDefinition <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Effect <Effect>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CustomAttribute> <Triggers>k__BackingField;
    public IMemberDefinition Target { get; internal set; }
    public UInt32 Priority { get; internal set; }
    public AspectDefinition Source { get; internal set; }
    public Effect Effect { get; internal set; }
    public List`1<CustomAttribute> Triggers { get; internal set; }
    [CompilerGeneratedAttribute]
public IMemberDefinition get_Target();
    [CompilerGeneratedAttribute]
internal void set_Target(IMemberDefinition value);
    [CompilerGeneratedAttribute]
public UInt32 get_Priority();
    [CompilerGeneratedAttribute]
internal void set_Priority(UInt32 value);
    [CompilerGeneratedAttribute]
public AspectDefinition get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(AspectDefinition value);
    [CompilerGeneratedAttribute]
public Effect get_Effect();
    [CompilerGeneratedAttribute]
internal void set_Effect(Effect value);
    [CompilerGeneratedAttribute]
public List`1<CustomAttribute> get_Triggers();
    [CompilerGeneratedAttribute]
internal void set_Triggers(List`1<CustomAttribute> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InjectionDefinition other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class AspectInjector.Core.Processor : PatcherBase {
    private IAspectReader _aspectExtractor;
    private IAspectWeaver _aspectWeaver;
    private IEnumerable`1<IEffectWeaver> _effectWeavers;
    private IInjectionReader _injectionCollector;
    protected Rule GenericInfoRule { get; }
    protected Rule GenericErrorRule { get; }
    public Processor(IAspectReader aspectExtractor, IInjectionReader injectionCollector, IAspectWeaver aspectWeaver, IEnumerable`1<IEffectWeaver> effectWeavers, ILogger logger);
    protected virtual Rule get_GenericInfoRule();
    protected virtual Rule get_GenericErrorRule();
    protected virtual bool PatchAssembly(AssemblyDefinition assembly, bool optimize, bool verbose);
}
public class AspectInjector.Core.Services.AspectReader : object {
    private static ConcurrentDictionary`2<TypeDefinition, AspectDefinition> _cache;
    private IEnumerable`1<IEffectReader> _effectExtractors;
    private ILogger _log;
    public AspectReader(IEnumerable`1<IEffectReader> effectExtractors, ILogger logger);
    private static AspectReader();
    public sealed virtual IReadOnlyCollection`1<AspectDefinition> ReadAll(AssemblyDefinition assembly);
    public sealed virtual AspectDefinition Read(TypeDefinition type);
    private CustomAttribute ExtractAspectAttribute(TypeDefinition type);
    private IEnumerable`1<Effect> ExtractEffects(TypeDefinition type);
    private List`1<Effect> ExtractEffectsFromProvider(ICustomAttributeProvider host);
    [CompilerGeneratedAttribute]
private IEnumerable`1<AspectDefinition> <ReadAll>b__4_0(ModuleDefinition m);
    [CompilerGeneratedAttribute]
private bool <ReadAll>b__4_1(AspectDefinition a);
}
public class AspectInjector.Core.Services.AspectWeaver : object {
    private ILogger _log;
    public AspectWeaver(ILogger logger);
    public sealed virtual void WeaveGlobalAssests(AspectDefinition target);
    private void EnsureSingletonField(AspectDefinition aspect);
}
[IsReadOnlyAttribute]
internal class AspectInjector.Core.Services.InjectionInfo : ValueType {
    public AspectDefinition aspect;
    public ushort priority;
    public PropagateTo propagation;
    public Regex filter;
    public InjectionInfo(AspectDefinition aspect, ushort priority, PropagateTo propagation, Regex filter);
}
public class AspectInjector.Core.Services.InjectionReader : object {
    private IAspectReader _aspectReader;
    private ILogger _log;
    public InjectionReader(IAspectReader aspectReader, ILogger logger);
    public sealed virtual IReadOnlyCollection`1<InjectionDefinition> ReadAll(AssemblyDefinition assembly);
    protected virtual IEnumerable`1<InjectionDefinition> ExtractInjections(ICustomAttributeProvider target);
    protected virtual IEnumerable`1<InjectionDefinition> ExtractInterfaceInjections(ICustomAttributeProvider target, InterfaceImplementation implementation);
    protected static IReadOnlyList`1<CustomAttribute> FindInjections(TypeDefinition type);
    private IEnumerable`1<InjectionInfo> ParseInjectionAttributes(IReadOnlyList`1<CustomAttribute> injectionAttrs, IMemberDefinition debugRef);
    private IEnumerable`1<InjectionDefinition> FindApplicableMembers(ICustomAttributeProvider target, InjectionInfo injection, CustomAttribute trigger);
    private bool IsMemberSkipped(IMemberDefinition member);
    private bool IsTypeSkipped(TypeDefinition type);
    private IEnumerable`1<InjectionDefinition> CreateInjections(IMemberDefinition target, InjectionInfo injection, CustomAttribute trigger);
    private bool IsAspectMember(IMemberDefinition member);
    private bool IsTriggerMember(IMemberDefinition member, HashSet`1<TypeDefinition> triggerTypes);
    private InjectionDefinition MergeInjections(InjectionDefinition a1, InjectionDefinition a2);
    [IteratorStateMachineAttribute("AspectInjector.Core.Services.InjectionReader/<OrderByInheritance>d__15")]
private IEnumerable`1<InjectionDefinition> OrderByInheritance(IEnumerable`1<InjectionDefinition> injections);
}
public static class AspectInjector.Core.WellKnownTypes : object {
    public static string Injection;
    public static string Aspect;
    public static string Mixin;
    public static string Advice;
    public static string Argument;
    public static string SkipInjection;
    public static StandardType Attribute_Array;
    public static StandardType Object_Array;
    public static StandardType Object;
    public static StandardType CompilerGeneratedAttribute;
    public static StandardType DebuggerHiddenAttribute;
    public static StandardType DebuggerStepThroughAttribute;
    public static StandardType Func_ObjectArray_Object;
    private static WellKnownTypes();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [NullableContextAttribute("1")]
public CompilerFeatureRequiredAttribute(string feature);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
