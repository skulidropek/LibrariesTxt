[ExtensionAttribute]
public static class FluentIL.Arrays : object {
    [ExtensionAttribute]
public static Cut CreateArray(Cut& cut, TypeReference elementType, PointCut[] elements);
    [ExtensionAttribute]
public static Cut GetByIndex(Cut& pc, TypeReference elementType, int index);
    [ExtensionAttribute]
public static Cut SetByIndex(Cut& pc, TypeReference elementType, int index, PointCut value);
    private static OpCode GetLoadOpcode(TypeReference elementType);
    private static OpCode GetStoreOpcode(TypeReference elementType);
}
[IsReadOnlyAttribute]
public class FluentIL.Cut : ValueType {
    private bool _entry;
    private bool _exit;
    private Instruction _refInst;
    private MethodBody _body;
    public MethodDefinition Method { get; }
    public TypeSystem TypeSystem { get; }
    private Collection`1<Instruction> Instructions { get; }
    public Cut(MethodBody body, bool entry, bool exit);
    public Cut(MethodBody body, Instruction instruction);
    public MethodDefinition get_Method();
    public TypeSystem get_TypeSystem();
    private Collection`1<Instruction> get_Instructions();
    public Cut Next();
    public Cut Prev();
    public Cut SkipNops();
    public Cut Here(PointCut pc);
    public Cut Write(Instruction instruction);
    public Instruction Emit(OpCode opCode, object operand);
    public Instruction Emit(OpCode opCode);
    public Cut Replace(Instruction instruction);
    public Cut Remove();
    private void Redirect(Instruction source, Instruction next, Instruction prev);
}
public static class FluentIL.CutEvents : object {
    [CompilerGeneratedAttribute]
private static Action`1<MethodBody> <OnModify>k__BackingField;
    public static Action`1<MethodBody> OnModify { get; public set; }
    private static CutEvents();
    [CompilerGeneratedAttribute]
public static Action`1<MethodBody> get_OnModify();
    [CompilerGeneratedAttribute]
public static void set_OnModify(Action`1<MethodBody> value);
}
internal class FluentIL.Extensions.AssemblyNameReferenceComparer : object {
    public static AssemblyNameReferenceComparer Instance;
    private static AssemblyNameReferenceComparer();
    public sealed virtual bool Equals(AssemblyNameReference x, AssemblyNameReference y);
    public sealed virtual int GetHashCode(AssemblyNameReference obj);
}
[ExtensionAttribute]
public static class FluentIL.Extensions.CecilReferenceExtensions : object {
    [ExtensionAttribute]
public static bool Match(TypeReference tr1, TypeReference tr2);
    [ExtensionAttribute]
public static bool Match(TypeReference tr1, StandardType type);
    [ExtensionAttribute]
public static bool Implements(TypeReference tr, TypeReference interface);
    [ExtensionAttribute]
public static bool IsAsync(MethodDefinition m);
    [ExtensionAttribute]
public static bool IsIterator(MethodDefinition m);
    [ExtensionAttribute]
public static bool IsUnsafe(MethodDefinition m);
    [ExtensionAttribute]
public static bool IsNormalMethod(MethodDefinition m);
    [ExtensionAttribute]
public static bool IsExplicitImplementationOf(MethodDefinition m, MethodReference ifaceMethod);
    [ExtensionAttribute]
public static TypeReference GetEnumType(TypeDefinition enumtype);
}
[ExtensionAttribute]
public static class FluentIL.Extensions.GenericsExtensions : object {
    [ExtensionAttribute]
public static void CloneTo(Collection`1<GenericParameter> from, IGenericParameterProvider to);
}
[ExtensionAttribute]
public static class FluentIL.Extensions.MemberDefinitionExtensions : object {
    [ExtensionAttribute]
public static PropertyDefinition FindProperty(TypeDefinition typeDef, string name);
    [ExtensionAttribute]
public static FieldDefinition FindField(TypeDefinition typeDef, string name);
    [ExtensionAttribute]
public static bool IsCallCompatible(MemberReference member);
    [ExtensionAttribute]
public static TypeReference MakeSelfReference(TypeDefinition definition);
    [ExtensionAttribute]
public static FieldReference MakeReference(FieldDefinition definition, TypeReference ownerTypeRef);
    [ExtensionAttribute]
public static MethodReference MakeReference(MethodReference definition, TypeReference ownerTypeRef);
    [ExtensionAttribute]
public static GenericInstanceMethod MakeGenericInstanceMethod(MethodReference self, TypeReference[] arguments);
}
[ExtensionAttribute]
public static class FluentIL.Extensions.PointCutExtensions : object {
    [ExtensionAttribute]
public static Cut Write(Cut& pc, OpCode opCode, object operand);
    [ExtensionAttribute]
public static Cut Write(Cut& pc, OpCode opCode);
    [ExtensionAttribute]
public static Cut Replace(Cut& pc, OpCode opCode, object operand);
    [ExtensionAttribute]
public static Cut Replace(Cut& pc, OpCode opCode);
    [ExtensionAttribute]
public static TypeReference Import(Cut& cut, TypeReference tr);
    [ExtensionAttribute]
public static TypeReference Import(Cut& cut, StandardType st);
    [ExtensionAttribute]
public static MethodReference Import(Cut& cut, MethodReference mr);
    [ExtensionAttribute]
public static FieldReference Import(Cut& cut, FieldReference fr);
}
[ExtensionAttribute]
public static class FluentIL.Extensions.TypeSystemExtension : object {
    private static Dictionary`2<ValueTuple`2<StandardType, ModuleDefinition>, TypeReference> _typeCache;
    private static List`1<ValueTuple`2<string, ModuleDefinition>> _invalidHints;
    private static TypeSystemExtension();
    [ExtensionAttribute]
public static TypeReference ImportStandardType(ModuleDefinition module, StandardType standardType);
    private static TypeReference GetTypeRef(StandardType type, ModuleDefinition module);
    private static IMetadataScope GetMetadataScope(ModuleDefinition module, StandardType type);
}
public class FluentIL.Logging.ConsoleLogger : object {
    private string _toolName;
    [CompilerGeneratedAttribute]
private bool <IsErrorThrown>k__BackingField;
    public bool IsErrorThrown { get; private set; }
    public ConsoleLogger(string toolName);
    [CompilerGeneratedAttribute]
public virtual bool get_IsErrorThrown();
    [CompilerGeneratedAttribute]
private void set_IsErrorThrown(bool value);
    public sealed virtual void Log(Rule rule, SequencePoint sp, String[] messages);
    private void WriteInfo(string location, string message);
    private void WriteWarning(string id, string location, string message);
    private void WriteError(string id, string location, string message);
}
public interface FluentIL.Logging.ILogger {
    public bool IsErrorThrown { get; }
    public abstract virtual bool get_IsErrorThrown();
    public abstract virtual void Log(Rule rule, SequencePoint sp, String[] messages);
}
[ExtensionAttribute]
public static class FluentIL.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static void Log(ILogger log, Rule rule, String[] messages);
    [ExtensionAttribute]
public static void Log(ILogger log, Rule rule, ICustomAttributeProvider ap, String[] messages);
    [ExtensionAttribute]
public static void Log(ILogger log, Rule rule, IMemberDefinition md, String[] messages);
    [ExtensionAttribute]
public static void Log(ILogger log, Rule rule, MethodDefinition md, String[] messages);
    [ExtensionAttribute]
public static void Log(ILogger log, Rule rule, TypeDefinition td, String[] messages);
    private static SequencePoint GetSPFromMethod(MethodDefinition md);
}
[ExtensionAttribute]
public static class FluentIL.MethodEditor : object {
    [ExtensionAttribute]
public static void BeforeInstruction(MethodBody body, Instruction instruction, PointCut action);
    [ExtensionAttribute]
public static void AfterInstruction(MethodBody body, Instruction instruction, PointCut action);
    [ExtensionAttribute]
public static void AfterEntry(MethodBody body, PointCut action);
    [ExtensionAttribute]
public static void BeforeExit(MethodBody body, PointCut action);
    [ExtensionAttribute]
public static void Append(MethodBody body, PointCut action);
    [ExtensionAttribute]
public static void Before(MethodBody body, Instruction instruction, PointCut action);
    [ExtensionAttribute]
public static void Instead(MethodBody body, PointCut action);
    [ExtensionAttribute]
public static void Mark(MethodDefinition method, TypeReference attribute, CustomAttributeArgument[] args);
    [ExtensionAttribute]
public static Instruction GetCodeStart(MethodBody body);
    private static bool IsOwnConstructor(MethodReference methodReference, TypeDefinition owner);
    [ExtensionAttribute]
public static void OnLoadField(MethodBody body, FieldReference field, PointCut pc, Instruction startingFrom);
    [ExtensionAttribute]
public static void OnStoreVar(MethodBody body, VariableReference variable, PointCut pc, Instruction startingFrom);
    [ExtensionAttribute]
public static void OnCall(MethodBody body, MethodReference method, PointCut pc, Instruction startingFrom);
    [ExtensionAttribute]
public static void OnEveryOccasionOf(MethodBody body, Func`2<Instruction, bool> predicate, PointCut pc, Instruction startingFrom);
}
public abstract class FluentIL.PatcherBase : object {
    protected ILogger _log;
    protected Rule GenericInfoRule { get; }
    protected Rule GenericErrorRule { get; }
    protected PatcherBase(ILogger logger);
    public void Process(string assemblyFile, IReadOnlyList`1<string> references, bool optimize, bool verbose);
    public void Process(string assemblyFile, IAssemblyResolver resolver, bool optimize, bool verbose);
    protected virtual IAssemblyResolver GetResolver(string assemblyFile, IReadOnlyList`1<string> references);
    private AssemblyDefinition ReadAssembly(string assemblyFile, IAssemblyResolver resolver, bool readSymbols, bool verbose);
    private void WriteAssembly(AssemblyDefinition assembly, bool writeSymbols, bool verbose);
    private bool AreSymbolsFound(string dllPath);
    protected abstract virtual Rule get_GenericInfoRule();
    protected abstract virtual Rule get_GenericErrorRule();
    protected abstract virtual bool PatchAssembly(AssemblyDefinition assembly, bool optimize, bool verbose);
}
public class FluentIL.PointCut : MulticastDelegate {
    public PointCut(object object, IntPtr method);
    public virtual Cut Invoke(Cut& modreq(System.Runtime.InteropServices.InAttribute) cut);
    public virtual IAsyncResult BeginInvoke(Cut& modreq(System.Runtime.InteropServices.InAttribute) cut, AsyncCallback callback, object object);
    public virtual Cut EndInvoke(Cut& modreq(System.Runtime.InteropServices.InAttribute) cut, IAsyncResult result);
}
public class FluentIL.Resolvers.CachedAssemblyResolver : BaseAssemblyResolver {
    private Dictionary`2<string, AssemblyDefinition> _cache;
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
    protected virtual AssemblyDefinition LookupAssembly(AssemblyNameReference name, ReaderParameters parameters);
    protected internal void RegisterAssembly(AssemblyDefinition assembly);
}
public class FluentIL.Resolvers.KnownReferencesAssemblyResolver : CachedAssemblyResolver {
    private List`1<string> _references;
    public void AddReference(string assemblyPath);
    protected virtual AssemblyDefinition LookupAssembly(AssemblyNameReference name, ReaderParameters parameters);
    private AssemblyDefinition GetAssembly(string file, ReaderParameters parameters);
}
public class FluentIL.StandardType : object {
    public static StandardType MethodBase;
    public static StandardType Attribute;
    public static StandardType Type;
    public static StandardType RuntimeTypeHandle;
    public static StandardType RuntimeMethodHandle;
    public static StandardType AsyncStateMachineAttribute;
    public static StandardType IteratorStateMachineAttribute;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<StandardType> <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AssemblyHints>k__BackingField;
    public string Namespace { get; }
    public string Name { get; }
    public bool IsValueType { get; }
    public bool IsArray { get; }
    public IReadOnlyList`1<StandardType> Elements { get; }
    public IReadOnlyList`1<string> AssemblyHints { get; }
    public StandardType(string namespace, string name, bool isValueType, bool isArray, IReadOnlyList`1<StandardType> elements, IReadOnlyList`1<string> assemblyHints);
    private static StandardType();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsValueType();
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<StandardType> get_Elements();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AssemblyHints();
    public virtual string ToString();
    public StandardType MakeArray();
}
[ExtensionAttribute]
public static class FluentIL.Statements : object {
    [ExtensionAttribute]
public static Cut Return(Cut& cut);
    [ExtensionAttribute]
public static Cut Call(Cut& cut, MethodReference method, PointCut args);
    [ExtensionAttribute]
public static Cut IfEqual(Cut& pc, PointCut left, PointCut right, PointCut pos, PointCut neg);
    private static Cut Compare(Cut& cut, PointCut left, PointCut right, OpCode cmp, PointCut pos, PointCut neg);
    private static Cut Compare(Cut& cut, PointCut left, PointCut right, OpCode cmp, OpCode brexit, PointCut action);
}
[ExtensionAttribute]
public static class FluentIL.TypeMembers : object {
    [ExtensionAttribute]
public static Cut ThisOrStatic(Cut& cut);
    [ExtensionAttribute]
public static Cut ThisOrNull(Cut& cut);
    [ExtensionAttribute]
public static Cut This(Cut& cut);
    [ExtensionAttribute]
public static Cut Load(Cut& cut, VariableDefinition variable);
    [ExtensionAttribute]
public static Cut Load(Cut& cut, ParameterReference par);
    [ExtensionAttribute]
public static Cut Load(Cut& cut, FieldReference field);
    [ExtensionAttribute]
public static Cut LoadRef(Cut& cut, VariableDefinition variable);
    [ExtensionAttribute]
public static Cut LoadRef(Cut& cut, ParameterReference par);
    [ExtensionAttribute]
public static Cut LoadRef(Cut& cut, FieldReference field);
    [ExtensionAttribute]
public static Cut Store(Cut& cut, FieldReference field, PointCut value);
    [ExtensionAttribute]
public static Cut Store(Cut& cut, VariableDefinition variable, PointCut value);
    [ExtensionAttribute]
public static Cut Store(Cut& cut, ParameterReference par, PointCut value);
}
[ExtensionAttribute]
public static class FluentIL.Values : object {
    [ExtensionAttribute]
public static Cut Pop(Cut& pc);
    [ExtensionAttribute]
public static Cut Null(Cut& pc);
    [ExtensionAttribute]
public static Cut Dup(Cut& pc);
    [ExtensionAttribute]
public static Cut Delegate(Cut& cut, MethodReference method);
    [ExtensionAttribute]
public static Cut TypeOf(Cut& cut, TypeReference type);
    [ExtensionAttribute]
public static Cut MethodOf(Cut& cut, MethodReference method);
    [ExtensionAttribute]
public static Cut Value(Cut& pc, object value);
    [ExtensionAttribute]
public static Cut Primitive(Cut& pc, object value);
    [ExtensionAttribute]
public static Cut Cast(Cut& cut, TypeReference typeOnStack, TypeReference expectedType);
    private static Cut StoreByReference(Cut& pc, TypeReference elemType);
    private static Cut LoadByReference(Cut& pc, TypeReference elemType);
    private static Cut AttributeArgument(Cut& cut, CustomAttributeArgument argument);
    private static MethodReference GetTypeFromHandleMethod_Ref(Cut& cut);
    private static MethodReference GetMethodFromHandleMethod_Ref(Cut& cut);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [NullableContextAttribute("1")]
public CompilerFeatureRequiredAttribute(string feature);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
