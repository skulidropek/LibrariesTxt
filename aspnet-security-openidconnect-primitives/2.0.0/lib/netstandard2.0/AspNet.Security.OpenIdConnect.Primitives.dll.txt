public static class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectConstants : object {
}
public class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectConverter : JsonConverter {
    public virtual bool CanConvert(Type type);
    public virtual object ReadJson(JsonReader reader, Type type, object value, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAcrValues(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetScopes(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool HasAcrValue(OpenIdConnectRequest request, string value);
    [ExtensionAttribute]
public static bool HasPrompt(OpenIdConnectRequest request, string prompt);
    [ExtensionAttribute]
public static bool HasResponseType(OpenIdConnectRequest request, string type);
    [ExtensionAttribute]
public static bool HasScope(OpenIdConnectRequest request, string scope);
    [ExtensionAttribute]
public static bool IsAuthorizationRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsConfidential(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsConfigurationRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsCryptographyRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsIntrospectionRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsLogoutRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsRevocationRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsTokenRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsUserinfoRequest(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsNoneFlow(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsAuthorizationCodeFlow(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsImplicitFlow(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsHybridFlow(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsFragmentResponseMode(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsQueryResponseMode(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsFormPostResponseMode(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsAuthorizationCodeGrantType(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsClientCredentialsGrantType(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsPasswordGrantType(OpenIdConnectRequest request);
    [ExtensionAttribute]
public static bool IsRefreshTokenGrantType(OpenIdConnectRequest request);
    [IteratorStateMachineAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectExtensions/<GetValues>d__26")]
private static IEnumerable`1<string> GetValues(string source, Char[] separators);
    private static bool HasValue(string source, string value, Char[] separators);
    private static StringSegment TrimStart(StringSegment segment, Char[] separators);
    private static StringSegment TrimEnd(StringSegment segment, Char[] separators);
    private static StringSegment Trim(StringSegment segment, Char[] separators);
    private static bool IsSeparator(char character, Char[] separators);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Parameters: {Parameters.Count}")]
[JsonConverterAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectConverter")]
public class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectMessage : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, OpenIdConnectParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    public Nullable`1<OpenIdConnectParameter> Item { get; public set; }
    protected Dictionary`2<string, OpenIdConnectParameter> Parameters { get; }
    [EditorBrowsableAttribute("1")]
protected Dictionary`2<string, object> Properties { get; }
    public OpenIdConnectMessage(IEnumerable`1<KeyValuePair`2<string, JToken>> parameters);
    public OpenIdConnectMessage(IEnumerable`1<KeyValuePair`2<string, OpenIdConnectParameter>> parameters);
    public OpenIdConnectMessage(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public OpenIdConnectMessage(IEnumerable`1<KeyValuePair`2<string, String[]>> parameters);
    public OpenIdConnectMessage(IEnumerable`1<KeyValuePair`2<string, StringValues>> parameters);
    public Nullable`1<OpenIdConnectParameter> get_Item(string name);
    public void set_Item(string name, Nullable`1<OpenIdConnectParameter> value);
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, OpenIdConnectParameter> get_Parameters();
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, object> get_Properties();
    public OpenIdConnectMessage AddParameter(string name, OpenIdConnectParameter value);
    [EditorBrowsableAttribute("1")]
public OpenIdConnectMessage AddProperty(string name, object value);
    public Nullable`1<OpenIdConnectParameter> GetParameter(string name);
    [IteratorStateMachineAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectMessage/<GetParameters>d__18")]
public IEnumerable`1<KeyValuePair`2<string, OpenIdConnectParameter>> GetParameters();
    [IteratorStateMachineAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectMessage/<GetProperties>d__19")]
[EditorBrowsableAttribute("1")]
public IEnumerable`1<KeyValuePair`2<string, object>> GetProperties();
    [EditorBrowsableAttribute("1")]
public object GetProperty(string name);
    [EditorBrowsableAttribute("1")]
public T GetProperty(string name);
    public bool HasParameter(string name);
    [EditorBrowsableAttribute("1")]
public bool HasProperty(string name);
    public OpenIdConnectMessage RemoveParameter(string name);
    [EditorBrowsableAttribute("1")]
public OpenIdConnectMessage RemoveProperty(string name);
    public OpenIdConnectMessage SetParameter(string name, Nullable`1<OpenIdConnectParameter> value);
    [EditorBrowsableAttribute("1")]
public OpenIdConnectMessage SetProperty(string name, object value);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectParameter : ValueType {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Nullable`1<OpenIdConnectParameter> Item { get; }
    public Nullable`1<OpenIdConnectParameter> Item { get; }
    [EditorBrowsableAttribute("2")]
public object Value { get; }
    public OpenIdConnectParameter(bool value);
    public OpenIdConnectParameter(Nullable`1<bool> value);
    public OpenIdConnectParameter(JToken value);
    public OpenIdConnectParameter(long value);
    public OpenIdConnectParameter(Nullable`1<long> value);
    public OpenIdConnectParameter(string value);
    public OpenIdConnectParameter(String[] value);
    public Nullable`1<OpenIdConnectParameter> get_Item(int index);
    public Nullable`1<OpenIdConnectParameter> get_Item(string name);
    [CompilerGeneratedAttribute]
public object get_Value();
    public sealed virtual bool Equals(OpenIdConnectParameter parameter);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public Nullable`1<OpenIdConnectParameter> GetParameter(int index);
    public Nullable`1<OpenIdConnectParameter> GetParameter(string name);
    [IteratorStateMachineAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectParameter/<GetParameters>d__19")]
public IEnumerable`1<KeyValuePair`2<string, OpenIdConnectParameter>> GetParameters();
    public virtual string ToString();
    public static bool op_Equality(OpenIdConnectParameter left, OpenIdConnectParameter right);
    public static bool op_Inequality(OpenIdConnectParameter left, OpenIdConnectParameter right);
    public static bool op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static Nullable`1<bool> op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static JArray op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static JObject op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static JToken op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static JValue op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static long op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static Nullable`1<long> op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static string op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static String[] op_Explicit(Nullable`1<OpenIdConnectParameter> parameter);
    public static OpenIdConnectParameter op_Implicit(bool value);
    public static OpenIdConnectParameter op_Implicit(Nullable`1<bool> value);
    public static OpenIdConnectParameter op_Implicit(JToken value);
    public static OpenIdConnectParameter op_Implicit(long value);
    public static OpenIdConnectParameter op_Implicit(Nullable`1<long> value);
    public static OpenIdConnectParameter op_Implicit(string value);
    public static OpenIdConnectParameter op_Implicit(String[] value);
    private static T Convert(Nullable`1<OpenIdConnectParameter> parameter);
    public static bool IsNullOrEmpty(OpenIdConnectParameter parameter);
}
[DebuggerDisplayAttribute("Parameters: {Parameters.Count}")]
[JsonConverterAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectConverter")]
public class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectRequest : OpenIdConnectMessage {
    public string AccessToken { get; public set; }
    public string AcrValues { get; public set; }
    public string Assertion { get; public set; }
    public String[] Audiences { get; public set; }
    public JObject Claims { get; public set; }
    public string ClaimsLocales { get; public set; }
    public string ClientAssertion { get; public set; }
    public string ClientAssertionType { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public string Code { get; public set; }
    public string CodeChallenge { get; public set; }
    public string CodeChallengeMethod { get; public set; }
    public string CodeVerifier { get; public set; }
    public string Display { get; public set; }
    public string GrantType { get; public set; }
    public string IdentityProvider { get; public set; }
    public string IdTokenHint { get; public set; }
    public string LoginHint { get; public set; }
    public Nullable`1<long> MaxAge { get; public set; }
    public string Nonce { get; public set; }
    public string Password { get; public set; }
    public string PostLogoutRedirectUri { get; public set; }
    public string Prompt { get; public set; }
    public string RedirectUri { get; public set; }
    public string RefreshToken { get; public set; }
    public string Request { get; public set; }
    public string RequestId { get; public set; }
    public string RequestUri { get; public set; }
    public String[] Resources { get; public set; }
    public string ResponseMode { get; public set; }
    public string ResponseType { get; public set; }
    public string Scope { get; public set; }
    public string State { get; public set; }
    public string Token { get; public set; }
    public string TokenTypeHint { get; public set; }
    public JObject Registration { get; public set; }
    public string UiLocales { get; public set; }
    public string Username { get; public set; }
    public OpenIdConnectRequest(IEnumerable`1<KeyValuePair`2<string, JToken>> parameters);
    public OpenIdConnectRequest(IEnumerable`1<KeyValuePair`2<string, OpenIdConnectParameter>> parameters);
    public OpenIdConnectRequest(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public OpenIdConnectRequest(IEnumerable`1<KeyValuePair`2<string, String[]>> parameters);
    public OpenIdConnectRequest(IEnumerable`1<KeyValuePair`2<string, StringValues>> parameters);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public string get_AcrValues();
    public void set_AcrValues(string value);
    public string get_Assertion();
    public void set_Assertion(string value);
    public String[] get_Audiences();
    public void set_Audiences(String[] value);
    public JObject get_Claims();
    public void set_Claims(JObject value);
    public string get_ClaimsLocales();
    public void set_ClaimsLocales(string value);
    public string get_ClientAssertion();
    public void set_ClientAssertion(string value);
    public string get_ClientAssertionType();
    public void set_ClientAssertionType(string value);
    public string get_ClientId();
    public void set_ClientId(string value);
    public string get_ClientSecret();
    public void set_ClientSecret(string value);
    public string get_Code();
    public void set_Code(string value);
    public string get_CodeChallenge();
    public void set_CodeChallenge(string value);
    public string get_CodeChallengeMethod();
    public void set_CodeChallengeMethod(string value);
    public string get_CodeVerifier();
    public void set_CodeVerifier(string value);
    public string get_Display();
    public void set_Display(string value);
    public string get_GrantType();
    public void set_GrantType(string value);
    public string get_IdentityProvider();
    public void set_IdentityProvider(string value);
    public string get_IdTokenHint();
    public void set_IdTokenHint(string value);
    public string get_LoginHint();
    public void set_LoginHint(string value);
    public Nullable`1<long> get_MaxAge();
    public void set_MaxAge(Nullable`1<long> value);
    public string get_Nonce();
    public void set_Nonce(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_PostLogoutRedirectUri();
    public void set_PostLogoutRedirectUri(string value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public string get_RedirectUri();
    public void set_RedirectUri(string value);
    public string get_RefreshToken();
    public void set_RefreshToken(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestId();
    public void set_RequestId(string value);
    public string get_RequestUri();
    public void set_RequestUri(string value);
    public String[] get_Resources();
    public void set_Resources(String[] value);
    public string get_ResponseMode();
    public void set_ResponseMode(string value);
    public string get_ResponseType();
    public void set_ResponseType(string value);
    public string get_Scope();
    public void set_Scope(string value);
    public string get_State();
    public void set_State(string value);
    public string get_Token();
    public void set_Token(string value);
    public string get_TokenTypeHint();
    public void set_TokenTypeHint(string value);
    public JObject get_Registration();
    public void set_Registration(JObject value);
    public string get_UiLocales();
    public void set_UiLocales(string value);
    public string get_Username();
    public void set_Username(string value);
}
[DebuggerDisplayAttribute("Parameters: {Parameters.Count}")]
[JsonConverterAttribute("AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectConverter")]
public class AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectResponse : OpenIdConnectMessage {
    public string AccessToken { get; public set; }
    public string Code { get; public set; }
    public string Error { get; public set; }
    public string ErrorDescription { get; public set; }
    public string ErrorUri { get; public set; }
    public Nullable`1<long> ExpiresIn { get; public set; }
    public string IdToken { get; public set; }
    public string RefreshToken { get; public set; }
    public string Scope { get; public set; }
    public string State { get; public set; }
    public string TokenType { get; public set; }
    public OpenIdConnectResponse(IEnumerable`1<KeyValuePair`2<string, JToken>> parameters);
    public OpenIdConnectResponse(IEnumerable`1<KeyValuePair`2<string, OpenIdConnectParameter>> parameters);
    public OpenIdConnectResponse(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public OpenIdConnectResponse(IEnumerable`1<KeyValuePair`2<string, String[]>> parameters);
    public OpenIdConnectResponse(IEnumerable`1<KeyValuePair`2<string, StringValues>> parameters);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public string get_Code();
    public void set_Code(string value);
    public string get_Error();
    public void set_Error(string value);
    public string get_ErrorDescription();
    public void set_ErrorDescription(string value);
    public string get_ErrorUri();
    public void set_ErrorUri(string value);
    public Nullable`1<long> get_ExpiresIn();
    public void set_ExpiresIn(Nullable`1<long> value);
    public string get_IdToken();
    public void set_IdToken(string value);
    public string get_RefreshToken();
    public void set_RefreshToken(string value);
    public string get_Scope();
    public void set_Scope(string value);
    public string get_State();
    public void set_State(string value);
    public string get_TokenType();
    public void set_TokenType(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
