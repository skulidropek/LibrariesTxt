internal static class ApiMarker : object {
}
internal class Guard : object {
    [NullableContextAttribute("1")]
public static T ThrowIfNull(T argument, bool throwOnEmptyString, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.AzureKeyVault.AzureKeyVaultHealthCheck : object {
    private AzureKeyVaultOptions _options;
    private Uri _keyVaultUri;
    private TokenCredential _azureCredential;
    private static ConcurrentDictionary`2<Uri, SecretClient> _secretClientsHolder;
    private static ConcurrentDictionary`2<Uri, KeyClient> _keyClientsHolder;
    private static ConcurrentDictionary`2<Uri, CertificateClient> _certificateClientsHolder;
    public AzureKeyVaultHealthCheck(Uri keyVaultUri, TokenCredential credential, AzureKeyVaultOptions options);
    private static AzureKeyVaultHealthCheck();
    [AsyncStateMachineAttribute("HealthChecks.AzureKeyVault.AzureKeyVaultHealthCheck/<CheckHealthAsync>d__7")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
    private KeyClient CreateKeyClient();
    private SecretClient CreateSecretClient();
    private CertificateClient CreateCertificateClient();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.AzureKeyVault.AzureKeyVaultOptions : object {
    internal HashSet`1<string> _secrets;
    internal HashSet`1<string> _keys;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<string, bool>> _certificates;
    internal IEnumerable`1<string> Secrets { get; }
    internal IEnumerable`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<string, bool>> Certificates { get; }
    internal IEnumerable`1<string> get_Secrets();
    internal IEnumerable`1<string> get_Keys();
    internal List`1<ValueTuple`2<string, bool>> get_Certificates();
    public AzureKeyVaultOptions AddSecret(string secretName);
    public AzureKeyVaultOptions AddKey(string keyName);
    public AzureKeyVaultOptions AddCertificate(string certificateName, bool checkExpired);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AzureKeyVaultHealthChecksBuilderExtensions : object {
    private static string KEYVAULT_NAME;
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureKeyVault(IHealthChecksBuilder builder, Uri keyVaultServiceUri, TokenCredential credential, Action`1<AzureKeyVaultOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureKeyVault(IHealthChecksBuilder builder, Uri keyVaultServiceUri, TokenCredential credential, Action`2<IServiceProvider, AzureKeyVaultOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureKeyVault(IHealthChecksBuilder builder, Func`2<IServiceProvider, Uri> keyVaultServiceUriFactory, TokenCredential credential, Action`2<IServiceProvider, AzureKeyVaultOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
