internal static class ApiMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ClientCache : object {
    public static T GetOrAdd(string key, Func`2<string, T> clientFactory);
    public static T GetOrAddDisposable(string key, Func`2<string, T> clientFactory);
    [AsyncStateMachineAttribute("ClientCache/<GetOrAddDisposableAsync>d__2`1")]
public static ValueTask`1<T> GetOrAddDisposableAsync(string key, Func`2<string, ValueTask`1<T>> clientFactory);
    [AsyncStateMachineAttribute("ClientCache/<GetOrAddAsyncDisposableAsync>d__3`1")]
public static ValueTask`1<T> GetOrAddAsyncDisposableAsync(string key, Func`2<string, T> clientFactory);
    [AsyncStateMachineAttribute("ClientCache/<GetOrAddAsyncDisposableAsync>d__4`1")]
public static ValueTask`1<T> GetOrAddAsyncDisposableAsync(string key, Func`2<string, ValueTask`1<T>> clientFactory);
}
internal class Guard : object {
    [NullableContextAttribute("1")]
public static T ThrowIfNull(T argument, bool throwOnEmptyString, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.AzureStorage.AzureBlobStorageHealthCheck : object {
    private BlobServiceClient _blobServiceClient;
    private AzureBlobStorageHealthCheckOptions _options;
    [NullableContextAttribute("2")]
public AzureBlobStorageHealthCheck(string connectionString, string containerName, BlobClientOptions clientOptions);
    public AzureBlobStorageHealthCheck(Uri blobServiceUri, TokenCredential credential, string containerName, BlobClientOptions clientOptions);
    public AzureBlobStorageHealthCheck(BlobServiceClient blobServiceClient, AzureBlobStorageHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.AzureStorage.AzureBlobStorageHealthCheck/<CheckHealthAsync>d__5")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HealthChecks.AzureStorage.AzureBlobStorageHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    public string ContainerName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.AzureStorage.AzureFileShareHealthCheck : object {
    private ShareServiceClient _shareServiceClient;
    private AzureFileShareHealthCheckOptions _options;
    public AzureFileShareHealthCheck(string connectionString, string shareName);
    public AzureFileShareHealthCheck(ShareServiceClient shareServiceClient, AzureFileShareHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.AzureStorage.AzureFileShareHealthCheck/<CheckHealthAsync>d__4")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HealthChecks.AzureStorage.AzureFileShareHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private string <ShareName>k__BackingField;
    public string ShareName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ShareName();
    [CompilerGeneratedAttribute]
public void set_ShareName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.AzureStorage.AzureQueueStorageHealthCheck : object {
    private QueueServiceClient _queueServiceClient;
    private AzureQueueStorageHealthCheckOptions _options;
    public AzureQueueStorageHealthCheck(string connectionString, string queueName);
    public AzureQueueStorageHealthCheck(Uri queueServiceUri, TokenCredential credential, string queueName);
    public AzureQueueStorageHealthCheck(QueueServiceClient queueServiceClient, AzureQueueStorageHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.AzureStorage.AzureQueueStorageHealthCheck/<CheckHealthAsync>d__5")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HealthChecks.AzureStorage.AzureQueueStorageHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    public string QueueName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_QueueName();
    [CompilerGeneratedAttribute]
public void set_QueueName(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AzureStorageHealthCheckBuilderExtensions : object {
    private static string AZUREBLOB_NAME;
    private static string AZUREFILESHARE_NAME;
    private static string AZUREQUEUE_NAME;
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureBlobStorage(IHealthChecksBuilder builder, string connectionString, string containerName, BlobClientOptions clientOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureBlobStorage(IHealthChecksBuilder builder, Uri blobServiceUri, TokenCredential credential, string containerName, BlobClientOptions clientOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureBlobStorage(IHealthChecksBuilder builder, Action`1<AzureBlobStorageHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureBlobStorage(IHealthChecksBuilder builder, Func`2<IServiceProvider, BlobServiceClient> clientFactory, Action`1<AzureBlobStorageHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureBlobStorage(IHealthChecksBuilder builder, Action`2<IServiceProvider, AzureBlobStorageHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureBlobStorage(IHealthChecksBuilder builder, Func`2<IServiceProvider, BlobServiceClient> clientFactory, Action`2<IServiceProvider, AzureBlobStorageHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureFileShare(IHealthChecksBuilder builder, string connectionString, string shareName, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureFileShare(IHealthChecksBuilder builder, Action`1<AzureFileShareHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureFileShare(IHealthChecksBuilder builder, Action`2<IServiceProvider, AzureFileShareHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureQueueStorage(IHealthChecksBuilder builder, string connectionString, string queueName, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureQueueStorage(IHealthChecksBuilder builder, Uri queueServiceUri, TokenCredential credential, string queueName, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureQueueStorage(IHealthChecksBuilder builder, Action`1<AzureQueueStorageHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddAzureQueueStorage(IHealthChecksBuilder builder, Action`2<IServiceProvider, AzureQueueStorageHealthCheckOptions> configureOptions, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
