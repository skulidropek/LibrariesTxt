internal static class ApiMarker : object {
}
internal class Guard : object {
    [NullableContextAttribute("1")]
public static T ThrowIfNull(T argument, bool throwOnEmptyString, string paramName);
}
internal static class HealthCheckResultTask : object {
    [NullableAttribute("1")]
public static Task`1<HealthCheckResult> Healthy;
    private static HealthCheckResultTask();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.Core.ImapCommands : object {
    public static string Login(string user, string password);
    public static string SelectFolder(string folder);
    public static string ListFolders();
    public static string StartTLS();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.Network.Core.ImapConnection : MailConnection {
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    private ImapConnectionType _connectionType;
    public bool IsAuthenticated { get; private set; }
    public bool Connected { get; }
    public ImapConnectionType ConnectionType { get; private set; }
    internal ImapConnection(ImapConnectionOptions options);
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
private void set_IsAuthenticated(bool value);
    public bool get_Connected();
    public ImapConnectionType get_ConnectionType();
    private void set_ConnectionType(ImapConnectionType value);
    private void ComputeDefaultValues();
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.ImapConnection/<AuthenticateAsync>d__12")]
public Task`1<bool> AuthenticateAsync(string user, string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.ImapConnection/<UpgradeToSecureConnectionAsync>d__13")]
private Task`1<bool> UpgradeToSecureConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.ImapConnection/<SelectFolderAsync>d__14")]
public Task`1<bool> SelectFolderAsync(string folder, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.Core.ImapConnectionOptions : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private ImapConnectionType <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInvalidRemoteCertificates>k__BackingField;
    public string Host { get; public set; }
    public int Port { get; public set; }
    public ImapConnectionType ConnectionType { get; public set; }
    public bool AllowInvalidRemoteCertificates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public ImapConnectionType get_ConnectionType();
    [CompilerGeneratedAttribute]
public void set_ConnectionType(ImapConnectionType value);
    [CompilerGeneratedAttribute]
public bool get_AllowInvalidRemoteCertificates();
    [CompilerGeneratedAttribute]
public void set_AllowInvalidRemoteCertificates(bool value);
}
public enum HealthChecks.Network.Core.ImapConnectionType : Enum {
    public int value__;
    public static ImapConnectionType AUTO;
    public static ImapConnectionType SSL_TLS;
    public static ImapConnectionType STARTTLS;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.Core.MailConnection : object {
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSSL>k__BackingField;
    [NullableAttribute("2")]
protected TcpClient _tcpClient;
    [NullableAttribute("2")]
protected Stream _stream;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> _validateRemoteCertificate;
    private bool _disposed;
    private bool _allowInvalidCertificates;
    public int Port { get; protected set; }
    public string Host { get; protected set; }
    protected bool UseSSL { get; protected set; }
    public MailConnection(string host, int port, bool useSSL, bool allowInvalidCertificates);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
protected void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
protected void set_Host(string value);
    [CompilerGeneratedAttribute]
protected bool get_UseSSL();
    [CompilerGeneratedAttribute]
protected void set_UseSSL(bool value);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.MailConnection/<ConnectAsync>d__18")]
public Task`1<bool> ConnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.MailConnection/<GetStreamAsync>d__19")]
protected Task`1<Stream> GetStreamAsync(CancellationToken cancellationToken);
    protected SslStream GetSSLStream(Stream stream);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.MailConnection/<ExecuteCommandAsync>d__22")]
protected Task`1<bool> ExecuteCommandAsync(string command, CommandResultAction action, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.Core.SmtpCommands : object {
    public static string STARTTLS();
    public static string EHLO(string host);
    public static string AUTHLOGIN();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.Network.Core.SmtpConnection : MailConnection {
    private SmtpConnectionOptions _options;
    private SmtpConnectionType _connectionType;
    public SmtpConnectionType ConnectionType { get; private set; }
    private bool ShouldUpgradeConnection { get; }
    public SmtpConnection(SmtpConnectionOptions options);
    public SmtpConnectionType get_ConnectionType();
    private void set_ConnectionType(SmtpConnectionType value);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.SmtpConnection/<ConnectAsync>d__6")]
public Task`1<bool> ConnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.SmtpConnection/<AuthenticateAsync>d__7")]
public Task`1<bool> AuthenticateAsync(string userName, string password, CancellationToken cancellationToken);
    private bool get_ShouldUpgradeConnection();
    private void ComputeDefaultValues();
    [AsyncStateMachineAttribute("HealthChecks.Network.Core.SmtpConnection/<UpgradeToSecureConnectionAsync>d__11")]
private Task`1<bool> UpgradeToSecureConnectionAsync(CancellationToken cancellationToken);
    private string ToBase64(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.Core.SmtpConnectionOptions : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInvalidRemoteCertificates>k__BackingField;
    public SmtpConnectionType ConnectionType;
    public string Host { get; public set; }
    public int Port { get; public set; }
    public bool AllowInvalidRemoteCertificates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public bool get_AllowInvalidRemoteCertificates();
    [CompilerGeneratedAttribute]
public void set_AllowInvalidRemoteCertificates(bool value);
}
public enum HealthChecks.Network.Core.SmtpConnectionType : Enum {
    public int value__;
    public static SmtpConnectionType AUTO;
    public static SmtpConnectionType SSL;
    public static SmtpConnectionType TLS;
    public static SmtpConnectionType PLAIN;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.DnsRegistration : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Resolutions>k__BackingField;
    internal string Host { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] Resolutions { get; internal set; }
    public DnsRegistration(string host);
    [CompilerGeneratedAttribute]
internal string get_Host();
    [CompilerGeneratedAttribute]
internal String[] get_Resolutions();
    [CompilerGeneratedAttribute]
internal void set_Resolutions(String[] value);
}
public class HealthChecks.Network.DnsResolveCountOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, ValueTuple`2<int, Nullable`1<int>>> HostRegistrations;
    [NullableContextAttribute("1")]
public DnsResolveCountOptions AddHost(string hostName, int minHosts, Nullable`1<int> maxHosts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.DnsResolveHealthCheck : object {
    private DnsResolveOptions _options;
    public DnsResolveHealthCheck(DnsResolveOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.DnsResolveHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.DnsResolveHostCountHealthCheck : object {
    private DnsResolveCountOptions _options;
    public DnsResolveHostCountHealthCheck(DnsResolveCountOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.DnsResolveHostCountHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.DnsResolveOptions : object {
    internal Dictionary`2<string, DnsRegistration> ConfigureHosts;
    [CompilerGeneratedAttribute]
private bool <CheckAllHosts>k__BackingField;
    public bool CheckAllHosts { get; public set; }
    internal void AddHost(string host, DnsRegistration registration);
    public DnsResolveOptions WithCheckAllHosts();
    [CompilerGeneratedAttribute]
public bool get_CheckAllHosts();
    [CompilerGeneratedAttribute]
public void set_CheckAllHosts(bool value);
}
[ExtensionAttribute]
public static class HealthChecks.Network.Extensions.TaskExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("HealthChecks.Network.Extensions.TaskExtensions/<WithCancellationTokenAsync>d__0")]
[ExtensionAttribute]
public static Task WithCancellationTokenAsync(Task task, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("HealthChecks.Network.Extensions.TaskExtensions/<WithCancellationTokenAsync>d__1`1")]
[ExtensionAttribute]
public static Task`1<T> WithCancellationTokenAsync(Task`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static bool ContainsArray(Byte[] source, ReadOnlySpan`1<byte> segment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.FtpHealthCheck : object {
    private FtpHealthCheckOptions _options;
    public FtpHealthCheck(FtpHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.FtpHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
    private WebRequest CreateFtpWebRequest(string host, bool createFile, NetworkCredential credentials);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.FtpHealthCheckOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, ValueTuple`3<string, bool, NetworkCredential>> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllHosts>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, ValueTuple`3<string, bool, NetworkCredential>> Hosts { get; }
    public bool CheckAllHosts { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, ValueTuple`3<string, bool, NetworkCredential>> get_Hosts();
    public FtpHealthCheckOptions AddHost(string host, bool createFile, NetworkCredential credentials);
    public FtpHealthCheckOptions WithCheckAllHosts();
    [CompilerGeneratedAttribute]
public bool get_CheckAllHosts();
    [CompilerGeneratedAttribute]
public void set_CheckAllHosts(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.ImapHealthCheck : object {
    private ImapHealthCheckOptions _options;
    public ImapHealthCheck(ImapHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.ImapHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.Network.ImapHealthCheck/<ExecuteAuthenticatedUserActionsAsync>d__3")]
private Task`1<HealthCheckResult> ExecuteAuthenticatedUserActionsAsync(HealthCheckContext context, ImapConnection imapConnection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.ImapHealthCheckOptions : ImapConnectionOptions {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`2<bool, ValueTuple`2<string, string>> <AccountOptions>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`2<bool, string> <FolderOptions>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ValueTuple`2<bool, ValueTuple`2<string, string>> AccountOptions { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ValueTuple`2<bool, string> FolderOptions { get; private set; }
    [CompilerGeneratedAttribute]
internal ValueTuple`2<bool, ValueTuple`2<string, string>> get_AccountOptions();
    [CompilerGeneratedAttribute]
private void set_AccountOptions(ValueTuple`2<bool, ValueTuple`2<string, string>> value);
    [CompilerGeneratedAttribute]
internal ValueTuple`2<bool, string> get_FolderOptions();
    [CompilerGeneratedAttribute]
private void set_FolderOptions(ValueTuple`2<bool, string> value);
    public void LoginWith(string userName, string password);
    public void CheckFolderExists(string inboxName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.PingHealthCheck : object {
    private PingHealthCheckOptions _options;
    public PingHealthCheck(PingHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.PingHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.PingHealthCheckOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, ValueTuple`2<string, int>> <ConfiguredHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllHosts>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, ValueTuple`2<string, int>> ConfiguredHosts { get; }
    public bool CheckAllHosts { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, ValueTuple`2<string, int>> get_ConfiguredHosts();
    [CompilerGeneratedAttribute]
public bool get_CheckAllHosts();
    [CompilerGeneratedAttribute]
public void set_CheckAllHosts(bool value);
    public PingHealthCheckOptions AddHost(string host, int timeout);
    public PingHealthCheckOptions WithCheckAllHosts();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SftpConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AuthenticationMethod> <AuthenticationMethods>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ValueTuple`2<bool, string> FileCreationOptions;
    internal string Host { get; }
    internal string UserName { get; internal set; }
    internal int Port { get; }
    internal List`1<AuthenticationMethod> AuthenticationMethods { get; }
    internal SftpConfiguration(string host, int port, string userName, List`1<AuthenticationMethod> authenticationMethods);
    [CompilerGeneratedAttribute]
internal string get_Host();
    [CompilerGeneratedAttribute]
internal string get_UserName();
    [CompilerGeneratedAttribute]
internal void set_UserName(string value);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
internal List`1<AuthenticationMethod> get_AuthenticationMethods();
    internal void CreateRemoteFile(string remoteFilePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SftpConfigurationBuilder : object {
    private string _host;
    private int _port;
    private string _userName;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<bool, string> _fileCreationOptions;
    [CompilerGeneratedAttribute]
private List`1<AuthenticationMethod> <AuthenticationMethods>k__BackingField;
    internal List`1<AuthenticationMethod> AuthenticationMethods { get; }
    public SftpConfigurationBuilder(string host, int port, string userName);
    [CompilerGeneratedAttribute]
internal List`1<AuthenticationMethod> get_AuthenticationMethods();
    public SftpConfigurationBuilder AddPasswordAuthentication(string password);
    public SftpConfigurationBuilder AddPrivateKeyAuthentication(string privateKey, string passphrase);
    public SftpConfigurationBuilder AddPrivateKeyAuthentication(PrivateKeyFile privateKey);
    public SftpConfigurationBuilder CreateFileOnConnect(string remoteFilePath);
    public SftpConfiguration Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SftpHealthCheck : object {
    private SftpHealthCheckOptions _options;
    public SftpHealthCheck(SftpHealthCheckOptions options);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SftpHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SftpConfiguration> <ConfiguredHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllHosts>k__BackingField;
    internal Dictionary`2<string, SftpConfiguration> ConfiguredHosts { get; }
    public bool CheckAllHosts { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, SftpConfiguration> get_ConfiguredHosts();
    public SftpHealthCheckOptions AddHost(SftpConfiguration sftpConfiguration);
    public SftpHealthCheckOptions WithCheckAllHosts();
    [CompilerGeneratedAttribute]
public bool get_CheckAllHosts();
    [CompilerGeneratedAttribute]
public void set_CheckAllHosts(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SmtpHealthCheck : object {
    private SmtpHealthCheckOptions _options;
    public SmtpHealthCheck(SmtpHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.SmtpHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
public class HealthChecks.Network.SmtpHealthCheckOptions : SmtpConnectionOptions {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`2<bool, ValueTuple`2<string, string>> <AccountOptions>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ValueTuple`2<bool, ValueTuple`2<string, string>> AccountOptions { get; private set; }
    [CompilerGeneratedAttribute]
internal ValueTuple`2<bool, ValueTuple`2<string, string>> get_AccountOptions();
    [CompilerGeneratedAttribute]
private void set_AccountOptions(ValueTuple`2<bool, ValueTuple`2<string, string>> value);
    [NullableContextAttribute("1")]
public void LoginWith(string userName, string password);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SslHealthCheck : object {
    private SslHealthCheckOptions _options;
    public SslHealthCheck(SslHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.SslHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.Network.SslHealthCheck/<GetSslCertificateAsync>d__3")]
private Task`1<X509Certificate2> GetSslCertificateAsync(TcpClient client, string host);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.SslHealthCheckOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`3<string, int, int>> ConfiguredHosts;
    [CompilerGeneratedAttribute]
private AddressFamily <AddressFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllHosts>k__BackingField;
    public AddressFamily AddressFamily { get; public set; }
    public bool CheckAllHosts { get; public set; }
    public SslHealthCheckOptions AddHost(string host, int port, int checkLeftDays);
    public SslHealthCheckOptions WithCheckAllHosts();
    [CompilerGeneratedAttribute]
public AddressFamily get_AddressFamily();
    [CompilerGeneratedAttribute]
public void set_AddressFamily(AddressFamily value);
    [CompilerGeneratedAttribute]
public bool get_CheckAllHosts();
    [CompilerGeneratedAttribute]
public void set_CheckAllHosts(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.TcpHealthCheck : object {
    private TcpHealthCheckOptions _options;
    public TcpHealthCheck(TcpHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.Network.TcpHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.Network.TcpHealthCheckOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<string, int>> ConfiguredHosts;
    [CompilerGeneratedAttribute]
private bool <CheckAllHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private AddressFamily <AddressFamily>k__BackingField;
    public bool CheckAllHosts { get; public set; }
    public AddressFamily AddressFamily { get; public set; }
    public TcpHealthCheckOptions AddHost(string host, int port);
    public TcpHealthCheckOptions WithCheckAllHosts();
    [CompilerGeneratedAttribute]
public bool get_CheckAllHosts();
    [CompilerGeneratedAttribute]
public void set_CheckAllHosts(bool value);
    [CompilerGeneratedAttribute]
public AddressFamily get_AddressFamily();
    [CompilerGeneratedAttribute]
public void set_AddressFamily(AddressFamily value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.DnsResolveOptionsExtensions : object {
    [ExtensionAttribute]
public static Func`1<ValueTuple`2<DnsResolveOptions, DnsRegistration>> ResolveHost(DnsResolveOptions options, string host);
    [ExtensionAttribute]
public static DnsResolveOptions To(Func`1<ValueTuple`2<DnsResolveOptions, DnsRegistration>> registrationFunc, String[] resolutions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NetworkHealthCheckBuilderExtensions : object {
    private static string PING_NAME;
    private static string SFTP_NAME;
    private static string FTP_NAME;
    private static string DNS_NAME;
    private static string DNS_COUNT_NAME;
    private static string IMAP_NAME;
    private static string SMTP_NAME;
    private static string TCP_NAME;
    private static string SSL_NAME;
    [ExtensionAttribute]
public static IHealthChecksBuilder AddPingHealthCheck(IHealthChecksBuilder builder, Action`1<PingHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddSftpHealthCheck(IHealthChecksBuilder builder, Action`1<SftpHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddFtpHealthCheck(IHealthChecksBuilder builder, Action`1<FtpHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddDnsResolveHealthCheck(IHealthChecksBuilder builder, Action`1<DnsResolveOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddDnsResolveHostCountHealthCheck(IHealthChecksBuilder builder, Action`1<DnsResolveCountOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddImapHealthCheck(IHealthChecksBuilder builder, Action`1<ImapHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddSmtpHealthCheck(IHealthChecksBuilder builder, Action`1<SmtpHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddTcpHealthCheck(IHealthChecksBuilder builder, Action`1<TcpHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddSslHealthCheck(IHealthChecksBuilder builder, Action`1<SslHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
}
[ExtensionAttribute]
internal static class StringListExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HealthCheckResult GetHealthState(List`1<string> instance, HealthCheckContext context);
}
