internal static class ApiMarker : object {
}
internal class Guard : object {
    [NullableContextAttribute("1")]
public static T ThrowIfNull(T argument, bool throwOnEmptyString, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.NpgSql.NpgSqlHealthCheck : object {
    private NpgSqlHealthCheckOptions _options;
    public NpgSqlHealthCheck(NpgSqlHealthCheckOptions options);
    [AsyncStateMachineAttribute("HealthChecks.NpgSql.NpgSqlHealthCheck/<CheckHealthAsync>d__2")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HealthChecks.NpgSql.NpgSqlHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDataSource <DataSource>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<NpgsqlConnection> <Configure>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, HealthCheckResult> <HealthCheckResultBuilder>k__BackingField;
    public string ConnectionString { get; internal set; }
    public NpgsqlDataSource DataSource { get; internal set; }
    [NullableAttribute("1")]
public string CommandText { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<NpgsqlConnection> Configure { get; public set; }
    public Func`2<object, HealthCheckResult> HealthCheckResultBuilder { get; public set; }
    [NullableContextAttribute("1")]
public NpgSqlHealthCheckOptions(string connectionString);
    [NullableContextAttribute("1")]
public NpgSqlHealthCheckOptions(NpgsqlDataSource dataSource);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public NpgsqlDataSource get_DataSource();
    [CompilerGeneratedAttribute]
internal void set_DataSource(NpgsqlDataSource value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CommandText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public Action`1<NpgsqlConnection> get_Configure();
    [CompilerGeneratedAttribute]
public void set_Configure(Action`1<NpgsqlConnection> value);
    [CompilerGeneratedAttribute]
public Func`2<object, HealthCheckResult> get_HealthCheckResultBuilder();
    [CompilerGeneratedAttribute]
public void set_HealthCheckResultBuilder(Func`2<object, HealthCheckResult> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NpgSqlHealthCheckBuilderExtensions : object {
    private static string NAME;
    internal static string HEALTH_QUERY;
    [ExtensionAttribute]
public static IHealthChecksBuilder AddNpgSql(IHealthChecksBuilder builder, string connectionString, string healthQuery, Action`1<NpgsqlConnection> configure, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddNpgSql(IHealthChecksBuilder builder, Func`2<IServiceProvider, string> connectionStringFactory, string healthQuery, Action`1<NpgsqlConnection> configure, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddNpgSql(IHealthChecksBuilder builder, Func`2<IServiceProvider, NpgsqlDataSource> dbDataSourceFactory, string healthQuery, Action`1<NpgsqlConnection> configure, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddNpgSql(IHealthChecksBuilder builder, NpgSqlHealthCheckOptions options, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
}
