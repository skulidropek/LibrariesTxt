internal static class ApiMarker : object {
}
internal class Guard : object {
    [NullableContextAttribute("1")]
public static T ThrowIfNull(T argument, bool throwOnEmptyString, string paramName);
}
internal static class HealthCheckResultTask : object {
    [NullableAttribute("1")]
public static Task`1<HealthCheckResult> Healthy;
    private static HealthCheckResultTask();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.DiskStorageHealthCheck : object {
    private DiskStorageOptions _options;
    public DiskStorageHealthCheck(DiskStorageOptions options);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.DiskStorageOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, ValueTuple`2<string, long>> <ConfiguredDrives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllDrives>k__BackingField;
    public ErrorDescription FailedDescription;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, ValueTuple`2<string, long>> ConfiguredDrives { get; }
    public bool CheckAllDrives { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, ValueTuple`2<string, long>> get_ConfiguredDrives();
    public DiskStorageOptions AddDrive(string driveName, long minimumFreeMegabytes);
    [CompilerGeneratedAttribute]
public bool get_CheckAllDrives();
    [CompilerGeneratedAttribute]
public void set_CheckAllDrives(bool value);
    public DiskStorageOptions WithCheckAllDrives();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.FileHealthCheck : object {
    private FileHealthCheckOptions _fileOptions;
    public FileHealthCheck(FileHealthCheckOptions fileOptions);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.FileHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllFiles>k__BackingField;
    public List`1<string> Files { get; }
    public bool CheckAllFiles { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Files();
    [CompilerGeneratedAttribute]
public bool get_CheckAllFiles();
    [CompilerGeneratedAttribute]
public void set_CheckAllFiles(bool value);
    public FileHealthCheckOptions AddFile(string file);
    public FileHealthCheckOptions WithCheckAllFiles();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.FolderHealthCheck : object {
    private FolderHealthCheckOptions _folderOptions;
    public FolderHealthCheck(FolderHealthCheckOptions folderOptions);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.FolderHealthCheckOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Folders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckAllFolders>k__BackingField;
    public IList`1<string> Folders { get; public set; }
    public bool CheckAllFolders { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Folders();
    [CompilerGeneratedAttribute]
public void set_Folders(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_CheckAllFolders();
    [CompilerGeneratedAttribute]
public void set_CheckAllFolders(bool value);
    public FolderHealthCheckOptions AddFolder(string folder);
    public FolderHealthCheckOptions WithCheckAllFolders();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.MaximumValueHealthCheck`1 : object {
    private T _maximumValue;
    private Func`1<T> _currentValueFunc;
    public MaximumValueHealthCheck`1(T maximumValue, Func`1<T> currentValueFunc);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
public class HealthChecks.System.ProcessAllocatedMemoryHealthCheck : object {
    private int _maximumMegabytesAllocated;
    public ProcessAllocatedMemoryHealthCheck(int maximumMegabytesAllocated);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.System.ProcessHealthCheck : object {
    private string _processName;
    private Func`2<Process[], bool> _predicate;
    public ProcessHealthCheck(string processName, Func`2<Process[], bool> predicate);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SupportedOSPlatformAttribute("windows")]
public class HealthChecks.System.WindowsServiceHealthCheck : object {
    private string _serviceName;
    private Func`2<ServiceController, bool> _predicate;
    [NullableAttribute("2")]
private string _machineName;
    public WindowsServiceHealthCheck(string serviceName, Func`2<ServiceController, bool> predicate, string machineName);
    public sealed virtual Task`1<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken);
    private ServiceController GetServiceController();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SystemHealthCheckBuilderExtensions : object {
    private static string DISK_NAME;
    private static string MEMORY_NAME;
    private static string WORKINGSET_NAME;
    private static string VIRTUALMEMORYSIZE_NAME;
    private static string PROCESS_NAME;
    private static string PROCESS_ALLOCATED_MEMORY;
    private static string WINDOWS_SERVICE_NAME;
    private static string FOLDER_NAME;
    private static string FILE_NAME;
    [ExtensionAttribute]
public static IHealthChecksBuilder AddDiskStorageHealthCheck(IHealthChecksBuilder builder, Action`1<DiskStorageOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddPrivateMemoryHealthCheck(IHealthChecksBuilder builder, long maximumMemoryBytes, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddWorkingSetHealthCheck(IHealthChecksBuilder builder, long maximumMemoryBytes, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddVirtualMemorySizeHealthCheck(IHealthChecksBuilder builder, long maximumMemoryBytes, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddProcessHealthCheck(IHealthChecksBuilder builder, string processName, Func`2<Process[], bool> predicate, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddProcessAllocatedMemoryHealthCheck(IHealthChecksBuilder builder, int maximumMegabytesAllocated, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static IHealthChecksBuilder AddWindowsServiceHealthCheck(IHealthChecksBuilder builder, string serviceName, Func`2<ServiceController, bool> predicate, string machineName, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddFolder(IHealthChecksBuilder builder, Action`1<FolderHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddFile(IHealthChecksBuilder builder, Action`1<FileHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddFile(IHealthChecksBuilder builder, Action`2<IServiceProvider, FileHealthCheckOptions> setup, string name, Nullable`1<HealthStatus> failureStatus, IEnumerable`1<string> tags, Nullable`1<TimeSpan> timeout);
}
[ExtensionAttribute]
internal static class StringListExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HealthCheckResult GetHealthState(List`1<string> instance, HealthCheckContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
