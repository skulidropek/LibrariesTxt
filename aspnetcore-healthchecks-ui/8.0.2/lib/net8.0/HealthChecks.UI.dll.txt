internal static class ApiMarker : object {
}
internal class Guard : object {
    [NullableContextAttribute("1")]
public static T ThrowIfNull(T argument, bool throwOnEmptyString, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.UI.Configuration.HealthCheckSetting : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Name { get; public set; }
    public string Uri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.UI.Configuration.Options : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <CustomStylesheets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UIPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiPath>k__BackingField;
    public bool UseRelativeApiPath;
    [CompilerGeneratedAttribute]
private string <WebhookPath>k__BackingField;
    public bool UseRelativeWebhookPath;
    [CompilerGeneratedAttribute]
private string <ResourcesPath>k__BackingField;
    public bool UseRelativeResourcesPath;
    [CompilerGeneratedAttribute]
private bool <AsideMenuOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageTitle>k__BackingField;
    internal ICollection`1<string> CustomStylesheets { get; }
    public string UIPath { get; public set; }
    public string ApiPath { get; public set; }
    public string WebhookPath { get; public set; }
    public string ResourcesPath { get; public set; }
    public bool AsideMenuOpened { get; public set; }
    public string PageTitle { get; public set; }
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_CustomStylesheets();
    [CompilerGeneratedAttribute]
public string get_UIPath();
    [CompilerGeneratedAttribute]
public void set_UIPath(string value);
    [CompilerGeneratedAttribute]
public string get_ApiPath();
    [CompilerGeneratedAttribute]
public void set_ApiPath(string value);
    [CompilerGeneratedAttribute]
public string get_WebhookPath();
    [CompilerGeneratedAttribute]
public void set_WebhookPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResourcesPath();
    [CompilerGeneratedAttribute]
public void set_ResourcesPath(string value);
    [CompilerGeneratedAttribute]
public bool get_AsideMenuOpened();
    [CompilerGeneratedAttribute]
public void set_AsideMenuOpened(bool value);
    [CompilerGeneratedAttribute]
public string get_PageTitle();
    [CompilerGeneratedAttribute]
public void set_PageTitle(string value);
    public Options AddCustomStylesheet(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.UI.Configuration.Settings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<List`1<HealthCheckExecution>, Task> <ConfigureUIApiEndpointResult>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HealthCheckSetting> <HealthChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WebHookNotification> <Webhooks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMigrations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumExecutionHistoriesPerEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EvaluationTimeInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApiMaxActiveRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumSecondsBetweenFailureNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifyUnHealthyOneTimeUntilChange>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IServiceProvider, HttpMessageHandler> <ApiEndpointHttpHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IServiceProvider, HttpClient> <ApiEndpointHttpClientConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <ApiEndpointDelegatingHandlerTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IServiceProvider, HttpMessageHandler> <WebHooksEndpointHttpHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IServiceProvider, HttpClient> <WebHooksEndpointHttpClientConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <WebHooksEndpointDelegatingHandlerTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderText>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<List`1<HealthCheckExecution>, Task> ConfigureUIApiEndpointResult { get; internal set; }
    internal List`1<HealthCheckSetting> HealthChecks { get; internal set; }
    internal List`1<WebHookNotification> Webhooks { get; internal set; }
    internal bool DisableMigrations { get; internal set; }
    internal int MaximumExecutionHistoriesPerEndpoint { get; private set; }
    internal int EvaluationTimeInSeconds { get; internal set; }
    internal int ApiMaxActiveRequests { get; private set; }
    internal int MinimumSecondsBetweenFailureNotifications { get; internal set; }
    internal bool NotifyUnHealthyOneTimeUntilChange { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<IServiceProvider, HttpMessageHandler> ApiEndpointHttpHandler { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`2<IServiceProvider, HttpClient> ApiEndpointHttpClientConfig { get; private set; }
    internal Dictionary`2<string, Type> ApiEndpointDelegatingHandlerTypes { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<IServiceProvider, HttpMessageHandler> WebHooksEndpointHttpHandler { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`2<IServiceProvider, HttpClient> WebHooksEndpointHttpClientConfig { get; private set; }
    internal Dictionary`2<string, Type> WebHooksEndpointDelegatingHandlerTypes { get; internal set; }
    internal string HeaderText { get; private set; }
    [CompilerGeneratedAttribute]
internal Func`2<List`1<HealthCheckExecution>, Task> get_ConfigureUIApiEndpointResult();
    [CompilerGeneratedAttribute]
internal void set_ConfigureUIApiEndpointResult(Func`2<List`1<HealthCheckExecution>, Task> value);
    [CompilerGeneratedAttribute]
internal List`1<HealthCheckSetting> get_HealthChecks();
    [CompilerGeneratedAttribute]
internal void set_HealthChecks(List`1<HealthCheckSetting> value);
    [CompilerGeneratedAttribute]
internal List`1<WebHookNotification> get_Webhooks();
    [CompilerGeneratedAttribute]
internal void set_Webhooks(List`1<WebHookNotification> value);
    [CompilerGeneratedAttribute]
internal bool get_DisableMigrations();
    [CompilerGeneratedAttribute]
internal void set_DisableMigrations(bool value);
    [CompilerGeneratedAttribute]
internal int get_MaximumExecutionHistoriesPerEndpoint();
    [CompilerGeneratedAttribute]
private void set_MaximumExecutionHistoriesPerEndpoint(int value);
    [CompilerGeneratedAttribute]
internal int get_EvaluationTimeInSeconds();
    [CompilerGeneratedAttribute]
internal void set_EvaluationTimeInSeconds(int value);
    [CompilerGeneratedAttribute]
internal int get_ApiMaxActiveRequests();
    [CompilerGeneratedAttribute]
private void set_ApiMaxActiveRequests(int value);
    [CompilerGeneratedAttribute]
internal int get_MinimumSecondsBetweenFailureNotifications();
    [CompilerGeneratedAttribute]
internal void set_MinimumSecondsBetweenFailureNotifications(int value);
    [CompilerGeneratedAttribute]
internal bool get_NotifyUnHealthyOneTimeUntilChange();
    [CompilerGeneratedAttribute]
internal void set_NotifyUnHealthyOneTimeUntilChange(bool value);
    [CompilerGeneratedAttribute]
internal Func`2<IServiceProvider, HttpMessageHandler> get_ApiEndpointHttpHandler();
    [CompilerGeneratedAttribute]
private void set_ApiEndpointHttpHandler(Func`2<IServiceProvider, HttpMessageHandler> value);
    [CompilerGeneratedAttribute]
internal Action`2<IServiceProvider, HttpClient> get_ApiEndpointHttpClientConfig();
    [CompilerGeneratedAttribute]
private void set_ApiEndpointHttpClientConfig(Action`2<IServiceProvider, HttpClient> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Type> get_ApiEndpointDelegatingHandlerTypes();
    [CompilerGeneratedAttribute]
internal void set_ApiEndpointDelegatingHandlerTypes(Dictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
internal Func`2<IServiceProvider, HttpMessageHandler> get_WebHooksEndpointHttpHandler();
    [CompilerGeneratedAttribute]
private void set_WebHooksEndpointHttpHandler(Func`2<IServiceProvider, HttpMessageHandler> value);
    [CompilerGeneratedAttribute]
internal Action`2<IServiceProvider, HttpClient> get_WebHooksEndpointHttpClientConfig();
    [CompilerGeneratedAttribute]
private void set_WebHooksEndpointHttpClientConfig(Action`2<IServiceProvider, HttpClient> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Type> get_WebHooksEndpointDelegatingHandlerTypes();
    [CompilerGeneratedAttribute]
internal void set_WebHooksEndpointDelegatingHandlerTypes(Dictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
internal string get_HeaderText();
    [CompilerGeneratedAttribute]
private void set_HeaderText(string value);
    public Settings AddHealthCheckEndpoint(string name, string uri);
    public Settings AddWebhookNotification(string name, string uri, string payload, string restorePayload, Func`3<string, UIHealthReport, bool> shouldNotifyFunc, Func`3<string, UIHealthReport, string> customMessageFunc, Func`3<string, UIHealthReport, string> customDescriptionFunc);
    public Settings DisableDatabaseMigrations();
    public Settings SetEvaluationTimeInSeconds(int seconds);
    public Settings SetApiMaxActiveRequests(int apiMaxActiveRequests);
    public Settings SetHeaderText(string text);
    public Settings SetMinimumSecondsBetweenFailureNotifications(int seconds);
    public Settings SetNotifyUnHealthyOneTimeUntilChange();
    public Settings UseApiEndpointHttpMessageHandler(Func`2<IServiceProvider, HttpClientHandler> apiEndpointHttpHandler);
    public Settings UseApiEndpointDelegatingHandler();
    public Settings UseWebhookEndpointHttpMessageHandler(Func`2<IServiceProvider, HttpClientHandler> webhookEndpointHttpHandler);
    public Settings UseWebHooksEndpointDelegatingHandler();
    public Settings ConfigureApiEndpointHttpclient(Action`2<IServiceProvider, HttpClient> apiEndpointHttpClientconfig);
    public Settings ConfigureWebhooksEndpointHttpclient(Action`2<IServiceProvider, HttpClient> webhooksEndpointHttpClientconfig);
    public Settings MaximumHistoryEntriesPerEndpoint(int maxValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.UI.Configuration.WebHookNotification : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestoredPayload>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<string, UIHealthReport, bool> <ShouldNotifyFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<string, UIHealthReport, string> <CustomMessageFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<string, UIHealthReport, string> <CustomDescriptionFunc>k__BackingField;
    public string Name { get; public set; }
    public string Uri { get; public set; }
    public string Payload { get; public set; }
    public string RestoredPayload { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<string, UIHealthReport, bool> ShouldNotifyFunc { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<string, UIHealthReport, string> CustomMessageFunc { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<string, UIHealthReport, string> CustomDescriptionFunc { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    [CompilerGeneratedAttribute]
public string get_RestoredPayload();
    [CompilerGeneratedAttribute]
public void set_RestoredPayload(string value);
    [CompilerGeneratedAttribute]
internal Func`3<string, UIHealthReport, bool> get_ShouldNotifyFunc();
    [CompilerGeneratedAttribute]
internal void set_ShouldNotifyFunc(Func`3<string, UIHealthReport, bool> value);
    [CompilerGeneratedAttribute]
internal Func`3<string, UIHealthReport, string> get_CustomMessageFunc();
    [CompilerGeneratedAttribute]
internal void set_CustomMessageFunc(Func`3<string, UIHealthReport, string> value);
    [CompilerGeneratedAttribute]
internal Func`3<string, UIHealthReport, string> get_CustomDescriptionFunc();
    [CompilerGeneratedAttribute]
internal void set_CustomDescriptionFunc(Func`3<string, UIHealthReport, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.ContentType : object {
    public static string JAVASCRIPT;
    public static string CSS;
    public static string HTML;
    public static string PLAIN;
    public static Dictionary`2<string, string> supportedContent;
    private static ContentType();
    public static string FromExtension(string fileExtension);
}
[ExtensionAttribute]
internal static class HealthChecks.UI.Core.Discovery.K8S.Extensions.KubernetesHttpClientExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("HealthChecks.UI.Core.Discovery.K8S.Extensions.KubernetesHttpClientExtensions/<GetServicesAsync>d__0")]
[ExtensionAttribute]
internal static Task`1<V1ServiceList> GetServicesAsync(IKubernetes client, string label, List`1<string> k8sNamespaces, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.Discovery.K8S.KubernetesAddressFactory : object {
    private KubernetesDiscoverySettings _settings;
    public KubernetesAddressFactory(KubernetesDiscoverySettings discoveryOptions);
    public string CreateAddress(V1Service service);
    private static string GetLoadBalancerAddress(V1Service service);
    private string GetServicePortValue(V1Service service);
    private V1ServicePort GetServicePort(V1Service service);
    private string GetServicePortAnnotation(V1Service service);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.Discovery.K8S.KubernetesDiscoveryHostedService : object {
    private KubernetesDiscoverySettings _discoveryOptions;
    private ILogger`1<KubernetesDiscoveryHostedService> _logger;
    private IHostApplicationLifetime _hostLifetime;
    private IServiceProvider _serviceProvider;
    [NullableAttribute("2")]
private IKubernetes _discoveryClient;
    private HttpClient _clusterServiceClient;
    private KubernetesAddressFactory _addressFactory;
    [NullableAttribute("2")]
private Task _executingTask;
    private bool _disposed;
    public KubernetesDiscoveryHostedService(IServiceProvider serviceProvider, IOptions`1<KubernetesDiscoverySettings> discoveryOptions, IHttpClientFactory httpClientFactory, ILogger`1<KubernetesDiscoveryHostedService> logger, IHostApplicationLifetime hostLifetime);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Discovery.K8S.KubernetesDiscoveryHostedService/<StopAsync>d__13")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Discovery.K8S.KubernetesDiscoveryHostedService/<StartK8sServiceAsync>d__14")]
private Task StartK8sServiceAsync(CancellationToken cancellationToken);
    private static bool IsLivenessRegistered(HealthChecksDb livenessDb, string host);
    private static bool IsValidHealthChecksStatusCode(HttpStatusCode statusCode);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Discovery.K8S.KubernetesDiscoveryHostedService/<CallClusterServiceAsync>d__17")]
private Task`1<HttpStatusCode> CallClusterServiceAsync(string host);
    private Task`1<int> RegisterDiscoveredLiveness(HealthChecksDb livenessDb, string host, string name);
    private IKubernetes InitializeKubernetesClient();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.Discovery.K8S.KubernetesDiscoverySettings : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ClusterHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicesLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicesPathAnnotation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicesPortAnnotation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicesSchemeAnnotation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefreshTimeInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Namespaces>k__BackingField;
    public bool Enabled { get; public set; }
    [NullableAttribute("2")]
public string ClusterHost { get; public set; }
    public string HealthPath { get; public set; }
    public string ServicesLabel { get; public set; }
    public string ServicesPathAnnotation { get; public set; }
    public string ServicesPortAnnotation { get; public set; }
    public string ServicesSchemeAnnotation { get; public set; }
    [NullableAttribute("2")]
public string Token { get; public set; }
    public int RefreshTimeInSeconds { get; public set; }
    public List`1<string> Namespaces { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ClusterHost();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ClusterHost(string value);
    [CompilerGeneratedAttribute]
public string get_HealthPath();
    [CompilerGeneratedAttribute]
public void set_HealthPath(string value);
    [CompilerGeneratedAttribute]
public string get_ServicesLabel();
    [CompilerGeneratedAttribute]
public void set_ServicesLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ServicesPathAnnotation();
    [CompilerGeneratedAttribute]
public void set_ServicesPathAnnotation(string value);
    [CompilerGeneratedAttribute]
public string get_ServicesPortAnnotation();
    [CompilerGeneratedAttribute]
public void set_ServicesPortAnnotation(string value);
    [CompilerGeneratedAttribute]
public string get_ServicesSchemeAnnotation();
    [CompilerGeneratedAttribute]
public void set_ServicesSchemeAnnotation(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Token();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_RefreshTimeInSeconds();
    [CompilerGeneratedAttribute]
public void set_RefreshTimeInSeconds(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
public void set_Namespaces(List`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HealthChecks.UI.Core.Discovery.K8S.ServiceType : object {
    public static string LOAD_BALANCER;
    public static string NODE_PORT;
    public static string CLUSTER_IP;
    public static string EXTERNAL_NAME;
}
[ExtensionAttribute]
public static class HealthChecks.UI.Core.Extensions.UriExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsValidHealthCheckEndpoint(Uri uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.HostedService.HealthCheckCollectorHostedService : object {
    private ILogger`1<HealthCheckCollectorHostedService> _logger;
    private IHostApplicationLifetime _lifetime;
    private ServerAddressesService _serverAddressesService;
    private IServiceProvider _serviceProvider;
    private Settings _settings;
    [NullableAttribute("2")]
private Task _executingTask;
    private CancellationTokenSource _cancellationTokenSource;
    public HealthCheckCollectorHostedService(IServiceProvider provider, IOptions`1<Settings> settings, ServerAddressesService serverAddressesService, ILogger`1<HealthCheckCollectorHostedService> logger, IHostApplicationLifetime lifetime);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckCollectorHostedService/<StopAsync>d__9")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    private Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckCollectorHostedService/<CollectAsync>d__11")]
private Task CollectAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.HostedService.HealthCheckReportCollector : object {
    private HealthChecksDb _db;
    private IHealthCheckFailureNotifier _healthCheckFailureNotifier;
    private HttpClient _httpClient;
    private ILogger`1<HealthCheckReportCollector> _logger;
    private ServerAddressesService _serverAddressService;
    private IEnumerable`1<IHealthCheckCollectorInterceptor> _interceptors;
    private Settings _settings;
    private static Dictionary`2<int, Uri> _endpointAddresses;
    private static JsonSerializerOptions _options;
    private bool _disposed;
    public HealthCheckReportCollector(HealthChecksDb db, IHealthCheckFailureNotifier healthCheckFailureNotifier, IHttpClientFactory httpClientFactory, ILogger`1<HealthCheckReportCollector> logger, IOptions`1<Settings> settings, ServerAddressesService serverAddressService, IEnumerable`1<IHealthCheckCollectorInterceptor> interceptors);
    private static HealthCheckReportCollector();
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckReportCollector/<Collect>d__11")]
public sealed virtual Task Collect(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckReportCollector/<GetHealthReportAsync>d__13")]
private Task`1<UIHealthReport> GetHealthReportAsync(HealthCheckConfiguration configuration);
    private Uri GetEndpointUri(HealthCheckConfiguration configuration);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckReportCollector/<HasLivenessRecoveredFromFailureAsync>d__15")]
private Task`1<bool> HasLivenessRecoveredFromFailureAsync(HealthCheckConfiguration configuration);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckReportCollector/<GetHealthCheckExecutionAsync>d__16")]
private Task`1<HealthCheckExecution> GetHealthCheckExecutionAsync(HealthCheckConfiguration configuration);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckReportCollector/<ShouldNotifyAsync>d__17")]
private Task`1<bool> ShouldNotifyAsync(string healthCheckName);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.HealthCheckReportCollector/<SaveExecutionHistoryAsync>d__18")]
private Task SaveExecutionHistoryAsync(HealthCheckConfiguration configuration, UIHealthReport healthReport);
    private static void UpdateUris(HealthCheckExecution execution, HealthCheckConfiguration configuration);
    private void SaveExecutionHistoryEntries(UIHealthReport healthReport, HealthCheckExecution execution, DateTime lastExecutionTime);
    private void ThrowIfDisposed();
}
[NullableContextAttribute("1")]
public interface HealthChecks.UI.Core.HostedService.IHealthCheckReportCollector {
    public abstract virtual Task Collect(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.HostedService.UIInitializationHostedService : object {
    private IServiceProvider _provider;
    private ILogger`1<UIInitializationHostedService> _logger;
    private Settings _settings;
    public UIInitializationHostedService(IServiceProvider provider, ILogger`1<UIInitializationHostedService> logger, IOptions`1<Settings> settings);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.UIInitializationHostedService/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.UIInitializationHostedService/<InitializeDatabaseAsync>d__6")]
private Task InitializeDatabaseAsync(IServiceProvider sp);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.HostedService.UIInitializationHostedService/<ShouldMigrateDatabaseAsync>d__7")]
private Task`1<bool> ShouldMigrateDatabaseAsync(HealthChecksDb context);
}
[NullableContextAttribute("1")]
public interface HealthChecks.UI.Core.IHealthCheckCollectorInterceptor {
    public abstract virtual ValueTask OnCollectExecuting(HealthCheckConfiguration healthCheck);
    public abstract virtual ValueTask OnCollectExecuted(UIHealthReport report);
}
[NullableContextAttribute("1")]
internal interface HealthChecks.UI.Core.IUIResourcesReader {
    public IEnumerable`1<UIResource> UIResources { get; }
    public abstract virtual IEnumerable`1<UIResource> get_UIResources();
}
[NullableContextAttribute("1")]
public interface HealthChecks.UI.Core.Notifications.IHealthCheckFailureNotifier {
    public abstract virtual Task NotifyDown(string name, UIHealthReport report);
    public abstract virtual Task NotifyWakeUp(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.Notifications.WebHookFailureNotifier : object {
    private ILogger`1<WebHookFailureNotifier> _logger;
    private Settings _settings;
    private HealthChecksDb _db;
    private ServerAddressesService _serverAddressesService;
    private HttpClient _httpClient;
    public WebHookFailureNotifier(HealthChecksDb db, IOptions`1<Settings> settings, ServerAddressesService serverAddressesService, ILogger`1<WebHookFailureNotifier> logger, IHttpClientFactory httpClientFactory);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Notifications.WebHookFailureNotifier/<NotifyDown>d__6")]
public sealed virtual Task NotifyDown(string name, UIHealthReport report);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Notifications.WebHookFailureNotifier/<NotifyWakeUp>d__7")]
public sealed virtual Task NotifyWakeUp(string name);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Notifications.WebHookFailureNotifier/<NotifyAsync>d__8")]
internal Task NotifyAsync(string name, UIHealthReport report, bool isHealthy);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Notifications.WebHookFailureNotifier/<IsNotifiedOnWindowTimeAsync>d__9")]
private Task`1<bool> IsNotifiedOnWindowTimeAsync(string livenessName, bool restore);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Notifications.WebHookFailureNotifier/<SaveNotificationAsync>d__10")]
private Task SaveNotificationAsync(HealthCheckFailureNotification notification);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.Notifications.WebHookFailureNotifier/<SendRequestAsync>d__11")]
private Task SendRequestAsync(Uri uri, string name, string payloadContent);
    private string GetFailedMessageFromContent(UIHealthReport healthReport);
    private static string GetFailedDescriptionsFromContent(UIHealthReport healthReport);
    public sealed virtual void Dispose();
    private static ValueTuple`2<string, string> PluralizeHealthcheck(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.ServerAddressesService : object {
    private IServer _server;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ICollection`1<string> Addresses { get; }
    [NullableAttribute("2")]
private IServerAddressesFeature AddressesFeature { get; }
    public ServerAddressesService(IServer server);
    internal ICollection`1<string> get_Addresses();
    [NullableContextAttribute("2")]
private IServerAddressesFeature get_AddressesFeature();
    internal string AbsoluteUriFromRelative(string relativeUrl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.UIEmbeddedResourcesReader : object {
    private Assembly _assembly;
    public IEnumerable`1<UIResource> UIResources { get; }
    public UIEmbeddedResourcesReader(Assembly assembly);
    public sealed virtual IEnumerable`1<UIResource> get_UIResources();
    private IEnumerable`1<UIResource> ParseEmbeddedResources(String[] embeddedFiles);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.UIEndpointsResourceMapper : object {
    private IUIResourcesReader _reader;
    public UIEndpointsResourceMapper(IUIResourcesReader reader);
    public IEnumerable`1<IEndpointConventionBuilder> Map(IEndpointRouteBuilder builder, Options options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.UIResource : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string Content { get; internal set; }
    public string ContentType { get; }
    public string FileName { get; }
    private UIResource(string fileName, string content, string contentType);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_FileName();
    public static UIResource Create(string fileName, string content, string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HealthChecks.UI.Core.UIResourceExtensions : object {
    [ExtensionAttribute]
public static UIResource GetMainUI(IEnumerable`1<UIResource> resources, Options options);
    [ExtensionAttribute]
public static ICollection`1<UIStylesheet> GetCustomStylesheets(UIResource resource, Options options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Core.UIResourcesMapper : object {
    private IUIResourcesReader _reader;
    public UIResourcesMapper(IUIResourcesReader reader);
    public void Map(IApplicationBuilder app, Options options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.UI.Core.UIStylesheet : object {
    private static string STYLESHEETS_PATH;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourcePath>k__BackingField;
    public string FileName { get; }
    public Byte[] Content { get; }
    public string ResourcePath { get; }
    private UIStylesheet(Options options, string filePath);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    [CompilerGeneratedAttribute]
public string get_ResourcePath();
    public static UIStylesheet Create(Options options, string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HealthChecks.UI.Core.UIWebHooksApiMiddleware : object {
    private JsonSerializerOptions _jsonSerializerOptions;
    private IServiceScopeFactory _serviceScopeFactory;
    public UIWebHooksApiMiddleware(RequestDelegate next, IServiceScopeFactory serviceScopeFactory);
    [AsyncStateMachineAttribute("HealthChecks.UI.Core.UIWebHooksApiMiddleware/<InvokeAsync>d__3")]
public Task InvokeAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.HealthCheckUIConventionBuilder : object {
    private IEnumerable`1<IEndpointConventionBuilder> _endpoints;
    public HealthCheckUIConventionBuilder(IEnumerable`1<IEndpointConventionBuilder> endpoints);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Keys : object {
    internal static string HEALTHCHECKSUI_OLD_SECTION_SETTING_KEY;
    internal static string HEALTHCHECKSUI_SECTION_SETTING_KEY;
    internal static string HEALTHCHECKS_DEFAULT_PATH;
    internal static string HEALTHCHECKS_DEFAULT_DISCOVERY_LABEL;
    internal static string HEALTHCHECKS_SETTINGS_ENDPOINT;
    internal static string HEALTHCHECKS_DEFAULT_DISCOVERY_PATH_ANNOTATION;
    internal static string HEALTHCHECKS_DEFAULT_DISCOVERY_PORT_ANNOTATION;
    internal static string HEALTHCHECKS_DEFAULT_DISCOVERY_SCHEME_ANNOTATION;
    internal static string HEALTHCHECKSUI_KUBERNETES_DISCOVERY_SETTING_KEY;
    internal static string HEALTHCHECKSUI_MAIN_UI_RESOURCE;
    internal static string HEALTHCHECKSUI_MAIN_UI_API_TARGET;
    internal static string HEALTHCHECKSUI_WEBHOOKS_API_TARGET;
    internal static string HEALTHCHECKSUI_RESOURCES_TARGET;
    internal static string HEALTHCHECKSUI_STYLESHEETS_TARGET;
    internal static string HEALTHCHECKSUI_ASIDEMENUEOPENED_TARGET;
    internal static string HEALTHCHECKSUI_SETTINGS_ENDPOINT_TARGET;
    internal static string HEALTHCHECKSUI_PAGE_TITLE;
    internal static string DEFAULT_RESPONSE_CONTENT_TYPE;
    internal static string LIVENESS_BOOKMARK;
    internal static string FAILURE_BOOKMARK;
    internal static string DESCRIPTIONS_BOOKMARK;
    internal static string HEALTH_CHECK_HTTP_CLIENT_NAME;
    internal static string HEALTH_CHECK_WEBHOOK_HTTP_CLIENT_NAME;
    internal static string K8S_CLUSTER_SERVICE_HTTP_CLIENT_NAME;
    internal static string HEALTHCHECKSUI_SETTINGS_TARGET;
    internal static string HEALTHCHECKSUI_SETTINGS_PATH;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Middleware.UIApiEndpointMiddleware : object {
    private JsonSerializerOptions _jsonSerializerOptions;
    private IServiceScopeFactory _serviceScopeFactory;
    private Settings _settings;
    public UIApiEndpointMiddleware(RequestDelegate next, IServiceScopeFactory serviceScopeFactory, IOptions`1<Settings> settings);
    [AsyncStateMachineAttribute("HealthChecks.UI.Middleware.UIApiEndpointMiddleware/<InvokeAsync>d__4")]
public Task InvokeAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Middleware.UIApiRequestLimitingMiddleware : object {
    private RequestDelegate _next;
    private IOptions`1<Settings> _settings;
    private ILogger`1<UIApiEndpointMiddleware> _logger;
    private SemaphoreSlim _semaphore;
    private bool _disposed;
    public UIApiRequestLimitingMiddleware(RequestDelegate next, IOptions`1<Settings> settings, ILogger`1<UIApiEndpointMiddleware> logger);
    [AsyncStateMachineAttribute("HealthChecks.UI.Middleware.UIApiRequestLimitingMiddleware/<InvokeAsync>d__6")]
public Task InvokeAsync(HttpContext context);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HealthChecks.UI.Middleware.UISettingsMiddleware : object {
    private object _uiOutputSettings;
    public UISettingsMiddleware(RequestDelegate next, IOptions`1<Settings> settings);
    public Task InvokeAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHealthChecksUI(IApplicationBuilder app, Action`1<Options> setup);
    [ExtensionAttribute]
public static IApplicationBuilder UseHealthChecksUI(IApplicationBuilder app);
    private static IApplicationBuilder ConfigurePipeline(IApplicationBuilder app, Options options);
    private static void EnsureValidApiOptions(Options options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapHealthChecksUI(IEndpointRouteBuilder builder, Action`1<Options> setupOptions);
    private static void EnsureValidApiOptions(Options options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.DatabaseFacadeExtensions : object {
    private static string IN_MEMORY_DATABASE_PROVIDER;
    [ExtensionAttribute]
public static bool IsInMemory(DatabaseFacade database);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static Settings BindUISettings(IConfiguration configuration, Settings settings);
    [ExtensionAttribute]
public static IConfigurationSection GetSectionWithFallBack(IConfiguration configuration, string section, string fallback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static HealthChecksUIBuilder AddHealthChecksUI(IServiceCollection services, Action`1<Settings> setupSettings);
    [ExtensionAttribute]
public static IServiceCollection AddApiEndpointHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddWebhooksEndpointHttpClient(IServiceCollection services);
    [ExtensionAttribute]
private static IServiceCollection AddKubernetesDiscoveryService(IServiceCollection services);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Diagnostics.HealthChecks.HealthReportExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static List`1<HealthCheckExecutionEntry> ToExecutionEntries(UIHealthReport report);
}
[ExtensionAttribute]
public static class System.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string AsRelativeResource(string resourcePath);
}
